
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000160a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08016340  08016340  00026340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016720  08016720  00026720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016728  08016728  00026728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801672c  0801672c  0002672c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  08016730  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000549c  24000100  08016830  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400559c  08016830  0003559c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   000327ef  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000548e  00000000  00000000  0006291d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002628  00000000  00000000  00067db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002430  00000000  00000000  0006a3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007a90  00000000  00000000  0006c808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003094b  00000000  00000000  00074298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194582  00000000  00000000  000a4be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00239165  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000abe4  00000000  00000000  002391b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016328 	.word	0x08016328

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08016328 	.word	0x08016328

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
	{
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f012 f864 	bl	80126c8 <osEventFlagsSet>
	}
	else
	{
		printf("Unknown Timer Interrupt\n");
	}
}
 8000600:	e018      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim2)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f012 f859 	bl	80126c8 <osEventFlagsSet>
}
 8000616:	e00d      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim3)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f012 f84e 	bl	80126c8 <osEventFlagsSet>
}
 800062c:	e002      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		printf("Unknown Timer Interrupt\n");
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000630:	f015 faca 	bl	8015bc8 <puts>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	240004e8 	.word	0x240004e8
 8000640:	24000b3c 	.word	0x24000b3c
 8000644:	24000534 	.word	0x24000534
 8000648:	24000580 	.word	0x24000580
 800064c:	08016390 	.word	0x08016390

08000650 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	49f2      	ldr	r1, [pc, #968]	; (8000a24 <HAL_UART_RxCpltCallback+0x3d4>)
 800065c:	48f2      	ldr	r0, [pc, #968]	; (8000a28 <HAL_UART_RxCpltCallback+0x3d8>)
 800065e:	f00f fb27 	bl	800fcb0 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000662:	4bf0      	ldr	r3, [pc, #960]	; (8000a24 <HAL_UART_RxCpltCallback+0x3d4>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2be0      	cmp	r3, #224	; 0xe0
 800066c:	f200 83c6 	bhi.w	8000dfc <HAL_UART_RxCpltCallback+0x7ac>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <HAL_UART_RxCpltCallback+0x28>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000a11 	.word	0x08000a11
 800067c:	08000a4d 	.word	0x08000a4d
 8000680:	08000ad3 	.word	0x08000ad3
 8000684:	08000afd 	.word	0x08000afd
 8000688:	08000b25 	.word	0x08000b25
 800068c:	08000b4f 	.word	0x08000b4f
 8000690:	08000b7b 	.word	0x08000b7b
 8000694:	08000ba7 	.word	0x08000ba7
 8000698:	08000bd1 	.word	0x08000bd1
 800069c:	08000c03 	.word	0x08000c03
 80006a0:	08000c25 	.word	0x08000c25
 80006a4:	08000c41 	.word	0x08000c41
 80006a8:	08000c5d 	.word	0x08000c5d
 80006ac:	08000ca7 	.word	0x08000ca7
 80006b0:	08000da1 	.word	0x08000da1
 80006b4:	08000dd1 	.word	0x08000dd1
 80006b8:	080009fd 	.word	0x080009fd
 80006bc:	08000a39 	.word	0x08000a39
 80006c0:	08000abd 	.word	0x08000abd
 80006c4:	08000ae9 	.word	0x08000ae9
 80006c8:	08000b11 	.word	0x08000b11
 80006cc:	08000b39 	.word	0x08000b39
 80006d0:	08000b65 	.word	0x08000b65
 80006d4:	08000b91 	.word	0x08000b91
 80006d8:	08000bbd 	.word	0x08000bbd
 80006dc:	08000be5 	.word	0x08000be5
 80006e0:	08000c17 	.word	0x08000c17
 80006e4:	08000c33 	.word	0x08000c33
 80006e8:	08000c4f 	.word	0x08000c4f
 80006ec:	08000c6b 	.word	0x08000c6b
 80006f0:	08000ce3 	.word	0x08000ce3
 80006f4:	08000dc9 	.word	0x08000dc9
 80006f8:	08000dfd 	.word	0x08000dfd
 80006fc:	08000dfd 	.word	0x08000dfd
 8000700:	08000dfd 	.word	0x08000dfd
 8000704:	08000dfd 	.word	0x08000dfd
 8000708:	08000dfd 	.word	0x08000dfd
 800070c:	08000dfd 	.word	0x08000dfd
 8000710:	08000dfd 	.word	0x08000dfd
 8000714:	08000dfd 	.word	0x08000dfd
 8000718:	08000dfd 	.word	0x08000dfd
 800071c:	08000dfd 	.word	0x08000dfd
 8000720:	08000dfd 	.word	0x08000dfd
 8000724:	08000dfd 	.word	0x08000dfd
 8000728:	08000dfd 	.word	0x08000dfd
 800072c:	08000dfd 	.word	0x08000dfd
 8000730:	08000dfd 	.word	0x08000dfd
 8000734:	08000dfd 	.word	0x08000dfd
 8000738:	08000dfd 	.word	0x08000dfd
 800073c:	08000dfd 	.word	0x08000dfd
 8000740:	08000dfd 	.word	0x08000dfd
 8000744:	08000dfd 	.word	0x08000dfd
 8000748:	08000dfd 	.word	0x08000dfd
 800074c:	08000dfd 	.word	0x08000dfd
 8000750:	08000dfd 	.word	0x08000dfd
 8000754:	08000dfd 	.word	0x08000dfd
 8000758:	08000dfd 	.word	0x08000dfd
 800075c:	08000dfd 	.word	0x08000dfd
 8000760:	08000dfd 	.word	0x08000dfd
 8000764:	08000dfd 	.word	0x08000dfd
 8000768:	08000dfd 	.word	0x08000dfd
 800076c:	08000dfd 	.word	0x08000dfd
 8000770:	08000dfd 	.word	0x08000dfd
 8000774:	08000dfd 	.word	0x08000dfd
 8000778:	08000dfd 	.word	0x08000dfd
 800077c:	08000dfd 	.word	0x08000dfd
 8000780:	08000dfd 	.word	0x08000dfd
 8000784:	08000dfd 	.word	0x08000dfd
 8000788:	08000dfd 	.word	0x08000dfd
 800078c:	08000dfd 	.word	0x08000dfd
 8000790:	08000dfd 	.word	0x08000dfd
 8000794:	08000dfd 	.word	0x08000dfd
 8000798:	08000dfd 	.word	0x08000dfd
 800079c:	08000dfd 	.word	0x08000dfd
 80007a0:	08000dfd 	.word	0x08000dfd
 80007a4:	08000dfd 	.word	0x08000dfd
 80007a8:	08000dfd 	.word	0x08000dfd
 80007ac:	08000dfd 	.word	0x08000dfd
 80007b0:	08000dfd 	.word	0x08000dfd
 80007b4:	08000dfd 	.word	0x08000dfd
 80007b8:	08000dfd 	.word	0x08000dfd
 80007bc:	08000dfd 	.word	0x08000dfd
 80007c0:	08000dfd 	.word	0x08000dfd
 80007c4:	08000dfd 	.word	0x08000dfd
 80007c8:	08000dfd 	.word	0x08000dfd
 80007cc:	08000dfd 	.word	0x08000dfd
 80007d0:	08000dfd 	.word	0x08000dfd
 80007d4:	08000dfd 	.word	0x08000dfd
 80007d8:	08000dfd 	.word	0x08000dfd
 80007dc:	08000dfd 	.word	0x08000dfd
 80007e0:	08000dfd 	.word	0x08000dfd
 80007e4:	08000dfd 	.word	0x08000dfd
 80007e8:	08000dfd 	.word	0x08000dfd
 80007ec:	08000dfd 	.word	0x08000dfd
 80007f0:	08000dfd 	.word	0x08000dfd
 80007f4:	08000dfd 	.word	0x08000dfd
 80007f8:	08000dfd 	.word	0x08000dfd
 80007fc:	08000dfd 	.word	0x08000dfd
 8000800:	08000dfd 	.word	0x08000dfd
 8000804:	08000dfd 	.word	0x08000dfd
 8000808:	08000dfd 	.word	0x08000dfd
 800080c:	08000dfd 	.word	0x08000dfd
 8000810:	08000dfd 	.word	0x08000dfd
 8000814:	08000dfd 	.word	0x08000dfd
 8000818:	08000dfd 	.word	0x08000dfd
 800081c:	08000dfd 	.word	0x08000dfd
 8000820:	08000dfd 	.word	0x08000dfd
 8000824:	08000dfd 	.word	0x08000dfd
 8000828:	08000dfd 	.word	0x08000dfd
 800082c:	08000dfd 	.word	0x08000dfd
 8000830:	08000dfd 	.word	0x08000dfd
 8000834:	08000dfd 	.word	0x08000dfd
 8000838:	08000dfd 	.word	0x08000dfd
 800083c:	08000dfd 	.word	0x08000dfd
 8000840:	08000dfd 	.word	0x08000dfd
 8000844:	08000dfd 	.word	0x08000dfd
 8000848:	08000dfd 	.word	0x08000dfd
 800084c:	08000dfd 	.word	0x08000dfd
 8000850:	08000dfd 	.word	0x08000dfd
 8000854:	08000dfd 	.word	0x08000dfd
 8000858:	08000dfd 	.word	0x08000dfd
 800085c:	08000dfd 	.word	0x08000dfd
 8000860:	08000dfd 	.word	0x08000dfd
 8000864:	08000dfd 	.word	0x08000dfd
 8000868:	08000dfd 	.word	0x08000dfd
 800086c:	08000dfd 	.word	0x08000dfd
 8000870:	08000dfd 	.word	0x08000dfd
 8000874:	08000dfd 	.word	0x08000dfd
 8000878:	08000dfd 	.word	0x08000dfd
 800087c:	08000dfd 	.word	0x08000dfd
 8000880:	08000dfd 	.word	0x08000dfd
 8000884:	08000dfd 	.word	0x08000dfd
 8000888:	08000dfd 	.word	0x08000dfd
 800088c:	08000dfd 	.word	0x08000dfd
 8000890:	08000dfd 	.word	0x08000dfd
 8000894:	08000dfd 	.word	0x08000dfd
 8000898:	08000dfd 	.word	0x08000dfd
 800089c:	08000dfd 	.word	0x08000dfd
 80008a0:	08000dfd 	.word	0x08000dfd
 80008a4:	08000dfd 	.word	0x08000dfd
 80008a8:	08000dfd 	.word	0x08000dfd
 80008ac:	08000dfd 	.word	0x08000dfd
 80008b0:	08000dfd 	.word	0x08000dfd
 80008b4:	08000dfd 	.word	0x08000dfd
 80008b8:	08000dfd 	.word	0x08000dfd
 80008bc:	08000dfd 	.word	0x08000dfd
 80008c0:	08000dfd 	.word	0x08000dfd
 80008c4:	08000dfd 	.word	0x08000dfd
 80008c8:	08000dfd 	.word	0x08000dfd
 80008cc:	08000dfd 	.word	0x08000dfd
 80008d0:	08000dfd 	.word	0x08000dfd
 80008d4:	08000dfd 	.word	0x08000dfd
 80008d8:	08000dfd 	.word	0x08000dfd
 80008dc:	08000dfd 	.word	0x08000dfd
 80008e0:	08000dfd 	.word	0x08000dfd
 80008e4:	08000dfd 	.word	0x08000dfd
 80008e8:	08000dfd 	.word	0x08000dfd
 80008ec:	08000dfd 	.word	0x08000dfd
 80008f0:	08000dfd 	.word	0x08000dfd
 80008f4:	08000dfd 	.word	0x08000dfd
 80008f8:	08000dfd 	.word	0x08000dfd
 80008fc:	08000dfd 	.word	0x08000dfd
 8000900:	08000dfd 	.word	0x08000dfd
 8000904:	08000dfd 	.word	0x08000dfd
 8000908:	08000dfd 	.word	0x08000dfd
 800090c:	08000dfd 	.word	0x08000dfd
 8000910:	08000dfd 	.word	0x08000dfd
 8000914:	08000dfd 	.word	0x08000dfd
 8000918:	08000dfd 	.word	0x08000dfd
 800091c:	08000dfd 	.word	0x08000dfd
 8000920:	08000dfd 	.word	0x08000dfd
 8000924:	08000dfd 	.word	0x08000dfd
 8000928:	08000dfd 	.word	0x08000dfd
 800092c:	08000dfd 	.word	0x08000dfd
 8000930:	08000dfd 	.word	0x08000dfd
 8000934:	08000dfd 	.word	0x08000dfd
 8000938:	08000dfd 	.word	0x08000dfd
 800093c:	08000dfd 	.word	0x08000dfd
 8000940:	08000dfd 	.word	0x08000dfd
 8000944:	08000dfd 	.word	0x08000dfd
 8000948:	08000dfd 	.word	0x08000dfd
 800094c:	08000dfd 	.word	0x08000dfd
 8000950:	08000dfd 	.word	0x08000dfd
 8000954:	08000dfd 	.word	0x08000dfd
 8000958:	08000dfd 	.word	0x08000dfd
 800095c:	08000dfd 	.word	0x08000dfd
 8000960:	08000dfd 	.word	0x08000dfd
 8000964:	08000dfd 	.word	0x08000dfd
 8000968:	08000dfd 	.word	0x08000dfd
 800096c:	08000dfd 	.word	0x08000dfd
 8000970:	08000dfd 	.word	0x08000dfd
 8000974:	08000dfd 	.word	0x08000dfd
 8000978:	08000dfd 	.word	0x08000dfd
 800097c:	08000dfd 	.word	0x08000dfd
 8000980:	08000dfd 	.word	0x08000dfd
 8000984:	08000dfd 	.word	0x08000dfd
 8000988:	08000dfd 	.word	0x08000dfd
 800098c:	08000dfd 	.word	0x08000dfd
 8000990:	08000dfd 	.word	0x08000dfd
 8000994:	08000dfd 	.word	0x08000dfd
 8000998:	08000dfd 	.word	0x08000dfd
 800099c:	08000dfd 	.word	0x08000dfd
 80009a0:	08000dfd 	.word	0x08000dfd
 80009a4:	08000dfd 	.word	0x08000dfd
 80009a8:	08000dfd 	.word	0x08000dfd
 80009ac:	08000dfd 	.word	0x08000dfd
 80009b0:	08000dfd 	.word	0x08000dfd
 80009b4:	08000dfd 	.word	0x08000dfd
 80009b8:	08000deb 	.word	0x08000deb
 80009bc:	08000dfd 	.word	0x08000dfd
 80009c0:	08000dfd 	.word	0x08000dfd
 80009c4:	08000dfd 	.word	0x08000dfd
 80009c8:	08000dfd 	.word	0x08000dfd
 80009cc:	08000dfd 	.word	0x08000dfd
 80009d0:	08000dfd 	.word	0x08000dfd
 80009d4:	08000dfd 	.word	0x08000dfd
 80009d8:	08000dfd 	.word	0x08000dfd
 80009dc:	08000dfd 	.word	0x08000dfd
 80009e0:	08000dfd 	.word	0x08000dfd
 80009e4:	08000dfd 	.word	0x08000dfd
 80009e8:	08000dfd 	.word	0x08000dfd
 80009ec:	08000dfd 	.word	0x08000dfd
 80009f0:	08000dfd 	.word	0x08000dfd
 80009f4:	08000dfd 	.word	0x08000dfd
 80009f8:	08000dd9 	.word	0x08000dd9
	case 0x10: {
		printf("SDN1 ON\n");
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <HAL_UART_RxCpltCallback+0x3dc>)
 80009fe:	f015 f8e3 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a04:	2104      	movs	r1, #4
 8000a06:	2201      	movs	r2, #1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f007 ffe5 	bl	80089d8 <HAL_GPIO_WritePin>
		break;
 8000a0e:	e200      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a10:	4808      	ldr	r0, [pc, #32]	; (8000a34 <HAL_UART_RxCpltCallback+0x3e4>)
 8000a12:	f015 f8d9 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a18:	2104      	movs	r1, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f007 ffdb 	bl	80089d8 <HAL_GPIO_WritePin>
		break;
 8000a22:	e1f6      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
 8000a24:	24000b40 	.word	0x24000b40
 8000a28:	240005cc 	.word	0x240005cc
 8000a2c:	080163a8 	.word	0x080163a8
 8000a30:	58020400 	.word	0x58020400
 8000a34:	080163b0 	.word	0x080163b0
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a38:	48b4      	ldr	r0, [pc, #720]	; (8000d0c <HAL_UART_RxCpltCallback+0x6bc>)
 8000a3a:	f015 f8c5 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a3e:	4bb4      	ldr	r3, [pc, #720]	; (8000d10 <HAL_UART_RxCpltCallback+0x6c0>)
 8000a40:	2120      	movs	r1, #32
 8000a42:	2201      	movs	r2, #1
 8000a44:	4618      	mov	r0, r3
 8000a46:	f007 ffc7 	bl	80089d8 <HAL_GPIO_WritePin>

		break;
 8000a4a:	e1e2      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a4c:	48b1      	ldr	r0, [pc, #708]	; (8000d14 <HAL_UART_RxCpltCallback+0x6c4>)
 8000a4e:	f015 f8bb 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a52:	4baf      	ldr	r3, [pc, #700]	; (8000d10 <HAL_UART_RxCpltCallback+0x6c0>)
 8000a54:	2120      	movs	r1, #32
 8000a56:	2200      	movs	r2, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f007 ffbd 	bl	80089d8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a5e:	4bac      	ldr	r3, [pc, #688]	; (8000d10 <HAL_UART_RxCpltCallback+0x6c0>)
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	2200      	movs	r2, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f007 ffb7 	bl	80089d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a6a:	4bab      	ldr	r3, [pc, #684]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000a6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a70:	2200      	movs	r2, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f007 ffb0 	bl	80089d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a78:	4ba7      	ldr	r3, [pc, #668]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f007 ffa9 	bl	80089d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000a86:	4ba4      	ldr	r3, [pc, #656]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f007 ffa2 	bl	80089d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000a94:	4ba0      	ldr	r3, [pc, #640]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f007 ff9c 	bl	80089d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000aa0:	4b9d      	ldr	r3, [pc, #628]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 ff96 	bl	80089d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aac:	4b9a      	ldr	r3, [pc, #616]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f007 ff8f 	bl	80089d8 <HAL_GPIO_WritePin>

		break;
 8000aba:	e1aa      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000abc:	4897      	ldr	r0, [pc, #604]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000abe:	f015 f883 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ac2:	4b95      	ldr	r3, [pc, #596]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4618      	mov	r0, r3
 8000acc:	f007 ff84 	bl	80089d8 <HAL_GPIO_WritePin>
		break;
 8000ad0:	e19f      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000ad2:	4893      	ldr	r0, [pc, #588]	; (8000d20 <HAL_UART_RxCpltCallback+0x6d0>)
 8000ad4:	f015 f878 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ad8:	4b8f      	ldr	r3, [pc, #572]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f007 ff79 	bl	80089d8 <HAL_GPIO_WritePin>
		break;
 8000ae6:	e194      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000ae8:	488e      	ldr	r0, [pc, #568]	; (8000d24 <HAL_UART_RxCpltCallback+0x6d4>)
 8000aea:	f015 f86d 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000aee:	4b8a      	ldr	r3, [pc, #552]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	2201      	movs	r2, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f007 ff6f 	bl	80089d8 <HAL_GPIO_WritePin>
		break;
 8000afa:	e18a      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000afc:	488a      	ldr	r0, [pc, #552]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000afe:	f015 f863 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b02:	4b85      	ldr	r3, [pc, #532]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	2200      	movs	r2, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f007 ff65 	bl	80089d8 <HAL_GPIO_WritePin>
		break;
 8000b0e:	e180      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b10:	4886      	ldr	r0, [pc, #536]	; (8000d2c <HAL_UART_RxCpltCallback+0x6dc>)
 8000b12:	f015 f859 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b16:	4b80      	ldr	r3, [pc, #512]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b18:	2140      	movs	r1, #64	; 0x40
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f007 ff5b 	bl	80089d8 <HAL_GPIO_WritePin>
		break;
 8000b22:	e176      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b24:	4882      	ldr	r0, [pc, #520]	; (8000d30 <HAL_UART_RxCpltCallback+0x6e0>)
 8000b26:	f015 f84f 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b2a:	4b7b      	ldr	r3, [pc, #492]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f007 ff51 	bl	80089d8 <HAL_GPIO_WritePin>
		break;
 8000b36:	e16c      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b38:	487e      	ldr	r0, [pc, #504]	; (8000d34 <HAL_UART_RxCpltCallback+0x6e4>)
 8000b3a:	f015 f845 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b3e:	4b76      	ldr	r3, [pc, #472]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b44:	2201      	movs	r2, #1
 8000b46:	4618      	mov	r0, r3
 8000b48:	f007 ff46 	bl	80089d8 <HAL_GPIO_WritePin>
		break;
 8000b4c:	e161      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b4e:	487a      	ldr	r0, [pc, #488]	; (8000d38 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b50:	f015 f83a 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b54:	4b70      	ldr	r3, [pc, #448]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f007 ff3b 	bl	80089d8 <HAL_GPIO_WritePin>
		break;
 8000b62:	e156      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b64:	4875      	ldr	r0, [pc, #468]	; (8000d3c <HAL_UART_RxCpltCallback+0x6ec>)
 8000b66:	f015 f82f 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b6a:	4b6b      	ldr	r3, [pc, #428]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b70:	2201      	movs	r2, #1
 8000b72:	4618      	mov	r0, r3
 8000b74:	f007 ff30 	bl	80089d8 <HAL_GPIO_WritePin>
		break;
 8000b78:	e14b      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000b7a:	4871      	ldr	r0, [pc, #452]	; (8000d40 <HAL_UART_RxCpltCallback+0x6f0>)
 8000b7c:	f015 f824 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b80:	4b65      	ldr	r3, [pc, #404]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b86:	2200      	movs	r2, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f007 ff25 	bl	80089d8 <HAL_GPIO_WritePin>
		break;
 8000b8e:	e140      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000b90:	486c      	ldr	r0, [pc, #432]	; (8000d44 <HAL_UART_RxCpltCallback+0x6f4>)
 8000b92:	f015 f819 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000b96:	4b60      	ldr	r3, [pc, #384]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f007 ff1a 	bl	80089d8 <HAL_GPIO_WritePin>
		break;
 8000ba4:	e135      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000ba6:	4868      	ldr	r0, [pc, #416]	; (8000d48 <HAL_UART_RxCpltCallback+0x6f8>)
 8000ba8:	f015 f80e 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000bac:	4b5a      	ldr	r3, [pc, #360]	; (8000d18 <HAL_UART_RxCpltCallback+0x6c8>)
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f007 ff0f 	bl	80089d8 <HAL_GPIO_WritePin>
		break;
 8000bba:	e12a      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bbc:	4863      	ldr	r0, [pc, #396]	; (8000d4c <HAL_UART_RxCpltCallback+0x6fc>)
 8000bbe:	f015 f803 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bc2:	4b53      	ldr	r3, [pc, #332]	; (8000d10 <HAL_UART_RxCpltCallback+0x6c0>)
 8000bc4:	2140      	movs	r1, #64	; 0x40
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f007 ff05 	bl	80089d8 <HAL_GPIO_WritePin>
		break;
 8000bce:	e120      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000bd0:	485f      	ldr	r0, [pc, #380]	; (8000d50 <HAL_UART_RxCpltCallback+0x700>)
 8000bd2:	f014 fff9 	bl	8015bc8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000bd6:	4b4e      	ldr	r3, [pc, #312]	; (8000d10 <HAL_UART_RxCpltCallback+0x6c0>)
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f007 fefb 	bl	80089d8 <HAL_GPIO_WritePin>
		break;
 8000be2:	e116      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000be4:	485b      	ldr	r0, [pc, #364]	; (8000d54 <HAL_UART_RxCpltCallback+0x704>)
 8000be6:	f014 ffef 	bl	8015bc8 <puts>
		HAL_TIM_Base_Start(&htim2);
 8000bea:	485b      	ldr	r0, [pc, #364]	; (8000d58 <HAL_UART_RxCpltCallback+0x708>)
 8000bec:	f00d fa44 	bl	800e078 <HAL_TIM_Base_Start>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	4a59      	ldr	r2, [pc, #356]	; (8000d5c <HAL_UART_RxCpltCallback+0x70c>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4859      	ldr	r0, [pc, #356]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000bfc:	f004 fb5c 	bl	80052b8 <HAL_DAC_Start_DMA>
		break;
 8000c00:	e107      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c02:	4858      	ldr	r0, [pc, #352]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000c04:	f014 ffe0 	bl	8015bc8 <puts>
		HAL_TIM_Base_Stop(&htim2);
 8000c08:	4853      	ldr	r0, [pc, #332]	; (8000d58 <HAL_UART_RxCpltCallback+0x708>)
 8000c0a:	f00d faa5 	bl	800e158 <HAL_TIM_Base_Stop>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4853      	ldr	r0, [pc, #332]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000c12:	f004 fc11 	bl	8005438 <HAL_DAC_Stop_DMA>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c16:	4854      	ldr	r0, [pc, #336]	; (8000d68 <HAL_UART_RxCpltCallback+0x718>)
 8000c18:	f014 ffd6 	bl	8015bc8 <puts>
		ERPA_ON = 1;
 8000c1c:	4b53      	ldr	r3, [pc, #332]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
		break;
 8000c22:	e0f6      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c24:	4852      	ldr	r0, [pc, #328]	; (8000d70 <HAL_UART_RxCpltCallback+0x720>)
 8000c26:	f014 ffcf 	bl	8015bc8 <puts>
		ERPA_ON = 0;
 8000c2a:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
		break;
 8000c30:	e0ef      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c32:	4850      	ldr	r0, [pc, #320]	; (8000d74 <HAL_UART_RxCpltCallback+0x724>)
 8000c34:	f014 ffc8 	bl	8015bc8 <puts>
		PMT_ON = 1;
 8000c38:	4b4f      	ldr	r3, [pc, #316]	; (8000d78 <HAL_UART_RxCpltCallback+0x728>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
		break;
 8000c3e:	e0e8      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c40:	484e      	ldr	r0, [pc, #312]	; (8000d7c <HAL_UART_RxCpltCallback+0x72c>)
 8000c42:	f014 ffc1 	bl	8015bc8 <puts>
		PMT_ON = 0;
 8000c46:	4b4c      	ldr	r3, [pc, #304]	; (8000d78 <HAL_UART_RxCpltCallback+0x728>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
		break;
 8000c4c:	e0e1      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000c4e:	484c      	ldr	r0, [pc, #304]	; (8000d80 <HAL_UART_RxCpltCallback+0x730>)
 8000c50:	f014 ffba 	bl	8015bc8 <puts>
		HK_ON = 1;
 8000c54:	4b4b      	ldr	r3, [pc, #300]	; (8000d84 <HAL_UART_RxCpltCallback+0x734>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
		break;
 8000c5a:	e0da      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000c5c:	484a      	ldr	r0, [pc, #296]	; (8000d88 <HAL_UART_RxCpltCallback+0x738>)
 8000c5e:	f014 ffb3 	bl	8015bc8 <puts>
		HK_ON = 0;
 8000c62:	4b48      	ldr	r3, [pc, #288]	; (8000d84 <HAL_UART_RxCpltCallback+0x734>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
		break;
 8000c68:	e0d3      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000c6a:	4848      	ldr	r0, [pc, #288]	; (8000d8c <HAL_UART_RxCpltCallback+0x73c>)
 8000c6c:	f014 ffac 	bl	8015bc8 <puts>
		if (step < 17) {
 8000c70:	4b47      	ldr	r3, [pc, #284]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b10      	cmp	r3, #16
 8000c76:	f200 80c5 	bhi.w	8000e04 <HAL_UART_RxCpltCallback+0x7b4>
			step+=2;
 8000c7a:	4b45      	ldr	r3, [pc, #276]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	3302      	adds	r3, #2
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b43      	ldr	r3, [pc, #268]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000c84:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000c86:	4b42      	ldr	r3, [pc, #264]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b33      	ldr	r3, [pc, #204]	; (8000d5c <HAL_UART_RxCpltCallback+0x70c>)
 8000c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	4832      	ldr	r0, [pc, #200]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000c98:	f004 fc71 	bl	800557e <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4830      	ldr	r0, [pc, #192]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000ca0:	f004 fab2 	bl	8005208 <HAL_DAC_Start>
		}
		break;
 8000ca4:	e0ae      	b.n	8000e04 <HAL_UART_RxCpltCallback+0x7b4>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000ca6:	483b      	ldr	r0, [pc, #236]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000ca8:	f014 ff8e 	bl	8015bc8 <puts>
		if (step > 3) {
 8000cac:	4b38      	ldr	r3, [pc, #224]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	f240 80a9 	bls.w	8000e08 <HAL_UART_RxCpltCallback+0x7b8>
			step-=2;
 8000cb6:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b34      	ldr	r3, [pc, #208]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000cc0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000cc2:	4b33      	ldr	r3, [pc, #204]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <HAL_UART_RxCpltCallback+0x70c>)
 8000cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4823      	ldr	r0, [pc, #140]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000cd4:	f004 fc53 	bl	800557e <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4821      	ldr	r0, [pc, #132]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000cdc:	f004 fa94 	bl	8005208 <HAL_DAC_Start>
		}
		break;
 8000ce0:	e092      	b.n	8000e08 <HAL_UART_RxCpltCallback+0x7b8>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000ce2:	482d      	ldr	r0, [pc, #180]	; (8000d98 <HAL_UART_RxCpltCallback+0x748>)
 8000ce4:	f014 ff70 	bl	8015bc8 <puts>
		if (cadence <= 50000){
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <HAL_UART_RxCpltCallback+0x74c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	f200 808b 	bhi.w	8000e0c <HAL_UART_RxCpltCallback+0x7bc>
			cadence *= 2;
 8000cf6:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <HAL_UART_RxCpltCallback+0x74c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4a27      	ldr	r2, [pc, #156]	; (8000d9c <HAL_UART_RxCpltCallback+0x74c>)
 8000cfe:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000d00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <HAL_UART_RxCpltCallback+0x74c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000d0a:	e07f      	b.n	8000e0c <HAL_UART_RxCpltCallback+0x7bc>
 8000d0c:	080163bc 	.word	0x080163bc
 8000d10:	58020400 	.word	0x58020400
 8000d14:	080163c8 	.word	0x080163c8
 8000d18:	58020800 	.word	0x58020800
 8000d1c:	080163d4 	.word	0x080163d4
 8000d20:	080163e0 	.word	0x080163e0
 8000d24:	080163f0 	.word	0x080163f0
 8000d28:	080163fc 	.word	0x080163fc
 8000d2c:	08016408 	.word	0x08016408
 8000d30:	08016414 	.word	0x08016414
 8000d34:	08016424 	.word	0x08016424
 8000d38:	08016430 	.word	0x08016430
 8000d3c:	0801643c 	.word	0x0801643c
 8000d40:	08016448 	.word	0x08016448
 8000d44:	08016454 	.word	0x08016454
 8000d48:	08016464 	.word	0x08016464
 8000d4c:	08016474 	.word	0x08016474
 8000d50:	08016480 	.word	0x08016480
 8000d54:	08016490 	.word	0x08016490
 8000d58:	24000534 	.word	0x24000534
 8000d5c:	24000008 	.word	0x24000008
 8000d60:	240002d4 	.word	0x240002d4
 8000d64:	080164a0 	.word	0x080164a0
 8000d68:	080164b0 	.word	0x080164b0
 8000d6c:	24000b37 	.word	0x24000b37
 8000d70:	080164b8 	.word	0x080164b8
 8000d74:	080164c4 	.word	0x080164c4
 8000d78:	24000b36 	.word	0x24000b36
 8000d7c:	080164cc 	.word	0x080164cc
 8000d80:	080164d4 	.word	0x080164d4
 8000d84:	24000b38 	.word	0x24000b38
 8000d88:	080164dc 	.word	0x080164dc
 8000d8c:	080164e4 	.word	0x080164e4
 8000d90:	24000004 	.word	0x24000004
 8000d94:	080164ec 	.word	0x080164ec
 8000d98:	080164f8 	.word	0x080164f8
 8000d9c:	24000000 	.word	0x24000000
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000da0:	481e      	ldr	r0, [pc, #120]	; (8000e1c <HAL_UART_RxCpltCallback+0x7cc>)
 8000da2:	f014 ff11 	bl	8015bc8 <puts>
		if (cadence >= 6250){
 8000da6:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <HAL_UART_RxCpltCallback+0x7d0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f641 0269 	movw	r2, #6249	; 0x1869
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d92e      	bls.n	8000e10 <HAL_UART_RxCpltCallback+0x7c0>
			cadence /= 2;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <HAL_UART_RxCpltCallback+0x7d0>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	085b      	lsrs	r3, r3, #1
 8000db8:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <HAL_UART_RxCpltCallback+0x7d0>)
 8000dba:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000dbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_UART_RxCpltCallback+0x7d0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000dc6:	e023      	b.n	8000e10 <HAL_UART_RxCpltCallback+0x7c0>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000dc8:	4816      	ldr	r0, [pc, #88]	; (8000e24 <HAL_UART_RxCpltCallback+0x7d4>)
 8000dca:	f014 fefd 	bl	8015bc8 <puts>
		// TODO: Exit stop mode
		break;
 8000dce:	e020      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000dd0:	4815      	ldr	r0, [pc, #84]	; (8000e28 <HAL_UART_RxCpltCallback+0x7d8>)
 8000dd2:	f014 fef9 	bl	8015bc8 <puts>
		// TODO: Enter stop mode
		break;
 8000dd6:	e01c      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000dd8:	4814      	ldr	r0, [pc, #80]	; (8000e2c <HAL_UART_RxCpltCallback+0x7dc>)
 8000dda:	f014 fef5 	bl	8015bc8 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_UART_RxCpltCallback+0x7e0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f012 ff5a 	bl	8013c9c <xTaskResumeFromISR>
		break;
 8000de8:	e013      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000dea:	4812      	ldr	r0, [pc, #72]	; (8000e34 <HAL_UART_RxCpltCallback+0x7e4>)
 8000dec:	f014 feec 	bl	8015bc8 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_UART_RxCpltCallback+0x7e8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f012 ff51 	bl	8013c9c <xTaskResumeFromISR>
		break;
 8000dfa:	e00a      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
	}
	default:{
		printf("Unknown Command\n");
 8000dfc:	480f      	ldr	r0, [pc, #60]	; (8000e3c <HAL_UART_RxCpltCallback+0x7ec>)
 8000dfe:	f014 fee3 	bl	8015bc8 <puts>
		break;
 8000e02:	e006      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000e04:	bf00      	nop
 8000e06:	e004      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000e08:	bf00      	nop
 8000e0a:	e002      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000e0c:	bf00      	nop
 8000e0e:	e000      	b.n	8000e12 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000e10:	bf00      	nop
	}
	}
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	08016504 	.word	0x08016504
 8000e20:	24000000 	.word	0x24000000
 8000e24:	08016510 	.word	0x08016510
 8000e28:	08016520 	.word	0x08016520
 8000e2c:	08016530 	.word	0x08016530
 8000e30:	24000670 	.word	0x24000670
 8000e34:	0801653c 	.word	0x0801653c
 8000e38:	240008d0 	.word	0x240008d0
 8000e3c:	08016548 	.word	0x08016548

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e44:	f002 fc4c 	bl	80036e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e48:	f000 f89e 	bl	8000f88 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e4c:	f000 f94e 	bl	80010ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e50:	f000 fea0 	bl	8001b94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e54:	f000 fe6e 	bl	8001b34 <MX_DMA_Init>
  MX_TIM3_Init();
 8000e58:	f000 fdd2 	bl	8001a00 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000e5c:	f000 fe1e 	bl	8001a9c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e60:	f000 fb5a 	bl	8001518 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000e64:	f000 fc50 	bl	8001708 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000e68:	f000 fd54 	bl	8001914 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000e6c:	f000 fca4 	bl	80017b8 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000e70:	f000 fa8e 	bl	8001390 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000e74:	f000 f96a 	bl	800114c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000e78:	f000 fb1c 	bl	80014b4 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000e7c:	f000 fbec 	bl	8001658 <MX_SPI1_Init>
  MX_RTC_Init();
 8000e80:	f000 fb8c 	bl	800159c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	if (!handshake())
 8000e84:	f001 f848 	bl	8001f18 <handshake>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <main+0x52>
	{
		Error_Handler();
 8000e8e:	f001 fd4b 	bl	8002928 <Error_Handler>
	}


	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e92:	2100      	movs	r1, #0
 8000e94:	4825      	ldr	r0, [pc, #148]	; (8000f2c <main+0xec>)
 8000e96:	f00d f9ff 	bl	800e298 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4824      	ldr	r0, [pc, #144]	; (8000f30 <main+0xf0>)
 8000e9e:	f00d f9fb 	bl	800e298 <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4823      	ldr	r0, [pc, #140]	; (8000f34 <main+0xf4>)
 8000ea6:	f00d f9f7 	bl	800e298 <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eaa:	f011 fa95 	bl	80123d8 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000eae:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <main+0xf8>)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4822      	ldr	r0, [pc, #136]	; (8000f3c <main+0xfc>)
 8000eb4:	f011 fada 	bl	801246c <osThreadNew>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4a21      	ldr	r2, [pc, #132]	; (8000f40 <main+0x100>)
 8000ebc:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000ebe:	4a21      	ldr	r2, [pc, #132]	; (8000f44 <main+0x104>)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4821      	ldr	r0, [pc, #132]	; (8000f48 <main+0x108>)
 8000ec4:	f011 fad2 	bl	801246c <osThreadNew>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4a20      	ldr	r2, [pc, #128]	; (8000f4c <main+0x10c>)
 8000ecc:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000ece:	4a20      	ldr	r2, [pc, #128]	; (8000f50 <main+0x110>)
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4820      	ldr	r0, [pc, #128]	; (8000f54 <main+0x114>)
 8000ed4:	f011 faca 	bl	801246c <osThreadNew>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a1f      	ldr	r2, [pc, #124]	; (8000f58 <main+0x118>)
 8000edc:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000ede:	4a1f      	ldr	r2, [pc, #124]	; (8000f5c <main+0x11c>)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	481f      	ldr	r0, [pc, #124]	; (8000f60 <main+0x120>)
 8000ee4:	f011 fac2 	bl	801246c <osThreadNew>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a1e      	ldr	r2, [pc, #120]	; (8000f64 <main+0x124>)
 8000eec:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000eee:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <main+0x128>)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	481e      	ldr	r0, [pc, #120]	; (8000f6c <main+0x12c>)
 8000ef4:	f011 faba 	bl	801246c <osThreadNew>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a1d      	ldr	r2, [pc, #116]	; (8000f70 <main+0x130>)
 8000efc:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000efe:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <main+0x134>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	481d      	ldr	r0, [pc, #116]	; (8000f78 <main+0x138>)
 8000f04:	f011 fab2 	bl	801246c <osThreadNew>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <main+0x13c>)
 8000f0c:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f011 fb9a 	bl	8012648 <osEventFlagsNew>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <main+0x140>)
 8000f18:	6013      	str	r3, [r2, #0]
	system_setup();
 8000f1a:	f001 f88b 	bl	8002034 <system_setup>
	printf("Starting kernal...\n");
 8000f1e:	4819      	ldr	r0, [pc, #100]	; (8000f84 <main+0x144>)
 8000f20:	f014 fe52 	bl	8015bc8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f24:	f011 fa7c 	bl	8012420 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f28:	e7fe      	b.n	8000f28 <main+0xe8>
 8000f2a:	bf00      	nop
 8000f2c:	240004e8 	.word	0x240004e8
 8000f30:	24000534 	.word	0x24000534
 8000f34:	24000580 	.word	0x24000580
 8000f38:	080165a4 	.word	0x080165a4
 8000f3c:	080026c5 	.word	0x080026c5
 8000f40:	24000660 	.word	0x24000660
 8000f44:	080165c8 	.word	0x080165c8
 8000f48:	08002709 	.word	0x08002709
 8000f4c:	24000664 	.word	0x24000664
 8000f50:	080165ec 	.word	0x080165ec
 8000f54:	0800274d 	.word	0x0800274d
 8000f58:	24000668 	.word	0x24000668
 8000f5c:	08016610 	.word	0x08016610
 8000f60:	08002791 	.word	0x08002791
 8000f64:	2400066c 	.word	0x2400066c
 8000f68:	08016634 	.word	0x08016634
 8000f6c:	080027b5 	.word	0x080027b5
 8000f70:	24000670 	.word	0x24000670
 8000f74:	08016658 	.word	0x08016658
 8000f78:	0800285d 	.word	0x0800285d
 8000f7c:	240008d0 	.word	0x240008d0
 8000f80:	24000b3c 	.word	0x24000b3c
 8000f84:	08016558 	.word	0x08016558

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b09e      	sub	sp, #120	; 0x78
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f92:	224c      	movs	r2, #76	; 0x4c
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f014 fcc0 	bl	801591c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f014 fcb9 	bl	801591c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000faa:	2002      	movs	r0, #2
 8000fac:	f008 fb3a 	bl	8009624 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <SystemClock_Config+0x158>)
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	4a49      	ldr	r2, [pc, #292]	; (80010e0 <SystemClock_Config+0x158>)
 8000fba:	f023 0301 	bic.w	r3, r3, #1
 8000fbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fc0:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <SystemClock_Config+0x158>)
 8000fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <SystemClock_Config+0x15c>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	4a45      	ldr	r2, [pc, #276]	; (80010e4 <SystemClock_Config+0x15c>)
 8000fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fd4:	6193      	str	r3, [r2, #24]
 8000fd6:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <SystemClock_Config+0x15c>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fe2:	bf00      	nop
 8000fe4:	4b3f      	ldr	r3, [pc, #252]	; (80010e4 <SystemClock_Config+0x15c>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ff0:	d1f8      	bne.n	8000fe4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b3d      	ldr	r3, [pc, #244]	; (80010e8 <SystemClock_Config+0x160>)
 8000ff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ff8:	4a3b      	ldr	r2, [pc, #236]	; (80010e8 <SystemClock_Config+0x160>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001002:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <SystemClock_Config+0x160>)
 8001004:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001010:	2300      	movs	r3, #0
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <SystemClock_Config+0x15c>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a32      	ldr	r2, [pc, #200]	; (80010e4 <SystemClock_Config+0x15c>)
 800101a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b30      	ldr	r3, [pc, #192]	; (80010e4 <SystemClock_Config+0x15c>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <SystemClock_Config+0x158>)
 800102c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102e:	4a2c      	ldr	r2, [pc, #176]	; (80010e0 <SystemClock_Config+0x158>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001036:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <SystemClock_Config+0x158>)
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001042:	bf00      	nop
 8001044:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <SystemClock_Config+0x15c>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800104c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001050:	d1f8      	bne.n	8001044 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001052:	230a      	movs	r3, #10
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001056:	2301      	movs	r3, #1
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105a:	2340      	movs	r3, #64	; 0x40
 800105c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800105e:	2301      	movs	r3, #1
 8001060:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001062:	2302      	movs	r3, #2
 8001064:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001066:	2300      	movs	r3, #0
 8001068:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800106a:	2304      	movs	r3, #4
 800106c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 800106e:	233c      	movs	r3, #60	; 0x3c
 8001070:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001072:	2302      	movs	r3, #2
 8001074:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8001076:	2314      	movs	r3, #20
 8001078:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800107a:	2302      	movs	r3, #2
 800107c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800107e:	230c      	movs	r3, #12
 8001080:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001082:	2300      	movs	r3, #0
 8001084:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108e:	4618      	mov	r0, r3
 8001090:	f008 fb02 	bl	8009698 <HAL_RCC_OscConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0x116>
  {
    Error_Handler();
 800109a:	f001 fc45 	bl	8002928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109e:	233f      	movs	r3, #63	; 0x3f
 80010a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a2:	2303      	movs	r3, #3
 80010a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010aa:	2308      	movs	r3, #8
 80010ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010ae:	2340      	movs	r3, #64	; 0x40
 80010b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010b2:	2340      	movs	r3, #64	; 0x40
 80010b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010bc:	2340      	movs	r3, #64	; 0x40
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2104      	movs	r1, #4
 80010c6:	4618      	mov	r0, r3
 80010c8:	f008 ff40 	bl	8009f4c <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x14e>
  {
    Error_Handler();
 80010d2:	f001 fc29 	bl	8002928 <Error_Handler>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3778      	adds	r7, #120	; 0x78
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	58000400 	.word	0x58000400
 80010e4:	58024800 	.word	0x58024800
 80010e8:	58024400 	.word	0x58024400

080010ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0b0      	sub	sp, #192	; 0xc0
 80010f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f2:	463b      	mov	r3, r7
 80010f4:	22c0      	movs	r2, #192	; 0xc0
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f014 fc0f 	bl	801591c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001102:	f04f 0300 	mov.w	r3, #0
 8001106:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800110a:	2304      	movs	r3, #4
 800110c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800110e:	2309      	movs	r3, #9
 8001110:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001112:	2304      	movs	r3, #4
 8001114:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001116:	2302      	movs	r3, #2
 8001118:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800111e:	23c0      	movs	r3, #192	; 0xc0
 8001120:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001122:	2320      	movs	r3, #32
 8001124:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001126:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001132:	463b      	mov	r3, r7
 8001134:	4618      	mov	r0, r3
 8001136:	f009 fad7 	bl	800a6e8 <HAL_RCCEx_PeriphCLKConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001140:	f001 fbf2 	bl	8002928 <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	37c0      	adds	r7, #192	; 0xc0
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800115e:	463b      	mov	r3, r7
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]
 800116e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001170:	4b7a      	ldr	r3, [pc, #488]	; (800135c <MX_ADC1_Init+0x210>)
 8001172:	4a7b      	ldr	r2, [pc, #492]	; (8001360 <MX_ADC1_Init+0x214>)
 8001174:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001176:	4b79      	ldr	r3, [pc, #484]	; (800135c <MX_ADC1_Init+0x210>)
 8001178:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800117c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800117e:	4b77      	ldr	r3, [pc, #476]	; (800135c <MX_ADC1_Init+0x210>)
 8001180:	2208      	movs	r2, #8
 8001182:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001184:	4b75      	ldr	r3, [pc, #468]	; (800135c <MX_ADC1_Init+0x210>)
 8001186:	2201      	movs	r2, #1
 8001188:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118a:	4b74      	ldr	r3, [pc, #464]	; (800135c <MX_ADC1_Init+0x210>)
 800118c:	2204      	movs	r2, #4
 800118e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001190:	4b72      	ldr	r3, [pc, #456]	; (800135c <MX_ADC1_Init+0x210>)
 8001192:	2200      	movs	r2, #0
 8001194:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001196:	4b71      	ldr	r3, [pc, #452]	; (800135c <MX_ADC1_Init+0x210>)
 8001198:	2201      	movs	r2, #1
 800119a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 800119c:	4b6f      	ldr	r3, [pc, #444]	; (800135c <MX_ADC1_Init+0x210>)
 800119e:	220b      	movs	r2, #11
 80011a0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a2:	4b6e      	ldr	r3, [pc, #440]	; (800135c <MX_ADC1_Init+0x210>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a8:	4b6c      	ldr	r3, [pc, #432]	; (800135c <MX_ADC1_Init+0x210>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ae:	4b6b      	ldr	r3, [pc, #428]	; (800135c <MX_ADC1_Init+0x210>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011b4:	4b69      	ldr	r3, [pc, #420]	; (800135c <MX_ADC1_Init+0x210>)
 80011b6:	2203      	movs	r2, #3
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011ba:	4b68      	ldr	r3, [pc, #416]	; (800135c <MX_ADC1_Init+0x210>)
 80011bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011c2:	4b66      	ldr	r3, [pc, #408]	; (800135c <MX_ADC1_Init+0x210>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011c8:	4b64      	ldr	r3, [pc, #400]	; (800135c <MX_ADC1_Init+0x210>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d0:	4862      	ldr	r0, [pc, #392]	; (800135c <MX_ADC1_Init+0x210>)
 80011d2:	f002 fd11 	bl	8003bf8 <HAL_ADC_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011dc:	f001 fba4 	bl	8002928 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	485c      	ldr	r0, [pc, #368]	; (800135c <MX_ADC1_Init+0x210>)
 80011ec:	f003 fe2c 	bl	8004e48 <HAL_ADCEx_MultiModeConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80011f6:	f001 fb97 	bl	8002928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011fa:	4b5a      	ldr	r3, [pc, #360]	; (8001364 <MX_ADC1_Init+0x218>)
 80011fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011fe:	2306      	movs	r3, #6
 8001200:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001202:	2307      	movs	r3, #7
 8001204:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001206:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800120a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800120c:	2304      	movs	r3, #4
 800120e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001218:	463b      	mov	r3, r7
 800121a:	4619      	mov	r1, r3
 800121c:	484f      	ldr	r0, [pc, #316]	; (800135c <MX_ADC1_Init+0x210>)
 800121e:	f002 ff6f 	bl	8004100 <HAL_ADC_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001228:	f001 fb7e 	bl	8002928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800122c:	4b4e      	ldr	r3, [pc, #312]	; (8001368 <MX_ADC1_Init+0x21c>)
 800122e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001230:	230c      	movs	r3, #12
 8001232:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	4848      	ldr	r0, [pc, #288]	; (800135c <MX_ADC1_Init+0x210>)
 800123a:	f002 ff61 	bl	8004100 <HAL_ADC_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001244:	f001 fb70 	bl	8002928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001248:	4b48      	ldr	r3, [pc, #288]	; (800136c <MX_ADC1_Init+0x220>)
 800124a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800124c:	2312      	movs	r3, #18
 800124e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4619      	mov	r1, r3
 8001254:	4841      	ldr	r0, [pc, #260]	; (800135c <MX_ADC1_Init+0x210>)
 8001256:	f002 ff53 	bl	8004100 <HAL_ADC_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001260:	f001 fb62 	bl	8002928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001264:	4b42      	ldr	r3, [pc, #264]	; (8001370 <MX_ADC1_Init+0x224>)
 8001266:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001268:	2318      	movs	r3, #24
 800126a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	483a      	ldr	r0, [pc, #232]	; (800135c <MX_ADC1_Init+0x210>)
 8001272:	f002 ff45 	bl	8004100 <HAL_ADC_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 800127c:	f001 fb54 	bl	8002928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001280:	4b3c      	ldr	r3, [pc, #240]	; (8001374 <MX_ADC1_Init+0x228>)
 8001282:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001288:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800128a:	463b      	mov	r3, r7
 800128c:	4619      	mov	r1, r3
 800128e:	4833      	ldr	r0, [pc, #204]	; (800135c <MX_ADC1_Init+0x210>)
 8001290:	f002 ff36 	bl	8004100 <HAL_ADC_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800129a:	f001 fb45 	bl	8002928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800129e:	4b36      	ldr	r3, [pc, #216]	; (8001378 <MX_ADC1_Init+0x22c>)
 80012a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012a2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a8:	463b      	mov	r3, r7
 80012aa:	4619      	mov	r1, r3
 80012ac:	482b      	ldr	r0, [pc, #172]	; (800135c <MX_ADC1_Init+0x210>)
 80012ae:	f002 ff27 	bl	8004100 <HAL_ADC_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80012b8:	f001 fb36 	bl	8002928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012bc:	4b2f      	ldr	r3, [pc, #188]	; (800137c <MX_ADC1_Init+0x230>)
 80012be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012c0:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80012c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c6:	463b      	mov	r3, r7
 80012c8:	4619      	mov	r1, r3
 80012ca:	4824      	ldr	r0, [pc, #144]	; (800135c <MX_ADC1_Init+0x210>)
 80012cc:	f002 ff18 	bl	8004100 <HAL_ADC_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80012d6:	f001 fb27 	bl	8002928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012da:	4b29      	ldr	r3, [pc, #164]	; (8001380 <MX_ADC1_Init+0x234>)
 80012dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012de:	f44f 7389 	mov.w	r3, #274	; 0x112
 80012e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	481c      	ldr	r0, [pc, #112]	; (800135c <MX_ADC1_Init+0x210>)
 80012ea:	f002 ff09 	bl	8004100 <HAL_ADC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80012f4:	f001 fb18 	bl	8002928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <MX_ADC1_Init+0x238>)
 80012fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80012fc:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001300:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	4619      	mov	r1, r3
 8001306:	4815      	ldr	r0, [pc, #84]	; (800135c <MX_ADC1_Init+0x210>)
 8001308:	f002 fefa 	bl	8004100 <HAL_ADC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001312:	f001 fb09 	bl	8002928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_ADC1_Init+0x23c>)
 8001318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800131a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800131e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	4619      	mov	r1, r3
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <MX_ADC1_Init+0x210>)
 8001326:	f002 feeb 	bl	8004100 <HAL_ADC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001330:	f001 fafa 	bl	8002928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_ADC1_Init+0x240>)
 8001336:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001338:	f240 2306 	movw	r3, #518	; 0x206
 800133c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <MX_ADC1_Init+0x210>)
 8001344:	f002 fedc 	bl	8004100 <HAL_ADC_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800134e:	f001 faeb 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	; 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2400011c 	.word	0x2400011c
 8001360:	40022000 	.word	0x40022000
 8001364:	0c900008 	.word	0x0c900008
 8001368:	10c00010 	.word	0x10c00010
 800136c:	14f00020 	.word	0x14f00020
 8001370:	1d500080 	.word	0x1d500080
 8001374:	21800100 	.word	0x21800100
 8001378:	25b00200 	.word	0x25b00200
 800137c:	2a000400 	.word	0x2a000400
 8001380:	2e300800 	.word	0x2e300800
 8001384:	3ac04000 	.word	0x3ac04000
 8001388:	3ef08000 	.word	0x3ef08000
 800138c:	47520000 	.word	0x47520000

08001390 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
 80013a4:	615a      	str	r2, [r3, #20]
 80013a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013a8:	4b3d      	ldr	r3, [pc, #244]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013aa:	4a3e      	ldr	r2, [pc, #248]	; (80014a4 <MX_ADC3_Init+0x114>)
 80013ac:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013ae:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013b0:	2208      	movs	r2, #8
 80013b2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013b4:	4b3a      	ldr	r3, [pc, #232]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ba:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013bc:	2204      	movs	r2, #4
 80013be:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013c0:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013c6:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80013cc:	4b34      	ldr	r3, [pc, #208]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013ce:	2204      	movs	r2, #4
 80013d0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013d2:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d8:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013de:	4b30      	ldr	r3, [pc, #192]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80013e4:	4b2e      	ldr	r3, [pc, #184]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013e6:	2203      	movs	r2, #3
 80013e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013ea:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013f2:	4b2b      	ldr	r3, [pc, #172]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80013f8:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <MX_ADC3_Init+0x110>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001400:	4827      	ldr	r0, [pc, #156]	; (80014a0 <MX_ADC3_Init+0x110>)
 8001402:	f002 fbf9 	bl	8003bf8 <HAL_ADC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 800140c:	f001 fa8c 	bl	8002928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001410:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <MX_ADC3_Init+0x118>)
 8001412:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001414:	2306      	movs	r3, #6
 8001416:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001418:	2307      	movs	r3, #7
 800141a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800141c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001420:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001422:	2304      	movs	r3, #4
 8001424:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	4619      	mov	r1, r3
 8001432:	481b      	ldr	r0, [pc, #108]	; (80014a0 <MX_ADC3_Init+0x110>)
 8001434:	f002 fe64 	bl	8004100 <HAL_ADC_ConfigChannel>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800143e:	f001 fa73 	bl	8002928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_ADC3_Init+0x11c>)
 8001444:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001446:	230c      	movs	r3, #12
 8001448:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	4619      	mov	r1, r3
 800144e:	4814      	ldr	r0, [pc, #80]	; (80014a0 <MX_ADC3_Init+0x110>)
 8001450:	f002 fe56 	bl	8004100 <HAL_ADC_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800145a:	f001 fa65 	bl	8002928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800145e:	2301      	movs	r3, #1
 8001460:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001462:	2312      	movs	r3, #18
 8001464:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4619      	mov	r1, r3
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <MX_ADC3_Init+0x110>)
 800146c:	f002 fe48 	bl	8004100 <HAL_ADC_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001476:	f001 fa57 	bl	8002928 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <MX_ADC3_Init+0x120>)
 800147c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800147e:	2318      	movs	r3, #24
 8001480:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4806      	ldr	r0, [pc, #24]	; (80014a0 <MX_ADC3_Init+0x110>)
 8001488:	f002 fe3a 	bl	8004100 <HAL_ADC_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001492:	f001 fa49 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	24000180 	.word	0x24000180
 80014a4:	58026000 	.word	0x58026000
 80014a8:	cb840000 	.word	0xcb840000
 80014ac:	cfb80000 	.word	0xcfb80000
 80014b0:	04300002 	.word	0x04300002

080014b4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2224      	movs	r2, #36	; 0x24
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f014 fa2b 	bl	801591c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_DAC1_Init+0x5c>)
 80014c8:	4a12      	ldr	r2, [pc, #72]	; (8001514 <MX_DAC1_Init+0x60>)
 80014ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014cc:	4810      	ldr	r0, [pc, #64]	; (8001510 <MX_DAC1_Init+0x5c>)
 80014ce:	f003 fe79 	bl	80051c4 <HAL_DAC_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014d8:	f001 fa26 	bl	8002928 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80014e0:	230a      	movs	r3, #10
 80014e2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2200      	movs	r2, #0
 80014f4:	4619      	mov	r1, r3
 80014f6:	4806      	ldr	r0, [pc, #24]	; (8001510 <MX_DAC1_Init+0x5c>)
 80014f8:	f004 f894 	bl	8005624 <HAL_DAC_ConfigChannel>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001502:	f001 fa11 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	240002d4 	.word	0x240002d4
 8001514:	40007400 	.word	0x40007400

08001518 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <MX_I2C1_Init+0x78>)
 800151e:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <MX_I2C1_Init+0x7c>)
 8001520:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0050174F;
 8001522:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <MX_I2C1_Init+0x78>)
 8001524:	4a1c      	ldr	r2, [pc, #112]	; (8001598 <MX_I2C1_Init+0x80>)
 8001526:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <MX_I2C1_Init+0x78>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <MX_I2C1_Init+0x78>)
 8001530:	2201      	movs	r2, #1
 8001532:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <MX_I2C1_Init+0x78>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_I2C1_Init+0x78>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_I2C1_Init+0x78>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <MX_I2C1_Init+0x78>)
 8001548:	2200      	movs	r2, #0
 800154a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <MX_I2C1_Init+0x78>)
 800154e:	2200      	movs	r2, #0
 8001550:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001552:	480f      	ldr	r0, [pc, #60]	; (8001590 <MX_I2C1_Init+0x78>)
 8001554:	f007 fa5a 	bl	8008a0c <HAL_I2C_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800155e:	f001 f9e3 	bl	8002928 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001562:	2100      	movs	r1, #0
 8001564:	480a      	ldr	r0, [pc, #40]	; (8001590 <MX_I2C1_Init+0x78>)
 8001566:	f007 ffa1 	bl	80094ac <HAL_I2CEx_ConfigAnalogFilter>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001570:	f001 f9da 	bl	8002928 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001574:	2100      	movs	r1, #0
 8001576:	4806      	ldr	r0, [pc, #24]	; (8001590 <MX_I2C1_Init+0x78>)
 8001578:	f007 ffe3 	bl	8009542 <HAL_I2CEx_ConfigDigitalFilter>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001582:	f001 f9d1 	bl	8002928 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001586:	2001      	movs	r0, #1
 8001588:	f008 f828 	bl	80095dc <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	24000360 	.word	0x24000360
 8001594:	40005400 	.word	0x40005400
 8001598:	0050174f 	.word	0x0050174f

0800159c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015b0:	2300      	movs	r3, #0
 80015b2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015b4:	4b26      	ldr	r3, [pc, #152]	; (8001650 <MX_RTC_Init+0xb4>)
 80015b6:	4a27      	ldr	r2, [pc, #156]	; (8001654 <MX_RTC_Init+0xb8>)
 80015b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015ba:	4b25      	ldr	r3, [pc, #148]	; (8001650 <MX_RTC_Init+0xb4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 32;
 80015c0:	4b23      	ldr	r3, [pc, #140]	; (8001650 <MX_RTC_Init+0xb4>)
 80015c2:	2220      	movs	r2, #32
 80015c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1000;
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <MX_RTC_Init+0xb4>)
 80015c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <MX_RTC_Init+0xb4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015d4:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <MX_RTC_Init+0xb4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015da:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <MX_RTC_Init+0xb4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_RTC_Init+0xb4>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015e6:	481a      	ldr	r0, [pc, #104]	; (8001650 <MX_RTC_Init+0xb4>)
 80015e8:	f00b fd7c 	bl	800d0e4 <HAL_RTC_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80015f2:	f001 f999 	bl	8002928 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80015fe:	2300      	movs	r3, #0
 8001600:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2201      	movs	r2, #1
 800160e:	4619      	mov	r1, r3
 8001610:	480f      	ldr	r0, [pc, #60]	; (8001650 <MX_RTC_Init+0xb4>)
 8001612:	f00b fde9 	bl	800d1e8 <HAL_RTC_SetTime>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800161c:	f001 f984 	bl	8002928 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001620:	2305      	movs	r3, #5
 8001622:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001624:	2305      	movs	r3, #5
 8001626:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 8001628:	2331      	movs	r3, #49	; 0x31
 800162a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 800162c:	2324      	movs	r3, #36	; 0x24
 800162e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001630:	463b      	mov	r3, r7
 8001632:	2201      	movs	r2, #1
 8001634:	4619      	mov	r1, r3
 8001636:	4806      	ldr	r0, [pc, #24]	; (8001650 <MX_RTC_Init+0xb4>)
 8001638:	f00b fed0 	bl	800d3dc <HAL_RTC_SetDate>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001642:	f001 f971 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	240003b4 	.word	0x240003b4
 8001654:	58004000 	.word	0x58004000

08001658 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <MX_SPI1_Init+0xa8>)
 800165e:	4a29      	ldr	r2, [pc, #164]	; (8001704 <MX_SPI1_Init+0xac>)
 8001660:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001662:	4b27      	ldr	r3, [pc, #156]	; (8001700 <MX_SPI1_Init+0xa8>)
 8001664:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001668:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800166a:	4b25      	ldr	r3, [pc, #148]	; (8001700 <MX_SPI1_Init+0xa8>)
 800166c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001670:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001672:	4b23      	ldr	r3, [pc, #140]	; (8001700 <MX_SPI1_Init+0xa8>)
 8001674:	220f      	movs	r2, #15
 8001676:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001678:	4b21      	ldr	r3, [pc, #132]	; (8001700 <MX_SPI1_Init+0xa8>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <MX_SPI1_Init+0xa8>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <MX_SPI1_Init+0xa8>)
 8001686:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800168a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <MX_SPI1_Init+0xa8>)
 800168e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001692:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_SPI1_Init+0xa8>)
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <MX_SPI1_Init+0xa8>)
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_SPI1_Init+0xa8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <MX_SPI1_Init+0xa8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_SPI1_Init+0xa8>)
 80016ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_SPI1_Init+0xa8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_SPI1_Init+0xa8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_SPI1_Init+0xa8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_SPI1_Init+0xa8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_SPI1_Init+0xa8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <MX_SPI1_Init+0xa8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_SPI1_Init+0xa8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <MX_SPI1_Init+0xa8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_SPI1_Init+0xa8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_SPI1_Init+0xa8>)
 80016ec:	f00c f81c 	bl	800d728 <HAL_SPI_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80016f6:	f001 f917 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	240003d8 	.word	0x240003d8
 8001704:	40013000 	.word	0x40013000

08001708 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800170c:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <MX_SPI2_Init+0xa8>)
 800170e:	4a29      	ldr	r2, [pc, #164]	; (80017b4 <MX_SPI2_Init+0xac>)
 8001710:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001712:	4b27      	ldr	r3, [pc, #156]	; (80017b0 <MX_SPI2_Init+0xa8>)
 8001714:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001718:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800171a:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <MX_SPI2_Init+0xa8>)
 800171c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001720:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001722:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <MX_SPI2_Init+0xa8>)
 8001724:	220f      	movs	r2, #15
 8001726:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <MX_SPI2_Init+0xa8>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800172e:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <MX_SPI2_Init+0xa8>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <MX_SPI2_Init+0xa8>)
 8001736:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800173a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <MX_SPI2_Init+0xa8>)
 800173e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001742:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <MX_SPI2_Init+0xa8>)
 8001746:	2200      	movs	r2, #0
 8001748:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <MX_SPI2_Init+0xa8>)
 800174c:	2200      	movs	r2, #0
 800174e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <MX_SPI2_Init+0xa8>)
 8001752:	2200      	movs	r2, #0
 8001754:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <MX_SPI2_Init+0xa8>)
 8001758:	2200      	movs	r2, #0
 800175a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_SPI2_Init+0xa8>)
 800175e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001762:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_SPI2_Init+0xa8>)
 8001766:	2200      	movs	r2, #0
 8001768:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_SPI2_Init+0xa8>)
 800176c:	2200      	movs	r2, #0
 800176e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_SPI2_Init+0xa8>)
 8001772:	2200      	movs	r2, #0
 8001774:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_SPI2_Init+0xa8>)
 8001778:	2200      	movs	r2, #0
 800177a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_SPI2_Init+0xa8>)
 800177e:	2200      	movs	r2, #0
 8001780:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_SPI2_Init+0xa8>)
 8001784:	2200      	movs	r2, #0
 8001786:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_SPI2_Init+0xa8>)
 800178a:	2200      	movs	r2, #0
 800178c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_SPI2_Init+0xa8>)
 8001790:	2200      	movs	r2, #0
 8001792:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_SPI2_Init+0xa8>)
 8001796:	2200      	movs	r2, #0
 8001798:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_SPI2_Init+0xa8>)
 800179c:	f00b ffc4 	bl	800d728 <HAL_SPI_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017a6:	f001 f8bf 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	24000460 	.word	0x24000460
 80017b4:	40003800 	.word	0x40003800

080017b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b09a      	sub	sp, #104	; 0x68
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
 80017e8:	615a      	str	r2, [r3, #20]
 80017ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	222c      	movs	r2, #44	; 0x2c
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f014 f892 	bl	801591c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017f8:	4b44      	ldr	r3, [pc, #272]	; (800190c <MX_TIM1_Init+0x154>)
 80017fa:	4a45      	ldr	r2, [pc, #276]	; (8001910 <MX_TIM1_Init+0x158>)
 80017fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 80017fe:	4b43      	ldr	r3, [pc, #268]	; (800190c <MX_TIM1_Init+0x154>)
 8001800:	22ef      	movs	r2, #239	; 0xef
 8001802:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001804:	4b41      	ldr	r3, [pc, #260]	; (800190c <MX_TIM1_Init+0x154>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800180a:	4b40      	ldr	r3, [pc, #256]	; (800190c <MX_TIM1_Init+0x154>)
 800180c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001810:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001812:	4b3e      	ldr	r3, [pc, #248]	; (800190c <MX_TIM1_Init+0x154>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001818:	4b3c      	ldr	r3, [pc, #240]	; (800190c <MX_TIM1_Init+0x154>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181e:	4b3b      	ldr	r3, [pc, #236]	; (800190c <MX_TIM1_Init+0x154>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001824:	4839      	ldr	r0, [pc, #228]	; (800190c <MX_TIM1_Init+0x154>)
 8001826:	f00c fbd0 	bl	800dfca <HAL_TIM_Base_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001830:	f001 f87a 	bl	8002928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001838:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800183a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800183e:	4619      	mov	r1, r3
 8001840:	4832      	ldr	r0, [pc, #200]	; (800190c <MX_TIM1_Init+0x154>)
 8001842:	f00d fa0f 	bl	800ec64 <HAL_TIM_ConfigClockSource>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800184c:	f001 f86c 	bl	8002928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001850:	482e      	ldr	r0, [pc, #184]	; (800190c <MX_TIM1_Init+0x154>)
 8001852:	f00c fe7b 	bl	800e54c <HAL_TIM_PWM_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800185c:	f001 f864 	bl	8002928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800186c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001870:	4619      	mov	r1, r3
 8001872:	4826      	ldr	r0, [pc, #152]	; (800190c <MX_TIM1_Init+0x154>)
 8001874:	f00d ff4c 	bl	800f710 <HAL_TIMEx_MasterConfigSynchronization>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800187e:	f001 f853 	bl	8002928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001882:	2360      	movs	r3, #96	; 0x60
 8001884:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001886:	f240 13df 	movw	r3, #479	; 0x1df
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188c:	2300      	movs	r3, #0
 800188e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001890:	2300      	movs	r3, #0
 8001892:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a4:	2200      	movs	r2, #0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4818      	ldr	r0, [pc, #96]	; (800190c <MX_TIM1_Init+0x154>)
 80018aa:	f00d f8c7 	bl	800ea3c <HAL_TIM_PWM_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80018b4:	f001 f838 	bl	8002928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	4619      	mov	r1, r3
 80018ec:	4807      	ldr	r0, [pc, #28]	; (800190c <MX_TIM1_Init+0x154>)
 80018ee:	f00d ff9d 	bl	800f82c <HAL_TIMEx_ConfigBreakDeadTime>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80018f8:	f001 f816 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018fc:	4803      	ldr	r0, [pc, #12]	; (800190c <MX_TIM1_Init+0x154>)
 80018fe:	f001 fba1 	bl	8003044 <HAL_TIM_MspPostInit>

}
 8001902:	bf00      	nop
 8001904:	3768      	adds	r7, #104	; 0x68
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	240004e8 	.word	0x240004e8
 8001910:	40010000 	.word	0x40010000

08001914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08e      	sub	sp, #56	; 0x38
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001934:	463b      	mov	r3, r7
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]
 8001942:	615a      	str	r2, [r3, #20]
 8001944:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <MX_TIM2_Init+0xe8>)
 8001948:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800194c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 800194e:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <MX_TIM2_Init+0xe8>)
 8001950:	22ef      	movs	r2, #239	; 0xef
 8001952:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001954:	4b29      	ldr	r3, [pc, #164]	; (80019fc <MX_TIM2_Init+0xe8>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800195a:	4b28      	ldr	r3, [pc, #160]	; (80019fc <MX_TIM2_Init+0xe8>)
 800195c:	f640 4234 	movw	r2, #3124	; 0xc34
 8001960:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001962:	4b26      	ldr	r3, [pc, #152]	; (80019fc <MX_TIM2_Init+0xe8>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <MX_TIM2_Init+0xe8>)
 800196a:	2280      	movs	r2, #128	; 0x80
 800196c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800196e:	4823      	ldr	r0, [pc, #140]	; (80019fc <MX_TIM2_Init+0xe8>)
 8001970:	f00c fb2b 	bl	800dfca <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800197a:	f000 ffd5 	bl	8002928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001984:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001988:	4619      	mov	r1, r3
 800198a:	481c      	ldr	r0, [pc, #112]	; (80019fc <MX_TIM2_Init+0xe8>)
 800198c:	f00d f96a 	bl	800ec64 <HAL_TIM_ConfigClockSource>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001996:	f000 ffc7 	bl	8002928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800199a:	4818      	ldr	r0, [pc, #96]	; (80019fc <MX_TIM2_Init+0xe8>)
 800199c:	f00c fdd6 	bl	800e54c <HAL_TIM_PWM_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019a6:	f000 ffbf 	bl	8002928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019aa:	2320      	movs	r3, #32
 80019ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	4619      	mov	r1, r3
 80019b8:	4810      	ldr	r0, [pc, #64]	; (80019fc <MX_TIM2_Init+0xe8>)
 80019ba:	f00d fea9 	bl	800f710 <HAL_TIMEx_MasterConfigSynchronization>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019c4:	f000 ffb0 	bl	8002928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c8:	2360      	movs	r3, #96	; 0x60
 80019ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019d8:	463b      	mov	r3, r7
 80019da:	220c      	movs	r2, #12
 80019dc:	4619      	mov	r1, r3
 80019de:	4807      	ldr	r0, [pc, #28]	; (80019fc <MX_TIM2_Init+0xe8>)
 80019e0:	f00d f82c 	bl	800ea3c <HAL_TIM_PWM_ConfigChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019ea:	f000 ff9d 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019ee:	4803      	ldr	r0, [pc, #12]	; (80019fc <MX_TIM2_Init+0xe8>)
 80019f0:	f001 fb28 	bl	8003044 <HAL_TIM_MspPostInit>

}
 80019f4:	bf00      	nop
 80019f6:	3738      	adds	r7, #56	; 0x38
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	24000534 	.word	0x24000534

08001a00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a06:	f107 0310 	add.w	r3, r7, #16
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <MX_TIM3_Init+0x94>)
 8001a20:	4a1d      	ldr	r2, [pc, #116]	; (8001a98 <MX_TIM3_Init+0x98>)
 8001a22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <MX_TIM3_Init+0x94>)
 8001a26:	22ef      	movs	r2, #239	; 0xef
 8001a28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <MX_TIM3_Init+0x94>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <MX_TIM3_Init+0x94>)
 8001a32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <MX_TIM3_Init+0x94>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <MX_TIM3_Init+0x94>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a44:	4813      	ldr	r0, [pc, #76]	; (8001a94 <MX_TIM3_Init+0x94>)
 8001a46:	f00c fac0 	bl	800dfca <HAL_TIM_Base_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a50:	f000 ff6a 	bl	8002928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a5a:	f107 0310 	add.w	r3, r7, #16
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480c      	ldr	r0, [pc, #48]	; (8001a94 <MX_TIM3_Init+0x94>)
 8001a62:	f00d f8ff 	bl	800ec64 <HAL_TIM_ConfigClockSource>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a6c:	f000 ff5c 	bl	8002928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_TIM3_Init+0x94>)
 8001a7e:	f00d fe47 	bl	800f710 <HAL_TIMEx_MasterConfigSynchronization>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a88:	f000 ff4e 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	3720      	adds	r7, #32
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	24000580 	.word	0x24000580
 8001a98:	40000400 	.word	0x40000400

08001a9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa0:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <MX_USART1_UART_Init+0x90>)
 8001aa2:	4a23      	ldr	r2, [pc, #140]	; (8001b30 <MX_USART1_UART_Init+0x94>)
 8001aa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001aa6:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <MX_USART1_UART_Init+0x90>)
 8001aa8:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001aac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aae:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <MX_USART1_UART_Init+0x90>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab4:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <MX_USART1_UART_Init+0x90>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <MX_USART1_UART_Init+0x90>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <MX_USART1_UART_Init+0x90>)
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <MX_USART1_UART_Init+0x90>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001acc:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <MX_USART1_UART_Init+0x90>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <MX_USART1_UART_Init+0x90>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <MX_USART1_UART_Init+0x90>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <MX_USART1_UART_Init+0x90>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae4:	4811      	ldr	r0, [pc, #68]	; (8001b2c <MX_USART1_UART_Init+0x90>)
 8001ae6:	f00d ff3d 	bl	800f964 <HAL_UART_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001af0:	f000 ff1a 	bl	8002928 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af4:	2100      	movs	r1, #0
 8001af6:	480d      	ldr	r0, [pc, #52]	; (8001b2c <MX_USART1_UART_Init+0x90>)
 8001af8:	f010 fb5f 	bl	80121ba <HAL_UARTEx_SetTxFifoThreshold>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b02:	f000 ff11 	bl	8002928 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b06:	2100      	movs	r1, #0
 8001b08:	4808      	ldr	r0, [pc, #32]	; (8001b2c <MX_USART1_UART_Init+0x90>)
 8001b0a:	f010 fb94 	bl	8012236 <HAL_UARTEx_SetRxFifoThreshold>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b14:	f000 ff08 	bl	8002928 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b18:	4804      	ldr	r0, [pc, #16]	; (8001b2c <MX_USART1_UART_Init+0x90>)
 8001b1a:	f010 fb15 	bl	8012148 <HAL_UARTEx_DisableFifoMode>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b24:	f000 ff00 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	240005cc 	.word	0x240005cc
 8001b30:	40011000 	.word	0x40011000

08001b34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <MX_DMA_Init+0x5c>)
 8001b3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b40:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <MX_DMA_Init+0x5c>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_DMA_Init+0x5c>)
 8001b4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2105      	movs	r1, #5
 8001b5c:	200b      	movs	r0, #11
 8001b5e:	f003 fb09 	bl	8005174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b62:	200b      	movs	r0, #11
 8001b64:	f003 fb20 	bl	80051a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2105      	movs	r1, #5
 8001b6c:	200c      	movs	r0, #12
 8001b6e:	f003 fb01 	bl	8005174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b72:	200c      	movs	r0, #12
 8001b74:	f003 fb18 	bl	80051a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2105      	movs	r1, #5
 8001b7c:	2010      	movs	r0, #16
 8001b7e:	f003 faf9 	bl	8005174 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b82:	2010      	movs	r0, #16
 8001b84:	f003 fb10 	bl	80051a8 <HAL_NVIC_EnableIRQ>

}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	58024400 	.word	0x58024400

08001b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
 8001ba8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001baa:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <MX_GPIO_Init+0xe8>)
 8001bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb0:	4a32      	ldr	r2, [pc, #200]	; (8001c7c <MX_GPIO_Init+0xe8>)
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bba:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <MX_GPIO_Init+0xe8>)
 8001bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bc8:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <MX_GPIO_Init+0xe8>)
 8001bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bce:	4a2b      	ldr	r2, [pc, #172]	; (8001c7c <MX_GPIO_Init+0xe8>)
 8001bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd8:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <MX_GPIO_Init+0xe8>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <MX_GPIO_Init+0xe8>)
 8001be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bec:	4a23      	ldr	r2, [pc, #140]	; (8001c7c <MX_GPIO_Init+0xe8>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf6:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <MX_GPIO_Init+0xe8>)
 8001bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <MX_GPIO_Init+0xe8>)
 8001c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0a:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <MX_GPIO_Init+0xe8>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <MX_GPIO_Init+0xe8>)
 8001c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c22:	2200      	movs	r2, #0
 8001c24:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c28:	4815      	ldr	r0, [pc, #84]	; (8001c80 <MX_GPIO_Init+0xec>)
 8001c2a:	f006 fed5 	bl	80089d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2164      	movs	r1, #100	; 0x64
 8001c32:	4814      	ldr	r0, [pc, #80]	; (8001c84 <MX_GPIO_Init+0xf0>)
 8001c34:	f006 fed0 	bl	80089d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c38:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c3c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4619      	mov	r1, r3
 8001c50:	480b      	ldr	r0, [pc, #44]	; (8001c80 <MX_GPIO_Init+0xec>)
 8001c52:	f006 fcf9 	bl	8008648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c56:	2364      	movs	r3, #100	; 0x64
 8001c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_GPIO_Init+0xf0>)
 8001c6e:	f006 fceb 	bl	8008648 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c72:	bf00      	nop
 8001c74:	3728      	adds	r7, #40	; 0x28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	58024400 	.word	0x58024400
 8001c80:	58020800 	.word	0x58020800
 8001c84:	58020400 	.word	0x58020400

08001c88 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001c92:	2300      	movs	r3, #0
 8001c94:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	b299      	uxth	r1, r3
 8001c9a:	f107 0208 	add.w	r2, r7, #8
 8001c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	4817      	ldr	r0, [pc, #92]	; (8001d04 <poll_i2c_sensor+0x7c>)
 8001ca8:	f006 ff4c 	bl	8008b44 <HAL_I2C_Master_Transmit>
 8001cac:	4603      	mov	r3, r0
 8001cae:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001cb0:	7b7b      	ldrb	r3, [r7, #13]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001cb6:	4814      	ldr	r0, [pc, #80]	; (8001d08 <poll_i2c_sensor+0x80>)
 8001cb8:	f013 ff86 	bl	8015bc8 <puts>
 8001cbc:	e01c      	b.n	8001cf8 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	b299      	uxth	r1, r3
 8001cc2:	f107 0208 	add.w	r2, r7, #8
 8001cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2302      	movs	r3, #2
 8001cce:	480d      	ldr	r0, [pc, #52]	; (8001d04 <poll_i2c_sensor+0x7c>)
 8001cd0:	f007 f850 	bl	8008d74 <HAL_I2C_Master_Receive>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001cd8:	7b7b      	ldrb	r3, [r7, #13]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001cde:	480b      	ldr	r0, [pc, #44]	; (8001d0c <poll_i2c_sensor+0x84>)
 8001ce0:	f013 ff72 	bl	8015bc8 <puts>
 8001ce4:	e008      	b.n	8001cf8 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001ce6:	7a3b      	ldrb	r3, [r7, #8]
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001cec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cf0:	7a7a      	ldrb	r2, [r7, #9]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	10db      	asrs	r3, r3, #3
 8001cf6:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001cf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	24000360 	.word	0x24000360
 8001d08:	0801656c 	.word	0x0801656c
 8001d0c:	0801657c 	.word	0x0801657c

08001d10 <receive_pmt_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001d18:	f107 010c 	add.w	r1, r7, #12
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	2201      	movs	r2, #1
 8001d20:	480c      	ldr	r0, [pc, #48]	; (8001d54 <receive_pmt_spi+0x44>)
 8001d22:	f00b fe25 	bl	800d970 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d26:	2300      	movs	r3, #0
 8001d28:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001d2a:	7b7b      	ldrb	r3, [r7, #13]
 8001d2c:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <receive_pmt_spi+0x44>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <receive_pmt_spi+0x44>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d3c:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7bba      	ldrb	r2, [r7, #14]
 8001d42:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3301      	adds	r3, #1
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	701a      	strb	r2, [r3, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	240003d8 	.word	0x240003d8

08001d58 <receive_erpa_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001d60:	f107 010c 	add.w	r1, r7, #12
 8001d64:	2364      	movs	r3, #100	; 0x64
 8001d66:	2201      	movs	r2, #1
 8001d68:	480c      	ldr	r0, [pc, #48]	; (8001d9c <receive_erpa_spi+0x44>)
 8001d6a:	f00b fe01 	bl	800d970 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001d72:	7b7b      	ldrb	r3, [r7, #13]
 8001d74:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <receive_erpa_spi+0x44>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <receive_erpa_spi+0x44>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d84:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7bba      	ldrb	r2, [r7, #14]
 8001d8a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	701a      	strb	r2, [r3, #0]
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	24000460 	.word	0x24000460

08001da0 <receive_erpa_adc>:
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];	// SWPmon --
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <receive_erpa_adc+0x30>)
 8001daa:	885b      	ldrh	r3, [r3, #2]
 8001dac:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5]; 	// TEMP1 -- verified doesn't need to change
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <receive_erpa_adc+0x30>)
 8001db0:	895b      	ldrh	r3, [r3, #10]
 8001db2:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	89fa      	ldrh	r2, [r7, #14]
 8001db8:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	89ba      	ldrh	r2, [r7, #12]
 8001dc0:	801a      	strh	r2, [r3, #0]
}
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	24000bc0 	.word	0x24000bc0

08001dd4 <receive_hk_i2c>:
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001ddc:	2390      	movs	r3, #144	; 0x90
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff52 	bl	8001c88 <poll_i2c_sensor>
 8001de4:	4603      	mov	r3, r0
 8001de6:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001de8:	2394      	movs	r3, #148	; 0x94
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff4c 	bl	8001c88 <poll_i2c_sensor>
 8001df0:	4603      	mov	r3, r0
 8001df2:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001df4:	2392      	movs	r3, #146	; 0x92
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff46 	bl	8001c88 <poll_i2c_sensor>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001e00:	2396      	movs	r3, #150	; 0x96
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff40 	bl	8001c88 <poll_i2c_sensor>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	89fa      	ldrh	r2, [r7, #14]
 8001e10:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3302      	adds	r3, #2
 8001e16:	89ba      	ldrh	r2, [r7, #12]
 8001e18:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	897a      	ldrh	r2, [r7, #10]
 8001e20:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3306      	adds	r3, #6
 8001e26:	893a      	ldrh	r2, [r7, #8]
 8001e28:	801a      	strh	r2, [r3, #0]
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <receive_hk_adc1>:
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];	// BUSVmon -- verified doesn't need to change
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <receive_hk_adc1+0x90>)
 8001e3e:	8a9b      	ldrh	r3, [r3, #20]
 8001e40:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];	// BUSImon -- verified doesn't need to change
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <receive_hk_adc1+0x90>)
 8001e44:	8a1b      	ldrh	r3, [r3, #16]
 8001e46:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];	// 2v5mon -- verified doesn't need to change
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <receive_hk_adc1+0x90>)
 8001e4a:	899b      	ldrh	r3, [r3, #12]
 8001e4c:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];	// n3v3mon --
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <receive_hk_adc1+0x90>)
 8001e50:	8a5b      	ldrh	r3, [r3, #18]
 8001e52:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];	// n200v -- verified doesn't need to change
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <receive_hk_adc1+0x90>)
 8001e56:	889b      	ldrh	r3, [r3, #4]
 8001e58:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];	// n800v --
 8001e5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <receive_hk_adc1+0x90>)
 8001e5c:	88db      	ldrh	r3, [r3, #6]
 8001e5e:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];	// 5vmon --
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <receive_hk_adc1+0x90>)
 8001e62:	89db      	ldrh	r3, [r3, #14]
 8001e64:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];	// 15vmon -- verified doesn't need to change
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <receive_hk_adc1+0x90>)
 8001e68:	891b      	ldrh	r3, [r3, #8]
 8001e6a:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];	// 5vrefmon --
 8001e6c:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <receive_hk_adc1+0x90>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	8bfa      	ldrh	r2, [r7, #30]
 8001e76:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	8bba      	ldrh	r2, [r7, #28]
 8001e7e:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3304      	adds	r3, #4
 8001e84:	8b7a      	ldrh	r2, [r7, #26]
 8001e86:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3306      	adds	r3, #6
 8001e8c:	8b3a      	ldrh	r2, [r7, #24]
 8001e8e:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3308      	adds	r3, #8
 8001e94:	8afa      	ldrh	r2, [r7, #22]
 8001e96:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	330a      	adds	r3, #10
 8001e9c:	8aba      	ldrh	r2, [r7, #20]
 8001e9e:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	330c      	adds	r3, #12
 8001ea4:	8a7a      	ldrh	r2, [r7, #18]
 8001ea6:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	330e      	adds	r3, #14
 8001eac:	8a3a      	ldrh	r2, [r7, #16]
 8001eae:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3310      	adds	r3, #16
 8001eb4:	89fa      	ldrh	r2, [r7, #14]
 8001eb6:	801a      	strh	r2, [r3, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	3724      	adds	r7, #36	; 0x24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	24000bc0 	.word	0x24000bc0

08001ec8 <receive_hk_adc3>:
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8001ed0:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <receive_hk_adc3+0x4c>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <receive_hk_adc3+0x4c>)
 8001ed8:	885b      	ldrh	r3, [r3, #2]
 8001eda:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2]; 		// n5vmon --
 8001edc:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <receive_hk_adc3+0x4c>)
 8001ede:	889b      	ldrh	r3, [r3, #4]
 8001ee0:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];		// 3v3mon --
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <receive_hk_adc3+0x4c>)
 8001ee4:	88db      	ldrh	r3, [r3, #6]
 8001ee6:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	89fa      	ldrh	r2, [r7, #14]
 8001eec:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	89ba      	ldrh	r2, [r7, #12]
 8001ef4:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	897a      	ldrh	r2, [r7, #10]
 8001efc:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3306      	adds	r3, #6
 8001f02:	893a      	ldrh	r2, [r7, #8]
 8001f04:	801a      	strh	r2, [r3, #0]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	24000be0 	.word	0x24000be0

08001f18 <handshake>:

// *********************************************************************************************************** HELPER FUNCTIONS


int handshake()
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b090      	sub	sp, #64	; 0x40
 8001f1c:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8001f1e:	230a      	movs	r3, #10
 8001f20:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do
	{
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8001f22:	f107 011c 	add.w	r1, r7, #28
 8001f26:	2364      	movs	r3, #100	; 0x64
 8001f28:	2209      	movs	r2, #9
 8001f2a:	4840      	ldr	r0, [pc, #256]	; (800202c <handshake+0x114>)
 8001f2c:	f00d fdf8 	bl	800fb20 <HAL_UART_Receive>
		key = rx_buffer[0];
 8001f30:	7f3b      	ldrb	r3, [r7, #28]
 8001f32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}while(key != 0xFF);
 8001f36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f3a:	2bff      	cmp	r3, #255	; 0xff
 8001f3c:	d1f1      	bne.n	8001f22 <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8001f3e:	7f7b      	ldrb	r3, [r7, #29]
 8001f40:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001f44:	7fbb      	ldrb	r3, [r7, #30]
 8001f46:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001f4a:	7ffb      	ldrb	r3, [r7, #31]
 8001f4c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8001f50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001f58:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001f5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8001f60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001f64:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8]; // Combine MSB and LSB for milliseconds
 8001f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	b21a      	sxth	r2, r3
 8001f70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8001f7c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001f80:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8001f82:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f86:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8001f88:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001f8c:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8001f8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f92:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 8001f94:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001f98:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 8001f9a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001f9e:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds; // Set the milliseconds (if supported by your RTC)
 8001fa0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fa2:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 8001fa4:	f107 0318 	add.w	r3, r7, #24
 8001fa8:	2200      	movs	r2, #0
 8001faa:	4619      	mov	r1, r3
 8001fac:	4820      	ldr	r0, [pc, #128]	; (8002030 <handshake+0x118>)
 8001fae:	f00b fa15 	bl	800d3dc <HAL_RTC_SetDate>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001fb8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <handshake+0xac>
	{
		Error_Handler();
 8001fc0:	f000 fcb2 	bl	8002928 <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4819      	ldr	r0, [pc, #100]	; (8002030 <handshake+0x118>)
 8001fcc:	f00b f90c 	bl	800d1e8 <HAL_RTC_SetTime>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8001fd6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <handshake+0xca>
	{
		Error_Handler();
 8001fde:	f000 fca3 	bl	8002928 <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 8001fe2:	23fa      	movs	r3, #250	; 0xfa
 8001fe4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 1;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 2;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < allowed_tries; i++)
 8002000:	2300      	movs	r3, #0
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002004:	e009      	b.n	800201a <handshake+0x102>
	{
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 8002006:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800200a:	2364      	movs	r3, #100	; 0x64
 800200c:	2205      	movs	r2, #5
 800200e:	4807      	ldr	r0, [pc, #28]	; (800202c <handshake+0x114>)
 8002010:	f00d fcf8 	bl	800fa04 <HAL_UART_Transmit>
	for(int i = 0; i < allowed_tries; i++)
 8002014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002016:	3301      	adds	r3, #1
 8002018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800201a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201e:	429a      	cmp	r2, r3
 8002020:	dbf1      	blt.n	8002006 <handshake+0xee>
	}

	return 1;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3740      	adds	r7, #64	; 0x40
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	240005cc 	.word	0x240005cc
 8002030:	240003b4 	.word	0x240003b4

08002034 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0

	TIM2->CCR4 = 312;
 8002038:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800203c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002040:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002042:	210c      	movs	r1, #12
 8002044:	4818      	ldr	r0, [pc, #96]	; (80020a8 <system_setup+0x74>)
 8002046:	f00c fae3 	bl	800e610 <HAL_TIM_PWM_Start>

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800204a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800204e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002052:	4816      	ldr	r0, [pc, #88]	; (80020ac <system_setup+0x78>)
 8002054:	f002 fe94 	bl	8004d80 <HAL_ADCEx_Calibration_Start>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <system_setup+0x2e>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 800205e:	f000 fc63 	bl	8002928 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8002062:	220b      	movs	r2, #11
 8002064:	4912      	ldr	r1, [pc, #72]	; (80020b0 <system_setup+0x7c>)
 8002066:	4811      	ldr	r0, [pc, #68]	; (80020ac <system_setup+0x78>)
 8002068:	f001 ff68 	bl	8003f3c <HAL_ADC_Start_DMA>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <system_setup+0x42>
			ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002072:	f000 fc59 	bl	8002928 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8002076:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800207a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800207e:	480d      	ldr	r0, [pc, #52]	; (80020b4 <system_setup+0x80>)
 8002080:	f002 fe7e 	bl	8004d80 <HAL_ADCEx_Calibration_Start>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <system_setup+0x5a>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 800208a:	f000 fc4d 	bl	8002928 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 800208e:	2204      	movs	r2, #4
 8002090:	4909      	ldr	r1, [pc, #36]	; (80020b8 <system_setup+0x84>)
 8002092:	4808      	ldr	r0, [pc, #32]	; (80020b4 <system_setup+0x80>)
 8002094:	f001 ff52 	bl	8003f3c <HAL_ADC_Start_DMA>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <system_setup+0x6e>
			ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800209e:	f000 fc43 	bl	8002928 <Error_Handler>
	}
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	24000534 	.word	0x24000534
 80020ac:	2400011c 	.word	0x2400011c
 80020b0:	24000bc0 	.word	0x24000bc0
 80020b4:	24000180 	.word	0x24000180
 80020b8:	24000be0 	.word	0x24000be0

080020bc <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08a      	sub	sp, #40	; 0x28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	2200      	movs	r2, #0
 80020ca:	4619      	mov	r1, r3
 80020cc:	481d      	ldr	r0, [pc, #116]	; (8002144 <getTimestamp+0x88>)
 80020ce:	f00b f929 	bl	800d324 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	2200      	movs	r2, #0
 80020d8:	4619      	mov	r1, r3
 80020da:	481a      	ldr	r0, [pc, #104]	; (8002144 <getTimestamp+0x88>)
 80020dc:	f00b fa06 	bl	800d4ec <HAL_RTC_GetDate>
	uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv);
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020e6:	fb03 f202 	mul.w	r2, r3, r2
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <getTimestamp+0x88>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f2:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24

	//uint32_t milliseconds = currentTime.SubSeconds;


	buffer[0] = currentDate.Year;		// 0-99
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;		// 1-12
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3301      	adds	r3, #1
 8002102:	7b7a      	ldrb	r2, [r7, #13]
 8002104:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;		// 1-31
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3302      	adds	r3, #2
 800210a:	7bba      	ldrb	r2, [r7, #14]
 800210c:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3303      	adds	r3, #3
 8002112:	7c3a      	ldrb	r2, [r7, #16]
 8002114:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
 800211a:	7c7a      	ldrb	r2, [r7, #17]
 800211c:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3305      	adds	r3, #5
 8002122:	7cba      	ldrb	r2, [r7, #18]
 8002124:	701a      	strb	r2, [r3, #0]
	buffer[6] = (milliseconds >> 8) & 0xFF;  // High byte of milliseconds
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	0a1a      	lsrs	r2, r3, #8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3306      	adds	r3, #6
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	701a      	strb	r2, [r3, #0]
	buffer[7] = milliseconds & 0xFF;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3307      	adds	r3, #7
 8002136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	701a      	strb	r2, [r3, #0]

}
 800213c:	bf00      	nop
 800213e:	3728      	adds	r7, #40	; 0x28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	240003b4 	.word	0x240003b4

08002148 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800214e:	bf00      	nop
 8002150:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002154:	483a      	ldr	r0, [pc, #232]	; (8002240 <sample_pmt+0xf8>)
 8002156:	f006 fc27 	bl	80089a8 <HAL_GPIO_ReadPin>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f7      	bne.n	8002150 <sample_pmt+0x8>
	}
	uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002160:	200e      	movs	r0, #14
 8002162:	f013 fbbd 	bl	80158e0 <malloc>
 8002166:	4603      	mov	r3, r0
 8002168:	60fb      	str	r3, [r7, #12]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 800216a:	2002      	movs	r0, #2
 800216c:	f013 fbb8 	bl	80158e0 <malloc>
 8002170:	4603      	mov	r3, r0
 8002172:	60bb      	str	r3, [r7, #8]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8002174:	2008      	movs	r0, #8
 8002176:	f013 fbb3 	bl	80158e0 <malloc>
 800217a:	4603      	mov	r3, r0
 800217c:	607b      	str	r3, [r7, #4]
	getTimestamp(timestamp);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ff9c 	bl	80020bc <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 8002184:	68b8      	ldr	r0, [r7, #8]
 8002186:	f7ff fdc3 	bl	8001d10 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	22bb      	movs	r2, #187	; 0xbb
 800218e:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	3301      	adds	r3, #1
 8002194:	22bb      	movs	r2, #187	; 0xbb
 8002196:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002198:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <sample_pmt+0xfc>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3302      	adds	r3, #2
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 80021a8:	4b26      	ldr	r3, [pc, #152]	; (8002244 <sample_pmt+0xfc>)
 80021aa:	881a      	ldrh	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	3303      	adds	r3, #3
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3304      	adds	r3, #4
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	7812      	ldrb	r2, [r2, #0]
 80021bc:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3305      	adds	r3, #5
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	7852      	ldrb	r2, [r2, #1]
 80021c6:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3306      	adds	r3, #6
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	7812      	ldrb	r2, [r2, #0]
 80021d0:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	3307      	adds	r3, #7
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	7852      	ldrb	r2, [r2, #1]
 80021da:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	3308      	adds	r3, #8
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	7892      	ldrb	r2, [r2, #2]
 80021e4:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3309      	adds	r3, #9
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	78d2      	ldrb	r2, [r2, #3]
 80021ee:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	330a      	adds	r3, #10
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	7912      	ldrb	r2, [r2, #4]
 80021f8:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	330b      	adds	r3, #11
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	7952      	ldrb	r2, [r2, #5]
 8002202:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	330c      	adds	r3, #12
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	7992      	ldrb	r2, [r2, #6]
 800220c:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	330d      	adds	r3, #13
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	79d2      	ldrb	r2, [r2, #7]
 8002216:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 1);
 8002218:	2301      	movs	r3, #1
 800221a:	220e      	movs	r2, #14
 800221c:	68f9      	ldr	r1, [r7, #12]
 800221e:	480a      	ldr	r0, [pc, #40]	; (8002248 <sample_pmt+0x100>)
 8002220:	f00d fbf0 	bl	800fa04 <HAL_UART_Transmit>
	free(buffer);
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f013 fb63 	bl	80158f0 <free>
	free(pmt_spi);
 800222a:	68b8      	ldr	r0, [r7, #8]
 800222c:	f013 fb60 	bl	80158f0 <free>
	free(timestamp);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f013 fb5d 	bl	80158f0 <free>
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	58020000 	.word	0x58020000
 8002244:	24000b30 	.word	0x24000b30
 8002248:	240005cc 	.word	0x240005cc

0800224c <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002252:	bf00      	nop
 8002254:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002258:	484e      	ldr	r0, [pc, #312]	; (8002394 <sample_erpa+0x148>)
 800225a:	f006 fba5 	bl	80089a8 <HAL_GPIO_ReadPin>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f7      	bne.n	8002254 <sample_erpa+0x8>
	}

	uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002264:	2012      	movs	r0, #18
 8002266:	f013 fb3b 	bl	80158e0 <malloc>
 800226a:	4603      	mov	r3, r0
 800226c:	60fb      	str	r3, [r7, #12]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 800226e:	2002      	movs	r0, #2
 8002270:	f013 fb36 	bl	80158e0 <malloc>
 8002274:	4603      	mov	r3, r0
 8002276:	60bb      	str	r3, [r7, #8]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 8002278:	2004      	movs	r0, #4
 800227a:	f013 fb31 	bl	80158e0 <malloc>
 800227e:	4603      	mov	r3, r0
 8002280:	607b      	str	r3, [r7, #4]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8002282:	2008      	movs	r0, #8
 8002284:	f013 fb2c 	bl	80158e0 <malloc>
 8002288:	4603      	mov	r3, r0
 800228a:	603b      	str	r3, [r7, #0]
	getTimestamp(timestamp);
 800228c:	6838      	ldr	r0, [r7, #0]
 800228e:	f7ff ff15 	bl	80020bc <getTimestamp>
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 8002292:	68b8      	ldr	r0, [r7, #8]
 8002294:	f7ff fd60 	bl	8001d58 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff fd81 	bl	8001da0 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	22aa      	movs	r2, #170	; 0xaa
 80022a2:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3301      	adds	r3, #1
 80022a8:	22aa      	movs	r2, #170	; 0xaa
 80022aa:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 80022ac:	4b3a      	ldr	r3, [pc, #232]	; (8002398 <sample_erpa+0x14c>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	3302      	adds	r3, #2
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 80022bc:	4b36      	ldr	r3, [pc, #216]	; (8002398 <sample_erpa+0x14c>)
 80022be:	881a      	ldrh	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	3303      	adds	r3, #3
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3304      	adds	r3, #4
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	881a      	ldrh	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3305      	adds	r3, #5
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3302      	adds	r3, #2
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3306      	adds	r3, #6
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3302      	adds	r3, #2
 80022fa:	881a      	ldrh	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3307      	adds	r3, #7
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3308      	adds	r3, #8
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	7812      	ldrb	r2, [r2, #0]
 800230c:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	3309      	adds	r3, #9
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	7852      	ldrb	r2, [r2, #1]
 8002316:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	330a      	adds	r3, #10
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	7812      	ldrb	r2, [r2, #0]
 8002320:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	330b      	adds	r3, #11
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	7852      	ldrb	r2, [r2, #1]
 800232a:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	330c      	adds	r3, #12
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	7892      	ldrb	r2, [r2, #2]
 8002334:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	330d      	adds	r3, #13
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	78d2      	ldrb	r2, [r2, #3]
 800233e:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	330e      	adds	r3, #14
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	7912      	ldrb	r2, [r2, #4]
 8002348:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	330f      	adds	r3, #15
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	7952      	ldrb	r2, [r2, #5]
 8002352:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3310      	adds	r3, #16
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	7992      	ldrb	r2, [r2, #6]
 800235c:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	3311      	adds	r3, #17
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	79d2      	ldrb	r2, [r2, #7]
 8002366:	701a      	strb	r2, [r3, #0]



	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 1);
 8002368:	2301      	movs	r3, #1
 800236a:	2212      	movs	r2, #18
 800236c:	68f9      	ldr	r1, [r7, #12]
 800236e:	480b      	ldr	r0, [pc, #44]	; (800239c <sample_erpa+0x150>)
 8002370:	f00d fb48 	bl	800fa04 <HAL_UART_Transmit>
	free(buffer);
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f013 fabb 	bl	80158f0 <free>
	free(erpa_spi);
 800237a:	68b8      	ldr	r0, [r7, #8]
 800237c:	f013 fab8 	bl	80158f0 <free>
	free(erpa_adc);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f013 fab5 	bl	80158f0 <free>
	free(timestamp);
 8002386:	6838      	ldr	r0, [r7, #0]
 8002388:	f013 fab2 	bl	80158f0 <free>
}
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	58020400 	.word	0x58020400
 8002398:	24000b32 	.word	0x24000b32
 800239c:	240005cc 	.word	0x240005cc

080023a0 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
	uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80023a6:	202e      	movs	r0, #46	; 0x2e
 80023a8:	f013 fa9a 	bl	80158e0 <malloc>
 80023ac:	4603      	mov	r3, r0
 80023ae:	617b      	str	r3, [r7, #20]

	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 80023b0:	2008      	movs	r0, #8
 80023b2:	f013 fa95 	bl	80158e0 <malloc>
 80023b6:	4603      	mov	r3, r0
 80023b8:	613b      	str	r3, [r7, #16]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 80023ba:	2012      	movs	r0, #18
 80023bc:	f013 fa90 	bl	80158e0 <malloc>
 80023c0:	4603      	mov	r3, r0
 80023c2:	60fb      	str	r3, [r7, #12]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 80023c4:	2008      	movs	r0, #8
 80023c6:	f013 fa8b 	bl	80158e0 <malloc>
 80023ca:	4603      	mov	r3, r0
 80023cc:	60bb      	str	r3, [r7, #8]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 80023ce:	2008      	movs	r0, #8
 80023d0:	f013 fa86 	bl	80158e0 <malloc>
 80023d4:	4603      	mov	r3, r0
 80023d6:	607b      	str	r3, [r7, #4]
	getTimestamp(timestamp);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff fe6f 	bl	80020bc <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	receive_hk_i2c(hk_i2c);
 80023de:	6938      	ldr	r0, [r7, #16]
 80023e0:	f7ff fcf8 	bl	8001dd4 <receive_hk_i2c>
	receive_hk_adc1(hk_adc1);
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f7ff fd25 	bl	8001e34 <receive_hk_adc1>
	receive_hk_adc3(hk_adc3);
 80023ea:	68b8      	ldr	r0, [r7, #8]
 80023ec:	f7ff fd6c 	bl	8001ec8 <receive_hk_adc3>
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	22cc      	movs	r2, #204	; 0xcc
 80023f4:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	3301      	adds	r3, #1
 80023fa:	22cc      	movs	r2, #204	; 0xcc
 80023fc:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80023fe:	4ba6      	ldr	r3, [pc, #664]	; (8002698 <sample_hk+0x2f8>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	b29a      	uxth	r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3302      	adds	r3, #2
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800240e:	4ba2      	ldr	r3, [pc, #648]	; (8002698 <sample_hk+0x2f8>)
 8002410:	881a      	ldrh	r2, [r3, #0]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3303      	adds	r3, #3
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	3302      	adds	r3, #2
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	b29a      	uxth	r2, r3
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	3304      	adds	r3, #4
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	3302      	adds	r3, #2
 8002430:	881a      	ldrh	r2, [r3, #0]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	3305      	adds	r3, #5
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	b29a      	uxth	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	3306      	adds	r3, #6
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	881a      	ldrh	r2, [r3, #0]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	3307      	adds	r3, #7
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800245c:	121a      	asrs	r2, r3, #8
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3308      	adds	r3, #8
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f9b3 2000 	ldrsh.w	r2, [r3]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	3309      	adds	r3, #9
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	3302      	adds	r3, #2
 8002478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800247c:	121a      	asrs	r2, r3, #8
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	330a      	adds	r3, #10
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	3302      	adds	r3, #2
 800248a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	330b      	adds	r3, #11
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	3304      	adds	r3, #4
 800249a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800249e:	121a      	asrs	r2, r3, #8
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	330c      	adds	r3, #12
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	3304      	adds	r3, #4
 80024ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	330d      	adds	r3, #13
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	3306      	adds	r3, #6
 80024bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c0:	121a      	asrs	r2, r3, #8
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	330e      	adds	r3, #14
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	3306      	adds	r3, #6
 80024ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	330f      	adds	r3, #15
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3310      	adds	r3, #16
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	881a      	ldrh	r2, [r3, #0]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3311      	adds	r3, #17
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	3302      	adds	r3, #2
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	b29a      	uxth	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	3312      	adds	r3, #18
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	3302      	adds	r3, #2
 800250c:	881a      	ldrh	r2, [r3, #0]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	3313      	adds	r3, #19
 8002512:	b2d2      	uxtb	r2, r2
 8002514:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3304      	adds	r3, #4
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	b29a      	uxth	r2, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3314      	adds	r3, #20
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	3304      	adds	r3, #4
 800252c:	881a      	ldrh	r2, [r3, #0]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3315      	adds	r3, #21
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc3[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	3306      	adds	r3, #6
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	b29a      	uxth	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3316      	adds	r3, #22
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc3[3] & 0xFF);			// HK 3v3mon LSB
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	3306      	adds	r3, #6
 800254c:	881a      	ldrh	r2, [r3, #0]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	3317      	adds	r3, #23
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	330c      	adds	r3, #12
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	b29a      	uxth	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3318      	adds	r3, #24
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	330c      	adds	r3, #12
 800256c:	881a      	ldrh	r2, [r3, #0]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	3319      	adds	r3, #25
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3306      	adds	r3, #6
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	b29a      	uxth	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	331a      	adds	r3, #26
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	3306      	adds	r3, #6
 800258c:	881a      	ldrh	r2, [r3, #0]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	331b      	adds	r3, #27
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc3[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	3304      	adds	r3, #4
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	b29a      	uxth	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	331c      	adds	r3, #28
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc3[2] & 0xFF);			// HK n5vmon LSB
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	3304      	adds	r3, #4
 80025ac:	881a      	ldrh	r2, [r3, #0]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	331d      	adds	r3, #29
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	330e      	adds	r3, #14
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	b29a      	uxth	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	331e      	adds	r3, #30
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	330e      	adds	r3, #14
 80025cc:	881a      	ldrh	r2, [r3, #0]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	331f      	adds	r3, #31
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3310      	adds	r3, #16
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	b29a      	uxth	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3320      	adds	r3, #32
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3310      	adds	r3, #16
 80025ec:	881a      	ldrh	r2, [r3, #0]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3321      	adds	r3, #33	; 0x21
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	3308      	adds	r3, #8
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	b29a      	uxth	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	3322      	adds	r3, #34	; 0x22
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3308      	adds	r3, #8
 800260c:	881a      	ldrh	r2, [r3, #0]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3323      	adds	r3, #35	; 0x23
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	330a      	adds	r3, #10
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	b29a      	uxth	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	3324      	adds	r3, #36	; 0x24
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	330a      	adds	r3, #10
 800262c:	881a      	ldrh	r2, [r3, #0]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3325      	adds	r3, #37	; 0x25
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	3326      	adds	r3, #38	; 0x26
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	7812      	ldrb	r2, [r2, #0]
 800263e:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3327      	adds	r3, #39	; 0x27
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	7852      	ldrb	r2, [r2, #1]
 8002648:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3328      	adds	r3, #40	; 0x28
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	7892      	ldrb	r2, [r2, #2]
 8002652:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3329      	adds	r3, #41	; 0x29
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	78d2      	ldrb	r2, [r2, #3]
 800265c:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	332a      	adds	r3, #42	; 0x2a
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	7912      	ldrb	r2, [r2, #4]
 8002666:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	332b      	adds	r3, #43	; 0x2b
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	7952      	ldrb	r2, [r2, #5]
 8002670:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	332c      	adds	r3, #44	; 0x2c
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	7992      	ldrb	r2, [r2, #6]
 800267a:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	332d      	adds	r3, #45	; 0x2d
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	79d2      	ldrb	r2, [r2, #7]
 8002684:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 1);
 8002686:	2301      	movs	r3, #1
 8002688:	222e      	movs	r2, #46	; 0x2e
 800268a:	6979      	ldr	r1, [r7, #20]
 800268c:	4803      	ldr	r0, [pc, #12]	; (800269c <sample_hk+0x2fc>)
 800268e:	f00d f9b9 	bl	800fa04 <HAL_UART_Transmit>
	free(buffer);
 8002692:	6978      	ldr	r0, [r7, #20]
 8002694:	e004      	b.n	80026a0 <sample_hk+0x300>
 8002696:	bf00      	nop
 8002698:	24000b34 	.word	0x24000b34
 800269c:	240005cc 	.word	0x240005cc
 80026a0:	f013 f926 	bl	80158f0 <free>
	free(hk_i2c);
 80026a4:	6938      	ldr	r0, [r7, #16]
 80026a6:	f013 f923 	bl	80158f0 <free>
	free(hk_adc1);
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f013 f920 	bl	80158f0 <free>
	free(hk_adc3);
 80026b0:	68b8      	ldr	r0, [r7, #8]
 80026b2:	f013 f91d 	bl	80158f0 <free>
	free(timestamp);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f013 f91a 	bl	80158f0 <free>
}
 80026bc:	bf00      	nop
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <PMT_init+0x38>)
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026d4:	2200      	movs	r2, #0
 80026d6:	2101      	movs	r1, #1
 80026d8:	f010 f83a 	bl	8012750 <osEventFlagsWait>
		if(PMT_ON){
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <PMT_init+0x3c>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d007      	beq.n	80026f4 <PMT_init+0x30>
			sample_pmt();
 80026e4:	f7ff fd30 	bl	8002148 <sample_pmt>
			pmt_seq++;
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <PMT_init+0x40>)
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	3301      	adds	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <PMT_init+0x40>)
 80026f2:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 80026f4:	f00f ff4c 	bl	8012590 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80026f8:	e7e8      	b.n	80026cc <PMT_init+0x8>
 80026fa:	bf00      	nop
 80026fc:	24000b3c 	.word	0x24000b3c
 8002700:	24000b36 	.word	0x24000b36
 8002704:	24000b30 	.word	0x24000b30

08002708 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <ERPA_init+0x38>)
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002718:	2200      	movs	r2, #0
 800271a:	2102      	movs	r1, #2
 800271c:	f010 f818 	bl	8012750 <osEventFlagsWait>
		if (ERPA_ON)
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <ERPA_init+0x3c>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d007      	beq.n	8002738 <ERPA_init+0x30>
		{
			sample_erpa();
 8002728:	f7ff fd90 	bl	800224c <sample_erpa>
			erpa_seq++;
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <ERPA_init+0x40>)
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	3301      	adds	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <ERPA_init+0x40>)
 8002736:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 8002738:	f00f ff2a 	bl	8012590 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800273c:	e7e8      	b.n	8002710 <ERPA_init+0x8>
 800273e:	bf00      	nop
 8002740:	24000b3c 	.word	0x24000b3c
 8002744:	24000b37 	.word	0x24000b37
 8002748:	24000b32 	.word	0x24000b32

0800274c <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HK_init+0x38>)
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800275c:	2200      	movs	r2, #0
 800275e:	2104      	movs	r1, #4
 8002760:	f00f fff6 	bl	8012750 <osEventFlagsWait>
		if(HK_ON)
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HK_init+0x3c>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d007      	beq.n	800277c <HK_init+0x30>
		{
			sample_hk();
 800276c:	f7ff fe18 	bl	80023a0 <sample_hk>
			hk_seq++;
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <HK_init+0x40>)
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	3301      	adds	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <HK_init+0x40>)
 800277a:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 800277c:	f00f ff08 	bl	8012590 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002780:	e7e8      	b.n	8002754 <HK_init+0x8>
 8002782:	bf00      	nop
 8002784:	24000b3c 	.word	0x24000b3c
 8002788:	24000b38 	.word	0x24000b38
 800278c:	24000b34 	.word	0x24000b34

08002790 <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002798:	2201      	movs	r2, #1
 800279a:	4904      	ldr	r1, [pc, #16]	; (80027ac <UART_RX_init+0x1c>)
 800279c:	4804      	ldr	r0, [pc, #16]	; (80027b0 <UART_RX_init+0x20>)
 800279e:	f00d fa87 	bl	800fcb0 <HAL_UART_Receive_IT>
		osDelay(5);
 80027a2:	2005      	movs	r0, #5
 80027a4:	f00f ff35 	bl	8012612 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80027a8:	e7f6      	b.n	8002798 <UART_RX_init+0x8>
 80027aa:	bf00      	nop
 80027ac:	24000b40 	.word	0x24000b40
 80027b0:	240005cc 	.word	0x240005cc

080027b4 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 80027bc:	4b24      	ldr	r3, [pc, #144]	; (8002850 <GPIO_on_init+0x9c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f00f ff05 	bl	80125d0 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 80027c6:	4b23      	ldr	r3, [pc, #140]	; (8002854 <GPIO_on_init+0xa0>)
 80027c8:	2104      	movs	r1, #4
 80027ca:	2201      	movs	r2, #1
 80027cc:	4618      	mov	r0, r3
 80027ce:	f006 f903 	bl	80089d8 <HAL_GPIO_WritePin>
		osDelay(100);
 80027d2:	2064      	movs	r0, #100	; 0x64
 80027d4:	f00f ff1d 	bl	8012612 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 80027d8:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <GPIO_on_init+0xa0>)
 80027da:	2120      	movs	r1, #32
 80027dc:	2201      	movs	r2, #1
 80027de:	4618      	mov	r0, r3
 80027e0:	f006 f8fa 	bl	80089d8 <HAL_GPIO_WritePin>
		osDelay(100);
 80027e4:	2064      	movs	r0, #100	; 0x64
 80027e6:	f00f ff14 	bl	8012612 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 80027ea:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <GPIO_on_init+0xa4>)
 80027ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027f0:	2201      	movs	r2, #1
 80027f2:	4618      	mov	r0, r3
 80027f4:	f006 f8f0 	bl	80089d8 <HAL_GPIO_WritePin>
		osDelay(100);
 80027f8:	2064      	movs	r0, #100	; 0x64
 80027fa:	f00f ff0a 	bl	8012612 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 80027fe:	4b16      	ldr	r3, [pc, #88]	; (8002858 <GPIO_on_init+0xa4>)
 8002800:	2180      	movs	r1, #128	; 0x80
 8002802:	2201      	movs	r2, #1
 8002804:	4618      	mov	r0, r3
 8002806:	f006 f8e7 	bl	80089d8 <HAL_GPIO_WritePin>
		osDelay(100);
 800280a:	2064      	movs	r0, #100	; 0x64
 800280c:	f00f ff01 	bl	8012612 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002810:	4b11      	ldr	r3, [pc, #68]	; (8002858 <GPIO_on_init+0xa4>)
 8002812:	2140      	movs	r1, #64	; 0x40
 8002814:	2201      	movs	r2, #1
 8002816:	4618      	mov	r0, r3
 8002818:	f006 f8de 	bl	80089d8 <HAL_GPIO_WritePin>
		osDelay(100);
 800281c:	2064      	movs	r0, #100	; 0x64
 800281e:	f00f fef8 	bl	8012612 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002822:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <GPIO_on_init+0xa4>)
 8002824:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002828:	2201      	movs	r2, #1
 800282a:	4618      	mov	r0, r3
 800282c:	f006 f8d4 	bl	80089d8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002830:	2064      	movs	r0, #100	; 0x64
 8002832:	f00f feee 	bl	8012612 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002836:	4b08      	ldr	r3, [pc, #32]	; (8002858 <GPIO_on_init+0xa4>)
 8002838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800283c:	2201      	movs	r2, #1
 800283e:	4618      	mov	r0, r3
 8002840:	f006 f8ca 	bl	80089d8 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002844:	4b02      	ldr	r3, [pc, #8]	; (8002850 <GPIO_on_init+0x9c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f00f fec1 	bl	80125d0 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 800284e:	e7ba      	b.n	80027c6 <GPIO_on_init+0x12>
 8002850:	24000670 	.word	0x24000670
 8002854:	58020400 	.word	0x58020400
 8002858:	58020800 	.word	0x58020800

0800285c <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002864:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <GPIO_off_init+0x9c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f00f feb1 	bl	80125d0 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 800286e:	4b23      	ldr	r3, [pc, #140]	; (80028fc <GPIO_off_init+0xa0>)
 8002870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002874:	2200      	movs	r2, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f006 f8ae 	bl	80089d8 <HAL_GPIO_WritePin>
		osDelay(100);
 800287c:	2064      	movs	r0, #100	; 0x64
 800287e:	f00f fec8 	bl	8012612 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002882:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <GPIO_off_init+0xa0>)
 8002884:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002888:	2200      	movs	r2, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f006 f8a4 	bl	80089d8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002890:	2064      	movs	r0, #100	; 0x64
 8002892:	f00f febe 	bl	8012612 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002896:	4b19      	ldr	r3, [pc, #100]	; (80028fc <GPIO_off_init+0xa0>)
 8002898:	2140      	movs	r1, #64	; 0x40
 800289a:	2200      	movs	r2, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f006 f89b 	bl	80089d8 <HAL_GPIO_WritePin>
		osDelay(100);
 80028a2:	2064      	movs	r0, #100	; 0x64
 80028a4:	f00f feb5 	bl	8012612 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <GPIO_off_init+0xa0>)
 80028aa:	2180      	movs	r1, #128	; 0x80
 80028ac:	2200      	movs	r2, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f006 f892 	bl	80089d8 <HAL_GPIO_WritePin>
		osDelay(100);
 80028b4:	2064      	movs	r0, #100	; 0x64
 80028b6:	f00f feac 	bl	8012612 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <GPIO_off_init+0xa0>)
 80028bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028c0:	2200      	movs	r2, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f006 f888 	bl	80089d8 <HAL_GPIO_WritePin>
		osDelay(100);
 80028c8:	2064      	movs	r0, #100	; 0x64
 80028ca:	f00f fea2 	bl	8012612 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <GPIO_off_init+0xa4>)
 80028d0:	2120      	movs	r1, #32
 80028d2:	2200      	movs	r2, #0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f006 f87f 	bl	80089d8 <HAL_GPIO_WritePin>
		osDelay(100);
 80028da:	2064      	movs	r0, #100	; 0x64
 80028dc:	f00f fe99 	bl	8012612 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 80028e0:	4b07      	ldr	r3, [pc, #28]	; (8002900 <GPIO_off_init+0xa4>)
 80028e2:	2104      	movs	r1, #4
 80028e4:	2200      	movs	r2, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f006 f876 	bl	80089d8 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 80028ec:	4b02      	ldr	r3, [pc, #8]	; (80028f8 <GPIO_off_init+0x9c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f00f fe6d 	bl	80125d0 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 80028f6:	e7ba      	b.n	800286e <GPIO_off_init+0x12>
 80028f8:	240008d0 	.word	0x240008d0
 80028fc:	58020800 	.word	0x58020800
 8002900:	58020400 	.word	0x58020400

08002904 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a04      	ldr	r2, [pc, #16]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002916:	f000 ff1f 	bl	8003758 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40001000 	.word	0x40001000

08002928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800292c:	b672      	cpsid	i
}
 800292e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002930:	e7fe      	b.n	8002930 <Error_Handler+0x8>
	...

08002934 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_MspInit+0x38>)
 800293c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002940:	4a0a      	ldr	r2, [pc, #40]	; (800296c <HAL_MspInit+0x38>)
 8002942:	f043 0302 	orr.w	r3, r3, #2
 8002946:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <HAL_MspInit+0x38>)
 800294c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002958:	2200      	movs	r2, #0
 800295a:	210f      	movs	r1, #15
 800295c:	f06f 0001 	mvn.w	r0, #1
 8002960:	f002 fc08 	bl	8005174 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	58024400 	.word	0x58024400

08002970 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08e      	sub	sp, #56	; 0x38
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a7b      	ldr	r2, [pc, #492]	; (8002b7c <HAL_ADC_MspInit+0x20c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	f040 8091 	bne.w	8002ab6 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002994:	4b7a      	ldr	r3, [pc, #488]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 8002996:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800299a:	4a79      	ldr	r2, [pc, #484]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 800299c:	f043 0320 	orr.w	r3, r3, #32
 80029a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029a4:	4b76      	ldr	r3, [pc, #472]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 80029a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	623b      	str	r3, [r7, #32]
 80029b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b2:	4b73      	ldr	r3, [pc, #460]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 80029b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b8:	4a71      	ldr	r2, [pc, #452]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 80029ba:	f043 0304 	orr.w	r3, r3, #4
 80029be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029c2:	4b6f      	ldr	r3, [pc, #444]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 80029c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d0:	4b6b      	ldr	r3, [pc, #428]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 80029d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d6:	4a6a      	ldr	r2, [pc, #424]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e0:	4b67      	ldr	r3, [pc, #412]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 80029e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ee:	4b64      	ldr	r3, [pc, #400]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 80029f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f4:	4a62      	ldr	r2, [pc, #392]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 80029f6:	f043 0302 	orr.w	r3, r3, #2
 80029fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029fe:	4b60      	ldr	r3, [pc, #384]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 8002a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002a0c:	2333      	movs	r3, #51	; 0x33
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a10:	2303      	movs	r3, #3
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4859      	ldr	r0, [pc, #356]	; (8002b84 <HAL_ADC_MspInit+0x214>)
 8002a20:	f005 fe12 	bl	8008648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002a24:	23ce      	movs	r3, #206	; 0xce
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a34:	4619      	mov	r1, r3
 8002a36:	4854      	ldr	r0, [pc, #336]	; (8002b88 <HAL_ADC_MspInit+0x218>)
 8002a38:	f005 fe06 	bl	8008648 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a40:	2303      	movs	r3, #3
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	484f      	ldr	r0, [pc, #316]	; (8002b8c <HAL_ADC_MspInit+0x21c>)
 8002a50:	f005 fdfa 	bl	8008648 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002a54:	4b4e      	ldr	r3, [pc, #312]	; (8002b90 <HAL_ADC_MspInit+0x220>)
 8002a56:	4a4f      	ldr	r2, [pc, #316]	; (8002b94 <HAL_ADC_MspInit+0x224>)
 8002a58:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a5a:	4b4d      	ldr	r3, [pc, #308]	; (8002b90 <HAL_ADC_MspInit+0x220>)
 8002a5c:	2209      	movs	r2, #9
 8002a5e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a60:	4b4b      	ldr	r3, [pc, #300]	; (8002b90 <HAL_ADC_MspInit+0x220>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a66:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <HAL_ADC_MspInit+0x220>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a6c:	4b48      	ldr	r3, [pc, #288]	; (8002b90 <HAL_ADC_MspInit+0x220>)
 8002a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a72:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a74:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <HAL_ADC_MspInit+0x220>)
 8002a76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a7a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a7c:	4b44      	ldr	r3, [pc, #272]	; (8002b90 <HAL_ADC_MspInit+0x220>)
 8002a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a82:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a84:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <HAL_ADC_MspInit+0x220>)
 8002a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a8a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a8c:	4b40      	ldr	r3, [pc, #256]	; (8002b90 <HAL_ADC_MspInit+0x220>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a92:	4b3f      	ldr	r3, [pc, #252]	; (8002b90 <HAL_ADC_MspInit+0x220>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a98:	483d      	ldr	r0, [pc, #244]	; (8002b90 <HAL_ADC_MspInit+0x220>)
 8002a9a:	f002 ff99 	bl	80059d0 <HAL_DMA_Init>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002aa4:	f7ff ff40 	bl	8002928 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a39      	ldr	r2, [pc, #228]	; (8002b90 <HAL_ADC_MspInit+0x220>)
 8002aac:	64da      	str	r2, [r3, #76]	; 0x4c
 8002aae:	4a38      	ldr	r2, [pc, #224]	; (8002b90 <HAL_ADC_MspInit+0x220>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002ab4:	e05e      	b.n	8002b74 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a37      	ldr	r2, [pc, #220]	; (8002b98 <HAL_ADC_MspInit+0x228>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d159      	bne.n	8002b74 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002ac0:	4b2f      	ldr	r3, [pc, #188]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 8002ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac6:	4a2e      	ldr	r2, [pc, #184]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 8002ac8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ad0:	4b2b      	ldr	r3, [pc, #172]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 8002ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ade:	4b28      	ldr	r3, [pc, #160]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 8002ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae4:	4a26      	ldr	r2, [pc, #152]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 8002ae6:	f043 0304 	orr.w	r3, r3, #4
 8002aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aee:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <HAL_ADC_MspInit+0x210>)
 8002af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002afc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002b00:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002b04:	f000 fe54 	bl	80037b0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002b08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002b0c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002b10:	f000 fe4e 	bl	80037b0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002b14:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <HAL_ADC_MspInit+0x22c>)
 8002b16:	4a22      	ldr	r2, [pc, #136]	; (8002ba0 <HAL_ADC_MspInit+0x230>)
 8002b18:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_ADC_MspInit+0x22c>)
 8002b1c:	2273      	movs	r2, #115	; 0x73
 8002b1e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b20:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <HAL_ADC_MspInit+0x22c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b26:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <HAL_ADC_MspInit+0x22c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	; (8002b9c <HAL_ADC_MspInit+0x22c>)
 8002b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b32:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b34:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <HAL_ADC_MspInit+0x22c>)
 8002b36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b3a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b3c:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <HAL_ADC_MspInit+0x22c>)
 8002b3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b42:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002b44:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <HAL_ADC_MspInit+0x22c>)
 8002b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b4a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <HAL_ADC_MspInit+0x22c>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b52:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_ADC_MspInit+0x22c>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002b58:	4810      	ldr	r0, [pc, #64]	; (8002b9c <HAL_ADC_MspInit+0x22c>)
 8002b5a:	f002 ff39 	bl	80059d0 <HAL_DMA_Init>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002b64:	f7ff fee0 	bl	8002928 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a0c      	ldr	r2, [pc, #48]	; (8002b9c <HAL_ADC_MspInit+0x22c>)
 8002b6c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b6e:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <HAL_ADC_MspInit+0x22c>)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002b74:	bf00      	nop
 8002b76:	3738      	adds	r7, #56	; 0x38
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40022000 	.word	0x40022000
 8002b80:	58024400 	.word	0x58024400
 8002b84:	58020800 	.word	0x58020800
 8002b88:	58020000 	.word	0x58020000
 8002b8c:	58020400 	.word	0x58020400
 8002b90:	240001e4 	.word	0x240001e4
 8002b94:	40020010 	.word	0x40020010
 8002b98:	58026000 	.word	0x58026000
 8002b9c:	2400025c 	.word	0x2400025c
 8002ba0:	40020028 	.word	0x40020028

08002ba4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	; 0x28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a34      	ldr	r2, [pc, #208]	; (8002c94 <HAL_DAC_MspInit+0xf0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d161      	bne.n	8002c8a <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002bc6:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <HAL_DAC_MspInit+0xf4>)
 8002bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bcc:	4a32      	ldr	r2, [pc, #200]	; (8002c98 <HAL_DAC_MspInit+0xf4>)
 8002bce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bd6:	4b30      	ldr	r3, [pc, #192]	; (8002c98 <HAL_DAC_MspInit+0xf4>)
 8002bd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be4:	4b2c      	ldr	r3, [pc, #176]	; (8002c98 <HAL_DAC_MspInit+0xf4>)
 8002be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bea:	4a2b      	ldr	r2, [pc, #172]	; (8002c98 <HAL_DAC_MspInit+0xf4>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bf4:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <HAL_DAC_MspInit+0xf4>)
 8002bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c02:	2310      	movs	r3, #16
 8002c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c06:	2303      	movs	r3, #3
 8002c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	f107 0314 	add.w	r3, r7, #20
 8002c12:	4619      	mov	r1, r3
 8002c14:	4821      	ldr	r0, [pc, #132]	; (8002c9c <HAL_DAC_MspInit+0xf8>)
 8002c16:	f005 fd17 	bl	8008648 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002c1a:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <HAL_DAC_MspInit+0xfc>)
 8002c1c:	4a21      	ldr	r2, [pc, #132]	; (8002ca4 <HAL_DAC_MspInit+0x100>)
 8002c1e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002c20:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <HAL_DAC_MspInit+0xfc>)
 8002c22:	2243      	movs	r2, #67	; 0x43
 8002c24:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c26:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <HAL_DAC_MspInit+0xfc>)
 8002c28:	2240      	movs	r2, #64	; 0x40
 8002c2a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <HAL_DAC_MspInit+0xfc>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c32:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_DAC_MspInit+0xfc>)
 8002c34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c38:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_DAC_MspInit+0xfc>)
 8002c3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c40:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c42:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <HAL_DAC_MspInit+0xfc>)
 8002c44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c48:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <HAL_DAC_MspInit+0xfc>)
 8002c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c50:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_DAC_MspInit+0xfc>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <HAL_DAC_MspInit+0xfc>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002c5e:	4810      	ldr	r0, [pc, #64]	; (8002ca0 <HAL_DAC_MspInit+0xfc>)
 8002c60:	f002 feb6 	bl	80059d0 <HAL_DMA_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002c6a:	f7ff fe5d 	bl	8002928 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <HAL_DAC_MspInit+0xfc>)
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <HAL_DAC_MspInit+0xfc>)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2105      	movs	r1, #5
 8002c7e:	2036      	movs	r0, #54	; 0x36
 8002c80:	f002 fa78 	bl	8005174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c84:	2036      	movs	r0, #54	; 0x36
 8002c86:	f002 fa8f 	bl	80051a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002c8a:	bf00      	nop
 8002c8c:	3728      	adds	r7, #40	; 0x28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40007400 	.word	0x40007400
 8002c98:	58024400 	.word	0x58024400
 8002c9c:	58020000 	.word	0x58020000
 8002ca0:	240002e8 	.word	0x240002e8
 8002ca4:	40020088 	.word	0x40020088

08002ca8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b0ba      	sub	sp, #232	; 0xe8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	22c0      	movs	r2, #192	; 0xc0
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f012 fe27 	bl	801591c <memset>
  if(hi2c->Instance==I2C1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a27      	ldr	r2, [pc, #156]	; (8002d70 <HAL_I2C_MspInit+0xc8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d146      	bne.n	8002d66 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002cd8:	f04f 0208 	mov.w	r2, #8
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cea:	f107 0310 	add.w	r3, r7, #16
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f007 fcfa 	bl	800a6e8 <HAL_RCCEx_PeriphCLKConfig>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002cfa:	f7ff fe15 	bl	8002928 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HAL_I2C_MspInit+0xcc>)
 8002d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d04:	4a1b      	ldr	r2, [pc, #108]	; (8002d74 <HAL_I2C_MspInit+0xcc>)
 8002d06:	f043 0302 	orr.w	r3, r3, #2
 8002d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d0e:	4b19      	ldr	r3, [pc, #100]	; (8002d74 <HAL_I2C_MspInit+0xcc>)
 8002d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d24:	2312      	movs	r3, #18
 8002d26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d36:	2304      	movs	r3, #4
 8002d38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d40:	4619      	mov	r1, r3
 8002d42:	480d      	ldr	r0, [pc, #52]	; (8002d78 <HAL_I2C_MspInit+0xd0>)
 8002d44:	f005 fc80 	bl	8008648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_I2C_MspInit+0xcc>)
 8002d4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d4e:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <HAL_I2C_MspInit+0xcc>)
 8002d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_I2C_MspInit+0xcc>)
 8002d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d66:	bf00      	nop
 8002d68:	37e8      	adds	r7, #232	; 0xe8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40005400 	.word	0x40005400
 8002d74:	58024400 	.word	0x58024400
 8002d78:	58020400 	.word	0x58020400

08002d7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b0b2      	sub	sp, #200	; 0xc8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d84:	f107 0308 	add.w	r3, r7, #8
 8002d88:	22c0      	movs	r2, #192	; 0xc0
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f012 fdc5 	bl	801591c <memset>
  if(hrtc->Instance==RTC)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_RTC_MspInit+0x5c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d119      	bne.n	8002dd0 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d9c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002db0:	f107 0308 	add.w	r3, r7, #8
 8002db4:	4618      	mov	r0, r3
 8002db6:	f007 fc97 	bl	800a6e8 <HAL_RCCEx_PeriphCLKConfig>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002dc0:	f7ff fdb2 	bl	8002928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RTC_MspInit+0x60>)
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <HAL_RTC_MspInit+0x60>)
 8002dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dce:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002dd0:	bf00      	nop
 8002dd2:	37c8      	adds	r7, #200	; 0xc8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	58004000 	.word	0x58004000
 8002ddc:	58024400 	.word	0x58024400

08002de0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b0bc      	sub	sp, #240	; 0xf0
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002df8:	f107 0318 	add.w	r3, r7, #24
 8002dfc:	22c0      	movs	r2, #192	; 0xc0
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f012 fd8b 	bl	801591c <memset>
  if(hspi->Instance==SPI1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a4c      	ldr	r2, [pc, #304]	; (8002f3c <HAL_SPI_MspInit+0x15c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d145      	bne.n	8002e9c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002e10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e20:	f107 0318 	add.w	r3, r7, #24
 8002e24:	4618      	mov	r0, r3
 8002e26:	f007 fc5f 	bl	800a6e8 <HAL_RCCEx_PeriphCLKConfig>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002e30:	f7ff fd7a 	bl	8002928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e34:	4b42      	ldr	r3, [pc, #264]	; (8002f40 <HAL_SPI_MspInit+0x160>)
 8002e36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e3a:	4a41      	ldr	r2, [pc, #260]	; (8002f40 <HAL_SPI_MspInit+0x160>)
 8002e3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e44:	4b3e      	ldr	r3, [pc, #248]	; (8002f40 <HAL_SPI_MspInit+0x160>)
 8002e46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e52:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_SPI_MspInit+0x160>)
 8002e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e58:	4a39      	ldr	r2, [pc, #228]	; (8002f40 <HAL_SPI_MspInit+0x160>)
 8002e5a:	f043 0302 	orr.w	r3, r3, #2
 8002e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e62:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <HAL_SPI_MspInit+0x160>)
 8002e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002e70:	2318      	movs	r3, #24
 8002e72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e88:	2305      	movs	r3, #5
 8002e8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e92:	4619      	mov	r1, r3
 8002e94:	482b      	ldr	r0, [pc, #172]	; (8002f44 <HAL_SPI_MspInit+0x164>)
 8002e96:	f005 fbd7 	bl	8008648 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002e9a:	e04a      	b.n	8002f32 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a29      	ldr	r2, [pc, #164]	; (8002f48 <HAL_SPI_MspInit+0x168>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d145      	bne.n	8002f32 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002ea6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eb6:	f107 0318 	add.w	r3, r7, #24
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f007 fc14 	bl	800a6e8 <HAL_RCCEx_PeriphCLKConfig>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002ec6:	f7ff fd2f 	bl	8002928 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002eca:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_SPI_MspInit+0x160>)
 8002ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ed0:	4a1b      	ldr	r2, [pc, #108]	; (8002f40 <HAL_SPI_MspInit+0x160>)
 8002ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002eda:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <HAL_SPI_MspInit+0x160>)
 8002edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee8:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <HAL_SPI_MspInit+0x160>)
 8002eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eee:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <HAL_SPI_MspInit+0x160>)
 8002ef0:	f043 0302 	orr.w	r3, r3, #2
 8002ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_SPI_MspInit+0x160>)
 8002efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002f06:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f20:	2305      	movs	r3, #5
 8002f22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f26:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4805      	ldr	r0, [pc, #20]	; (8002f44 <HAL_SPI_MspInit+0x164>)
 8002f2e:	f005 fb8b 	bl	8008648 <HAL_GPIO_Init>
}
 8002f32:	bf00      	nop
 8002f34:	37f0      	adds	r7, #240	; 0xf0
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40013000 	.word	0x40013000
 8002f40:	58024400 	.word	0x58024400
 8002f44:	58020400 	.word	0x58020400
 8002f48:	40003800 	.word	0x40003800

08002f4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a37      	ldr	r2, [pc, #220]	; (8003038 <HAL_TIM_Base_MspInit+0xec>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d12f      	bne.n	8002fbe <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f5e:	4b37      	ldr	r3, [pc, #220]	; (800303c <HAL_TIM_Base_MspInit+0xf0>)
 8002f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f64:	4a35      	ldr	r2, [pc, #212]	; (800303c <HAL_TIM_Base_MspInit+0xf0>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f6e:	4b33      	ldr	r3, [pc, #204]	; (800303c <HAL_TIM_Base_MspInit+0xf0>)
 8002f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2105      	movs	r1, #5
 8002f80:	2018      	movs	r0, #24
 8002f82:	f002 f8f7 	bl	8005174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002f86:	2018      	movs	r0, #24
 8002f88:	f002 f90e 	bl	80051a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2105      	movs	r1, #5
 8002f90:	2019      	movs	r0, #25
 8002f92:	f002 f8ef 	bl	8005174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002f96:	2019      	movs	r0, #25
 8002f98:	f002 f906 	bl	80051a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2105      	movs	r1, #5
 8002fa0:	201a      	movs	r0, #26
 8002fa2:	f002 f8e7 	bl	8005174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002fa6:	201a      	movs	r0, #26
 8002fa8:	f002 f8fe 	bl	80051a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002fac:	2200      	movs	r2, #0
 8002fae:	2105      	movs	r1, #5
 8002fb0:	201b      	movs	r0, #27
 8002fb2:	f002 f8df 	bl	8005174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002fb6:	201b      	movs	r0, #27
 8002fb8:	f002 f8f6 	bl	80051a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002fbc:	e038      	b.n	8003030 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc6:	d117      	bne.n	8002ff8 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fc8:	4b1c      	ldr	r3, [pc, #112]	; (800303c <HAL_TIM_Base_MspInit+0xf0>)
 8002fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fce:	4a1b      	ldr	r2, [pc, #108]	; (800303c <HAL_TIM_Base_MspInit+0xf0>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fd8:	4b18      	ldr	r3, [pc, #96]	; (800303c <HAL_TIM_Base_MspInit+0xf0>)
 8002fda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2105      	movs	r1, #5
 8002fea:	201c      	movs	r0, #28
 8002fec:	f002 f8c2 	bl	8005174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ff0:	201c      	movs	r0, #28
 8002ff2:	f002 f8d9 	bl	80051a8 <HAL_NVIC_EnableIRQ>
}
 8002ff6:	e01b      	b.n	8003030 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a10      	ldr	r2, [pc, #64]	; (8003040 <HAL_TIM_Base_MspInit+0xf4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d116      	bne.n	8003030 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003002:	4b0e      	ldr	r3, [pc, #56]	; (800303c <HAL_TIM_Base_MspInit+0xf0>)
 8003004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003008:	4a0c      	ldr	r2, [pc, #48]	; (800303c <HAL_TIM_Base_MspInit+0xf0>)
 800300a:	f043 0302 	orr.w	r3, r3, #2
 800300e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <HAL_TIM_Base_MspInit+0xf0>)
 8003014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003020:	2200      	movs	r2, #0
 8003022:	2105      	movs	r1, #5
 8003024:	201d      	movs	r0, #29
 8003026:	f002 f8a5 	bl	8005174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800302a:	201d      	movs	r0, #29
 800302c:	f002 f8bc 	bl	80051a8 <HAL_NVIC_EnableIRQ>
}
 8003030:	bf00      	nop
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40010000 	.word	0x40010000
 800303c:	58024400 	.word	0x58024400
 8003040:	40000400 	.word	0x40000400

08003044 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	; 0x28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a26      	ldr	r2, [pc, #152]	; (80030fc <HAL_TIM_MspPostInit+0xb8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d120      	bne.n	80030a8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003066:	4b26      	ldr	r3, [pc, #152]	; (8003100 <HAL_TIM_MspPostInit+0xbc>)
 8003068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800306c:	4a24      	ldr	r2, [pc, #144]	; (8003100 <HAL_TIM_MspPostInit+0xbc>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003076:	4b22      	ldr	r3, [pc, #136]	; (8003100 <HAL_TIM_MspPostInit+0xbc>)
 8003078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003084:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308a:	2302      	movs	r3, #2
 800308c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003096:	2301      	movs	r3, #1
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309a:	f107 0314 	add.w	r3, r7, #20
 800309e:	4619      	mov	r1, r3
 80030a0:	4818      	ldr	r0, [pc, #96]	; (8003104 <HAL_TIM_MspPostInit+0xc0>)
 80030a2:	f005 fad1 	bl	8008648 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80030a6:	e024      	b.n	80030f2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b0:	d11f      	bne.n	80030f2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b2:	4b13      	ldr	r3, [pc, #76]	; (8003100 <HAL_TIM_MspPostInit+0xbc>)
 80030b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b8:	4a11      	ldr	r2, [pc, #68]	; (8003100 <HAL_TIM_MspPostInit+0xbc>)
 80030ba:	f043 0302 	orr.w	r3, r3, #2
 80030be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c2:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <HAL_TIM_MspPostInit+0xbc>)
 80030c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80030d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d6:	2302      	movs	r3, #2
 80030d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030de:	2300      	movs	r3, #0
 80030e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030e2:	2301      	movs	r3, #1
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e6:	f107 0314 	add.w	r3, r7, #20
 80030ea:	4619      	mov	r1, r3
 80030ec:	4806      	ldr	r0, [pc, #24]	; (8003108 <HAL_TIM_MspPostInit+0xc4>)
 80030ee:	f005 faab 	bl	8008648 <HAL_GPIO_Init>
}
 80030f2:	bf00      	nop
 80030f4:	3728      	adds	r7, #40	; 0x28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40010000 	.word	0x40010000
 8003100:	58024400 	.word	0x58024400
 8003104:	58020000 	.word	0x58020000
 8003108:	58020400 	.word	0x58020400

0800310c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b0ba      	sub	sp, #232	; 0xe8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003114:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003124:	f107 0310 	add.w	r3, r7, #16
 8003128:	22c0      	movs	r2, #192	; 0xc0
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f012 fbf5 	bl	801591c <memset>
  if(huart->Instance==USART1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a2b      	ldr	r2, [pc, #172]	; (80031e4 <HAL_UART_MspInit+0xd8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d14e      	bne.n	80031da <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800313c:	f04f 0201 	mov.w	r2, #1
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003148:	2300      	movs	r3, #0
 800314a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800314e:	f107 0310 	add.w	r3, r7, #16
 8003152:	4618      	mov	r0, r3
 8003154:	f007 fac8 	bl	800a6e8 <HAL_RCCEx_PeriphCLKConfig>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800315e:	f7ff fbe3 	bl	8002928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003162:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <HAL_UART_MspInit+0xdc>)
 8003164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003168:	4a1f      	ldr	r2, [pc, #124]	; (80031e8 <HAL_UART_MspInit+0xdc>)
 800316a:	f043 0310 	orr.w	r3, r3, #16
 800316e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003172:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_UART_MspInit+0xdc>)
 8003174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003180:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_UART_MspInit+0xdc>)
 8003182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003186:	4a18      	ldr	r2, [pc, #96]	; (80031e8 <HAL_UART_MspInit+0xdc>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003190:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <HAL_UART_MspInit+0xdc>)
 8003192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800319e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a6:	2302      	movs	r3, #2
 80031a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031b8:	2307      	movs	r3, #7
 80031ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80031c2:	4619      	mov	r1, r3
 80031c4:	4809      	ldr	r0, [pc, #36]	; (80031ec <HAL_UART_MspInit+0xe0>)
 80031c6:	f005 fa3f 	bl	8008648 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80031ca:	2200      	movs	r2, #0
 80031cc:	2105      	movs	r1, #5
 80031ce:	2025      	movs	r0, #37	; 0x25
 80031d0:	f001 ffd0 	bl	8005174 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031d4:	2025      	movs	r0, #37	; 0x25
 80031d6:	f001 ffe7 	bl	80051a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031da:	bf00      	nop
 80031dc:	37e8      	adds	r7, #232	; 0xe8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40011000 	.word	0x40011000
 80031e8:	58024400 	.word	0x58024400
 80031ec:	58020000 	.word	0x58020000

080031f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b090      	sub	sp, #64	; 0x40
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b0f      	cmp	r3, #15
 80031fc:	d827      	bhi.n	800324e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80031fe:	2200      	movs	r2, #0
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	2036      	movs	r0, #54	; 0x36
 8003204:	f001 ffb6 	bl	8005174 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003208:	2036      	movs	r0, #54	; 0x36
 800320a:	f001 ffcd 	bl	80051a8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800320e:	4a29      	ldr	r2, [pc, #164]	; (80032b4 <HAL_InitTick+0xc4>)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003214:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <HAL_InitTick+0xc8>)
 8003216:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800321a:	4a27      	ldr	r2, [pc, #156]	; (80032b8 <HAL_InitTick+0xc8>)
 800321c:	f043 0310 	orr.w	r3, r3, #16
 8003220:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003224:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <HAL_InitTick+0xc8>)
 8003226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003232:	f107 0210 	add.w	r2, r7, #16
 8003236:	f107 0314 	add.w	r3, r7, #20
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f007 fa11 	bl	800a664 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	2b00      	cmp	r3, #0
 800324a:	d106      	bne.n	800325a <HAL_InitTick+0x6a>
 800324c:	e001      	b.n	8003252 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e02b      	b.n	80032aa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003252:	f007 f9db 	bl	800a60c <HAL_RCC_GetPCLK1Freq>
 8003256:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003258:	e004      	b.n	8003264 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800325a:	f007 f9d7 	bl	800a60c <HAL_RCC_GetPCLK1Freq>
 800325e:	4603      	mov	r3, r0
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <HAL_InitTick+0xcc>)
 8003268:	fba2 2303 	umull	r2, r3, r2, r3
 800326c:	0c9b      	lsrs	r3, r3, #18
 800326e:	3b01      	subs	r3, #1
 8003270:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003272:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <HAL_InitTick+0xd0>)
 8003274:	4a13      	ldr	r2, [pc, #76]	; (80032c4 <HAL_InitTick+0xd4>)
 8003276:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003278:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <HAL_InitTick+0xd0>)
 800327a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800327e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003280:	4a0f      	ldr	r2, [pc, #60]	; (80032c0 <HAL_InitTick+0xd0>)
 8003282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003284:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003286:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_InitTick+0xd0>)
 8003288:	2200      	movs	r2, #0
 800328a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328c:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <HAL_InitTick+0xd0>)
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003292:	480b      	ldr	r0, [pc, #44]	; (80032c0 <HAL_InitTick+0xd0>)
 8003294:	f00a fe99 	bl	800dfca <HAL_TIM_Base_Init>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d104      	bne.n	80032a8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800329e:	4808      	ldr	r0, [pc, #32]	; (80032c0 <HAL_InitTick+0xd0>)
 80032a0:	f00a ff82 	bl	800e1a8 <HAL_TIM_Base_Start_IT>
 80032a4:	4603      	mov	r3, r0
 80032a6:	e000      	b.n	80032aa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3740      	adds	r7, #64	; 0x40
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	24000090 	.word	0x24000090
 80032b8:	58024400 	.word	0x58024400
 80032bc:	431bde83 	.word	0x431bde83
 80032c0:	24000be8 	.word	0x24000be8
 80032c4:	40001000 	.word	0x40001000

080032c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80032cc:	e7fe      	b.n	80032cc <NMI_Handler+0x4>

080032ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ce:	b480      	push	{r7}
 80032d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032d2:	e7fe      	b.n	80032d2 <HardFault_Handler+0x4>

080032d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032d8:	e7fe      	b.n	80032d8 <MemManage_Handler+0x4>

080032da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032da:	b480      	push	{r7}
 80032dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032de:	e7fe      	b.n	80032de <BusFault_Handler+0x4>

080032e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032e4:	e7fe      	b.n	80032e4 <UsageFault_Handler+0x4>

080032e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032e6:	b480      	push	{r7}
 80032e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <DMA1_Stream0_IRQHandler+0x10>)
 80032fa:	f003 fe93 	bl	8007024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	240001e4 	.word	0x240001e4

08003308 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800330c:	4802      	ldr	r0, [pc, #8]	; (8003318 <DMA1_Stream1_IRQHandler+0x10>)
 800330e:	f003 fe89 	bl	8007024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	2400025c 	.word	0x2400025c

0800331c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003320:	4802      	ldr	r0, [pc, #8]	; (800332c <DMA1_Stream5_IRQHandler+0x10>)
 8003322:	f003 fe7f 	bl	8007024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	240002e8 	.word	0x240002e8

08003330 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003334:	4802      	ldr	r0, [pc, #8]	; (8003340 <TIM1_BRK_IRQHandler+0x10>)
 8003336:	f00b fa79 	bl	800e82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	240004e8 	.word	0x240004e8

08003344 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003348:	4802      	ldr	r0, [pc, #8]	; (8003354 <TIM1_UP_IRQHandler+0x10>)
 800334a:	f00b fa6f 	bl	800e82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	240004e8 	.word	0x240004e8

08003358 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800335c:	4802      	ldr	r0, [pc, #8]	; (8003368 <TIM1_TRG_COM_IRQHandler+0x10>)
 800335e:	f00b fa65 	bl	800e82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	240004e8 	.word	0x240004e8

0800336c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003370:	4802      	ldr	r0, [pc, #8]	; (800337c <TIM1_CC_IRQHandler+0x10>)
 8003372:	f00b fa5b 	bl	800e82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	240004e8 	.word	0x240004e8

08003380 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003384:	4802      	ldr	r0, [pc, #8]	; (8003390 <TIM2_IRQHandler+0x10>)
 8003386:	f00b fa51 	bl	800e82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	24000534 	.word	0x24000534

08003394 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003398:	4802      	ldr	r0, [pc, #8]	; (80033a4 <TIM3_IRQHandler+0x10>)
 800339a:	f00b fa47 	bl	800e82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	24000580 	.word	0x24000580

080033a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033ac:	4802      	ldr	r0, [pc, #8]	; (80033b8 <USART1_IRQHandler+0x10>)
 80033ae:	f00c fccb 	bl	800fd48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	240005cc 	.word	0x240005cc

080033bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80033c0:	4b06      	ldr	r3, [pc, #24]	; (80033dc <TIM6_DAC_IRQHandler+0x20>)
 80033c2:	791b      	ldrb	r3, [r3, #4]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80033ca:	4804      	ldr	r0, [pc, #16]	; (80033dc <TIM6_DAC_IRQHandler+0x20>)
 80033cc:	f002 f881 	bl	80054d2 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80033d0:	4803      	ldr	r0, [pc, #12]	; (80033e0 <TIM6_DAC_IRQHandler+0x24>)
 80033d2:	f00b fa2b 	bl	800e82c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	240002d4 	.word	0x240002d4
 80033e0:	24000be8 	.word	0x24000be8

080033e4 <ITM_SendChar>:
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	71fb      	strb	r3, [r7, #7]
 80033ee:	4b0f      	ldr	r3, [pc, #60]	; (800342c <ITM_SendChar+0x48>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a0e      	ldr	r2, [pc, #56]	; (800342c <ITM_SendChar+0x48>)
 80033f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <ITM_SendChar+0x4c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a0c      	ldr	r2, [pc, #48]	; (8003430 <ITM_SendChar+0x4c>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	bf00      	nop
 8003408:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f8      	beq.n	8003408 <ITM_SendChar+0x24>
 8003416:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	e000edfc 	.word	0xe000edfc
 8003430:	e0000e00 	.word	0xe0000e00

08003434 <_read>:
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	e00a      	b.n	800345c <_read+0x28>
 8003446:	f3af 8000 	nop.w
 800344a:	4601      	mov	r1, r0
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	60ba      	str	r2, [r7, #8]
 8003452:	b2ca      	uxtb	r2, r1
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	3301      	adds	r3, #1
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	429a      	cmp	r2, r3
 8003462:	dbf0      	blt.n	8003446 <_read+0x12>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <_write>:
 800346e:	b580      	push	{r7, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	e009      	b.n	8003494 <_write+0x26>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	60ba      	str	r2, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ffab 	bl	80033e4 <ITM_SendChar>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	3301      	adds	r3, #1
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	429a      	cmp	r2, r3
 800349a:	dbf1      	blt.n	8003480 <_write+0x12>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <_close>:
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <_fstat>:
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	2300      	movs	r3, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <_isatty>:
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	2301      	movs	r3, #1
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <_lseek>:
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	2300      	movs	r3, #0
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <_sbrk>:
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	4a14      	ldr	r2, [pc, #80]	; (800356c <_sbrk+0x5c>)
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <_sbrk+0x60>)
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	4b13      	ldr	r3, [pc, #76]	; (8003574 <_sbrk+0x64>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <_sbrk+0x22>
 800352c:	4b11      	ldr	r3, [pc, #68]	; (8003574 <_sbrk+0x64>)
 800352e:	4a12      	ldr	r2, [pc, #72]	; (8003578 <_sbrk+0x68>)
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <_sbrk+0x64>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	429a      	cmp	r2, r3
 800353e:	d207      	bcs.n	8003550 <_sbrk+0x40>
 8003540:	f012 f9a4 	bl	801588c <__errno>
 8003544:	4603      	mov	r3, r0
 8003546:	220c      	movs	r2, #12
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800354e:	e009      	b.n	8003564 <_sbrk+0x54>
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <_sbrk+0x64>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4b07      	ldr	r3, [pc, #28]	; (8003574 <_sbrk+0x64>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	4a05      	ldr	r2, [pc, #20]	; (8003574 <_sbrk+0x64>)
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4618      	mov	r0, r3
 8003566:	3718      	adds	r7, #24
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	24080000 	.word	0x24080000
 8003570:	00000400 	.word	0x00000400
 8003574:	24000c34 	.word	0x24000c34
 8003578:	240055a0 	.word	0x240055a0

0800357c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003580:	4b37      	ldr	r3, [pc, #220]	; (8003660 <SystemInit+0xe4>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	4a36      	ldr	r2, [pc, #216]	; (8003660 <SystemInit+0xe4>)
 8003588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800358c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003590:	4b34      	ldr	r3, [pc, #208]	; (8003664 <SystemInit+0xe8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	2b06      	cmp	r3, #6
 800359a:	d807      	bhi.n	80035ac <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800359c:	4b31      	ldr	r3, [pc, #196]	; (8003664 <SystemInit+0xe8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f023 030f 	bic.w	r3, r3, #15
 80035a4:	4a2f      	ldr	r2, [pc, #188]	; (8003664 <SystemInit+0xe8>)
 80035a6:	f043 0307 	orr.w	r3, r3, #7
 80035aa:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80035ac:	4b2e      	ldr	r3, [pc, #184]	; (8003668 <SystemInit+0xec>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a2d      	ldr	r2, [pc, #180]	; (8003668 <SystemInit+0xec>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80035b8:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <SystemInit+0xec>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80035be:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <SystemInit+0xec>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	4929      	ldr	r1, [pc, #164]	; (8003668 <SystemInit+0xec>)
 80035c4:	4b29      	ldr	r3, [pc, #164]	; (800366c <SystemInit+0xf0>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80035ca:	4b26      	ldr	r3, [pc, #152]	; (8003664 <SystemInit+0xe8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d007      	beq.n	80035e6 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80035d6:	4b23      	ldr	r3, [pc, #140]	; (8003664 <SystemInit+0xe8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 030f 	bic.w	r3, r3, #15
 80035de:	4a21      	ldr	r2, [pc, #132]	; (8003664 <SystemInit+0xe8>)
 80035e0:	f043 0307 	orr.w	r3, r3, #7
 80035e4:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80035e6:	4b20      	ldr	r3, [pc, #128]	; (8003668 <SystemInit+0xec>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80035ec:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <SystemInit+0xec>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80035f2:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <SystemInit+0xec>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80035f8:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <SystemInit+0xec>)
 80035fa:	4a1d      	ldr	r2, [pc, #116]	; (8003670 <SystemInit+0xf4>)
 80035fc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80035fe:	4b1a      	ldr	r3, [pc, #104]	; (8003668 <SystemInit+0xec>)
 8003600:	4a1c      	ldr	r2, [pc, #112]	; (8003674 <SystemInit+0xf8>)
 8003602:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003604:	4b18      	ldr	r3, [pc, #96]	; (8003668 <SystemInit+0xec>)
 8003606:	4a1c      	ldr	r2, [pc, #112]	; (8003678 <SystemInit+0xfc>)
 8003608:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800360a:	4b17      	ldr	r3, [pc, #92]	; (8003668 <SystemInit+0xec>)
 800360c:	2200      	movs	r2, #0
 800360e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003610:	4b15      	ldr	r3, [pc, #84]	; (8003668 <SystemInit+0xec>)
 8003612:	4a19      	ldr	r2, [pc, #100]	; (8003678 <SystemInit+0xfc>)
 8003614:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003616:	4b14      	ldr	r3, [pc, #80]	; (8003668 <SystemInit+0xec>)
 8003618:	2200      	movs	r2, #0
 800361a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 800361c:	4b12      	ldr	r3, [pc, #72]	; (8003668 <SystemInit+0xec>)
 800361e:	4a16      	ldr	r2, [pc, #88]	; (8003678 <SystemInit+0xfc>)
 8003620:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003622:	4b11      	ldr	r3, [pc, #68]	; (8003668 <SystemInit+0xec>)
 8003624:	2200      	movs	r2, #0
 8003626:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003628:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <SystemInit+0xec>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a0e      	ldr	r2, [pc, #56]	; (8003668 <SystemInit+0xec>)
 800362e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003632:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <SystemInit+0xec>)
 8003636:	2200      	movs	r2, #0
 8003638:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800363a:	4b10      	ldr	r3, [pc, #64]	; (800367c <SystemInit+0x100>)
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <SystemInit+0x104>)
 8003640:	4013      	ands	r3, r2
 8003642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003646:	d202      	bcs.n	800364e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003648:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <SystemInit+0x108>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800364e:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <SystemInit+0x10c>)
 8003650:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003654:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003656:	bf00      	nop
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000ed00 	.word	0xe000ed00
 8003664:	52002000 	.word	0x52002000
 8003668:	58024400 	.word	0x58024400
 800366c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003670:	02020200 	.word	0x02020200
 8003674:	01ff0000 	.word	0x01ff0000
 8003678:	01010280 	.word	0x01010280
 800367c:	5c001000 	.word	0x5c001000
 8003680:	ffff0000 	.word	0xffff0000
 8003684:	51008108 	.word	0x51008108
 8003688:	52004000 	.word	0x52004000

0800368c <Reset_Handler>:
 800368c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036c4 <LoopFillZerobss+0xe>
 8003690:	f7ff ff74 	bl	800357c <SystemInit>
 8003694:	480c      	ldr	r0, [pc, #48]	; (80036c8 <LoopFillZerobss+0x12>)
 8003696:	490d      	ldr	r1, [pc, #52]	; (80036cc <LoopFillZerobss+0x16>)
 8003698:	4a0d      	ldr	r2, [pc, #52]	; (80036d0 <LoopFillZerobss+0x1a>)
 800369a:	2300      	movs	r3, #0
 800369c:	e002      	b.n	80036a4 <LoopCopyDataInit>

0800369e <CopyDataInit>:
 800369e:	58d4      	ldr	r4, [r2, r3]
 80036a0:	50c4      	str	r4, [r0, r3]
 80036a2:	3304      	adds	r3, #4

080036a4 <LoopCopyDataInit>:
 80036a4:	18c4      	adds	r4, r0, r3
 80036a6:	428c      	cmp	r4, r1
 80036a8:	d3f9      	bcc.n	800369e <CopyDataInit>
 80036aa:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <LoopFillZerobss+0x1e>)
 80036ac:	4c0a      	ldr	r4, [pc, #40]	; (80036d8 <LoopFillZerobss+0x22>)
 80036ae:	2300      	movs	r3, #0
 80036b0:	e001      	b.n	80036b6 <LoopFillZerobss>

080036b2 <FillZerobss>:
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	3204      	adds	r2, #4

080036b6 <LoopFillZerobss>:
 80036b6:	42a2      	cmp	r2, r4
 80036b8:	d3fb      	bcc.n	80036b2 <FillZerobss>
 80036ba:	f012 f8ed 	bl	8015898 <__libc_init_array>
 80036be:	f7fd fbbf 	bl	8000e40 <main>
 80036c2:	4770      	bx	lr
 80036c4:	24080000 	.word	0x24080000
 80036c8:	24000000 	.word	0x24000000
 80036cc:	24000100 	.word	0x24000100
 80036d0:	08016730 	.word	0x08016730
 80036d4:	24000100 	.word	0x24000100
 80036d8:	2400559c 	.word	0x2400559c

080036dc <ADC3_IRQHandler>:
 80036dc:	e7fe      	b.n	80036dc <ADC3_IRQHandler>
	...

080036e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036e6:	2003      	movs	r0, #3
 80036e8:	f001 fd39 	bl	800515e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80036ec:	f006 fde4 	bl	800a2b8 <HAL_RCC_GetSysClockFreq>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <HAL_Init+0x68>)
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	0a1b      	lsrs	r3, r3, #8
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	4913      	ldr	r1, [pc, #76]	; (800374c <HAL_Init+0x6c>)
 80036fe:	5ccb      	ldrb	r3, [r1, r3]
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	fa22 f303 	lsr.w	r3, r2, r3
 8003708:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800370a:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <HAL_Init+0x68>)
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	4a0e      	ldr	r2, [pc, #56]	; (800374c <HAL_Init+0x6c>)
 8003714:	5cd3      	ldrb	r3, [r2, r3]
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
 8003720:	4a0b      	ldr	r2, [pc, #44]	; (8003750 <HAL_Init+0x70>)
 8003722:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003724:	4a0b      	ldr	r2, [pc, #44]	; (8003754 <HAL_Init+0x74>)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800372a:	2005      	movs	r0, #5
 800372c:	f7ff fd60 	bl	80031f0 <HAL_InitTick>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e002      	b.n	8003740 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800373a:	f7ff f8fb 	bl	8002934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	58024400 	.word	0x58024400
 800374c:	0801667c 	.word	0x0801667c
 8003750:	2400008c 	.word	0x2400008c
 8003754:	24000088 	.word	0x24000088

08003758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800375c:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_IncTick+0x20>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_IncTick+0x24>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4413      	add	r3, r2
 8003768:	4a04      	ldr	r2, [pc, #16]	; (800377c <HAL_IncTick+0x24>)
 800376a:	6013      	str	r3, [r2, #0]
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	24000094 	.word	0x24000094
 800377c:	24000c38 	.word	0x24000c38

08003780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return uwTick;
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_GetTick+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	24000c38 	.word	0x24000c38

08003798 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <HAL_GetREVID+0x14>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	0c1b      	lsrs	r3, r3, #16
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	5c001000 	.word	0x5c001000

080037b0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80037ba:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	401a      	ands	r2, r3
 80037c4:	4904      	ldr	r1, [pc, #16]	; (80037d8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	58000400 	.word	0x58000400

080037dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	609a      	str	r2, [r3, #8]
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	609a      	str	r2, [r3, #8]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3360      	adds	r3, #96	; 0x60
 8003856:	461a      	mov	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	430b      	orrs	r3, r1
 8003872:	431a      	orrs	r2, r3
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003878:	bf00      	nop
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f003 031f 	and.w	r3, r3, #31
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	fa01 f303 	lsl.w	r3, r1, r3
 80038a4:	431a      	orrs	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	611a      	str	r2, [r3, #16]
}
 80038aa:	bf00      	nop
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b087      	sub	sp, #28
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3360      	adds	r3, #96	; 0x60
 80038c6:	461a      	mov	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	431a      	orrs	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	601a      	str	r2, [r3, #0]
  }
}
 80038e0:	bf00      	nop
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003912:	b480      	push	{r7}
 8003914:	b087      	sub	sp, #28
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	3330      	adds	r3, #48	; 0x30
 8003922:	461a      	mov	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	0a1b      	lsrs	r3, r3, #8
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	4413      	add	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f003 031f 	and.w	r3, r3, #31
 800393c:	211f      	movs	r1, #31
 800393e:	fa01 f303 	lsl.w	r3, r1, r3
 8003942:	43db      	mvns	r3, r3
 8003944:	401a      	ands	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	0e9b      	lsrs	r3, r3, #26
 800394a:	f003 011f 	and.w	r1, r3, #31
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f003 031f 	and.w	r3, r3, #31
 8003954:	fa01 f303 	lsl.w	r3, r1, r3
 8003958:	431a      	orrs	r2, r3
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f023 0203 	bic.w	r2, r3, #3
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	60da      	str	r2, [r3, #12]
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3314      	adds	r3, #20
 80039a0:	461a      	mov	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	0e5b      	lsrs	r3, r3, #25
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	4413      	add	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	0d1b      	lsrs	r3, r3, #20
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	2107      	movs	r1, #7
 80039be:	fa01 f303 	lsl.w	r3, r1, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	401a      	ands	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	0d1b      	lsrs	r3, r3, #20
 80039ca:	f003 031f 	and.w	r3, r3, #31
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	fa01 f303 	lsl.w	r3, r1, r3
 80039d4:	431a      	orrs	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80039da:	bf00      	nop
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
	...

080039e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a00:	43db      	mvns	r3, r3
 8003a02:	401a      	ands	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f003 0318 	and.w	r3, r3, #24
 8003a0a:	4908      	ldr	r1, [pc, #32]	; (8003a2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a0c:	40d9      	lsrs	r1, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	400b      	ands	r3, r1
 8003a12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a16:	431a      	orrs	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003a1e:	bf00      	nop
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	000fffff 	.word	0x000fffff

08003a30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 031f 	and.w	r3, r3, #31
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	4b04      	ldr	r3, [pc, #16]	; (8003a6c <LL_ADC_DisableDeepPowerDown+0x20>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6093      	str	r3, [r2, #8]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	5fffffc0 	.word	0x5fffffc0

08003a70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a84:	d101      	bne.n	8003a8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	4b05      	ldr	r3, [pc, #20]	; (8003abc <LL_ADC_EnableInternalRegulator+0x24>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	6fffffc0 	.word	0x6fffffc0

08003ac0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ad4:	d101      	bne.n	8003ada <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <LL_ADC_Enable+0x24>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	f043 0201 	orr.w	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	7fffffc0 	.word	0x7fffffc0

08003b10 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <LL_ADC_Disable+0x24>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	f043 0202 	orr.w	r2, r3, #2
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	7fffffc0 	.word	0x7fffffc0

08003b38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <LL_ADC_IsEnabled+0x18>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <LL_ADC_IsEnabled+0x1a>
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d101      	bne.n	8003b76 <LL_ADC_IsDisableOngoing+0x18>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <LL_ADC_IsDisableOngoing+0x1a>
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <LL_ADC_REG_StartConversion+0x24>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	f043 0204 	orr.w	r2, r3, #4
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	7fffffc0 	.word	0x7fffffc0

08003bac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d101      	bne.n	8003bc4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d101      	bne.n	8003bea <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	b089      	sub	sp, #36	; 0x24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e18f      	b.n	8003f32 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d109      	bne.n	8003c34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7fe fea5 	bl	8002970 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff ff19 	bl	8003a70 <LL_ADC_IsDeepPowerDownEnabled>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d004      	beq.n	8003c4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff feff 	bl	8003a4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff ff34 	bl	8003ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d114      	bne.n	8003c88 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff ff18 	bl	8003a98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c68:	4b87      	ldr	r3, [pc, #540]	; (8003e88 <HAL_ADC_Init+0x290>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	099b      	lsrs	r3, r3, #6
 8003c6e:	4a87      	ldr	r2, [pc, #540]	; (8003e8c <HAL_ADC_Init+0x294>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	099b      	lsrs	r3, r3, #6
 8003c76:	3301      	adds	r3, #1
 8003c78:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c7a:	e002      	b.n	8003c82 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1f9      	bne.n	8003c7c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ff17 	bl	8003ac0 <LL_ADC_IsInternalRegulatorEnabled>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10d      	bne.n	8003cb4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9c:	f043 0210 	orr.w	r2, r3, #16
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	f043 0201 	orr.w	r2, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff ff77 	bl	8003bac <LL_ADC_REG_IsConversionOngoing>
 8003cbe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f040 8129 	bne.w	8003f20 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f040 8125 	bne.w	8003f20 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003cde:	f043 0202 	orr.w	r2, r3, #2
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff ff24 	bl	8003b38 <LL_ADC_IsEnabled>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d136      	bne.n	8003d64 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a65      	ldr	r2, [pc, #404]	; (8003e90 <HAL_ADC_Init+0x298>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d004      	beq.n	8003d0a <HAL_ADC_Init+0x112>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a63      	ldr	r2, [pc, #396]	; (8003e94 <HAL_ADC_Init+0x29c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d10e      	bne.n	8003d28 <HAL_ADC_Init+0x130>
 8003d0a:	4861      	ldr	r0, [pc, #388]	; (8003e90 <HAL_ADC_Init+0x298>)
 8003d0c:	f7ff ff14 	bl	8003b38 <LL_ADC_IsEnabled>
 8003d10:	4604      	mov	r4, r0
 8003d12:	4860      	ldr	r0, [pc, #384]	; (8003e94 <HAL_ADC_Init+0x29c>)
 8003d14:	f7ff ff10 	bl	8003b38 <LL_ADC_IsEnabled>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4323      	orrs	r3, r4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	bf0c      	ite	eq
 8003d20:	2301      	moveq	r3, #1
 8003d22:	2300      	movne	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	e008      	b.n	8003d3a <HAL_ADC_Init+0x142>
 8003d28:	485b      	ldr	r0, [pc, #364]	; (8003e98 <HAL_ADC_Init+0x2a0>)
 8003d2a:	f7ff ff05 	bl	8003b38 <LL_ADC_IsEnabled>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d012      	beq.n	8003d64 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a53      	ldr	r2, [pc, #332]	; (8003e90 <HAL_ADC_Init+0x298>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d004      	beq.n	8003d52 <HAL_ADC_Init+0x15a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a51      	ldr	r2, [pc, #324]	; (8003e94 <HAL_ADC_Init+0x29c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d101      	bne.n	8003d56 <HAL_ADC_Init+0x15e>
 8003d52:	4a52      	ldr	r2, [pc, #328]	; (8003e9c <HAL_ADC_Init+0x2a4>)
 8003d54:	e000      	b.n	8003d58 <HAL_ADC_Init+0x160>
 8003d56:	4a52      	ldr	r2, [pc, #328]	; (8003ea0 <HAL_ADC_Init+0x2a8>)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	f7ff fd3c 	bl	80037dc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003d64:	f7ff fd18 	bl	8003798 <HAL_GetREVID>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d914      	bls.n	8003d9c <HAL_ADC_Init+0x1a4>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b10      	cmp	r3, #16
 8003d78:	d110      	bne.n	8003d9c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	7d5b      	ldrb	r3, [r3, #21]
 8003d7e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d84:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003d8a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	7f1b      	ldrb	r3, [r3, #28]
 8003d90:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003d92:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d94:	f043 030c 	orr.w	r3, r3, #12
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	e00d      	b.n	8003db8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	7d5b      	ldrb	r3, [r3, #21]
 8003da0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003da6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003dac:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	7f1b      	ldrb	r3, [r3, #28]
 8003db2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	7f1b      	ldrb	r3, [r3, #28]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d106      	bne.n	8003dce <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	045b      	lsls	r3, r3, #17
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	4b2c      	ldr	r3, [pc, #176]	; (8003ea4 <HAL_ADC_Init+0x2ac>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	69b9      	ldr	r1, [r7, #24]
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff fed2 	bl	8003bac <LL_ADC_REG_IsConversionOngoing>
 8003e08:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff fedf 	bl	8003bd2 <LL_ADC_INJ_IsConversionOngoing>
 8003e14:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d15f      	bne.n	8003edc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d15c      	bne.n	8003edc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	7d1b      	ldrb	r3, [r3, #20]
 8003e26:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <HAL_ADC_Init+0x2b0>)
 8003e38:	4013      	ands	r3, r2
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	69b9      	ldr	r1, [r7, #24]
 8003e40:	430b      	orrs	r3, r1
 8003e42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d130      	bne.n	8003eb0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	4b14      	ldr	r3, [pc, #80]	; (8003eac <HAL_ADC_Init+0x2b4>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e62:	3a01      	subs	r2, #1
 8003e64:	0411      	lsls	r1, r2, #16
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e6a:	4311      	orrs	r1, r2
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e70:	4311      	orrs	r1, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e76:	430a      	orrs	r2, r1
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	611a      	str	r2, [r3, #16]
 8003e84:	e01c      	b.n	8003ec0 <HAL_ADC_Init+0x2c8>
 8003e86:	bf00      	nop
 8003e88:	24000088 	.word	0x24000088
 8003e8c:	053e2d63 	.word	0x053e2d63
 8003e90:	40022000 	.word	0x40022000
 8003e94:	40022100 	.word	0x40022100
 8003e98:	58026000 	.word	0x58026000
 8003e9c:	40022300 	.word	0x40022300
 8003ea0:	58026300 	.word	0x58026300
 8003ea4:	fff0c003 	.word	0xfff0c003
 8003ea8:	ffffbffc 	.word	0xffffbffc
 8003eac:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691a      	ldr	r2, [r3, #16]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fdec 	bl	8004ab4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d10c      	bne.n	8003efe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	f023 010f 	bic.w	r1, r3, #15
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	1e5a      	subs	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
 8003efc:	e007      	b.n	8003f0e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 020f 	bic.w	r2, r2, #15
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	f023 0303 	bic.w	r3, r3, #3
 8003f16:	f043 0201 	orr.w	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54
 8003f1e:	e007      	b.n	8003f30 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	f043 0210 	orr.w	r2, r3, #16
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f30:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3724      	adds	r7, #36	; 0x24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd90      	pop	{r4, r7, pc}
 8003f3a:	bf00      	nop

08003f3c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a55      	ldr	r2, [pc, #340]	; (80040a4 <HAL_ADC_Start_DMA+0x168>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d004      	beq.n	8003f5c <HAL_ADC_Start_DMA+0x20>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a54      	ldr	r2, [pc, #336]	; (80040a8 <HAL_ADC_Start_DMA+0x16c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d101      	bne.n	8003f60 <HAL_ADC_Start_DMA+0x24>
 8003f5c:	4b53      	ldr	r3, [pc, #332]	; (80040ac <HAL_ADC_Start_DMA+0x170>)
 8003f5e:	e000      	b.n	8003f62 <HAL_ADC_Start_DMA+0x26>
 8003f60:	4b53      	ldr	r3, [pc, #332]	; (80040b0 <HAL_ADC_Start_DMA+0x174>)
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff fd64 	bl	8003a30 <LL_ADC_GetMultimode>
 8003f68:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff fe1c 	bl	8003bac <LL_ADC_REG_IsConversionOngoing>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f040 808c 	bne.w	8004094 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_ADC_Start_DMA+0x4e>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e087      	b.n	800409a <HAL_ADC_Start_DMA+0x15e>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	2b05      	cmp	r3, #5
 8003f9c:	d002      	beq.n	8003fa4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	2b09      	cmp	r3, #9
 8003fa2:	d170      	bne.n	8004086 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 fc07 	bl	80047b8 <ADC_Enable>
 8003faa:	4603      	mov	r3, r0
 8003fac:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003fae:	7dfb      	ldrb	r3, [r7, #23]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d163      	bne.n	800407c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fb8:	4b3e      	ldr	r3, [pc, #248]	; (80040b4 <HAL_ADC_Start_DMA+0x178>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a37      	ldr	r2, [pc, #220]	; (80040a8 <HAL_ADC_Start_DMA+0x16c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d002      	beq.n	8003fd4 <HAL_ADC_Start_DMA+0x98>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	e000      	b.n	8003fd6 <HAL_ADC_Start_DMA+0x9a>
 8003fd4:	4b33      	ldr	r3, [pc, #204]	; (80040a4 <HAL_ADC_Start_DMA+0x168>)
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	6812      	ldr	r2, [r2, #0]
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d002      	beq.n	8003fe4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d006      	beq.n	800400a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004000:	f023 0206 	bic.w	r2, r3, #6
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	659a      	str	r2, [r3, #88]	; 0x58
 8004008:	e002      	b.n	8004010 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004014:	4a28      	ldr	r2, [pc, #160]	; (80040b8 <HAL_ADC_Start_DMA+0x17c>)
 8004016:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401c:	4a27      	ldr	r2, [pc, #156]	; (80040bc <HAL_ADC_Start_DMA+0x180>)
 800401e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004024:	4a26      	ldr	r2, [pc, #152]	; (80040c0 <HAL_ADC_Start_DMA+0x184>)
 8004026:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	221c      	movs	r2, #28
 800402e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0210 	orr.w	r2, r2, #16
 8004046:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	4619      	mov	r1, r3
 8004052:	4610      	mov	r0, r2
 8004054:	f7ff fc89 	bl	800396a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3340      	adds	r3, #64	; 0x40
 8004062:	4619      	mov	r1, r3
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f002 f80e 	bl	8006088 <HAL_DMA_Start_IT>
 800406c:	4603      	mov	r3, r0
 800406e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fd85 	bl	8003b84 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800407a:	e00d      	b.n	8004098 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004084:	e008      	b.n	8004098 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004092:	e001      	b.n	8004098 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004094:	2302      	movs	r3, #2
 8004096:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004098:	7dfb      	ldrb	r3, [r7, #23]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40022000 	.word	0x40022000
 80040a8:	40022100 	.word	0x40022100
 80040ac:	40022300 	.word	0x40022300
 80040b0:	58026300 	.word	0x58026300
 80040b4:	fffff0fe 	.word	0xfffff0fe
 80040b8:	0800498b 	.word	0x0800498b
 80040bc:	08004a63 	.word	0x08004a63
 80040c0:	08004a7f 	.word	0x08004a7f

080040c4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004100:	b590      	push	{r4, r7, lr}
 8004102:	b0a1      	sub	sp, #132	; 0x84
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4a65      	ldr	r2, [pc, #404]	; (80042b0 <HAL_ADC_ConfigChannel+0x1b0>)
 800411a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004122:	2b01      	cmp	r3, #1
 8004124:	d101      	bne.n	800412a <HAL_ADC_ConfigChannel+0x2a>
 8004126:	2302      	movs	r3, #2
 8004128:	e32e      	b.n	8004788 <HAL_ADC_ConfigChannel+0x688>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff fd38 	bl	8003bac <LL_ADC_REG_IsConversionOngoing>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 8313 	bne.w	800476a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	db2c      	blt.n	80041a6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004154:	2b00      	cmp	r3, #0
 8004156:	d108      	bne.n	800416a <HAL_ADC_ConfigChannel+0x6a>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	0e9b      	lsrs	r3, r3, #26
 800415e:	f003 031f 	and.w	r3, r3, #31
 8004162:	2201      	movs	r2, #1
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	e016      	b.n	8004198 <HAL_ADC_ConfigChannel+0x98>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004172:	fa93 f3a3 	rbit	r3, r3
 8004176:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004178:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800417a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800417c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004182:	2320      	movs	r3, #32
 8004184:	e003      	b.n	800418e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004186:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004188:	fab3 f383 	clz	r3, r3
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2201      	movs	r2, #1
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	69d1      	ldr	r1, [r2, #28]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	430b      	orrs	r3, r1
 80041a4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	6859      	ldr	r1, [r3, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	f7ff fbad 	bl	8003912 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fcf5 	bl	8003bac <LL_ADC_REG_IsConversionOngoing>
 80041c2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff fd02 	bl	8003bd2 <LL_ADC_INJ_IsConversionOngoing>
 80041ce:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f040 80b8 	bne.w	8004348 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f040 80b4 	bne.w	8004348 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6819      	ldr	r1, [r3, #0]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	461a      	mov	r2, r3
 80041ee:	f7ff fbcf 	bl	8003990 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80041f2:	4b30      	ldr	r3, [pc, #192]	; (80042b4 <HAL_ADC_ConfigChannel+0x1b4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80041fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041fe:	d10b      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x118>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	695a      	ldr	r2, [r3, #20]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	e01d      	b.n	8004254 <HAL_ADC_ConfigChannel+0x154>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <HAL_ADC_ConfigChannel+0x13e>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	089b      	lsrs	r3, r3, #2
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	e00a      	b.n	8004254 <HAL_ADC_ConfigChannel+0x154>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	089b      	lsrs	r3, r3, #2
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b04      	cmp	r3, #4
 800425c:	d02c      	beq.n	80042b8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6919      	ldr	r1, [r3, #16]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800426c:	f7ff faea 	bl	8003844 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6818      	ldr	r0, [r3, #0]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	6919      	ldr	r1, [r3, #16]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	7e5b      	ldrb	r3, [r3, #25]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d102      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x186>
 8004280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004284:	e000      	b.n	8004288 <HAL_ADC_ConfigChannel+0x188>
 8004286:	2300      	movs	r3, #0
 8004288:	461a      	mov	r2, r3
 800428a:	f7ff fb14 	bl	80038b6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6818      	ldr	r0, [r3, #0]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	6919      	ldr	r1, [r3, #16]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	7e1b      	ldrb	r3, [r3, #24]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d102      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x1a4>
 800429e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042a2:	e000      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x1a6>
 80042a4:	2300      	movs	r3, #0
 80042a6:	461a      	mov	r2, r3
 80042a8:	f7ff faec 	bl	8003884 <LL_ADC_SetDataRightShift>
 80042ac:	e04c      	b.n	8004348 <HAL_ADC_ConfigChannel+0x248>
 80042ae:	bf00      	nop
 80042b0:	47ff0000 	.word	0x47ff0000
 80042b4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	069b      	lsls	r3, r3, #26
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d107      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042da:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	069b      	lsls	r3, r3, #26
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d107      	bne.n	8004300 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042fe:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004306:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	069b      	lsls	r3, r3, #26
 8004310:	429a      	cmp	r2, r3
 8004312:	d107      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004322:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800432a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	069b      	lsls	r3, r3, #26
 8004334:	429a      	cmp	r2, r3
 8004336:	d107      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004346:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff fbf3 	bl	8003b38 <LL_ADC_IsEnabled>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	f040 8211 	bne.w	800477c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6819      	ldr	r1, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	461a      	mov	r2, r3
 8004368:	f7ff fb3e 	bl	80039e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4aa1      	ldr	r2, [pc, #644]	; (80045f8 <HAL_ADC_ConfigChannel+0x4f8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	f040 812e 	bne.w	80045d4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10b      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x2a0>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	0e9b      	lsrs	r3, r3, #26
 800438e:	3301      	adds	r3, #1
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	2b09      	cmp	r3, #9
 8004396:	bf94      	ite	ls
 8004398:	2301      	movls	r3, #1
 800439a:	2300      	movhi	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	e019      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x2d4>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043a8:	fa93 f3a3 	rbit	r3, r3
 80043ac:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80043ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80043b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80043b8:	2320      	movs	r3, #32
 80043ba:	e003      	b.n	80043c4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80043bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043be:	fab3 f383 	clz	r3, r3
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	3301      	adds	r3, #1
 80043c6:	f003 031f 	and.w	r3, r3, #31
 80043ca:	2b09      	cmp	r3, #9
 80043cc:	bf94      	ite	ls
 80043ce:	2301      	movls	r3, #1
 80043d0:	2300      	movhi	r3, #0
 80043d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d079      	beq.n	80044cc <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d107      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x2f4>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	0e9b      	lsrs	r3, r3, #26
 80043ea:	3301      	adds	r3, #1
 80043ec:	069b      	lsls	r3, r3, #26
 80043ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043f2:	e015      	b.n	8004420 <HAL_ADC_ConfigChannel+0x320>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043fc:	fa93 f3a3 	rbit	r3, r3
 8004400:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004404:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800440c:	2320      	movs	r3, #32
 800440e:	e003      	b.n	8004418 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004412:	fab3 f383 	clz	r3, r3
 8004416:	b2db      	uxtb	r3, r3
 8004418:	3301      	adds	r3, #1
 800441a:	069b      	lsls	r3, r3, #26
 800441c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004428:	2b00      	cmp	r3, #0
 800442a:	d109      	bne.n	8004440 <HAL_ADC_ConfigChannel+0x340>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	0e9b      	lsrs	r3, r3, #26
 8004432:	3301      	adds	r3, #1
 8004434:	f003 031f 	and.w	r3, r3, #31
 8004438:	2101      	movs	r1, #1
 800443a:	fa01 f303 	lsl.w	r3, r1, r3
 800443e:	e017      	b.n	8004470 <HAL_ADC_ConfigChannel+0x370>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004448:	fa93 f3a3 	rbit	r3, r3
 800444c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800444e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004450:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004458:	2320      	movs	r3, #32
 800445a:	e003      	b.n	8004464 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800445c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800445e:	fab3 f383 	clz	r3, r3
 8004462:	b2db      	uxtb	r3, r3
 8004464:	3301      	adds	r3, #1
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	2101      	movs	r1, #1
 800446c:	fa01 f303 	lsl.w	r3, r1, r3
 8004470:	ea42 0103 	orr.w	r1, r2, r3
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10a      	bne.n	8004496 <HAL_ADC_ConfigChannel+0x396>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	0e9b      	lsrs	r3, r3, #26
 8004486:	3301      	adds	r3, #1
 8004488:	f003 021f 	and.w	r2, r3, #31
 800448c:	4613      	mov	r3, r2
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	4413      	add	r3, r2
 8004492:	051b      	lsls	r3, r3, #20
 8004494:	e018      	b.n	80044c8 <HAL_ADC_ConfigChannel+0x3c8>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449e:	fa93 f3a3 	rbit	r3, r3
 80044a2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80044a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80044ae:	2320      	movs	r3, #32
 80044b0:	e003      	b.n	80044ba <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80044b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b4:	fab3 f383 	clz	r3, r3
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	3301      	adds	r3, #1
 80044bc:	f003 021f 	and.w	r2, r3, #31
 80044c0:	4613      	mov	r3, r2
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4413      	add	r3, r2
 80044c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044c8:	430b      	orrs	r3, r1
 80044ca:	e07e      	b.n	80045ca <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d107      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x3e8>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	0e9b      	lsrs	r3, r3, #26
 80044de:	3301      	adds	r3, #1
 80044e0:	069b      	lsls	r3, r3, #26
 80044e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044e6:	e015      	b.n	8004514 <HAL_ADC_ConfigChannel+0x414>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	fa93 f3a3 	rbit	r3, r3
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004500:	2320      	movs	r3, #32
 8004502:	e003      	b.n	800450c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	fab3 f383 	clz	r3, r3
 800450a:	b2db      	uxtb	r3, r3
 800450c:	3301      	adds	r3, #1
 800450e:	069b      	lsls	r3, r3, #26
 8004510:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800451c:	2b00      	cmp	r3, #0
 800451e:	d109      	bne.n	8004534 <HAL_ADC_ConfigChannel+0x434>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	0e9b      	lsrs	r3, r3, #26
 8004526:	3301      	adds	r3, #1
 8004528:	f003 031f 	and.w	r3, r3, #31
 800452c:	2101      	movs	r1, #1
 800452e:	fa01 f303 	lsl.w	r3, r1, r3
 8004532:	e017      	b.n	8004564 <HAL_ADC_ConfigChannel+0x464>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	fa93 f3a3 	rbit	r3, r3
 8004540:	61bb      	str	r3, [r7, #24]
  return result;
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800454c:	2320      	movs	r3, #32
 800454e:	e003      	b.n	8004558 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	fab3 f383 	clz	r3, r3
 8004556:	b2db      	uxtb	r3, r3
 8004558:	3301      	adds	r3, #1
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	2101      	movs	r1, #1
 8004560:	fa01 f303 	lsl.w	r3, r1, r3
 8004564:	ea42 0103 	orr.w	r1, r2, r3
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10d      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x490>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	0e9b      	lsrs	r3, r3, #26
 800457a:	3301      	adds	r3, #1
 800457c:	f003 021f 	and.w	r2, r3, #31
 8004580:	4613      	mov	r3, r2
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	4413      	add	r3, r2
 8004586:	3b1e      	subs	r3, #30
 8004588:	051b      	lsls	r3, r3, #20
 800458a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800458e:	e01b      	b.n	80045c8 <HAL_ADC_ConfigChannel+0x4c8>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	fa93 f3a3 	rbit	r3, r3
 800459c:	60fb      	str	r3, [r7, #12]
  return result;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80045a8:	2320      	movs	r3, #32
 80045aa:	e003      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	fab3 f383 	clz	r3, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	3301      	adds	r3, #1
 80045b6:	f003 021f 	and.w	r2, r3, #31
 80045ba:	4613      	mov	r3, r2
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	4413      	add	r3, r2
 80045c0:	3b1e      	subs	r3, #30
 80045c2:	051b      	lsls	r3, r3, #20
 80045c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045c8:	430b      	orrs	r3, r1
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	6892      	ldr	r2, [r2, #8]
 80045ce:	4619      	mov	r1, r3
 80045d0:	f7ff f9de 	bl	8003990 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f280 80cf 	bge.w	800477c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a06      	ldr	r2, [pc, #24]	; (80045fc <HAL_ADC_ConfigChannel+0x4fc>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d004      	beq.n	80045f2 <HAL_ADC_ConfigChannel+0x4f2>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a04      	ldr	r2, [pc, #16]	; (8004600 <HAL_ADC_ConfigChannel+0x500>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10a      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x508>
 80045f2:	4b04      	ldr	r3, [pc, #16]	; (8004604 <HAL_ADC_ConfigChannel+0x504>)
 80045f4:	e009      	b.n	800460a <HAL_ADC_ConfigChannel+0x50a>
 80045f6:	bf00      	nop
 80045f8:	47ff0000 	.word	0x47ff0000
 80045fc:	40022000 	.word	0x40022000
 8004600:	40022100 	.word	0x40022100
 8004604:	40022300 	.word	0x40022300
 8004608:	4b61      	ldr	r3, [pc, #388]	; (8004790 <HAL_ADC_ConfigChannel+0x690>)
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff f90c 	bl	8003828 <LL_ADC_GetCommonPathInternalCh>
 8004610:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a5f      	ldr	r2, [pc, #380]	; (8004794 <HAL_ADC_ConfigChannel+0x694>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d004      	beq.n	8004626 <HAL_ADC_ConfigChannel+0x526>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a5d      	ldr	r2, [pc, #372]	; (8004798 <HAL_ADC_ConfigChannel+0x698>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d10e      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x544>
 8004626:	485b      	ldr	r0, [pc, #364]	; (8004794 <HAL_ADC_ConfigChannel+0x694>)
 8004628:	f7ff fa86 	bl	8003b38 <LL_ADC_IsEnabled>
 800462c:	4604      	mov	r4, r0
 800462e:	485a      	ldr	r0, [pc, #360]	; (8004798 <HAL_ADC_ConfigChannel+0x698>)
 8004630:	f7ff fa82 	bl	8003b38 <LL_ADC_IsEnabled>
 8004634:	4603      	mov	r3, r0
 8004636:	4323      	orrs	r3, r4
 8004638:	2b00      	cmp	r3, #0
 800463a:	bf0c      	ite	eq
 800463c:	2301      	moveq	r3, #1
 800463e:	2300      	movne	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	e008      	b.n	8004656 <HAL_ADC_ConfigChannel+0x556>
 8004644:	4855      	ldr	r0, [pc, #340]	; (800479c <HAL_ADC_ConfigChannel+0x69c>)
 8004646:	f7ff fa77 	bl	8003b38 <LL_ADC_IsEnabled>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf0c      	ite	eq
 8004650:	2301      	moveq	r3, #1
 8004652:	2300      	movne	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d07d      	beq.n	8004756 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a50      	ldr	r2, [pc, #320]	; (80047a0 <HAL_ADC_ConfigChannel+0x6a0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d130      	bne.n	80046c6 <HAL_ADC_ConfigChannel+0x5c6>
 8004664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004666:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d12b      	bne.n	80046c6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a4a      	ldr	r2, [pc, #296]	; (800479c <HAL_ADC_ConfigChannel+0x69c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	f040 8081 	bne.w	800477c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a45      	ldr	r2, [pc, #276]	; (8004794 <HAL_ADC_ConfigChannel+0x694>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_ADC_ConfigChannel+0x58e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a43      	ldr	r2, [pc, #268]	; (8004798 <HAL_ADC_ConfigChannel+0x698>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d101      	bne.n	8004692 <HAL_ADC_ConfigChannel+0x592>
 800468e:	4a45      	ldr	r2, [pc, #276]	; (80047a4 <HAL_ADC_ConfigChannel+0x6a4>)
 8004690:	e000      	b.n	8004694 <HAL_ADC_ConfigChannel+0x594>
 8004692:	4a3f      	ldr	r2, [pc, #252]	; (8004790 <HAL_ADC_ConfigChannel+0x690>)
 8004694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004696:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f7ff f8b0 	bl	8003802 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046a2:	4b41      	ldr	r3, [pc, #260]	; (80047a8 <HAL_ADC_ConfigChannel+0x6a8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	099b      	lsrs	r3, r3, #6
 80046a8:	4a40      	ldr	r2, [pc, #256]	; (80047ac <HAL_ADC_ConfigChannel+0x6ac>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	099b      	lsrs	r3, r3, #6
 80046b0:	3301      	adds	r3, #1
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80046b6:	e002      	b.n	80046be <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f9      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046c4:	e05a      	b.n	800477c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a39      	ldr	r2, [pc, #228]	; (80047b0 <HAL_ADC_ConfigChannel+0x6b0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d11e      	bne.n	800470e <HAL_ADC_ConfigChannel+0x60e>
 80046d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d119      	bne.n	800470e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2f      	ldr	r2, [pc, #188]	; (800479c <HAL_ADC_ConfigChannel+0x69c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d14b      	bne.n	800477c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a2a      	ldr	r2, [pc, #168]	; (8004794 <HAL_ADC_ConfigChannel+0x694>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_ADC_ConfigChannel+0x5f8>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a29      	ldr	r2, [pc, #164]	; (8004798 <HAL_ADC_ConfigChannel+0x698>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d101      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x5fc>
 80046f8:	4a2a      	ldr	r2, [pc, #168]	; (80047a4 <HAL_ADC_ConfigChannel+0x6a4>)
 80046fa:	e000      	b.n	80046fe <HAL_ADC_ConfigChannel+0x5fe>
 80046fc:	4a24      	ldr	r2, [pc, #144]	; (8004790 <HAL_ADC_ConfigChannel+0x690>)
 80046fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004700:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004704:	4619      	mov	r1, r3
 8004706:	4610      	mov	r0, r2
 8004708:	f7ff f87b 	bl	8003802 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800470c:	e036      	b.n	800477c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a28      	ldr	r2, [pc, #160]	; (80047b4 <HAL_ADC_ConfigChannel+0x6b4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d131      	bne.n	800477c <HAL_ADC_ConfigChannel+0x67c>
 8004718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800471a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d12c      	bne.n	800477c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1d      	ldr	r2, [pc, #116]	; (800479c <HAL_ADC_ConfigChannel+0x69c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d127      	bne.n	800477c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a18      	ldr	r2, [pc, #96]	; (8004794 <HAL_ADC_ConfigChannel+0x694>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d004      	beq.n	8004740 <HAL_ADC_ConfigChannel+0x640>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a17      	ldr	r2, [pc, #92]	; (8004798 <HAL_ADC_ConfigChannel+0x698>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d101      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x644>
 8004740:	4a18      	ldr	r2, [pc, #96]	; (80047a4 <HAL_ADC_ConfigChannel+0x6a4>)
 8004742:	e000      	b.n	8004746 <HAL_ADC_ConfigChannel+0x646>
 8004744:	4a12      	ldr	r2, [pc, #72]	; (8004790 <HAL_ADC_ConfigChannel+0x690>)
 8004746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004748:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f7ff f857 	bl	8003802 <LL_ADC_SetCommonPathInternalCh>
 8004754:	e012      	b.n	800477c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475a:	f043 0220 	orr.w	r2, r3, #32
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004768:	e008      	b.n	800477c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476e:	f043 0220 	orr.w	r2, r3, #32
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004784:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004788:	4618      	mov	r0, r3
 800478a:	3784      	adds	r7, #132	; 0x84
 800478c:	46bd      	mov	sp, r7
 800478e:	bd90      	pop	{r4, r7, pc}
 8004790:	58026300 	.word	0x58026300
 8004794:	40022000 	.word	0x40022000
 8004798:	40022100 	.word	0x40022100
 800479c:	58026000 	.word	0x58026000
 80047a0:	cb840000 	.word	0xcb840000
 80047a4:	40022300 	.word	0x40022300
 80047a8:	24000088 	.word	0x24000088
 80047ac:	053e2d63 	.word	0x053e2d63
 80047b0:	c7520000 	.word	0xc7520000
 80047b4:	cfb80000 	.word	0xcfb80000

080047b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff f9b7 	bl	8003b38 <LL_ADC_IsEnabled>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d16e      	bne.n	80048ae <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	4b38      	ldr	r3, [pc, #224]	; (80048b8 <ADC_Enable+0x100>)
 80047d8:	4013      	ands	r3, r2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00d      	beq.n	80047fa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e2:	f043 0210 	orr.w	r2, r3, #16
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ee:	f043 0201 	orr.w	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e05a      	b.n	80048b0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff f972 	bl	8003ae8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004804:	f7fe ffbc 	bl	8003780 <HAL_GetTick>
 8004808:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a2b      	ldr	r2, [pc, #172]	; (80048bc <ADC_Enable+0x104>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d004      	beq.n	800481e <ADC_Enable+0x66>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a29      	ldr	r2, [pc, #164]	; (80048c0 <ADC_Enable+0x108>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d101      	bne.n	8004822 <ADC_Enable+0x6a>
 800481e:	4b29      	ldr	r3, [pc, #164]	; (80048c4 <ADC_Enable+0x10c>)
 8004820:	e000      	b.n	8004824 <ADC_Enable+0x6c>
 8004822:	4b29      	ldr	r3, [pc, #164]	; (80048c8 <ADC_Enable+0x110>)
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff f903 	bl	8003a30 <LL_ADC_GetMultimode>
 800482a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a23      	ldr	r2, [pc, #140]	; (80048c0 <ADC_Enable+0x108>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d002      	beq.n	800483c <ADC_Enable+0x84>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	e000      	b.n	800483e <ADC_Enable+0x86>
 800483c:	4b1f      	ldr	r3, [pc, #124]	; (80048bc <ADC_Enable+0x104>)
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	4293      	cmp	r3, r2
 8004844:	d02c      	beq.n	80048a0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d130      	bne.n	80048ae <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800484c:	e028      	b.n	80048a0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff f970 	bl	8003b38 <LL_ADC_IsEnabled>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d104      	bne.n	8004868 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff f940 	bl	8003ae8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004868:	f7fe ff8a 	bl	8003780 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d914      	bls.n	80048a0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b01      	cmp	r3, #1
 8004882:	d00d      	beq.n	80048a0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004888:	f043 0210 	orr.w	r2, r3, #16
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004894:	f043 0201 	orr.w	r2, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e007      	b.n	80048b0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d1cf      	bne.n	800484e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	8000003f 	.word	0x8000003f
 80048bc:	40022000 	.word	0x40022000
 80048c0:	40022100 	.word	0x40022100
 80048c4:	40022300 	.word	0x40022300
 80048c8:	58026300 	.word	0x58026300

080048cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff f940 	bl	8003b5e <LL_ADC_IsDisableOngoing>
 80048de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff f927 	bl	8003b38 <LL_ADC_IsEnabled>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d047      	beq.n	8004980 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d144      	bne.n	8004980 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 030d 	and.w	r3, r3, #13
 8004900:	2b01      	cmp	r3, #1
 8004902:	d10c      	bne.n	800491e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff f901 	bl	8003b10 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2203      	movs	r2, #3
 8004914:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004916:	f7fe ff33 	bl	8003780 <HAL_GetTick>
 800491a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800491c:	e029      	b.n	8004972 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004922:	f043 0210 	orr.w	r2, r3, #16
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492e:	f043 0201 	orr.w	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e023      	b.n	8004982 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800493a:	f7fe ff21 	bl	8003780 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d914      	bls.n	8004972 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00d      	beq.n	8004972 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	f043 0210 	orr.w	r2, r3, #16
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004966:	f043 0201 	orr.w	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e007      	b.n	8004982 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1dc      	bne.n	800493a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d14b      	bne.n	8004a3c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d021      	beq.n	8004a02 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fe ff92 	bl	80038ec <LL_ADC_REG_IsTriggerSourceSWStart>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d032      	beq.n	8004a34 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d12b      	bne.n	8004a34 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d11f      	bne.n	8004a34 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f8:	f043 0201 	orr.w	r2, r3, #1
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54
 8004a00:	e018      	b.n	8004a34 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0303 	and.w	r3, r3, #3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d111      	bne.n	8004a34 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	f043 0201 	orr.w	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7ff fb45 	bl	80040c4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004a3a:	e00e      	b.n	8004a5a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f7ff fb4f 	bl	80040ec <HAL_ADC_ErrorCallback>
}
 8004a4e:	e004      	b.n	8004a5a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	4798      	blx	r3
}
 8004a5a:	bf00      	nop
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f7ff fb31 	bl	80040d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a76:	bf00      	nop
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9c:	f043 0204 	orr.w	r2, r3, #4
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f7ff fb21 	bl	80040ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004aaa:	bf00      	nop
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a7a      	ldr	r2, [pc, #488]	; (8004cac <ADC_ConfigureBoostMode+0x1f8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d004      	beq.n	8004ad0 <ADC_ConfigureBoostMode+0x1c>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a79      	ldr	r2, [pc, #484]	; (8004cb0 <ADC_ConfigureBoostMode+0x1fc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d109      	bne.n	8004ae4 <ADC_ConfigureBoostMode+0x30>
 8004ad0:	4b78      	ldr	r3, [pc, #480]	; (8004cb4 <ADC_ConfigureBoostMode+0x200>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bf14      	ite	ne
 8004adc:	2301      	movne	r3, #1
 8004ade:	2300      	moveq	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	e008      	b.n	8004af6 <ADC_ConfigureBoostMode+0x42>
 8004ae4:	4b74      	ldr	r3, [pc, #464]	; (8004cb8 <ADC_ConfigureBoostMode+0x204>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	bf14      	ite	ne
 8004af0:	2301      	movne	r3, #1
 8004af2:	2300      	moveq	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01c      	beq.n	8004b34 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004afa:	f005 fd57 	bl	800a5ac <HAL_RCC_GetHCLKFreq>
 8004afe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b08:	d010      	beq.n	8004b2c <ADC_ConfigureBoostMode+0x78>
 8004b0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b0e:	d873      	bhi.n	8004bf8 <ADC_ConfigureBoostMode+0x144>
 8004b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b14:	d002      	beq.n	8004b1c <ADC_ConfigureBoostMode+0x68>
 8004b16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b1a:	d16d      	bne.n	8004bf8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	0c1b      	lsrs	r3, r3, #16
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b28:	60fb      	str	r3, [r7, #12]
        break;
 8004b2a:	e068      	b.n	8004bfe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	089b      	lsrs	r3, r3, #2
 8004b30:	60fb      	str	r3, [r7, #12]
        break;
 8004b32:	e064      	b.n	8004bfe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004b34:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004b38:	f04f 0100 	mov.w	r1, #0
 8004b3c:	f006 ffde 	bl	800bafc <HAL_RCCEx_GetPeriphCLKFreq>
 8004b40:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004b4a:	d051      	beq.n	8004bf0 <ADC_ConfigureBoostMode+0x13c>
 8004b4c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004b50:	d854      	bhi.n	8004bfc <ADC_ConfigureBoostMode+0x148>
 8004b52:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004b56:	d047      	beq.n	8004be8 <ADC_ConfigureBoostMode+0x134>
 8004b58:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004b5c:	d84e      	bhi.n	8004bfc <ADC_ConfigureBoostMode+0x148>
 8004b5e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004b62:	d03d      	beq.n	8004be0 <ADC_ConfigureBoostMode+0x12c>
 8004b64:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004b68:	d848      	bhi.n	8004bfc <ADC_ConfigureBoostMode+0x148>
 8004b6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b6e:	d033      	beq.n	8004bd8 <ADC_ConfigureBoostMode+0x124>
 8004b70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b74:	d842      	bhi.n	8004bfc <ADC_ConfigureBoostMode+0x148>
 8004b76:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004b7a:	d029      	beq.n	8004bd0 <ADC_ConfigureBoostMode+0x11c>
 8004b7c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004b80:	d83c      	bhi.n	8004bfc <ADC_ConfigureBoostMode+0x148>
 8004b82:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004b86:	d01a      	beq.n	8004bbe <ADC_ConfigureBoostMode+0x10a>
 8004b88:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004b8c:	d836      	bhi.n	8004bfc <ADC_ConfigureBoostMode+0x148>
 8004b8e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004b92:	d014      	beq.n	8004bbe <ADC_ConfigureBoostMode+0x10a>
 8004b94:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004b98:	d830      	bhi.n	8004bfc <ADC_ConfigureBoostMode+0x148>
 8004b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b9e:	d00e      	beq.n	8004bbe <ADC_ConfigureBoostMode+0x10a>
 8004ba0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ba4:	d82a      	bhi.n	8004bfc <ADC_ConfigureBoostMode+0x148>
 8004ba6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004baa:	d008      	beq.n	8004bbe <ADC_ConfigureBoostMode+0x10a>
 8004bac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004bb0:	d824      	bhi.n	8004bfc <ADC_ConfigureBoostMode+0x148>
 8004bb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bb6:	d002      	beq.n	8004bbe <ADC_ConfigureBoostMode+0x10a>
 8004bb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bbc:	d11e      	bne.n	8004bfc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	0c9b      	lsrs	r3, r3, #18
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	60fb      	str	r3, [r7, #12]
        break;
 8004bce:	e016      	b.n	8004bfe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	091b      	lsrs	r3, r3, #4
 8004bd4:	60fb      	str	r3, [r7, #12]
        break;
 8004bd6:	e012      	b.n	8004bfe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	60fb      	str	r3, [r7, #12]
        break;
 8004bde:	e00e      	b.n	8004bfe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	099b      	lsrs	r3, r3, #6
 8004be4:	60fb      	str	r3, [r7, #12]
        break;
 8004be6:	e00a      	b.n	8004bfe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	09db      	lsrs	r3, r3, #7
 8004bec:	60fb      	str	r3, [r7, #12]
        break;
 8004bee:	e006      	b.n	8004bfe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	60fb      	str	r3, [r7, #12]
        break;
 8004bf6:	e002      	b.n	8004bfe <ADC_ConfigureBoostMode+0x14a>
        break;
 8004bf8:	bf00      	nop
 8004bfa:	e000      	b.n	8004bfe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004bfc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004bfe:	f7fe fdcb 	bl	8003798 <HAL_GetREVID>
 8004c02:	4603      	mov	r3, r0
 8004c04:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d815      	bhi.n	8004c38 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4a2b      	ldr	r2, [pc, #172]	; (8004cbc <ADC_ConfigureBoostMode+0x208>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d908      	bls.n	8004c26 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c22:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004c24:	e03e      	b.n	8004ca4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c34:	609a      	str	r2, [r3, #8]
}
 8004c36:	e035      	b.n	8004ca4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a1f      	ldr	r2, [pc, #124]	; (8004cc0 <ADC_ConfigureBoostMode+0x20c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d808      	bhi.n	8004c58 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c54:	609a      	str	r2, [r3, #8]
}
 8004c56:	e025      	b.n	8004ca4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4a1a      	ldr	r2, [pc, #104]	; (8004cc4 <ADC_ConfigureBoostMode+0x210>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d80a      	bhi.n	8004c76 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c72:	609a      	str	r2, [r3, #8]
}
 8004c74:	e016      	b.n	8004ca4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4a13      	ldr	r2, [pc, #76]	; (8004cc8 <ADC_ConfigureBoostMode+0x214>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d80a      	bhi.n	8004c94 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c90:	609a      	str	r2, [r3, #8]
}
 8004c92:	e007      	b.n	8004ca4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004ca2:	609a      	str	r2, [r3, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40022000 	.word	0x40022000
 8004cb0:	40022100 	.word	0x40022100
 8004cb4:	40022300 	.word	0x40022300
 8004cb8:	58026300 	.word	0x58026300
 8004cbc:	01312d00 	.word	0x01312d00
 8004cc0:	005f5e10 	.word	0x005f5e10
 8004cc4:	00bebc20 	.word	0x00bebc20
 8004cc8:	017d7840 	.word	0x017d7840

08004ccc <LL_ADC_IsEnabled>:
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <LL_ADC_IsEnabled+0x18>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <LL_ADC_IsEnabled+0x1a>
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <LL_ADC_StartCalibration>:
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689a      	ldr	r2, [r3, #8]
 8004d04:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <LL_ADC_StartCalibration+0x38>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d14:	430a      	orrs	r2, r1
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	609a      	str	r2, [r3, #8]
}
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	3ffeffc0 	.word	0x3ffeffc0

08004d30 <LL_ADC_IsCalibrationOnGoing>:
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d44:	d101      	bne.n	8004d4a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <LL_ADC_REG_IsConversionOngoing>:
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d101      	bne.n	8004d70 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
	...

08004d80 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_ADCEx_Calibration_Start+0x1e>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e04c      	b.n	8004e38 <HAL_ADCEx_Calibration_Start+0xb8>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f7ff fd90 	bl	80048cc <ADC_Disable>
 8004dac:	4603      	mov	r3, r0
 8004dae:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004db0:	7dfb      	ldrb	r3, [r7, #23]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d135      	bne.n	8004e22 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004dba:	4b21      	ldr	r3, [pc, #132]	; (8004e40 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	f043 0202 	orr.w	r2, r3, #2
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff ff90 	bl	8004cf4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004dd4:	e014      	b.n	8004e00 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	4a19      	ldr	r2, [pc, #100]	; (8004e44 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d30d      	bcc.n	8004e00 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de8:	f023 0312 	bic.w	r3, r3, #18
 8004dec:	f043 0210 	orr.w	r2, r3, #16
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e01b      	b.n	8004e38 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ff93 	bl	8004d30 <LL_ADC_IsCalibrationOnGoing>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e2      	bne.n	8004dd6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e14:	f023 0303 	bic.w	r3, r3, #3
 8004e18:	f043 0201 	orr.w	r2, r3, #1
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	655a      	str	r2, [r3, #84]	; 0x54
 8004e20:	e005      	b.n	8004e2e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e26:	f043 0210 	orr.w	r2, r3, #16
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	ffffeefd 	.word	0xffffeefd
 8004e44:	25c3f800 	.word	0x25c3f800

08004e48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004e48:	b590      	push	{r4, r7, lr}
 8004e4a:	b09f      	sub	sp, #124	; 0x7c
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e0be      	b.n	8004fe4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a5c      	ldr	r2, [pc, #368]	; (8004fec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d102      	bne.n	8004e86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e80:	4b5b      	ldr	r3, [pc, #364]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e82:	60bb      	str	r3, [r7, #8]
 8004e84:	e001      	b.n	8004e8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004e86:	2300      	movs	r3, #0
 8004e88:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10b      	bne.n	8004ea8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e94:	f043 0220 	orr.w	r2, r3, #32
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e09d      	b.n	8004fe4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff ff54 	bl	8004d58 <LL_ADC_REG_IsConversionOngoing>
 8004eb0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff ff4e 	bl	8004d58 <LL_ADC_REG_IsConversionOngoing>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d17f      	bne.n	8004fc2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d17c      	bne.n	8004fc2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a47      	ldr	r2, [pc, #284]	; (8004fec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d004      	beq.n	8004edc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a46      	ldr	r2, [pc, #280]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d101      	bne.n	8004ee0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004edc:	4b45      	ldr	r3, [pc, #276]	; (8004ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ede:	e000      	b.n	8004ee2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004ee0:	4b45      	ldr	r3, [pc, #276]	; (8004ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ee2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d039      	beq.n	8004f60 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a3a      	ldr	r2, [pc, #232]	; (8004fec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a38      	ldr	r2, [pc, #224]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d10e      	bne.n	8004f30 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004f12:	4836      	ldr	r0, [pc, #216]	; (8004fec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f14:	f7ff feda 	bl	8004ccc <LL_ADC_IsEnabled>
 8004f18:	4604      	mov	r4, r0
 8004f1a:	4835      	ldr	r0, [pc, #212]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f1c:	f7ff fed6 	bl	8004ccc <LL_ADC_IsEnabled>
 8004f20:	4603      	mov	r3, r0
 8004f22:	4323      	orrs	r3, r4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bf0c      	ite	eq
 8004f28:	2301      	moveq	r3, #1
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	e008      	b.n	8004f42 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004f30:	4832      	ldr	r0, [pc, #200]	; (8004ffc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004f32:	f7ff fecb 	bl	8004ccc <LL_ADC_IsEnabled>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	bf0c      	ite	eq
 8004f3c:	2301      	moveq	r3, #1
 8004f3e:	2300      	movne	r3, #0
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d047      	beq.n	8004fd6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	4b2d      	ldr	r3, [pc, #180]	; (8005000 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	6811      	ldr	r1, [r2, #0]
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	6892      	ldr	r2, [r2, #8]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f5c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f5e:	e03a      	b.n	8004fd6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a1e      	ldr	r2, [pc, #120]	; (8004fec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d004      	beq.n	8004f80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d10e      	bne.n	8004f9e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004f80:	481a      	ldr	r0, [pc, #104]	; (8004fec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004f82:	f7ff fea3 	bl	8004ccc <LL_ADC_IsEnabled>
 8004f86:	4604      	mov	r4, r0
 8004f88:	4819      	ldr	r0, [pc, #100]	; (8004ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004f8a:	f7ff fe9f 	bl	8004ccc <LL_ADC_IsEnabled>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	4323      	orrs	r3, r4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	bf0c      	ite	eq
 8004f96:	2301      	moveq	r3, #1
 8004f98:	2300      	movne	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	e008      	b.n	8004fb0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004f9e:	4817      	ldr	r0, [pc, #92]	; (8004ffc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004fa0:	f7ff fe94 	bl	8004ccc <LL_ADC_IsEnabled>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	bf0c      	ite	eq
 8004faa:	2301      	moveq	r3, #1
 8004fac:	2300      	movne	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d010      	beq.n	8004fd6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004fba:	4013      	ands	r3, r2
 8004fbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fbe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fc0:	e009      	b.n	8004fd6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc6:	f043 0220 	orr.w	r2, r3, #32
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004fd4:	e000      	b.n	8004fd8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fd6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004fe0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	377c      	adds	r7, #124	; 0x7c
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd90      	pop	{r4, r7, pc}
 8004fec:	40022000 	.word	0x40022000
 8004ff0:	40022100 	.word	0x40022100
 8004ff4:	40022300 	.word	0x40022300
 8004ff8:	58026300 	.word	0x58026300
 8004ffc:	58026000 	.word	0x58026000
 8005000:	fffff0e0 	.word	0xfffff0e0

08005004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005014:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <__NVIC_SetPriorityGrouping+0x40>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005020:	4013      	ands	r3, r2
 8005022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800502c:	4b06      	ldr	r3, [pc, #24]	; (8005048 <__NVIC_SetPriorityGrouping+0x44>)
 800502e:	4313      	orrs	r3, r2
 8005030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005032:	4a04      	ldr	r2, [pc, #16]	; (8005044 <__NVIC_SetPriorityGrouping+0x40>)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	60d3      	str	r3, [r2, #12]
}
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	e000ed00 	.word	0xe000ed00
 8005048:	05fa0000 	.word	0x05fa0000

0800504c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005050:	4b04      	ldr	r3, [pc, #16]	; (8005064 <__NVIC_GetPriorityGrouping+0x18>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	0a1b      	lsrs	r3, r3, #8
 8005056:	f003 0307 	and.w	r3, r3, #7
}
 800505a:	4618      	mov	r0, r3
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	e000ed00 	.word	0xe000ed00

08005068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005076:	2b00      	cmp	r3, #0
 8005078:	db0b      	blt.n	8005092 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	f003 021f 	and.w	r2, r3, #31
 8005080:	4907      	ldr	r1, [pc, #28]	; (80050a0 <__NVIC_EnableIRQ+0x38>)
 8005082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	2001      	movs	r0, #1
 800508a:	fa00 f202 	lsl.w	r2, r0, r2
 800508e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	e000e100 	.word	0xe000e100

080050a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	4603      	mov	r3, r0
 80050ac:	6039      	str	r1, [r7, #0]
 80050ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80050b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	db0a      	blt.n	80050ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	490c      	ldr	r1, [pc, #48]	; (80050f0 <__NVIC_SetPriority+0x4c>)
 80050be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050c2:	0112      	lsls	r2, r2, #4
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	440b      	add	r3, r1
 80050c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050cc:	e00a      	b.n	80050e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	4908      	ldr	r1, [pc, #32]	; (80050f4 <__NVIC_SetPriority+0x50>)
 80050d4:	88fb      	ldrh	r3, [r7, #6]
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	3b04      	subs	r3, #4
 80050dc:	0112      	lsls	r2, r2, #4
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	440b      	add	r3, r1
 80050e2:	761a      	strb	r2, [r3, #24]
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	e000e100 	.word	0xe000e100
 80050f4:	e000ed00 	.word	0xe000ed00

080050f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b089      	sub	sp, #36	; 0x24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f1c3 0307 	rsb	r3, r3, #7
 8005112:	2b04      	cmp	r3, #4
 8005114:	bf28      	it	cs
 8005116:	2304      	movcs	r3, #4
 8005118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	3304      	adds	r3, #4
 800511e:	2b06      	cmp	r3, #6
 8005120:	d902      	bls.n	8005128 <NVIC_EncodePriority+0x30>
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	3b03      	subs	r3, #3
 8005126:	e000      	b.n	800512a <NVIC_EncodePriority+0x32>
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800512c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	43da      	mvns	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	401a      	ands	r2, r3
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005140:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	fa01 f303 	lsl.w	r3, r1, r3
 800514a:	43d9      	mvns	r1, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005150:	4313      	orrs	r3, r2
         );
}
 8005152:	4618      	mov	r0, r3
 8005154:	3724      	adds	r7, #36	; 0x24
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b082      	sub	sp, #8
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7ff ff4c 	bl	8005004 <__NVIC_SetPriorityGrouping>
}
 800516c:	bf00      	nop
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005182:	f7ff ff63 	bl	800504c <__NVIC_GetPriorityGrouping>
 8005186:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	6978      	ldr	r0, [r7, #20]
 800518e:	f7ff ffb3 	bl	80050f8 <NVIC_EncodePriority>
 8005192:	4602      	mov	r2, r0
 8005194:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005198:	4611      	mov	r1, r2
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff ff82 	bl	80050a4 <__NVIC_SetPriority>
}
 80051a0:	bf00      	nop
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff ff56 	bl	8005068 <__NVIC_EnableIRQ>
}
 80051bc:	bf00      	nop
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e014      	b.n	8005200 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	791b      	ldrb	r3, [r3, #4]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d105      	bne.n	80051ec <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fd fcdc 	bl	8002ba4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e046      	b.n	80052aa <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	795b      	ldrb	r3, [r3, #5]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d101      	bne.n	8005228 <HAL_DAC_Start+0x20>
 8005224:	2302      	movs	r3, #2
 8005226:	e040      	b.n	80052aa <HAL_DAC_Start+0xa2>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6819      	ldr	r1, [r3, #0]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	f003 0310 	and.w	r3, r3, #16
 8005240:	2201      	movs	r2, #1
 8005242:	409a      	lsls	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10f      	bne.n	8005272 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800525c:	2b02      	cmp	r3, #2
 800525e:	d11d      	bne.n	800529c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	605a      	str	r2, [r3, #4]
 8005270:	e014      	b.n	800529c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2102      	movs	r1, #2
 8005284:	fa01 f303 	lsl.w	r3, r1, r3
 8005288:	429a      	cmp	r2, r3
 800528a:	d107      	bne.n	800529c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0202 	orr.w	r2, r2, #2
 800529a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0a2      	b.n	8005416 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	795b      	ldrb	r3, [r3, #5]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d101      	bne.n	80052dc <HAL_DAC_Start_DMA+0x24>
 80052d8:	2302      	movs	r3, #2
 80052da:	e09c      	b.n	8005416 <HAL_DAC_Start_DMA+0x15e>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2201      	movs	r2, #1
 80052e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2202      	movs	r2, #2
 80052e6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d129      	bne.n	8005342 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	4a4b      	ldr	r2, [pc, #300]	; (8005420 <HAL_DAC_Start_DMA+0x168>)
 80052f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	4a4a      	ldr	r2, [pc, #296]	; (8005424 <HAL_DAC_Start_DMA+0x16c>)
 80052fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	4a49      	ldr	r2, [pc, #292]	; (8005428 <HAL_DAC_Start_DMA+0x170>)
 8005304:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005314:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <HAL_DAC_Start_DMA+0x6c>
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	2b04      	cmp	r3, #4
 8005320:	d005      	beq.n	800532e <HAL_DAC_Start_DMA+0x76>
 8005322:	e009      	b.n	8005338 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3308      	adds	r3, #8
 800532a:	613b      	str	r3, [r7, #16]
        break;
 800532c:	e033      	b.n	8005396 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	330c      	adds	r3, #12
 8005334:	613b      	str	r3, [r7, #16]
        break;
 8005336:	e02e      	b.n	8005396 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3310      	adds	r3, #16
 800533e:	613b      	str	r3, [r7, #16]
        break;
 8005340:	e029      	b.n	8005396 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	4a39      	ldr	r2, [pc, #228]	; (800542c <HAL_DAC_Start_DMA+0x174>)
 8005348:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	4a38      	ldr	r2, [pc, #224]	; (8005430 <HAL_DAC_Start_DMA+0x178>)
 8005350:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	4a37      	ldr	r2, [pc, #220]	; (8005434 <HAL_DAC_Start_DMA+0x17c>)
 8005358:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005368:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <HAL_DAC_Start_DMA+0xc0>
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	2b04      	cmp	r3, #4
 8005374:	d005      	beq.n	8005382 <HAL_DAC_Start_DMA+0xca>
 8005376:	e009      	b.n	800538c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3314      	adds	r3, #20
 800537e:	613b      	str	r3, [r7, #16]
        break;
 8005380:	e009      	b.n	8005396 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3318      	adds	r3, #24
 8005388:	613b      	str	r3, [r7, #16]
        break;
 800538a:	e004      	b.n	8005396 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	331c      	adds	r3, #28
 8005392:	613b      	str	r3, [r7, #16]
        break;
 8005394:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d111      	bne.n	80053c0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6898      	ldr	r0, [r3, #8]
 80053b0:	6879      	ldr	r1, [r7, #4]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	f000 fe67 	bl	8006088 <HAL_DMA_Start_IT>
 80053ba:	4603      	mov	r3, r0
 80053bc:	75fb      	strb	r3, [r7, #23]
 80053be:	e010      	b.n	80053e2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80053ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	68d8      	ldr	r0, [r3, #12]
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	f000 fe55 	bl	8006088 <HAL_DMA_Start_IT>
 80053de:	4603      	mov	r3, r0
 80053e0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80053e8:	7dfb      	ldrb	r3, [r7, #23]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10c      	bne.n	8005408 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6819      	ldr	r1, [r3, #0]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2201      	movs	r2, #1
 80053fc:	409a      	lsls	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	e005      	b.n	8005414 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	f043 0204 	orr.w	r2, r3, #4
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005414:	7dfb      	ldrb	r3, [r7, #23]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	080058a9 	.word	0x080058a9
 8005424:	080058cb 	.word	0x080058cb
 8005428:	080058e7 	.word	0x080058e7
 800542c:	08005965 	.word	0x08005965
 8005430:	08005987 	.word	0x08005987
 8005434:	080059a3 	.word	0x080059a3

08005438 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e03e      	b.n	80054ca <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6819      	ldr	r1, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	43da      	mvns	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	400a      	ands	r2, r1
 8005468:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6819      	ldr	r1, [r3, #0]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2201      	movs	r2, #1
 8005478:	fa02 f303 	lsl.w	r3, r2, r3
 800547c:	43da      	mvns	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	400a      	ands	r2, r1
 8005484:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10d      	bne.n	80054a8 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	4618      	mov	r0, r3
 8005492:	f001 f863 	bl	800655c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	e00c      	b.n	80054c2 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f001 f855 	bl	800655c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80054c0:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b084      	sub	sp, #16
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01d      	beq.n	8005530 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d018      	beq.n	8005530 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2204      	movs	r2, #4
 8005502:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f043 0201 	orr.w	r2, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005518:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005528:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f86f 	bl	800560e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d01d      	beq.n	8005576 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d018      	beq.n	8005576 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2204      	movs	r2, #4
 8005548:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f043 0202 	orr.w	r2, r3, #2
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800555e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800556e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f9ed 	bl	8005950 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005576:	bf00      	nop
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800557e:	b480      	push	{r7}
 8005580:	b087      	sub	sp, #28
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
 800558a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e015      	b.n	80055c6 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d105      	bne.n	80055b2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4413      	add	r3, r2
 80055ac:	3308      	adds	r3, #8
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	e004      	b.n	80055bc <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4413      	add	r3, r2
 80055b8:	3314      	adds	r3, #20
 80055ba:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	461a      	mov	r2, r3
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
	...

08005624 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08a      	sub	sp, #40	; 0x28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <HAL_DAC_ConfigChannel+0x1e>
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e12a      	b.n	800589c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	795b      	ldrb	r3, [r3, #5]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_DAC_ConfigChannel+0x2e>
 800564e:	2302      	movs	r3, #2
 8005650:	e124      	b.n	800589c <HAL_DAC_ConfigChannel+0x278>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2202      	movs	r2, #2
 800565c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b04      	cmp	r3, #4
 8005664:	d17a      	bne.n	800575c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005666:	f7fe f88b 	bl	8003780 <HAL_GetTick>
 800566a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d13d      	bne.n	80056ee <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005672:	e018      	b.n	80056a6 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005674:	f7fe f884 	bl	8003780 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b01      	cmp	r3, #1
 8005680:	d911      	bls.n	80056a6 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005688:	4b86      	ldr	r3, [pc, #536]	; (80058a4 <HAL_DAC_ConfigChannel+0x280>)
 800568a:	4013      	ands	r3, r2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	f043 0208 	orr.w	r2, r3, #8
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2203      	movs	r2, #3
 80056a0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e0fa      	b.n	800589c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056ac:	4b7d      	ldr	r3, [pc, #500]	; (80058a4 <HAL_DAC_ConfigChannel+0x280>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1df      	bne.n	8005674 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	6992      	ldr	r2, [r2, #24]
 80056bc:	641a      	str	r2, [r3, #64]	; 0x40
 80056be:	e020      	b.n	8005702 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80056c0:	f7fe f85e 	bl	8003780 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d90f      	bls.n	80056ee <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	da0a      	bge.n	80056ee <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	f043 0208 	orr.w	r2, r3, #8
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2203      	movs	r2, #3
 80056e8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e0d6      	b.n	800589c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	dbe3      	blt.n	80056c0 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	6992      	ldr	r2, [r2, #24]
 8005700:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005712:	fa01 f303 	lsl.w	r3, r1, r3
 8005716:	43db      	mvns	r3, r3
 8005718:	ea02 0103 	and.w	r1, r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	69da      	ldr	r2, [r3, #28]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f003 0310 	and.w	r3, r3, #16
 8005726:	409a      	lsls	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	21ff      	movs	r1, #255	; 0xff
 800573e:	fa01 f303 	lsl.w	r3, r1, r3
 8005742:	43db      	mvns	r3, r3
 8005744:	ea02 0103 	and.w	r1, r2, r3
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	6a1a      	ldr	r2, [r3, #32]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	409a      	lsls	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d11d      	bne.n	80057a0 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	221f      	movs	r2, #31
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	43db      	mvns	r3, r3
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	4013      	ands	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4313      	orrs	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f003 0310 	and.w	r3, r3, #16
 80057ae:	2207      	movs	r2, #7
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	43db      	mvns	r3, r3
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	4013      	ands	r3, r2
 80057ba:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d102      	bne.n	80057ca <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80057c4:	2300      	movs	r3, #0
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
 80057c8:	e00f      	b.n	80057ea <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d102      	bne.n	80057d8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80057d2:	2301      	movs	r3, #1
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
 80057d6:	e008      	b.n	80057ea <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d102      	bne.n	80057e6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80057e0:	2301      	movs	r3, #1
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
 80057e4:	e001      	b.n	80057ea <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f6:	4313      	orrs	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	4313      	orrs	r3, r2
 800580a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6819      	ldr	r1, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005824:	fa02 f303 	lsl.w	r3, r2, r3
 8005828:	43da      	mvns	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	400a      	ands	r2, r1
 8005830:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	43db      	mvns	r3, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4013      	ands	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f003 0310 	and.w	r3, r3, #16
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	fa02 f303 	lsl.w	r3, r2, r3
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	4313      	orrs	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6819      	ldr	r1, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	22c0      	movs	r2, #192	; 0xc0
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	43da      	mvns	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	400a      	ands	r2, r1
 800588a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005898:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800589c:	4618      	mov	r0, r3
 800589e:	3728      	adds	r7, #40	; 0x28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	20008000 	.word	0x20008000

080058a8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f7ff fe8b 	bl	80055d2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	711a      	strb	r2, [r3, #4]
}
 80058c2:	bf00      	nop
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f7ff fe84 	bl	80055e6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80058de:	bf00      	nop
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	f043 0204 	orr.w	r2, r3, #4
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f7ff fe7a 	bl	80055fa <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	711a      	strb	r2, [r3, #4]
}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f7ff ffce 	bl	8005914 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2201      	movs	r2, #1
 800597c:	711a      	strb	r2, [r3, #4]
}
 800597e:	bf00      	nop
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f7ff ffc7 	bl	8005928 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800599a:	bf00      	nop
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f043 0204 	orr.w	r2, r3, #4
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f7ff ffbd 	bl	800593c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	711a      	strb	r2, [r3, #4]
}
 80059c8:	bf00      	nop
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80059d8:	f7fd fed2 	bl	8003780 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e316      	b.n	8006016 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a66      	ldr	r2, [pc, #408]	; (8005b88 <HAL_DMA_Init+0x1b8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d04a      	beq.n	8005a88 <HAL_DMA_Init+0xb8>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a65      	ldr	r2, [pc, #404]	; (8005b8c <HAL_DMA_Init+0x1bc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d045      	beq.n	8005a88 <HAL_DMA_Init+0xb8>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a63      	ldr	r2, [pc, #396]	; (8005b90 <HAL_DMA_Init+0x1c0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d040      	beq.n	8005a88 <HAL_DMA_Init+0xb8>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a62      	ldr	r2, [pc, #392]	; (8005b94 <HAL_DMA_Init+0x1c4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d03b      	beq.n	8005a88 <HAL_DMA_Init+0xb8>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a60      	ldr	r2, [pc, #384]	; (8005b98 <HAL_DMA_Init+0x1c8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d036      	beq.n	8005a88 <HAL_DMA_Init+0xb8>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a5f      	ldr	r2, [pc, #380]	; (8005b9c <HAL_DMA_Init+0x1cc>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d031      	beq.n	8005a88 <HAL_DMA_Init+0xb8>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a5d      	ldr	r2, [pc, #372]	; (8005ba0 <HAL_DMA_Init+0x1d0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d02c      	beq.n	8005a88 <HAL_DMA_Init+0xb8>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a5c      	ldr	r2, [pc, #368]	; (8005ba4 <HAL_DMA_Init+0x1d4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d027      	beq.n	8005a88 <HAL_DMA_Init+0xb8>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a5a      	ldr	r2, [pc, #360]	; (8005ba8 <HAL_DMA_Init+0x1d8>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d022      	beq.n	8005a88 <HAL_DMA_Init+0xb8>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a59      	ldr	r2, [pc, #356]	; (8005bac <HAL_DMA_Init+0x1dc>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d01d      	beq.n	8005a88 <HAL_DMA_Init+0xb8>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a57      	ldr	r2, [pc, #348]	; (8005bb0 <HAL_DMA_Init+0x1e0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d018      	beq.n	8005a88 <HAL_DMA_Init+0xb8>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a56      	ldr	r2, [pc, #344]	; (8005bb4 <HAL_DMA_Init+0x1e4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d013      	beq.n	8005a88 <HAL_DMA_Init+0xb8>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a54      	ldr	r2, [pc, #336]	; (8005bb8 <HAL_DMA_Init+0x1e8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00e      	beq.n	8005a88 <HAL_DMA_Init+0xb8>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a53      	ldr	r2, [pc, #332]	; (8005bbc <HAL_DMA_Init+0x1ec>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d009      	beq.n	8005a88 <HAL_DMA_Init+0xb8>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a51      	ldr	r2, [pc, #324]	; (8005bc0 <HAL_DMA_Init+0x1f0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d004      	beq.n	8005a88 <HAL_DMA_Init+0xb8>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a50      	ldr	r2, [pc, #320]	; (8005bc4 <HAL_DMA_Init+0x1f4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d101      	bne.n	8005a8c <HAL_DMA_Init+0xbc>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e000      	b.n	8005a8e <HAL_DMA_Init+0xbe>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 813b 	beq.w	8005d0a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a37      	ldr	r2, [pc, #220]	; (8005b88 <HAL_DMA_Init+0x1b8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d04a      	beq.n	8005b44 <HAL_DMA_Init+0x174>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a36      	ldr	r2, [pc, #216]	; (8005b8c <HAL_DMA_Init+0x1bc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d045      	beq.n	8005b44 <HAL_DMA_Init+0x174>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a34      	ldr	r2, [pc, #208]	; (8005b90 <HAL_DMA_Init+0x1c0>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d040      	beq.n	8005b44 <HAL_DMA_Init+0x174>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a33      	ldr	r2, [pc, #204]	; (8005b94 <HAL_DMA_Init+0x1c4>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d03b      	beq.n	8005b44 <HAL_DMA_Init+0x174>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a31      	ldr	r2, [pc, #196]	; (8005b98 <HAL_DMA_Init+0x1c8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d036      	beq.n	8005b44 <HAL_DMA_Init+0x174>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a30      	ldr	r2, [pc, #192]	; (8005b9c <HAL_DMA_Init+0x1cc>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d031      	beq.n	8005b44 <HAL_DMA_Init+0x174>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a2e      	ldr	r2, [pc, #184]	; (8005ba0 <HAL_DMA_Init+0x1d0>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d02c      	beq.n	8005b44 <HAL_DMA_Init+0x174>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a2d      	ldr	r2, [pc, #180]	; (8005ba4 <HAL_DMA_Init+0x1d4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d027      	beq.n	8005b44 <HAL_DMA_Init+0x174>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a2b      	ldr	r2, [pc, #172]	; (8005ba8 <HAL_DMA_Init+0x1d8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d022      	beq.n	8005b44 <HAL_DMA_Init+0x174>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a2a      	ldr	r2, [pc, #168]	; (8005bac <HAL_DMA_Init+0x1dc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d01d      	beq.n	8005b44 <HAL_DMA_Init+0x174>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a28      	ldr	r2, [pc, #160]	; (8005bb0 <HAL_DMA_Init+0x1e0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d018      	beq.n	8005b44 <HAL_DMA_Init+0x174>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a27      	ldr	r2, [pc, #156]	; (8005bb4 <HAL_DMA_Init+0x1e4>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d013      	beq.n	8005b44 <HAL_DMA_Init+0x174>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a25      	ldr	r2, [pc, #148]	; (8005bb8 <HAL_DMA_Init+0x1e8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00e      	beq.n	8005b44 <HAL_DMA_Init+0x174>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a24      	ldr	r2, [pc, #144]	; (8005bbc <HAL_DMA_Init+0x1ec>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d009      	beq.n	8005b44 <HAL_DMA_Init+0x174>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a22      	ldr	r2, [pc, #136]	; (8005bc0 <HAL_DMA_Init+0x1f0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d004      	beq.n	8005b44 <HAL_DMA_Init+0x174>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a21      	ldr	r2, [pc, #132]	; (8005bc4 <HAL_DMA_Init+0x1f4>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d108      	bne.n	8005b56 <HAL_DMA_Init+0x186>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0201 	bic.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	e007      	b.n	8005b66 <HAL_DMA_Init+0x196>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0201 	bic.w	r2, r2, #1
 8005b64:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b66:	e02f      	b.n	8005bc8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b68:	f7fd fe0a 	bl	8003780 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b05      	cmp	r3, #5
 8005b74:	d928      	bls.n	8005bc8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2203      	movs	r2, #3
 8005b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e246      	b.n	8006016 <HAL_DMA_Init+0x646>
 8005b88:	40020010 	.word	0x40020010
 8005b8c:	40020028 	.word	0x40020028
 8005b90:	40020040 	.word	0x40020040
 8005b94:	40020058 	.word	0x40020058
 8005b98:	40020070 	.word	0x40020070
 8005b9c:	40020088 	.word	0x40020088
 8005ba0:	400200a0 	.word	0x400200a0
 8005ba4:	400200b8 	.word	0x400200b8
 8005ba8:	40020410 	.word	0x40020410
 8005bac:	40020428 	.word	0x40020428
 8005bb0:	40020440 	.word	0x40020440
 8005bb4:	40020458 	.word	0x40020458
 8005bb8:	40020470 	.word	0x40020470
 8005bbc:	40020488 	.word	0x40020488
 8005bc0:	400204a0 	.word	0x400204a0
 8005bc4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1c8      	bne.n	8005b68 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4b83      	ldr	r3, [pc, #524]	; (8005df0 <HAL_DMA_Init+0x420>)
 8005be2:	4013      	ands	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005bee:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bfa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c06:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d107      	bne.n	8005c2c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c24:	4313      	orrs	r3, r2
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005c2c:	4b71      	ldr	r3, [pc, #452]	; (8005df4 <HAL_DMA_Init+0x424>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	4b71      	ldr	r3, [pc, #452]	; (8005df8 <HAL_DMA_Init+0x428>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c38:	d328      	bcc.n	8005c8c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b28      	cmp	r3, #40	; 0x28
 8005c40:	d903      	bls.n	8005c4a <HAL_DMA_Init+0x27a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b2e      	cmp	r3, #46	; 0x2e
 8005c48:	d917      	bls.n	8005c7a <HAL_DMA_Init+0x2aa>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c50:	d903      	bls.n	8005c5a <HAL_DMA_Init+0x28a>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2b42      	cmp	r3, #66	; 0x42
 8005c58:	d90f      	bls.n	8005c7a <HAL_DMA_Init+0x2aa>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2b46      	cmp	r3, #70	; 0x46
 8005c60:	d903      	bls.n	8005c6a <HAL_DMA_Init+0x29a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b48      	cmp	r3, #72	; 0x48
 8005c68:	d907      	bls.n	8005c7a <HAL_DMA_Init+0x2aa>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2b4e      	cmp	r3, #78	; 0x4e
 8005c70:	d905      	bls.n	8005c7e <HAL_DMA_Init+0x2ae>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2b52      	cmp	r3, #82	; 0x52
 8005c78:	d801      	bhi.n	8005c7e <HAL_DMA_Init+0x2ae>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <HAL_DMA_Init+0x2b0>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c8a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f023 0307 	bic.w	r3, r3, #7
 8005ca2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d117      	bne.n	8005ce6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00e      	beq.n	8005ce6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f002 fb33 	bl	8008334 <DMA_CheckFifoParam>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d008      	beq.n	8005ce6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2240      	movs	r2, #64	; 0x40
 8005cd8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e197      	b.n	8006016 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f002 fa6e 	bl	80081d0 <DMA_CalcBaseAndBitshift>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfc:	f003 031f 	and.w	r3, r3, #31
 8005d00:	223f      	movs	r2, #63	; 0x3f
 8005d02:	409a      	lsls	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	609a      	str	r2, [r3, #8]
 8005d08:	e0cd      	b.n	8005ea6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a3b      	ldr	r2, [pc, #236]	; (8005dfc <HAL_DMA_Init+0x42c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d022      	beq.n	8005d5a <HAL_DMA_Init+0x38a>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a39      	ldr	r2, [pc, #228]	; (8005e00 <HAL_DMA_Init+0x430>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d01d      	beq.n	8005d5a <HAL_DMA_Init+0x38a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a38      	ldr	r2, [pc, #224]	; (8005e04 <HAL_DMA_Init+0x434>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d018      	beq.n	8005d5a <HAL_DMA_Init+0x38a>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a36      	ldr	r2, [pc, #216]	; (8005e08 <HAL_DMA_Init+0x438>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d013      	beq.n	8005d5a <HAL_DMA_Init+0x38a>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a35      	ldr	r2, [pc, #212]	; (8005e0c <HAL_DMA_Init+0x43c>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00e      	beq.n	8005d5a <HAL_DMA_Init+0x38a>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a33      	ldr	r2, [pc, #204]	; (8005e10 <HAL_DMA_Init+0x440>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d009      	beq.n	8005d5a <HAL_DMA_Init+0x38a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a32      	ldr	r2, [pc, #200]	; (8005e14 <HAL_DMA_Init+0x444>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d004      	beq.n	8005d5a <HAL_DMA_Init+0x38a>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a30      	ldr	r2, [pc, #192]	; (8005e18 <HAL_DMA_Init+0x448>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d101      	bne.n	8005d5e <HAL_DMA_Init+0x38e>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <HAL_DMA_Init+0x390>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8097 	beq.w	8005e94 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a24      	ldr	r2, [pc, #144]	; (8005dfc <HAL_DMA_Init+0x42c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d021      	beq.n	8005db4 <HAL_DMA_Init+0x3e4>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a22      	ldr	r2, [pc, #136]	; (8005e00 <HAL_DMA_Init+0x430>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d01c      	beq.n	8005db4 <HAL_DMA_Init+0x3e4>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a21      	ldr	r2, [pc, #132]	; (8005e04 <HAL_DMA_Init+0x434>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d017      	beq.n	8005db4 <HAL_DMA_Init+0x3e4>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1f      	ldr	r2, [pc, #124]	; (8005e08 <HAL_DMA_Init+0x438>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d012      	beq.n	8005db4 <HAL_DMA_Init+0x3e4>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1e      	ldr	r2, [pc, #120]	; (8005e0c <HAL_DMA_Init+0x43c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00d      	beq.n	8005db4 <HAL_DMA_Init+0x3e4>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1c      	ldr	r2, [pc, #112]	; (8005e10 <HAL_DMA_Init+0x440>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d008      	beq.n	8005db4 <HAL_DMA_Init+0x3e4>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a1b      	ldr	r2, [pc, #108]	; (8005e14 <HAL_DMA_Init+0x444>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <HAL_DMA_Init+0x3e4>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a19      	ldr	r2, [pc, #100]	; (8005e18 <HAL_DMA_Init+0x448>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2202      	movs	r2, #2
 8005dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4b12      	ldr	r3, [pc, #72]	; (8005e1c <HAL_DMA_Init+0x44c>)
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2b40      	cmp	r3, #64	; 0x40
 8005ddc:	d020      	beq.n	8005e20 <HAL_DMA_Init+0x450>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	2b80      	cmp	r3, #128	; 0x80
 8005de4:	d102      	bne.n	8005dec <HAL_DMA_Init+0x41c>
 8005de6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005dea:	e01a      	b.n	8005e22 <HAL_DMA_Init+0x452>
 8005dec:	2300      	movs	r3, #0
 8005dee:	e018      	b.n	8005e22 <HAL_DMA_Init+0x452>
 8005df0:	fe10803f 	.word	0xfe10803f
 8005df4:	5c001000 	.word	0x5c001000
 8005df8:	ffff0000 	.word	0xffff0000
 8005dfc:	58025408 	.word	0x58025408
 8005e00:	5802541c 	.word	0x5802541c
 8005e04:	58025430 	.word	0x58025430
 8005e08:	58025444 	.word	0x58025444
 8005e0c:	58025458 	.word	0x58025458
 8005e10:	5802546c 	.word	0x5802546c
 8005e14:	58025480 	.word	0x58025480
 8005e18:	58025494 	.word	0x58025494
 8005e1c:	fffe000f 	.word	0xfffe000f
 8005e20:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	68d2      	ldr	r2, [r2, #12]
 8005e26:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005e40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005e48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005e50:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	461a      	mov	r2, r3
 8005e66:	4b6e      	ldr	r3, [pc, #440]	; (8006020 <HAL_DMA_Init+0x650>)
 8005e68:	4413      	add	r3, r2
 8005e6a:	4a6e      	ldr	r2, [pc, #440]	; (8006024 <HAL_DMA_Init+0x654>)
 8005e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e70:	091b      	lsrs	r3, r3, #4
 8005e72:	009a      	lsls	r2, r3, #2
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f002 f9a9 	bl	80081d0 <DMA_CalcBaseAndBitshift>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e86:	f003 031f 	and.w	r3, r3, #31
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	409a      	lsls	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	605a      	str	r2, [r3, #4]
 8005e92:	e008      	b.n	8005ea6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2240      	movs	r2, #64	; 0x40
 8005e98:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2203      	movs	r2, #3
 8005e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e0b7      	b.n	8006016 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a5f      	ldr	r2, [pc, #380]	; (8006028 <HAL_DMA_Init+0x658>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d072      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a5d      	ldr	r2, [pc, #372]	; (800602c <HAL_DMA_Init+0x65c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d06d      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a5c      	ldr	r2, [pc, #368]	; (8006030 <HAL_DMA_Init+0x660>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d068      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a5a      	ldr	r2, [pc, #360]	; (8006034 <HAL_DMA_Init+0x664>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d063      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a59      	ldr	r2, [pc, #356]	; (8006038 <HAL_DMA_Init+0x668>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d05e      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a57      	ldr	r2, [pc, #348]	; (800603c <HAL_DMA_Init+0x66c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d059      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a56      	ldr	r2, [pc, #344]	; (8006040 <HAL_DMA_Init+0x670>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d054      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a54      	ldr	r2, [pc, #336]	; (8006044 <HAL_DMA_Init+0x674>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d04f      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a53      	ldr	r2, [pc, #332]	; (8006048 <HAL_DMA_Init+0x678>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d04a      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a51      	ldr	r2, [pc, #324]	; (800604c <HAL_DMA_Init+0x67c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d045      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a50      	ldr	r2, [pc, #320]	; (8006050 <HAL_DMA_Init+0x680>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d040      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a4e      	ldr	r2, [pc, #312]	; (8006054 <HAL_DMA_Init+0x684>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d03b      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a4d      	ldr	r2, [pc, #308]	; (8006058 <HAL_DMA_Init+0x688>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d036      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a4b      	ldr	r2, [pc, #300]	; (800605c <HAL_DMA_Init+0x68c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d031      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a4a      	ldr	r2, [pc, #296]	; (8006060 <HAL_DMA_Init+0x690>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d02c      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a48      	ldr	r2, [pc, #288]	; (8006064 <HAL_DMA_Init+0x694>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d027      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a47      	ldr	r2, [pc, #284]	; (8006068 <HAL_DMA_Init+0x698>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d022      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a45      	ldr	r2, [pc, #276]	; (800606c <HAL_DMA_Init+0x69c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d01d      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a44      	ldr	r2, [pc, #272]	; (8006070 <HAL_DMA_Init+0x6a0>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d018      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a42      	ldr	r2, [pc, #264]	; (8006074 <HAL_DMA_Init+0x6a4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d013      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a41      	ldr	r2, [pc, #260]	; (8006078 <HAL_DMA_Init+0x6a8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00e      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a3f      	ldr	r2, [pc, #252]	; (800607c <HAL_DMA_Init+0x6ac>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d009      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a3e      	ldr	r2, [pc, #248]	; (8006080 <HAL_DMA_Init+0x6b0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d004      	beq.n	8005f96 <HAL_DMA_Init+0x5c6>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a3c      	ldr	r2, [pc, #240]	; (8006084 <HAL_DMA_Init+0x6b4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d101      	bne.n	8005f9a <HAL_DMA_Init+0x5ca>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <HAL_DMA_Init+0x5cc>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d032      	beq.n	8006006 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f002 fa43 	bl	800842c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	2b80      	cmp	r3, #128	; 0x80
 8005fac:	d102      	bne.n	8005fb4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fbc:	b2d2      	uxtb	r2, r2
 8005fbe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005fc8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d010      	beq.n	8005ff4 <HAL_DMA_Init+0x624>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d80c      	bhi.n	8005ff4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f002 fac0 	bl	8008560 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ff0:	605a      	str	r2, [r3, #4]
 8005ff2:	e008      	b.n	8006006 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	a7fdabf8 	.word	0xa7fdabf8
 8006024:	cccccccd 	.word	0xcccccccd
 8006028:	40020010 	.word	0x40020010
 800602c:	40020028 	.word	0x40020028
 8006030:	40020040 	.word	0x40020040
 8006034:	40020058 	.word	0x40020058
 8006038:	40020070 	.word	0x40020070
 800603c:	40020088 	.word	0x40020088
 8006040:	400200a0 	.word	0x400200a0
 8006044:	400200b8 	.word	0x400200b8
 8006048:	40020410 	.word	0x40020410
 800604c:	40020428 	.word	0x40020428
 8006050:	40020440 	.word	0x40020440
 8006054:	40020458 	.word	0x40020458
 8006058:	40020470 	.word	0x40020470
 800605c:	40020488 	.word	0x40020488
 8006060:	400204a0 	.word	0x400204a0
 8006064:	400204b8 	.word	0x400204b8
 8006068:	58025408 	.word	0x58025408
 800606c:	5802541c 	.word	0x5802541c
 8006070:	58025430 	.word	0x58025430
 8006074:	58025444 	.word	0x58025444
 8006078:	58025458 	.word	0x58025458
 800607c:	5802546c 	.word	0x5802546c
 8006080:	58025480 	.word	0x58025480
 8006084:	58025494 	.word	0x58025494

08006088 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e226      	b.n	80064f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d101      	bne.n	80060b2 <HAL_DMA_Start_IT+0x2a>
 80060ae:	2302      	movs	r3, #2
 80060b0:	e21f      	b.n	80064f2 <HAL_DMA_Start_IT+0x46a>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	f040 820a 	bne.w	80064dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a68      	ldr	r2, [pc, #416]	; (800627c <HAL_DMA_Start_IT+0x1f4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d04a      	beq.n	8006176 <HAL_DMA_Start_IT+0xee>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a66      	ldr	r2, [pc, #408]	; (8006280 <HAL_DMA_Start_IT+0x1f8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d045      	beq.n	8006176 <HAL_DMA_Start_IT+0xee>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a65      	ldr	r2, [pc, #404]	; (8006284 <HAL_DMA_Start_IT+0x1fc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d040      	beq.n	8006176 <HAL_DMA_Start_IT+0xee>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a63      	ldr	r2, [pc, #396]	; (8006288 <HAL_DMA_Start_IT+0x200>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d03b      	beq.n	8006176 <HAL_DMA_Start_IT+0xee>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a62      	ldr	r2, [pc, #392]	; (800628c <HAL_DMA_Start_IT+0x204>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d036      	beq.n	8006176 <HAL_DMA_Start_IT+0xee>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a60      	ldr	r2, [pc, #384]	; (8006290 <HAL_DMA_Start_IT+0x208>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d031      	beq.n	8006176 <HAL_DMA_Start_IT+0xee>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a5f      	ldr	r2, [pc, #380]	; (8006294 <HAL_DMA_Start_IT+0x20c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d02c      	beq.n	8006176 <HAL_DMA_Start_IT+0xee>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a5d      	ldr	r2, [pc, #372]	; (8006298 <HAL_DMA_Start_IT+0x210>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d027      	beq.n	8006176 <HAL_DMA_Start_IT+0xee>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a5c      	ldr	r2, [pc, #368]	; (800629c <HAL_DMA_Start_IT+0x214>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d022      	beq.n	8006176 <HAL_DMA_Start_IT+0xee>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a5a      	ldr	r2, [pc, #360]	; (80062a0 <HAL_DMA_Start_IT+0x218>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d01d      	beq.n	8006176 <HAL_DMA_Start_IT+0xee>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a59      	ldr	r2, [pc, #356]	; (80062a4 <HAL_DMA_Start_IT+0x21c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d018      	beq.n	8006176 <HAL_DMA_Start_IT+0xee>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a57      	ldr	r2, [pc, #348]	; (80062a8 <HAL_DMA_Start_IT+0x220>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d013      	beq.n	8006176 <HAL_DMA_Start_IT+0xee>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a56      	ldr	r2, [pc, #344]	; (80062ac <HAL_DMA_Start_IT+0x224>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00e      	beq.n	8006176 <HAL_DMA_Start_IT+0xee>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a54      	ldr	r2, [pc, #336]	; (80062b0 <HAL_DMA_Start_IT+0x228>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d009      	beq.n	8006176 <HAL_DMA_Start_IT+0xee>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a53      	ldr	r2, [pc, #332]	; (80062b4 <HAL_DMA_Start_IT+0x22c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d004      	beq.n	8006176 <HAL_DMA_Start_IT+0xee>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a51      	ldr	r2, [pc, #324]	; (80062b8 <HAL_DMA_Start_IT+0x230>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d108      	bne.n	8006188 <HAL_DMA_Start_IT+0x100>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0201 	bic.w	r2, r2, #1
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	e007      	b.n	8006198 <HAL_DMA_Start_IT+0x110>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0201 	bic.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f001 fe6a 	bl	8007e78 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a34      	ldr	r2, [pc, #208]	; (800627c <HAL_DMA_Start_IT+0x1f4>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d04a      	beq.n	8006244 <HAL_DMA_Start_IT+0x1bc>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a33      	ldr	r2, [pc, #204]	; (8006280 <HAL_DMA_Start_IT+0x1f8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d045      	beq.n	8006244 <HAL_DMA_Start_IT+0x1bc>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a31      	ldr	r2, [pc, #196]	; (8006284 <HAL_DMA_Start_IT+0x1fc>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d040      	beq.n	8006244 <HAL_DMA_Start_IT+0x1bc>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a30      	ldr	r2, [pc, #192]	; (8006288 <HAL_DMA_Start_IT+0x200>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d03b      	beq.n	8006244 <HAL_DMA_Start_IT+0x1bc>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a2e      	ldr	r2, [pc, #184]	; (800628c <HAL_DMA_Start_IT+0x204>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d036      	beq.n	8006244 <HAL_DMA_Start_IT+0x1bc>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a2d      	ldr	r2, [pc, #180]	; (8006290 <HAL_DMA_Start_IT+0x208>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d031      	beq.n	8006244 <HAL_DMA_Start_IT+0x1bc>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a2b      	ldr	r2, [pc, #172]	; (8006294 <HAL_DMA_Start_IT+0x20c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d02c      	beq.n	8006244 <HAL_DMA_Start_IT+0x1bc>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a2a      	ldr	r2, [pc, #168]	; (8006298 <HAL_DMA_Start_IT+0x210>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d027      	beq.n	8006244 <HAL_DMA_Start_IT+0x1bc>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a28      	ldr	r2, [pc, #160]	; (800629c <HAL_DMA_Start_IT+0x214>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d022      	beq.n	8006244 <HAL_DMA_Start_IT+0x1bc>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a27      	ldr	r2, [pc, #156]	; (80062a0 <HAL_DMA_Start_IT+0x218>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d01d      	beq.n	8006244 <HAL_DMA_Start_IT+0x1bc>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a25      	ldr	r2, [pc, #148]	; (80062a4 <HAL_DMA_Start_IT+0x21c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d018      	beq.n	8006244 <HAL_DMA_Start_IT+0x1bc>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a24      	ldr	r2, [pc, #144]	; (80062a8 <HAL_DMA_Start_IT+0x220>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d013      	beq.n	8006244 <HAL_DMA_Start_IT+0x1bc>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a22      	ldr	r2, [pc, #136]	; (80062ac <HAL_DMA_Start_IT+0x224>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00e      	beq.n	8006244 <HAL_DMA_Start_IT+0x1bc>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a21      	ldr	r2, [pc, #132]	; (80062b0 <HAL_DMA_Start_IT+0x228>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d009      	beq.n	8006244 <HAL_DMA_Start_IT+0x1bc>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1f      	ldr	r2, [pc, #124]	; (80062b4 <HAL_DMA_Start_IT+0x22c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <HAL_DMA_Start_IT+0x1bc>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1e      	ldr	r2, [pc, #120]	; (80062b8 <HAL_DMA_Start_IT+0x230>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d101      	bne.n	8006248 <HAL_DMA_Start_IT+0x1c0>
 8006244:	2301      	movs	r3, #1
 8006246:	e000      	b.n	800624a <HAL_DMA_Start_IT+0x1c2>
 8006248:	2300      	movs	r3, #0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d036      	beq.n	80062bc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f023 021e 	bic.w	r2, r3, #30
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0216 	orr.w	r2, r2, #22
 8006260:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	2b00      	cmp	r3, #0
 8006268:	d03e      	beq.n	80062e8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f042 0208 	orr.w	r2, r2, #8
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	e035      	b.n	80062e8 <HAL_DMA_Start_IT+0x260>
 800627c:	40020010 	.word	0x40020010
 8006280:	40020028 	.word	0x40020028
 8006284:	40020040 	.word	0x40020040
 8006288:	40020058 	.word	0x40020058
 800628c:	40020070 	.word	0x40020070
 8006290:	40020088 	.word	0x40020088
 8006294:	400200a0 	.word	0x400200a0
 8006298:	400200b8 	.word	0x400200b8
 800629c:	40020410 	.word	0x40020410
 80062a0:	40020428 	.word	0x40020428
 80062a4:	40020440 	.word	0x40020440
 80062a8:	40020458 	.word	0x40020458
 80062ac:	40020470 	.word	0x40020470
 80062b0:	40020488 	.word	0x40020488
 80062b4:	400204a0 	.word	0x400204a0
 80062b8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f023 020e 	bic.w	r2, r3, #14
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 020a 	orr.w	r2, r2, #10
 80062ce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0204 	orr.w	r2, r2, #4
 80062e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a83      	ldr	r2, [pc, #524]	; (80064fc <HAL_DMA_Start_IT+0x474>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d072      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a82      	ldr	r2, [pc, #520]	; (8006500 <HAL_DMA_Start_IT+0x478>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d06d      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a80      	ldr	r2, [pc, #512]	; (8006504 <HAL_DMA_Start_IT+0x47c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d068      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a7f      	ldr	r2, [pc, #508]	; (8006508 <HAL_DMA_Start_IT+0x480>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d063      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a7d      	ldr	r2, [pc, #500]	; (800650c <HAL_DMA_Start_IT+0x484>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d05e      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a7c      	ldr	r2, [pc, #496]	; (8006510 <HAL_DMA_Start_IT+0x488>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d059      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a7a      	ldr	r2, [pc, #488]	; (8006514 <HAL_DMA_Start_IT+0x48c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d054      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a79      	ldr	r2, [pc, #484]	; (8006518 <HAL_DMA_Start_IT+0x490>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d04f      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a77      	ldr	r2, [pc, #476]	; (800651c <HAL_DMA_Start_IT+0x494>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d04a      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a76      	ldr	r2, [pc, #472]	; (8006520 <HAL_DMA_Start_IT+0x498>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d045      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a74      	ldr	r2, [pc, #464]	; (8006524 <HAL_DMA_Start_IT+0x49c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d040      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a73      	ldr	r2, [pc, #460]	; (8006528 <HAL_DMA_Start_IT+0x4a0>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d03b      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a71      	ldr	r2, [pc, #452]	; (800652c <HAL_DMA_Start_IT+0x4a4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d036      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a70      	ldr	r2, [pc, #448]	; (8006530 <HAL_DMA_Start_IT+0x4a8>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d031      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a6e      	ldr	r2, [pc, #440]	; (8006534 <HAL_DMA_Start_IT+0x4ac>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d02c      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a6d      	ldr	r2, [pc, #436]	; (8006538 <HAL_DMA_Start_IT+0x4b0>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d027      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a6b      	ldr	r2, [pc, #428]	; (800653c <HAL_DMA_Start_IT+0x4b4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d022      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a6a      	ldr	r2, [pc, #424]	; (8006540 <HAL_DMA_Start_IT+0x4b8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d01d      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a68      	ldr	r2, [pc, #416]	; (8006544 <HAL_DMA_Start_IT+0x4bc>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d018      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a67      	ldr	r2, [pc, #412]	; (8006548 <HAL_DMA_Start_IT+0x4c0>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d013      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a65      	ldr	r2, [pc, #404]	; (800654c <HAL_DMA_Start_IT+0x4c4>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00e      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a64      	ldr	r2, [pc, #400]	; (8006550 <HAL_DMA_Start_IT+0x4c8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d009      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a62      	ldr	r2, [pc, #392]	; (8006554 <HAL_DMA_Start_IT+0x4cc>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d004      	beq.n	80063d8 <HAL_DMA_Start_IT+0x350>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a61      	ldr	r2, [pc, #388]	; (8006558 <HAL_DMA_Start_IT+0x4d0>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d101      	bne.n	80063dc <HAL_DMA_Start_IT+0x354>
 80063d8:	2301      	movs	r3, #1
 80063da:	e000      	b.n	80063de <HAL_DMA_Start_IT+0x356>
 80063dc:	2300      	movs	r3, #0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d01a      	beq.n	8006418 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d007      	beq.n	8006400 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006404:	2b00      	cmp	r3, #0
 8006406:	d007      	beq.n	8006418 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006416:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a37      	ldr	r2, [pc, #220]	; (80064fc <HAL_DMA_Start_IT+0x474>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d04a      	beq.n	80064b8 <HAL_DMA_Start_IT+0x430>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a36      	ldr	r2, [pc, #216]	; (8006500 <HAL_DMA_Start_IT+0x478>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d045      	beq.n	80064b8 <HAL_DMA_Start_IT+0x430>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a34      	ldr	r2, [pc, #208]	; (8006504 <HAL_DMA_Start_IT+0x47c>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d040      	beq.n	80064b8 <HAL_DMA_Start_IT+0x430>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a33      	ldr	r2, [pc, #204]	; (8006508 <HAL_DMA_Start_IT+0x480>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d03b      	beq.n	80064b8 <HAL_DMA_Start_IT+0x430>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a31      	ldr	r2, [pc, #196]	; (800650c <HAL_DMA_Start_IT+0x484>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d036      	beq.n	80064b8 <HAL_DMA_Start_IT+0x430>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a30      	ldr	r2, [pc, #192]	; (8006510 <HAL_DMA_Start_IT+0x488>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d031      	beq.n	80064b8 <HAL_DMA_Start_IT+0x430>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a2e      	ldr	r2, [pc, #184]	; (8006514 <HAL_DMA_Start_IT+0x48c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d02c      	beq.n	80064b8 <HAL_DMA_Start_IT+0x430>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a2d      	ldr	r2, [pc, #180]	; (8006518 <HAL_DMA_Start_IT+0x490>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d027      	beq.n	80064b8 <HAL_DMA_Start_IT+0x430>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a2b      	ldr	r2, [pc, #172]	; (800651c <HAL_DMA_Start_IT+0x494>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d022      	beq.n	80064b8 <HAL_DMA_Start_IT+0x430>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a2a      	ldr	r2, [pc, #168]	; (8006520 <HAL_DMA_Start_IT+0x498>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d01d      	beq.n	80064b8 <HAL_DMA_Start_IT+0x430>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a28      	ldr	r2, [pc, #160]	; (8006524 <HAL_DMA_Start_IT+0x49c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d018      	beq.n	80064b8 <HAL_DMA_Start_IT+0x430>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a27      	ldr	r2, [pc, #156]	; (8006528 <HAL_DMA_Start_IT+0x4a0>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d013      	beq.n	80064b8 <HAL_DMA_Start_IT+0x430>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a25      	ldr	r2, [pc, #148]	; (800652c <HAL_DMA_Start_IT+0x4a4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00e      	beq.n	80064b8 <HAL_DMA_Start_IT+0x430>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a24      	ldr	r2, [pc, #144]	; (8006530 <HAL_DMA_Start_IT+0x4a8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d009      	beq.n	80064b8 <HAL_DMA_Start_IT+0x430>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a22      	ldr	r2, [pc, #136]	; (8006534 <HAL_DMA_Start_IT+0x4ac>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d004      	beq.n	80064b8 <HAL_DMA_Start_IT+0x430>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a21      	ldr	r2, [pc, #132]	; (8006538 <HAL_DMA_Start_IT+0x4b0>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d108      	bne.n	80064ca <HAL_DMA_Start_IT+0x442>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f042 0201 	orr.w	r2, r2, #1
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	e012      	b.n	80064f0 <HAL_DMA_Start_IT+0x468>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f042 0201 	orr.w	r2, r2, #1
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	e009      	b.n	80064f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	40020010 	.word	0x40020010
 8006500:	40020028 	.word	0x40020028
 8006504:	40020040 	.word	0x40020040
 8006508:	40020058 	.word	0x40020058
 800650c:	40020070 	.word	0x40020070
 8006510:	40020088 	.word	0x40020088
 8006514:	400200a0 	.word	0x400200a0
 8006518:	400200b8 	.word	0x400200b8
 800651c:	40020410 	.word	0x40020410
 8006520:	40020428 	.word	0x40020428
 8006524:	40020440 	.word	0x40020440
 8006528:	40020458 	.word	0x40020458
 800652c:	40020470 	.word	0x40020470
 8006530:	40020488 	.word	0x40020488
 8006534:	400204a0 	.word	0x400204a0
 8006538:	400204b8 	.word	0x400204b8
 800653c:	58025408 	.word	0x58025408
 8006540:	5802541c 	.word	0x5802541c
 8006544:	58025430 	.word	0x58025430
 8006548:	58025444 	.word	0x58025444
 800654c:	58025458 	.word	0x58025458
 8006550:	5802546c 	.word	0x5802546c
 8006554:	58025480 	.word	0x58025480
 8006558:	58025494 	.word	0x58025494

0800655c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006564:	f7fd f90c 	bl	8003780 <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e2dc      	b.n	8006b2e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d008      	beq.n	8006592 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2280      	movs	r2, #128	; 0x80
 8006584:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e2cd      	b.n	8006b2e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a76      	ldr	r2, [pc, #472]	; (8006770 <HAL_DMA_Abort+0x214>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d04a      	beq.n	8006632 <HAL_DMA_Abort+0xd6>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a74      	ldr	r2, [pc, #464]	; (8006774 <HAL_DMA_Abort+0x218>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d045      	beq.n	8006632 <HAL_DMA_Abort+0xd6>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a73      	ldr	r2, [pc, #460]	; (8006778 <HAL_DMA_Abort+0x21c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d040      	beq.n	8006632 <HAL_DMA_Abort+0xd6>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a71      	ldr	r2, [pc, #452]	; (800677c <HAL_DMA_Abort+0x220>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d03b      	beq.n	8006632 <HAL_DMA_Abort+0xd6>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a70      	ldr	r2, [pc, #448]	; (8006780 <HAL_DMA_Abort+0x224>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d036      	beq.n	8006632 <HAL_DMA_Abort+0xd6>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a6e      	ldr	r2, [pc, #440]	; (8006784 <HAL_DMA_Abort+0x228>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d031      	beq.n	8006632 <HAL_DMA_Abort+0xd6>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a6d      	ldr	r2, [pc, #436]	; (8006788 <HAL_DMA_Abort+0x22c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d02c      	beq.n	8006632 <HAL_DMA_Abort+0xd6>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a6b      	ldr	r2, [pc, #428]	; (800678c <HAL_DMA_Abort+0x230>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d027      	beq.n	8006632 <HAL_DMA_Abort+0xd6>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a6a      	ldr	r2, [pc, #424]	; (8006790 <HAL_DMA_Abort+0x234>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d022      	beq.n	8006632 <HAL_DMA_Abort+0xd6>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a68      	ldr	r2, [pc, #416]	; (8006794 <HAL_DMA_Abort+0x238>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d01d      	beq.n	8006632 <HAL_DMA_Abort+0xd6>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a67      	ldr	r2, [pc, #412]	; (8006798 <HAL_DMA_Abort+0x23c>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d018      	beq.n	8006632 <HAL_DMA_Abort+0xd6>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a65      	ldr	r2, [pc, #404]	; (800679c <HAL_DMA_Abort+0x240>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d013      	beq.n	8006632 <HAL_DMA_Abort+0xd6>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a64      	ldr	r2, [pc, #400]	; (80067a0 <HAL_DMA_Abort+0x244>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00e      	beq.n	8006632 <HAL_DMA_Abort+0xd6>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a62      	ldr	r2, [pc, #392]	; (80067a4 <HAL_DMA_Abort+0x248>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d009      	beq.n	8006632 <HAL_DMA_Abort+0xd6>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a61      	ldr	r2, [pc, #388]	; (80067a8 <HAL_DMA_Abort+0x24c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d004      	beq.n	8006632 <HAL_DMA_Abort+0xd6>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a5f      	ldr	r2, [pc, #380]	; (80067ac <HAL_DMA_Abort+0x250>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d101      	bne.n	8006636 <HAL_DMA_Abort+0xda>
 8006632:	2301      	movs	r3, #1
 8006634:	e000      	b.n	8006638 <HAL_DMA_Abort+0xdc>
 8006636:	2300      	movs	r3, #0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d013      	beq.n	8006664 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 021e 	bic.w	r2, r2, #30
 800664a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695a      	ldr	r2, [r3, #20]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800665a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	617b      	str	r3, [r7, #20]
 8006662:	e00a      	b.n	800667a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 020e 	bic.w	r2, r2, #14
 8006672:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a3c      	ldr	r2, [pc, #240]	; (8006770 <HAL_DMA_Abort+0x214>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d072      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a3a      	ldr	r2, [pc, #232]	; (8006774 <HAL_DMA_Abort+0x218>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d06d      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a39      	ldr	r2, [pc, #228]	; (8006778 <HAL_DMA_Abort+0x21c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d068      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a37      	ldr	r2, [pc, #220]	; (800677c <HAL_DMA_Abort+0x220>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d063      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a36      	ldr	r2, [pc, #216]	; (8006780 <HAL_DMA_Abort+0x224>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d05e      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a34      	ldr	r2, [pc, #208]	; (8006784 <HAL_DMA_Abort+0x228>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d059      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a33      	ldr	r2, [pc, #204]	; (8006788 <HAL_DMA_Abort+0x22c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d054      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a31      	ldr	r2, [pc, #196]	; (800678c <HAL_DMA_Abort+0x230>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d04f      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a30      	ldr	r2, [pc, #192]	; (8006790 <HAL_DMA_Abort+0x234>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d04a      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a2e      	ldr	r2, [pc, #184]	; (8006794 <HAL_DMA_Abort+0x238>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d045      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a2d      	ldr	r2, [pc, #180]	; (8006798 <HAL_DMA_Abort+0x23c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d040      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a2b      	ldr	r2, [pc, #172]	; (800679c <HAL_DMA_Abort+0x240>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d03b      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a2a      	ldr	r2, [pc, #168]	; (80067a0 <HAL_DMA_Abort+0x244>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d036      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a28      	ldr	r2, [pc, #160]	; (80067a4 <HAL_DMA_Abort+0x248>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d031      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a27      	ldr	r2, [pc, #156]	; (80067a8 <HAL_DMA_Abort+0x24c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d02c      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a25      	ldr	r2, [pc, #148]	; (80067ac <HAL_DMA_Abort+0x250>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d027      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a24      	ldr	r2, [pc, #144]	; (80067b0 <HAL_DMA_Abort+0x254>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d022      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a22      	ldr	r2, [pc, #136]	; (80067b4 <HAL_DMA_Abort+0x258>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d01d      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a21      	ldr	r2, [pc, #132]	; (80067b8 <HAL_DMA_Abort+0x25c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d018      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a1f      	ldr	r2, [pc, #124]	; (80067bc <HAL_DMA_Abort+0x260>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d013      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a1e      	ldr	r2, [pc, #120]	; (80067c0 <HAL_DMA_Abort+0x264>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d00e      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a1c      	ldr	r2, [pc, #112]	; (80067c4 <HAL_DMA_Abort+0x268>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d009      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a1b      	ldr	r2, [pc, #108]	; (80067c8 <HAL_DMA_Abort+0x26c>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d004      	beq.n	800676a <HAL_DMA_Abort+0x20e>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a19      	ldr	r2, [pc, #100]	; (80067cc <HAL_DMA_Abort+0x270>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d132      	bne.n	80067d0 <HAL_DMA_Abort+0x274>
 800676a:	2301      	movs	r3, #1
 800676c:	e031      	b.n	80067d2 <HAL_DMA_Abort+0x276>
 800676e:	bf00      	nop
 8006770:	40020010 	.word	0x40020010
 8006774:	40020028 	.word	0x40020028
 8006778:	40020040 	.word	0x40020040
 800677c:	40020058 	.word	0x40020058
 8006780:	40020070 	.word	0x40020070
 8006784:	40020088 	.word	0x40020088
 8006788:	400200a0 	.word	0x400200a0
 800678c:	400200b8 	.word	0x400200b8
 8006790:	40020410 	.word	0x40020410
 8006794:	40020428 	.word	0x40020428
 8006798:	40020440 	.word	0x40020440
 800679c:	40020458 	.word	0x40020458
 80067a0:	40020470 	.word	0x40020470
 80067a4:	40020488 	.word	0x40020488
 80067a8:	400204a0 	.word	0x400204a0
 80067ac:	400204b8 	.word	0x400204b8
 80067b0:	58025408 	.word	0x58025408
 80067b4:	5802541c 	.word	0x5802541c
 80067b8:	58025430 	.word	0x58025430
 80067bc:	58025444 	.word	0x58025444
 80067c0:	58025458 	.word	0x58025458
 80067c4:	5802546c 	.word	0x5802546c
 80067c8:	58025480 	.word	0x58025480
 80067cc:	58025494 	.word	0x58025494
 80067d0:	2300      	movs	r3, #0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d007      	beq.n	80067e6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a6d      	ldr	r2, [pc, #436]	; (80069a0 <HAL_DMA_Abort+0x444>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d04a      	beq.n	8006886 <HAL_DMA_Abort+0x32a>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a6b      	ldr	r2, [pc, #428]	; (80069a4 <HAL_DMA_Abort+0x448>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d045      	beq.n	8006886 <HAL_DMA_Abort+0x32a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a6a      	ldr	r2, [pc, #424]	; (80069a8 <HAL_DMA_Abort+0x44c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d040      	beq.n	8006886 <HAL_DMA_Abort+0x32a>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a68      	ldr	r2, [pc, #416]	; (80069ac <HAL_DMA_Abort+0x450>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d03b      	beq.n	8006886 <HAL_DMA_Abort+0x32a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a67      	ldr	r2, [pc, #412]	; (80069b0 <HAL_DMA_Abort+0x454>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d036      	beq.n	8006886 <HAL_DMA_Abort+0x32a>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a65      	ldr	r2, [pc, #404]	; (80069b4 <HAL_DMA_Abort+0x458>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d031      	beq.n	8006886 <HAL_DMA_Abort+0x32a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a64      	ldr	r2, [pc, #400]	; (80069b8 <HAL_DMA_Abort+0x45c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d02c      	beq.n	8006886 <HAL_DMA_Abort+0x32a>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a62      	ldr	r2, [pc, #392]	; (80069bc <HAL_DMA_Abort+0x460>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d027      	beq.n	8006886 <HAL_DMA_Abort+0x32a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a61      	ldr	r2, [pc, #388]	; (80069c0 <HAL_DMA_Abort+0x464>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d022      	beq.n	8006886 <HAL_DMA_Abort+0x32a>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a5f      	ldr	r2, [pc, #380]	; (80069c4 <HAL_DMA_Abort+0x468>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d01d      	beq.n	8006886 <HAL_DMA_Abort+0x32a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a5e      	ldr	r2, [pc, #376]	; (80069c8 <HAL_DMA_Abort+0x46c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d018      	beq.n	8006886 <HAL_DMA_Abort+0x32a>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a5c      	ldr	r2, [pc, #368]	; (80069cc <HAL_DMA_Abort+0x470>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d013      	beq.n	8006886 <HAL_DMA_Abort+0x32a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a5b      	ldr	r2, [pc, #364]	; (80069d0 <HAL_DMA_Abort+0x474>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00e      	beq.n	8006886 <HAL_DMA_Abort+0x32a>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a59      	ldr	r2, [pc, #356]	; (80069d4 <HAL_DMA_Abort+0x478>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d009      	beq.n	8006886 <HAL_DMA_Abort+0x32a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a58      	ldr	r2, [pc, #352]	; (80069d8 <HAL_DMA_Abort+0x47c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d004      	beq.n	8006886 <HAL_DMA_Abort+0x32a>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a56      	ldr	r2, [pc, #344]	; (80069dc <HAL_DMA_Abort+0x480>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d108      	bne.n	8006898 <HAL_DMA_Abort+0x33c>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 0201 	bic.w	r2, r2, #1
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	e007      	b.n	80068a8 <HAL_DMA_Abort+0x34c>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0201 	bic.w	r2, r2, #1
 80068a6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80068a8:	e013      	b.n	80068d2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068aa:	f7fc ff69 	bl	8003780 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b05      	cmp	r3, #5
 80068b6:	d90c      	bls.n	80068d2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2220      	movs	r2, #32
 80068bc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2203      	movs	r2, #3
 80068c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e12d      	b.n	8006b2e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e5      	bne.n	80068aa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a2f      	ldr	r2, [pc, #188]	; (80069a0 <HAL_DMA_Abort+0x444>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d04a      	beq.n	800697e <HAL_DMA_Abort+0x422>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a2d      	ldr	r2, [pc, #180]	; (80069a4 <HAL_DMA_Abort+0x448>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d045      	beq.n	800697e <HAL_DMA_Abort+0x422>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a2c      	ldr	r2, [pc, #176]	; (80069a8 <HAL_DMA_Abort+0x44c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d040      	beq.n	800697e <HAL_DMA_Abort+0x422>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a2a      	ldr	r2, [pc, #168]	; (80069ac <HAL_DMA_Abort+0x450>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d03b      	beq.n	800697e <HAL_DMA_Abort+0x422>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a29      	ldr	r2, [pc, #164]	; (80069b0 <HAL_DMA_Abort+0x454>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d036      	beq.n	800697e <HAL_DMA_Abort+0x422>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a27      	ldr	r2, [pc, #156]	; (80069b4 <HAL_DMA_Abort+0x458>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d031      	beq.n	800697e <HAL_DMA_Abort+0x422>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a26      	ldr	r2, [pc, #152]	; (80069b8 <HAL_DMA_Abort+0x45c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d02c      	beq.n	800697e <HAL_DMA_Abort+0x422>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a24      	ldr	r2, [pc, #144]	; (80069bc <HAL_DMA_Abort+0x460>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d027      	beq.n	800697e <HAL_DMA_Abort+0x422>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a23      	ldr	r2, [pc, #140]	; (80069c0 <HAL_DMA_Abort+0x464>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d022      	beq.n	800697e <HAL_DMA_Abort+0x422>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a21      	ldr	r2, [pc, #132]	; (80069c4 <HAL_DMA_Abort+0x468>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d01d      	beq.n	800697e <HAL_DMA_Abort+0x422>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a20      	ldr	r2, [pc, #128]	; (80069c8 <HAL_DMA_Abort+0x46c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d018      	beq.n	800697e <HAL_DMA_Abort+0x422>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1e      	ldr	r2, [pc, #120]	; (80069cc <HAL_DMA_Abort+0x470>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d013      	beq.n	800697e <HAL_DMA_Abort+0x422>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1d      	ldr	r2, [pc, #116]	; (80069d0 <HAL_DMA_Abort+0x474>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d00e      	beq.n	800697e <HAL_DMA_Abort+0x422>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a1b      	ldr	r2, [pc, #108]	; (80069d4 <HAL_DMA_Abort+0x478>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d009      	beq.n	800697e <HAL_DMA_Abort+0x422>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a1a      	ldr	r2, [pc, #104]	; (80069d8 <HAL_DMA_Abort+0x47c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d004      	beq.n	800697e <HAL_DMA_Abort+0x422>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a18      	ldr	r2, [pc, #96]	; (80069dc <HAL_DMA_Abort+0x480>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d101      	bne.n	8006982 <HAL_DMA_Abort+0x426>
 800697e:	2301      	movs	r3, #1
 8006980:	e000      	b.n	8006984 <HAL_DMA_Abort+0x428>
 8006982:	2300      	movs	r3, #0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d02b      	beq.n	80069e0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800698c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	223f      	movs	r2, #63	; 0x3f
 8006998:	409a      	lsls	r2, r3
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	609a      	str	r2, [r3, #8]
 800699e:	e02a      	b.n	80069f6 <HAL_DMA_Abort+0x49a>
 80069a0:	40020010 	.word	0x40020010
 80069a4:	40020028 	.word	0x40020028
 80069a8:	40020040 	.word	0x40020040
 80069ac:	40020058 	.word	0x40020058
 80069b0:	40020070 	.word	0x40020070
 80069b4:	40020088 	.word	0x40020088
 80069b8:	400200a0 	.word	0x400200a0
 80069bc:	400200b8 	.word	0x400200b8
 80069c0:	40020410 	.word	0x40020410
 80069c4:	40020428 	.word	0x40020428
 80069c8:	40020440 	.word	0x40020440
 80069cc:	40020458 	.word	0x40020458
 80069d0:	40020470 	.word	0x40020470
 80069d4:	40020488 	.word	0x40020488
 80069d8:	400204a0 	.word	0x400204a0
 80069dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ea:	f003 031f 	and.w	r3, r3, #31
 80069ee:	2201      	movs	r2, #1
 80069f0:	409a      	lsls	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a4f      	ldr	r2, [pc, #316]	; (8006b38 <HAL_DMA_Abort+0x5dc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d072      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a4d      	ldr	r2, [pc, #308]	; (8006b3c <HAL_DMA_Abort+0x5e0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d06d      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a4c      	ldr	r2, [pc, #304]	; (8006b40 <HAL_DMA_Abort+0x5e4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d068      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a4a      	ldr	r2, [pc, #296]	; (8006b44 <HAL_DMA_Abort+0x5e8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d063      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a49      	ldr	r2, [pc, #292]	; (8006b48 <HAL_DMA_Abort+0x5ec>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d05e      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a47      	ldr	r2, [pc, #284]	; (8006b4c <HAL_DMA_Abort+0x5f0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d059      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a46      	ldr	r2, [pc, #280]	; (8006b50 <HAL_DMA_Abort+0x5f4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d054      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a44      	ldr	r2, [pc, #272]	; (8006b54 <HAL_DMA_Abort+0x5f8>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d04f      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a43      	ldr	r2, [pc, #268]	; (8006b58 <HAL_DMA_Abort+0x5fc>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d04a      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a41      	ldr	r2, [pc, #260]	; (8006b5c <HAL_DMA_Abort+0x600>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d045      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a40      	ldr	r2, [pc, #256]	; (8006b60 <HAL_DMA_Abort+0x604>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d040      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a3e      	ldr	r2, [pc, #248]	; (8006b64 <HAL_DMA_Abort+0x608>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d03b      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a3d      	ldr	r2, [pc, #244]	; (8006b68 <HAL_DMA_Abort+0x60c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d036      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a3b      	ldr	r2, [pc, #236]	; (8006b6c <HAL_DMA_Abort+0x610>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d031      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a3a      	ldr	r2, [pc, #232]	; (8006b70 <HAL_DMA_Abort+0x614>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d02c      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a38      	ldr	r2, [pc, #224]	; (8006b74 <HAL_DMA_Abort+0x618>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d027      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a37      	ldr	r2, [pc, #220]	; (8006b78 <HAL_DMA_Abort+0x61c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d022      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a35      	ldr	r2, [pc, #212]	; (8006b7c <HAL_DMA_Abort+0x620>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d01d      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a34      	ldr	r2, [pc, #208]	; (8006b80 <HAL_DMA_Abort+0x624>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d018      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a32      	ldr	r2, [pc, #200]	; (8006b84 <HAL_DMA_Abort+0x628>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d013      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a31      	ldr	r2, [pc, #196]	; (8006b88 <HAL_DMA_Abort+0x62c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d00e      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a2f      	ldr	r2, [pc, #188]	; (8006b8c <HAL_DMA_Abort+0x630>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d009      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a2e      	ldr	r2, [pc, #184]	; (8006b90 <HAL_DMA_Abort+0x634>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d004      	beq.n	8006ae6 <HAL_DMA_Abort+0x58a>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a2c      	ldr	r2, [pc, #176]	; (8006b94 <HAL_DMA_Abort+0x638>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d101      	bne.n	8006aea <HAL_DMA_Abort+0x58e>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e000      	b.n	8006aec <HAL_DMA_Abort+0x590>
 8006aea:	2300      	movs	r3, #0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d015      	beq.n	8006b1c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006af8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00c      	beq.n	8006b1c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b10:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b1a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	40020010 	.word	0x40020010
 8006b3c:	40020028 	.word	0x40020028
 8006b40:	40020040 	.word	0x40020040
 8006b44:	40020058 	.word	0x40020058
 8006b48:	40020070 	.word	0x40020070
 8006b4c:	40020088 	.word	0x40020088
 8006b50:	400200a0 	.word	0x400200a0
 8006b54:	400200b8 	.word	0x400200b8
 8006b58:	40020410 	.word	0x40020410
 8006b5c:	40020428 	.word	0x40020428
 8006b60:	40020440 	.word	0x40020440
 8006b64:	40020458 	.word	0x40020458
 8006b68:	40020470 	.word	0x40020470
 8006b6c:	40020488 	.word	0x40020488
 8006b70:	400204a0 	.word	0x400204a0
 8006b74:	400204b8 	.word	0x400204b8
 8006b78:	58025408 	.word	0x58025408
 8006b7c:	5802541c 	.word	0x5802541c
 8006b80:	58025430 	.word	0x58025430
 8006b84:	58025444 	.word	0x58025444
 8006b88:	58025458 	.word	0x58025458
 8006b8c:	5802546c 	.word	0x5802546c
 8006b90:	58025480 	.word	0x58025480
 8006b94:	58025494 	.word	0x58025494

08006b98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e237      	b.n	800701a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d004      	beq.n	8006bc0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2280      	movs	r2, #128	; 0x80
 8006bba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e22c      	b.n	800701a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a5c      	ldr	r2, [pc, #368]	; (8006d38 <HAL_DMA_Abort_IT+0x1a0>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d04a      	beq.n	8006c60 <HAL_DMA_Abort_IT+0xc8>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a5b      	ldr	r2, [pc, #364]	; (8006d3c <HAL_DMA_Abort_IT+0x1a4>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d045      	beq.n	8006c60 <HAL_DMA_Abort_IT+0xc8>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a59      	ldr	r2, [pc, #356]	; (8006d40 <HAL_DMA_Abort_IT+0x1a8>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d040      	beq.n	8006c60 <HAL_DMA_Abort_IT+0xc8>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a58      	ldr	r2, [pc, #352]	; (8006d44 <HAL_DMA_Abort_IT+0x1ac>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d03b      	beq.n	8006c60 <HAL_DMA_Abort_IT+0xc8>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a56      	ldr	r2, [pc, #344]	; (8006d48 <HAL_DMA_Abort_IT+0x1b0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d036      	beq.n	8006c60 <HAL_DMA_Abort_IT+0xc8>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a55      	ldr	r2, [pc, #340]	; (8006d4c <HAL_DMA_Abort_IT+0x1b4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d031      	beq.n	8006c60 <HAL_DMA_Abort_IT+0xc8>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a53      	ldr	r2, [pc, #332]	; (8006d50 <HAL_DMA_Abort_IT+0x1b8>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d02c      	beq.n	8006c60 <HAL_DMA_Abort_IT+0xc8>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a52      	ldr	r2, [pc, #328]	; (8006d54 <HAL_DMA_Abort_IT+0x1bc>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d027      	beq.n	8006c60 <HAL_DMA_Abort_IT+0xc8>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a50      	ldr	r2, [pc, #320]	; (8006d58 <HAL_DMA_Abort_IT+0x1c0>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d022      	beq.n	8006c60 <HAL_DMA_Abort_IT+0xc8>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a4f      	ldr	r2, [pc, #316]	; (8006d5c <HAL_DMA_Abort_IT+0x1c4>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d01d      	beq.n	8006c60 <HAL_DMA_Abort_IT+0xc8>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a4d      	ldr	r2, [pc, #308]	; (8006d60 <HAL_DMA_Abort_IT+0x1c8>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d018      	beq.n	8006c60 <HAL_DMA_Abort_IT+0xc8>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a4c      	ldr	r2, [pc, #304]	; (8006d64 <HAL_DMA_Abort_IT+0x1cc>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d013      	beq.n	8006c60 <HAL_DMA_Abort_IT+0xc8>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a4a      	ldr	r2, [pc, #296]	; (8006d68 <HAL_DMA_Abort_IT+0x1d0>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d00e      	beq.n	8006c60 <HAL_DMA_Abort_IT+0xc8>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a49      	ldr	r2, [pc, #292]	; (8006d6c <HAL_DMA_Abort_IT+0x1d4>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d009      	beq.n	8006c60 <HAL_DMA_Abort_IT+0xc8>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a47      	ldr	r2, [pc, #284]	; (8006d70 <HAL_DMA_Abort_IT+0x1d8>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d004      	beq.n	8006c60 <HAL_DMA_Abort_IT+0xc8>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a46      	ldr	r2, [pc, #280]	; (8006d74 <HAL_DMA_Abort_IT+0x1dc>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d101      	bne.n	8006c64 <HAL_DMA_Abort_IT+0xcc>
 8006c60:	2301      	movs	r3, #1
 8006c62:	e000      	b.n	8006c66 <HAL_DMA_Abort_IT+0xce>
 8006c64:	2300      	movs	r3, #0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 8086 	beq.w	8006d78 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2204      	movs	r2, #4
 8006c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a2f      	ldr	r2, [pc, #188]	; (8006d38 <HAL_DMA_Abort_IT+0x1a0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d04a      	beq.n	8006d14 <HAL_DMA_Abort_IT+0x17c>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a2e      	ldr	r2, [pc, #184]	; (8006d3c <HAL_DMA_Abort_IT+0x1a4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d045      	beq.n	8006d14 <HAL_DMA_Abort_IT+0x17c>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a2c      	ldr	r2, [pc, #176]	; (8006d40 <HAL_DMA_Abort_IT+0x1a8>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d040      	beq.n	8006d14 <HAL_DMA_Abort_IT+0x17c>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a2b      	ldr	r2, [pc, #172]	; (8006d44 <HAL_DMA_Abort_IT+0x1ac>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d03b      	beq.n	8006d14 <HAL_DMA_Abort_IT+0x17c>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a29      	ldr	r2, [pc, #164]	; (8006d48 <HAL_DMA_Abort_IT+0x1b0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d036      	beq.n	8006d14 <HAL_DMA_Abort_IT+0x17c>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a28      	ldr	r2, [pc, #160]	; (8006d4c <HAL_DMA_Abort_IT+0x1b4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d031      	beq.n	8006d14 <HAL_DMA_Abort_IT+0x17c>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a26      	ldr	r2, [pc, #152]	; (8006d50 <HAL_DMA_Abort_IT+0x1b8>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d02c      	beq.n	8006d14 <HAL_DMA_Abort_IT+0x17c>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a25      	ldr	r2, [pc, #148]	; (8006d54 <HAL_DMA_Abort_IT+0x1bc>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d027      	beq.n	8006d14 <HAL_DMA_Abort_IT+0x17c>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a23      	ldr	r2, [pc, #140]	; (8006d58 <HAL_DMA_Abort_IT+0x1c0>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d022      	beq.n	8006d14 <HAL_DMA_Abort_IT+0x17c>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a22      	ldr	r2, [pc, #136]	; (8006d5c <HAL_DMA_Abort_IT+0x1c4>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d01d      	beq.n	8006d14 <HAL_DMA_Abort_IT+0x17c>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a20      	ldr	r2, [pc, #128]	; (8006d60 <HAL_DMA_Abort_IT+0x1c8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d018      	beq.n	8006d14 <HAL_DMA_Abort_IT+0x17c>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a1f      	ldr	r2, [pc, #124]	; (8006d64 <HAL_DMA_Abort_IT+0x1cc>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d013      	beq.n	8006d14 <HAL_DMA_Abort_IT+0x17c>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a1d      	ldr	r2, [pc, #116]	; (8006d68 <HAL_DMA_Abort_IT+0x1d0>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d00e      	beq.n	8006d14 <HAL_DMA_Abort_IT+0x17c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a1c      	ldr	r2, [pc, #112]	; (8006d6c <HAL_DMA_Abort_IT+0x1d4>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d009      	beq.n	8006d14 <HAL_DMA_Abort_IT+0x17c>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a1a      	ldr	r2, [pc, #104]	; (8006d70 <HAL_DMA_Abort_IT+0x1d8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d004      	beq.n	8006d14 <HAL_DMA_Abort_IT+0x17c>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a19      	ldr	r2, [pc, #100]	; (8006d74 <HAL_DMA_Abort_IT+0x1dc>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d108      	bne.n	8006d26 <HAL_DMA_Abort_IT+0x18e>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0201 	bic.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	e178      	b.n	8007018 <HAL_DMA_Abort_IT+0x480>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0201 	bic.w	r2, r2, #1
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	e16f      	b.n	8007018 <HAL_DMA_Abort_IT+0x480>
 8006d38:	40020010 	.word	0x40020010
 8006d3c:	40020028 	.word	0x40020028
 8006d40:	40020040 	.word	0x40020040
 8006d44:	40020058 	.word	0x40020058
 8006d48:	40020070 	.word	0x40020070
 8006d4c:	40020088 	.word	0x40020088
 8006d50:	400200a0 	.word	0x400200a0
 8006d54:	400200b8 	.word	0x400200b8
 8006d58:	40020410 	.word	0x40020410
 8006d5c:	40020428 	.word	0x40020428
 8006d60:	40020440 	.word	0x40020440
 8006d64:	40020458 	.word	0x40020458
 8006d68:	40020470 	.word	0x40020470
 8006d6c:	40020488 	.word	0x40020488
 8006d70:	400204a0 	.word	0x400204a0
 8006d74:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 020e 	bic.w	r2, r2, #14
 8006d86:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a6c      	ldr	r2, [pc, #432]	; (8006f40 <HAL_DMA_Abort_IT+0x3a8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d04a      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x290>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a6b      	ldr	r2, [pc, #428]	; (8006f44 <HAL_DMA_Abort_IT+0x3ac>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d045      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x290>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a69      	ldr	r2, [pc, #420]	; (8006f48 <HAL_DMA_Abort_IT+0x3b0>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d040      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x290>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a68      	ldr	r2, [pc, #416]	; (8006f4c <HAL_DMA_Abort_IT+0x3b4>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d03b      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x290>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a66      	ldr	r2, [pc, #408]	; (8006f50 <HAL_DMA_Abort_IT+0x3b8>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d036      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x290>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a65      	ldr	r2, [pc, #404]	; (8006f54 <HAL_DMA_Abort_IT+0x3bc>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d031      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x290>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a63      	ldr	r2, [pc, #396]	; (8006f58 <HAL_DMA_Abort_IT+0x3c0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d02c      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x290>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a62      	ldr	r2, [pc, #392]	; (8006f5c <HAL_DMA_Abort_IT+0x3c4>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d027      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x290>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a60      	ldr	r2, [pc, #384]	; (8006f60 <HAL_DMA_Abort_IT+0x3c8>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d022      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x290>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a5f      	ldr	r2, [pc, #380]	; (8006f64 <HAL_DMA_Abort_IT+0x3cc>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d01d      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x290>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a5d      	ldr	r2, [pc, #372]	; (8006f68 <HAL_DMA_Abort_IT+0x3d0>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d018      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x290>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a5c      	ldr	r2, [pc, #368]	; (8006f6c <HAL_DMA_Abort_IT+0x3d4>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d013      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x290>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a5a      	ldr	r2, [pc, #360]	; (8006f70 <HAL_DMA_Abort_IT+0x3d8>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00e      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x290>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a59      	ldr	r2, [pc, #356]	; (8006f74 <HAL_DMA_Abort_IT+0x3dc>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d009      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x290>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a57      	ldr	r2, [pc, #348]	; (8006f78 <HAL_DMA_Abort_IT+0x3e0>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d004      	beq.n	8006e28 <HAL_DMA_Abort_IT+0x290>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a56      	ldr	r2, [pc, #344]	; (8006f7c <HAL_DMA_Abort_IT+0x3e4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d108      	bne.n	8006e3a <HAL_DMA_Abort_IT+0x2a2>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0201 	bic.w	r2, r2, #1
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	e007      	b.n	8006e4a <HAL_DMA_Abort_IT+0x2b2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0201 	bic.w	r2, r2, #1
 8006e48:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a3c      	ldr	r2, [pc, #240]	; (8006f40 <HAL_DMA_Abort_IT+0x3a8>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d072      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a3a      	ldr	r2, [pc, #232]	; (8006f44 <HAL_DMA_Abort_IT+0x3ac>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d06d      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a39      	ldr	r2, [pc, #228]	; (8006f48 <HAL_DMA_Abort_IT+0x3b0>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d068      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a37      	ldr	r2, [pc, #220]	; (8006f4c <HAL_DMA_Abort_IT+0x3b4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d063      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a36      	ldr	r2, [pc, #216]	; (8006f50 <HAL_DMA_Abort_IT+0x3b8>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d05e      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a34      	ldr	r2, [pc, #208]	; (8006f54 <HAL_DMA_Abort_IT+0x3bc>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d059      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a33      	ldr	r2, [pc, #204]	; (8006f58 <HAL_DMA_Abort_IT+0x3c0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d054      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a31      	ldr	r2, [pc, #196]	; (8006f5c <HAL_DMA_Abort_IT+0x3c4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d04f      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a30      	ldr	r2, [pc, #192]	; (8006f60 <HAL_DMA_Abort_IT+0x3c8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d04a      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a2e      	ldr	r2, [pc, #184]	; (8006f64 <HAL_DMA_Abort_IT+0x3cc>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d045      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a2d      	ldr	r2, [pc, #180]	; (8006f68 <HAL_DMA_Abort_IT+0x3d0>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d040      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a2b      	ldr	r2, [pc, #172]	; (8006f6c <HAL_DMA_Abort_IT+0x3d4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d03b      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a2a      	ldr	r2, [pc, #168]	; (8006f70 <HAL_DMA_Abort_IT+0x3d8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d036      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a28      	ldr	r2, [pc, #160]	; (8006f74 <HAL_DMA_Abort_IT+0x3dc>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d031      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a27      	ldr	r2, [pc, #156]	; (8006f78 <HAL_DMA_Abort_IT+0x3e0>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d02c      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a25      	ldr	r2, [pc, #148]	; (8006f7c <HAL_DMA_Abort_IT+0x3e4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d027      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a24      	ldr	r2, [pc, #144]	; (8006f80 <HAL_DMA_Abort_IT+0x3e8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d022      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a22      	ldr	r2, [pc, #136]	; (8006f84 <HAL_DMA_Abort_IT+0x3ec>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d01d      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a21      	ldr	r2, [pc, #132]	; (8006f88 <HAL_DMA_Abort_IT+0x3f0>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d018      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a1f      	ldr	r2, [pc, #124]	; (8006f8c <HAL_DMA_Abort_IT+0x3f4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d013      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a1e      	ldr	r2, [pc, #120]	; (8006f90 <HAL_DMA_Abort_IT+0x3f8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00e      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a1c      	ldr	r2, [pc, #112]	; (8006f94 <HAL_DMA_Abort_IT+0x3fc>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d009      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a1b      	ldr	r2, [pc, #108]	; (8006f98 <HAL_DMA_Abort_IT+0x400>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d004      	beq.n	8006f3a <HAL_DMA_Abort_IT+0x3a2>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a19      	ldr	r2, [pc, #100]	; (8006f9c <HAL_DMA_Abort_IT+0x404>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d132      	bne.n	8006fa0 <HAL_DMA_Abort_IT+0x408>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e031      	b.n	8006fa2 <HAL_DMA_Abort_IT+0x40a>
 8006f3e:	bf00      	nop
 8006f40:	40020010 	.word	0x40020010
 8006f44:	40020028 	.word	0x40020028
 8006f48:	40020040 	.word	0x40020040
 8006f4c:	40020058 	.word	0x40020058
 8006f50:	40020070 	.word	0x40020070
 8006f54:	40020088 	.word	0x40020088
 8006f58:	400200a0 	.word	0x400200a0
 8006f5c:	400200b8 	.word	0x400200b8
 8006f60:	40020410 	.word	0x40020410
 8006f64:	40020428 	.word	0x40020428
 8006f68:	40020440 	.word	0x40020440
 8006f6c:	40020458 	.word	0x40020458
 8006f70:	40020470 	.word	0x40020470
 8006f74:	40020488 	.word	0x40020488
 8006f78:	400204a0 	.word	0x400204a0
 8006f7c:	400204b8 	.word	0x400204b8
 8006f80:	58025408 	.word	0x58025408
 8006f84:	5802541c 	.word	0x5802541c
 8006f88:	58025430 	.word	0x58025430
 8006f8c:	58025444 	.word	0x58025444
 8006f90:	58025458 	.word	0x58025458
 8006f94:	5802546c 	.word	0x5802546c
 8006f98:	58025480 	.word	0x58025480
 8006f9c:	58025494 	.word	0x58025494
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d028      	beq.n	8006ff8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fb4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	409a      	lsls	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fd4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00c      	beq.n	8006ff8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ff6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop

08007024 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b08a      	sub	sp, #40	; 0x28
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007030:	4b67      	ldr	r3, [pc, #412]	; (80071d0 <HAL_DMA_IRQHandler+0x1ac>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a67      	ldr	r2, [pc, #412]	; (80071d4 <HAL_DMA_IRQHandler+0x1b0>)
 8007036:	fba2 2303 	umull	r2, r3, r2, r3
 800703a:	0a9b      	lsrs	r3, r3, #10
 800703c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007042:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007048:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a5f      	ldr	r2, [pc, #380]	; (80071d8 <HAL_DMA_IRQHandler+0x1b4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d04a      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xd2>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a5d      	ldr	r2, [pc, #372]	; (80071dc <HAL_DMA_IRQHandler+0x1b8>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d045      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xd2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a5c      	ldr	r2, [pc, #368]	; (80071e0 <HAL_DMA_IRQHandler+0x1bc>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d040      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xd2>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a5a      	ldr	r2, [pc, #360]	; (80071e4 <HAL_DMA_IRQHandler+0x1c0>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d03b      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xd2>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a59      	ldr	r2, [pc, #356]	; (80071e8 <HAL_DMA_IRQHandler+0x1c4>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d036      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xd2>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a57      	ldr	r2, [pc, #348]	; (80071ec <HAL_DMA_IRQHandler+0x1c8>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d031      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xd2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a56      	ldr	r2, [pc, #344]	; (80071f0 <HAL_DMA_IRQHandler+0x1cc>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d02c      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xd2>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a54      	ldr	r2, [pc, #336]	; (80071f4 <HAL_DMA_IRQHandler+0x1d0>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d027      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xd2>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a53      	ldr	r2, [pc, #332]	; (80071f8 <HAL_DMA_IRQHandler+0x1d4>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d022      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xd2>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a51      	ldr	r2, [pc, #324]	; (80071fc <HAL_DMA_IRQHandler+0x1d8>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d01d      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xd2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a50      	ldr	r2, [pc, #320]	; (8007200 <HAL_DMA_IRQHandler+0x1dc>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d018      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xd2>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a4e      	ldr	r2, [pc, #312]	; (8007204 <HAL_DMA_IRQHandler+0x1e0>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d013      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xd2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a4d      	ldr	r2, [pc, #308]	; (8007208 <HAL_DMA_IRQHandler+0x1e4>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d00e      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xd2>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a4b      	ldr	r2, [pc, #300]	; (800720c <HAL_DMA_IRQHandler+0x1e8>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d009      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xd2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a4a      	ldr	r2, [pc, #296]	; (8007210 <HAL_DMA_IRQHandler+0x1ec>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d004      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xd2>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a48      	ldr	r2, [pc, #288]	; (8007214 <HAL_DMA_IRQHandler+0x1f0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d101      	bne.n	80070fa <HAL_DMA_IRQHandler+0xd6>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e000      	b.n	80070fc <HAL_DMA_IRQHandler+0xd8>
 80070fa:	2300      	movs	r3, #0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 842b 	beq.w	8007958 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007106:	f003 031f 	and.w	r3, r3, #31
 800710a:	2208      	movs	r2, #8
 800710c:	409a      	lsls	r2, r3
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	4013      	ands	r3, r2
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 80a2 	beq.w	800725c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a2e      	ldr	r2, [pc, #184]	; (80071d8 <HAL_DMA_IRQHandler+0x1b4>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d04a      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x194>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a2d      	ldr	r2, [pc, #180]	; (80071dc <HAL_DMA_IRQHandler+0x1b8>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d045      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x194>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a2b      	ldr	r2, [pc, #172]	; (80071e0 <HAL_DMA_IRQHandler+0x1bc>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d040      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x194>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a2a      	ldr	r2, [pc, #168]	; (80071e4 <HAL_DMA_IRQHandler+0x1c0>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d03b      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x194>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a28      	ldr	r2, [pc, #160]	; (80071e8 <HAL_DMA_IRQHandler+0x1c4>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d036      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x194>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a27      	ldr	r2, [pc, #156]	; (80071ec <HAL_DMA_IRQHandler+0x1c8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d031      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x194>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a25      	ldr	r2, [pc, #148]	; (80071f0 <HAL_DMA_IRQHandler+0x1cc>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d02c      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x194>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a24      	ldr	r2, [pc, #144]	; (80071f4 <HAL_DMA_IRQHandler+0x1d0>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d027      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x194>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a22      	ldr	r2, [pc, #136]	; (80071f8 <HAL_DMA_IRQHandler+0x1d4>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d022      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x194>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a21      	ldr	r2, [pc, #132]	; (80071fc <HAL_DMA_IRQHandler+0x1d8>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d01d      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x194>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a1f      	ldr	r2, [pc, #124]	; (8007200 <HAL_DMA_IRQHandler+0x1dc>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d018      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x194>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a1e      	ldr	r2, [pc, #120]	; (8007204 <HAL_DMA_IRQHandler+0x1e0>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d013      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x194>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a1c      	ldr	r2, [pc, #112]	; (8007208 <HAL_DMA_IRQHandler+0x1e4>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d00e      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x194>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a1b      	ldr	r2, [pc, #108]	; (800720c <HAL_DMA_IRQHandler+0x1e8>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d009      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x194>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a19      	ldr	r2, [pc, #100]	; (8007210 <HAL_DMA_IRQHandler+0x1ec>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d004      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x194>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a18      	ldr	r2, [pc, #96]	; (8007214 <HAL_DMA_IRQHandler+0x1f0>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d12f      	bne.n	8007218 <HAL_DMA_IRQHandler+0x1f4>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	bf14      	ite	ne
 80071c6:	2301      	movne	r3, #1
 80071c8:	2300      	moveq	r3, #0
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	e02e      	b.n	800722c <HAL_DMA_IRQHandler+0x208>
 80071ce:	bf00      	nop
 80071d0:	24000088 	.word	0x24000088
 80071d4:	1b4e81b5 	.word	0x1b4e81b5
 80071d8:	40020010 	.word	0x40020010
 80071dc:	40020028 	.word	0x40020028
 80071e0:	40020040 	.word	0x40020040
 80071e4:	40020058 	.word	0x40020058
 80071e8:	40020070 	.word	0x40020070
 80071ec:	40020088 	.word	0x40020088
 80071f0:	400200a0 	.word	0x400200a0
 80071f4:	400200b8 	.word	0x400200b8
 80071f8:	40020410 	.word	0x40020410
 80071fc:	40020428 	.word	0x40020428
 8007200:	40020440 	.word	0x40020440
 8007204:	40020458 	.word	0x40020458
 8007208:	40020470 	.word	0x40020470
 800720c:	40020488 	.word	0x40020488
 8007210:	400204a0 	.word	0x400204a0
 8007214:	400204b8 	.word	0x400204b8
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0308 	and.w	r3, r3, #8
 8007222:	2b00      	cmp	r3, #0
 8007224:	bf14      	ite	ne
 8007226:	2301      	movne	r3, #1
 8007228:	2300      	moveq	r3, #0
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	d015      	beq.n	800725c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 0204 	bic.w	r2, r2, #4
 800723e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007244:	f003 031f 	and.w	r3, r3, #31
 8007248:	2208      	movs	r2, #8
 800724a:	409a      	lsls	r2, r3
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007254:	f043 0201 	orr.w	r2, r3, #1
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007260:	f003 031f 	and.w	r3, r3, #31
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	fa22 f303 	lsr.w	r3, r2, r3
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d06e      	beq.n	8007350 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a69      	ldr	r2, [pc, #420]	; (800741c <HAL_DMA_IRQHandler+0x3f8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d04a      	beq.n	8007312 <HAL_DMA_IRQHandler+0x2ee>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a67      	ldr	r2, [pc, #412]	; (8007420 <HAL_DMA_IRQHandler+0x3fc>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d045      	beq.n	8007312 <HAL_DMA_IRQHandler+0x2ee>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a66      	ldr	r2, [pc, #408]	; (8007424 <HAL_DMA_IRQHandler+0x400>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d040      	beq.n	8007312 <HAL_DMA_IRQHandler+0x2ee>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a64      	ldr	r2, [pc, #400]	; (8007428 <HAL_DMA_IRQHandler+0x404>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d03b      	beq.n	8007312 <HAL_DMA_IRQHandler+0x2ee>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a63      	ldr	r2, [pc, #396]	; (800742c <HAL_DMA_IRQHandler+0x408>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d036      	beq.n	8007312 <HAL_DMA_IRQHandler+0x2ee>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a61      	ldr	r2, [pc, #388]	; (8007430 <HAL_DMA_IRQHandler+0x40c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d031      	beq.n	8007312 <HAL_DMA_IRQHandler+0x2ee>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a60      	ldr	r2, [pc, #384]	; (8007434 <HAL_DMA_IRQHandler+0x410>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d02c      	beq.n	8007312 <HAL_DMA_IRQHandler+0x2ee>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a5e      	ldr	r2, [pc, #376]	; (8007438 <HAL_DMA_IRQHandler+0x414>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d027      	beq.n	8007312 <HAL_DMA_IRQHandler+0x2ee>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a5d      	ldr	r2, [pc, #372]	; (800743c <HAL_DMA_IRQHandler+0x418>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d022      	beq.n	8007312 <HAL_DMA_IRQHandler+0x2ee>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a5b      	ldr	r2, [pc, #364]	; (8007440 <HAL_DMA_IRQHandler+0x41c>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d01d      	beq.n	8007312 <HAL_DMA_IRQHandler+0x2ee>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a5a      	ldr	r2, [pc, #360]	; (8007444 <HAL_DMA_IRQHandler+0x420>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d018      	beq.n	8007312 <HAL_DMA_IRQHandler+0x2ee>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a58      	ldr	r2, [pc, #352]	; (8007448 <HAL_DMA_IRQHandler+0x424>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d013      	beq.n	8007312 <HAL_DMA_IRQHandler+0x2ee>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a57      	ldr	r2, [pc, #348]	; (800744c <HAL_DMA_IRQHandler+0x428>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d00e      	beq.n	8007312 <HAL_DMA_IRQHandler+0x2ee>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a55      	ldr	r2, [pc, #340]	; (8007450 <HAL_DMA_IRQHandler+0x42c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d009      	beq.n	8007312 <HAL_DMA_IRQHandler+0x2ee>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a54      	ldr	r2, [pc, #336]	; (8007454 <HAL_DMA_IRQHandler+0x430>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d004      	beq.n	8007312 <HAL_DMA_IRQHandler+0x2ee>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a52      	ldr	r2, [pc, #328]	; (8007458 <HAL_DMA_IRQHandler+0x434>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d10a      	bne.n	8007328 <HAL_DMA_IRQHandler+0x304>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800731c:	2b00      	cmp	r3, #0
 800731e:	bf14      	ite	ne
 8007320:	2301      	movne	r3, #1
 8007322:	2300      	moveq	r3, #0
 8007324:	b2db      	uxtb	r3, r3
 8007326:	e003      	b.n	8007330 <HAL_DMA_IRQHandler+0x30c>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2300      	movs	r3, #0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00d      	beq.n	8007350 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007338:	f003 031f 	and.w	r3, r3, #31
 800733c:	2201      	movs	r2, #1
 800733e:	409a      	lsls	r2, r3
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007348:	f043 0202 	orr.w	r2, r3, #2
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007354:	f003 031f 	and.w	r3, r3, #31
 8007358:	2204      	movs	r2, #4
 800735a:	409a      	lsls	r2, r3
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	4013      	ands	r3, r2
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 808f 	beq.w	8007484 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a2c      	ldr	r2, [pc, #176]	; (800741c <HAL_DMA_IRQHandler+0x3f8>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d04a      	beq.n	8007406 <HAL_DMA_IRQHandler+0x3e2>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a2a      	ldr	r2, [pc, #168]	; (8007420 <HAL_DMA_IRQHandler+0x3fc>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d045      	beq.n	8007406 <HAL_DMA_IRQHandler+0x3e2>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a29      	ldr	r2, [pc, #164]	; (8007424 <HAL_DMA_IRQHandler+0x400>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d040      	beq.n	8007406 <HAL_DMA_IRQHandler+0x3e2>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a27      	ldr	r2, [pc, #156]	; (8007428 <HAL_DMA_IRQHandler+0x404>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d03b      	beq.n	8007406 <HAL_DMA_IRQHandler+0x3e2>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a26      	ldr	r2, [pc, #152]	; (800742c <HAL_DMA_IRQHandler+0x408>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d036      	beq.n	8007406 <HAL_DMA_IRQHandler+0x3e2>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a24      	ldr	r2, [pc, #144]	; (8007430 <HAL_DMA_IRQHandler+0x40c>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d031      	beq.n	8007406 <HAL_DMA_IRQHandler+0x3e2>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a23      	ldr	r2, [pc, #140]	; (8007434 <HAL_DMA_IRQHandler+0x410>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d02c      	beq.n	8007406 <HAL_DMA_IRQHandler+0x3e2>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a21      	ldr	r2, [pc, #132]	; (8007438 <HAL_DMA_IRQHandler+0x414>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d027      	beq.n	8007406 <HAL_DMA_IRQHandler+0x3e2>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a20      	ldr	r2, [pc, #128]	; (800743c <HAL_DMA_IRQHandler+0x418>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d022      	beq.n	8007406 <HAL_DMA_IRQHandler+0x3e2>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a1e      	ldr	r2, [pc, #120]	; (8007440 <HAL_DMA_IRQHandler+0x41c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d01d      	beq.n	8007406 <HAL_DMA_IRQHandler+0x3e2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a1d      	ldr	r2, [pc, #116]	; (8007444 <HAL_DMA_IRQHandler+0x420>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d018      	beq.n	8007406 <HAL_DMA_IRQHandler+0x3e2>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a1b      	ldr	r2, [pc, #108]	; (8007448 <HAL_DMA_IRQHandler+0x424>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d013      	beq.n	8007406 <HAL_DMA_IRQHandler+0x3e2>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a1a      	ldr	r2, [pc, #104]	; (800744c <HAL_DMA_IRQHandler+0x428>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00e      	beq.n	8007406 <HAL_DMA_IRQHandler+0x3e2>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a18      	ldr	r2, [pc, #96]	; (8007450 <HAL_DMA_IRQHandler+0x42c>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d009      	beq.n	8007406 <HAL_DMA_IRQHandler+0x3e2>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a17      	ldr	r2, [pc, #92]	; (8007454 <HAL_DMA_IRQHandler+0x430>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d004      	beq.n	8007406 <HAL_DMA_IRQHandler+0x3e2>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a15      	ldr	r2, [pc, #84]	; (8007458 <HAL_DMA_IRQHandler+0x434>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d12a      	bne.n	800745c <HAL_DMA_IRQHandler+0x438>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0302 	and.w	r3, r3, #2
 8007410:	2b00      	cmp	r3, #0
 8007412:	bf14      	ite	ne
 8007414:	2301      	movne	r3, #1
 8007416:	2300      	moveq	r3, #0
 8007418:	b2db      	uxtb	r3, r3
 800741a:	e023      	b.n	8007464 <HAL_DMA_IRQHandler+0x440>
 800741c:	40020010 	.word	0x40020010
 8007420:	40020028 	.word	0x40020028
 8007424:	40020040 	.word	0x40020040
 8007428:	40020058 	.word	0x40020058
 800742c:	40020070 	.word	0x40020070
 8007430:	40020088 	.word	0x40020088
 8007434:	400200a0 	.word	0x400200a0
 8007438:	400200b8 	.word	0x400200b8
 800743c:	40020410 	.word	0x40020410
 8007440:	40020428 	.word	0x40020428
 8007444:	40020440 	.word	0x40020440
 8007448:	40020458 	.word	0x40020458
 800744c:	40020470 	.word	0x40020470
 8007450:	40020488 	.word	0x40020488
 8007454:	400204a0 	.word	0x400204a0
 8007458:	400204b8 	.word	0x400204b8
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2300      	movs	r3, #0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00d      	beq.n	8007484 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	2204      	movs	r2, #4
 8007472:	409a      	lsls	r2, r3
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747c:	f043 0204 	orr.w	r2, r3, #4
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007488:	f003 031f 	and.w	r3, r3, #31
 800748c:	2210      	movs	r2, #16
 800748e:	409a      	lsls	r2, r3
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	4013      	ands	r3, r2
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 80a6 	beq.w	80075e6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a85      	ldr	r2, [pc, #532]	; (80076b4 <HAL_DMA_IRQHandler+0x690>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d04a      	beq.n	800753a <HAL_DMA_IRQHandler+0x516>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a83      	ldr	r2, [pc, #524]	; (80076b8 <HAL_DMA_IRQHandler+0x694>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d045      	beq.n	800753a <HAL_DMA_IRQHandler+0x516>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a82      	ldr	r2, [pc, #520]	; (80076bc <HAL_DMA_IRQHandler+0x698>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d040      	beq.n	800753a <HAL_DMA_IRQHandler+0x516>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a80      	ldr	r2, [pc, #512]	; (80076c0 <HAL_DMA_IRQHandler+0x69c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d03b      	beq.n	800753a <HAL_DMA_IRQHandler+0x516>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a7f      	ldr	r2, [pc, #508]	; (80076c4 <HAL_DMA_IRQHandler+0x6a0>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d036      	beq.n	800753a <HAL_DMA_IRQHandler+0x516>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a7d      	ldr	r2, [pc, #500]	; (80076c8 <HAL_DMA_IRQHandler+0x6a4>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d031      	beq.n	800753a <HAL_DMA_IRQHandler+0x516>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a7c      	ldr	r2, [pc, #496]	; (80076cc <HAL_DMA_IRQHandler+0x6a8>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d02c      	beq.n	800753a <HAL_DMA_IRQHandler+0x516>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a7a      	ldr	r2, [pc, #488]	; (80076d0 <HAL_DMA_IRQHandler+0x6ac>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d027      	beq.n	800753a <HAL_DMA_IRQHandler+0x516>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a79      	ldr	r2, [pc, #484]	; (80076d4 <HAL_DMA_IRQHandler+0x6b0>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d022      	beq.n	800753a <HAL_DMA_IRQHandler+0x516>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a77      	ldr	r2, [pc, #476]	; (80076d8 <HAL_DMA_IRQHandler+0x6b4>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d01d      	beq.n	800753a <HAL_DMA_IRQHandler+0x516>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a76      	ldr	r2, [pc, #472]	; (80076dc <HAL_DMA_IRQHandler+0x6b8>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d018      	beq.n	800753a <HAL_DMA_IRQHandler+0x516>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a74      	ldr	r2, [pc, #464]	; (80076e0 <HAL_DMA_IRQHandler+0x6bc>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d013      	beq.n	800753a <HAL_DMA_IRQHandler+0x516>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a73      	ldr	r2, [pc, #460]	; (80076e4 <HAL_DMA_IRQHandler+0x6c0>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d00e      	beq.n	800753a <HAL_DMA_IRQHandler+0x516>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a71      	ldr	r2, [pc, #452]	; (80076e8 <HAL_DMA_IRQHandler+0x6c4>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d009      	beq.n	800753a <HAL_DMA_IRQHandler+0x516>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a70      	ldr	r2, [pc, #448]	; (80076ec <HAL_DMA_IRQHandler+0x6c8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d004      	beq.n	800753a <HAL_DMA_IRQHandler+0x516>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a6e      	ldr	r2, [pc, #440]	; (80076f0 <HAL_DMA_IRQHandler+0x6cc>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d10a      	bne.n	8007550 <HAL_DMA_IRQHandler+0x52c>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0308 	and.w	r3, r3, #8
 8007544:	2b00      	cmp	r3, #0
 8007546:	bf14      	ite	ne
 8007548:	2301      	movne	r3, #1
 800754a:	2300      	moveq	r3, #0
 800754c:	b2db      	uxtb	r3, r3
 800754e:	e009      	b.n	8007564 <HAL_DMA_IRQHandler+0x540>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	2b00      	cmp	r3, #0
 800755c:	bf14      	ite	ne
 800755e:	2301      	movne	r3, #1
 8007560:	2300      	moveq	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d03e      	beq.n	80075e6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800756c:	f003 031f 	and.w	r3, r3, #31
 8007570:	2210      	movs	r2, #16
 8007572:	409a      	lsls	r2, r3
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d018      	beq.n	80075b8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d108      	bne.n	80075a6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d024      	beq.n	80075e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	4798      	blx	r3
 80075a4:	e01f      	b.n	80075e6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d01b      	beq.n	80075e6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	4798      	blx	r3
 80075b6:	e016      	b.n	80075e6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d107      	bne.n	80075d6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f022 0208 	bic.w	r2, r2, #8
 80075d4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ea:	f003 031f 	and.w	r3, r3, #31
 80075ee:	2220      	movs	r2, #32
 80075f0:	409a      	lsls	r2, r3
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	4013      	ands	r3, r2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 8110 	beq.w	800781c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a2c      	ldr	r2, [pc, #176]	; (80076b4 <HAL_DMA_IRQHandler+0x690>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d04a      	beq.n	800769c <HAL_DMA_IRQHandler+0x678>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a2b      	ldr	r2, [pc, #172]	; (80076b8 <HAL_DMA_IRQHandler+0x694>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d045      	beq.n	800769c <HAL_DMA_IRQHandler+0x678>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a29      	ldr	r2, [pc, #164]	; (80076bc <HAL_DMA_IRQHandler+0x698>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d040      	beq.n	800769c <HAL_DMA_IRQHandler+0x678>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a28      	ldr	r2, [pc, #160]	; (80076c0 <HAL_DMA_IRQHandler+0x69c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d03b      	beq.n	800769c <HAL_DMA_IRQHandler+0x678>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a26      	ldr	r2, [pc, #152]	; (80076c4 <HAL_DMA_IRQHandler+0x6a0>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d036      	beq.n	800769c <HAL_DMA_IRQHandler+0x678>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a25      	ldr	r2, [pc, #148]	; (80076c8 <HAL_DMA_IRQHandler+0x6a4>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d031      	beq.n	800769c <HAL_DMA_IRQHandler+0x678>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a23      	ldr	r2, [pc, #140]	; (80076cc <HAL_DMA_IRQHandler+0x6a8>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d02c      	beq.n	800769c <HAL_DMA_IRQHandler+0x678>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a22      	ldr	r2, [pc, #136]	; (80076d0 <HAL_DMA_IRQHandler+0x6ac>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d027      	beq.n	800769c <HAL_DMA_IRQHandler+0x678>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a20      	ldr	r2, [pc, #128]	; (80076d4 <HAL_DMA_IRQHandler+0x6b0>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d022      	beq.n	800769c <HAL_DMA_IRQHandler+0x678>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a1f      	ldr	r2, [pc, #124]	; (80076d8 <HAL_DMA_IRQHandler+0x6b4>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d01d      	beq.n	800769c <HAL_DMA_IRQHandler+0x678>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a1d      	ldr	r2, [pc, #116]	; (80076dc <HAL_DMA_IRQHandler+0x6b8>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d018      	beq.n	800769c <HAL_DMA_IRQHandler+0x678>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a1c      	ldr	r2, [pc, #112]	; (80076e0 <HAL_DMA_IRQHandler+0x6bc>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d013      	beq.n	800769c <HAL_DMA_IRQHandler+0x678>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a1a      	ldr	r2, [pc, #104]	; (80076e4 <HAL_DMA_IRQHandler+0x6c0>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d00e      	beq.n	800769c <HAL_DMA_IRQHandler+0x678>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a19      	ldr	r2, [pc, #100]	; (80076e8 <HAL_DMA_IRQHandler+0x6c4>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d009      	beq.n	800769c <HAL_DMA_IRQHandler+0x678>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a17      	ldr	r2, [pc, #92]	; (80076ec <HAL_DMA_IRQHandler+0x6c8>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d004      	beq.n	800769c <HAL_DMA_IRQHandler+0x678>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a16      	ldr	r2, [pc, #88]	; (80076f0 <HAL_DMA_IRQHandler+0x6cc>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d12b      	bne.n	80076f4 <HAL_DMA_IRQHandler+0x6d0>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0310 	and.w	r3, r3, #16
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bf14      	ite	ne
 80076aa:	2301      	movne	r3, #1
 80076ac:	2300      	moveq	r3, #0
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	e02a      	b.n	8007708 <HAL_DMA_IRQHandler+0x6e4>
 80076b2:	bf00      	nop
 80076b4:	40020010 	.word	0x40020010
 80076b8:	40020028 	.word	0x40020028
 80076bc:	40020040 	.word	0x40020040
 80076c0:	40020058 	.word	0x40020058
 80076c4:	40020070 	.word	0x40020070
 80076c8:	40020088 	.word	0x40020088
 80076cc:	400200a0 	.word	0x400200a0
 80076d0:	400200b8 	.word	0x400200b8
 80076d4:	40020410 	.word	0x40020410
 80076d8:	40020428 	.word	0x40020428
 80076dc:	40020440 	.word	0x40020440
 80076e0:	40020458 	.word	0x40020458
 80076e4:	40020470 	.word	0x40020470
 80076e8:	40020488 	.word	0x40020488
 80076ec:	400204a0 	.word	0x400204a0
 80076f0:	400204b8 	.word	0x400204b8
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0302 	and.w	r3, r3, #2
 80076fe:	2b00      	cmp	r3, #0
 8007700:	bf14      	ite	ne
 8007702:	2301      	movne	r3, #1
 8007704:	2300      	moveq	r3, #0
 8007706:	b2db      	uxtb	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 8087 	beq.w	800781c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007712:	f003 031f 	and.w	r3, r3, #31
 8007716:	2220      	movs	r2, #32
 8007718:	409a      	lsls	r2, r3
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b04      	cmp	r3, #4
 8007728:	d139      	bne.n	800779e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f022 0216 	bic.w	r2, r2, #22
 8007738:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	695a      	ldr	r2, [r3, #20]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007748:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	d103      	bne.n	800775a <HAL_DMA_IRQHandler+0x736>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007756:	2b00      	cmp	r3, #0
 8007758:	d007      	beq.n	800776a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0208 	bic.w	r2, r2, #8
 8007768:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800776e:	f003 031f 	and.w	r3, r3, #31
 8007772:	223f      	movs	r2, #63	; 0x3f
 8007774:	409a      	lsls	r2, r3
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800778e:	2b00      	cmp	r3, #0
 8007790:	f000 834a 	beq.w	8007e28 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	4798      	blx	r3
          }
          return;
 800779c:	e344      	b.n	8007e28 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d018      	beq.n	80077de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d108      	bne.n	80077cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d02c      	beq.n	800781c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	4798      	blx	r3
 80077ca:	e027      	b.n	800781c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d023      	beq.n	800781c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	4798      	blx	r3
 80077dc:	e01e      	b.n	800781c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10f      	bne.n	800780c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 0210 	bic.w	r2, r2, #16
 80077fa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007810:	2b00      	cmp	r3, #0
 8007812:	d003      	beq.n	800781c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 8306 	beq.w	8007e32 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 8088 	beq.w	8007944 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2204      	movs	r2, #4
 8007838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a7a      	ldr	r2, [pc, #488]	; (8007a2c <HAL_DMA_IRQHandler+0xa08>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d04a      	beq.n	80078dc <HAL_DMA_IRQHandler+0x8b8>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a79      	ldr	r2, [pc, #484]	; (8007a30 <HAL_DMA_IRQHandler+0xa0c>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d045      	beq.n	80078dc <HAL_DMA_IRQHandler+0x8b8>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a77      	ldr	r2, [pc, #476]	; (8007a34 <HAL_DMA_IRQHandler+0xa10>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d040      	beq.n	80078dc <HAL_DMA_IRQHandler+0x8b8>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a76      	ldr	r2, [pc, #472]	; (8007a38 <HAL_DMA_IRQHandler+0xa14>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d03b      	beq.n	80078dc <HAL_DMA_IRQHandler+0x8b8>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a74      	ldr	r2, [pc, #464]	; (8007a3c <HAL_DMA_IRQHandler+0xa18>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d036      	beq.n	80078dc <HAL_DMA_IRQHandler+0x8b8>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a73      	ldr	r2, [pc, #460]	; (8007a40 <HAL_DMA_IRQHandler+0xa1c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d031      	beq.n	80078dc <HAL_DMA_IRQHandler+0x8b8>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a71      	ldr	r2, [pc, #452]	; (8007a44 <HAL_DMA_IRQHandler+0xa20>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d02c      	beq.n	80078dc <HAL_DMA_IRQHandler+0x8b8>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a70      	ldr	r2, [pc, #448]	; (8007a48 <HAL_DMA_IRQHandler+0xa24>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d027      	beq.n	80078dc <HAL_DMA_IRQHandler+0x8b8>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a6e      	ldr	r2, [pc, #440]	; (8007a4c <HAL_DMA_IRQHandler+0xa28>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d022      	beq.n	80078dc <HAL_DMA_IRQHandler+0x8b8>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a6d      	ldr	r2, [pc, #436]	; (8007a50 <HAL_DMA_IRQHandler+0xa2c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d01d      	beq.n	80078dc <HAL_DMA_IRQHandler+0x8b8>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a6b      	ldr	r2, [pc, #428]	; (8007a54 <HAL_DMA_IRQHandler+0xa30>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d018      	beq.n	80078dc <HAL_DMA_IRQHandler+0x8b8>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a6a      	ldr	r2, [pc, #424]	; (8007a58 <HAL_DMA_IRQHandler+0xa34>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d013      	beq.n	80078dc <HAL_DMA_IRQHandler+0x8b8>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a68      	ldr	r2, [pc, #416]	; (8007a5c <HAL_DMA_IRQHandler+0xa38>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00e      	beq.n	80078dc <HAL_DMA_IRQHandler+0x8b8>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a67      	ldr	r2, [pc, #412]	; (8007a60 <HAL_DMA_IRQHandler+0xa3c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d009      	beq.n	80078dc <HAL_DMA_IRQHandler+0x8b8>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a65      	ldr	r2, [pc, #404]	; (8007a64 <HAL_DMA_IRQHandler+0xa40>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d004      	beq.n	80078dc <HAL_DMA_IRQHandler+0x8b8>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a64      	ldr	r2, [pc, #400]	; (8007a68 <HAL_DMA_IRQHandler+0xa44>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d108      	bne.n	80078ee <HAL_DMA_IRQHandler+0x8ca>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 0201 	bic.w	r2, r2, #1
 80078ea:	601a      	str	r2, [r3, #0]
 80078ec:	e007      	b.n	80078fe <HAL_DMA_IRQHandler+0x8da>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 0201 	bic.w	r2, r2, #1
 80078fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3301      	adds	r3, #1
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007906:	429a      	cmp	r2, r3
 8007908:	d307      	bcc.n	800791a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1f2      	bne.n	80078fe <HAL_DMA_IRQHandler+0x8da>
 8007918:	e000      	b.n	800791c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800791a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d004      	beq.n	8007934 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2203      	movs	r2, #3
 800792e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007932:	e003      	b.n	800793c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 8272 	beq.w	8007e32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	4798      	blx	r3
 8007956:	e26c      	b.n	8007e32 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a43      	ldr	r2, [pc, #268]	; (8007a6c <HAL_DMA_IRQHandler+0xa48>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d022      	beq.n	80079a8 <HAL_DMA_IRQHandler+0x984>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a42      	ldr	r2, [pc, #264]	; (8007a70 <HAL_DMA_IRQHandler+0xa4c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d01d      	beq.n	80079a8 <HAL_DMA_IRQHandler+0x984>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a40      	ldr	r2, [pc, #256]	; (8007a74 <HAL_DMA_IRQHandler+0xa50>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d018      	beq.n	80079a8 <HAL_DMA_IRQHandler+0x984>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a3f      	ldr	r2, [pc, #252]	; (8007a78 <HAL_DMA_IRQHandler+0xa54>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d013      	beq.n	80079a8 <HAL_DMA_IRQHandler+0x984>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a3d      	ldr	r2, [pc, #244]	; (8007a7c <HAL_DMA_IRQHandler+0xa58>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d00e      	beq.n	80079a8 <HAL_DMA_IRQHandler+0x984>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a3c      	ldr	r2, [pc, #240]	; (8007a80 <HAL_DMA_IRQHandler+0xa5c>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d009      	beq.n	80079a8 <HAL_DMA_IRQHandler+0x984>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a3a      	ldr	r2, [pc, #232]	; (8007a84 <HAL_DMA_IRQHandler+0xa60>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d004      	beq.n	80079a8 <HAL_DMA_IRQHandler+0x984>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a39      	ldr	r2, [pc, #228]	; (8007a88 <HAL_DMA_IRQHandler+0xa64>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d101      	bne.n	80079ac <HAL_DMA_IRQHandler+0x988>
 80079a8:	2301      	movs	r3, #1
 80079aa:	e000      	b.n	80079ae <HAL_DMA_IRQHandler+0x98a>
 80079ac:	2300      	movs	r3, #0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 823f 	beq.w	8007e32 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c0:	f003 031f 	and.w	r3, r3, #31
 80079c4:	2204      	movs	r2, #4
 80079c6:	409a      	lsls	r2, r3
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	4013      	ands	r3, r2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 80cd 	beq.w	8007b6c <HAL_DMA_IRQHandler+0xb48>
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80c7 	beq.w	8007b6c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e2:	f003 031f 	and.w	r3, r3, #31
 80079e6:	2204      	movs	r2, #4
 80079e8:	409a      	lsls	r2, r3
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d049      	beq.n	8007a8c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d109      	bne.n	8007a16 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 8210 	beq.w	8007e2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a14:	e20a      	b.n	8007e2c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f000 8206 	beq.w	8007e2c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a28:	e200      	b.n	8007e2c <HAL_DMA_IRQHandler+0xe08>
 8007a2a:	bf00      	nop
 8007a2c:	40020010 	.word	0x40020010
 8007a30:	40020028 	.word	0x40020028
 8007a34:	40020040 	.word	0x40020040
 8007a38:	40020058 	.word	0x40020058
 8007a3c:	40020070 	.word	0x40020070
 8007a40:	40020088 	.word	0x40020088
 8007a44:	400200a0 	.word	0x400200a0
 8007a48:	400200b8 	.word	0x400200b8
 8007a4c:	40020410 	.word	0x40020410
 8007a50:	40020428 	.word	0x40020428
 8007a54:	40020440 	.word	0x40020440
 8007a58:	40020458 	.word	0x40020458
 8007a5c:	40020470 	.word	0x40020470
 8007a60:	40020488 	.word	0x40020488
 8007a64:	400204a0 	.word	0x400204a0
 8007a68:	400204b8 	.word	0x400204b8
 8007a6c:	58025408 	.word	0x58025408
 8007a70:	5802541c 	.word	0x5802541c
 8007a74:	58025430 	.word	0x58025430
 8007a78:	58025444 	.word	0x58025444
 8007a7c:	58025458 	.word	0x58025458
 8007a80:	5802546c 	.word	0x5802546c
 8007a84:	58025480 	.word	0x58025480
 8007a88:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	f003 0320 	and.w	r3, r3, #32
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d160      	bne.n	8007b58 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a7f      	ldr	r2, [pc, #508]	; (8007c98 <HAL_DMA_IRQHandler+0xc74>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d04a      	beq.n	8007b36 <HAL_DMA_IRQHandler+0xb12>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a7d      	ldr	r2, [pc, #500]	; (8007c9c <HAL_DMA_IRQHandler+0xc78>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d045      	beq.n	8007b36 <HAL_DMA_IRQHandler+0xb12>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a7c      	ldr	r2, [pc, #496]	; (8007ca0 <HAL_DMA_IRQHandler+0xc7c>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d040      	beq.n	8007b36 <HAL_DMA_IRQHandler+0xb12>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a7a      	ldr	r2, [pc, #488]	; (8007ca4 <HAL_DMA_IRQHandler+0xc80>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d03b      	beq.n	8007b36 <HAL_DMA_IRQHandler+0xb12>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a79      	ldr	r2, [pc, #484]	; (8007ca8 <HAL_DMA_IRQHandler+0xc84>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d036      	beq.n	8007b36 <HAL_DMA_IRQHandler+0xb12>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a77      	ldr	r2, [pc, #476]	; (8007cac <HAL_DMA_IRQHandler+0xc88>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d031      	beq.n	8007b36 <HAL_DMA_IRQHandler+0xb12>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a76      	ldr	r2, [pc, #472]	; (8007cb0 <HAL_DMA_IRQHandler+0xc8c>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d02c      	beq.n	8007b36 <HAL_DMA_IRQHandler+0xb12>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a74      	ldr	r2, [pc, #464]	; (8007cb4 <HAL_DMA_IRQHandler+0xc90>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d027      	beq.n	8007b36 <HAL_DMA_IRQHandler+0xb12>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a73      	ldr	r2, [pc, #460]	; (8007cb8 <HAL_DMA_IRQHandler+0xc94>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d022      	beq.n	8007b36 <HAL_DMA_IRQHandler+0xb12>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a71      	ldr	r2, [pc, #452]	; (8007cbc <HAL_DMA_IRQHandler+0xc98>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d01d      	beq.n	8007b36 <HAL_DMA_IRQHandler+0xb12>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a70      	ldr	r2, [pc, #448]	; (8007cc0 <HAL_DMA_IRQHandler+0xc9c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d018      	beq.n	8007b36 <HAL_DMA_IRQHandler+0xb12>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a6e      	ldr	r2, [pc, #440]	; (8007cc4 <HAL_DMA_IRQHandler+0xca0>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d013      	beq.n	8007b36 <HAL_DMA_IRQHandler+0xb12>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a6d      	ldr	r2, [pc, #436]	; (8007cc8 <HAL_DMA_IRQHandler+0xca4>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d00e      	beq.n	8007b36 <HAL_DMA_IRQHandler+0xb12>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a6b      	ldr	r2, [pc, #428]	; (8007ccc <HAL_DMA_IRQHandler+0xca8>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d009      	beq.n	8007b36 <HAL_DMA_IRQHandler+0xb12>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a6a      	ldr	r2, [pc, #424]	; (8007cd0 <HAL_DMA_IRQHandler+0xcac>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d004      	beq.n	8007b36 <HAL_DMA_IRQHandler+0xb12>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a68      	ldr	r2, [pc, #416]	; (8007cd4 <HAL_DMA_IRQHandler+0xcb0>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d108      	bne.n	8007b48 <HAL_DMA_IRQHandler+0xb24>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0208 	bic.w	r2, r2, #8
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	e007      	b.n	8007b58 <HAL_DMA_IRQHandler+0xb34>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0204 	bic.w	r2, r2, #4
 8007b56:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 8165 	beq.w	8007e2c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b6a:	e15f      	b.n	8007e2c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b70:	f003 031f 	and.w	r3, r3, #31
 8007b74:	2202      	movs	r2, #2
 8007b76:	409a      	lsls	r2, r3
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 80c5 	beq.w	8007d0c <HAL_DMA_IRQHandler+0xce8>
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 80bf 	beq.w	8007d0c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b92:	f003 031f 	and.w	r3, r3, #31
 8007b96:	2202      	movs	r2, #2
 8007b98:	409a      	lsls	r2, r3
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d018      	beq.n	8007bda <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d109      	bne.n	8007bc6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f000 813a 	beq.w	8007e30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bc4:	e134      	b.n	8007e30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 8130 	beq.w	8007e30 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bd8:	e12a      	b.n	8007e30 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f003 0320 	and.w	r3, r3, #32
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f040 8089 	bne.w	8007cf8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a2b      	ldr	r2, [pc, #172]	; (8007c98 <HAL_DMA_IRQHandler+0xc74>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d04a      	beq.n	8007c86 <HAL_DMA_IRQHandler+0xc62>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a29      	ldr	r2, [pc, #164]	; (8007c9c <HAL_DMA_IRQHandler+0xc78>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d045      	beq.n	8007c86 <HAL_DMA_IRQHandler+0xc62>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a28      	ldr	r2, [pc, #160]	; (8007ca0 <HAL_DMA_IRQHandler+0xc7c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d040      	beq.n	8007c86 <HAL_DMA_IRQHandler+0xc62>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a26      	ldr	r2, [pc, #152]	; (8007ca4 <HAL_DMA_IRQHandler+0xc80>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d03b      	beq.n	8007c86 <HAL_DMA_IRQHandler+0xc62>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a25      	ldr	r2, [pc, #148]	; (8007ca8 <HAL_DMA_IRQHandler+0xc84>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d036      	beq.n	8007c86 <HAL_DMA_IRQHandler+0xc62>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a23      	ldr	r2, [pc, #140]	; (8007cac <HAL_DMA_IRQHandler+0xc88>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d031      	beq.n	8007c86 <HAL_DMA_IRQHandler+0xc62>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a22      	ldr	r2, [pc, #136]	; (8007cb0 <HAL_DMA_IRQHandler+0xc8c>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d02c      	beq.n	8007c86 <HAL_DMA_IRQHandler+0xc62>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a20      	ldr	r2, [pc, #128]	; (8007cb4 <HAL_DMA_IRQHandler+0xc90>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d027      	beq.n	8007c86 <HAL_DMA_IRQHandler+0xc62>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a1f      	ldr	r2, [pc, #124]	; (8007cb8 <HAL_DMA_IRQHandler+0xc94>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d022      	beq.n	8007c86 <HAL_DMA_IRQHandler+0xc62>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a1d      	ldr	r2, [pc, #116]	; (8007cbc <HAL_DMA_IRQHandler+0xc98>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d01d      	beq.n	8007c86 <HAL_DMA_IRQHandler+0xc62>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a1c      	ldr	r2, [pc, #112]	; (8007cc0 <HAL_DMA_IRQHandler+0xc9c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d018      	beq.n	8007c86 <HAL_DMA_IRQHandler+0xc62>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a1a      	ldr	r2, [pc, #104]	; (8007cc4 <HAL_DMA_IRQHandler+0xca0>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d013      	beq.n	8007c86 <HAL_DMA_IRQHandler+0xc62>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a19      	ldr	r2, [pc, #100]	; (8007cc8 <HAL_DMA_IRQHandler+0xca4>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d00e      	beq.n	8007c86 <HAL_DMA_IRQHandler+0xc62>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a17      	ldr	r2, [pc, #92]	; (8007ccc <HAL_DMA_IRQHandler+0xca8>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d009      	beq.n	8007c86 <HAL_DMA_IRQHandler+0xc62>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a16      	ldr	r2, [pc, #88]	; (8007cd0 <HAL_DMA_IRQHandler+0xcac>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d004      	beq.n	8007c86 <HAL_DMA_IRQHandler+0xc62>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a14      	ldr	r2, [pc, #80]	; (8007cd4 <HAL_DMA_IRQHandler+0xcb0>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d128      	bne.n	8007cd8 <HAL_DMA_IRQHandler+0xcb4>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 0214 	bic.w	r2, r2, #20
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	e027      	b.n	8007ce8 <HAL_DMA_IRQHandler+0xcc4>
 8007c98:	40020010 	.word	0x40020010
 8007c9c:	40020028 	.word	0x40020028
 8007ca0:	40020040 	.word	0x40020040
 8007ca4:	40020058 	.word	0x40020058
 8007ca8:	40020070 	.word	0x40020070
 8007cac:	40020088 	.word	0x40020088
 8007cb0:	400200a0 	.word	0x400200a0
 8007cb4:	400200b8 	.word	0x400200b8
 8007cb8:	40020410 	.word	0x40020410
 8007cbc:	40020428 	.word	0x40020428
 8007cc0:	40020440 	.word	0x40020440
 8007cc4:	40020458 	.word	0x40020458
 8007cc8:	40020470 	.word	0x40020470
 8007ccc:	40020488 	.word	0x40020488
 8007cd0:	400204a0 	.word	0x400204a0
 8007cd4:	400204b8 	.word	0x400204b8
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681a      	ldr	r2, [r3, #0]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f022 020a 	bic.w	r2, r2, #10
 8007ce6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f000 8097 	beq.w	8007e30 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d0a:	e091      	b.n	8007e30 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d10:	f003 031f 	and.w	r3, r3, #31
 8007d14:	2208      	movs	r2, #8
 8007d16:	409a      	lsls	r2, r3
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 8088 	beq.w	8007e32 <HAL_DMA_IRQHandler+0xe0e>
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 8082 	beq.w	8007e32 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a41      	ldr	r2, [pc, #260]	; (8007e38 <HAL_DMA_IRQHandler+0xe14>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d04a      	beq.n	8007dce <HAL_DMA_IRQHandler+0xdaa>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a3f      	ldr	r2, [pc, #252]	; (8007e3c <HAL_DMA_IRQHandler+0xe18>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d045      	beq.n	8007dce <HAL_DMA_IRQHandler+0xdaa>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a3e      	ldr	r2, [pc, #248]	; (8007e40 <HAL_DMA_IRQHandler+0xe1c>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d040      	beq.n	8007dce <HAL_DMA_IRQHandler+0xdaa>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a3c      	ldr	r2, [pc, #240]	; (8007e44 <HAL_DMA_IRQHandler+0xe20>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d03b      	beq.n	8007dce <HAL_DMA_IRQHandler+0xdaa>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a3b      	ldr	r2, [pc, #236]	; (8007e48 <HAL_DMA_IRQHandler+0xe24>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d036      	beq.n	8007dce <HAL_DMA_IRQHandler+0xdaa>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a39      	ldr	r2, [pc, #228]	; (8007e4c <HAL_DMA_IRQHandler+0xe28>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d031      	beq.n	8007dce <HAL_DMA_IRQHandler+0xdaa>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a38      	ldr	r2, [pc, #224]	; (8007e50 <HAL_DMA_IRQHandler+0xe2c>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d02c      	beq.n	8007dce <HAL_DMA_IRQHandler+0xdaa>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a36      	ldr	r2, [pc, #216]	; (8007e54 <HAL_DMA_IRQHandler+0xe30>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d027      	beq.n	8007dce <HAL_DMA_IRQHandler+0xdaa>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a35      	ldr	r2, [pc, #212]	; (8007e58 <HAL_DMA_IRQHandler+0xe34>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d022      	beq.n	8007dce <HAL_DMA_IRQHandler+0xdaa>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a33      	ldr	r2, [pc, #204]	; (8007e5c <HAL_DMA_IRQHandler+0xe38>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d01d      	beq.n	8007dce <HAL_DMA_IRQHandler+0xdaa>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a32      	ldr	r2, [pc, #200]	; (8007e60 <HAL_DMA_IRQHandler+0xe3c>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d018      	beq.n	8007dce <HAL_DMA_IRQHandler+0xdaa>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a30      	ldr	r2, [pc, #192]	; (8007e64 <HAL_DMA_IRQHandler+0xe40>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d013      	beq.n	8007dce <HAL_DMA_IRQHandler+0xdaa>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a2f      	ldr	r2, [pc, #188]	; (8007e68 <HAL_DMA_IRQHandler+0xe44>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00e      	beq.n	8007dce <HAL_DMA_IRQHandler+0xdaa>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a2d      	ldr	r2, [pc, #180]	; (8007e6c <HAL_DMA_IRQHandler+0xe48>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d009      	beq.n	8007dce <HAL_DMA_IRQHandler+0xdaa>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a2c      	ldr	r2, [pc, #176]	; (8007e70 <HAL_DMA_IRQHandler+0xe4c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d004      	beq.n	8007dce <HAL_DMA_IRQHandler+0xdaa>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a2a      	ldr	r2, [pc, #168]	; (8007e74 <HAL_DMA_IRQHandler+0xe50>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d108      	bne.n	8007de0 <HAL_DMA_IRQHandler+0xdbc>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 021c 	bic.w	r2, r2, #28
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	e007      	b.n	8007df0 <HAL_DMA_IRQHandler+0xdcc>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f022 020e 	bic.w	r2, r2, #14
 8007dee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df4:	f003 031f 	and.w	r3, r3, #31
 8007df8:	2201      	movs	r2, #1
 8007dfa:	409a      	lsls	r2, r3
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d009      	beq.n	8007e32 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	4798      	blx	r3
 8007e26:	e004      	b.n	8007e32 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007e28:	bf00      	nop
 8007e2a:	e002      	b.n	8007e32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e2c:	bf00      	nop
 8007e2e:	e000      	b.n	8007e32 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e30:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e32:	3728      	adds	r7, #40	; 0x28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	40020010 	.word	0x40020010
 8007e3c:	40020028 	.word	0x40020028
 8007e40:	40020040 	.word	0x40020040
 8007e44:	40020058 	.word	0x40020058
 8007e48:	40020070 	.word	0x40020070
 8007e4c:	40020088 	.word	0x40020088
 8007e50:	400200a0 	.word	0x400200a0
 8007e54:	400200b8 	.word	0x400200b8
 8007e58:	40020410 	.word	0x40020410
 8007e5c:	40020428 	.word	0x40020428
 8007e60:	40020440 	.word	0x40020440
 8007e64:	40020458 	.word	0x40020458
 8007e68:	40020470 	.word	0x40020470
 8007e6c:	40020488 	.word	0x40020488
 8007e70:	400204a0 	.word	0x400204a0
 8007e74:	400204b8 	.word	0x400204b8

08007e78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
 8007e84:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e90:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a7f      	ldr	r2, [pc, #508]	; (8008094 <DMA_SetConfig+0x21c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d072      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a7d      	ldr	r2, [pc, #500]	; (8008098 <DMA_SetConfig+0x220>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d06d      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a7c      	ldr	r2, [pc, #496]	; (800809c <DMA_SetConfig+0x224>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d068      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a7a      	ldr	r2, [pc, #488]	; (80080a0 <DMA_SetConfig+0x228>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d063      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a79      	ldr	r2, [pc, #484]	; (80080a4 <DMA_SetConfig+0x22c>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d05e      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a77      	ldr	r2, [pc, #476]	; (80080a8 <DMA_SetConfig+0x230>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d059      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a76      	ldr	r2, [pc, #472]	; (80080ac <DMA_SetConfig+0x234>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d054      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a74      	ldr	r2, [pc, #464]	; (80080b0 <DMA_SetConfig+0x238>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d04f      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a73      	ldr	r2, [pc, #460]	; (80080b4 <DMA_SetConfig+0x23c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d04a      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a71      	ldr	r2, [pc, #452]	; (80080b8 <DMA_SetConfig+0x240>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d045      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a70      	ldr	r2, [pc, #448]	; (80080bc <DMA_SetConfig+0x244>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d040      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a6e      	ldr	r2, [pc, #440]	; (80080c0 <DMA_SetConfig+0x248>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d03b      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a6d      	ldr	r2, [pc, #436]	; (80080c4 <DMA_SetConfig+0x24c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d036      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a6b      	ldr	r2, [pc, #428]	; (80080c8 <DMA_SetConfig+0x250>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d031      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a6a      	ldr	r2, [pc, #424]	; (80080cc <DMA_SetConfig+0x254>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d02c      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a68      	ldr	r2, [pc, #416]	; (80080d0 <DMA_SetConfig+0x258>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d027      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a67      	ldr	r2, [pc, #412]	; (80080d4 <DMA_SetConfig+0x25c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d022      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a65      	ldr	r2, [pc, #404]	; (80080d8 <DMA_SetConfig+0x260>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d01d      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a64      	ldr	r2, [pc, #400]	; (80080dc <DMA_SetConfig+0x264>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d018      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a62      	ldr	r2, [pc, #392]	; (80080e0 <DMA_SetConfig+0x268>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d013      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a61      	ldr	r2, [pc, #388]	; (80080e4 <DMA_SetConfig+0x26c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00e      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a5f      	ldr	r2, [pc, #380]	; (80080e8 <DMA_SetConfig+0x270>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d009      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a5e      	ldr	r2, [pc, #376]	; (80080ec <DMA_SetConfig+0x274>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d004      	beq.n	8007f82 <DMA_SetConfig+0x10a>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a5c      	ldr	r2, [pc, #368]	; (80080f0 <DMA_SetConfig+0x278>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d101      	bne.n	8007f86 <DMA_SetConfig+0x10e>
 8007f82:	2301      	movs	r3, #1
 8007f84:	e000      	b.n	8007f88 <DMA_SetConfig+0x110>
 8007f86:	2300      	movs	r3, #0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00d      	beq.n	8007fa8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007f94:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d004      	beq.n	8007fa8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007fa6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a39      	ldr	r2, [pc, #228]	; (8008094 <DMA_SetConfig+0x21c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d04a      	beq.n	8008048 <DMA_SetConfig+0x1d0>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a38      	ldr	r2, [pc, #224]	; (8008098 <DMA_SetConfig+0x220>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d045      	beq.n	8008048 <DMA_SetConfig+0x1d0>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a36      	ldr	r2, [pc, #216]	; (800809c <DMA_SetConfig+0x224>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d040      	beq.n	8008048 <DMA_SetConfig+0x1d0>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a35      	ldr	r2, [pc, #212]	; (80080a0 <DMA_SetConfig+0x228>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d03b      	beq.n	8008048 <DMA_SetConfig+0x1d0>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a33      	ldr	r2, [pc, #204]	; (80080a4 <DMA_SetConfig+0x22c>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d036      	beq.n	8008048 <DMA_SetConfig+0x1d0>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a32      	ldr	r2, [pc, #200]	; (80080a8 <DMA_SetConfig+0x230>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d031      	beq.n	8008048 <DMA_SetConfig+0x1d0>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a30      	ldr	r2, [pc, #192]	; (80080ac <DMA_SetConfig+0x234>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d02c      	beq.n	8008048 <DMA_SetConfig+0x1d0>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a2f      	ldr	r2, [pc, #188]	; (80080b0 <DMA_SetConfig+0x238>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d027      	beq.n	8008048 <DMA_SetConfig+0x1d0>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a2d      	ldr	r2, [pc, #180]	; (80080b4 <DMA_SetConfig+0x23c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d022      	beq.n	8008048 <DMA_SetConfig+0x1d0>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a2c      	ldr	r2, [pc, #176]	; (80080b8 <DMA_SetConfig+0x240>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d01d      	beq.n	8008048 <DMA_SetConfig+0x1d0>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a2a      	ldr	r2, [pc, #168]	; (80080bc <DMA_SetConfig+0x244>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d018      	beq.n	8008048 <DMA_SetConfig+0x1d0>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a29      	ldr	r2, [pc, #164]	; (80080c0 <DMA_SetConfig+0x248>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d013      	beq.n	8008048 <DMA_SetConfig+0x1d0>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a27      	ldr	r2, [pc, #156]	; (80080c4 <DMA_SetConfig+0x24c>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d00e      	beq.n	8008048 <DMA_SetConfig+0x1d0>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a26      	ldr	r2, [pc, #152]	; (80080c8 <DMA_SetConfig+0x250>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d009      	beq.n	8008048 <DMA_SetConfig+0x1d0>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a24      	ldr	r2, [pc, #144]	; (80080cc <DMA_SetConfig+0x254>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d004      	beq.n	8008048 <DMA_SetConfig+0x1d0>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a23      	ldr	r2, [pc, #140]	; (80080d0 <DMA_SetConfig+0x258>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d101      	bne.n	800804c <DMA_SetConfig+0x1d4>
 8008048:	2301      	movs	r3, #1
 800804a:	e000      	b.n	800804e <DMA_SetConfig+0x1d6>
 800804c:	2300      	movs	r3, #0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d059      	beq.n	8008106 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008056:	f003 031f 	and.w	r3, r3, #31
 800805a:	223f      	movs	r2, #63	; 0x3f
 800805c:	409a      	lsls	r2, r3
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008070:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	2b40      	cmp	r3, #64	; 0x40
 8008080:	d138      	bne.n	80080f4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008092:	e086      	b.n	80081a2 <DMA_SetConfig+0x32a>
 8008094:	40020010 	.word	0x40020010
 8008098:	40020028 	.word	0x40020028
 800809c:	40020040 	.word	0x40020040
 80080a0:	40020058 	.word	0x40020058
 80080a4:	40020070 	.word	0x40020070
 80080a8:	40020088 	.word	0x40020088
 80080ac:	400200a0 	.word	0x400200a0
 80080b0:	400200b8 	.word	0x400200b8
 80080b4:	40020410 	.word	0x40020410
 80080b8:	40020428 	.word	0x40020428
 80080bc:	40020440 	.word	0x40020440
 80080c0:	40020458 	.word	0x40020458
 80080c4:	40020470 	.word	0x40020470
 80080c8:	40020488 	.word	0x40020488
 80080cc:	400204a0 	.word	0x400204a0
 80080d0:	400204b8 	.word	0x400204b8
 80080d4:	58025408 	.word	0x58025408
 80080d8:	5802541c 	.word	0x5802541c
 80080dc:	58025430 	.word	0x58025430
 80080e0:	58025444 	.word	0x58025444
 80080e4:	58025458 	.word	0x58025458
 80080e8:	5802546c 	.word	0x5802546c
 80080ec:	58025480 	.word	0x58025480
 80080f0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	60da      	str	r2, [r3, #12]
}
 8008104:	e04d      	b.n	80081a2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a29      	ldr	r2, [pc, #164]	; (80081b0 <DMA_SetConfig+0x338>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d022      	beq.n	8008156 <DMA_SetConfig+0x2de>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a27      	ldr	r2, [pc, #156]	; (80081b4 <DMA_SetConfig+0x33c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d01d      	beq.n	8008156 <DMA_SetConfig+0x2de>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a26      	ldr	r2, [pc, #152]	; (80081b8 <DMA_SetConfig+0x340>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d018      	beq.n	8008156 <DMA_SetConfig+0x2de>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a24      	ldr	r2, [pc, #144]	; (80081bc <DMA_SetConfig+0x344>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d013      	beq.n	8008156 <DMA_SetConfig+0x2de>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a23      	ldr	r2, [pc, #140]	; (80081c0 <DMA_SetConfig+0x348>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d00e      	beq.n	8008156 <DMA_SetConfig+0x2de>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a21      	ldr	r2, [pc, #132]	; (80081c4 <DMA_SetConfig+0x34c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d009      	beq.n	8008156 <DMA_SetConfig+0x2de>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a20      	ldr	r2, [pc, #128]	; (80081c8 <DMA_SetConfig+0x350>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d004      	beq.n	8008156 <DMA_SetConfig+0x2de>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a1e      	ldr	r2, [pc, #120]	; (80081cc <DMA_SetConfig+0x354>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d101      	bne.n	800815a <DMA_SetConfig+0x2e2>
 8008156:	2301      	movs	r3, #1
 8008158:	e000      	b.n	800815c <DMA_SetConfig+0x2e4>
 800815a:	2300      	movs	r3, #0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d020      	beq.n	80081a2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008164:	f003 031f 	and.w	r3, r3, #31
 8008168:	2201      	movs	r2, #1
 800816a:	409a      	lsls	r2, r3
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	2b40      	cmp	r3, #64	; 0x40
 800817e:	d108      	bne.n	8008192 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	60da      	str	r2, [r3, #12]
}
 8008190:	e007      	b.n	80081a2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	60da      	str	r2, [r3, #12]
}
 80081a2:	bf00      	nop
 80081a4:	371c      	adds	r7, #28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	58025408 	.word	0x58025408
 80081b4:	5802541c 	.word	0x5802541c
 80081b8:	58025430 	.word	0x58025430
 80081bc:	58025444 	.word	0x58025444
 80081c0:	58025458 	.word	0x58025458
 80081c4:	5802546c 	.word	0x5802546c
 80081c8:	58025480 	.word	0x58025480
 80081cc:	58025494 	.word	0x58025494

080081d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a42      	ldr	r2, [pc, #264]	; (80082e8 <DMA_CalcBaseAndBitshift+0x118>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d04a      	beq.n	8008278 <DMA_CalcBaseAndBitshift+0xa8>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a41      	ldr	r2, [pc, #260]	; (80082ec <DMA_CalcBaseAndBitshift+0x11c>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d045      	beq.n	8008278 <DMA_CalcBaseAndBitshift+0xa8>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a3f      	ldr	r2, [pc, #252]	; (80082f0 <DMA_CalcBaseAndBitshift+0x120>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d040      	beq.n	8008278 <DMA_CalcBaseAndBitshift+0xa8>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a3e      	ldr	r2, [pc, #248]	; (80082f4 <DMA_CalcBaseAndBitshift+0x124>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d03b      	beq.n	8008278 <DMA_CalcBaseAndBitshift+0xa8>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a3c      	ldr	r2, [pc, #240]	; (80082f8 <DMA_CalcBaseAndBitshift+0x128>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d036      	beq.n	8008278 <DMA_CalcBaseAndBitshift+0xa8>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a3b      	ldr	r2, [pc, #236]	; (80082fc <DMA_CalcBaseAndBitshift+0x12c>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d031      	beq.n	8008278 <DMA_CalcBaseAndBitshift+0xa8>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a39      	ldr	r2, [pc, #228]	; (8008300 <DMA_CalcBaseAndBitshift+0x130>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d02c      	beq.n	8008278 <DMA_CalcBaseAndBitshift+0xa8>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a38      	ldr	r2, [pc, #224]	; (8008304 <DMA_CalcBaseAndBitshift+0x134>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d027      	beq.n	8008278 <DMA_CalcBaseAndBitshift+0xa8>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a36      	ldr	r2, [pc, #216]	; (8008308 <DMA_CalcBaseAndBitshift+0x138>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d022      	beq.n	8008278 <DMA_CalcBaseAndBitshift+0xa8>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a35      	ldr	r2, [pc, #212]	; (800830c <DMA_CalcBaseAndBitshift+0x13c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d01d      	beq.n	8008278 <DMA_CalcBaseAndBitshift+0xa8>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a33      	ldr	r2, [pc, #204]	; (8008310 <DMA_CalcBaseAndBitshift+0x140>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d018      	beq.n	8008278 <DMA_CalcBaseAndBitshift+0xa8>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a32      	ldr	r2, [pc, #200]	; (8008314 <DMA_CalcBaseAndBitshift+0x144>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d013      	beq.n	8008278 <DMA_CalcBaseAndBitshift+0xa8>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a30      	ldr	r2, [pc, #192]	; (8008318 <DMA_CalcBaseAndBitshift+0x148>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d00e      	beq.n	8008278 <DMA_CalcBaseAndBitshift+0xa8>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a2f      	ldr	r2, [pc, #188]	; (800831c <DMA_CalcBaseAndBitshift+0x14c>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d009      	beq.n	8008278 <DMA_CalcBaseAndBitshift+0xa8>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a2d      	ldr	r2, [pc, #180]	; (8008320 <DMA_CalcBaseAndBitshift+0x150>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d004      	beq.n	8008278 <DMA_CalcBaseAndBitshift+0xa8>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a2c      	ldr	r2, [pc, #176]	; (8008324 <DMA_CalcBaseAndBitshift+0x154>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d101      	bne.n	800827c <DMA_CalcBaseAndBitshift+0xac>
 8008278:	2301      	movs	r3, #1
 800827a:	e000      	b.n	800827e <DMA_CalcBaseAndBitshift+0xae>
 800827c:	2300      	movs	r3, #0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d024      	beq.n	80082cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	b2db      	uxtb	r3, r3
 8008288:	3b10      	subs	r3, #16
 800828a:	4a27      	ldr	r2, [pc, #156]	; (8008328 <DMA_CalcBaseAndBitshift+0x158>)
 800828c:	fba2 2303 	umull	r2, r3, r2, r3
 8008290:	091b      	lsrs	r3, r3, #4
 8008292:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	4a24      	ldr	r2, [pc, #144]	; (800832c <DMA_CalcBaseAndBitshift+0x15c>)
 800829c:	5cd3      	ldrb	r3, [r2, r3]
 800829e:	461a      	mov	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d908      	bls.n	80082bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	4b1f      	ldr	r3, [pc, #124]	; (8008330 <DMA_CalcBaseAndBitshift+0x160>)
 80082b2:	4013      	ands	r3, r2
 80082b4:	1d1a      	adds	r2, r3, #4
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	659a      	str	r2, [r3, #88]	; 0x58
 80082ba:	e00d      	b.n	80082d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	461a      	mov	r2, r3
 80082c2:	4b1b      	ldr	r3, [pc, #108]	; (8008330 <DMA_CalcBaseAndBitshift+0x160>)
 80082c4:	4013      	ands	r3, r2
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	6593      	str	r3, [r2, #88]	; 0x58
 80082ca:	e005      	b.n	80082d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	40020010 	.word	0x40020010
 80082ec:	40020028 	.word	0x40020028
 80082f0:	40020040 	.word	0x40020040
 80082f4:	40020058 	.word	0x40020058
 80082f8:	40020070 	.word	0x40020070
 80082fc:	40020088 	.word	0x40020088
 8008300:	400200a0 	.word	0x400200a0
 8008304:	400200b8 	.word	0x400200b8
 8008308:	40020410 	.word	0x40020410
 800830c:	40020428 	.word	0x40020428
 8008310:	40020440 	.word	0x40020440
 8008314:	40020458 	.word	0x40020458
 8008318:	40020470 	.word	0x40020470
 800831c:	40020488 	.word	0x40020488
 8008320:	400204a0 	.word	0x400204a0
 8008324:	400204b8 	.word	0x400204b8
 8008328:	aaaaaaab 	.word	0xaaaaaaab
 800832c:	0801668c 	.word	0x0801668c
 8008330:	fffffc00 	.word	0xfffffc00

08008334 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d120      	bne.n	800838a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834c:	2b03      	cmp	r3, #3
 800834e:	d858      	bhi.n	8008402 <DMA_CheckFifoParam+0xce>
 8008350:	a201      	add	r2, pc, #4	; (adr r2, 8008358 <DMA_CheckFifoParam+0x24>)
 8008352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008356:	bf00      	nop
 8008358:	08008369 	.word	0x08008369
 800835c:	0800837b 	.word	0x0800837b
 8008360:	08008369 	.word	0x08008369
 8008364:	08008403 	.word	0x08008403
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d048      	beq.n	8008406 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008378:	e045      	b.n	8008406 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008382:	d142      	bne.n	800840a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008388:	e03f      	b.n	800840a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008392:	d123      	bne.n	80083dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008398:	2b03      	cmp	r3, #3
 800839a:	d838      	bhi.n	800840e <DMA_CheckFifoParam+0xda>
 800839c:	a201      	add	r2, pc, #4	; (adr r2, 80083a4 <DMA_CheckFifoParam+0x70>)
 800839e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a2:	bf00      	nop
 80083a4:	080083b5 	.word	0x080083b5
 80083a8:	080083bb 	.word	0x080083bb
 80083ac:	080083b5 	.word	0x080083b5
 80083b0:	080083cd 	.word	0x080083cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	73fb      	strb	r3, [r7, #15]
        break;
 80083b8:	e030      	b.n	800841c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d025      	beq.n	8008412 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083ca:	e022      	b.n	8008412 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80083d4:	d11f      	bne.n	8008416 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083da:	e01c      	b.n	8008416 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d902      	bls.n	80083ea <DMA_CheckFifoParam+0xb6>
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d003      	beq.n	80083f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80083e8:	e018      	b.n	800841c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	73fb      	strb	r3, [r7, #15]
        break;
 80083ee:	e015      	b.n	800841c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00e      	beq.n	800841a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008400:	e00b      	b.n	800841a <DMA_CheckFifoParam+0xe6>
        break;
 8008402:	bf00      	nop
 8008404:	e00a      	b.n	800841c <DMA_CheckFifoParam+0xe8>
        break;
 8008406:	bf00      	nop
 8008408:	e008      	b.n	800841c <DMA_CheckFifoParam+0xe8>
        break;
 800840a:	bf00      	nop
 800840c:	e006      	b.n	800841c <DMA_CheckFifoParam+0xe8>
        break;
 800840e:	bf00      	nop
 8008410:	e004      	b.n	800841c <DMA_CheckFifoParam+0xe8>
        break;
 8008412:	bf00      	nop
 8008414:	e002      	b.n	800841c <DMA_CheckFifoParam+0xe8>
        break;
 8008416:	bf00      	nop
 8008418:	e000      	b.n	800841c <DMA_CheckFifoParam+0xe8>
    break;
 800841a:	bf00      	nop
    }
  }

  return status;
 800841c:	7bfb      	ldrb	r3, [r7, #15]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop

0800842c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a38      	ldr	r2, [pc, #224]	; (8008520 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d022      	beq.n	800848a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a36      	ldr	r2, [pc, #216]	; (8008524 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d01d      	beq.n	800848a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a35      	ldr	r2, [pc, #212]	; (8008528 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d018      	beq.n	800848a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a33      	ldr	r2, [pc, #204]	; (800852c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d013      	beq.n	800848a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a32      	ldr	r2, [pc, #200]	; (8008530 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d00e      	beq.n	800848a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a30      	ldr	r2, [pc, #192]	; (8008534 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d009      	beq.n	800848a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a2f      	ldr	r2, [pc, #188]	; (8008538 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d004      	beq.n	800848a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a2d      	ldr	r2, [pc, #180]	; (800853c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d101      	bne.n	800848e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800848a:	2301      	movs	r3, #1
 800848c:	e000      	b.n	8008490 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800848e:	2300      	movs	r3, #0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d01a      	beq.n	80084ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	b2db      	uxtb	r3, r3
 800849a:	3b08      	subs	r3, #8
 800849c:	4a28      	ldr	r2, [pc, #160]	; (8008540 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800849e:	fba2 2303 	umull	r2, r3, r2, r3
 80084a2:	091b      	lsrs	r3, r3, #4
 80084a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	4b26      	ldr	r3, [pc, #152]	; (8008544 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80084aa:	4413      	add	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	461a      	mov	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a24      	ldr	r2, [pc, #144]	; (8008548 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80084b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f003 031f 	and.w	r3, r3, #31
 80084c0:	2201      	movs	r2, #1
 80084c2:	409a      	lsls	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80084c8:	e024      	b.n	8008514 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	3b10      	subs	r3, #16
 80084d2:	4a1e      	ldr	r2, [pc, #120]	; (800854c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80084d4:	fba2 2303 	umull	r2, r3, r2, r3
 80084d8:	091b      	lsrs	r3, r3, #4
 80084da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	4a1c      	ldr	r2, [pc, #112]	; (8008550 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d806      	bhi.n	80084f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	4a1b      	ldr	r2, [pc, #108]	; (8008554 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d902      	bls.n	80084f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	3308      	adds	r3, #8
 80084f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	4b18      	ldr	r3, [pc, #96]	; (8008558 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80084f6:	4413      	add	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	461a      	mov	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a16      	ldr	r2, [pc, #88]	; (800855c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008504:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f003 031f 	and.w	r3, r3, #31
 800850c:	2201      	movs	r2, #1
 800850e:	409a      	lsls	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008514:	bf00      	nop
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	58025408 	.word	0x58025408
 8008524:	5802541c 	.word	0x5802541c
 8008528:	58025430 	.word	0x58025430
 800852c:	58025444 	.word	0x58025444
 8008530:	58025458 	.word	0x58025458
 8008534:	5802546c 	.word	0x5802546c
 8008538:	58025480 	.word	0x58025480
 800853c:	58025494 	.word	0x58025494
 8008540:	cccccccd 	.word	0xcccccccd
 8008544:	16009600 	.word	0x16009600
 8008548:	58025880 	.word	0x58025880
 800854c:	aaaaaaab 	.word	0xaaaaaaab
 8008550:	400204b8 	.word	0x400204b8
 8008554:	4002040f 	.word	0x4002040f
 8008558:	10008200 	.word	0x10008200
 800855c:	40020880 	.word	0x40020880

08008560 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	b2db      	uxtb	r3, r3
 800856e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d04a      	beq.n	800860c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2b08      	cmp	r3, #8
 800857a:	d847      	bhi.n	800860c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a25      	ldr	r2, [pc, #148]	; (8008618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d022      	beq.n	80085cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a24      	ldr	r2, [pc, #144]	; (800861c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d01d      	beq.n	80085cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a22      	ldr	r2, [pc, #136]	; (8008620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d018      	beq.n	80085cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a21      	ldr	r2, [pc, #132]	; (8008624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d013      	beq.n	80085cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a1f      	ldr	r2, [pc, #124]	; (8008628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d00e      	beq.n	80085cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a1e      	ldr	r2, [pc, #120]	; (800862c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d009      	beq.n	80085cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a1c      	ldr	r2, [pc, #112]	; (8008630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d004      	beq.n	80085cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a1b      	ldr	r2, [pc, #108]	; (8008634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d101      	bne.n	80085d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80085cc:	2301      	movs	r3, #1
 80085ce:	e000      	b.n	80085d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80085d0:	2300      	movs	r3, #0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00a      	beq.n	80085ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	4b17      	ldr	r3, [pc, #92]	; (8008638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80085da:	4413      	add	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	461a      	mov	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a15      	ldr	r2, [pc, #84]	; (800863c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80085e8:	671a      	str	r2, [r3, #112]	; 0x70
 80085ea:	e009      	b.n	8008600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	4b14      	ldr	r3, [pc, #80]	; (8008640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80085f0:	4413      	add	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	461a      	mov	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a11      	ldr	r2, [pc, #68]	; (8008644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80085fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	3b01      	subs	r3, #1
 8008604:	2201      	movs	r2, #1
 8008606:	409a      	lsls	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800860c:	bf00      	nop
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr
 8008618:	58025408 	.word	0x58025408
 800861c:	5802541c 	.word	0x5802541c
 8008620:	58025430 	.word	0x58025430
 8008624:	58025444 	.word	0x58025444
 8008628:	58025458 	.word	0x58025458
 800862c:	5802546c 	.word	0x5802546c
 8008630:	58025480 	.word	0x58025480
 8008634:	58025494 	.word	0x58025494
 8008638:	1600963f 	.word	0x1600963f
 800863c:	58025940 	.word	0x58025940
 8008640:	1000823f 	.word	0x1000823f
 8008644:	40020940 	.word	0x40020940

08008648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008648:	b480      	push	{r7}
 800864a:	b089      	sub	sp, #36	; 0x24
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008652:	2300      	movs	r3, #0
 8008654:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008656:	4b89      	ldr	r3, [pc, #548]	; (800887c <HAL_GPIO_Init+0x234>)
 8008658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800865a:	e194      	b.n	8008986 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	2101      	movs	r1, #1
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	fa01 f303 	lsl.w	r3, r1, r3
 8008668:	4013      	ands	r3, r2
 800866a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	2b00      	cmp	r3, #0
 8008670:	f000 8186 	beq.w	8008980 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f003 0303 	and.w	r3, r3, #3
 800867c:	2b01      	cmp	r3, #1
 800867e:	d005      	beq.n	800868c <HAL_GPIO_Init+0x44>
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	f003 0303 	and.w	r3, r3, #3
 8008688:	2b02      	cmp	r3, #2
 800868a:	d130      	bne.n	80086ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	005b      	lsls	r3, r3, #1
 8008696:	2203      	movs	r2, #3
 8008698:	fa02 f303 	lsl.w	r3, r2, r3
 800869c:	43db      	mvns	r3, r3
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	4013      	ands	r3, r2
 80086a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	68da      	ldr	r2, [r3, #12]
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	fa02 f303 	lsl.w	r3, r2, r3
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	69ba      	ldr	r2, [r7, #24]
 80086ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80086c2:	2201      	movs	r2, #1
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ca:	43db      	mvns	r3, r3
 80086cc:	69ba      	ldr	r2, [r7, #24]
 80086ce:	4013      	ands	r3, r2
 80086d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	091b      	lsrs	r3, r3, #4
 80086d8:	f003 0201 	and.w	r2, r3, #1
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	fa02 f303 	lsl.w	r3, r2, r3
 80086e2:	69ba      	ldr	r2, [r7, #24]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	69ba      	ldr	r2, [r7, #24]
 80086ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f003 0303 	and.w	r3, r3, #3
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d017      	beq.n	800872a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	2203      	movs	r2, #3
 8008706:	fa02 f303 	lsl.w	r3, r2, r3
 800870a:	43db      	mvns	r3, r3
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	4013      	ands	r3, r2
 8008710:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	689a      	ldr	r2, [r3, #8]
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	005b      	lsls	r3, r3, #1
 800871a:	fa02 f303 	lsl.w	r3, r2, r3
 800871e:	69ba      	ldr	r2, [r7, #24]
 8008720:	4313      	orrs	r3, r2
 8008722:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	f003 0303 	and.w	r3, r3, #3
 8008732:	2b02      	cmp	r3, #2
 8008734:	d123      	bne.n	800877e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	08da      	lsrs	r2, r3, #3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	3208      	adds	r2, #8
 800873e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	f003 0307 	and.w	r3, r3, #7
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	220f      	movs	r2, #15
 800874e:	fa02 f303 	lsl.w	r3, r2, r3
 8008752:	43db      	mvns	r3, r3
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	4013      	ands	r3, r2
 8008758:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	691a      	ldr	r2, [r3, #16]
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	f003 0307 	and.w	r3, r3, #7
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	fa02 f303 	lsl.w	r3, r2, r3
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	4313      	orrs	r3, r2
 800876e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	08da      	lsrs	r2, r3, #3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3208      	adds	r2, #8
 8008778:	69b9      	ldr	r1, [r7, #24]
 800877a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	005b      	lsls	r3, r3, #1
 8008788:	2203      	movs	r2, #3
 800878a:	fa02 f303 	lsl.w	r3, r2, r3
 800878e:	43db      	mvns	r3, r3
 8008790:	69ba      	ldr	r2, [r7, #24]
 8008792:	4013      	ands	r3, r2
 8008794:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f003 0203 	and.w	r2, r3, #3
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	005b      	lsls	r3, r3, #1
 80087a2:	fa02 f303 	lsl.w	r3, r2, r3
 80087a6:	69ba      	ldr	r2, [r7, #24]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 80e0 	beq.w	8008980 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087c0:	4b2f      	ldr	r3, [pc, #188]	; (8008880 <HAL_GPIO_Init+0x238>)
 80087c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087c6:	4a2e      	ldr	r2, [pc, #184]	; (8008880 <HAL_GPIO_Init+0x238>)
 80087c8:	f043 0302 	orr.w	r3, r3, #2
 80087cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80087d0:	4b2b      	ldr	r3, [pc, #172]	; (8008880 <HAL_GPIO_Init+0x238>)
 80087d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80087de:	4a29      	ldr	r2, [pc, #164]	; (8008884 <HAL_GPIO_Init+0x23c>)
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	089b      	lsrs	r3, r3, #2
 80087e4:	3302      	adds	r3, #2
 80087e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	f003 0303 	and.w	r3, r3, #3
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	220f      	movs	r2, #15
 80087f6:	fa02 f303 	lsl.w	r3, r2, r3
 80087fa:	43db      	mvns	r3, r3
 80087fc:	69ba      	ldr	r2, [r7, #24]
 80087fe:	4013      	ands	r3, r2
 8008800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a20      	ldr	r2, [pc, #128]	; (8008888 <HAL_GPIO_Init+0x240>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d052      	beq.n	80088b0 <HAL_GPIO_Init+0x268>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a1f      	ldr	r2, [pc, #124]	; (800888c <HAL_GPIO_Init+0x244>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d031      	beq.n	8008876 <HAL_GPIO_Init+0x22e>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a1e      	ldr	r2, [pc, #120]	; (8008890 <HAL_GPIO_Init+0x248>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d02b      	beq.n	8008872 <HAL_GPIO_Init+0x22a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a1d      	ldr	r2, [pc, #116]	; (8008894 <HAL_GPIO_Init+0x24c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d025      	beq.n	800886e <HAL_GPIO_Init+0x226>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a1c      	ldr	r2, [pc, #112]	; (8008898 <HAL_GPIO_Init+0x250>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d01f      	beq.n	800886a <HAL_GPIO_Init+0x222>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a1b      	ldr	r2, [pc, #108]	; (800889c <HAL_GPIO_Init+0x254>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d019      	beq.n	8008866 <HAL_GPIO_Init+0x21e>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a1a      	ldr	r2, [pc, #104]	; (80088a0 <HAL_GPIO_Init+0x258>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d013      	beq.n	8008862 <HAL_GPIO_Init+0x21a>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a19      	ldr	r2, [pc, #100]	; (80088a4 <HAL_GPIO_Init+0x25c>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d00d      	beq.n	800885e <HAL_GPIO_Init+0x216>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a18      	ldr	r2, [pc, #96]	; (80088a8 <HAL_GPIO_Init+0x260>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d007      	beq.n	800885a <HAL_GPIO_Init+0x212>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a17      	ldr	r2, [pc, #92]	; (80088ac <HAL_GPIO_Init+0x264>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d101      	bne.n	8008856 <HAL_GPIO_Init+0x20e>
 8008852:	2309      	movs	r3, #9
 8008854:	e02d      	b.n	80088b2 <HAL_GPIO_Init+0x26a>
 8008856:	230a      	movs	r3, #10
 8008858:	e02b      	b.n	80088b2 <HAL_GPIO_Init+0x26a>
 800885a:	2308      	movs	r3, #8
 800885c:	e029      	b.n	80088b2 <HAL_GPIO_Init+0x26a>
 800885e:	2307      	movs	r3, #7
 8008860:	e027      	b.n	80088b2 <HAL_GPIO_Init+0x26a>
 8008862:	2306      	movs	r3, #6
 8008864:	e025      	b.n	80088b2 <HAL_GPIO_Init+0x26a>
 8008866:	2305      	movs	r3, #5
 8008868:	e023      	b.n	80088b2 <HAL_GPIO_Init+0x26a>
 800886a:	2304      	movs	r3, #4
 800886c:	e021      	b.n	80088b2 <HAL_GPIO_Init+0x26a>
 800886e:	2303      	movs	r3, #3
 8008870:	e01f      	b.n	80088b2 <HAL_GPIO_Init+0x26a>
 8008872:	2302      	movs	r3, #2
 8008874:	e01d      	b.n	80088b2 <HAL_GPIO_Init+0x26a>
 8008876:	2301      	movs	r3, #1
 8008878:	e01b      	b.n	80088b2 <HAL_GPIO_Init+0x26a>
 800887a:	bf00      	nop
 800887c:	58000080 	.word	0x58000080
 8008880:	58024400 	.word	0x58024400
 8008884:	58000400 	.word	0x58000400
 8008888:	58020000 	.word	0x58020000
 800888c:	58020400 	.word	0x58020400
 8008890:	58020800 	.word	0x58020800
 8008894:	58020c00 	.word	0x58020c00
 8008898:	58021000 	.word	0x58021000
 800889c:	58021400 	.word	0x58021400
 80088a0:	58021800 	.word	0x58021800
 80088a4:	58021c00 	.word	0x58021c00
 80088a8:	58022000 	.word	0x58022000
 80088ac:	58022400 	.word	0x58022400
 80088b0:	2300      	movs	r3, #0
 80088b2:	69fa      	ldr	r2, [r7, #28]
 80088b4:	f002 0203 	and.w	r2, r2, #3
 80088b8:	0092      	lsls	r2, r2, #2
 80088ba:	4093      	lsls	r3, r2
 80088bc:	69ba      	ldr	r2, [r7, #24]
 80088be:	4313      	orrs	r3, r2
 80088c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088c2:	4938      	ldr	r1, [pc, #224]	; (80089a4 <HAL_GPIO_Init+0x35c>)
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	089b      	lsrs	r3, r3, #2
 80088c8:	3302      	adds	r3, #2
 80088ca:	69ba      	ldr	r2, [r7, #24]
 80088cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80088d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	43db      	mvns	r3, r3
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	4013      	ands	r3, r2
 80088e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80088ee:	69ba      	ldr	r2, [r7, #24]
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80088f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80088fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	43db      	mvns	r3, r3
 800890a:	69ba      	ldr	r2, [r7, #24]
 800890c:	4013      	ands	r3, r2
 800890e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d003      	beq.n	8008924 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	4313      	orrs	r3, r2
 8008922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	43db      	mvns	r3, r3
 8008936:	69ba      	ldr	r2, [r7, #24]
 8008938:	4013      	ands	r3, r2
 800893a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d003      	beq.n	8008950 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	4313      	orrs	r3, r2
 800894e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	43db      	mvns	r3, r3
 8008960:	69ba      	ldr	r2, [r7, #24]
 8008962:	4013      	ands	r3, r2
 8008964:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008972:	69ba      	ldr	r2, [r7, #24]
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	4313      	orrs	r3, r2
 8008978:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	3301      	adds	r3, #1
 8008984:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	fa22 f303 	lsr.w	r3, r2, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	f47f ae63 	bne.w	800865c <HAL_GPIO_Init+0x14>
  }
}
 8008996:	bf00      	nop
 8008998:	bf00      	nop
 800899a:	3724      	adds	r7, #36	; 0x24
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr
 80089a4:	58000400 	.word	0x58000400

080089a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	460b      	mov	r3, r1
 80089b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691a      	ldr	r2, [r3, #16]
 80089b8:	887b      	ldrh	r3, [r7, #2]
 80089ba:	4013      	ands	r3, r2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d002      	beq.n	80089c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80089c0:	2301      	movs	r3, #1
 80089c2:	73fb      	strb	r3, [r7, #15]
 80089c4:	e001      	b.n	80089ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80089c6:	2300      	movs	r3, #0
 80089c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	807b      	strh	r3, [r7, #2]
 80089e4:	4613      	mov	r3, r2
 80089e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80089e8:	787b      	ldrb	r3, [r7, #1]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d003      	beq.n	80089f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80089ee:	887a      	ldrh	r2, [r7, #2]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80089f4:	e003      	b.n	80089fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80089f6:	887b      	ldrh	r3, [r7, #2]
 80089f8:	041a      	lsls	r2, r3, #16
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	619a      	str	r2, [r3, #24]
}
 80089fe:	bf00      	nop
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
	...

08008a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d101      	bne.n	8008a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e08b      	b.n	8008b36 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d106      	bne.n	8008a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f7fa f938 	bl	8002ca8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2224      	movs	r2, #36	; 0x24
 8008a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f022 0201 	bic.w	r2, r2, #1
 8008a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008a5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d107      	bne.n	8008a86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689a      	ldr	r2, [r3, #8]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a82:	609a      	str	r2, [r3, #8]
 8008a84:	e006      	b.n	8008a94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	689a      	ldr	r2, [r3, #8]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008a92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d108      	bne.n	8008aae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aaa:	605a      	str	r2, [r3, #4]
 8008aac:	e007      	b.n	8008abe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008abc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6859      	ldr	r1, [r3, #4]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	4b1d      	ldr	r3, [pc, #116]	; (8008b40 <HAL_I2C_Init+0x134>)
 8008aca:	430b      	orrs	r3, r1
 8008acc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68da      	ldr	r2, [r3, #12]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008adc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	691a      	ldr	r2, [r3, #16]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	430a      	orrs	r2, r1
 8008af6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	69d9      	ldr	r1, [r3, #28]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a1a      	ldr	r2, [r3, #32]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f042 0201 	orr.w	r2, r2, #1
 8008b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2220      	movs	r2, #32
 8008b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	02008000 	.word	0x02008000

08008b44 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af02      	add	r7, sp, #8
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	607a      	str	r2, [r7, #4]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	460b      	mov	r3, r1
 8008b52:	817b      	strh	r3, [r7, #10]
 8008b54:	4613      	mov	r3, r2
 8008b56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b20      	cmp	r3, #32
 8008b62:	f040 80fd 	bne.w	8008d60 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d101      	bne.n	8008b74 <HAL_I2C_Master_Transmit+0x30>
 8008b70:	2302      	movs	r3, #2
 8008b72:	e0f6      	b.n	8008d62 <HAL_I2C_Master_Transmit+0x21e>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008b7c:	f7fa fe00 	bl	8003780 <HAL_GetTick>
 8008b80:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	2319      	movs	r3, #25
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 fa0a 	bl	8008fa8 <I2C_WaitOnFlagUntilTimeout>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e0e1      	b.n	8008d62 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2221      	movs	r2, #33	; 0x21
 8008ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2210      	movs	r2, #16
 8008baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	893a      	ldrh	r2, [r7, #8]
 8008bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	2bff      	cmp	r3, #255	; 0xff
 8008bce:	d906      	bls.n	8008bde <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	22ff      	movs	r2, #255	; 0xff
 8008bd4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008bd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008bda:	617b      	str	r3, [r7, #20]
 8008bdc:	e007      	b.n	8008bee <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008be8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d024      	beq.n	8008c40 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfa:	781a      	ldrb	r2, [r3, #0]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	3b01      	subs	r3, #1
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	8979      	ldrh	r1, [r7, #10]
 8008c32:	4b4e      	ldr	r3, [pc, #312]	; (8008d6c <HAL_I2C_Master_Transmit+0x228>)
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f000 fc05 	bl	8009448 <I2C_TransferConfig>
 8008c3e:	e066      	b.n	8008d0e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	8979      	ldrh	r1, [r7, #10]
 8008c48:	4b48      	ldr	r3, [pc, #288]	; (8008d6c <HAL_I2C_Master_Transmit+0x228>)
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 fbfa 	bl	8009448 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008c54:	e05b      	b.n	8008d0e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	6a39      	ldr	r1, [r7, #32]
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 f9fd 	bl	800905a <I2C_WaitOnTXISFlagUntilTimeout>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e07b      	b.n	8008d62 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6e:	781a      	ldrb	r2, [r3, #0]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7a:	1c5a      	adds	r2, r3, #1
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	3b01      	subs	r3, #1
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c92:	3b01      	subs	r3, #1
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d034      	beq.n	8008d0e <HAL_I2C_Master_Transmit+0x1ca>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d130      	bne.n	8008d0e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2180      	movs	r1, #128	; 0x80
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f000 f976 	bl	8008fa8 <I2C_WaitOnFlagUntilTimeout>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e04d      	b.n	8008d62 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	2bff      	cmp	r3, #255	; 0xff
 8008cce:	d90e      	bls.n	8008cee <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	22ff      	movs	r2, #255	; 0xff
 8008cd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	8979      	ldrh	r1, [r7, #10]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f000 fbae 	bl	8009448 <I2C_TransferConfig>
 8008cec:	e00f      	b.n	8008d0e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cfc:	b2da      	uxtb	r2, r3
 8008cfe:	8979      	ldrh	r1, [r7, #10]
 8008d00:	2300      	movs	r3, #0
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 fb9d 	bl	8009448 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d19e      	bne.n	8008c56 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	6a39      	ldr	r1, [r7, #32]
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f000 f9e3 	bl	80090e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e01a      	b.n	8008d62 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2220      	movs	r2, #32
 8008d32:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6859      	ldr	r1, [r3, #4]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	4b0c      	ldr	r3, [pc, #48]	; (8008d70 <HAL_I2C_Master_Transmit+0x22c>)
 8008d40:	400b      	ands	r3, r1
 8008d42:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2220      	movs	r2, #32
 8008d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	e000      	b.n	8008d62 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008d60:	2302      	movs	r3, #2
  }
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	80002000 	.word	0x80002000
 8008d70:	fe00e800 	.word	0xfe00e800

08008d74 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	607a      	str	r2, [r7, #4]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	460b      	mov	r3, r1
 8008d82:	817b      	strh	r3, [r7, #10]
 8008d84:	4613      	mov	r3, r2
 8008d86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b20      	cmp	r3, #32
 8008d92:	f040 80db 	bne.w	8008f4c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d101      	bne.n	8008da4 <HAL_I2C_Master_Receive+0x30>
 8008da0:	2302      	movs	r3, #2
 8008da2:	e0d4      	b.n	8008f4e <HAL_I2C_Master_Receive+0x1da>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008dac:	f7fa fce8 	bl	8003780 <HAL_GetTick>
 8008db0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	2319      	movs	r3, #25
 8008db8:	2201      	movs	r2, #1
 8008dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f000 f8f2 	bl	8008fa8 <I2C_WaitOnFlagUntilTimeout>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e0bf      	b.n	8008f4e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2222      	movs	r2, #34	; 0x22
 8008dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2210      	movs	r2, #16
 8008dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	893a      	ldrh	r2, [r7, #8]
 8008dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	2bff      	cmp	r3, #255	; 0xff
 8008dfe:	d90e      	bls.n	8008e1e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	22ff      	movs	r2, #255	; 0xff
 8008e04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	8979      	ldrh	r1, [r7, #10]
 8008e0e:	4b52      	ldr	r3, [pc, #328]	; (8008f58 <HAL_I2C_Master_Receive+0x1e4>)
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f000 fb16 	bl	8009448 <I2C_TransferConfig>
 8008e1c:	e06d      	b.n	8008efa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	8979      	ldrh	r1, [r7, #10]
 8008e30:	4b49      	ldr	r3, [pc, #292]	; (8008f58 <HAL_I2C_Master_Receive+0x1e4>)
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f000 fb05 	bl	8009448 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008e3e:	e05c      	b.n	8008efa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	6a39      	ldr	r1, [r7, #32]
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 f993 	bl	8009170 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d001      	beq.n	8008e54 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e07c      	b.n	8008f4e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5e:	b2d2      	uxtb	r2, r2
 8008e60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e66:	1c5a      	adds	r2, r3, #1
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e70:	3b01      	subs	r3, #1
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d034      	beq.n	8008efa <HAL_I2C_Master_Receive+0x186>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d130      	bne.n	8008efa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2180      	movs	r1, #128	; 0x80
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f000 f880 	bl	8008fa8 <I2C_WaitOnFlagUntilTimeout>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e04d      	b.n	8008f4e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	2bff      	cmp	r3, #255	; 0xff
 8008eba:	d90e      	bls.n	8008eda <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	22ff      	movs	r2, #255	; 0xff
 8008ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	8979      	ldrh	r1, [r7, #10]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	9300      	str	r3, [sp, #0]
 8008ece:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f000 fab8 	bl	8009448 <I2C_TransferConfig>
 8008ed8:	e00f      	b.n	8008efa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ee8:	b2da      	uxtb	r2, r3
 8008eea:	8979      	ldrh	r1, [r7, #10]
 8008eec:	2300      	movs	r3, #0
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f000 faa7 	bl	8009448 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d19d      	bne.n	8008e40 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	6a39      	ldr	r1, [r7, #32]
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 f8ed 	bl	80090e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e01a      	b.n	8008f4e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6859      	ldr	r1, [r3, #4]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4b0c      	ldr	r3, [pc, #48]	; (8008f5c <HAL_I2C_Master_Receive+0x1e8>)
 8008f2c:	400b      	ands	r3, r1
 8008f2e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2220      	movs	r2, #32
 8008f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	e000      	b.n	8008f4e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008f4c:	2302      	movs	r3, #2
  }
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	80002400 	.word	0x80002400
 8008f5c:	fe00e800 	.word	0xfe00e800

08008f60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	f003 0302 	and.w	r3, r3, #2
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d103      	bne.n	8008f7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d007      	beq.n	8008f9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	699a      	ldr	r2, [r3, #24]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f042 0201 	orr.w	r2, r2, #1
 8008f9a:	619a      	str	r2, [r3, #24]
  }
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fb8:	e03b      	b.n	8009032 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fba:	69ba      	ldr	r2, [r7, #24]
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 f962 	bl	8009288 <I2C_IsErrorOccurred>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e041      	b.n	8009052 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fd4:	d02d      	beq.n	8009032 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fd6:	f7fa fbd3 	bl	8003780 <HAL_GetTick>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	683a      	ldr	r2, [r7, #0]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d302      	bcc.n	8008fec <I2C_WaitOnFlagUntilTimeout+0x44>
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d122      	bne.n	8009032 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	699a      	ldr	r2, [r3, #24]
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	bf0c      	ite	eq
 8008ffc:	2301      	moveq	r3, #1
 8008ffe:	2300      	movne	r3, #0
 8009000:	b2db      	uxtb	r3, r3
 8009002:	461a      	mov	r2, r3
 8009004:	79fb      	ldrb	r3, [r7, #7]
 8009006:	429a      	cmp	r2, r3
 8009008:	d113      	bne.n	8009032 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800900e:	f043 0220 	orr.w	r2, r3, #32
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2220      	movs	r2, #32
 800901a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e00f      	b.n	8009052 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	699a      	ldr	r2, [r3, #24]
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	4013      	ands	r3, r2
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	429a      	cmp	r2, r3
 8009040:	bf0c      	ite	eq
 8009042:	2301      	moveq	r3, #1
 8009044:	2300      	movne	r3, #0
 8009046:	b2db      	uxtb	r3, r3
 8009048:	461a      	mov	r2, r3
 800904a:	79fb      	ldrb	r3, [r7, #7]
 800904c:	429a      	cmp	r2, r3
 800904e:	d0b4      	beq.n	8008fba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b084      	sub	sp, #16
 800905e:	af00      	add	r7, sp, #0
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009066:	e033      	b.n	80090d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	68b9      	ldr	r1, [r7, #8]
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f000 f90b 	bl	8009288 <I2C_IsErrorOccurred>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e031      	b.n	80090e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009082:	d025      	beq.n	80090d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009084:	f7fa fb7c 	bl	8003780 <HAL_GetTick>
 8009088:	4602      	mov	r2, r0
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	429a      	cmp	r2, r3
 8009092:	d302      	bcc.n	800909a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d11a      	bne.n	80090d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	f003 0302 	and.w	r3, r3, #2
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d013      	beq.n	80090d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ac:	f043 0220 	orr.w	r2, r3, #32
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2220      	movs	r2, #32
 80090b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e007      	b.n	80090e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	699b      	ldr	r3, [r3, #24]
 80090d6:	f003 0302 	and.w	r3, r3, #2
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d1c4      	bne.n	8009068 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80090de:	2300      	movs	r3, #0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80090f4:	e02f      	b.n	8009156 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	68b9      	ldr	r1, [r7, #8]
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f000 f8c4 	bl	8009288 <I2C_IsErrorOccurred>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e02d      	b.n	8009166 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800910a:	f7fa fb39 	bl	8003780 <HAL_GetTick>
 800910e:	4602      	mov	r2, r0
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	68ba      	ldr	r2, [r7, #8]
 8009116:	429a      	cmp	r2, r3
 8009118:	d302      	bcc.n	8009120 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d11a      	bne.n	8009156 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	f003 0320 	and.w	r3, r3, #32
 800912a:	2b20      	cmp	r3, #32
 800912c:	d013      	beq.n	8009156 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009132:	f043 0220 	orr.w	r2, r3, #32
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2220      	movs	r2, #32
 800913e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e007      	b.n	8009166 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	f003 0320 	and.w	r3, r3, #32
 8009160:	2b20      	cmp	r3, #32
 8009162:	d1c8      	bne.n	80090f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009180:	e071      	b.n	8009266 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	68b9      	ldr	r1, [r7, #8]
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f000 f87e 	bl	8009288 <I2C_IsErrorOccurred>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	f003 0320 	and.w	r3, r3, #32
 80091a0:	2b20      	cmp	r3, #32
 80091a2:	d13b      	bne.n	800921c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d138      	bne.n	800921c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	f003 0304 	and.w	r3, r3, #4
 80091b4:	2b04      	cmp	r3, #4
 80091b6:	d105      	bne.n	80091c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	f003 0310 	and.w	r3, r3, #16
 80091ce:	2b10      	cmp	r3, #16
 80091d0:	d121      	bne.n	8009216 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2210      	movs	r2, #16
 80091d8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2204      	movs	r2, #4
 80091de:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2220      	movs	r2, #32
 80091e6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6859      	ldr	r1, [r3, #4]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	4b24      	ldr	r3, [pc, #144]	; (8009284 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80091f4:	400b      	ands	r3, r1
 80091f6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2220      	movs	r2, #32
 80091fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	75fb      	strb	r3, [r7, #23]
 8009214:	e002      	b.n	800921c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800921c:	f7fa fab0 	bl	8003780 <HAL_GetTick>
 8009220:	4602      	mov	r2, r0
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	429a      	cmp	r2, r3
 800922a:	d302      	bcc.n	8009232 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d119      	bne.n	8009266 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009232:	7dfb      	ldrb	r3, [r7, #23]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d116      	bne.n	8009266 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	f003 0304 	and.w	r3, r3, #4
 8009242:	2b04      	cmp	r3, #4
 8009244:	d00f      	beq.n	8009266 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800924a:	f043 0220 	orr.w	r2, r3, #32
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2220      	movs	r2, #32
 8009256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	2b04      	cmp	r3, #4
 8009272:	d002      	beq.n	800927a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009274:	7dfb      	ldrb	r3, [r7, #23]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d083      	beq.n	8009182 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800927a:	7dfb      	ldrb	r3, [r7, #23]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	fe00e800 	.word	0xfe00e800

08009288 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b08a      	sub	sp, #40	; 0x28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80092a2:	2300      	movs	r3, #0
 80092a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	f003 0310 	and.w	r3, r3, #16
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d068      	beq.n	8009386 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2210      	movs	r2, #16
 80092ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80092bc:	e049      	b.n	8009352 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092c4:	d045      	beq.n	8009352 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80092c6:	f7fa fa5b 	bl	8003780 <HAL_GetTick>
 80092ca:	4602      	mov	r2, r0
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d302      	bcc.n	80092dc <I2C_IsErrorOccurred+0x54>
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d13a      	bne.n	8009352 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092fe:	d121      	bne.n	8009344 <I2C_IsErrorOccurred+0xbc>
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009306:	d01d      	beq.n	8009344 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009308:	7cfb      	ldrb	r3, [r7, #19]
 800930a:	2b20      	cmp	r3, #32
 800930c:	d01a      	beq.n	8009344 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800931c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800931e:	f7fa fa2f 	bl	8003780 <HAL_GetTick>
 8009322:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009324:	e00e      	b.n	8009344 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009326:	f7fa fa2b 	bl	8003780 <HAL_GetTick>
 800932a:	4602      	mov	r2, r0
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	2b19      	cmp	r3, #25
 8009332:	d907      	bls.n	8009344 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	f043 0320 	orr.w	r3, r3, #32
 800933a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009342:	e006      	b.n	8009352 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	699b      	ldr	r3, [r3, #24]
 800934a:	f003 0320 	and.w	r3, r3, #32
 800934e:	2b20      	cmp	r3, #32
 8009350:	d1e9      	bne.n	8009326 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	f003 0320 	and.w	r3, r3, #32
 800935c:	2b20      	cmp	r3, #32
 800935e:	d003      	beq.n	8009368 <I2C_IsErrorOccurred+0xe0>
 8009360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009364:	2b00      	cmp	r3, #0
 8009366:	d0aa      	beq.n	80092be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800936c:	2b00      	cmp	r3, #0
 800936e:	d103      	bne.n	8009378 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2220      	movs	r2, #32
 8009376:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	f043 0304 	orr.w	r3, r3, #4
 800937e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00b      	beq.n	80093b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	f043 0301 	orr.w	r3, r3, #1
 800939e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00b      	beq.n	80093d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80093ba:	6a3b      	ldr	r3, [r7, #32]
 80093bc:	f043 0308 	orr.w	r3, r3, #8
 80093c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80093ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00b      	beq.n	80093f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80093dc:	6a3b      	ldr	r3, [r7, #32]
 80093de:	f043 0302 	orr.w	r3, r3, #2
 80093e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80093f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d01c      	beq.n	8009436 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f7ff fdaf 	bl	8008f60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	6859      	ldr	r1, [r3, #4]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	4b0d      	ldr	r3, [pc, #52]	; (8009444 <I2C_IsErrorOccurred+0x1bc>)
 800940e:	400b      	ands	r3, r1
 8009410:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009416:	6a3b      	ldr	r3, [r7, #32]
 8009418:	431a      	orrs	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2220      	movs	r2, #32
 8009422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800943a:	4618      	mov	r0, r3
 800943c:	3728      	adds	r7, #40	; 0x28
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	fe00e800 	.word	0xfe00e800

08009448 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009448:	b480      	push	{r7}
 800944a:	b087      	sub	sp, #28
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	607b      	str	r3, [r7, #4]
 8009452:	460b      	mov	r3, r1
 8009454:	817b      	strh	r3, [r7, #10]
 8009456:	4613      	mov	r3, r2
 8009458:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800945a:	897b      	ldrh	r3, [r7, #10]
 800945c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009460:	7a7b      	ldrb	r3, [r7, #9]
 8009462:	041b      	lsls	r3, r3, #16
 8009464:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009468:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800946e:	6a3b      	ldr	r3, [r7, #32]
 8009470:	4313      	orrs	r3, r2
 8009472:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009476:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	6a3b      	ldr	r3, [r7, #32]
 8009480:	0d5b      	lsrs	r3, r3, #21
 8009482:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009486:	4b08      	ldr	r3, [pc, #32]	; (80094a8 <I2C_TransferConfig+0x60>)
 8009488:	430b      	orrs	r3, r1
 800948a:	43db      	mvns	r3, r3
 800948c:	ea02 0103 	and.w	r1, r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	430a      	orrs	r2, r1
 8009498:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800949a:	bf00      	nop
 800949c:	371c      	adds	r7, #28
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	03ff63ff 	.word	0x03ff63ff

080094ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b20      	cmp	r3, #32
 80094c0:	d138      	bne.n	8009534 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d101      	bne.n	80094d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80094cc:	2302      	movs	r3, #2
 80094ce:	e032      	b.n	8009536 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2224      	movs	r2, #36	; 0x24
 80094dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f022 0201 	bic.w	r2, r2, #1
 80094ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80094fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6819      	ldr	r1, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	430a      	orrs	r2, r1
 800950e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f042 0201 	orr.w	r2, r2, #1
 800951e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2220      	movs	r2, #32
 8009524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	e000      	b.n	8009536 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009534:	2302      	movs	r3, #2
  }
}
 8009536:	4618      	mov	r0, r3
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009542:	b480      	push	{r7}
 8009544:	b085      	sub	sp, #20
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b20      	cmp	r3, #32
 8009556:	d139      	bne.n	80095cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800955e:	2b01      	cmp	r3, #1
 8009560:	d101      	bne.n	8009566 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009562:	2302      	movs	r3, #2
 8009564:	e033      	b.n	80095ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2224      	movs	r2, #36	; 0x24
 8009572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f022 0201 	bic.w	r2, r2, #1
 8009584:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009594:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	021b      	lsls	r3, r3, #8
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	4313      	orrs	r3, r2
 800959e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f042 0201 	orr.w	r2, r2, #1
 80095b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2220      	movs	r2, #32
 80095bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	e000      	b.n	80095ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80095cc:	2302      	movs	r3, #2
  }
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3714      	adds	r7, #20
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
	...

080095dc <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80095e4:	4b0d      	ldr	r3, [pc, #52]	; (800961c <HAL_I2CEx_EnableFastModePlus+0x40>)
 80095e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80095ea:	4a0c      	ldr	r2, [pc, #48]	; (800961c <HAL_I2CEx_EnableFastModePlus+0x40>)
 80095ec:	f043 0302 	orr.w	r3, r3, #2
 80095f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80095f4:	4b09      	ldr	r3, [pc, #36]	; (800961c <HAL_I2CEx_EnableFastModePlus+0x40>)
 80095f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80095fa:	f003 0302 	and.w	r3, r3, #2
 80095fe:	60fb      	str	r3, [r7, #12]
 8009600:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009602:	4b07      	ldr	r3, [pc, #28]	; (8009620 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	4906      	ldr	r1, [pc, #24]	; (8009620 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4313      	orrs	r3, r2
 800960c:	604b      	str	r3, [r1, #4]
}
 800960e:	bf00      	nop
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	58024400 	.word	0x58024400
 8009620:	58000400 	.word	0x58000400

08009624 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800962c:	4b19      	ldr	r3, [pc, #100]	; (8009694 <HAL_PWREx_ConfigSupply+0x70>)
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f003 0304 	and.w	r3, r3, #4
 8009634:	2b04      	cmp	r3, #4
 8009636:	d00a      	beq.n	800964e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009638:	4b16      	ldr	r3, [pc, #88]	; (8009694 <HAL_PWREx_ConfigSupply+0x70>)
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	f003 0307 	and.w	r3, r3, #7
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	429a      	cmp	r2, r3
 8009644:	d001      	beq.n	800964a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e01f      	b.n	800968a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	e01d      	b.n	800968a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800964e:	4b11      	ldr	r3, [pc, #68]	; (8009694 <HAL_PWREx_ConfigSupply+0x70>)
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	f023 0207 	bic.w	r2, r3, #7
 8009656:	490f      	ldr	r1, [pc, #60]	; (8009694 <HAL_PWREx_ConfigSupply+0x70>)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4313      	orrs	r3, r2
 800965c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800965e:	f7fa f88f 	bl	8003780 <HAL_GetTick>
 8009662:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009664:	e009      	b.n	800967a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009666:	f7fa f88b 	bl	8003780 <HAL_GetTick>
 800966a:	4602      	mov	r2, r0
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009674:	d901      	bls.n	800967a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	e007      	b.n	800968a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800967a:	4b06      	ldr	r3, [pc, #24]	; (8009694 <HAL_PWREx_ConfigSupply+0x70>)
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009686:	d1ee      	bne.n	8009666 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	58024800 	.word	0x58024800

08009698 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b08c      	sub	sp, #48	; 0x30
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d102      	bne.n	80096ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	f000 bc48 	b.w	8009f3c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0301 	and.w	r3, r3, #1
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 8088 	beq.w	80097ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096ba:	4b99      	ldr	r3, [pc, #612]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80096c4:	4b96      	ldr	r3, [pc, #600]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 80096c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80096ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096cc:	2b10      	cmp	r3, #16
 80096ce:	d007      	beq.n	80096e0 <HAL_RCC_OscConfig+0x48>
 80096d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d2:	2b18      	cmp	r3, #24
 80096d4:	d111      	bne.n	80096fa <HAL_RCC_OscConfig+0x62>
 80096d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d8:	f003 0303 	and.w	r3, r3, #3
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d10c      	bne.n	80096fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096e0:	4b8f      	ldr	r3, [pc, #572]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d06d      	beq.n	80097c8 <HAL_RCC_OscConfig+0x130>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d169      	bne.n	80097c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	f000 bc21 	b.w	8009f3c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009702:	d106      	bne.n	8009712 <HAL_RCC_OscConfig+0x7a>
 8009704:	4b86      	ldr	r3, [pc, #536]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a85      	ldr	r2, [pc, #532]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 800970a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800970e:	6013      	str	r3, [r2, #0]
 8009710:	e02e      	b.n	8009770 <HAL_RCC_OscConfig+0xd8>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10c      	bne.n	8009734 <HAL_RCC_OscConfig+0x9c>
 800971a:	4b81      	ldr	r3, [pc, #516]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a80      	ldr	r2, [pc, #512]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 8009720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009724:	6013      	str	r3, [r2, #0]
 8009726:	4b7e      	ldr	r3, [pc, #504]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a7d      	ldr	r2, [pc, #500]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 800972c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009730:	6013      	str	r3, [r2, #0]
 8009732:	e01d      	b.n	8009770 <HAL_RCC_OscConfig+0xd8>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800973c:	d10c      	bne.n	8009758 <HAL_RCC_OscConfig+0xc0>
 800973e:	4b78      	ldr	r3, [pc, #480]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a77      	ldr	r2, [pc, #476]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 8009744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009748:	6013      	str	r3, [r2, #0]
 800974a:	4b75      	ldr	r3, [pc, #468]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a74      	ldr	r2, [pc, #464]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 8009750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009754:	6013      	str	r3, [r2, #0]
 8009756:	e00b      	b.n	8009770 <HAL_RCC_OscConfig+0xd8>
 8009758:	4b71      	ldr	r3, [pc, #452]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a70      	ldr	r2, [pc, #448]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 800975e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009762:	6013      	str	r3, [r2, #0]
 8009764:	4b6e      	ldr	r3, [pc, #440]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a6d      	ldr	r2, [pc, #436]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 800976a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800976e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d013      	beq.n	80097a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009778:	f7fa f802 	bl	8003780 <HAL_GetTick>
 800977c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800977e:	e008      	b.n	8009792 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009780:	f7f9 fffe 	bl	8003780 <HAL_GetTick>
 8009784:	4602      	mov	r2, r0
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	2b64      	cmp	r3, #100	; 0x64
 800978c:	d901      	bls.n	8009792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e3d4      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009792:	4b63      	ldr	r3, [pc, #396]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d0f0      	beq.n	8009780 <HAL_RCC_OscConfig+0xe8>
 800979e:	e014      	b.n	80097ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097a0:	f7f9 ffee 	bl	8003780 <HAL_GetTick>
 80097a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097a6:	e008      	b.n	80097ba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80097a8:	f7f9 ffea 	bl	8003780 <HAL_GetTick>
 80097ac:	4602      	mov	r2, r0
 80097ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	2b64      	cmp	r3, #100	; 0x64
 80097b4:	d901      	bls.n	80097ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80097b6:	2303      	movs	r3, #3
 80097b8:	e3c0      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097ba:	4b59      	ldr	r3, [pc, #356]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1f0      	bne.n	80097a8 <HAL_RCC_OscConfig+0x110>
 80097c6:	e000      	b.n	80097ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f003 0302 	and.w	r3, r3, #2
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f000 80ca 	beq.w	800996c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097d8:	4b51      	ldr	r3, [pc, #324]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097e2:	4b4f      	ldr	r3, [pc, #316]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 80097e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80097e8:	6a3b      	ldr	r3, [r7, #32]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d007      	beq.n	80097fe <HAL_RCC_OscConfig+0x166>
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	2b18      	cmp	r3, #24
 80097f2:	d156      	bne.n	80098a2 <HAL_RCC_OscConfig+0x20a>
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	f003 0303 	and.w	r3, r3, #3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d151      	bne.n	80098a2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80097fe:	4b48      	ldr	r3, [pc, #288]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f003 0304 	and.w	r3, r3, #4
 8009806:	2b00      	cmp	r3, #0
 8009808:	d005      	beq.n	8009816 <HAL_RCC_OscConfig+0x17e>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e392      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009816:	4b42      	ldr	r3, [pc, #264]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f023 0219 	bic.w	r2, r3, #25
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	493f      	ldr	r1, [pc, #252]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 8009824:	4313      	orrs	r3, r2
 8009826:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009828:	f7f9 ffaa 	bl	8003780 <HAL_GetTick>
 800982c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800982e:	e008      	b.n	8009842 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009830:	f7f9 ffa6 	bl	8003780 <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	2b02      	cmp	r3, #2
 800983c:	d901      	bls.n	8009842 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	e37c      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009842:	4b37      	ldr	r3, [pc, #220]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 0304 	and.w	r3, r3, #4
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0f0      	beq.n	8009830 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800984e:	f7f9 ffa3 	bl	8003798 <HAL_GetREVID>
 8009852:	4603      	mov	r3, r0
 8009854:	f241 0203 	movw	r2, #4099	; 0x1003
 8009858:	4293      	cmp	r3, r2
 800985a:	d817      	bhi.n	800988c <HAL_RCC_OscConfig+0x1f4>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	2b40      	cmp	r3, #64	; 0x40
 8009862:	d108      	bne.n	8009876 <HAL_RCC_OscConfig+0x1de>
 8009864:	4b2e      	ldr	r3, [pc, #184]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800986c:	4a2c      	ldr	r2, [pc, #176]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 800986e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009872:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009874:	e07a      	b.n	800996c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009876:	4b2a      	ldr	r3, [pc, #168]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	031b      	lsls	r3, r3, #12
 8009884:	4926      	ldr	r1, [pc, #152]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 8009886:	4313      	orrs	r3, r2
 8009888:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800988a:	e06f      	b.n	800996c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800988c:	4b24      	ldr	r3, [pc, #144]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	061b      	lsls	r3, r3, #24
 800989a:	4921      	ldr	r1, [pc, #132]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 800989c:	4313      	orrs	r3, r2
 800989e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098a0:	e064      	b.n	800996c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d047      	beq.n	800993a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80098aa:	4b1d      	ldr	r3, [pc, #116]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f023 0219 	bic.w	r2, r3, #25
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	491a      	ldr	r1, [pc, #104]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 80098b8:	4313      	orrs	r3, r2
 80098ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098bc:	f7f9 ff60 	bl	8003780 <HAL_GetTick>
 80098c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098c2:	e008      	b.n	80098d6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80098c4:	f7f9 ff5c 	bl	8003780 <HAL_GetTick>
 80098c8:	4602      	mov	r2, r0
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d901      	bls.n	80098d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e332      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098d6:	4b12      	ldr	r3, [pc, #72]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 0304 	and.w	r3, r3, #4
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d0f0      	beq.n	80098c4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098e2:	f7f9 ff59 	bl	8003798 <HAL_GetREVID>
 80098e6:	4603      	mov	r3, r0
 80098e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d819      	bhi.n	8009924 <HAL_RCC_OscConfig+0x28c>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	2b40      	cmp	r3, #64	; 0x40
 80098f6:	d108      	bne.n	800990a <HAL_RCC_OscConfig+0x272>
 80098f8:	4b09      	ldr	r3, [pc, #36]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009900:	4a07      	ldr	r2, [pc, #28]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 8009902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009906:	6053      	str	r3, [r2, #4]
 8009908:	e030      	b.n	800996c <HAL_RCC_OscConfig+0x2d4>
 800990a:	4b05      	ldr	r3, [pc, #20]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	031b      	lsls	r3, r3, #12
 8009918:	4901      	ldr	r1, [pc, #4]	; (8009920 <HAL_RCC_OscConfig+0x288>)
 800991a:	4313      	orrs	r3, r2
 800991c:	604b      	str	r3, [r1, #4]
 800991e:	e025      	b.n	800996c <HAL_RCC_OscConfig+0x2d4>
 8009920:	58024400 	.word	0x58024400
 8009924:	4b9a      	ldr	r3, [pc, #616]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	061b      	lsls	r3, r3, #24
 8009932:	4997      	ldr	r1, [pc, #604]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009934:	4313      	orrs	r3, r2
 8009936:	604b      	str	r3, [r1, #4]
 8009938:	e018      	b.n	800996c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800993a:	4b95      	ldr	r3, [pc, #596]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a94      	ldr	r2, [pc, #592]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009940:	f023 0301 	bic.w	r3, r3, #1
 8009944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009946:	f7f9 ff1b 	bl	8003780 <HAL_GetTick>
 800994a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800994c:	e008      	b.n	8009960 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800994e:	f7f9 ff17 	bl	8003780 <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	2b02      	cmp	r3, #2
 800995a:	d901      	bls.n	8009960 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800995c:	2303      	movs	r3, #3
 800995e:	e2ed      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009960:	4b8b      	ldr	r3, [pc, #556]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 0304 	and.w	r3, r3, #4
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1f0      	bne.n	800994e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 0310 	and.w	r3, r3, #16
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 80a9 	beq.w	8009acc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800997a:	4b85      	ldr	r3, [pc, #532]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009982:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009984:	4b82      	ldr	r3, [pc, #520]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009988:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	2b08      	cmp	r3, #8
 800998e:	d007      	beq.n	80099a0 <HAL_RCC_OscConfig+0x308>
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	2b18      	cmp	r3, #24
 8009994:	d13a      	bne.n	8009a0c <HAL_RCC_OscConfig+0x374>
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	f003 0303 	and.w	r3, r3, #3
 800999c:	2b01      	cmp	r3, #1
 800999e:	d135      	bne.n	8009a0c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099a0:	4b7b      	ldr	r3, [pc, #492]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d005      	beq.n	80099b8 <HAL_RCC_OscConfig+0x320>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	69db      	ldr	r3, [r3, #28]
 80099b0:	2b80      	cmp	r3, #128	; 0x80
 80099b2:	d001      	beq.n	80099b8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	e2c1      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099b8:	f7f9 feee 	bl	8003798 <HAL_GetREVID>
 80099bc:	4603      	mov	r3, r0
 80099be:	f241 0203 	movw	r2, #4099	; 0x1003
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d817      	bhi.n	80099f6 <HAL_RCC_OscConfig+0x35e>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	2b20      	cmp	r3, #32
 80099cc:	d108      	bne.n	80099e0 <HAL_RCC_OscConfig+0x348>
 80099ce:	4b70      	ldr	r3, [pc, #448]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80099d6:	4a6e      	ldr	r2, [pc, #440]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 80099d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099dc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099de:	e075      	b.n	8009acc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099e0:	4b6b      	ldr	r3, [pc, #428]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a1b      	ldr	r3, [r3, #32]
 80099ec:	069b      	lsls	r3, r3, #26
 80099ee:	4968      	ldr	r1, [pc, #416]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099f4:	e06a      	b.n	8009acc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099f6:	4b66      	ldr	r3, [pc, #408]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a1b      	ldr	r3, [r3, #32]
 8009a02:	061b      	lsls	r3, r3, #24
 8009a04:	4962      	ldr	r1, [pc, #392]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a0a:	e05f      	b.n	8009acc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	69db      	ldr	r3, [r3, #28]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d042      	beq.n	8009a9a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009a14:	4b5e      	ldr	r3, [pc, #376]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a5d      	ldr	r2, [pc, #372]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a20:	f7f9 feae 	bl	8003780 <HAL_GetTick>
 8009a24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a26:	e008      	b.n	8009a3a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009a28:	f7f9 feaa 	bl	8003780 <HAL_GetTick>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d901      	bls.n	8009a3a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e280      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a3a:	4b55      	ldr	r3, [pc, #340]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d0f0      	beq.n	8009a28 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a46:	f7f9 fea7 	bl	8003798 <HAL_GetREVID>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d817      	bhi.n	8009a84 <HAL_RCC_OscConfig+0x3ec>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a1b      	ldr	r3, [r3, #32]
 8009a58:	2b20      	cmp	r3, #32
 8009a5a:	d108      	bne.n	8009a6e <HAL_RCC_OscConfig+0x3d6>
 8009a5c:	4b4c      	ldr	r3, [pc, #304]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009a64:	4a4a      	ldr	r2, [pc, #296]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009a66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a6a:	6053      	str	r3, [r2, #4]
 8009a6c:	e02e      	b.n	8009acc <HAL_RCC_OscConfig+0x434>
 8009a6e:	4b48      	ldr	r3, [pc, #288]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	069b      	lsls	r3, r3, #26
 8009a7c:	4944      	ldr	r1, [pc, #272]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	604b      	str	r3, [r1, #4]
 8009a82:	e023      	b.n	8009acc <HAL_RCC_OscConfig+0x434>
 8009a84:	4b42      	ldr	r3, [pc, #264]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a1b      	ldr	r3, [r3, #32]
 8009a90:	061b      	lsls	r3, r3, #24
 8009a92:	493f      	ldr	r1, [pc, #252]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009a94:	4313      	orrs	r3, r2
 8009a96:	60cb      	str	r3, [r1, #12]
 8009a98:	e018      	b.n	8009acc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009a9a:	4b3d      	ldr	r3, [pc, #244]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a3c      	ldr	r2, [pc, #240]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aa6:	f7f9 fe6b 	bl	8003780 <HAL_GetTick>
 8009aaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009aac:	e008      	b.n	8009ac0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009aae:	f7f9 fe67 	bl	8003780 <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d901      	bls.n	8009ac0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e23d      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ac0:	4b33      	ldr	r3, [pc, #204]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1f0      	bne.n	8009aae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 0308 	and.w	r3, r3, #8
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d036      	beq.n	8009b46 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	695b      	ldr	r3, [r3, #20]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d019      	beq.n	8009b14 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ae0:	4b2b      	ldr	r3, [pc, #172]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ae4:	4a2a      	ldr	r2, [pc, #168]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009ae6:	f043 0301 	orr.w	r3, r3, #1
 8009aea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009aec:	f7f9 fe48 	bl	8003780 <HAL_GetTick>
 8009af0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009af2:	e008      	b.n	8009b06 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009af4:	f7f9 fe44 	bl	8003780 <HAL_GetTick>
 8009af8:	4602      	mov	r2, r0
 8009afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d901      	bls.n	8009b06 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	e21a      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b06:	4b22      	ldr	r3, [pc, #136]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b0a:	f003 0302 	and.w	r3, r3, #2
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d0f0      	beq.n	8009af4 <HAL_RCC_OscConfig+0x45c>
 8009b12:	e018      	b.n	8009b46 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b14:	4b1e      	ldr	r3, [pc, #120]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b18:	4a1d      	ldr	r2, [pc, #116]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009b1a:	f023 0301 	bic.w	r3, r3, #1
 8009b1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b20:	f7f9 fe2e 	bl	8003780 <HAL_GetTick>
 8009b24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b26:	e008      	b.n	8009b3a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b28:	f7f9 fe2a 	bl	8003780 <HAL_GetTick>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d901      	bls.n	8009b3a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009b36:	2303      	movs	r3, #3
 8009b38:	e200      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b3a:	4b15      	ldr	r3, [pc, #84]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b3e:	f003 0302 	and.w	r3, r3, #2
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1f0      	bne.n	8009b28 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f003 0320 	and.w	r3, r3, #32
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d039      	beq.n	8009bc6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d01c      	beq.n	8009b94 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009b5a:	4b0d      	ldr	r3, [pc, #52]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a0c      	ldr	r2, [pc, #48]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009b60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b66:	f7f9 fe0b 	bl	8003780 <HAL_GetTick>
 8009b6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b6c:	e008      	b.n	8009b80 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b6e:	f7f9 fe07 	bl	8003780 <HAL_GetTick>
 8009b72:	4602      	mov	r2, r0
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d901      	bls.n	8009b80 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	e1dd      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b80:	4b03      	ldr	r3, [pc, #12]	; (8009b90 <HAL_RCC_OscConfig+0x4f8>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d0f0      	beq.n	8009b6e <HAL_RCC_OscConfig+0x4d6>
 8009b8c:	e01b      	b.n	8009bc6 <HAL_RCC_OscConfig+0x52e>
 8009b8e:	bf00      	nop
 8009b90:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009b94:	4b9b      	ldr	r3, [pc, #620]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a9a      	ldr	r2, [pc, #616]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009ba0:	f7f9 fdee 	bl	8003780 <HAL_GetTick>
 8009ba4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009ba6:	e008      	b.n	8009bba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ba8:	f7f9 fdea 	bl	8003780 <HAL_GetTick>
 8009bac:	4602      	mov	r2, r0
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d901      	bls.n	8009bba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	e1c0      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009bba:	4b92      	ldr	r3, [pc, #584]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1f0      	bne.n	8009ba8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0304 	and.w	r3, r3, #4
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 8081 	beq.w	8009cd6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009bd4:	4b8c      	ldr	r3, [pc, #560]	; (8009e08 <HAL_RCC_OscConfig+0x770>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a8b      	ldr	r2, [pc, #556]	; (8009e08 <HAL_RCC_OscConfig+0x770>)
 8009bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009be0:	f7f9 fdce 	bl	8003780 <HAL_GetTick>
 8009be4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009be6:	e008      	b.n	8009bfa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009be8:	f7f9 fdca 	bl	8003780 <HAL_GetTick>
 8009bec:	4602      	mov	r2, r0
 8009bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	2b64      	cmp	r3, #100	; 0x64
 8009bf4:	d901      	bls.n	8009bfa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	e1a0      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009bfa:	4b83      	ldr	r3, [pc, #524]	; (8009e08 <HAL_RCC_OscConfig+0x770>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d0f0      	beq.n	8009be8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d106      	bne.n	8009c1c <HAL_RCC_OscConfig+0x584>
 8009c0e:	4b7d      	ldr	r3, [pc, #500]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c12:	4a7c      	ldr	r2, [pc, #496]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009c14:	f043 0301 	orr.w	r3, r3, #1
 8009c18:	6713      	str	r3, [r2, #112]	; 0x70
 8009c1a:	e02d      	b.n	8009c78 <HAL_RCC_OscConfig+0x5e0>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d10c      	bne.n	8009c3e <HAL_RCC_OscConfig+0x5a6>
 8009c24:	4b77      	ldr	r3, [pc, #476]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c28:	4a76      	ldr	r2, [pc, #472]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009c2a:	f023 0301 	bic.w	r3, r3, #1
 8009c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c30:	4b74      	ldr	r3, [pc, #464]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c34:	4a73      	ldr	r2, [pc, #460]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009c36:	f023 0304 	bic.w	r3, r3, #4
 8009c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c3c:	e01c      	b.n	8009c78 <HAL_RCC_OscConfig+0x5e0>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	2b05      	cmp	r3, #5
 8009c44:	d10c      	bne.n	8009c60 <HAL_RCC_OscConfig+0x5c8>
 8009c46:	4b6f      	ldr	r3, [pc, #444]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4a:	4a6e      	ldr	r2, [pc, #440]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009c4c:	f043 0304 	orr.w	r3, r3, #4
 8009c50:	6713      	str	r3, [r2, #112]	; 0x70
 8009c52:	4b6c      	ldr	r3, [pc, #432]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c56:	4a6b      	ldr	r2, [pc, #428]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009c58:	f043 0301 	orr.w	r3, r3, #1
 8009c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c5e:	e00b      	b.n	8009c78 <HAL_RCC_OscConfig+0x5e0>
 8009c60:	4b68      	ldr	r3, [pc, #416]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c64:	4a67      	ldr	r2, [pc, #412]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009c66:	f023 0301 	bic.w	r3, r3, #1
 8009c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c6c:	4b65      	ldr	r3, [pc, #404]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c70:	4a64      	ldr	r2, [pc, #400]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009c72:	f023 0304 	bic.w	r3, r3, #4
 8009c76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d015      	beq.n	8009cac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c80:	f7f9 fd7e 	bl	8003780 <HAL_GetTick>
 8009c84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c86:	e00a      	b.n	8009c9e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c88:	f7f9 fd7a 	bl	8003780 <HAL_GetTick>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d901      	bls.n	8009c9e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	e14e      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c9e:	4b59      	ldr	r3, [pc, #356]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca2:	f003 0302 	and.w	r3, r3, #2
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d0ee      	beq.n	8009c88 <HAL_RCC_OscConfig+0x5f0>
 8009caa:	e014      	b.n	8009cd6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cac:	f7f9 fd68 	bl	8003780 <HAL_GetTick>
 8009cb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009cb2:	e00a      	b.n	8009cca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cb4:	f7f9 fd64 	bl	8003780 <HAL_GetTick>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	1ad3      	subs	r3, r2, r3
 8009cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d901      	bls.n	8009cca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	e138      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009cca:	4b4e      	ldr	r3, [pc, #312]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cce:	f003 0302 	and.w	r3, r3, #2
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d1ee      	bne.n	8009cb4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 812d 	beq.w	8009f3a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009ce0:	4b48      	ldr	r3, [pc, #288]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ce8:	2b18      	cmp	r3, #24
 8009cea:	f000 80bd 	beq.w	8009e68 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	f040 809e 	bne.w	8009e34 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cf8:	4b42      	ldr	r3, [pc, #264]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a41      	ldr	r2, [pc, #260]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d04:	f7f9 fd3c 	bl	8003780 <HAL_GetTick>
 8009d08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d0a:	e008      	b.n	8009d1e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d0c:	f7f9 fd38 	bl	8003780 <HAL_GetTick>
 8009d10:	4602      	mov	r2, r0
 8009d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d14:	1ad3      	subs	r3, r2, r3
 8009d16:	2b02      	cmp	r3, #2
 8009d18:	d901      	bls.n	8009d1e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	e10e      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d1e:	4b39      	ldr	r3, [pc, #228]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1f0      	bne.n	8009d0c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d2a:	4b36      	ldr	r3, [pc, #216]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d2e:	4b37      	ldr	r3, [pc, #220]	; (8009e0c <HAL_RCC_OscConfig+0x774>)
 8009d30:	4013      	ands	r3, r2
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d3a:	0112      	lsls	r2, r2, #4
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	4931      	ldr	r1, [pc, #196]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009d40:	4313      	orrs	r3, r2
 8009d42:	628b      	str	r3, [r1, #40]	; 0x28
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d52:	3b01      	subs	r3, #1
 8009d54:	025b      	lsls	r3, r3, #9
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	431a      	orrs	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	041b      	lsls	r3, r3, #16
 8009d62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d66:	431a      	orrs	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	061b      	lsls	r3, r3, #24
 8009d70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d74:	4923      	ldr	r1, [pc, #140]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009d76:	4313      	orrs	r3, r2
 8009d78:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009d7a:	4b22      	ldr	r3, [pc, #136]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7e:	4a21      	ldr	r2, [pc, #132]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009d80:	f023 0301 	bic.w	r3, r3, #1
 8009d84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009d86:	4b1f      	ldr	r3, [pc, #124]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d8a:	4b21      	ldr	r3, [pc, #132]	; (8009e10 <HAL_RCC_OscConfig+0x778>)
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009d92:	00d2      	lsls	r2, r2, #3
 8009d94:	491b      	ldr	r1, [pc, #108]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009d96:	4313      	orrs	r3, r2
 8009d98:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009d9a:	4b1a      	ldr	r3, [pc, #104]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9e:	f023 020c 	bic.w	r2, r3, #12
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da6:	4917      	ldr	r1, [pc, #92]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009da8:	4313      	orrs	r3, r2
 8009daa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009dac:	4b15      	ldr	r3, [pc, #84]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db0:	f023 0202 	bic.w	r2, r3, #2
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009db8:	4912      	ldr	r1, [pc, #72]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009dbe:	4b11      	ldr	r3, [pc, #68]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc2:	4a10      	ldr	r2, [pc, #64]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dca:	4b0e      	ldr	r3, [pc, #56]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dce:	4a0d      	ldr	r2, [pc, #52]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009dd6:	4b0b      	ldr	r3, [pc, #44]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dda:	4a0a      	ldr	r2, [pc, #40]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009de0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009de2:	4b08      	ldr	r3, [pc, #32]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de6:	4a07      	ldr	r2, [pc, #28]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009de8:	f043 0301 	orr.w	r3, r3, #1
 8009dec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009dee:	4b05      	ldr	r3, [pc, #20]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a04      	ldr	r2, [pc, #16]	; (8009e04 <HAL_RCC_OscConfig+0x76c>)
 8009df4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dfa:	f7f9 fcc1 	bl	8003780 <HAL_GetTick>
 8009dfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e00:	e011      	b.n	8009e26 <HAL_RCC_OscConfig+0x78e>
 8009e02:	bf00      	nop
 8009e04:	58024400 	.word	0x58024400
 8009e08:	58024800 	.word	0x58024800
 8009e0c:	fffffc0c 	.word	0xfffffc0c
 8009e10:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e14:	f7f9 fcb4 	bl	8003780 <HAL_GetTick>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d901      	bls.n	8009e26 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e08a      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e26:	4b47      	ldr	r3, [pc, #284]	; (8009f44 <HAL_RCC_OscConfig+0x8ac>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d0f0      	beq.n	8009e14 <HAL_RCC_OscConfig+0x77c>
 8009e32:	e082      	b.n	8009f3a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e34:	4b43      	ldr	r3, [pc, #268]	; (8009f44 <HAL_RCC_OscConfig+0x8ac>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a42      	ldr	r2, [pc, #264]	; (8009f44 <HAL_RCC_OscConfig+0x8ac>)
 8009e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e40:	f7f9 fc9e 	bl	8003780 <HAL_GetTick>
 8009e44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e46:	e008      	b.n	8009e5a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e48:	f7f9 fc9a 	bl	8003780 <HAL_GetTick>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d901      	bls.n	8009e5a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009e56:	2303      	movs	r3, #3
 8009e58:	e070      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e5a:	4b3a      	ldr	r3, [pc, #232]	; (8009f44 <HAL_RCC_OscConfig+0x8ac>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1f0      	bne.n	8009e48 <HAL_RCC_OscConfig+0x7b0>
 8009e66:	e068      	b.n	8009f3a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009e68:	4b36      	ldr	r3, [pc, #216]	; (8009f44 <HAL_RCC_OscConfig+0x8ac>)
 8009e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009e6e:	4b35      	ldr	r3, [pc, #212]	; (8009f44 <HAL_RCC_OscConfig+0x8ac>)
 8009e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e72:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d031      	beq.n	8009ee0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	f003 0203 	and.w	r2, r3, #3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d12a      	bne.n	8009ee0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	091b      	lsrs	r3, r3, #4
 8009e8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d122      	bne.n	8009ee0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d11a      	bne.n	8009ee0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	0a5b      	lsrs	r3, r3, #9
 8009eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d111      	bne.n	8009ee0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	0c1b      	lsrs	r3, r3, #16
 8009ec0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d108      	bne.n	8009ee0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	0e1b      	lsrs	r3, r3, #24
 8009ed2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eda:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d001      	beq.n	8009ee4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e02b      	b.n	8009f3c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009ee4:	4b17      	ldr	r3, [pc, #92]	; (8009f44 <HAL_RCC_OscConfig+0x8ac>)
 8009ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee8:	08db      	lsrs	r3, r3, #3
 8009eea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009eee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ef4:	693a      	ldr	r2, [r7, #16]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d01f      	beq.n	8009f3a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009efa:	4b12      	ldr	r3, [pc, #72]	; (8009f44 <HAL_RCC_OscConfig+0x8ac>)
 8009efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efe:	4a11      	ldr	r2, [pc, #68]	; (8009f44 <HAL_RCC_OscConfig+0x8ac>)
 8009f00:	f023 0301 	bic.w	r3, r3, #1
 8009f04:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009f06:	f7f9 fc3b 	bl	8003780 <HAL_GetTick>
 8009f0a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009f0c:	bf00      	nop
 8009f0e:	f7f9 fc37 	bl	8003780 <HAL_GetTick>
 8009f12:	4602      	mov	r2, r0
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d0f9      	beq.n	8009f0e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f1a:	4b0a      	ldr	r3, [pc, #40]	; (8009f44 <HAL_RCC_OscConfig+0x8ac>)
 8009f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f1e:	4b0a      	ldr	r3, [pc, #40]	; (8009f48 <HAL_RCC_OscConfig+0x8b0>)
 8009f20:	4013      	ands	r3, r2
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f26:	00d2      	lsls	r2, r2, #3
 8009f28:	4906      	ldr	r1, [pc, #24]	; (8009f44 <HAL_RCC_OscConfig+0x8ac>)
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009f2e:	4b05      	ldr	r3, [pc, #20]	; (8009f44 <HAL_RCC_OscConfig+0x8ac>)
 8009f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f32:	4a04      	ldr	r2, [pc, #16]	; (8009f44 <HAL_RCC_OscConfig+0x8ac>)
 8009f34:	f043 0301 	orr.w	r3, r3, #1
 8009f38:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3730      	adds	r7, #48	; 0x30
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	58024400 	.word	0x58024400
 8009f48:	ffff0007 	.word	0xffff0007

08009f4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d101      	bne.n	8009f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e19c      	b.n	800a29a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f60:	4b8a      	ldr	r3, [pc, #552]	; (800a18c <HAL_RCC_ClockConfig+0x240>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 030f 	and.w	r3, r3, #15
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d910      	bls.n	8009f90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f6e:	4b87      	ldr	r3, [pc, #540]	; (800a18c <HAL_RCC_ClockConfig+0x240>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f023 020f 	bic.w	r2, r3, #15
 8009f76:	4985      	ldr	r1, [pc, #532]	; (800a18c <HAL_RCC_ClockConfig+0x240>)
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f7e:	4b83      	ldr	r3, [pc, #524]	; (800a18c <HAL_RCC_ClockConfig+0x240>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 030f 	and.w	r3, r3, #15
 8009f86:	683a      	ldr	r2, [r7, #0]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d001      	beq.n	8009f90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e184      	b.n	800a29a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f003 0304 	and.w	r3, r3, #4
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d010      	beq.n	8009fbe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	691a      	ldr	r2, [r3, #16]
 8009fa0:	4b7b      	ldr	r3, [pc, #492]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d908      	bls.n	8009fbe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fac:	4b78      	ldr	r3, [pc, #480]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	4975      	ldr	r1, [pc, #468]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f003 0308 	and.w	r3, r3, #8
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d010      	beq.n	8009fec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	695a      	ldr	r2, [r3, #20]
 8009fce:	4b70      	ldr	r3, [pc, #448]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 8009fd0:	69db      	ldr	r3, [r3, #28]
 8009fd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d908      	bls.n	8009fec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009fda:	4b6d      	ldr	r3, [pc, #436]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 8009fdc:	69db      	ldr	r3, [r3, #28]
 8009fde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	695b      	ldr	r3, [r3, #20]
 8009fe6:	496a      	ldr	r1, [pc, #424]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f003 0310 	and.w	r3, r3, #16
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d010      	beq.n	800a01a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	699a      	ldr	r2, [r3, #24]
 8009ffc:	4b64      	ldr	r3, [pc, #400]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 8009ffe:	69db      	ldr	r3, [r3, #28]
 800a000:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a004:	429a      	cmp	r2, r3
 800a006:	d908      	bls.n	800a01a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a008:	4b61      	ldr	r3, [pc, #388]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a00a:	69db      	ldr	r3, [r3, #28]
 800a00c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	495e      	ldr	r1, [pc, #376]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a016:	4313      	orrs	r3, r2
 800a018:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f003 0320 	and.w	r3, r3, #32
 800a022:	2b00      	cmp	r3, #0
 800a024:	d010      	beq.n	800a048 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	69da      	ldr	r2, [r3, #28]
 800a02a:	4b59      	ldr	r3, [pc, #356]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a032:	429a      	cmp	r2, r3
 800a034:	d908      	bls.n	800a048 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a036:	4b56      	ldr	r3, [pc, #344]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	69db      	ldr	r3, [r3, #28]
 800a042:	4953      	ldr	r1, [pc, #332]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a044:	4313      	orrs	r3, r2
 800a046:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 0302 	and.w	r3, r3, #2
 800a050:	2b00      	cmp	r3, #0
 800a052:	d010      	beq.n	800a076 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	68da      	ldr	r2, [r3, #12]
 800a058:	4b4d      	ldr	r3, [pc, #308]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	f003 030f 	and.w	r3, r3, #15
 800a060:	429a      	cmp	r2, r3
 800a062:	d908      	bls.n	800a076 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a064:	4b4a      	ldr	r3, [pc, #296]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	f023 020f 	bic.w	r2, r3, #15
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	4947      	ldr	r1, [pc, #284]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a072:	4313      	orrs	r3, r2
 800a074:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 0301 	and.w	r3, r3, #1
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d055      	beq.n	800a12e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a082:	4b43      	ldr	r3, [pc, #268]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	4940      	ldr	r1, [pc, #256]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a090:	4313      	orrs	r3, r2
 800a092:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d107      	bne.n	800a0ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a09c:	4b3c      	ldr	r3, [pc, #240]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d121      	bne.n	800a0ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e0f6      	b.n	800a29a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	2b03      	cmp	r3, #3
 800a0b2:	d107      	bne.n	800a0c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0b4:	4b36      	ldr	r3, [pc, #216]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d115      	bne.n	800a0ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e0ea      	b.n	800a29a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d107      	bne.n	800a0dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0cc:	4b30      	ldr	r3, [pc, #192]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d109      	bne.n	800a0ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e0de      	b.n	800a29a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0dc:	4b2c      	ldr	r3, [pc, #176]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f003 0304 	and.w	r3, r3, #4
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d101      	bne.n	800a0ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e0d6      	b.n	800a29a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a0ec:	4b28      	ldr	r3, [pc, #160]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	f023 0207 	bic.w	r2, r3, #7
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	4925      	ldr	r1, [pc, #148]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0fe:	f7f9 fb3f 	bl	8003780 <HAL_GetTick>
 800a102:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a104:	e00a      	b.n	800a11c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a106:	f7f9 fb3b 	bl	8003780 <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	f241 3288 	movw	r2, #5000	; 0x1388
 800a114:	4293      	cmp	r3, r2
 800a116:	d901      	bls.n	800a11c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	e0be      	b.n	800a29a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a11c:	4b1c      	ldr	r3, [pc, #112]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	00db      	lsls	r3, r3, #3
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d1eb      	bne.n	800a106 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 0302 	and.w	r3, r3, #2
 800a136:	2b00      	cmp	r3, #0
 800a138:	d010      	beq.n	800a15c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68da      	ldr	r2, [r3, #12]
 800a13e:	4b14      	ldr	r3, [pc, #80]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a140:	699b      	ldr	r3, [r3, #24]
 800a142:	f003 030f 	and.w	r3, r3, #15
 800a146:	429a      	cmp	r2, r3
 800a148:	d208      	bcs.n	800a15c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a14a:	4b11      	ldr	r3, [pc, #68]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a14c:	699b      	ldr	r3, [r3, #24]
 800a14e:	f023 020f 	bic.w	r2, r3, #15
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	490e      	ldr	r1, [pc, #56]	; (800a190 <HAL_RCC_ClockConfig+0x244>)
 800a158:	4313      	orrs	r3, r2
 800a15a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a15c:	4b0b      	ldr	r3, [pc, #44]	; (800a18c <HAL_RCC_ClockConfig+0x240>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f003 030f 	and.w	r3, r3, #15
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	429a      	cmp	r2, r3
 800a168:	d214      	bcs.n	800a194 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a16a:	4b08      	ldr	r3, [pc, #32]	; (800a18c <HAL_RCC_ClockConfig+0x240>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f023 020f 	bic.w	r2, r3, #15
 800a172:	4906      	ldr	r1, [pc, #24]	; (800a18c <HAL_RCC_ClockConfig+0x240>)
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	4313      	orrs	r3, r2
 800a178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a17a:	4b04      	ldr	r3, [pc, #16]	; (800a18c <HAL_RCC_ClockConfig+0x240>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 030f 	and.w	r3, r3, #15
 800a182:	683a      	ldr	r2, [r7, #0]
 800a184:	429a      	cmp	r2, r3
 800a186:	d005      	beq.n	800a194 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e086      	b.n	800a29a <HAL_RCC_ClockConfig+0x34e>
 800a18c:	52002000 	.word	0x52002000
 800a190:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f003 0304 	and.w	r3, r3, #4
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d010      	beq.n	800a1c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	691a      	ldr	r2, [r3, #16]
 800a1a4:	4b3f      	ldr	r3, [pc, #252]	; (800a2a4 <HAL_RCC_ClockConfig+0x358>)
 800a1a6:	699b      	ldr	r3, [r3, #24]
 800a1a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d208      	bcs.n	800a1c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1b0:	4b3c      	ldr	r3, [pc, #240]	; (800a2a4 <HAL_RCC_ClockConfig+0x358>)
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	4939      	ldr	r1, [pc, #228]	; (800a2a4 <HAL_RCC_ClockConfig+0x358>)
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 0308 	and.w	r3, r3, #8
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d010      	beq.n	800a1f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	695a      	ldr	r2, [r3, #20]
 800a1d2:	4b34      	ldr	r3, [pc, #208]	; (800a2a4 <HAL_RCC_ClockConfig+0x358>)
 800a1d4:	69db      	ldr	r3, [r3, #28]
 800a1d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d208      	bcs.n	800a1f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a1de:	4b31      	ldr	r3, [pc, #196]	; (800a2a4 <HAL_RCC_ClockConfig+0x358>)
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	492e      	ldr	r1, [pc, #184]	; (800a2a4 <HAL_RCC_ClockConfig+0x358>)
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0310 	and.w	r3, r3, #16
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d010      	beq.n	800a21e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	699a      	ldr	r2, [r3, #24]
 800a200:	4b28      	ldr	r3, [pc, #160]	; (800a2a4 <HAL_RCC_ClockConfig+0x358>)
 800a202:	69db      	ldr	r3, [r3, #28]
 800a204:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a208:	429a      	cmp	r2, r3
 800a20a:	d208      	bcs.n	800a21e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a20c:	4b25      	ldr	r3, [pc, #148]	; (800a2a4 <HAL_RCC_ClockConfig+0x358>)
 800a20e:	69db      	ldr	r3, [r3, #28]
 800a210:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	4922      	ldr	r1, [pc, #136]	; (800a2a4 <HAL_RCC_ClockConfig+0x358>)
 800a21a:	4313      	orrs	r3, r2
 800a21c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f003 0320 	and.w	r3, r3, #32
 800a226:	2b00      	cmp	r3, #0
 800a228:	d010      	beq.n	800a24c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	69da      	ldr	r2, [r3, #28]
 800a22e:	4b1d      	ldr	r3, [pc, #116]	; (800a2a4 <HAL_RCC_ClockConfig+0x358>)
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a236:	429a      	cmp	r2, r3
 800a238:	d208      	bcs.n	800a24c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a23a:	4b1a      	ldr	r3, [pc, #104]	; (800a2a4 <HAL_RCC_ClockConfig+0x358>)
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	69db      	ldr	r3, [r3, #28]
 800a246:	4917      	ldr	r1, [pc, #92]	; (800a2a4 <HAL_RCC_ClockConfig+0x358>)
 800a248:	4313      	orrs	r3, r2
 800a24a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a24c:	f000 f834 	bl	800a2b8 <HAL_RCC_GetSysClockFreq>
 800a250:	4602      	mov	r2, r0
 800a252:	4b14      	ldr	r3, [pc, #80]	; (800a2a4 <HAL_RCC_ClockConfig+0x358>)
 800a254:	699b      	ldr	r3, [r3, #24]
 800a256:	0a1b      	lsrs	r3, r3, #8
 800a258:	f003 030f 	and.w	r3, r3, #15
 800a25c:	4912      	ldr	r1, [pc, #72]	; (800a2a8 <HAL_RCC_ClockConfig+0x35c>)
 800a25e:	5ccb      	ldrb	r3, [r1, r3]
 800a260:	f003 031f 	and.w	r3, r3, #31
 800a264:	fa22 f303 	lsr.w	r3, r2, r3
 800a268:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a26a:	4b0e      	ldr	r3, [pc, #56]	; (800a2a4 <HAL_RCC_ClockConfig+0x358>)
 800a26c:	699b      	ldr	r3, [r3, #24]
 800a26e:	f003 030f 	and.w	r3, r3, #15
 800a272:	4a0d      	ldr	r2, [pc, #52]	; (800a2a8 <HAL_RCC_ClockConfig+0x35c>)
 800a274:	5cd3      	ldrb	r3, [r2, r3]
 800a276:	f003 031f 	and.w	r3, r3, #31
 800a27a:	693a      	ldr	r2, [r7, #16]
 800a27c:	fa22 f303 	lsr.w	r3, r2, r3
 800a280:	4a0a      	ldr	r2, [pc, #40]	; (800a2ac <HAL_RCC_ClockConfig+0x360>)
 800a282:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a284:	4a0a      	ldr	r2, [pc, #40]	; (800a2b0 <HAL_RCC_ClockConfig+0x364>)
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a28a:	4b0a      	ldr	r3, [pc, #40]	; (800a2b4 <HAL_RCC_ClockConfig+0x368>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4618      	mov	r0, r3
 800a290:	f7f8 ffae 	bl	80031f0 <HAL_InitTick>
 800a294:	4603      	mov	r3, r0
 800a296:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a298:	7bfb      	ldrb	r3, [r7, #15]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3718      	adds	r7, #24
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	58024400 	.word	0x58024400
 800a2a8:	0801667c 	.word	0x0801667c
 800a2ac:	2400008c 	.word	0x2400008c
 800a2b0:	24000088 	.word	0x24000088
 800a2b4:	24000090 	.word	0x24000090

0800a2b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b089      	sub	sp, #36	; 0x24
 800a2bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a2be:	4bb3      	ldr	r3, [pc, #716]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2c6:	2b18      	cmp	r3, #24
 800a2c8:	f200 8155 	bhi.w	800a576 <HAL_RCC_GetSysClockFreq+0x2be>
 800a2cc:	a201      	add	r2, pc, #4	; (adr r2, 800a2d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d2:	bf00      	nop
 800a2d4:	0800a339 	.word	0x0800a339
 800a2d8:	0800a577 	.word	0x0800a577
 800a2dc:	0800a577 	.word	0x0800a577
 800a2e0:	0800a577 	.word	0x0800a577
 800a2e4:	0800a577 	.word	0x0800a577
 800a2e8:	0800a577 	.word	0x0800a577
 800a2ec:	0800a577 	.word	0x0800a577
 800a2f0:	0800a577 	.word	0x0800a577
 800a2f4:	0800a35f 	.word	0x0800a35f
 800a2f8:	0800a577 	.word	0x0800a577
 800a2fc:	0800a577 	.word	0x0800a577
 800a300:	0800a577 	.word	0x0800a577
 800a304:	0800a577 	.word	0x0800a577
 800a308:	0800a577 	.word	0x0800a577
 800a30c:	0800a577 	.word	0x0800a577
 800a310:	0800a577 	.word	0x0800a577
 800a314:	0800a365 	.word	0x0800a365
 800a318:	0800a577 	.word	0x0800a577
 800a31c:	0800a577 	.word	0x0800a577
 800a320:	0800a577 	.word	0x0800a577
 800a324:	0800a577 	.word	0x0800a577
 800a328:	0800a577 	.word	0x0800a577
 800a32c:	0800a577 	.word	0x0800a577
 800a330:	0800a577 	.word	0x0800a577
 800a334:	0800a36b 	.word	0x0800a36b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a338:	4b94      	ldr	r3, [pc, #592]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 0320 	and.w	r3, r3, #32
 800a340:	2b00      	cmp	r3, #0
 800a342:	d009      	beq.n	800a358 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a344:	4b91      	ldr	r3, [pc, #580]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	08db      	lsrs	r3, r3, #3
 800a34a:	f003 0303 	and.w	r3, r3, #3
 800a34e:	4a90      	ldr	r2, [pc, #576]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a350:	fa22 f303 	lsr.w	r3, r2, r3
 800a354:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a356:	e111      	b.n	800a57c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a358:	4b8d      	ldr	r3, [pc, #564]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a35a:	61bb      	str	r3, [r7, #24]
      break;
 800a35c:	e10e      	b.n	800a57c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a35e:	4b8d      	ldr	r3, [pc, #564]	; (800a594 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a360:	61bb      	str	r3, [r7, #24]
      break;
 800a362:	e10b      	b.n	800a57c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a364:	4b8c      	ldr	r3, [pc, #560]	; (800a598 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a366:	61bb      	str	r3, [r7, #24]
      break;
 800a368:	e108      	b.n	800a57c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a36a:	4b88      	ldr	r3, [pc, #544]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36e:	f003 0303 	and.w	r3, r3, #3
 800a372:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a374:	4b85      	ldr	r3, [pc, #532]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a378:	091b      	lsrs	r3, r3, #4
 800a37a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a37e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a380:	4b82      	ldr	r3, [pc, #520]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a384:	f003 0301 	and.w	r3, r3, #1
 800a388:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a38a:	4b80      	ldr	r3, [pc, #512]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38e:	08db      	lsrs	r3, r3, #3
 800a390:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	fb02 f303 	mul.w	r3, r2, r3
 800a39a:	ee07 3a90 	vmov	s15, r3
 800a39e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 80e1 	beq.w	800a570 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	f000 8083 	beq.w	800a4bc <HAL_RCC_GetSysClockFreq+0x204>
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	f200 80a1 	bhi.w	800a500 <HAL_RCC_GetSysClockFreq+0x248>
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d003      	beq.n	800a3cc <HAL_RCC_GetSysClockFreq+0x114>
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d056      	beq.n	800a478 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a3ca:	e099      	b.n	800a500 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3cc:	4b6f      	ldr	r3, [pc, #444]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 0320 	and.w	r3, r3, #32
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d02d      	beq.n	800a434 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3d8:	4b6c      	ldr	r3, [pc, #432]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	08db      	lsrs	r3, r3, #3
 800a3de:	f003 0303 	and.w	r3, r3, #3
 800a3e2:	4a6b      	ldr	r2, [pc, #428]	; (800a590 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a3e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a3e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	ee07 3a90 	vmov	s15, r3
 800a3f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	ee07 3a90 	vmov	s15, r3
 800a3fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a402:	4b62      	ldr	r3, [pc, #392]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a40a:	ee07 3a90 	vmov	s15, r3
 800a40e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a412:	ed97 6a02 	vldr	s12, [r7, #8]
 800a416:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a59c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a41a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a41e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a42a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a42e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a432:	e087      	b.n	800a544 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	ee07 3a90 	vmov	s15, r3
 800a43a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a43e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a5a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a446:	4b51      	ldr	r3, [pc, #324]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a44e:	ee07 3a90 	vmov	s15, r3
 800a452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a456:	ed97 6a02 	vldr	s12, [r7, #8]
 800a45a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a59c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a45e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a46a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a46e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a472:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a476:	e065      	b.n	800a544 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	ee07 3a90 	vmov	s15, r3
 800a47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a482:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a5a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a48a:	4b40      	ldr	r3, [pc, #256]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a492:	ee07 3a90 	vmov	s15, r3
 800a496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a49a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a49e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a59c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a4ba:	e043      	b.n	800a544 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	ee07 3a90 	vmov	s15, r3
 800a4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a5a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a4ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4ce:	4b2f      	ldr	r3, [pc, #188]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4d6:	ee07 3a90 	vmov	s15, r3
 800a4da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4de:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a59c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a4fe:	e021      	b.n	800a544 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	ee07 3a90 	vmov	s15, r3
 800a506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a50a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a5a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a50e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a512:	4b1e      	ldr	r3, [pc, #120]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a51a:	ee07 3a90 	vmov	s15, r3
 800a51e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a522:	ed97 6a02 	vldr	s12, [r7, #8]
 800a526:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a59c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a52a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a52e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a53a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a53e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a542:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a544:	4b11      	ldr	r3, [pc, #68]	; (800a58c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a548:	0a5b      	lsrs	r3, r3, #9
 800a54a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a54e:	3301      	adds	r3, #1
 800a550:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	ee07 3a90 	vmov	s15, r3
 800a558:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a55c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a568:	ee17 3a90 	vmov	r3, s15
 800a56c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a56e:	e005      	b.n	800a57c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a570:	2300      	movs	r3, #0
 800a572:	61bb      	str	r3, [r7, #24]
      break;
 800a574:	e002      	b.n	800a57c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a576:	4b07      	ldr	r3, [pc, #28]	; (800a594 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a578:	61bb      	str	r3, [r7, #24]
      break;
 800a57a:	bf00      	nop
  }

  return sysclockfreq;
 800a57c:	69bb      	ldr	r3, [r7, #24]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3724      	adds	r7, #36	; 0x24
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	58024400 	.word	0x58024400
 800a590:	03d09000 	.word	0x03d09000
 800a594:	003d0900 	.word	0x003d0900
 800a598:	017d7840 	.word	0x017d7840
 800a59c:	46000000 	.word	0x46000000
 800a5a0:	4c742400 	.word	0x4c742400
 800a5a4:	4a742400 	.word	0x4a742400
 800a5a8:	4bbebc20 	.word	0x4bbebc20

0800a5ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a5b2:	f7ff fe81 	bl	800a2b8 <HAL_RCC_GetSysClockFreq>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	4b10      	ldr	r3, [pc, #64]	; (800a5fc <HAL_RCC_GetHCLKFreq+0x50>)
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	0a1b      	lsrs	r3, r3, #8
 800a5be:	f003 030f 	and.w	r3, r3, #15
 800a5c2:	490f      	ldr	r1, [pc, #60]	; (800a600 <HAL_RCC_GetHCLKFreq+0x54>)
 800a5c4:	5ccb      	ldrb	r3, [r1, r3]
 800a5c6:	f003 031f 	and.w	r3, r3, #31
 800a5ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5d0:	4b0a      	ldr	r3, [pc, #40]	; (800a5fc <HAL_RCC_GetHCLKFreq+0x50>)
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	f003 030f 	and.w	r3, r3, #15
 800a5d8:	4a09      	ldr	r2, [pc, #36]	; (800a600 <HAL_RCC_GetHCLKFreq+0x54>)
 800a5da:	5cd3      	ldrb	r3, [r2, r3]
 800a5dc:	f003 031f 	and.w	r3, r3, #31
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e6:	4a07      	ldr	r2, [pc, #28]	; (800a604 <HAL_RCC_GetHCLKFreq+0x58>)
 800a5e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a5ea:	4a07      	ldr	r2, [pc, #28]	; (800a608 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a5f0:	4b04      	ldr	r3, [pc, #16]	; (800a604 <HAL_RCC_GetHCLKFreq+0x58>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	58024400 	.word	0x58024400
 800a600:	0801667c 	.word	0x0801667c
 800a604:	2400008c 	.word	0x2400008c
 800a608:	24000088 	.word	0x24000088

0800a60c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a610:	f7ff ffcc 	bl	800a5ac <HAL_RCC_GetHCLKFreq>
 800a614:	4602      	mov	r2, r0
 800a616:	4b06      	ldr	r3, [pc, #24]	; (800a630 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a618:	69db      	ldr	r3, [r3, #28]
 800a61a:	091b      	lsrs	r3, r3, #4
 800a61c:	f003 0307 	and.w	r3, r3, #7
 800a620:	4904      	ldr	r1, [pc, #16]	; (800a634 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a622:	5ccb      	ldrb	r3, [r1, r3]
 800a624:	f003 031f 	and.w	r3, r3, #31
 800a628:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	58024400 	.word	0x58024400
 800a634:	0801667c 	.word	0x0801667c

0800a638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a63c:	f7ff ffb6 	bl	800a5ac <HAL_RCC_GetHCLKFreq>
 800a640:	4602      	mov	r2, r0
 800a642:	4b06      	ldr	r3, [pc, #24]	; (800a65c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a644:	69db      	ldr	r3, [r3, #28]
 800a646:	0a1b      	lsrs	r3, r3, #8
 800a648:	f003 0307 	and.w	r3, r3, #7
 800a64c:	4904      	ldr	r1, [pc, #16]	; (800a660 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a64e:	5ccb      	ldrb	r3, [r1, r3]
 800a650:	f003 031f 	and.w	r3, r3, #31
 800a654:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a658:	4618      	mov	r0, r3
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	58024400 	.word	0x58024400
 800a660:	0801667c 	.word	0x0801667c

0800a664 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	223f      	movs	r2, #63	; 0x3f
 800a672:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a674:	4b1a      	ldr	r3, [pc, #104]	; (800a6e0 <HAL_RCC_GetClockConfig+0x7c>)
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	f003 0207 	and.w	r2, r3, #7
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a680:	4b17      	ldr	r3, [pc, #92]	; (800a6e0 <HAL_RCC_GetClockConfig+0x7c>)
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a68c:	4b14      	ldr	r3, [pc, #80]	; (800a6e0 <HAL_RCC_GetClockConfig+0x7c>)
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	f003 020f 	and.w	r2, r3, #15
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a698:	4b11      	ldr	r3, [pc, #68]	; (800a6e0 <HAL_RCC_GetClockConfig+0x7c>)
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a6a4:	4b0e      	ldr	r3, [pc, #56]	; (800a6e0 <HAL_RCC_GetClockConfig+0x7c>)
 800a6a6:	69db      	ldr	r3, [r3, #28]
 800a6a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a6b0:	4b0b      	ldr	r3, [pc, #44]	; (800a6e0 <HAL_RCC_GetClockConfig+0x7c>)
 800a6b2:	69db      	ldr	r3, [r3, #28]
 800a6b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a6bc:	4b08      	ldr	r3, [pc, #32]	; (800a6e0 <HAL_RCC_GetClockConfig+0x7c>)
 800a6be:	6a1b      	ldr	r3, [r3, #32]
 800a6c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a6c8:	4b06      	ldr	r3, [pc, #24]	; (800a6e4 <HAL_RCC_GetClockConfig+0x80>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f003 020f 	and.w	r2, r3, #15
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	601a      	str	r2, [r3, #0]
}
 800a6d4:	bf00      	nop
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr
 800a6e0:	58024400 	.word	0x58024400
 800a6e4:	52002000 	.word	0x52002000

0800a6e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a6e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a6ec:	b0ca      	sub	sp, #296	; 0x128
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a708:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a70c:	2500      	movs	r5, #0
 800a70e:	ea54 0305 	orrs.w	r3, r4, r5
 800a712:	d049      	beq.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a71a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a71e:	d02f      	beq.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a720:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a724:	d828      	bhi.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a72a:	d01a      	beq.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a72c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a730:	d822      	bhi.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a732:	2b00      	cmp	r3, #0
 800a734:	d003      	beq.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a73a:	d007      	beq.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a73c:	e01c      	b.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a73e:	4bb8      	ldr	r3, [pc, #736]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a742:	4ab7      	ldr	r2, [pc, #732]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a748:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a74a:	e01a      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a74c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a750:	3308      	adds	r3, #8
 800a752:	2102      	movs	r1, #2
 800a754:	4618      	mov	r0, r3
 800a756:	f002 fb61 	bl	800ce1c <RCCEx_PLL2_Config>
 800a75a:	4603      	mov	r3, r0
 800a75c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a760:	e00f      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a766:	3328      	adds	r3, #40	; 0x28
 800a768:	2102      	movs	r1, #2
 800a76a:	4618      	mov	r0, r3
 800a76c:	f002 fc08 	bl	800cf80 <RCCEx_PLL3_Config>
 800a770:	4603      	mov	r3, r0
 800a772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a776:	e004      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a77e:	e000      	b.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a780:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a782:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10a      	bne.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a78a:	4ba5      	ldr	r3, [pc, #660]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a78c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a78e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a798:	4aa1      	ldr	r2, [pc, #644]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a79a:	430b      	orrs	r3, r1
 800a79c:	6513      	str	r3, [r2, #80]	; 0x50
 800a79e:	e003      	b.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a7a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a7b4:	f04f 0900 	mov.w	r9, #0
 800a7b8:	ea58 0309 	orrs.w	r3, r8, r9
 800a7bc:	d047      	beq.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7c4:	2b04      	cmp	r3, #4
 800a7c6:	d82a      	bhi.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a7c8:	a201      	add	r2, pc, #4	; (adr r2, 800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ce:	bf00      	nop
 800a7d0:	0800a7e5 	.word	0x0800a7e5
 800a7d4:	0800a7f3 	.word	0x0800a7f3
 800a7d8:	0800a809 	.word	0x0800a809
 800a7dc:	0800a827 	.word	0x0800a827
 800a7e0:	0800a827 	.word	0x0800a827
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7e4:	4b8e      	ldr	r3, [pc, #568]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e8:	4a8d      	ldr	r2, [pc, #564]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a7ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a7f0:	e01a      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7f6:	3308      	adds	r3, #8
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f002 fb0e 	bl	800ce1c <RCCEx_PLL2_Config>
 800a800:	4603      	mov	r3, r0
 800a802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a806:	e00f      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a80c:	3328      	adds	r3, #40	; 0x28
 800a80e:	2100      	movs	r1, #0
 800a810:	4618      	mov	r0, r3
 800a812:	f002 fbb5 	bl	800cf80 <RCCEx_PLL3_Config>
 800a816:	4603      	mov	r3, r0
 800a818:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a81c:	e004      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a824:	e000      	b.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a826:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a828:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10a      	bne.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a830:	4b7b      	ldr	r3, [pc, #492]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a834:	f023 0107 	bic.w	r1, r3, #7
 800a838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a83c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a83e:	4a78      	ldr	r2, [pc, #480]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a840:	430b      	orrs	r3, r1
 800a842:	6513      	str	r3, [r2, #80]	; 0x50
 800a844:	e003      	b.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a846:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a84a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a84e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800a85a:	f04f 0b00 	mov.w	fp, #0
 800a85e:	ea5a 030b 	orrs.w	r3, sl, fp
 800a862:	d04c      	beq.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a86a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a86e:	d030      	beq.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a874:	d829      	bhi.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a876:	2bc0      	cmp	r3, #192	; 0xc0
 800a878:	d02d      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a87a:	2bc0      	cmp	r3, #192	; 0xc0
 800a87c:	d825      	bhi.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a87e:	2b80      	cmp	r3, #128	; 0x80
 800a880:	d018      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a882:	2b80      	cmp	r3, #128	; 0x80
 800a884:	d821      	bhi.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a886:	2b00      	cmp	r3, #0
 800a888:	d002      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a88a:	2b40      	cmp	r3, #64	; 0x40
 800a88c:	d007      	beq.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a88e:	e01c      	b.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a890:	4b63      	ldr	r3, [pc, #396]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a894:	4a62      	ldr	r2, [pc, #392]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a89a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a89c:	e01c      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a89e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f002 fab8 	bl	800ce1c <RCCEx_PLL2_Config>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a8b2:	e011      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8b8:	3328      	adds	r3, #40	; 0x28
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f002 fb5f 	bl	800cf80 <RCCEx_PLL3_Config>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a8c8:	e006      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a8d0:	e002      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a8d2:	bf00      	nop
 800a8d4:	e000      	b.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a8d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10a      	bne.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a8e0:	4b4f      	ldr	r3, [pc, #316]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8e4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800a8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8ee:	4a4c      	ldr	r2, [pc, #304]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8f0:	430b      	orrs	r3, r1
 800a8f2:	6513      	str	r3, [r2, #80]	; 0x50
 800a8f4:	e003      	b.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a8fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a906:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800a90a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a90e:	2300      	movs	r3, #0
 800a910:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a914:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800a918:	460b      	mov	r3, r1
 800a91a:	4313      	orrs	r3, r2
 800a91c:	d053      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a91e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a922:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a926:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a92a:	d035      	beq.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a92c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a930:	d82e      	bhi.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a932:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a936:	d031      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a938:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a93c:	d828      	bhi.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a93e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a942:	d01a      	beq.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a948:	d822      	bhi.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d003      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a94e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a952:	d007      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a954:	e01c      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a956:	4b32      	ldr	r3, [pc, #200]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95a:	4a31      	ldr	r2, [pc, #196]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a95c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a960:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a962:	e01c      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a968:	3308      	adds	r3, #8
 800a96a:	2100      	movs	r1, #0
 800a96c:	4618      	mov	r0, r3
 800a96e:	f002 fa55 	bl	800ce1c <RCCEx_PLL2_Config>
 800a972:	4603      	mov	r3, r0
 800a974:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a978:	e011      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a97a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a97e:	3328      	adds	r3, #40	; 0x28
 800a980:	2100      	movs	r1, #0
 800a982:	4618      	mov	r0, r3
 800a984:	f002 fafc 	bl	800cf80 <RCCEx_PLL3_Config>
 800a988:	4603      	mov	r3, r0
 800a98a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a98e:	e006      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a996:	e002      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a998:	bf00      	nop
 800a99a:	e000      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a99c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a99e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10b      	bne.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a9a6:	4b1e      	ldr	r3, [pc, #120]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9aa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a9b6:	4a1a      	ldr	r2, [pc, #104]	; (800aa20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9b8:	430b      	orrs	r3, r1
 800a9ba:	6593      	str	r3, [r2, #88]	; 0x58
 800a9bc:	e003      	b.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a9d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a9dc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	d056      	beq.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a9e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a9ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9f2:	d038      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a9f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9f8:	d831      	bhi.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a9fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9fe:	d034      	beq.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800aa00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aa04:	d82b      	bhi.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aa06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa0a:	d01d      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800aa0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa10:	d825      	bhi.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d006      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800aa16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aa1a:	d00a      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800aa1c:	e01f      	b.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aa1e:	bf00      	nop
 800aa20:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa24:	4ba2      	ldr	r3, [pc, #648]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa28:	4aa1      	ldr	r2, [pc, #644]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa30:	e01c      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa36:	3308      	adds	r3, #8
 800aa38:	2100      	movs	r1, #0
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f002 f9ee 	bl	800ce1c <RCCEx_PLL2_Config>
 800aa40:	4603      	mov	r3, r0
 800aa42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa46:	e011      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa4c:	3328      	adds	r3, #40	; 0x28
 800aa4e:	2100      	movs	r1, #0
 800aa50:	4618      	mov	r0, r3
 800aa52:	f002 fa95 	bl	800cf80 <RCCEx_PLL3_Config>
 800aa56:	4603      	mov	r3, r0
 800aa58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa5c:	e006      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa64:	e002      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800aa66:	bf00      	nop
 800aa68:	e000      	b.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800aa6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10b      	bne.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aa74:	4b8e      	ldr	r3, [pc, #568]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa78:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800aa7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa80:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aa84:	4a8a      	ldr	r2, [pc, #552]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aa86:	430b      	orrs	r3, r1
 800aa88:	6593      	str	r3, [r2, #88]	; 0x58
 800aa8a:	e003      	b.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800aa94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800aaa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aaaa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aaae:	460b      	mov	r3, r1
 800aab0:	4313      	orrs	r3, r2
 800aab2:	d03a      	beq.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800aab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaba:	2b30      	cmp	r3, #48	; 0x30
 800aabc:	d01f      	beq.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x416>
 800aabe:	2b30      	cmp	r3, #48	; 0x30
 800aac0:	d819      	bhi.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800aac2:	2b20      	cmp	r3, #32
 800aac4:	d00c      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800aac6:	2b20      	cmp	r3, #32
 800aac8:	d815      	bhi.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d019      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800aace:	2b10      	cmp	r3, #16
 800aad0:	d111      	bne.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aad2:	4b77      	ldr	r3, [pc, #476]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad6:	4a76      	ldr	r2, [pc, #472]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aadc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800aade:	e011      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aae4:	3308      	adds	r3, #8
 800aae6:	2102      	movs	r1, #2
 800aae8:	4618      	mov	r0, r3
 800aaea:	f002 f997 	bl	800ce1c <RCCEx_PLL2_Config>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800aaf4:	e006      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aafc:	e002      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800aafe:	bf00      	nop
 800ab00:	e000      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ab02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10a      	bne.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ab0c:	4b68      	ldr	r3, [pc, #416]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab10:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ab14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab1a:	4a65      	ldr	r2, [pc, #404]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab1c:	430b      	orrs	r3, r1
 800ab1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab20:	e003      	b.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ab2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab32:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ab36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ab40:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ab44:	460b      	mov	r3, r1
 800ab46:	4313      	orrs	r3, r2
 800ab48:	d051      	beq.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ab4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab54:	d035      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ab56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab5a:	d82e      	bhi.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ab5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab60:	d031      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ab62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab66:	d828      	bhi.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ab68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab6c:	d01a      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ab6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab72:	d822      	bhi.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d003      	beq.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ab78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab7c:	d007      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ab7e:	e01c      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab80:	4b4b      	ldr	r3, [pc, #300]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab84:	4a4a      	ldr	r2, [pc, #296]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab8c:	e01c      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab92:	3308      	adds	r3, #8
 800ab94:	2100      	movs	r1, #0
 800ab96:	4618      	mov	r0, r3
 800ab98:	f002 f940 	bl	800ce1c <RCCEx_PLL2_Config>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aba2:	e011      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aba8:	3328      	adds	r3, #40	; 0x28
 800abaa:	2100      	movs	r1, #0
 800abac:	4618      	mov	r0, r3
 800abae:	f002 f9e7 	bl	800cf80 <RCCEx_PLL3_Config>
 800abb2:	4603      	mov	r3, r0
 800abb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800abb8:	e006      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800abc0:	e002      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800abc2:	bf00      	nop
 800abc4:	e000      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800abc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d10a      	bne.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800abd0:	4b37      	ldr	r3, [pc, #220]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800abd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abd4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800abd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abde:	4a34      	ldr	r2, [pc, #208]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800abe0:	430b      	orrs	r3, r1
 800abe2:	6513      	str	r3, [r2, #80]	; 0x50
 800abe4:	e003      	b.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800abee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800abfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800abfe:	2300      	movs	r3, #0
 800ac00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac04:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ac08:	460b      	mov	r3, r1
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	d056      	beq.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ac0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac18:	d033      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ac1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac1e:	d82c      	bhi.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ac20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac24:	d02f      	beq.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ac26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac2a:	d826      	bhi.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ac2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac30:	d02b      	beq.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ac32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac36:	d820      	bhi.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ac38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac3c:	d012      	beq.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ac3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac42:	d81a      	bhi.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d022      	beq.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ac48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac4c:	d115      	bne.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac52:	3308      	adds	r3, #8
 800ac54:	2101      	movs	r1, #1
 800ac56:	4618      	mov	r0, r3
 800ac58:	f002 f8e0 	bl	800ce1c <RCCEx_PLL2_Config>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac62:	e015      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac68:	3328      	adds	r3, #40	; 0x28
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f002 f987 	bl	800cf80 <RCCEx_PLL3_Config>
 800ac72:	4603      	mov	r3, r0
 800ac74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac78:	e00a      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac80:	e006      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ac82:	bf00      	nop
 800ac84:	e004      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ac86:	bf00      	nop
 800ac88:	e002      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ac8a:	bf00      	nop
 800ac8c:	e000      	b.n	800ac90 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ac8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10d      	bne.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ac98:	4b05      	ldr	r3, [pc, #20]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac9c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800aca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aca6:	4a02      	ldr	r2, [pc, #8]	; (800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aca8:	430b      	orrs	r3, r1
 800acaa:	6513      	str	r3, [r2, #80]	; 0x50
 800acac:	e006      	b.n	800acbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800acae:	bf00      	nop
 800acb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800acbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800acc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800accc:	2300      	movs	r3, #0
 800acce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800acd2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800acd6:	460b      	mov	r3, r1
 800acd8:	4313      	orrs	r3, r2
 800acda:	d055      	beq.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800acdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ace0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ace4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ace8:	d033      	beq.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800acea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acee:	d82c      	bhi.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800acf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acf4:	d02f      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800acf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acfa:	d826      	bhi.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800acfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad00:	d02b      	beq.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ad02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad06:	d820      	bhi.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ad08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad0c:	d012      	beq.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ad0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad12:	d81a      	bhi.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d022      	beq.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ad18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad1c:	d115      	bne.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad22:	3308      	adds	r3, #8
 800ad24:	2101      	movs	r1, #1
 800ad26:	4618      	mov	r0, r3
 800ad28:	f002 f878 	bl	800ce1c <RCCEx_PLL2_Config>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ad32:	e015      	b.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad38:	3328      	adds	r3, #40	; 0x28
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f002 f91f 	bl	800cf80 <RCCEx_PLL3_Config>
 800ad42:	4603      	mov	r3, r0
 800ad44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ad48:	e00a      	b.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad50:	e006      	b.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ad52:	bf00      	nop
 800ad54:	e004      	b.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ad56:	bf00      	nop
 800ad58:	e002      	b.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ad5a:	bf00      	nop
 800ad5c:	e000      	b.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ad5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10b      	bne.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ad68:	4ba3      	ldr	r3, [pc, #652]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad6c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ad70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad78:	4a9f      	ldr	r2, [pc, #636]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ad7a:	430b      	orrs	r3, r1
 800ad7c:	6593      	str	r3, [r2, #88]	; 0x58
 800ad7e:	e003      	b.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ad88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad90:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ad94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ad9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ada2:	460b      	mov	r3, r1
 800ada4:	4313      	orrs	r3, r2
 800ada6:	d037      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ada8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adb2:	d00e      	beq.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800adb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adb8:	d816      	bhi.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d018      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800adbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adc2:	d111      	bne.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adc4:	4b8c      	ldr	r3, [pc, #560]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800adc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc8:	4a8b      	ldr	r2, [pc, #556]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800adca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800add0:	e00f      	b.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800add2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800add6:	3308      	adds	r3, #8
 800add8:	2101      	movs	r1, #1
 800adda:	4618      	mov	r0, r3
 800addc:	f002 f81e 	bl	800ce1c <RCCEx_PLL2_Config>
 800ade0:	4603      	mov	r3, r0
 800ade2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ade6:	e004      	b.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800adee:	e000      	b.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800adf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10a      	bne.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800adfa:	4b7f      	ldr	r3, [pc, #508]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800adfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adfe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ae02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae08:	4a7b      	ldr	r2, [pc, #492]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae0a:	430b      	orrs	r3, r1
 800ae0c:	6513      	str	r3, [r2, #80]	; 0x50
 800ae0e:	e003      	b.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ae18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae20:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ae24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae28:	2300      	movs	r3, #0
 800ae2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ae2e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ae32:	460b      	mov	r3, r1
 800ae34:	4313      	orrs	r3, r2
 800ae36:	d039      	beq.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ae38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae3e:	2b03      	cmp	r3, #3
 800ae40:	d81c      	bhi.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800ae42:	a201      	add	r2, pc, #4	; (adr r2, 800ae48 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800ae44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae48:	0800ae85 	.word	0x0800ae85
 800ae4c:	0800ae59 	.word	0x0800ae59
 800ae50:	0800ae67 	.word	0x0800ae67
 800ae54:	0800ae85 	.word	0x0800ae85
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae58:	4b67      	ldr	r3, [pc, #412]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae5c:	4a66      	ldr	r2, [pc, #408]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae64:	e00f      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae6a:	3308      	adds	r3, #8
 800ae6c:	2102      	movs	r1, #2
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f001 ffd4 	bl	800ce1c <RCCEx_PLL2_Config>
 800ae74:	4603      	mov	r3, r0
 800ae76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae7a:	e004      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae82:	e000      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800ae84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d10a      	bne.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ae8e:	4b5a      	ldr	r3, [pc, #360]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae92:	f023 0103 	bic.w	r1, r3, #3
 800ae96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae9c:	4a56      	ldr	r2, [pc, #344]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae9e:	430b      	orrs	r3, r1
 800aea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aea2:	e003      	b.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aea8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aeac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800aeb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aebc:	2300      	movs	r3, #0
 800aebe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aec2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800aec6:	460b      	mov	r3, r1
 800aec8:	4313      	orrs	r3, r2
 800aeca:	f000 809f 	beq.w	800b00c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aece:	4b4b      	ldr	r3, [pc, #300]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a4a      	ldr	r2, [pc, #296]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800aed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aed8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aeda:	f7f8 fc51 	bl	8003780 <HAL_GetTick>
 800aede:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aee2:	e00b      	b.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aee4:	f7f8 fc4c 	bl	8003780 <HAL_GetTick>
 800aee8:	4602      	mov	r2, r0
 800aeea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	2b64      	cmp	r3, #100	; 0x64
 800aef2:	d903      	bls.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800aef4:	2303      	movs	r3, #3
 800aef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aefa:	e005      	b.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aefc:	4b3f      	ldr	r3, [pc, #252]	; (800affc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af04:	2b00      	cmp	r3, #0
 800af06:	d0ed      	beq.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800af08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d179      	bne.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800af10:	4b39      	ldr	r3, [pc, #228]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af1c:	4053      	eors	r3, r2
 800af1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af22:	2b00      	cmp	r3, #0
 800af24:	d015      	beq.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800af26:	4b34      	ldr	r3, [pc, #208]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af32:	4b31      	ldr	r3, [pc, #196]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af36:	4a30      	ldr	r2, [pc, #192]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af3c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af3e:	4b2e      	ldr	r3, [pc, #184]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af42:	4a2d      	ldr	r2, [pc, #180]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af48:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800af4a:	4a2b      	ldr	r2, [pc, #172]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800af50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800af52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800af5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af5e:	d118      	bne.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af60:	f7f8 fc0e 	bl	8003780 <HAL_GetTick>
 800af64:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af68:	e00d      	b.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af6a:	f7f8 fc09 	bl	8003780 <HAL_GetTick>
 800af6e:	4602      	mov	r2, r0
 800af70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800af74:	1ad2      	subs	r2, r2, r3
 800af76:	f241 3388 	movw	r3, #5000	; 0x1388
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d903      	bls.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800af7e:	2303      	movs	r3, #3
 800af80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800af84:	e005      	b.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af86:	4b1c      	ldr	r3, [pc, #112]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af8a:	f003 0302 	and.w	r3, r3, #2
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d0eb      	beq.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800af92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af96:	2b00      	cmp	r3, #0
 800af98:	d129      	bne.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800afa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afaa:	d10e      	bne.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800afac:	4b12      	ldr	r3, [pc, #72]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afae:	691b      	ldr	r3, [r3, #16]
 800afb0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800afb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800afbc:	091a      	lsrs	r2, r3, #4
 800afbe:	4b10      	ldr	r3, [pc, #64]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800afc0:	4013      	ands	r3, r2
 800afc2:	4a0d      	ldr	r2, [pc, #52]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afc4:	430b      	orrs	r3, r1
 800afc6:	6113      	str	r3, [r2, #16]
 800afc8:	e005      	b.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800afca:	4b0b      	ldr	r3, [pc, #44]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	4a0a      	ldr	r2, [pc, #40]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afd0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800afd4:	6113      	str	r3, [r2, #16]
 800afd6:	4b08      	ldr	r3, [pc, #32]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afd8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800afda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800afe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afe6:	4a04      	ldr	r2, [pc, #16]	; (800aff8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800afe8:	430b      	orrs	r3, r1
 800afea:	6713      	str	r3, [r2, #112]	; 0x70
 800afec:	e00e      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800afee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aff2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800aff6:	e009      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800aff8:	58024400 	.word	0x58024400
 800affc:	58024800 	.word	0x58024800
 800b000:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b004:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b008:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b00c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b014:	f002 0301 	and.w	r3, r2, #1
 800b018:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b01c:	2300      	movs	r3, #0
 800b01e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b022:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b026:	460b      	mov	r3, r1
 800b028:	4313      	orrs	r3, r2
 800b02a:	f000 8089 	beq.w	800b140 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b02e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b034:	2b28      	cmp	r3, #40	; 0x28
 800b036:	d86b      	bhi.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b038:	a201      	add	r2, pc, #4	; (adr r2, 800b040 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b03e:	bf00      	nop
 800b040:	0800b119 	.word	0x0800b119
 800b044:	0800b111 	.word	0x0800b111
 800b048:	0800b111 	.word	0x0800b111
 800b04c:	0800b111 	.word	0x0800b111
 800b050:	0800b111 	.word	0x0800b111
 800b054:	0800b111 	.word	0x0800b111
 800b058:	0800b111 	.word	0x0800b111
 800b05c:	0800b111 	.word	0x0800b111
 800b060:	0800b0e5 	.word	0x0800b0e5
 800b064:	0800b111 	.word	0x0800b111
 800b068:	0800b111 	.word	0x0800b111
 800b06c:	0800b111 	.word	0x0800b111
 800b070:	0800b111 	.word	0x0800b111
 800b074:	0800b111 	.word	0x0800b111
 800b078:	0800b111 	.word	0x0800b111
 800b07c:	0800b111 	.word	0x0800b111
 800b080:	0800b0fb 	.word	0x0800b0fb
 800b084:	0800b111 	.word	0x0800b111
 800b088:	0800b111 	.word	0x0800b111
 800b08c:	0800b111 	.word	0x0800b111
 800b090:	0800b111 	.word	0x0800b111
 800b094:	0800b111 	.word	0x0800b111
 800b098:	0800b111 	.word	0x0800b111
 800b09c:	0800b111 	.word	0x0800b111
 800b0a0:	0800b119 	.word	0x0800b119
 800b0a4:	0800b111 	.word	0x0800b111
 800b0a8:	0800b111 	.word	0x0800b111
 800b0ac:	0800b111 	.word	0x0800b111
 800b0b0:	0800b111 	.word	0x0800b111
 800b0b4:	0800b111 	.word	0x0800b111
 800b0b8:	0800b111 	.word	0x0800b111
 800b0bc:	0800b111 	.word	0x0800b111
 800b0c0:	0800b119 	.word	0x0800b119
 800b0c4:	0800b111 	.word	0x0800b111
 800b0c8:	0800b111 	.word	0x0800b111
 800b0cc:	0800b111 	.word	0x0800b111
 800b0d0:	0800b111 	.word	0x0800b111
 800b0d4:	0800b111 	.word	0x0800b111
 800b0d8:	0800b111 	.word	0x0800b111
 800b0dc:	0800b111 	.word	0x0800b111
 800b0e0:	0800b119 	.word	0x0800b119
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0e8:	3308      	adds	r3, #8
 800b0ea:	2101      	movs	r1, #1
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f001 fe95 	bl	800ce1c <RCCEx_PLL2_Config>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b0f8:	e00f      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0fe:	3328      	adds	r3, #40	; 0x28
 800b100:	2101      	movs	r1, #1
 800b102:	4618      	mov	r0, r3
 800b104:	f001 ff3c 	bl	800cf80 <RCCEx_PLL3_Config>
 800b108:	4603      	mov	r3, r0
 800b10a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b10e:	e004      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b116:	e000      	b.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b11a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d10a      	bne.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b122:	4bbf      	ldr	r3, [pc, #764]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b126:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b12e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b130:	4abb      	ldr	r2, [pc, #748]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b132:	430b      	orrs	r3, r1
 800b134:	6553      	str	r3, [r2, #84]	; 0x54
 800b136:	e003      	b.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b138:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b13c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b148:	f002 0302 	and.w	r3, r2, #2
 800b14c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b150:	2300      	movs	r3, #0
 800b152:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b156:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b15a:	460b      	mov	r3, r1
 800b15c:	4313      	orrs	r3, r2
 800b15e:	d041      	beq.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b164:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b166:	2b05      	cmp	r3, #5
 800b168:	d824      	bhi.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b16a:	a201      	add	r2, pc, #4	; (adr r2, 800b170 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b170:	0800b1bd 	.word	0x0800b1bd
 800b174:	0800b189 	.word	0x0800b189
 800b178:	0800b19f 	.word	0x0800b19f
 800b17c:	0800b1bd 	.word	0x0800b1bd
 800b180:	0800b1bd 	.word	0x0800b1bd
 800b184:	0800b1bd 	.word	0x0800b1bd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b18c:	3308      	adds	r3, #8
 800b18e:	2101      	movs	r1, #1
 800b190:	4618      	mov	r0, r3
 800b192:	f001 fe43 	bl	800ce1c <RCCEx_PLL2_Config>
 800b196:	4603      	mov	r3, r0
 800b198:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b19c:	e00f      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1a2:	3328      	adds	r3, #40	; 0x28
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f001 feea 	bl	800cf80 <RCCEx_PLL3_Config>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b1b2:	e004      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1ba:	e000      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b1bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10a      	bne.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b1c6:	4b96      	ldr	r3, [pc, #600]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ca:	f023 0107 	bic.w	r1, r3, #7
 800b1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1d4:	4a92      	ldr	r2, [pc, #584]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b1d6:	430b      	orrs	r3, r1
 800b1d8:	6553      	str	r3, [r2, #84]	; 0x54
 800b1da:	e003      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ec:	f002 0304 	and.w	r3, r2, #4
 800b1f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b1fe:	460b      	mov	r3, r1
 800b200:	4313      	orrs	r3, r2
 800b202:	d044      	beq.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b20c:	2b05      	cmp	r3, #5
 800b20e:	d825      	bhi.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b210:	a201      	add	r2, pc, #4	; (adr r2, 800b218 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b216:	bf00      	nop
 800b218:	0800b265 	.word	0x0800b265
 800b21c:	0800b231 	.word	0x0800b231
 800b220:	0800b247 	.word	0x0800b247
 800b224:	0800b265 	.word	0x0800b265
 800b228:	0800b265 	.word	0x0800b265
 800b22c:	0800b265 	.word	0x0800b265
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b234:	3308      	adds	r3, #8
 800b236:	2101      	movs	r1, #1
 800b238:	4618      	mov	r0, r3
 800b23a:	f001 fdef 	bl	800ce1c <RCCEx_PLL2_Config>
 800b23e:	4603      	mov	r3, r0
 800b240:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b244:	e00f      	b.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b24a:	3328      	adds	r3, #40	; 0x28
 800b24c:	2101      	movs	r1, #1
 800b24e:	4618      	mov	r0, r3
 800b250:	f001 fe96 	bl	800cf80 <RCCEx_PLL3_Config>
 800b254:	4603      	mov	r3, r0
 800b256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b25a:	e004      	b.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b262:	e000      	b.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b264:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10b      	bne.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b26e:	4b6c      	ldr	r3, [pc, #432]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b272:	f023 0107 	bic.w	r1, r3, #7
 800b276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b27a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b27e:	4a68      	ldr	r2, [pc, #416]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b280:	430b      	orrs	r3, r1
 800b282:	6593      	str	r3, [r2, #88]	; 0x58
 800b284:	e003      	b.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b28a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b28e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b296:	f002 0320 	and.w	r3, r2, #32
 800b29a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b29e:	2300      	movs	r3, #0
 800b2a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	d055      	beq.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b2ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2ba:	d033      	beq.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b2bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2c0:	d82c      	bhi.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2c6:	d02f      	beq.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b2c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2cc:	d826      	bhi.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b2ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2d2:	d02b      	beq.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b2d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2d8:	d820      	bhi.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b2da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2de:	d012      	beq.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b2e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2e4:	d81a      	bhi.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d022      	beq.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b2ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2ee:	d115      	bne.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f4:	3308      	adds	r3, #8
 800b2f6:	2100      	movs	r1, #0
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f001 fd8f 	bl	800ce1c <RCCEx_PLL2_Config>
 800b2fe:	4603      	mov	r3, r0
 800b300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b304:	e015      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b30a:	3328      	adds	r3, #40	; 0x28
 800b30c:	2102      	movs	r1, #2
 800b30e:	4618      	mov	r0, r3
 800b310:	f001 fe36 	bl	800cf80 <RCCEx_PLL3_Config>
 800b314:	4603      	mov	r3, r0
 800b316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b31a:	e00a      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b322:	e006      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b324:	bf00      	nop
 800b326:	e004      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b328:	bf00      	nop
 800b32a:	e002      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b32c:	bf00      	nop
 800b32e:	e000      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b330:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b336:	2b00      	cmp	r3, #0
 800b338:	d10b      	bne.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b33a:	4b39      	ldr	r3, [pc, #228]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b33e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b34a:	4a35      	ldr	r2, [pc, #212]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b34c:	430b      	orrs	r3, r1
 800b34e:	6553      	str	r3, [r2, #84]	; 0x54
 800b350:	e003      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b356:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b36a:	2300      	movs	r3, #0
 800b36c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b370:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b374:	460b      	mov	r3, r1
 800b376:	4313      	orrs	r3, r2
 800b378:	d058      	beq.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b37e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b382:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b386:	d033      	beq.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b388:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b38c:	d82c      	bhi.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b38e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b392:	d02f      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b398:	d826      	bhi.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b39a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b39e:	d02b      	beq.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b3a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b3a4:	d820      	bhi.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b3a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3aa:	d012      	beq.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b3ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3b0:	d81a      	bhi.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d022      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b3b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3ba:	d115      	bne.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3c0:	3308      	adds	r3, #8
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f001 fd29 	bl	800ce1c <RCCEx_PLL2_Config>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b3d0:	e015      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3d6:	3328      	adds	r3, #40	; 0x28
 800b3d8:	2102      	movs	r1, #2
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f001 fdd0 	bl	800cf80 <RCCEx_PLL3_Config>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b3e6:	e00a      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3ee:	e006      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b3f0:	bf00      	nop
 800b3f2:	e004      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b3f4:	bf00      	nop
 800b3f6:	e002      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b3f8:	bf00      	nop
 800b3fa:	e000      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b3fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b402:	2b00      	cmp	r3, #0
 800b404:	d10e      	bne.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b406:	4b06      	ldr	r3, [pc, #24]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b40a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b416:	4a02      	ldr	r2, [pc, #8]	; (800b420 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b418:	430b      	orrs	r3, r1
 800b41a:	6593      	str	r3, [r2, #88]	; 0x58
 800b41c:	e006      	b.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b41e:	bf00      	nop
 800b420:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b424:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b428:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b42c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b434:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b43c:	2300      	movs	r3, #0
 800b43e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b442:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b446:	460b      	mov	r3, r1
 800b448:	4313      	orrs	r3, r2
 800b44a:	d055      	beq.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b450:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b454:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b458:	d033      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b45a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b45e:	d82c      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b464:	d02f      	beq.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b46a:	d826      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b46c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b470:	d02b      	beq.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b472:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b476:	d820      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b47c:	d012      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b47e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b482:	d81a      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b484:	2b00      	cmp	r3, #0
 800b486:	d022      	beq.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b48c:	d115      	bne.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b492:	3308      	adds	r3, #8
 800b494:	2100      	movs	r1, #0
 800b496:	4618      	mov	r0, r3
 800b498:	f001 fcc0 	bl	800ce1c <RCCEx_PLL2_Config>
 800b49c:	4603      	mov	r3, r0
 800b49e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b4a2:	e015      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a8:	3328      	adds	r3, #40	; 0x28
 800b4aa:	2102      	movs	r1, #2
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f001 fd67 	bl	800cf80 <RCCEx_PLL3_Config>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b4b8:	e00a      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4c0:	e006      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b4c2:	bf00      	nop
 800b4c4:	e004      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b4c6:	bf00      	nop
 800b4c8:	e002      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b4ca:	bf00      	nop
 800b4cc:	e000      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b4ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10b      	bne.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b4d8:	4ba1      	ldr	r3, [pc, #644]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b4da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4dc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b4e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b4e8:	4a9d      	ldr	r2, [pc, #628]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b4ea:	430b      	orrs	r3, r1
 800b4ec:	6593      	str	r3, [r2, #88]	; 0x58
 800b4ee:	e003      	b.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b4f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	f002 0308 	and.w	r3, r2, #8
 800b504:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b508:	2300      	movs	r3, #0
 800b50a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b50e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b512:	460b      	mov	r3, r1
 800b514:	4313      	orrs	r3, r2
 800b516:	d01e      	beq.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b51c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b524:	d10c      	bne.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b52a:	3328      	adds	r3, #40	; 0x28
 800b52c:	2102      	movs	r1, #2
 800b52e:	4618      	mov	r0, r3
 800b530:	f001 fd26 	bl	800cf80 <RCCEx_PLL3_Config>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d002      	beq.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b540:	4b87      	ldr	r3, [pc, #540]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b544:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b54c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b550:	4a83      	ldr	r2, [pc, #524]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b552:	430b      	orrs	r3, r1
 800b554:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55e:	f002 0310 	and.w	r3, r2, #16
 800b562:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b566:	2300      	movs	r3, #0
 800b568:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b56c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b570:	460b      	mov	r3, r1
 800b572:	4313      	orrs	r3, r2
 800b574:	d01e      	beq.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b57a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b57e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b582:	d10c      	bne.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b588:	3328      	adds	r3, #40	; 0x28
 800b58a:	2102      	movs	r1, #2
 800b58c:	4618      	mov	r0, r3
 800b58e:	f001 fcf7 	bl	800cf80 <RCCEx_PLL3_Config>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b59e:	4b70      	ldr	r3, [pc, #448]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5ae:	4a6c      	ldr	r2, [pc, #432]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5b0:	430b      	orrs	r3, r1
 800b5b2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5bc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b5c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b5ca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	d03e      	beq.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b5d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b5dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5e0:	d022      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b5e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5e6:	d81b      	bhi.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d003      	beq.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b5ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5f0:	d00b      	beq.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b5f2:	e015      	b.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5f8:	3308      	adds	r3, #8
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f001 fc0d 	bl	800ce1c <RCCEx_PLL2_Config>
 800b602:	4603      	mov	r3, r0
 800b604:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b608:	e00f      	b.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b60e:	3328      	adds	r3, #40	; 0x28
 800b610:	2102      	movs	r1, #2
 800b612:	4618      	mov	r0, r3
 800b614:	f001 fcb4 	bl	800cf80 <RCCEx_PLL3_Config>
 800b618:	4603      	mov	r3, r0
 800b61a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b61e:	e004      	b.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b626:	e000      	b.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b62a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d10b      	bne.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b632:	4b4b      	ldr	r3, [pc, #300]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b636:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b63e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b642:	4a47      	ldr	r2, [pc, #284]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b644:	430b      	orrs	r3, r1
 800b646:	6593      	str	r3, [r2, #88]	; 0x58
 800b648:	e003      	b.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b64a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b64e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b65e:	67bb      	str	r3, [r7, #120]	; 0x78
 800b660:	2300      	movs	r3, #0
 800b662:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b664:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b668:	460b      	mov	r3, r1
 800b66a:	4313      	orrs	r3, r2
 800b66c:	d03b      	beq.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b66e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b676:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b67a:	d01f      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b67c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b680:	d818      	bhi.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b686:	d003      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b68c:	d007      	beq.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b68e:	e011      	b.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b690:	4b33      	ldr	r3, [pc, #204]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b694:	4a32      	ldr	r2, [pc, #200]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b69a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b69c:	e00f      	b.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b69e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6a2:	3328      	adds	r3, #40	; 0x28
 800b6a4:	2101      	movs	r1, #1
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f001 fc6a 	bl	800cf80 <RCCEx_PLL3_Config>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b6b2:	e004      	b.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6ba:	e000      	b.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b6bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d10b      	bne.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b6c6:	4b26      	ldr	r3, [pc, #152]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b6ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6d6:	4a22      	ldr	r2, [pc, #136]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b6d8:	430b      	orrs	r3, r1
 800b6da:	6553      	str	r3, [r2, #84]	; 0x54
 800b6dc:	e003      	b.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b6f2:	673b      	str	r3, [r7, #112]	; 0x70
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	677b      	str	r3, [r7, #116]	; 0x74
 800b6f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	4313      	orrs	r3, r2
 800b700:	d034      	beq.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d003      	beq.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b70c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b710:	d007      	beq.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b712:	e011      	b.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b714:	4b12      	ldr	r3, [pc, #72]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b718:	4a11      	ldr	r2, [pc, #68]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b71a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b71e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b720:	e00e      	b.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b726:	3308      	adds	r3, #8
 800b728:	2102      	movs	r1, #2
 800b72a:	4618      	mov	r0, r3
 800b72c:	f001 fb76 	bl	800ce1c <RCCEx_PLL2_Config>
 800b730:	4603      	mov	r3, r0
 800b732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b736:	e003      	b.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b738:	2301      	movs	r3, #1
 800b73a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b73e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b740:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b744:	2b00      	cmp	r3, #0
 800b746:	d10d      	bne.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b748:	4b05      	ldr	r3, [pc, #20]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b74a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b74c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b756:	4a02      	ldr	r2, [pc, #8]	; (800b760 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b758:	430b      	orrs	r3, r1
 800b75a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b75c:	e006      	b.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b75e:	bf00      	nop
 800b760:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b764:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b768:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b774:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b778:	66bb      	str	r3, [r7, #104]	; 0x68
 800b77a:	2300      	movs	r3, #0
 800b77c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b77e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b782:	460b      	mov	r3, r1
 800b784:	4313      	orrs	r3, r2
 800b786:	d00c      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b78c:	3328      	adds	r3, #40	; 0x28
 800b78e:	2102      	movs	r1, #2
 800b790:	4618      	mov	r0, r3
 800b792:	f001 fbf5 	bl	800cf80 <RCCEx_PLL3_Config>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d002      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b79c:	2301      	movs	r3, #1
 800b79e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b7a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b7ae:	663b      	str	r3, [r7, #96]	; 0x60
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	667b      	str	r3, [r7, #100]	; 0x64
 800b7b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	d038      	beq.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7ca:	d018      	beq.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b7cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7d0:	d811      	bhi.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b7d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7d6:	d014      	beq.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b7d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7dc:	d80b      	bhi.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d011      	beq.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b7e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7e6:	d106      	bne.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7e8:	4bc3      	ldr	r3, [pc, #780]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ec:	4ac2      	ldr	r2, [pc, #776]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b7ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b7f4:	e008      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7fc:	e004      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b7fe:	bf00      	nop
 800b800:	e002      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b802:	bf00      	nop
 800b804:	e000      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b806:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b808:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10b      	bne.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b810:	4bb9      	ldr	r3, [pc, #740]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b814:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b81c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b820:	4ab5      	ldr	r2, [pc, #724]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b822:	430b      	orrs	r3, r1
 800b824:	6553      	str	r3, [r2, #84]	; 0x54
 800b826:	e003      	b.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b828:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b82c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b83c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b83e:	2300      	movs	r3, #0
 800b840:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b842:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b846:	460b      	mov	r3, r1
 800b848:	4313      	orrs	r3, r2
 800b84a:	d009      	beq.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b84c:	4baa      	ldr	r3, [pc, #680]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b84e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b850:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b85a:	4aa7      	ldr	r2, [pc, #668]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b85c:	430b      	orrs	r3, r1
 800b85e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800b86c:	653b      	str	r3, [r7, #80]	; 0x50
 800b86e:	2300      	movs	r3, #0
 800b870:	657b      	str	r3, [r7, #84]	; 0x54
 800b872:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b876:	460b      	mov	r3, r1
 800b878:	4313      	orrs	r3, r2
 800b87a:	d00a      	beq.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b87c:	4b9e      	ldr	r3, [pc, #632]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b87e:	691b      	ldr	r3, [r3, #16]
 800b880:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800b884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b888:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b88c:	4a9a      	ldr	r2, [pc, #616]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b88e:	430b      	orrs	r3, r1
 800b890:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b89e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	d009      	beq.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b8ae:	4b92      	ldr	r3, [pc, #584]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8b2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8bc:	4a8e      	ldr	r2, [pc, #568]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8be:	430b      	orrs	r3, r1
 800b8c0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b8c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ca:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b8ce:	643b      	str	r3, [r7, #64]	; 0x40
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	647b      	str	r3, [r7, #68]	; 0x44
 800b8d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b8d8:	460b      	mov	r3, r1
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	d00e      	beq.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b8de:	4b86      	ldr	r3, [pc, #536]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8e0:	691b      	ldr	r3, [r3, #16]
 800b8e2:	4a85      	ldr	r2, [pc, #532]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b8e8:	6113      	str	r3, [r2, #16]
 800b8ea:	4b83      	ldr	r3, [pc, #524]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8ec:	6919      	ldr	r1, [r3, #16]
 800b8ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b8f6:	4a80      	ldr	r2, [pc, #512]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8f8:	430b      	orrs	r3, r1
 800b8fa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b8fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b908:	63bb      	str	r3, [r7, #56]	; 0x38
 800b90a:	2300      	movs	r3, #0
 800b90c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b90e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b912:	460b      	mov	r3, r1
 800b914:	4313      	orrs	r3, r2
 800b916:	d009      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b918:	4b77      	ldr	r3, [pc, #476]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b91a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b91c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b926:	4a74      	ldr	r2, [pc, #464]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b928:	430b      	orrs	r3, r1
 800b92a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b938:	633b      	str	r3, [r7, #48]	; 0x30
 800b93a:	2300      	movs	r3, #0
 800b93c:	637b      	str	r3, [r7, #52]	; 0x34
 800b93e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b942:	460b      	mov	r3, r1
 800b944:	4313      	orrs	r3, r2
 800b946:	d00a      	beq.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b948:	4b6b      	ldr	r3, [pc, #428]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b94a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b94c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b958:	4a67      	ldr	r2, [pc, #412]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b95a:	430b      	orrs	r3, r1
 800b95c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b95e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b966:	2100      	movs	r1, #0
 800b968:	62b9      	str	r1, [r7, #40]	; 0x28
 800b96a:	f003 0301 	and.w	r3, r3, #1
 800b96e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b970:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b974:	460b      	mov	r3, r1
 800b976:	4313      	orrs	r3, r2
 800b978:	d011      	beq.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b97a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b97e:	3308      	adds	r3, #8
 800b980:	2100      	movs	r1, #0
 800b982:	4618      	mov	r0, r3
 800b984:	f001 fa4a 	bl	800ce1c <RCCEx_PLL2_Config>
 800b988:	4603      	mov	r3, r0
 800b98a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b98e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b992:	2b00      	cmp	r3, #0
 800b994:	d003      	beq.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b99a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b99e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	6239      	str	r1, [r7, #32]
 800b9aa:	f003 0302 	and.w	r3, r3, #2
 800b9ae:	627b      	str	r3, [r7, #36]	; 0x24
 800b9b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	d011      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9be:	3308      	adds	r3, #8
 800b9c0:	2101      	movs	r1, #1
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f001 fa2a 	bl	800ce1c <RCCEx_PLL2_Config>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b9ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d003      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	61b9      	str	r1, [r7, #24]
 800b9ea:	f003 0304 	and.w	r3, r3, #4
 800b9ee:	61fb      	str	r3, [r7, #28]
 800b9f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	d011      	beq.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9fe:	3308      	adds	r3, #8
 800ba00:	2102      	movs	r1, #2
 800ba02:	4618      	mov	r0, r3
 800ba04:	f001 fa0a 	bl	800ce1c <RCCEx_PLL2_Config>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ba0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d003      	beq.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ba1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	2100      	movs	r1, #0
 800ba28:	6139      	str	r1, [r7, #16]
 800ba2a:	f003 0308 	and.w	r3, r3, #8
 800ba2e:	617b      	str	r3, [r7, #20]
 800ba30:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ba34:	460b      	mov	r3, r1
 800ba36:	4313      	orrs	r3, r2
 800ba38:	d011      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba3e:	3328      	adds	r3, #40	; 0x28
 800ba40:	2100      	movs	r1, #0
 800ba42:	4618      	mov	r0, r3
 800ba44:	f001 fa9c 	bl	800cf80 <RCCEx_PLL3_Config>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ba4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d003      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ba5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba66:	2100      	movs	r1, #0
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	f003 0310 	and.w	r3, r3, #16
 800ba6e:	60fb      	str	r3, [r7, #12]
 800ba70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ba74:	460b      	mov	r3, r1
 800ba76:	4313      	orrs	r3, r2
 800ba78:	d011      	beq.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba7e:	3328      	adds	r3, #40	; 0x28
 800ba80:	2101      	movs	r1, #1
 800ba82:	4618      	mov	r0, r3
 800ba84:	f001 fa7c 	bl	800cf80 <RCCEx_PLL3_Config>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ba8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d003      	beq.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ba9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa6:	2100      	movs	r1, #0
 800baa8:	6039      	str	r1, [r7, #0]
 800baaa:	f003 0320 	and.w	r3, r3, #32
 800baae:	607b      	str	r3, [r7, #4]
 800bab0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bab4:	460b      	mov	r3, r1
 800bab6:	4313      	orrs	r3, r2
 800bab8:	d011      	beq.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800baba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800babe:	3328      	adds	r3, #40	; 0x28
 800bac0:	2102      	movs	r1, #2
 800bac2:	4618      	mov	r0, r3
 800bac4:	f001 fa5c 	bl	800cf80 <RCCEx_PLL3_Config>
 800bac8:	4603      	mov	r3, r0
 800baca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d003      	beq.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bada:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800bade:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d101      	bne.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800bae6:	2300      	movs	r3, #0
 800bae8:	e000      	b.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800baea:	2301      	movs	r3, #1
}
 800baec:	4618      	mov	r0, r3
 800baee:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800baf2:	46bd      	mov	sp, r7
 800baf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800baf8:	58024400 	.word	0x58024400

0800bafc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b090      	sub	sp, #64	; 0x40
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bb06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb0a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bb0e:	430b      	orrs	r3, r1
 800bb10:	f040 8094 	bne.w	800bc3c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bb14:	4b9e      	ldr	r3, [pc, #632]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb18:	f003 0307 	and.w	r3, r3, #7
 800bb1c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb20:	2b04      	cmp	r3, #4
 800bb22:	f200 8087 	bhi.w	800bc34 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bb26:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2c:	0800bb41 	.word	0x0800bb41
 800bb30:	0800bb69 	.word	0x0800bb69
 800bb34:	0800bb91 	.word	0x0800bb91
 800bb38:	0800bc2d 	.word	0x0800bc2d
 800bb3c:	0800bbb9 	.word	0x0800bbb9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb40:	4b93      	ldr	r3, [pc, #588]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb4c:	d108      	bne.n	800bb60 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb52:	4618      	mov	r0, r3
 800bb54:	f001 f810 	bl	800cb78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb5c:	f000 bd45 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb60:	2300      	movs	r3, #0
 800bb62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb64:	f000 bd41 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb68:	4b89      	ldr	r3, [pc, #548]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb74:	d108      	bne.n	800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb76:	f107 0318 	add.w	r3, r7, #24
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f000 fd54 	bl	800c628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb84:	f000 bd31 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb8c:	f000 bd2d 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb90:	4b7f      	ldr	r3, [pc, #508]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb9c:	d108      	bne.n	800bbb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb9e:	f107 030c 	add.w	r3, r7, #12
 800bba2:	4618      	mov	r0, r3
 800bba4:	f000 fe94 	bl	800c8d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbac:	f000 bd1d 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbb4:	f000 bd19 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bbb8:	4b75      	ldr	r3, [pc, #468]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bbc0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bbc2:	4b73      	ldr	r3, [pc, #460]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f003 0304 	and.w	r3, r3, #4
 800bbca:	2b04      	cmp	r3, #4
 800bbcc:	d10c      	bne.n	800bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bbce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d109      	bne.n	800bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbd4:	4b6e      	ldr	r3, [pc, #440]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	08db      	lsrs	r3, r3, #3
 800bbda:	f003 0303 	and.w	r3, r3, #3
 800bbde:	4a6d      	ldr	r2, [pc, #436]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bbe0:	fa22 f303 	lsr.w	r3, r2, r3
 800bbe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbe6:	e01f      	b.n	800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bbe8:	4b69      	ldr	r3, [pc, #420]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbf4:	d106      	bne.n	800bc04 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bbf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbfc:	d102      	bne.n	800bc04 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bbfe:	4b66      	ldr	r3, [pc, #408]	; (800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bc00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc02:	e011      	b.n	800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc04:	4b62      	ldr	r3, [pc, #392]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc10:	d106      	bne.n	800bc20 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bc12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc18:	d102      	bne.n	800bc20 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc1a:	4b60      	ldr	r3, [pc, #384]	; (800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc1e:	e003      	b.n	800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc20:	2300      	movs	r3, #0
 800bc22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bc24:	f000 bce1 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bc28:	f000 bcdf 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc2c:	4b5c      	ldr	r3, [pc, #368]	; (800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc30:	f000 bcdb 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bc34:	2300      	movs	r3, #0
 800bc36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc38:	f000 bcd7 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bc3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc40:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800bc44:	430b      	orrs	r3, r1
 800bc46:	f040 80ad 	bne.w	800bda4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bc4a:	4b51      	ldr	r3, [pc, #324]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc4e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bc52:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc5a:	d056      	beq.n	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc62:	f200 8090 	bhi.w	800bd86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc68:	2bc0      	cmp	r3, #192	; 0xc0
 800bc6a:	f000 8088 	beq.w	800bd7e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc70:	2bc0      	cmp	r3, #192	; 0xc0
 800bc72:	f200 8088 	bhi.w	800bd86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc78:	2b80      	cmp	r3, #128	; 0x80
 800bc7a:	d032      	beq.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7e:	2b80      	cmp	r3, #128	; 0x80
 800bc80:	f200 8081 	bhi.w	800bd86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d003      	beq.n	800bc92 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8c:	2b40      	cmp	r3, #64	; 0x40
 800bc8e:	d014      	beq.n	800bcba <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bc90:	e079      	b.n	800bd86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc92:	4b3f      	ldr	r3, [pc, #252]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc9e:	d108      	bne.n	800bcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bca4:	4618      	mov	r0, r3
 800bca6:	f000 ff67 	bl	800cb78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcae:	f000 bc9c 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcb6:	f000 bc98 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bcba:	4b35      	ldr	r3, [pc, #212]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcc6:	d108      	bne.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcc8:	f107 0318 	add.w	r3, r7, #24
 800bccc:	4618      	mov	r0, r3
 800bcce:	f000 fcab 	bl	800c628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcd6:	f000 bc88 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcde:	f000 bc84 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bce2:	4b2b      	ldr	r3, [pc, #172]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcee:	d108      	bne.n	800bd02 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcf0:	f107 030c 	add.w	r3, r7, #12
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f000 fdeb 	bl	800c8d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcfe:	f000 bc74 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd02:	2300      	movs	r3, #0
 800bd04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd06:	f000 bc70 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd0a:	4b21      	ldr	r3, [pc, #132]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd12:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd14:	4b1e      	ldr	r3, [pc, #120]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f003 0304 	and.w	r3, r3, #4
 800bd1c:	2b04      	cmp	r3, #4
 800bd1e:	d10c      	bne.n	800bd3a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800bd20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d109      	bne.n	800bd3a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd26:	4b1a      	ldr	r3, [pc, #104]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	08db      	lsrs	r3, r3, #3
 800bd2c:	f003 0303 	and.w	r3, r3, #3
 800bd30:	4a18      	ldr	r2, [pc, #96]	; (800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bd32:	fa22 f303 	lsr.w	r3, r2, r3
 800bd36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd38:	e01f      	b.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd3a:	4b15      	ldr	r3, [pc, #84]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd46:	d106      	bne.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800bd48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd4e:	d102      	bne.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bd50:	4b11      	ldr	r3, [pc, #68]	; (800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bd52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd54:	e011      	b.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd56:	4b0e      	ldr	r3, [pc, #56]	; (800bd90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd62:	d106      	bne.n	800bd72 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800bd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd6a:	d102      	bne.n	800bd72 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bd6c:	4b0b      	ldr	r3, [pc, #44]	; (800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd70:	e003      	b.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bd72:	2300      	movs	r3, #0
 800bd74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bd76:	f000 bc38 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bd7a:	f000 bc36 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bd7e:	4b08      	ldr	r3, [pc, #32]	; (800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bd80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd82:	f000 bc32 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bd86:	2300      	movs	r3, #0
 800bd88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd8a:	f000 bc2e 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bd8e:	bf00      	nop
 800bd90:	58024400 	.word	0x58024400
 800bd94:	03d09000 	.word	0x03d09000
 800bd98:	003d0900 	.word	0x003d0900
 800bd9c:	017d7840 	.word	0x017d7840
 800bda0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bda4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bda8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bdac:	430b      	orrs	r3, r1
 800bdae:	f040 809c 	bne.w	800beea <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bdb2:	4b9e      	ldr	r3, [pc, #632]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bdb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdb6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bdba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdc2:	d054      	beq.n	800be6e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800bdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdca:	f200 808b 	bhi.w	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bdd4:	f000 8083 	beq.w	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800bdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdda:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bdde:	f200 8081 	bhi.w	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bde8:	d02f      	beq.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800bdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bdf0:	d878      	bhi.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d004      	beq.n	800be02 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800bdf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdfe:	d012      	beq.n	800be26 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800be00:	e070      	b.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be02:	4b8a      	ldr	r3, [pc, #552]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be0e:	d107      	bne.n	800be20 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be14:	4618      	mov	r0, r3
 800be16:	f000 feaf 	bl	800cb78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be1e:	e3e4      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be20:	2300      	movs	r3, #0
 800be22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be24:	e3e1      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be26:	4b81      	ldr	r3, [pc, #516]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be32:	d107      	bne.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be34:	f107 0318 	add.w	r3, r7, #24
 800be38:	4618      	mov	r0, r3
 800be3a:	f000 fbf5 	bl	800c628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be42:	e3d2      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be44:	2300      	movs	r3, #0
 800be46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be48:	e3cf      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be4a:	4b78      	ldr	r3, [pc, #480]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be56:	d107      	bne.n	800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be58:	f107 030c 	add.w	r3, r7, #12
 800be5c:	4618      	mov	r0, r3
 800be5e:	f000 fd37 	bl	800c8d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be66:	e3c0      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be68:	2300      	movs	r3, #0
 800be6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be6c:	e3bd      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be6e:	4b6f      	ldr	r3, [pc, #444]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be76:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be78:	4b6c      	ldr	r3, [pc, #432]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f003 0304 	and.w	r3, r3, #4
 800be80:	2b04      	cmp	r3, #4
 800be82:	d10c      	bne.n	800be9e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800be84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be86:	2b00      	cmp	r3, #0
 800be88:	d109      	bne.n	800be9e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be8a:	4b68      	ldr	r3, [pc, #416]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	08db      	lsrs	r3, r3, #3
 800be90:	f003 0303 	and.w	r3, r3, #3
 800be94:	4a66      	ldr	r2, [pc, #408]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800be96:	fa22 f303 	lsr.w	r3, r2, r3
 800be9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be9c:	e01e      	b.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be9e:	4b63      	ldr	r3, [pc, #396]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beaa:	d106      	bne.n	800beba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800beac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800beb2:	d102      	bne.n	800beba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800beb4:	4b5f      	ldr	r3, [pc, #380]	; (800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800beb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beb8:	e010      	b.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800beba:	4b5c      	ldr	r3, [pc, #368]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bec2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bec6:	d106      	bne.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800bec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bece:	d102      	bne.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bed0:	4b59      	ldr	r3, [pc, #356]	; (800c038 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bed2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bed4:	e002      	b.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800beda:	e386      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bedc:	e385      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bede:	4b57      	ldr	r3, [pc, #348]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bee2:	e382      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bee4:	2300      	movs	r3, #0
 800bee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bee8:	e37f      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800beea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beee:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bef2:	430b      	orrs	r3, r1
 800bef4:	f040 80a7 	bne.w	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bef8:	4b4c      	ldr	r3, [pc, #304]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800befa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800befc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bf00:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf08:	d055      	beq.n	800bfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800bf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf10:	f200 8096 	bhi.w	800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bf14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf1a:	f000 8084 	beq.w	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf24:	f200 808c 	bhi.w	800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf2e:	d030      	beq.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800bf30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf36:	f200 8083 	bhi.w	800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d004      	beq.n	800bf4a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800bf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf46:	d012      	beq.n	800bf6e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800bf48:	e07a      	b.n	800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf4a:	4b38      	ldr	r3, [pc, #224]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf56:	d107      	bne.n	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f000 fe0b 	bl	800cb78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf66:	e340      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf6c:	e33d      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf6e:	4b2f      	ldr	r3, [pc, #188]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf7a:	d107      	bne.n	800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf7c:	f107 0318 	add.w	r3, r7, #24
 800bf80:	4618      	mov	r0, r3
 800bf82:	f000 fb51 	bl	800c628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf8a:	e32e      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf90:	e32b      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf92:	4b26      	ldr	r3, [pc, #152]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf9e:	d107      	bne.n	800bfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfa0:	f107 030c 	add.w	r3, r7, #12
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f000 fc93 	bl	800c8d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfae:	e31c      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfb4:	e319      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bfb6:	4b1d      	ldr	r3, [pc, #116]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bfbe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bfc0:	4b1a      	ldr	r3, [pc, #104]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f003 0304 	and.w	r3, r3, #4
 800bfc8:	2b04      	cmp	r3, #4
 800bfca:	d10c      	bne.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800bfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d109      	bne.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfd2:	4b16      	ldr	r3, [pc, #88]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	08db      	lsrs	r3, r3, #3
 800bfd8:	f003 0303 	and.w	r3, r3, #3
 800bfdc:	4a14      	ldr	r2, [pc, #80]	; (800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bfde:	fa22 f303 	lsr.w	r3, r2, r3
 800bfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfe4:	e01e      	b.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfe6:	4b11      	ldr	r3, [pc, #68]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bff2:	d106      	bne.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800bff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bffa:	d102      	bne.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bffc:	4b0d      	ldr	r3, [pc, #52]	; (800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800bffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c000:	e010      	b.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c002:	4b0a      	ldr	r3, [pc, #40]	; (800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c00a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c00e:	d106      	bne.n	800c01e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c016:	d102      	bne.n	800c01e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c018:	4b07      	ldr	r3, [pc, #28]	; (800c038 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c01a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c01c:	e002      	b.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c01e:	2300      	movs	r3, #0
 800c020:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c022:	e2e2      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c024:	e2e1      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c026:	4b05      	ldr	r3, [pc, #20]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c02a:	e2de      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c02c:	58024400 	.word	0x58024400
 800c030:	03d09000 	.word	0x03d09000
 800c034:	003d0900 	.word	0x003d0900
 800c038:	017d7840 	.word	0x017d7840
 800c03c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c040:	2300      	movs	r3, #0
 800c042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c044:	e2d1      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c04a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c04e:	430b      	orrs	r3, r1
 800c050:	f040 809c 	bne.w	800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c054:	4b93      	ldr	r3, [pc, #588]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c058:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c05c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c064:	d054      	beq.n	800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c06c:	f200 808b 	bhi.w	800c186 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c072:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c076:	f000 8083 	beq.w	800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c080:	f200 8081 	bhi.w	800c186 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c08a:	d02f      	beq.n	800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c092:	d878      	bhi.n	800c186 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c096:	2b00      	cmp	r3, #0
 800c098:	d004      	beq.n	800c0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0a0:	d012      	beq.n	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c0a2:	e070      	b.n	800c186 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c0a4:	4b7f      	ldr	r3, [pc, #508]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0b0:	d107      	bne.n	800c0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f000 fd5e 	bl	800cb78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0c0:	e293      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0c6:	e290      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0c8:	4b76      	ldr	r3, [pc, #472]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0d4:	d107      	bne.n	800c0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0d6:	f107 0318 	add.w	r3, r7, #24
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f000 faa4 	bl	800c628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0e4:	e281      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0ea:	e27e      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0ec:	4b6d      	ldr	r3, [pc, #436]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0f8:	d107      	bne.n	800c10a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0fa:	f107 030c 	add.w	r3, r7, #12
 800c0fe:	4618      	mov	r0, r3
 800c100:	f000 fbe6 	bl	800c8d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c108:	e26f      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c10a:	2300      	movs	r3, #0
 800c10c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c10e:	e26c      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c110:	4b64      	ldr	r3, [pc, #400]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c114:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c118:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c11a:	4b62      	ldr	r3, [pc, #392]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f003 0304 	and.w	r3, r3, #4
 800c122:	2b04      	cmp	r3, #4
 800c124:	d10c      	bne.n	800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d109      	bne.n	800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c12c:	4b5d      	ldr	r3, [pc, #372]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	08db      	lsrs	r3, r3, #3
 800c132:	f003 0303 	and.w	r3, r3, #3
 800c136:	4a5c      	ldr	r2, [pc, #368]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c138:	fa22 f303 	lsr.w	r3, r2, r3
 800c13c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c13e:	e01e      	b.n	800c17e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c140:	4b58      	ldr	r3, [pc, #352]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c14c:	d106      	bne.n	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c150:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c154:	d102      	bne.n	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c156:	4b55      	ldr	r3, [pc, #340]	; (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c15a:	e010      	b.n	800c17e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c15c:	4b51      	ldr	r3, [pc, #324]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c164:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c168:	d106      	bne.n	800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c16c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c170:	d102      	bne.n	800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c172:	4b4f      	ldr	r3, [pc, #316]	; (800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c174:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c176:	e002      	b.n	800c17e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c178:	2300      	movs	r3, #0
 800c17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c17c:	e235      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c17e:	e234      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c180:	4b4c      	ldr	r3, [pc, #304]	; (800c2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c184:	e231      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c186:	2300      	movs	r3, #0
 800c188:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c18a:	e22e      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c18c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c190:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c194:	430b      	orrs	r3, r1
 800c196:	f040 808f 	bne.w	800c2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c19a:	4b42      	ldr	r3, [pc, #264]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c19c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c19e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c1a2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c1aa:	d06b      	beq.n	800c284 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c1b2:	d874      	bhi.n	800c29e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c1ba:	d056      	beq.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c1c2:	d86c      	bhi.n	800c29e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c1ca:	d03b      	beq.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c1d2:	d864      	bhi.n	800c29e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1da:	d021      	beq.n	800c220 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1e2:	d85c      	bhi.n	800c29e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d004      	beq.n	800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1f0:	d004      	beq.n	800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c1f2:	e054      	b.n	800c29e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c1f4:	f7fe fa0a 	bl	800a60c <HAL_RCC_GetPCLK1Freq>
 800c1f8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c1fa:	e1f6      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1fc:	4b29      	ldr	r3, [pc, #164]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c208:	d107      	bne.n	800c21a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c20a:	f107 0318 	add.w	r3, r7, #24
 800c20e:	4618      	mov	r0, r3
 800c210:	f000 fa0a 	bl	800c628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c218:	e1e7      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c21e:	e1e4      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c220:	4b20      	ldr	r3, [pc, #128]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c22c:	d107      	bne.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c22e:	f107 030c 	add.w	r3, r7, #12
 800c232:	4618      	mov	r0, r3
 800c234:	f000 fb4c 	bl	800c8d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c23c:	e1d5      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c23e:	2300      	movs	r3, #0
 800c240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c242:	e1d2      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c244:	4b17      	ldr	r3, [pc, #92]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f003 0304 	and.w	r3, r3, #4
 800c24c:	2b04      	cmp	r3, #4
 800c24e:	d109      	bne.n	800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c250:	4b14      	ldr	r3, [pc, #80]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	08db      	lsrs	r3, r3, #3
 800c256:	f003 0303 	and.w	r3, r3, #3
 800c25a:	4a13      	ldr	r2, [pc, #76]	; (800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c25c:	fa22 f303 	lsr.w	r3, r2, r3
 800c260:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c262:	e1c2      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c264:	2300      	movs	r3, #0
 800c266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c268:	e1bf      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c26a:	4b0e      	ldr	r3, [pc, #56]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c276:	d102      	bne.n	800c27e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c278:	4b0c      	ldr	r3, [pc, #48]	; (800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c27c:	e1b5      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c27e:	2300      	movs	r3, #0
 800c280:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c282:	e1b2      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c284:	4b07      	ldr	r3, [pc, #28]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c28c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c290:	d102      	bne.n	800c298 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c292:	4b07      	ldr	r3, [pc, #28]	; (800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c294:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c296:	e1a8      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c298:	2300      	movs	r3, #0
 800c29a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c29c:	e1a5      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2a2:	e1a2      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c2a4:	58024400 	.word	0x58024400
 800c2a8:	03d09000 	.word	0x03d09000
 800c2ac:	003d0900 	.word	0x003d0900
 800c2b0:	017d7840 	.word	0x017d7840
 800c2b4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c2b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2bc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c2c0:	430b      	orrs	r3, r1
 800c2c2:	d173      	bne.n	800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c2c4:	4b9c      	ldr	r3, [pc, #624]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c2cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2d4:	d02f      	beq.n	800c336 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2dc:	d863      	bhi.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d004      	beq.n	800c2ee <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2ea:	d012      	beq.n	800c312 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c2ec:	e05b      	b.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2ee:	4b92      	ldr	r3, [pc, #584]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2fa:	d107      	bne.n	800c30c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2fc:	f107 0318 	add.w	r3, r7, #24
 800c300:	4618      	mov	r0, r3
 800c302:	f000 f991 	bl	800c628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c30a:	e16e      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c30c:	2300      	movs	r3, #0
 800c30e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c310:	e16b      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c312:	4b89      	ldr	r3, [pc, #548]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c31a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c31e:	d107      	bne.n	800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c320:	f107 030c 	add.w	r3, r7, #12
 800c324:	4618      	mov	r0, r3
 800c326:	f000 fad3 	bl	800c8d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c32e:	e15c      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c330:	2300      	movs	r3, #0
 800c332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c334:	e159      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c336:	4b80      	ldr	r3, [pc, #512]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c33a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c33e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c340:	4b7d      	ldr	r3, [pc, #500]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f003 0304 	and.w	r3, r3, #4
 800c348:	2b04      	cmp	r3, #4
 800c34a:	d10c      	bne.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d109      	bne.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c352:	4b79      	ldr	r3, [pc, #484]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	08db      	lsrs	r3, r3, #3
 800c358:	f003 0303 	and.w	r3, r3, #3
 800c35c:	4a77      	ldr	r2, [pc, #476]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c35e:	fa22 f303 	lsr.w	r3, r2, r3
 800c362:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c364:	e01e      	b.n	800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c366:	4b74      	ldr	r3, [pc, #464]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c36e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c372:	d106      	bne.n	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c37a:	d102      	bne.n	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c37c:	4b70      	ldr	r3, [pc, #448]	; (800c540 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c37e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c380:	e010      	b.n	800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c382:	4b6d      	ldr	r3, [pc, #436]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c38a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c38e:	d106      	bne.n	800c39e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c396:	d102      	bne.n	800c39e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c398:	4b6a      	ldr	r3, [pc, #424]	; (800c544 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c39a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c39c:	e002      	b.n	800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c3a2:	e122      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c3a4:	e121      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3aa:	e11e      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c3ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3b0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c3b4:	430b      	orrs	r3, r1
 800c3b6:	d133      	bne.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c3b8:	4b5f      	ldr	r3, [pc, #380]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d004      	beq.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3ce:	d012      	beq.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c3d0:	e023      	b.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3d2:	4b59      	ldr	r3, [pc, #356]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3de:	d107      	bne.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f000 fbc7 	bl	800cb78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3ee:	e0fc      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3f4:	e0f9      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3f6:	4b50      	ldr	r3, [pc, #320]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c402:	d107      	bne.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c404:	f107 0318 	add.w	r3, r7, #24
 800c408:	4618      	mov	r0, r3
 800c40a:	f000 f90d 	bl	800c628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c40e:	6a3b      	ldr	r3, [r7, #32]
 800c410:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c412:	e0ea      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c414:	2300      	movs	r3, #0
 800c416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c418:	e0e7      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c41a:	2300      	movs	r3, #0
 800c41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c41e:	e0e4      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c420:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c424:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c428:	430b      	orrs	r3, r1
 800c42a:	f040 808d 	bne.w	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c42e:	4b42      	ldr	r3, [pc, #264]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c432:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c436:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c43a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c43e:	d06b      	beq.n	800c518 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c446:	d874      	bhi.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c44e:	d056      	beq.n	800c4fe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c456:	d86c      	bhi.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c45e:	d03b      	beq.n	800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c462:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c466:	d864      	bhi.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c46e:	d021      	beq.n	800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c476:	d85c      	bhi.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d004      	beq.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c484:	d004      	beq.n	800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c486:	e054      	b.n	800c532 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c488:	f000 f8b8 	bl	800c5fc <HAL_RCCEx_GetD3PCLK1Freq>
 800c48c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c48e:	e0ac      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c490:	4b29      	ldr	r3, [pc, #164]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c49c:	d107      	bne.n	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c49e:	f107 0318 	add.w	r3, r7, #24
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f000 f8c0 	bl	800c628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4ac:	e09d      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4b2:	e09a      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4b4:	4b20      	ldr	r3, [pc, #128]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4c0:	d107      	bne.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4c2:	f107 030c 	add.w	r3, r7, #12
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f000 fa02 	bl	800c8d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4d0:	e08b      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4d6:	e088      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c4d8:	4b17      	ldr	r3, [pc, #92]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f003 0304 	and.w	r3, r3, #4
 800c4e0:	2b04      	cmp	r3, #4
 800c4e2:	d109      	bne.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4e4:	4b14      	ldr	r3, [pc, #80]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	08db      	lsrs	r3, r3, #3
 800c4ea:	f003 0303 	and.w	r3, r3, #3
 800c4ee:	4a13      	ldr	r2, [pc, #76]	; (800c53c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c4f0:	fa22 f303 	lsr.w	r3, r2, r3
 800c4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4f6:	e078      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4fc:	e075      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c4fe:	4b0e      	ldr	r3, [pc, #56]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c50a:	d102      	bne.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c50c:	4b0c      	ldr	r3, [pc, #48]	; (800c540 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c50e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c510:	e06b      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c512:	2300      	movs	r3, #0
 800c514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c516:	e068      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c518:	4b07      	ldr	r3, [pc, #28]	; (800c538 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c524:	d102      	bne.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c526:	4b07      	ldr	r3, [pc, #28]	; (800c544 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c528:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c52a:	e05e      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c52c:	2300      	movs	r3, #0
 800c52e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c530:	e05b      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c532:	2300      	movs	r3, #0
 800c534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c536:	e058      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c538:	58024400 	.word	0x58024400
 800c53c:	03d09000 	.word	0x03d09000
 800c540:	003d0900 	.word	0x003d0900
 800c544:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c54c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c550:	430b      	orrs	r3, r1
 800c552:	d148      	bne.n	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c554:	4b27      	ldr	r3, [pc, #156]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c55c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c564:	d02a      	beq.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c56c:	d838      	bhi.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c570:	2b00      	cmp	r3, #0
 800c572:	d004      	beq.n	800c57e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c576:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c57a:	d00d      	beq.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c57c:	e030      	b.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c57e:	4b1d      	ldr	r3, [pc, #116]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c586:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c58a:	d102      	bne.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c58c:	4b1a      	ldr	r3, [pc, #104]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c590:	e02b      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c596:	e028      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c598:	4b16      	ldr	r3, [pc, #88]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5a4:	d107      	bne.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f000 fae4 	bl	800cb78 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5b4:	e019      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ba:	e016      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5bc:	4b0d      	ldr	r3, [pc, #52]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5c8:	d107      	bne.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5ca:	f107 0318 	add.w	r3, r7, #24
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 f82a 	bl	800c628 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5d8:	e007      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5de:	e004      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e4:	e001      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c5ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3740      	adds	r7, #64	; 0x40
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	58024400 	.word	0x58024400
 800c5f8:	017d7840 	.word	0x017d7840

0800c5fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c600:	f7fd ffd4 	bl	800a5ac <HAL_RCC_GetHCLKFreq>
 800c604:	4602      	mov	r2, r0
 800c606:	4b06      	ldr	r3, [pc, #24]	; (800c620 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c608:	6a1b      	ldr	r3, [r3, #32]
 800c60a:	091b      	lsrs	r3, r3, #4
 800c60c:	f003 0307 	and.w	r3, r3, #7
 800c610:	4904      	ldr	r1, [pc, #16]	; (800c624 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c612:	5ccb      	ldrb	r3, [r1, r3]
 800c614:	f003 031f 	and.w	r3, r3, #31
 800c618:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	58024400 	.word	0x58024400
 800c624:	0801667c 	.word	0x0801667c

0800c628 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c628:	b480      	push	{r7}
 800c62a:	b089      	sub	sp, #36	; 0x24
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c630:	4ba1      	ldr	r3, [pc, #644]	; (800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c634:	f003 0303 	and.w	r3, r3, #3
 800c638:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c63a:	4b9f      	ldr	r3, [pc, #636]	; (800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c63e:	0b1b      	lsrs	r3, r3, #12
 800c640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c644:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c646:	4b9c      	ldr	r3, [pc, #624]	; (800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64a:	091b      	lsrs	r3, r3, #4
 800c64c:	f003 0301 	and.w	r3, r3, #1
 800c650:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c652:	4b99      	ldr	r3, [pc, #612]	; (800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c656:	08db      	lsrs	r3, r3, #3
 800c658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c65c:	693a      	ldr	r2, [r7, #16]
 800c65e:	fb02 f303 	mul.w	r3, r2, r3
 800c662:	ee07 3a90 	vmov	s15, r3
 800c666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c66a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	2b00      	cmp	r3, #0
 800c672:	f000 8111 	beq.w	800c898 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	2b02      	cmp	r3, #2
 800c67a:	f000 8083 	beq.w	800c784 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	2b02      	cmp	r3, #2
 800c682:	f200 80a1 	bhi.w	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d003      	beq.n	800c694 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d056      	beq.n	800c740 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c692:	e099      	b.n	800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c694:	4b88      	ldr	r3, [pc, #544]	; (800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f003 0320 	and.w	r3, r3, #32
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d02d      	beq.n	800c6fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6a0:	4b85      	ldr	r3, [pc, #532]	; (800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	08db      	lsrs	r3, r3, #3
 800c6a6:	f003 0303 	and.w	r3, r3, #3
 800c6aa:	4a84      	ldr	r2, [pc, #528]	; (800c8bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c6ac:	fa22 f303 	lsr.w	r3, r2, r3
 800c6b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	ee07 3a90 	vmov	s15, r3
 800c6b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	ee07 3a90 	vmov	s15, r3
 800c6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6ca:	4b7b      	ldr	r3, [pc, #492]	; (800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6d2:	ee07 3a90 	vmov	s15, r3
 800c6d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6da:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6de:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c6fa:	e087      	b.n	800c80c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	ee07 3a90 	vmov	s15, r3
 800c702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c706:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c8c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c70e:	4b6a      	ldr	r3, [pc, #424]	; (800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c716:	ee07 3a90 	vmov	s15, r3
 800c71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c71e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c722:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c72e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c73a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c73e:	e065      	b.n	800c80c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	ee07 3a90 	vmov	s15, r3
 800c746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c74a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c8c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c74e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c752:	4b59      	ldr	r3, [pc, #356]	; (800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c75a:	ee07 3a90 	vmov	s15, r3
 800c75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c762:	ed97 6a03 	vldr	s12, [r7, #12]
 800c766:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c76a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c76e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c77a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c77e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c782:	e043      	b.n	800c80c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	ee07 3a90 	vmov	s15, r3
 800c78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c78e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c8cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c796:	4b48      	ldr	r3, [pc, #288]	; (800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c79e:	ee07 3a90 	vmov	s15, r3
 800c7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7c6:	e021      	b.n	800c80c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	ee07 3a90 	vmov	s15, r3
 800c7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c8c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c7d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7da:	4b37      	ldr	r3, [pc, #220]	; (800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7e2:	ee07 3a90 	vmov	s15, r3
 800c7e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c802:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c80a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c80c:	4b2a      	ldr	r3, [pc, #168]	; (800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c810:	0a5b      	lsrs	r3, r3, #9
 800c812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c816:	ee07 3a90 	vmov	s15, r3
 800c81a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c81e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c822:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c826:	edd7 6a07 	vldr	s13, [r7, #28]
 800c82a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c82e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c832:	ee17 2a90 	vmov	r2, s15
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c83a:	4b1f      	ldr	r3, [pc, #124]	; (800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83e:	0c1b      	lsrs	r3, r3, #16
 800c840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c844:	ee07 3a90 	vmov	s15, r3
 800c848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c84c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c850:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c854:	edd7 6a07 	vldr	s13, [r7, #28]
 800c858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c85c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c860:	ee17 2a90 	vmov	r2, s15
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c868:	4b13      	ldr	r3, [pc, #76]	; (800c8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c86c:	0e1b      	lsrs	r3, r3, #24
 800c86e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c872:	ee07 3a90 	vmov	s15, r3
 800c876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c87a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c87e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c882:	edd7 6a07 	vldr	s13, [r7, #28]
 800c886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c88a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c88e:	ee17 2a90 	vmov	r2, s15
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c896:	e008      	b.n	800c8aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2200      	movs	r2, #0
 800c89c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	609a      	str	r2, [r3, #8]
}
 800c8aa:	bf00      	nop
 800c8ac:	3724      	adds	r7, #36	; 0x24
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr
 800c8b6:	bf00      	nop
 800c8b8:	58024400 	.word	0x58024400
 800c8bc:	03d09000 	.word	0x03d09000
 800c8c0:	46000000 	.word	0x46000000
 800c8c4:	4c742400 	.word	0x4c742400
 800c8c8:	4a742400 	.word	0x4a742400
 800c8cc:	4bbebc20 	.word	0x4bbebc20

0800c8d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b089      	sub	sp, #36	; 0x24
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8d8:	4ba1      	ldr	r3, [pc, #644]	; (800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8dc:	f003 0303 	and.w	r3, r3, #3
 800c8e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c8e2:	4b9f      	ldr	r3, [pc, #636]	; (800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e6:	0d1b      	lsrs	r3, r3, #20
 800c8e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c8ee:	4b9c      	ldr	r3, [pc, #624]	; (800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f2:	0a1b      	lsrs	r3, r3, #8
 800c8f4:	f003 0301 	and.w	r3, r3, #1
 800c8f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c8fa:	4b99      	ldr	r3, [pc, #612]	; (800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8fe:	08db      	lsrs	r3, r3, #3
 800c900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c904:	693a      	ldr	r2, [r7, #16]
 800c906:	fb02 f303 	mul.w	r3, r2, r3
 800c90a:	ee07 3a90 	vmov	s15, r3
 800c90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c912:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f000 8111 	beq.w	800cb40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	2b02      	cmp	r3, #2
 800c922:	f000 8083 	beq.w	800ca2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	2b02      	cmp	r3, #2
 800c92a:	f200 80a1 	bhi.w	800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d003      	beq.n	800c93c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	2b01      	cmp	r3, #1
 800c938:	d056      	beq.n	800c9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c93a:	e099      	b.n	800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c93c:	4b88      	ldr	r3, [pc, #544]	; (800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f003 0320 	and.w	r3, r3, #32
 800c944:	2b00      	cmp	r3, #0
 800c946:	d02d      	beq.n	800c9a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c948:	4b85      	ldr	r3, [pc, #532]	; (800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	08db      	lsrs	r3, r3, #3
 800c94e:	f003 0303 	and.w	r3, r3, #3
 800c952:	4a84      	ldr	r2, [pc, #528]	; (800cb64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c954:	fa22 f303 	lsr.w	r3, r2, r3
 800c958:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	ee07 3a90 	vmov	s15, r3
 800c960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	ee07 3a90 	vmov	s15, r3
 800c96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c96e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c972:	4b7b      	ldr	r3, [pc, #492]	; (800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c97a:	ee07 3a90 	vmov	s15, r3
 800c97e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c982:	ed97 6a03 	vldr	s12, [r7, #12]
 800c986:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c98a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c98e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c99a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c99e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c9a2:	e087      	b.n	800cab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	ee07 3a90 	vmov	s15, r3
 800c9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cb6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c9b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9b6:	4b6a      	ldr	r3, [pc, #424]	; (800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9be:	ee07 3a90 	vmov	s15, r3
 800c9c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9e6:	e065      	b.n	800cab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	ee07 3a90 	vmov	s15, r3
 800c9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cb70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c9f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9fa:	4b59      	ldr	r3, [pc, #356]	; (800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca02:	ee07 3a90 	vmov	s15, r3
 800ca06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca2a:	e043      	b.n	800cab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	ee07 3a90 	vmov	s15, r3
 800ca32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cb74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ca3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca3e:	4b48      	ldr	r3, [pc, #288]	; (800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca46:	ee07 3a90 	vmov	s15, r3
 800ca4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca52:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca6e:	e021      	b.n	800cab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	ee07 3a90 	vmov	s15, r3
 800ca76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cb70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ca7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca82:	4b37      	ldr	r3, [pc, #220]	; (800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca8a:	ee07 3a90 	vmov	s15, r3
 800ca8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca92:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca96:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cab2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cab4:	4b2a      	ldr	r3, [pc, #168]	; (800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab8:	0a5b      	lsrs	r3, r3, #9
 800caba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cabe:	ee07 3a90 	vmov	s15, r3
 800cac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800caca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cace:	edd7 6a07 	vldr	s13, [r7, #28]
 800cad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cada:	ee17 2a90 	vmov	r2, s15
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cae2:	4b1f      	ldr	r3, [pc, #124]	; (800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cae6:	0c1b      	lsrs	r3, r3, #16
 800cae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caec:	ee07 3a90 	vmov	s15, r3
 800caf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800caf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cafc:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb08:	ee17 2a90 	vmov	r2, s15
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cb10:	4b13      	ldr	r3, [pc, #76]	; (800cb60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb14:	0e1b      	lsrs	r3, r3, #24
 800cb16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb1a:	ee07 3a90 	vmov	s15, r3
 800cb1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb36:	ee17 2a90 	vmov	r2, s15
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cb3e:	e008      	b.n	800cb52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	609a      	str	r2, [r3, #8]
}
 800cb52:	bf00      	nop
 800cb54:	3724      	adds	r7, #36	; 0x24
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	58024400 	.word	0x58024400
 800cb64:	03d09000 	.word	0x03d09000
 800cb68:	46000000 	.word	0x46000000
 800cb6c:	4c742400 	.word	0x4c742400
 800cb70:	4a742400 	.word	0x4a742400
 800cb74:	4bbebc20 	.word	0x4bbebc20

0800cb78 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b089      	sub	sp, #36	; 0x24
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb80:	4ba0      	ldr	r3, [pc, #640]	; (800ce04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb84:	f003 0303 	and.w	r3, r3, #3
 800cb88:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cb8a:	4b9e      	ldr	r3, [pc, #632]	; (800ce04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb8e:	091b      	lsrs	r3, r3, #4
 800cb90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb94:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cb96:	4b9b      	ldr	r3, [pc, #620]	; (800ce04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb9a:	f003 0301 	and.w	r3, r3, #1
 800cb9e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cba0:	4b98      	ldr	r3, [pc, #608]	; (800ce04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cba4:	08db      	lsrs	r3, r3, #3
 800cba6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cbaa:	693a      	ldr	r2, [r7, #16]
 800cbac:	fb02 f303 	mul.w	r3, r2, r3
 800cbb0:	ee07 3a90 	vmov	s15, r3
 800cbb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbb8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	f000 8111 	beq.w	800cde6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	f000 8083 	beq.w	800ccd2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	2b02      	cmp	r3, #2
 800cbd0:	f200 80a1 	bhi.w	800cd16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d003      	beq.n	800cbe2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d056      	beq.n	800cc8e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cbe0:	e099      	b.n	800cd16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbe2:	4b88      	ldr	r3, [pc, #544]	; (800ce04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f003 0320 	and.w	r3, r3, #32
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d02d      	beq.n	800cc4a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbee:	4b85      	ldr	r3, [pc, #532]	; (800ce04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	08db      	lsrs	r3, r3, #3
 800cbf4:	f003 0303 	and.w	r3, r3, #3
 800cbf8:	4a83      	ldr	r2, [pc, #524]	; (800ce08 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cbfa:	fa22 f303 	lsr.w	r3, r2, r3
 800cbfe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	ee07 3a90 	vmov	s15, r3
 800cc06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	ee07 3a90 	vmov	s15, r3
 800cc10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc18:	4b7a      	ldr	r3, [pc, #488]	; (800ce04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc20:	ee07 3a90 	vmov	s15, r3
 800cc24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc28:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc2c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc44:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cc48:	e087      	b.n	800cd5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	ee07 3a90 	vmov	s15, r3
 800cc50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc54:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ce10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cc58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc5c:	4b69      	ldr	r3, [pc, #420]	; (800ce04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc64:	ee07 3a90 	vmov	s15, r3
 800cc68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc70:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc8c:	e065      	b.n	800cd5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	ee07 3a90 	vmov	s15, r3
 800cc94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc98:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ce14 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cc9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cca0:	4b58      	ldr	r3, [pc, #352]	; (800ce04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cca8:	ee07 3a90 	vmov	s15, r3
 800ccac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccb4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ccb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cccc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccd0:	e043      	b.n	800cd5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	ee07 3a90 	vmov	s15, r3
 800ccd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccdc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ce18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cce4:	4b47      	ldr	r3, [pc, #284]	; (800ce04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccec:	ee07 3a90 	vmov	s15, r3
 800ccf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccf4:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccf8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ccfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd14:	e021      	b.n	800cd5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	ee07 3a90 	vmov	s15, r3
 800cd1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd20:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ce10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cd24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd28:	4b36      	ldr	r3, [pc, #216]	; (800ce04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd30:	ee07 3a90 	vmov	s15, r3
 800cd34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd38:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd3c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd58:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cd5a:	4b2a      	ldr	r3, [pc, #168]	; (800ce04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd5e:	0a5b      	lsrs	r3, r3, #9
 800cd60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd64:	ee07 3a90 	vmov	s15, r3
 800cd68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd74:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd80:	ee17 2a90 	vmov	r2, s15
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cd88:	4b1e      	ldr	r3, [pc, #120]	; (800ce04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd8c:	0c1b      	lsrs	r3, r3, #16
 800cd8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd92:	ee07 3a90 	vmov	s15, r3
 800cd96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cda2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cda6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdae:	ee17 2a90 	vmov	r2, s15
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cdb6:	4b13      	ldr	r3, [pc, #76]	; (800ce04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdba:	0e1b      	lsrs	r3, r3, #24
 800cdbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdc0:	ee07 3a90 	vmov	s15, r3
 800cdc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdd0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cddc:	ee17 2a90 	vmov	r2, s15
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cde4:	e008      	b.n	800cdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	609a      	str	r2, [r3, #8]
}
 800cdf8:	bf00      	nop
 800cdfa:	3724      	adds	r7, #36	; 0x24
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr
 800ce04:	58024400 	.word	0x58024400
 800ce08:	03d09000 	.word	0x03d09000
 800ce0c:	46000000 	.word	0x46000000
 800ce10:	4c742400 	.word	0x4c742400
 800ce14:	4a742400 	.word	0x4a742400
 800ce18:	4bbebc20 	.word	0x4bbebc20

0800ce1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce26:	2300      	movs	r3, #0
 800ce28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce2a:	4b53      	ldr	r3, [pc, #332]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800ce2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce2e:	f003 0303 	and.w	r3, r3, #3
 800ce32:	2b03      	cmp	r3, #3
 800ce34:	d101      	bne.n	800ce3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ce36:	2301      	movs	r3, #1
 800ce38:	e099      	b.n	800cf6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ce3a:	4b4f      	ldr	r3, [pc, #316]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a4e      	ldr	r2, [pc, #312]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800ce40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce46:	f7f6 fc9b 	bl	8003780 <HAL_GetTick>
 800ce4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce4c:	e008      	b.n	800ce60 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce4e:	f7f6 fc97 	bl	8003780 <HAL_GetTick>
 800ce52:	4602      	mov	r2, r0
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	1ad3      	subs	r3, r2, r3
 800ce58:	2b02      	cmp	r3, #2
 800ce5a:	d901      	bls.n	800ce60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce5c:	2303      	movs	r3, #3
 800ce5e:	e086      	b.n	800cf6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce60:	4b45      	ldr	r3, [pc, #276]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d1f0      	bne.n	800ce4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ce6c:	4b42      	ldr	r3, [pc, #264]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800ce6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	031b      	lsls	r3, r3, #12
 800ce7a:	493f      	ldr	r1, [pc, #252]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	628b      	str	r3, [r1, #40]	; 0x28
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	3b01      	subs	r3, #1
 800ce86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	3b01      	subs	r3, #1
 800ce90:	025b      	lsls	r3, r3, #9
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	431a      	orrs	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	3b01      	subs	r3, #1
 800ce9c:	041b      	lsls	r3, r3, #16
 800ce9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cea2:	431a      	orrs	r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	691b      	ldr	r3, [r3, #16]
 800cea8:	3b01      	subs	r3, #1
 800ceaa:	061b      	lsls	r3, r3, #24
 800ceac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ceb0:	4931      	ldr	r1, [pc, #196]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ceb6:	4b30      	ldr	r3, [pc, #192]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800ceb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	695b      	ldr	r3, [r3, #20]
 800cec2:	492d      	ldr	r1, [pc, #180]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800cec4:	4313      	orrs	r3, r2
 800cec6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cec8:	4b2b      	ldr	r3, [pc, #172]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800ceca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cecc:	f023 0220 	bic.w	r2, r3, #32
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	699b      	ldr	r3, [r3, #24]
 800ced4:	4928      	ldr	r1, [pc, #160]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800ced6:	4313      	orrs	r3, r2
 800ced8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ceda:	4b27      	ldr	r3, [pc, #156]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800cedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cede:	4a26      	ldr	r2, [pc, #152]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800cee0:	f023 0310 	bic.w	r3, r3, #16
 800cee4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cee6:	4b24      	ldr	r3, [pc, #144]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800cee8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ceea:	4b24      	ldr	r3, [pc, #144]	; (800cf7c <RCCEx_PLL2_Config+0x160>)
 800ceec:	4013      	ands	r3, r2
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	69d2      	ldr	r2, [r2, #28]
 800cef2:	00d2      	lsls	r2, r2, #3
 800cef4:	4920      	ldr	r1, [pc, #128]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800cef6:	4313      	orrs	r3, r2
 800cef8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cefa:	4b1f      	ldr	r3, [pc, #124]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800cefc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cefe:	4a1e      	ldr	r2, [pc, #120]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800cf00:	f043 0310 	orr.w	r3, r3, #16
 800cf04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d106      	bne.n	800cf1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cf0c:	4b1a      	ldr	r3, [pc, #104]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800cf0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf10:	4a19      	ldr	r2, [pc, #100]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800cf12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf16:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf18:	e00f      	b.n	800cf3a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d106      	bne.n	800cf2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cf20:	4b15      	ldr	r3, [pc, #84]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800cf22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf24:	4a14      	ldr	r2, [pc, #80]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800cf26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf2c:	e005      	b.n	800cf3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cf2e:	4b12      	ldr	r3, [pc, #72]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800cf30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf32:	4a11      	ldr	r2, [pc, #68]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800cf34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cf3a:	4b0f      	ldr	r3, [pc, #60]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a0e      	ldr	r2, [pc, #56]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800cf40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf46:	f7f6 fc1b 	bl	8003780 <HAL_GetTick>
 800cf4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf4c:	e008      	b.n	800cf60 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cf4e:	f7f6 fc17 	bl	8003780 <HAL_GetTick>
 800cf52:	4602      	mov	r2, r0
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	1ad3      	subs	r3, r2, r3
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d901      	bls.n	800cf60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf5c:	2303      	movs	r3, #3
 800cf5e:	e006      	b.n	800cf6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf60:	4b05      	ldr	r3, [pc, #20]	; (800cf78 <RCCEx_PLL2_Config+0x15c>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d0f0      	beq.n	800cf4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3710      	adds	r7, #16
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	58024400 	.word	0x58024400
 800cf7c:	ffff0007 	.word	0xffff0007

0800cf80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cf8e:	4b53      	ldr	r3, [pc, #332]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800cf90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf92:	f003 0303 	and.w	r3, r3, #3
 800cf96:	2b03      	cmp	r3, #3
 800cf98:	d101      	bne.n	800cf9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e099      	b.n	800d0d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cf9e:	4b4f      	ldr	r3, [pc, #316]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4a4e      	ldr	r2, [pc, #312]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800cfa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfaa:	f7f6 fbe9 	bl	8003780 <HAL_GetTick>
 800cfae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cfb0:	e008      	b.n	800cfc4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cfb2:	f7f6 fbe5 	bl	8003780 <HAL_GetTick>
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	1ad3      	subs	r3, r2, r3
 800cfbc:	2b02      	cmp	r3, #2
 800cfbe:	d901      	bls.n	800cfc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	e086      	b.n	800d0d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cfc4:	4b45      	ldr	r3, [pc, #276]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1f0      	bne.n	800cfb2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cfd0:	4b42      	ldr	r3, [pc, #264]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800cfd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfd4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	051b      	lsls	r3, r3, #20
 800cfde:	493f      	ldr	r1, [pc, #252]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	628b      	str	r3, [r1, #40]	; 0x28
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	689b      	ldr	r3, [r3, #8]
 800cff2:	3b01      	subs	r3, #1
 800cff4:	025b      	lsls	r3, r3, #9
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	431a      	orrs	r2, r3
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	3b01      	subs	r3, #1
 800d000:	041b      	lsls	r3, r3, #16
 800d002:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d006:	431a      	orrs	r2, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	691b      	ldr	r3, [r3, #16]
 800d00c:	3b01      	subs	r3, #1
 800d00e:	061b      	lsls	r3, r3, #24
 800d010:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d014:	4931      	ldr	r1, [pc, #196]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d016:	4313      	orrs	r3, r2
 800d018:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d01a:	4b30      	ldr	r3, [pc, #192]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d01e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	695b      	ldr	r3, [r3, #20]
 800d026:	492d      	ldr	r1, [pc, #180]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d028:	4313      	orrs	r3, r2
 800d02a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d02c:	4b2b      	ldr	r3, [pc, #172]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d030:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	699b      	ldr	r3, [r3, #24]
 800d038:	4928      	ldr	r1, [pc, #160]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d03a:	4313      	orrs	r3, r2
 800d03c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d03e:	4b27      	ldr	r3, [pc, #156]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d042:	4a26      	ldr	r2, [pc, #152]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d048:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d04a:	4b24      	ldr	r3, [pc, #144]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d04c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d04e:	4b24      	ldr	r3, [pc, #144]	; (800d0e0 <RCCEx_PLL3_Config+0x160>)
 800d050:	4013      	ands	r3, r2
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	69d2      	ldr	r2, [r2, #28]
 800d056:	00d2      	lsls	r2, r2, #3
 800d058:	4920      	ldr	r1, [pc, #128]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d05a:	4313      	orrs	r3, r2
 800d05c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d05e:	4b1f      	ldr	r3, [pc, #124]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d062:	4a1e      	ldr	r2, [pc, #120]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d068:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d106      	bne.n	800d07e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d070:	4b1a      	ldr	r3, [pc, #104]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d074:	4a19      	ldr	r2, [pc, #100]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d076:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d07a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d07c:	e00f      	b.n	800d09e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	2b01      	cmp	r3, #1
 800d082:	d106      	bne.n	800d092 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d084:	4b15      	ldr	r3, [pc, #84]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d088:	4a14      	ldr	r2, [pc, #80]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d08a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d08e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d090:	e005      	b.n	800d09e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d092:	4b12      	ldr	r3, [pc, #72]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d096:	4a11      	ldr	r2, [pc, #68]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d098:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d09c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d09e:	4b0f      	ldr	r3, [pc, #60]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4a0e      	ldr	r2, [pc, #56]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d0a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0aa:	f7f6 fb69 	bl	8003780 <HAL_GetTick>
 800d0ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d0b0:	e008      	b.n	800d0c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d0b2:	f7f6 fb65 	bl	8003780 <HAL_GetTick>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	1ad3      	subs	r3, r2, r3
 800d0bc:	2b02      	cmp	r3, #2
 800d0be:	d901      	bls.n	800d0c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d0c0:	2303      	movs	r3, #3
 800d0c2:	e006      	b.n	800d0d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d0c4:	4b05      	ldr	r3, [pc, #20]	; (800d0dc <RCCEx_PLL3_Config+0x15c>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d0f0      	beq.n	800d0b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3710      	adds	r7, #16
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
 800d0da:	bf00      	nop
 800d0dc:	58024400 	.word	0x58024400
 800d0e0:	ffff0007 	.word	0xffff0007

0800d0e4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d071      	beq.n	800d1da <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d106      	bne.n	800d110 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f7f5 fe36 	bl	8002d7c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2202      	movs	r2, #2
 800d114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	f003 0310 	and.w	r3, r3, #16
 800d122:	2b10      	cmp	r3, #16
 800d124:	d050      	beq.n	800d1c8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	22ca      	movs	r2, #202	; 0xca
 800d12c:	625a      	str	r2, [r3, #36]	; 0x24
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2253      	movs	r2, #83	; 0x53
 800d134:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 fa4a 	bl	800d5d0 <RTC_EnterInitMode>
 800d13c:	4603      	mov	r3, r0
 800d13e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d140:	7bfb      	ldrb	r3, [r7, #15]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d124      	bne.n	800d190 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	6899      	ldr	r1, [r3, #8]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681a      	ldr	r2, [r3, #0]
 800d150:	4b24      	ldr	r3, [pc, #144]	; (800d1e4 <HAL_RTC_Init+0x100>)
 800d152:	400b      	ands	r3, r1
 800d154:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	6899      	ldr	r1, [r3, #8]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	685a      	ldr	r2, [r3, #4]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	691b      	ldr	r3, [r3, #16]
 800d164:	431a      	orrs	r2, r3
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	699b      	ldr	r3, [r3, #24]
 800d16a:	431a      	orrs	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	430a      	orrs	r2, r1
 800d172:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	689b      	ldr	r3, [r3, #8]
 800d178:	0419      	lsls	r1, r3, #16
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	68da      	ldr	r2, [r3, #12]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	430a      	orrs	r2, r1
 800d184:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f000 fa56 	bl	800d638 <RTC_ExitInitMode>
 800d18c:	4603      	mov	r3, r0
 800d18e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d190:	7bfb      	ldrb	r3, [r7, #15]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d113      	bne.n	800d1be <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f022 0203 	bic.w	r2, r2, #3
 800d1a4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	69da      	ldr	r2, [r3, #28]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	695b      	ldr	r3, [r3, #20]
 800d1b4:	431a      	orrs	r2, r3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	430a      	orrs	r2, r1
 800d1bc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	22ff      	movs	r2, #255	; 0xff
 800d1c4:	625a      	str	r2, [r3, #36]	; 0x24
 800d1c6:	e001      	b.n	800d1cc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d1cc:	7bfb      	ldrb	r3, [r7, #15]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d103      	bne.n	800d1da <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	ff8fffbf 	.word	0xff8fffbf

0800d1e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d1e8:	b590      	push	{r4, r7, lr}
 800d1ea:	b087      	sub	sp, #28
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	60f8      	str	r0, [r7, #12]
 800d1f0:	60b9      	str	r1, [r7, #8]
 800d1f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d101      	bne.n	800d202 <HAL_RTC_SetTime+0x1a>
 800d1fe:	2302      	movs	r3, #2
 800d200:	e089      	b.n	800d316 <HAL_RTC_SetTime+0x12e>
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2201      	movs	r2, #1
 800d206:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2202      	movs	r2, #2
 800d20e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	22ca      	movs	r2, #202	; 0xca
 800d218:	625a      	str	r2, [r3, #36]	; 0x24
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	2253      	movs	r2, #83	; 0x53
 800d220:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d222:	68f8      	ldr	r0, [r7, #12]
 800d224:	f000 f9d4 	bl	800d5d0 <RTC_EnterInitMode>
 800d228:	4603      	mov	r3, r0
 800d22a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d22c:	7cfb      	ldrb	r3, [r7, #19]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d161      	bne.n	800d2f6 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d126      	bne.n	800d286 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d242:	2b00      	cmp	r3, #0
 800d244:	d102      	bne.n	800d24c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	2200      	movs	r2, #0
 800d24a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	4618      	mov	r0, r3
 800d252:	f000 fa2f 	bl	800d6b4 <RTC_ByteToBcd2>
 800d256:	4603      	mov	r3, r0
 800d258:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	785b      	ldrb	r3, [r3, #1]
 800d25e:	4618      	mov	r0, r3
 800d260:	f000 fa28 	bl	800d6b4 <RTC_ByteToBcd2>
 800d264:	4603      	mov	r3, r0
 800d266:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d268:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	789b      	ldrb	r3, [r3, #2]
 800d26e:	4618      	mov	r0, r3
 800d270:	f000 fa20 	bl	800d6b4 <RTC_ByteToBcd2>
 800d274:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d276:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	78db      	ldrb	r3, [r3, #3]
 800d27e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d280:	4313      	orrs	r3, r2
 800d282:	617b      	str	r3, [r7, #20]
 800d284:	e018      	b.n	800d2b8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	689b      	ldr	r3, [r3, #8]
 800d28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d290:	2b00      	cmp	r3, #0
 800d292:	d102      	bne.n	800d29a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	2200      	movs	r2, #0
 800d298:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	785b      	ldrb	r3, [r3, #1]
 800d2a4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d2a6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d2a8:	68ba      	ldr	r2, [r7, #8]
 800d2aa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d2ac:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	78db      	ldrb	r3, [r3, #3]
 800d2b2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	6979      	ldr	r1, [r7, #20]
 800d2be:	4b18      	ldr	r3, [pc, #96]	; (800d320 <HAL_RTC_SetTime+0x138>)
 800d2c0:	400b      	ands	r3, r1
 800d2c2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	689a      	ldr	r2, [r3, #8]
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d2d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	6899      	ldr	r1, [r3, #8]
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	68da      	ldr	r2, [r3, #12]
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	691b      	ldr	r3, [r3, #16]
 800d2e2:	431a      	orrs	r2, r3
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	430a      	orrs	r2, r1
 800d2ea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f000 f9a3 	bl	800d638 <RTC_ExitInitMode>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	22ff      	movs	r2, #255	; 0xff
 800d2fc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d2fe:	7cfb      	ldrb	r3, [r7, #19]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d103      	bne.n	800d30c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2201      	movs	r2, #1
 800d308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2200      	movs	r2, #0
 800d310:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d314:	7cfb      	ldrb	r3, [r7, #19]
}
 800d316:	4618      	mov	r0, r3
 800d318:	371c      	adds	r7, #28
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd90      	pop	{r4, r7, pc}
 800d31e:	bf00      	nop
 800d320:	007f7f7f 	.word	0x007f7f7f

0800d324 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b086      	sub	sp, #24
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	691b      	ldr	r3, [r3, #16]
 800d340:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	4b22      	ldr	r3, [pc, #136]	; (800d3d8 <HAL_RTC_GetTime+0xb4>)
 800d350:	4013      	ands	r3, r2
 800d352:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	0c1b      	lsrs	r3, r3, #16
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	0a1b      	lsrs	r3, r3, #8
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	b2db      	uxtb	r3, r3
 800d378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d382:	697b      	ldr	r3, [r7, #20]
 800d384:	0d9b      	lsrs	r3, r3, #22
 800d386:	b2db      	uxtb	r3, r3
 800d388:	f003 0301 	and.w	r3, r3, #1
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d11a      	bne.n	800d3ce <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	4618      	mov	r0, r3
 800d39e:	f000 f9a9 	bl	800d6f4 <RTC_Bcd2ToByte>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	785b      	ldrb	r3, [r3, #1]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f000 f9a0 	bl	800d6f4 <RTC_Bcd2ToByte>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	789b      	ldrb	r3, [r3, #2]
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f000 f997 	bl	800d6f4 <RTC_Bcd2ToByte>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d3ce:	2300      	movs	r3, #0
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3718      	adds	r7, #24
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	007f7f7f 	.word	0x007f7f7f

0800d3dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d3dc:	b590      	push	{r4, r7, lr}
 800d3de:	b087      	sub	sp, #28
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d101      	bne.n	800d3f6 <HAL_RTC_SetDate+0x1a>
 800d3f2:	2302      	movs	r3, #2
 800d3f4:	e073      	b.n	800d4de <HAL_RTC_SetDate+0x102>
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2202      	movs	r2, #2
 800d402:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d10e      	bne.n	800d42a <HAL_RTC_SetDate+0x4e>
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	785b      	ldrb	r3, [r3, #1]
 800d410:	f003 0310 	and.w	r3, r3, #16
 800d414:	2b00      	cmp	r3, #0
 800d416:	d008      	beq.n	800d42a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	785b      	ldrb	r3, [r3, #1]
 800d41c:	f023 0310 	bic.w	r3, r3, #16
 800d420:	b2db      	uxtb	r3, r3
 800d422:	330a      	adds	r3, #10
 800d424:	b2da      	uxtb	r2, r3
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d11c      	bne.n	800d46a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	78db      	ldrb	r3, [r3, #3]
 800d434:	4618      	mov	r0, r3
 800d436:	f000 f93d 	bl	800d6b4 <RTC_ByteToBcd2>
 800d43a:	4603      	mov	r3, r0
 800d43c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	785b      	ldrb	r3, [r3, #1]
 800d442:	4618      	mov	r0, r3
 800d444:	f000 f936 	bl	800d6b4 <RTC_ByteToBcd2>
 800d448:	4603      	mov	r3, r0
 800d44a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d44c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	789b      	ldrb	r3, [r3, #2]
 800d452:	4618      	mov	r0, r3
 800d454:	f000 f92e 	bl	800d6b4 <RTC_ByteToBcd2>
 800d458:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d45a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d464:	4313      	orrs	r3, r2
 800d466:	617b      	str	r3, [r7, #20]
 800d468:	e00e      	b.n	800d488 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	78db      	ldrb	r3, [r3, #3]
 800d46e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	785b      	ldrb	r3, [r3, #1]
 800d474:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d476:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d478:	68ba      	ldr	r2, [r7, #8]
 800d47a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d47c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d484:	4313      	orrs	r3, r2
 800d486:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	22ca      	movs	r2, #202	; 0xca
 800d48e:	625a      	str	r2, [r3, #36]	; 0x24
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	2253      	movs	r2, #83	; 0x53
 800d496:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d498:	68f8      	ldr	r0, [r7, #12]
 800d49a:	f000 f899 	bl	800d5d0 <RTC_EnterInitMode>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d4a2:	7cfb      	ldrb	r3, [r7, #19]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d10a      	bne.n	800d4be <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	6979      	ldr	r1, [r7, #20]
 800d4ae:	4b0e      	ldr	r3, [pc, #56]	; (800d4e8 <HAL_RTC_SetDate+0x10c>)
 800d4b0:	400b      	ands	r3, r1
 800d4b2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f000 f8bf 	bl	800d638 <RTC_ExitInitMode>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	22ff      	movs	r2, #255	; 0xff
 800d4c4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d4c6:	7cfb      	ldrb	r3, [r7, #19]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d103      	bne.n	800d4d4 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d4dc:	7cfb      	ldrb	r3, [r7, #19]


}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	371c      	adds	r7, #28
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd90      	pop	{r4, r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	00ffff3f 	.word	0x00ffff3f

0800d4ec <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b086      	sub	sp, #24
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	685a      	ldr	r2, [r3, #4]
 800d4fe:	4b21      	ldr	r3, [pc, #132]	; (800d584 <HAL_RTC_GetDate+0x98>)
 800d500:	4013      	ands	r3, r2
 800d502:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	0c1b      	lsrs	r3, r3, #16
 800d508:	b2da      	uxtb	r2, r3
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	0a1b      	lsrs	r3, r3, #8
 800d512:	b2db      	uxtb	r3, r3
 800d514:	f003 031f 	and.w	r3, r3, #31
 800d518:	b2da      	uxtb	r2, r3
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	b2db      	uxtb	r3, r3
 800d522:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d526:	b2da      	uxtb	r2, r3
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	0b5b      	lsrs	r3, r3, #13
 800d530:	b2db      	uxtb	r3, r3
 800d532:	f003 0307 	and.w	r3, r3, #7
 800d536:	b2da      	uxtb	r2, r3
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d11a      	bne.n	800d578 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	78db      	ldrb	r3, [r3, #3]
 800d546:	4618      	mov	r0, r3
 800d548:	f000 f8d4 	bl	800d6f4 <RTC_Bcd2ToByte>
 800d54c:	4603      	mov	r3, r0
 800d54e:	461a      	mov	r2, r3
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	785b      	ldrb	r3, [r3, #1]
 800d558:	4618      	mov	r0, r3
 800d55a:	f000 f8cb 	bl	800d6f4 <RTC_Bcd2ToByte>
 800d55e:	4603      	mov	r3, r0
 800d560:	461a      	mov	r2, r3
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	789b      	ldrb	r3, [r3, #2]
 800d56a:	4618      	mov	r0, r3
 800d56c:	f000 f8c2 	bl	800d6f4 <RTC_Bcd2ToByte>
 800d570:	4603      	mov	r3, r0
 800d572:	461a      	mov	r2, r3
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d578:	2300      	movs	r3, #0
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3718      	adds	r7, #24
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	00ffff3f 	.word	0x00ffff3f

0800d588 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b084      	sub	sp, #16
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a0d      	ldr	r2, [pc, #52]	; (800d5cc <HAL_RTC_WaitForSynchro+0x44>)
 800d596:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d598:	f7f6 f8f2 	bl	8003780 <HAL_GetTick>
 800d59c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d59e:	e009      	b.n	800d5b4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d5a0:	f7f6 f8ee 	bl	8003780 <HAL_GetTick>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	1ad3      	subs	r3, r2, r3
 800d5aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d5ae:	d901      	bls.n	800d5b4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d5b0:	2303      	movs	r3, #3
 800d5b2:	e007      	b.n	800d5c4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	f003 0320 	and.w	r3, r3, #32
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d0ee      	beq.n	800d5a0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	0003ff5f 	.word	0x0003ff5f

0800d5d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	68db      	ldr	r3, [r3, #12]
 800d5e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d120      	bne.n	800d62c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5f2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d5f4:	f7f6 f8c4 	bl	8003780 <HAL_GetTick>
 800d5f8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d5fa:	e00d      	b.n	800d618 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d5fc:	f7f6 f8c0 	bl	8003780 <HAL_GetTick>
 800d600:	4602      	mov	r2, r0
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	1ad3      	subs	r3, r2, r3
 800d606:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d60a:	d905      	bls.n	800d618 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d60c:	2303      	movs	r3, #3
 800d60e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2203      	movs	r2, #3
 800d614:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d622:	2b00      	cmp	r3, #0
 800d624:	d102      	bne.n	800d62c <RTC_EnterInitMode+0x5c>
 800d626:	7bfb      	ldrb	r3, [r7, #15]
 800d628:	2b03      	cmp	r3, #3
 800d62a:	d1e7      	bne.n	800d5fc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800d62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3710      	adds	r7, #16
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
	...

0800d638 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b084      	sub	sp, #16
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d640:	2300      	movs	r3, #0
 800d642:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d644:	4b1a      	ldr	r3, [pc, #104]	; (800d6b0 <RTC_ExitInitMode+0x78>)
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	4a19      	ldr	r2, [pc, #100]	; (800d6b0 <RTC_ExitInitMode+0x78>)
 800d64a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d64e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d650:	4b17      	ldr	r3, [pc, #92]	; (800d6b0 <RTC_ExitInitMode+0x78>)
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	f003 0320 	and.w	r3, r3, #32
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d10c      	bne.n	800d676 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f7ff ff93 	bl	800d588 <HAL_RTC_WaitForSynchro>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d01e      	beq.n	800d6a6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2203      	movs	r2, #3
 800d66c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d670:	2303      	movs	r3, #3
 800d672:	73fb      	strb	r3, [r7, #15]
 800d674:	e017      	b.n	800d6a6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d676:	4b0e      	ldr	r3, [pc, #56]	; (800d6b0 <RTC_ExitInitMode+0x78>)
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	4a0d      	ldr	r2, [pc, #52]	; (800d6b0 <RTC_ExitInitMode+0x78>)
 800d67c:	f023 0320 	bic.w	r3, r3, #32
 800d680:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f7ff ff80 	bl	800d588 <HAL_RTC_WaitForSynchro>
 800d688:	4603      	mov	r3, r0
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d005      	beq.n	800d69a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2203      	movs	r2, #3
 800d692:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d696:	2303      	movs	r3, #3
 800d698:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d69a:	4b05      	ldr	r3, [pc, #20]	; (800d6b0 <RTC_ExitInitMode+0x78>)
 800d69c:	689b      	ldr	r3, [r3, #8]
 800d69e:	4a04      	ldr	r2, [pc, #16]	; (800d6b0 <RTC_ExitInitMode+0x78>)
 800d6a0:	f043 0320 	orr.w	r3, r3, #32
 800d6a4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3710      	adds	r7, #16
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	58004000 	.word	0x58004000

0800d6b4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b085      	sub	sp, #20
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800d6c2:	79fb      	ldrb	r3, [r7, #7]
 800d6c4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800d6c6:	e005      	b.n	800d6d4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800d6ce:	7afb      	ldrb	r3, [r7, #11]
 800d6d0:	3b0a      	subs	r3, #10
 800d6d2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800d6d4:	7afb      	ldrb	r3, [r7, #11]
 800d6d6:	2b09      	cmp	r3, #9
 800d6d8:	d8f6      	bhi.n	800d6c8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	011b      	lsls	r3, r3, #4
 800d6e0:	b2da      	uxtb	r2, r3
 800d6e2:	7afb      	ldrb	r3, [r7, #11]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	b2db      	uxtb	r3, r3
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3714      	adds	r7, #20
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b085      	sub	sp, #20
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800d6fe:	79fb      	ldrb	r3, [r7, #7]
 800d700:	091b      	lsrs	r3, r3, #4
 800d702:	b2db      	uxtb	r3, r3
 800d704:	461a      	mov	r2, r3
 800d706:	0092      	lsls	r2, r2, #2
 800d708:	4413      	add	r3, r2
 800d70a:	005b      	lsls	r3, r3, #1
 800d70c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800d70e:	79fb      	ldrb	r3, [r7, #7]
 800d710:	f003 030f 	and.w	r3, r3, #15
 800d714:	b2da      	uxtb	r2, r3
 800d716:	7bfb      	ldrb	r3, [r7, #15]
 800d718:	4413      	add	r3, r2
 800d71a:	b2db      	uxtb	r3, r3
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3714      	adds	r7, #20
 800d720:	46bd      	mov	sp, r7
 800d722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d726:	4770      	bx	lr

0800d728 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d101      	bne.n	800d73a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d736:	2301      	movs	r3, #1
 800d738:	e10f      	b.n	800d95a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2200      	movs	r2, #0
 800d73e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a87      	ldr	r2, [pc, #540]	; (800d964 <HAL_SPI_Init+0x23c>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d00f      	beq.n	800d76a <HAL_SPI_Init+0x42>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4a86      	ldr	r2, [pc, #536]	; (800d968 <HAL_SPI_Init+0x240>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d00a      	beq.n	800d76a <HAL_SPI_Init+0x42>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a84      	ldr	r2, [pc, #528]	; (800d96c <HAL_SPI_Init+0x244>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d005      	beq.n	800d76a <HAL_SPI_Init+0x42>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	68db      	ldr	r3, [r3, #12]
 800d762:	2b0f      	cmp	r3, #15
 800d764:	d901      	bls.n	800d76a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d766:	2301      	movs	r3, #1
 800d768:	e0f7      	b.n	800d95a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 fc12 	bl	800df94 <SPI_GetPacketSize>
 800d770:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a7b      	ldr	r2, [pc, #492]	; (800d964 <HAL_SPI_Init+0x23c>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d00c      	beq.n	800d796 <HAL_SPI_Init+0x6e>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a79      	ldr	r2, [pc, #484]	; (800d968 <HAL_SPI_Init+0x240>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d007      	beq.n	800d796 <HAL_SPI_Init+0x6e>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a78      	ldr	r2, [pc, #480]	; (800d96c <HAL_SPI_Init+0x244>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d002      	beq.n	800d796 <HAL_SPI_Init+0x6e>
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2b08      	cmp	r3, #8
 800d794:	d811      	bhi.n	800d7ba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d79a:	4a72      	ldr	r2, [pc, #456]	; (800d964 <HAL_SPI_Init+0x23c>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d009      	beq.n	800d7b4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a70      	ldr	r2, [pc, #448]	; (800d968 <HAL_SPI_Init+0x240>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d004      	beq.n	800d7b4 <HAL_SPI_Init+0x8c>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4a6f      	ldr	r2, [pc, #444]	; (800d96c <HAL_SPI_Init+0x244>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d104      	bne.n	800d7be <HAL_SPI_Init+0x96>
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2b10      	cmp	r3, #16
 800d7b8:	d901      	bls.n	800d7be <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	e0cd      	b.n	800d95a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d106      	bne.n	800d7d8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7f5 fb04 	bl	8002de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2202      	movs	r2, #2
 800d7dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	681a      	ldr	r2, [r3, #0]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f022 0201 	bic.w	r2, r2, #1
 800d7ee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d7fa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	699b      	ldr	r3, [r3, #24]
 800d800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d804:	d119      	bne.n	800d83a <HAL_SPI_Init+0x112>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d80e:	d103      	bne.n	800d818 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d814:	2b00      	cmp	r3, #0
 800d816:	d008      	beq.n	800d82a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d10c      	bne.n	800d83a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d824:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d828:	d107      	bne.n	800d83a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d838:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00f      	beq.n	800d866 <HAL_SPI_Init+0x13e>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	2b06      	cmp	r3, #6
 800d84c:	d90b      	bls.n	800d866 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	430a      	orrs	r2, r1
 800d862:	601a      	str	r2, [r3, #0]
 800d864:	e007      	b.n	800d876 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d874:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	69da      	ldr	r2, [r3, #28]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d87e:	431a      	orrs	r2, r3
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	431a      	orrs	r2, r3
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d888:	ea42 0103 	orr.w	r1, r2, r3
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	68da      	ldr	r2, [r3, #12]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	430a      	orrs	r2, r1
 800d896:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a0:	431a      	orrs	r2, r3
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a6:	431a      	orrs	r2, r3
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	699b      	ldr	r3, [r3, #24]
 800d8ac:	431a      	orrs	r2, r3
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	691b      	ldr	r3, [r3, #16]
 800d8b2:	431a      	orrs	r2, r3
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	695b      	ldr	r3, [r3, #20]
 800d8b8:	431a      	orrs	r2, r3
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6a1b      	ldr	r3, [r3, #32]
 800d8be:	431a      	orrs	r2, r3
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	431a      	orrs	r2, r3
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8ca:	431a      	orrs	r2, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	689b      	ldr	r3, [r3, #8]
 800d8d0:	431a      	orrs	r2, r3
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8d6:	ea42 0103 	orr.w	r1, r2, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	430a      	orrs	r2, r1
 800d8e4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d113      	bne.n	800d916 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	689b      	ldr	r3, [r3, #8]
 800d8f4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d900:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	689b      	ldr	r3, [r3, #8]
 800d908:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d914:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f022 0201 	bic.w	r2, r2, #1
 800d924:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d00a      	beq.n	800d948 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	68db      	ldr	r3, [r3, #12]
 800d938:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	430a      	orrs	r2, r1
 800d946:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2201      	movs	r2, #1
 800d954:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d958:	2300      	movs	r3, #0
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3710      	adds	r7, #16
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	40013000 	.word	0x40013000
 800d968:	40003800 	.word	0x40003800
 800d96c:	40003c00 	.word	0x40003c00

0800d970 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b088      	sub	sp, #32
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	603b      	str	r3, [r7, #0]
 800d97c:	4613      	mov	r3, r2
 800d97e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d984:	095b      	lsrs	r3, r3, #5
 800d986:	b29b      	uxth	r3, r3
 800d988:	3301      	adds	r3, #1
 800d98a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	3330      	adds	r3, #48	; 0x30
 800d992:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d994:	f7f5 fef4 	bl	8003780 <HAL_GetTick>
 800d998:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	2b01      	cmp	r3, #1
 800d9a4:	d001      	beq.n	800d9aa <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800d9a6:	2302      	movs	r3, #2
 800d9a8:	e250      	b.n	800de4c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d002      	beq.n	800d9b6 <HAL_SPI_Receive+0x46>
 800d9b0:	88fb      	ldrh	r3, [r7, #6]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d101      	bne.n	800d9ba <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e248      	b.n	800de4c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d101      	bne.n	800d9c8 <HAL_SPI_Receive+0x58>
 800d9c4:	2302      	movs	r3, #2
 800d9c6:	e241      	b.n	800de4c <HAL_SPI_Receive+0x4dc>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2204      	movs	r2, #4
 800d9d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	68ba      	ldr	r2, [r7, #8]
 800d9e4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	88fa      	ldrh	r2, [r7, #6]
 800d9ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	88fa      	ldrh	r2, [r7, #6]
 800d9f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2200      	movs	r2, #0
 800da08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2200      	movs	r2, #0
 800da10:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2200      	movs	r2, #0
 800da16:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800da20:	d108      	bne.n	800da34 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800da30:	601a      	str	r2, [r3, #0]
 800da32:	e009      	b.n	800da48 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800da46:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	685a      	ldr	r2, [r3, #4]
 800da4e:	4b95      	ldr	r3, [pc, #596]	; (800dca4 <HAL_SPI_Receive+0x334>)
 800da50:	4013      	ands	r3, r2
 800da52:	88f9      	ldrh	r1, [r7, #6]
 800da54:	68fa      	ldr	r2, [r7, #12]
 800da56:	6812      	ldr	r2, [r2, #0]
 800da58:	430b      	orrs	r3, r1
 800da5a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	681a      	ldr	r2, [r3, #0]
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f042 0201 	orr.w	r2, r2, #1
 800da6a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da74:	d107      	bne.n	800da86 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da84:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	68db      	ldr	r3, [r3, #12]
 800da8a:	2b0f      	cmp	r3, #15
 800da8c:	d96c      	bls.n	800db68 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800da8e:	e064      	b.n	800db5a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	695b      	ldr	r3, [r3, #20]
 800da96:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	695b      	ldr	r3, [r3, #20]
 800da9e:	f003 0301 	and.w	r3, r3, #1
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d114      	bne.n	800dad0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dab0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dab6:	1d1a      	adds	r2, r3, #4
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	3b01      	subs	r3, #1
 800dac6:	b29a      	uxth	r2, r3
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dace:	e044      	b.n	800db5a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	8bfa      	ldrh	r2, [r7, #30]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d919      	bls.n	800db12 <HAL_SPI_Receive+0x1a2>
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d014      	beq.n	800db12 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daf0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800daf2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daf8:	1d1a      	adds	r2, r3, #4
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db04:	b29b      	uxth	r3, r3
 800db06:	3b01      	subs	r3, #1
 800db08:	b29a      	uxth	r2, r3
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800db10:	e023      	b.n	800db5a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db12:	f7f5 fe35 	bl	8003780 <HAL_GetTick>
 800db16:	4602      	mov	r2, r0
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	1ad3      	subs	r3, r2, r3
 800db1c:	683a      	ldr	r2, [r7, #0]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d803      	bhi.n	800db2a <HAL_SPI_Receive+0x1ba>
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db28:	d102      	bne.n	800db30 <HAL_SPI_Receive+0x1c0>
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d114      	bne.n	800db5a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f000 f98f 	bl	800de54 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2201      	movs	r2, #1
 800db4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2200      	movs	r2, #0
 800db52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800db56:	2303      	movs	r3, #3
 800db58:	e178      	b.n	800de4c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db60:	b29b      	uxth	r3, r3
 800db62:	2b00      	cmp	r3, #0
 800db64:	d194      	bne.n	800da90 <HAL_SPI_Receive+0x120>
 800db66:	e15e      	b.n	800de26 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	2b07      	cmp	r3, #7
 800db6e:	f240 8153 	bls.w	800de18 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800db72:	e08f      	b.n	800dc94 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	695b      	ldr	r3, [r3, #20]
 800db7a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	695b      	ldr	r3, [r3, #20]
 800db82:	f003 0301 	and.w	r3, r3, #1
 800db86:	2b01      	cmp	r3, #1
 800db88:	d114      	bne.n	800dbb4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db8e:	69ba      	ldr	r2, [r7, #24]
 800db90:	8812      	ldrh	r2, [r2, #0]
 800db92:	b292      	uxth	r2, r2
 800db94:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db9a:	1c9a      	adds	r2, r3, #2
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	3b01      	subs	r3, #1
 800dbaa:	b29a      	uxth	r2, r3
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dbb2:	e06f      	b.n	800dc94 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	8bfa      	ldrh	r2, [r7, #30]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d924      	bls.n	800dc0c <HAL_SPI_Receive+0x29c>
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d01f      	beq.n	800dc0c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbd0:	69ba      	ldr	r2, [r7, #24]
 800dbd2:	8812      	ldrh	r2, [r2, #0]
 800dbd4:	b292      	uxth	r2, r2
 800dbd6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbdc:	1c9a      	adds	r2, r3, #2
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbe6:	69ba      	ldr	r2, [r7, #24]
 800dbe8:	8812      	ldrh	r2, [r2, #0]
 800dbea:	b292      	uxth	r2, r2
 800dbec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbf2:	1c9a      	adds	r2, r3, #2
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbfe:	b29b      	uxth	r3, r3
 800dc00:	3b02      	subs	r3, #2
 800dc02:	b29a      	uxth	r2, r3
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dc0a:	e043      	b.n	800dc94 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	2b01      	cmp	r3, #1
 800dc16:	d119      	bne.n	800dc4c <HAL_SPI_Receive+0x2dc>
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d014      	beq.n	800dc4c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc26:	69ba      	ldr	r2, [r7, #24]
 800dc28:	8812      	ldrh	r2, [r2, #0]
 800dc2a:	b292      	uxth	r2, r2
 800dc2c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc32:	1c9a      	adds	r2, r3, #2
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	3b01      	subs	r3, #1
 800dc42:	b29a      	uxth	r2, r3
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dc4a:	e023      	b.n	800dc94 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc4c:	f7f5 fd98 	bl	8003780 <HAL_GetTick>
 800dc50:	4602      	mov	r2, r0
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	1ad3      	subs	r3, r2, r3
 800dc56:	683a      	ldr	r2, [r7, #0]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d803      	bhi.n	800dc64 <HAL_SPI_Receive+0x2f4>
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc62:	d102      	bne.n	800dc6a <HAL_SPI_Receive+0x2fa>
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d114      	bne.n	800dc94 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dc6a:	68f8      	ldr	r0, [r7, #12]
 800dc6c:	f000 f8f2 	bl	800de54 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2201      	movs	r2, #1
 800dc84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dc90:	2303      	movs	r3, #3
 800dc92:	e0db      	b.n	800de4c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	f47f af69 	bne.w	800db74 <HAL_SPI_Receive+0x204>
 800dca2:	e0c0      	b.n	800de26 <HAL_SPI_Receive+0x4b6>
 800dca4:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	695b      	ldr	r3, [r3, #20]
 800dcae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	695b      	ldr	r3, [r3, #20]
 800dcb6:	f003 0301 	and.w	r3, r3, #1
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	d117      	bne.n	800dcee <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcca:	7812      	ldrb	r2, [r2, #0]
 800dccc:	b2d2      	uxtb	r2, r2
 800dcce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcd4:	1c5a      	adds	r2, r3, #1
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	3b01      	subs	r3, #1
 800dce4:	b29a      	uxth	r2, r3
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dcec:	e094      	b.n	800de18 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	8bfa      	ldrh	r2, [r7, #30]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d946      	bls.n	800dd8a <HAL_SPI_Receive+0x41a>
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d041      	beq.n	800dd8a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd12:	7812      	ldrb	r2, [r2, #0]
 800dd14:	b2d2      	uxtb	r2, r2
 800dd16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd1c:	1c5a      	adds	r2, r3, #1
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd2e:	7812      	ldrb	r2, [r2, #0]
 800dd30:	b2d2      	uxtb	r2, r2
 800dd32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd38:	1c5a      	adds	r2, r3, #1
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd4a:	7812      	ldrb	r2, [r2, #0]
 800dd4c:	b2d2      	uxtb	r2, r2
 800dd4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd54:	1c5a      	adds	r2, r3, #1
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd66:	7812      	ldrb	r2, [r2, #0]
 800dd68:	b2d2      	uxtb	r2, r2
 800dd6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd70:	1c5a      	adds	r2, r3, #1
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	3b04      	subs	r3, #4
 800dd80:	b29a      	uxth	r2, r3
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dd88:	e046      	b.n	800de18 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	2b03      	cmp	r3, #3
 800dd94:	d81c      	bhi.n	800ddd0 <HAL_SPI_Receive+0x460>
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d017      	beq.n	800ddd0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddac:	7812      	ldrb	r2, [r2, #0]
 800ddae:	b2d2      	uxtb	r2, r2
 800ddb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddb6:	1c5a      	adds	r2, r3, #1
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	3b01      	subs	r3, #1
 800ddc6:	b29a      	uxth	r2, r3
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ddce:	e023      	b.n	800de18 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ddd0:	f7f5 fcd6 	bl	8003780 <HAL_GetTick>
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	1ad3      	subs	r3, r2, r3
 800ddda:	683a      	ldr	r2, [r7, #0]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d803      	bhi.n	800dde8 <HAL_SPI_Receive+0x478>
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dde6:	d102      	bne.n	800ddee <HAL_SPI_Receive+0x47e>
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d114      	bne.n	800de18 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ddee:	68f8      	ldr	r0, [r7, #12]
 800ddf0:	f000 f830 	bl	800de54 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2201      	movs	r2, #1
 800de08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2200      	movs	r2, #0
 800de10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800de14:	2303      	movs	r3, #3
 800de16:	e019      	b.n	800de4c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de1e:	b29b      	uxth	r3, r3
 800de20:	2b00      	cmp	r3, #0
 800de22:	f47f af41 	bne.w	800dca8 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800de26:	68f8      	ldr	r0, [r7, #12]
 800de28:	f000 f814 	bl	800de54 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2201      	movs	r2, #1
 800de30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2200      	movs	r2, #0
 800de38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de42:	2b00      	cmp	r3, #0
 800de44:	d001      	beq.n	800de4a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800de46:	2301      	movs	r3, #1
 800de48:	e000      	b.n	800de4c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800de4a:	2300      	movs	r3, #0
  }
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	3720      	adds	r7, #32
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800de54:	b480      	push	{r7}
 800de56:	b085      	sub	sp, #20
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	695b      	ldr	r3, [r3, #20]
 800de62:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	699a      	ldr	r2, [r3, #24]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f042 0208 	orr.w	r2, r2, #8
 800de72:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	699a      	ldr	r2, [r3, #24]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f042 0210 	orr.w	r2, r2, #16
 800de82:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	681a      	ldr	r2, [r3, #0]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f022 0201 	bic.w	r2, r2, #1
 800de92:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	6919      	ldr	r1, [r3, #16]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	4b3c      	ldr	r3, [pc, #240]	; (800df90 <SPI_CloseTransfer+0x13c>)
 800dea0:	400b      	ands	r3, r1
 800dea2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	689a      	ldr	r2, [r3, #8]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800deb2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800deba:	b2db      	uxtb	r3, r3
 800debc:	2b04      	cmp	r3, #4
 800debe:	d014      	beq.n	800deea <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f003 0320 	and.w	r3, r3, #32
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d00f      	beq.n	800deea <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ded0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	699a      	ldr	r2, [r3, #24]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f042 0220 	orr.w	r2, r2, #32
 800dee8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800def0:	b2db      	uxtb	r3, r3
 800def2:	2b03      	cmp	r3, #3
 800def4:	d014      	beq.n	800df20 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800defc:	2b00      	cmp	r3, #0
 800defe:	d00f      	beq.n	800df20 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df06:	f043 0204 	orr.w	r2, r3, #4
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	699a      	ldr	r2, [r3, #24]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800df1e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df26:	2b00      	cmp	r3, #0
 800df28:	d00f      	beq.n	800df4a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df30:	f043 0201 	orr.w	r2, r3, #1
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	699a      	ldr	r2, [r3, #24]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df48:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df50:	2b00      	cmp	r3, #0
 800df52:	d00f      	beq.n	800df74 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df5a:	f043 0208 	orr.w	r2, r3, #8
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	699a      	ldr	r2, [r3, #24]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800df72:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2200      	movs	r2, #0
 800df78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2200      	movs	r2, #0
 800df80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800df84:	bf00      	nop
 800df86:	3714      	adds	r7, #20
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr
 800df90:	fffffc90 	.word	0xfffffc90

0800df94 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800df94:	b480      	push	{r7}
 800df96:	b085      	sub	sp, #20
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfa0:	095b      	lsrs	r3, r3, #5
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	68db      	ldr	r3, [r3, #12]
 800dfaa:	3301      	adds	r3, #1
 800dfac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	3307      	adds	r3, #7
 800dfb2:	08db      	lsrs	r3, r3, #3
 800dfb4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	68fa      	ldr	r2, [r7, #12]
 800dfba:	fb02 f303 	mul.w	r3, r2, r3
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3714      	adds	r7, #20
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr

0800dfca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dfca:	b580      	push	{r7, lr}
 800dfcc:	b082      	sub	sp, #8
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d101      	bne.n	800dfdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	e049      	b.n	800e070 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dfe2:	b2db      	uxtb	r3, r3
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d106      	bne.n	800dff6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2200      	movs	r2, #0
 800dfec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f7f4 ffab 	bl	8002f4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2202      	movs	r2, #2
 800dffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681a      	ldr	r2, [r3, #0]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	3304      	adds	r3, #4
 800e006:	4619      	mov	r1, r3
 800e008:	4610      	mov	r0, r2
 800e00a:	f000 ff41 	bl	800ee90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2201      	movs	r2, #1
 800e012:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2201      	movs	r2, #1
 800e01a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2201      	movs	r2, #1
 800e022:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2201      	movs	r2, #1
 800e02a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2201      	movs	r2, #1
 800e032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2201      	movs	r2, #1
 800e03a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2201      	movs	r2, #1
 800e042:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2201      	movs	r2, #1
 800e04a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2201      	movs	r2, #1
 800e052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2201      	movs	r2, #1
 800e05a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2201      	movs	r2, #1
 800e062:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2201      	movs	r2, #1
 800e06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e06e:	2300      	movs	r3, #0
}
 800e070:	4618      	mov	r0, r3
 800e072:	3708      	adds	r7, #8
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e078:	b480      	push	{r7}
 800e07a:	b085      	sub	sp, #20
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e086:	b2db      	uxtb	r3, r3
 800e088:	2b01      	cmp	r3, #1
 800e08a:	d001      	beq.n	800e090 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e08c:	2301      	movs	r3, #1
 800e08e:	e04c      	b.n	800e12a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2202      	movs	r2, #2
 800e094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4a26      	ldr	r2, [pc, #152]	; (800e138 <HAL_TIM_Base_Start+0xc0>)
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	d022      	beq.n	800e0e8 <HAL_TIM_Base_Start+0x70>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0aa:	d01d      	beq.n	800e0e8 <HAL_TIM_Base_Start+0x70>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4a22      	ldr	r2, [pc, #136]	; (800e13c <HAL_TIM_Base_Start+0xc4>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d018      	beq.n	800e0e8 <HAL_TIM_Base_Start+0x70>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	4a21      	ldr	r2, [pc, #132]	; (800e140 <HAL_TIM_Base_Start+0xc8>)
 800e0bc:	4293      	cmp	r3, r2
 800e0be:	d013      	beq.n	800e0e8 <HAL_TIM_Base_Start+0x70>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4a1f      	ldr	r2, [pc, #124]	; (800e144 <HAL_TIM_Base_Start+0xcc>)
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d00e      	beq.n	800e0e8 <HAL_TIM_Base_Start+0x70>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	4a1e      	ldr	r2, [pc, #120]	; (800e148 <HAL_TIM_Base_Start+0xd0>)
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d009      	beq.n	800e0e8 <HAL_TIM_Base_Start+0x70>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4a1c      	ldr	r2, [pc, #112]	; (800e14c <HAL_TIM_Base_Start+0xd4>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d004      	beq.n	800e0e8 <HAL_TIM_Base_Start+0x70>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	4a1b      	ldr	r2, [pc, #108]	; (800e150 <HAL_TIM_Base_Start+0xd8>)
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d115      	bne.n	800e114 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	689a      	ldr	r2, [r3, #8]
 800e0ee:	4b19      	ldr	r3, [pc, #100]	; (800e154 <HAL_TIM_Base_Start+0xdc>)
 800e0f0:	4013      	ands	r3, r2
 800e0f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2b06      	cmp	r3, #6
 800e0f8:	d015      	beq.n	800e126 <HAL_TIM_Base_Start+0xae>
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e100:	d011      	beq.n	800e126 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f042 0201 	orr.w	r2, r2, #1
 800e110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e112:	e008      	b.n	800e126 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f042 0201 	orr.w	r2, r2, #1
 800e122:	601a      	str	r2, [r3, #0]
 800e124:	e000      	b.n	800e128 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e126:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e128:	2300      	movs	r3, #0
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3714      	adds	r7, #20
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	40010000 	.word	0x40010000
 800e13c:	40000400 	.word	0x40000400
 800e140:	40000800 	.word	0x40000800
 800e144:	40000c00 	.word	0x40000c00
 800e148:	40010400 	.word	0x40010400
 800e14c:	40001800 	.word	0x40001800
 800e150:	40014000 	.word	0x40014000
 800e154:	00010007 	.word	0x00010007

0800e158 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800e158:	b480      	push	{r7}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	6a1a      	ldr	r2, [r3, #32]
 800e166:	f241 1311 	movw	r3, #4369	; 0x1111
 800e16a:	4013      	ands	r3, r2
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d10f      	bne.n	800e190 <HAL_TIM_Base_Stop+0x38>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	6a1a      	ldr	r2, [r3, #32]
 800e176:	f240 4344 	movw	r3, #1092	; 0x444
 800e17a:	4013      	ands	r3, r2
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d107      	bne.n	800e190 <HAL_TIM_Base_Stop+0x38>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	681a      	ldr	r2, [r3, #0]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	f022 0201 	bic.w	r2, r2, #1
 800e18e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2201      	movs	r2, #1
 800e194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e198:	2300      	movs	r3, #0
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	370c      	adds	r7, #12
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
	...

0800e1a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b085      	sub	sp, #20
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d001      	beq.n	800e1c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	e054      	b.n	800e26a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2202      	movs	r2, #2
 800e1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	68da      	ldr	r2, [r3, #12]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f042 0201 	orr.w	r2, r2, #1
 800e1d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4a26      	ldr	r2, [pc, #152]	; (800e278 <HAL_TIM_Base_Start_IT+0xd0>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d022      	beq.n	800e228 <HAL_TIM_Base_Start_IT+0x80>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1ea:	d01d      	beq.n	800e228 <HAL_TIM_Base_Start_IT+0x80>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4a22      	ldr	r2, [pc, #136]	; (800e27c <HAL_TIM_Base_Start_IT+0xd4>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d018      	beq.n	800e228 <HAL_TIM_Base_Start_IT+0x80>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	4a21      	ldr	r2, [pc, #132]	; (800e280 <HAL_TIM_Base_Start_IT+0xd8>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d013      	beq.n	800e228 <HAL_TIM_Base_Start_IT+0x80>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4a1f      	ldr	r2, [pc, #124]	; (800e284 <HAL_TIM_Base_Start_IT+0xdc>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d00e      	beq.n	800e228 <HAL_TIM_Base_Start_IT+0x80>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	4a1e      	ldr	r2, [pc, #120]	; (800e288 <HAL_TIM_Base_Start_IT+0xe0>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d009      	beq.n	800e228 <HAL_TIM_Base_Start_IT+0x80>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4a1c      	ldr	r2, [pc, #112]	; (800e28c <HAL_TIM_Base_Start_IT+0xe4>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d004      	beq.n	800e228 <HAL_TIM_Base_Start_IT+0x80>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	4a1b      	ldr	r2, [pc, #108]	; (800e290 <HAL_TIM_Base_Start_IT+0xe8>)
 800e224:	4293      	cmp	r3, r2
 800e226:	d115      	bne.n	800e254 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	689a      	ldr	r2, [r3, #8]
 800e22e:	4b19      	ldr	r3, [pc, #100]	; (800e294 <HAL_TIM_Base_Start_IT+0xec>)
 800e230:	4013      	ands	r3, r2
 800e232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2b06      	cmp	r3, #6
 800e238:	d015      	beq.n	800e266 <HAL_TIM_Base_Start_IT+0xbe>
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e240:	d011      	beq.n	800e266 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f042 0201 	orr.w	r2, r2, #1
 800e250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e252:	e008      	b.n	800e266 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f042 0201 	orr.w	r2, r2, #1
 800e262:	601a      	str	r2, [r3, #0]
 800e264:	e000      	b.n	800e268 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e266:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3714      	adds	r7, #20
 800e26e:	46bd      	mov	sp, r7
 800e270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e274:	4770      	bx	lr
 800e276:	bf00      	nop
 800e278:	40010000 	.word	0x40010000
 800e27c:	40000400 	.word	0x40000400
 800e280:	40000800 	.word	0x40000800
 800e284:	40000c00 	.word	0x40000c00
 800e288:	40010400 	.word	0x40010400
 800e28c:	40001800 	.word	0x40001800
 800e290:	40014000 	.word	0x40014000
 800e294:	00010007 	.word	0x00010007

0800e298 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b084      	sub	sp, #16
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d109      	bne.n	800e2c0 <HAL_TIM_OC_Start_IT+0x28>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e2b2:	b2db      	uxtb	r3, r3
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	bf14      	ite	ne
 800e2b8:	2301      	movne	r3, #1
 800e2ba:	2300      	moveq	r3, #0
 800e2bc:	b2db      	uxtb	r3, r3
 800e2be:	e03c      	b.n	800e33a <HAL_TIM_OC_Start_IT+0xa2>
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	2b04      	cmp	r3, #4
 800e2c4:	d109      	bne.n	800e2da <HAL_TIM_OC_Start_IT+0x42>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e2cc:	b2db      	uxtb	r3, r3
 800e2ce:	2b01      	cmp	r3, #1
 800e2d0:	bf14      	ite	ne
 800e2d2:	2301      	movne	r3, #1
 800e2d4:	2300      	moveq	r3, #0
 800e2d6:	b2db      	uxtb	r3, r3
 800e2d8:	e02f      	b.n	800e33a <HAL_TIM_OC_Start_IT+0xa2>
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	2b08      	cmp	r3, #8
 800e2de:	d109      	bne.n	800e2f4 <HAL_TIM_OC_Start_IT+0x5c>
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	bf14      	ite	ne
 800e2ec:	2301      	movne	r3, #1
 800e2ee:	2300      	moveq	r3, #0
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	e022      	b.n	800e33a <HAL_TIM_OC_Start_IT+0xa2>
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	2b0c      	cmp	r3, #12
 800e2f8:	d109      	bne.n	800e30e <HAL_TIM_OC_Start_IT+0x76>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e300:	b2db      	uxtb	r3, r3
 800e302:	2b01      	cmp	r3, #1
 800e304:	bf14      	ite	ne
 800e306:	2301      	movne	r3, #1
 800e308:	2300      	moveq	r3, #0
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	e015      	b.n	800e33a <HAL_TIM_OC_Start_IT+0xa2>
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	2b10      	cmp	r3, #16
 800e312:	d109      	bne.n	800e328 <HAL_TIM_OC_Start_IT+0x90>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	bf14      	ite	ne
 800e320:	2301      	movne	r3, #1
 800e322:	2300      	moveq	r3, #0
 800e324:	b2db      	uxtb	r3, r3
 800e326:	e008      	b.n	800e33a <HAL_TIM_OC_Start_IT+0xa2>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e32e:	b2db      	uxtb	r3, r3
 800e330:	2b01      	cmp	r3, #1
 800e332:	bf14      	ite	ne
 800e334:	2301      	movne	r3, #1
 800e336:	2300      	moveq	r3, #0
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d001      	beq.n	800e342 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e33e:	2301      	movs	r3, #1
 800e340:	e0ec      	b.n	800e51c <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d104      	bne.n	800e352 <HAL_TIM_OC_Start_IT+0xba>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2202      	movs	r2, #2
 800e34c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e350:	e023      	b.n	800e39a <HAL_TIM_OC_Start_IT+0x102>
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	2b04      	cmp	r3, #4
 800e356:	d104      	bne.n	800e362 <HAL_TIM_OC_Start_IT+0xca>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2202      	movs	r2, #2
 800e35c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e360:	e01b      	b.n	800e39a <HAL_TIM_OC_Start_IT+0x102>
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	2b08      	cmp	r3, #8
 800e366:	d104      	bne.n	800e372 <HAL_TIM_OC_Start_IT+0xda>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2202      	movs	r2, #2
 800e36c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e370:	e013      	b.n	800e39a <HAL_TIM_OC_Start_IT+0x102>
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	2b0c      	cmp	r3, #12
 800e376:	d104      	bne.n	800e382 <HAL_TIM_OC_Start_IT+0xea>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2202      	movs	r2, #2
 800e37c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e380:	e00b      	b.n	800e39a <HAL_TIM_OC_Start_IT+0x102>
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	2b10      	cmp	r3, #16
 800e386:	d104      	bne.n	800e392 <HAL_TIM_OC_Start_IT+0xfa>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2202      	movs	r2, #2
 800e38c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e390:	e003      	b.n	800e39a <HAL_TIM_OC_Start_IT+0x102>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2202      	movs	r2, #2
 800e396:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	2b0c      	cmp	r3, #12
 800e39e:	d841      	bhi.n	800e424 <HAL_TIM_OC_Start_IT+0x18c>
 800e3a0:	a201      	add	r2, pc, #4	; (adr r2, 800e3a8 <HAL_TIM_OC_Start_IT+0x110>)
 800e3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a6:	bf00      	nop
 800e3a8:	0800e3dd 	.word	0x0800e3dd
 800e3ac:	0800e425 	.word	0x0800e425
 800e3b0:	0800e425 	.word	0x0800e425
 800e3b4:	0800e425 	.word	0x0800e425
 800e3b8:	0800e3ef 	.word	0x0800e3ef
 800e3bc:	0800e425 	.word	0x0800e425
 800e3c0:	0800e425 	.word	0x0800e425
 800e3c4:	0800e425 	.word	0x0800e425
 800e3c8:	0800e401 	.word	0x0800e401
 800e3cc:	0800e425 	.word	0x0800e425
 800e3d0:	0800e425 	.word	0x0800e425
 800e3d4:	0800e425 	.word	0x0800e425
 800e3d8:	0800e413 	.word	0x0800e413
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	68da      	ldr	r2, [r3, #12]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f042 0202 	orr.w	r2, r2, #2
 800e3ea:	60da      	str	r2, [r3, #12]
      break;
 800e3ec:	e01d      	b.n	800e42a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	68da      	ldr	r2, [r3, #12]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f042 0204 	orr.w	r2, r2, #4
 800e3fc:	60da      	str	r2, [r3, #12]
      break;
 800e3fe:	e014      	b.n	800e42a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	68da      	ldr	r2, [r3, #12]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f042 0208 	orr.w	r2, r2, #8
 800e40e:	60da      	str	r2, [r3, #12]
      break;
 800e410:	e00b      	b.n	800e42a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	68da      	ldr	r2, [r3, #12]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f042 0210 	orr.w	r2, r2, #16
 800e420:	60da      	str	r2, [r3, #12]
      break;
 800e422:	e002      	b.n	800e42a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e424:	2301      	movs	r3, #1
 800e426:	73fb      	strb	r3, [r7, #15]
      break;
 800e428:	bf00      	nop
  }

  if (status == HAL_OK)
 800e42a:	7bfb      	ldrb	r3, [r7, #15]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d174      	bne.n	800e51a <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	2201      	movs	r2, #1
 800e436:	6839      	ldr	r1, [r7, #0]
 800e438:	4618      	mov	r0, r3
 800e43a:	f001 f943 	bl	800f6c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	4a38      	ldr	r2, [pc, #224]	; (800e524 <HAL_TIM_OC_Start_IT+0x28c>)
 800e444:	4293      	cmp	r3, r2
 800e446:	d013      	beq.n	800e470 <HAL_TIM_OC_Start_IT+0x1d8>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4a36      	ldr	r2, [pc, #216]	; (800e528 <HAL_TIM_OC_Start_IT+0x290>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d00e      	beq.n	800e470 <HAL_TIM_OC_Start_IT+0x1d8>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	4a35      	ldr	r2, [pc, #212]	; (800e52c <HAL_TIM_OC_Start_IT+0x294>)
 800e458:	4293      	cmp	r3, r2
 800e45a:	d009      	beq.n	800e470 <HAL_TIM_OC_Start_IT+0x1d8>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4a33      	ldr	r2, [pc, #204]	; (800e530 <HAL_TIM_OC_Start_IT+0x298>)
 800e462:	4293      	cmp	r3, r2
 800e464:	d004      	beq.n	800e470 <HAL_TIM_OC_Start_IT+0x1d8>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	4a32      	ldr	r2, [pc, #200]	; (800e534 <HAL_TIM_OC_Start_IT+0x29c>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d101      	bne.n	800e474 <HAL_TIM_OC_Start_IT+0x1dc>
 800e470:	2301      	movs	r3, #1
 800e472:	e000      	b.n	800e476 <HAL_TIM_OC_Start_IT+0x1de>
 800e474:	2300      	movs	r3, #0
 800e476:	2b00      	cmp	r3, #0
 800e478:	d007      	beq.n	800e48a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e488:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	4a25      	ldr	r2, [pc, #148]	; (800e524 <HAL_TIM_OC_Start_IT+0x28c>)
 800e490:	4293      	cmp	r3, r2
 800e492:	d022      	beq.n	800e4da <HAL_TIM_OC_Start_IT+0x242>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e49c:	d01d      	beq.n	800e4da <HAL_TIM_OC_Start_IT+0x242>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	4a25      	ldr	r2, [pc, #148]	; (800e538 <HAL_TIM_OC_Start_IT+0x2a0>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d018      	beq.n	800e4da <HAL_TIM_OC_Start_IT+0x242>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4a23      	ldr	r2, [pc, #140]	; (800e53c <HAL_TIM_OC_Start_IT+0x2a4>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d013      	beq.n	800e4da <HAL_TIM_OC_Start_IT+0x242>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	4a22      	ldr	r2, [pc, #136]	; (800e540 <HAL_TIM_OC_Start_IT+0x2a8>)
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d00e      	beq.n	800e4da <HAL_TIM_OC_Start_IT+0x242>
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a19      	ldr	r2, [pc, #100]	; (800e528 <HAL_TIM_OC_Start_IT+0x290>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d009      	beq.n	800e4da <HAL_TIM_OC_Start_IT+0x242>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4a1e      	ldr	r2, [pc, #120]	; (800e544 <HAL_TIM_OC_Start_IT+0x2ac>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d004      	beq.n	800e4da <HAL_TIM_OC_Start_IT+0x242>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	4a15      	ldr	r2, [pc, #84]	; (800e52c <HAL_TIM_OC_Start_IT+0x294>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d115      	bne.n	800e506 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	689a      	ldr	r2, [r3, #8]
 800e4e0:	4b19      	ldr	r3, [pc, #100]	; (800e548 <HAL_TIM_OC_Start_IT+0x2b0>)
 800e4e2:	4013      	ands	r3, r2
 800e4e4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	2b06      	cmp	r3, #6
 800e4ea:	d015      	beq.n	800e518 <HAL_TIM_OC_Start_IT+0x280>
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4f2:	d011      	beq.n	800e518 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f042 0201 	orr.w	r2, r2, #1
 800e502:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e504:	e008      	b.n	800e518 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f042 0201 	orr.w	r2, r2, #1
 800e514:	601a      	str	r2, [r3, #0]
 800e516:	e000      	b.n	800e51a <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e518:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3710      	adds	r7, #16
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	40010000 	.word	0x40010000
 800e528:	40010400 	.word	0x40010400
 800e52c:	40014000 	.word	0x40014000
 800e530:	40014400 	.word	0x40014400
 800e534:	40014800 	.word	0x40014800
 800e538:	40000400 	.word	0x40000400
 800e53c:	40000800 	.word	0x40000800
 800e540:	40000c00 	.word	0x40000c00
 800e544:	40001800 	.word	0x40001800
 800e548:	00010007 	.word	0x00010007

0800e54c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d101      	bne.n	800e55e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e55a:	2301      	movs	r3, #1
 800e55c:	e049      	b.n	800e5f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e564:	b2db      	uxtb	r3, r3
 800e566:	2b00      	cmp	r3, #0
 800e568:	d106      	bne.n	800e578 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2200      	movs	r2, #0
 800e56e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 f841 	bl	800e5fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2202      	movs	r2, #2
 800e57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	3304      	adds	r3, #4
 800e588:	4619      	mov	r1, r3
 800e58a:	4610      	mov	r0, r2
 800e58c:	f000 fc80 	bl	800ee90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2201      	movs	r2, #1
 800e594:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2201      	movs	r2, #1
 800e59c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2201      	movs	r2, #1
 800e5dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e5f0:	2300      	movs	r3, #0
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3708      	adds	r7, #8
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e5fa:	b480      	push	{r7}
 800e5fc:	b083      	sub	sp, #12
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e602:	bf00      	nop
 800e604:	370c      	adds	r7, #12
 800e606:	46bd      	mov	sp, r7
 800e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60c:	4770      	bx	lr
	...

0800e610 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b084      	sub	sp, #16
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d109      	bne.n	800e634 <HAL_TIM_PWM_Start+0x24>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e626:	b2db      	uxtb	r3, r3
 800e628:	2b01      	cmp	r3, #1
 800e62a:	bf14      	ite	ne
 800e62c:	2301      	movne	r3, #1
 800e62e:	2300      	moveq	r3, #0
 800e630:	b2db      	uxtb	r3, r3
 800e632:	e03c      	b.n	800e6ae <HAL_TIM_PWM_Start+0x9e>
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	2b04      	cmp	r3, #4
 800e638:	d109      	bne.n	800e64e <HAL_TIM_PWM_Start+0x3e>
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e640:	b2db      	uxtb	r3, r3
 800e642:	2b01      	cmp	r3, #1
 800e644:	bf14      	ite	ne
 800e646:	2301      	movne	r3, #1
 800e648:	2300      	moveq	r3, #0
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	e02f      	b.n	800e6ae <HAL_TIM_PWM_Start+0x9e>
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	2b08      	cmp	r3, #8
 800e652:	d109      	bne.n	800e668 <HAL_TIM_PWM_Start+0x58>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e65a:	b2db      	uxtb	r3, r3
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	bf14      	ite	ne
 800e660:	2301      	movne	r3, #1
 800e662:	2300      	moveq	r3, #0
 800e664:	b2db      	uxtb	r3, r3
 800e666:	e022      	b.n	800e6ae <HAL_TIM_PWM_Start+0x9e>
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	2b0c      	cmp	r3, #12
 800e66c:	d109      	bne.n	800e682 <HAL_TIM_PWM_Start+0x72>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e674:	b2db      	uxtb	r3, r3
 800e676:	2b01      	cmp	r3, #1
 800e678:	bf14      	ite	ne
 800e67a:	2301      	movne	r3, #1
 800e67c:	2300      	moveq	r3, #0
 800e67e:	b2db      	uxtb	r3, r3
 800e680:	e015      	b.n	800e6ae <HAL_TIM_PWM_Start+0x9e>
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	2b10      	cmp	r3, #16
 800e686:	d109      	bne.n	800e69c <HAL_TIM_PWM_Start+0x8c>
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e68e:	b2db      	uxtb	r3, r3
 800e690:	2b01      	cmp	r3, #1
 800e692:	bf14      	ite	ne
 800e694:	2301      	movne	r3, #1
 800e696:	2300      	moveq	r3, #0
 800e698:	b2db      	uxtb	r3, r3
 800e69a:	e008      	b.n	800e6ae <HAL_TIM_PWM_Start+0x9e>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	2b01      	cmp	r3, #1
 800e6a6:	bf14      	ite	ne
 800e6a8:	2301      	movne	r3, #1
 800e6aa:	2300      	moveq	r3, #0
 800e6ac:	b2db      	uxtb	r3, r3
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d001      	beq.n	800e6b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	e0a1      	b.n	800e7fa <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d104      	bne.n	800e6c6 <HAL_TIM_PWM_Start+0xb6>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2202      	movs	r2, #2
 800e6c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e6c4:	e023      	b.n	800e70e <HAL_TIM_PWM_Start+0xfe>
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	2b04      	cmp	r3, #4
 800e6ca:	d104      	bne.n	800e6d6 <HAL_TIM_PWM_Start+0xc6>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2202      	movs	r2, #2
 800e6d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e6d4:	e01b      	b.n	800e70e <HAL_TIM_PWM_Start+0xfe>
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	2b08      	cmp	r3, #8
 800e6da:	d104      	bne.n	800e6e6 <HAL_TIM_PWM_Start+0xd6>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2202      	movs	r2, #2
 800e6e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e6e4:	e013      	b.n	800e70e <HAL_TIM_PWM_Start+0xfe>
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	2b0c      	cmp	r3, #12
 800e6ea:	d104      	bne.n	800e6f6 <HAL_TIM_PWM_Start+0xe6>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2202      	movs	r2, #2
 800e6f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e6f4:	e00b      	b.n	800e70e <HAL_TIM_PWM_Start+0xfe>
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	2b10      	cmp	r3, #16
 800e6fa:	d104      	bne.n	800e706 <HAL_TIM_PWM_Start+0xf6>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2202      	movs	r2, #2
 800e700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e704:	e003      	b.n	800e70e <HAL_TIM_PWM_Start+0xfe>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2202      	movs	r2, #2
 800e70a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2201      	movs	r2, #1
 800e714:	6839      	ldr	r1, [r7, #0]
 800e716:	4618      	mov	r0, r3
 800e718:	f000 ffd4 	bl	800f6c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	4a38      	ldr	r2, [pc, #224]	; (800e804 <HAL_TIM_PWM_Start+0x1f4>)
 800e722:	4293      	cmp	r3, r2
 800e724:	d013      	beq.n	800e74e <HAL_TIM_PWM_Start+0x13e>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4a37      	ldr	r2, [pc, #220]	; (800e808 <HAL_TIM_PWM_Start+0x1f8>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d00e      	beq.n	800e74e <HAL_TIM_PWM_Start+0x13e>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	4a35      	ldr	r2, [pc, #212]	; (800e80c <HAL_TIM_PWM_Start+0x1fc>)
 800e736:	4293      	cmp	r3, r2
 800e738:	d009      	beq.n	800e74e <HAL_TIM_PWM_Start+0x13e>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	4a34      	ldr	r2, [pc, #208]	; (800e810 <HAL_TIM_PWM_Start+0x200>)
 800e740:	4293      	cmp	r3, r2
 800e742:	d004      	beq.n	800e74e <HAL_TIM_PWM_Start+0x13e>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4a32      	ldr	r2, [pc, #200]	; (800e814 <HAL_TIM_PWM_Start+0x204>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d101      	bne.n	800e752 <HAL_TIM_PWM_Start+0x142>
 800e74e:	2301      	movs	r3, #1
 800e750:	e000      	b.n	800e754 <HAL_TIM_PWM_Start+0x144>
 800e752:	2300      	movs	r3, #0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d007      	beq.n	800e768 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e766:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4a25      	ldr	r2, [pc, #148]	; (800e804 <HAL_TIM_PWM_Start+0x1f4>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d022      	beq.n	800e7b8 <HAL_TIM_PWM_Start+0x1a8>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e77a:	d01d      	beq.n	800e7b8 <HAL_TIM_PWM_Start+0x1a8>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4a25      	ldr	r2, [pc, #148]	; (800e818 <HAL_TIM_PWM_Start+0x208>)
 800e782:	4293      	cmp	r3, r2
 800e784:	d018      	beq.n	800e7b8 <HAL_TIM_PWM_Start+0x1a8>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4a24      	ldr	r2, [pc, #144]	; (800e81c <HAL_TIM_PWM_Start+0x20c>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d013      	beq.n	800e7b8 <HAL_TIM_PWM_Start+0x1a8>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	4a22      	ldr	r2, [pc, #136]	; (800e820 <HAL_TIM_PWM_Start+0x210>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d00e      	beq.n	800e7b8 <HAL_TIM_PWM_Start+0x1a8>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	4a1a      	ldr	r2, [pc, #104]	; (800e808 <HAL_TIM_PWM_Start+0x1f8>)
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	d009      	beq.n	800e7b8 <HAL_TIM_PWM_Start+0x1a8>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4a1e      	ldr	r2, [pc, #120]	; (800e824 <HAL_TIM_PWM_Start+0x214>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d004      	beq.n	800e7b8 <HAL_TIM_PWM_Start+0x1a8>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	4a16      	ldr	r2, [pc, #88]	; (800e80c <HAL_TIM_PWM_Start+0x1fc>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d115      	bne.n	800e7e4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	689a      	ldr	r2, [r3, #8]
 800e7be:	4b1a      	ldr	r3, [pc, #104]	; (800e828 <HAL_TIM_PWM_Start+0x218>)
 800e7c0:	4013      	ands	r3, r2
 800e7c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2b06      	cmp	r3, #6
 800e7c8:	d015      	beq.n	800e7f6 <HAL_TIM_PWM_Start+0x1e6>
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7d0:	d011      	beq.n	800e7f6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	f042 0201 	orr.w	r2, r2, #1
 800e7e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7e2:	e008      	b.n	800e7f6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f042 0201 	orr.w	r2, r2, #1
 800e7f2:	601a      	str	r2, [r3, #0]
 800e7f4:	e000      	b.n	800e7f8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e7f8:	2300      	movs	r3, #0
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3710      	adds	r7, #16
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	40010000 	.word	0x40010000
 800e808:	40010400 	.word	0x40010400
 800e80c:	40014000 	.word	0x40014000
 800e810:	40014400 	.word	0x40014400
 800e814:	40014800 	.word	0x40014800
 800e818:	40000400 	.word	0x40000400
 800e81c:	40000800 	.word	0x40000800
 800e820:	40000c00 	.word	0x40000c00
 800e824:	40001800 	.word	0x40001800
 800e828:	00010007 	.word	0x00010007

0800e82c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	68db      	ldr	r3, [r3, #12]
 800e83a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	691b      	ldr	r3, [r3, #16]
 800e842:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	f003 0302 	and.w	r3, r3, #2
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d020      	beq.n	800e890 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f003 0302 	and.w	r3, r3, #2
 800e854:	2b00      	cmp	r3, #0
 800e856:	d01b      	beq.n	800e890 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f06f 0202 	mvn.w	r2, #2
 800e860:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2201      	movs	r2, #1
 800e866:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	699b      	ldr	r3, [r3, #24]
 800e86e:	f003 0303 	and.w	r3, r3, #3
 800e872:	2b00      	cmp	r3, #0
 800e874:	d003      	beq.n	800e87e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 faec 	bl	800ee54 <HAL_TIM_IC_CaptureCallback>
 800e87c:	e005      	b.n	800e88a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f7f1 feb0 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f000 faef 	bl	800ee68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2200      	movs	r2, #0
 800e88e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	f003 0304 	and.w	r3, r3, #4
 800e896:	2b00      	cmp	r3, #0
 800e898:	d020      	beq.n	800e8dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	f003 0304 	and.w	r3, r3, #4
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d01b      	beq.n	800e8dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f06f 0204 	mvn.w	r2, #4
 800e8ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2202      	movs	r2, #2
 800e8b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	699b      	ldr	r3, [r3, #24]
 800e8ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d003      	beq.n	800e8ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f000 fac6 	bl	800ee54 <HAL_TIM_IC_CaptureCallback>
 800e8c8:	e005      	b.n	800e8d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f7f1 fe8a 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f000 fac9 	bl	800ee68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	f003 0308 	and.w	r3, r3, #8
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d020      	beq.n	800e928 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	f003 0308 	and.w	r3, r3, #8
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d01b      	beq.n	800e928 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f06f 0208 	mvn.w	r2, #8
 800e8f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2204      	movs	r2, #4
 800e8fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	69db      	ldr	r3, [r3, #28]
 800e906:	f003 0303 	and.w	r3, r3, #3
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d003      	beq.n	800e916 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f000 faa0 	bl	800ee54 <HAL_TIM_IC_CaptureCallback>
 800e914:	e005      	b.n	800e922 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f7f1 fe64 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f000 faa3 	bl	800ee68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2200      	movs	r2, #0
 800e926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	f003 0310 	and.w	r3, r3, #16
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d020      	beq.n	800e974 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f003 0310 	and.w	r3, r3, #16
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d01b      	beq.n	800e974 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f06f 0210 	mvn.w	r2, #16
 800e944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2208      	movs	r2, #8
 800e94a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	69db      	ldr	r3, [r3, #28]
 800e952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e956:	2b00      	cmp	r3, #0
 800e958:	d003      	beq.n	800e962 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f000 fa7a 	bl	800ee54 <HAL_TIM_IC_CaptureCallback>
 800e960:	e005      	b.n	800e96e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f7f1 fe3e 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f000 fa7d 	bl	800ee68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2200      	movs	r2, #0
 800e972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	f003 0301 	and.w	r3, r3, #1
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d00c      	beq.n	800e998 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	f003 0301 	and.w	r3, r3, #1
 800e984:	2b00      	cmp	r3, #0
 800e986:	d007      	beq.n	800e998 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	f06f 0201 	mvn.w	r2, #1
 800e990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f7f3 ffb6 	bl	8002904 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d104      	bne.n	800e9ac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d00c      	beq.n	800e9c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d007      	beq.n	800e9c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800e9be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f000 ffbb 	bl	800f93c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d00c      	beq.n	800e9ea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d007      	beq.n	800e9ea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e9e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f000 ffb3 	bl	800f950 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d00c      	beq.n	800ea0e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d007      	beq.n	800ea0e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ea06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f000 fa37 	bl	800ee7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	f003 0320 	and.w	r3, r3, #32
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d00c      	beq.n	800ea32 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f003 0320 	and.w	r3, r3, #32
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d007      	beq.n	800ea32 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f06f 0220 	mvn.w	r2, #32
 800ea2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f000 ff7b 	bl	800f928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ea32:	bf00      	nop
 800ea34:	3710      	adds	r7, #16
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}
	...

0800ea3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b086      	sub	sp, #24
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea52:	2b01      	cmp	r3, #1
 800ea54:	d101      	bne.n	800ea5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ea56:	2302      	movs	r3, #2
 800ea58:	e0ff      	b.n	800ec5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2201      	movs	r2, #1
 800ea5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2b14      	cmp	r3, #20
 800ea66:	f200 80f0 	bhi.w	800ec4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ea6a:	a201      	add	r2, pc, #4	; (adr r2, 800ea70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ea6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea70:	0800eac5 	.word	0x0800eac5
 800ea74:	0800ec4b 	.word	0x0800ec4b
 800ea78:	0800ec4b 	.word	0x0800ec4b
 800ea7c:	0800ec4b 	.word	0x0800ec4b
 800ea80:	0800eb05 	.word	0x0800eb05
 800ea84:	0800ec4b 	.word	0x0800ec4b
 800ea88:	0800ec4b 	.word	0x0800ec4b
 800ea8c:	0800ec4b 	.word	0x0800ec4b
 800ea90:	0800eb47 	.word	0x0800eb47
 800ea94:	0800ec4b 	.word	0x0800ec4b
 800ea98:	0800ec4b 	.word	0x0800ec4b
 800ea9c:	0800ec4b 	.word	0x0800ec4b
 800eaa0:	0800eb87 	.word	0x0800eb87
 800eaa4:	0800ec4b 	.word	0x0800ec4b
 800eaa8:	0800ec4b 	.word	0x0800ec4b
 800eaac:	0800ec4b 	.word	0x0800ec4b
 800eab0:	0800ebc9 	.word	0x0800ebc9
 800eab4:	0800ec4b 	.word	0x0800ec4b
 800eab8:	0800ec4b 	.word	0x0800ec4b
 800eabc:	0800ec4b 	.word	0x0800ec4b
 800eac0:	0800ec09 	.word	0x0800ec09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	68b9      	ldr	r1, [r7, #8]
 800eaca:	4618      	mov	r0, r3
 800eacc:	f000 fa86 	bl	800efdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	699a      	ldr	r2, [r3, #24]
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f042 0208 	orr.w	r2, r2, #8
 800eade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	699a      	ldr	r2, [r3, #24]
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f022 0204 	bic.w	r2, r2, #4
 800eaee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	6999      	ldr	r1, [r3, #24]
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	691a      	ldr	r2, [r3, #16]
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	430a      	orrs	r2, r1
 800eb00:	619a      	str	r2, [r3, #24]
      break;
 800eb02:	e0a5      	b.n	800ec50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	68b9      	ldr	r1, [r7, #8]
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f000 faf6 	bl	800f0fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	699a      	ldr	r2, [r3, #24]
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	699a      	ldr	r2, [r3, #24]
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eb2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	6999      	ldr	r1, [r3, #24]
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	691b      	ldr	r3, [r3, #16]
 800eb3a:	021a      	lsls	r2, r3, #8
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	430a      	orrs	r2, r1
 800eb42:	619a      	str	r2, [r3, #24]
      break;
 800eb44:	e084      	b.n	800ec50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	68b9      	ldr	r1, [r7, #8]
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f000 fb5f 	bl	800f210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	69da      	ldr	r2, [r3, #28]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f042 0208 	orr.w	r2, r2, #8
 800eb60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	69da      	ldr	r2, [r3, #28]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f022 0204 	bic.w	r2, r2, #4
 800eb70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	69d9      	ldr	r1, [r3, #28]
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	691a      	ldr	r2, [r3, #16]
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	430a      	orrs	r2, r1
 800eb82:	61da      	str	r2, [r3, #28]
      break;
 800eb84:	e064      	b.n	800ec50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	68b9      	ldr	r1, [r7, #8]
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f000 fbc7 	bl	800f320 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	69da      	ldr	r2, [r3, #28]
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	69da      	ldr	r2, [r3, #28]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ebb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	69d9      	ldr	r1, [r3, #28]
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	691b      	ldr	r3, [r3, #16]
 800ebbc:	021a      	lsls	r2, r3, #8
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	430a      	orrs	r2, r1
 800ebc4:	61da      	str	r2, [r3, #28]
      break;
 800ebc6:	e043      	b.n	800ec50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	68b9      	ldr	r1, [r7, #8]
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f000 fc10 	bl	800f3f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f042 0208 	orr.w	r2, r2, #8
 800ebe2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f022 0204 	bic.w	r2, r2, #4
 800ebf2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	691a      	ldr	r2, [r3, #16]
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	430a      	orrs	r2, r1
 800ec04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ec06:	e023      	b.n	800ec50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	68b9      	ldr	r1, [r7, #8]
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f000 fc54 	bl	800f4bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	691b      	ldr	r3, [r3, #16]
 800ec3e:	021a      	lsls	r2, r3, #8
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	430a      	orrs	r2, r1
 800ec46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ec48:	e002      	b.n	800ec50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	75fb      	strb	r3, [r7, #23]
      break;
 800ec4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	2200      	movs	r2, #0
 800ec54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ec58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3718      	adds	r7, #24
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop

0800ec64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b084      	sub	sp, #16
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d101      	bne.n	800ec80 <HAL_TIM_ConfigClockSource+0x1c>
 800ec7c:	2302      	movs	r3, #2
 800ec7e:	e0dc      	b.n	800ee3a <HAL_TIM_ConfigClockSource+0x1d6>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2201      	movs	r2, #1
 800ec84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2202      	movs	r2, #2
 800ec8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	689b      	ldr	r3, [r3, #8]
 800ec96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ec98:	68ba      	ldr	r2, [r7, #8]
 800ec9a:	4b6a      	ldr	r3, [pc, #424]	; (800ee44 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ec9c:	4013      	ands	r3, r2
 800ec9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800eca6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	68ba      	ldr	r2, [r7, #8]
 800ecae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a64      	ldr	r2, [pc, #400]	; (800ee48 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	f000 80a9 	beq.w	800ee0e <HAL_TIM_ConfigClockSource+0x1aa>
 800ecbc:	4a62      	ldr	r2, [pc, #392]	; (800ee48 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	f200 80ae 	bhi.w	800ee20 <HAL_TIM_ConfigClockSource+0x1bc>
 800ecc4:	4a61      	ldr	r2, [pc, #388]	; (800ee4c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	f000 80a1 	beq.w	800ee0e <HAL_TIM_ConfigClockSource+0x1aa>
 800eccc:	4a5f      	ldr	r2, [pc, #380]	; (800ee4c <HAL_TIM_ConfigClockSource+0x1e8>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	f200 80a6 	bhi.w	800ee20 <HAL_TIM_ConfigClockSource+0x1bc>
 800ecd4:	4a5e      	ldr	r2, [pc, #376]	; (800ee50 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	f000 8099 	beq.w	800ee0e <HAL_TIM_ConfigClockSource+0x1aa>
 800ecdc:	4a5c      	ldr	r2, [pc, #368]	; (800ee50 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	f200 809e 	bhi.w	800ee20 <HAL_TIM_ConfigClockSource+0x1bc>
 800ece4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ece8:	f000 8091 	beq.w	800ee0e <HAL_TIM_ConfigClockSource+0x1aa>
 800ecec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ecf0:	f200 8096 	bhi.w	800ee20 <HAL_TIM_ConfigClockSource+0x1bc>
 800ecf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ecf8:	f000 8089 	beq.w	800ee0e <HAL_TIM_ConfigClockSource+0x1aa>
 800ecfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed00:	f200 808e 	bhi.w	800ee20 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed08:	d03e      	beq.n	800ed88 <HAL_TIM_ConfigClockSource+0x124>
 800ed0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed0e:	f200 8087 	bhi.w	800ee20 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed16:	f000 8086 	beq.w	800ee26 <HAL_TIM_ConfigClockSource+0x1c2>
 800ed1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed1e:	d87f      	bhi.n	800ee20 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed20:	2b70      	cmp	r3, #112	; 0x70
 800ed22:	d01a      	beq.n	800ed5a <HAL_TIM_ConfigClockSource+0xf6>
 800ed24:	2b70      	cmp	r3, #112	; 0x70
 800ed26:	d87b      	bhi.n	800ee20 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed28:	2b60      	cmp	r3, #96	; 0x60
 800ed2a:	d050      	beq.n	800edce <HAL_TIM_ConfigClockSource+0x16a>
 800ed2c:	2b60      	cmp	r3, #96	; 0x60
 800ed2e:	d877      	bhi.n	800ee20 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed30:	2b50      	cmp	r3, #80	; 0x50
 800ed32:	d03c      	beq.n	800edae <HAL_TIM_ConfigClockSource+0x14a>
 800ed34:	2b50      	cmp	r3, #80	; 0x50
 800ed36:	d873      	bhi.n	800ee20 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed38:	2b40      	cmp	r3, #64	; 0x40
 800ed3a:	d058      	beq.n	800edee <HAL_TIM_ConfigClockSource+0x18a>
 800ed3c:	2b40      	cmp	r3, #64	; 0x40
 800ed3e:	d86f      	bhi.n	800ee20 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed40:	2b30      	cmp	r3, #48	; 0x30
 800ed42:	d064      	beq.n	800ee0e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed44:	2b30      	cmp	r3, #48	; 0x30
 800ed46:	d86b      	bhi.n	800ee20 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed48:	2b20      	cmp	r3, #32
 800ed4a:	d060      	beq.n	800ee0e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed4c:	2b20      	cmp	r3, #32
 800ed4e:	d867      	bhi.n	800ee20 <HAL_TIM_ConfigClockSource+0x1bc>
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d05c      	beq.n	800ee0e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed54:	2b10      	cmp	r3, #16
 800ed56:	d05a      	beq.n	800ee0e <HAL_TIM_ConfigClockSource+0x1aa>
 800ed58:	e062      	b.n	800ee20 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6818      	ldr	r0, [r3, #0]
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	6899      	ldr	r1, [r3, #8]
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	685a      	ldr	r2, [r3, #4]
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	f000 fc8b 	bl	800f684 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ed7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	68ba      	ldr	r2, [r7, #8]
 800ed84:	609a      	str	r2, [r3, #8]
      break;
 800ed86:	e04f      	b.n	800ee28 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6818      	ldr	r0, [r3, #0]
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	6899      	ldr	r1, [r3, #8]
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	685a      	ldr	r2, [r3, #4]
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	68db      	ldr	r3, [r3, #12]
 800ed98:	f000 fc74 	bl	800f684 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	689a      	ldr	r2, [r3, #8]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800edaa:	609a      	str	r2, [r3, #8]
      break;
 800edac:	e03c      	b.n	800ee28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6818      	ldr	r0, [r3, #0]
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	6859      	ldr	r1, [r3, #4]
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	68db      	ldr	r3, [r3, #12]
 800edba:	461a      	mov	r2, r3
 800edbc:	f000 fbe4 	bl	800f588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	2150      	movs	r1, #80	; 0x50
 800edc6:	4618      	mov	r0, r3
 800edc8:	f000 fc3e 	bl	800f648 <TIM_ITRx_SetConfig>
      break;
 800edcc:	e02c      	b.n	800ee28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6818      	ldr	r0, [r3, #0]
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	6859      	ldr	r1, [r3, #4]
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	68db      	ldr	r3, [r3, #12]
 800edda:	461a      	mov	r2, r3
 800eddc:	f000 fc03 	bl	800f5e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2160      	movs	r1, #96	; 0x60
 800ede6:	4618      	mov	r0, r3
 800ede8:	f000 fc2e 	bl	800f648 <TIM_ITRx_SetConfig>
      break;
 800edec:	e01c      	b.n	800ee28 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6818      	ldr	r0, [r3, #0]
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	6859      	ldr	r1, [r3, #4]
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	68db      	ldr	r3, [r3, #12]
 800edfa:	461a      	mov	r2, r3
 800edfc:	f000 fbc4 	bl	800f588 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	2140      	movs	r1, #64	; 0x40
 800ee06:	4618      	mov	r0, r3
 800ee08:	f000 fc1e 	bl	800f648 <TIM_ITRx_SetConfig>
      break;
 800ee0c:	e00c      	b.n	800ee28 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4619      	mov	r1, r3
 800ee18:	4610      	mov	r0, r2
 800ee1a:	f000 fc15 	bl	800f648 <TIM_ITRx_SetConfig>
      break;
 800ee1e:	e003      	b.n	800ee28 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ee20:	2301      	movs	r3, #1
 800ee22:	73fb      	strb	r3, [r7, #15]
      break;
 800ee24:	e000      	b.n	800ee28 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ee26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2200      	movs	r2, #0
 800ee34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ee38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3710      	adds	r7, #16
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	ffceff88 	.word	0xffceff88
 800ee48:	00100040 	.word	0x00100040
 800ee4c:	00100030 	.word	0x00100030
 800ee50:	00100020 	.word	0x00100020

0800ee54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b083      	sub	sp, #12
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ee5c:	bf00      	nop
 800ee5e:	370c      	adds	r7, #12
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b083      	sub	sp, #12
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ee70:	bf00      	nop
 800ee72:	370c      	adds	r7, #12
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b083      	sub	sp, #12
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ee84:	bf00      	nop
 800ee86:	370c      	adds	r7, #12
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr

0800ee90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b085      	sub	sp, #20
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	4a46      	ldr	r2, [pc, #280]	; (800efbc <TIM_Base_SetConfig+0x12c>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d013      	beq.n	800eed0 <TIM_Base_SetConfig+0x40>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eeae:	d00f      	beq.n	800eed0 <TIM_Base_SetConfig+0x40>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	4a43      	ldr	r2, [pc, #268]	; (800efc0 <TIM_Base_SetConfig+0x130>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d00b      	beq.n	800eed0 <TIM_Base_SetConfig+0x40>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	4a42      	ldr	r2, [pc, #264]	; (800efc4 <TIM_Base_SetConfig+0x134>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d007      	beq.n	800eed0 <TIM_Base_SetConfig+0x40>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	4a41      	ldr	r2, [pc, #260]	; (800efc8 <TIM_Base_SetConfig+0x138>)
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d003      	beq.n	800eed0 <TIM_Base_SetConfig+0x40>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4a40      	ldr	r2, [pc, #256]	; (800efcc <TIM_Base_SetConfig+0x13c>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d108      	bne.n	800eee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	685b      	ldr	r3, [r3, #4]
 800eedc:	68fa      	ldr	r2, [r7, #12]
 800eede:	4313      	orrs	r3, r2
 800eee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	4a35      	ldr	r2, [pc, #212]	; (800efbc <TIM_Base_SetConfig+0x12c>)
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d01f      	beq.n	800ef2a <TIM_Base_SetConfig+0x9a>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eef0:	d01b      	beq.n	800ef2a <TIM_Base_SetConfig+0x9a>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	4a32      	ldr	r2, [pc, #200]	; (800efc0 <TIM_Base_SetConfig+0x130>)
 800eef6:	4293      	cmp	r3, r2
 800eef8:	d017      	beq.n	800ef2a <TIM_Base_SetConfig+0x9a>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4a31      	ldr	r2, [pc, #196]	; (800efc4 <TIM_Base_SetConfig+0x134>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d013      	beq.n	800ef2a <TIM_Base_SetConfig+0x9a>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	4a30      	ldr	r2, [pc, #192]	; (800efc8 <TIM_Base_SetConfig+0x138>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d00f      	beq.n	800ef2a <TIM_Base_SetConfig+0x9a>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	4a2f      	ldr	r2, [pc, #188]	; (800efcc <TIM_Base_SetConfig+0x13c>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d00b      	beq.n	800ef2a <TIM_Base_SetConfig+0x9a>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	4a2e      	ldr	r2, [pc, #184]	; (800efd0 <TIM_Base_SetConfig+0x140>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d007      	beq.n	800ef2a <TIM_Base_SetConfig+0x9a>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	4a2d      	ldr	r2, [pc, #180]	; (800efd4 <TIM_Base_SetConfig+0x144>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d003      	beq.n	800ef2a <TIM_Base_SetConfig+0x9a>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	4a2c      	ldr	r2, [pc, #176]	; (800efd8 <TIM_Base_SetConfig+0x148>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d108      	bne.n	800ef3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	68db      	ldr	r3, [r3, #12]
 800ef36:	68fa      	ldr	r2, [r7, #12]
 800ef38:	4313      	orrs	r3, r2
 800ef3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	695b      	ldr	r3, [r3, #20]
 800ef46:	4313      	orrs	r3, r2
 800ef48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	68fa      	ldr	r2, [r7, #12]
 800ef4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	689a      	ldr	r2, [r3, #8]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	4a16      	ldr	r2, [pc, #88]	; (800efbc <TIM_Base_SetConfig+0x12c>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d00f      	beq.n	800ef88 <TIM_Base_SetConfig+0xf8>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	4a18      	ldr	r2, [pc, #96]	; (800efcc <TIM_Base_SetConfig+0x13c>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d00b      	beq.n	800ef88 <TIM_Base_SetConfig+0xf8>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	4a17      	ldr	r2, [pc, #92]	; (800efd0 <TIM_Base_SetConfig+0x140>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d007      	beq.n	800ef88 <TIM_Base_SetConfig+0xf8>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	4a16      	ldr	r2, [pc, #88]	; (800efd4 <TIM_Base_SetConfig+0x144>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d003      	beq.n	800ef88 <TIM_Base_SetConfig+0xf8>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	4a15      	ldr	r2, [pc, #84]	; (800efd8 <TIM_Base_SetConfig+0x148>)
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d103      	bne.n	800ef90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	691a      	ldr	r2, [r3, #16]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2201      	movs	r2, #1
 800ef94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	691b      	ldr	r3, [r3, #16]
 800ef9a:	f003 0301 	and.w	r3, r3, #1
 800ef9e:	2b01      	cmp	r3, #1
 800efa0:	d105      	bne.n	800efae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	691b      	ldr	r3, [r3, #16]
 800efa6:	f023 0201 	bic.w	r2, r3, #1
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	611a      	str	r2, [r3, #16]
  }
}
 800efae:	bf00      	nop
 800efb0:	3714      	adds	r7, #20
 800efb2:	46bd      	mov	sp, r7
 800efb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb8:	4770      	bx	lr
 800efba:	bf00      	nop
 800efbc:	40010000 	.word	0x40010000
 800efc0:	40000400 	.word	0x40000400
 800efc4:	40000800 	.word	0x40000800
 800efc8:	40000c00 	.word	0x40000c00
 800efcc:	40010400 	.word	0x40010400
 800efd0:	40014000 	.word	0x40014000
 800efd4:	40014400 	.word	0x40014400
 800efd8:	40014800 	.word	0x40014800

0800efdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800efdc:	b480      	push	{r7}
 800efde:	b087      	sub	sp, #28
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6a1b      	ldr	r3, [r3, #32]
 800efea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6a1b      	ldr	r3, [r3, #32]
 800eff0:	f023 0201 	bic.w	r2, r3, #1
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	699b      	ldr	r3, [r3, #24]
 800f002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	4b37      	ldr	r3, [pc, #220]	; (800f0e4 <TIM_OC1_SetConfig+0x108>)
 800f008:	4013      	ands	r3, r2
 800f00a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	f023 0303 	bic.w	r3, r3, #3
 800f012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	68fa      	ldr	r2, [r7, #12]
 800f01a:	4313      	orrs	r3, r2
 800f01c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	f023 0302 	bic.w	r3, r3, #2
 800f024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	689b      	ldr	r3, [r3, #8]
 800f02a:	697a      	ldr	r2, [r7, #20]
 800f02c:	4313      	orrs	r3, r2
 800f02e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4a2d      	ldr	r2, [pc, #180]	; (800f0e8 <TIM_OC1_SetConfig+0x10c>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d00f      	beq.n	800f058 <TIM_OC1_SetConfig+0x7c>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	4a2c      	ldr	r2, [pc, #176]	; (800f0ec <TIM_OC1_SetConfig+0x110>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d00b      	beq.n	800f058 <TIM_OC1_SetConfig+0x7c>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	4a2b      	ldr	r2, [pc, #172]	; (800f0f0 <TIM_OC1_SetConfig+0x114>)
 800f044:	4293      	cmp	r3, r2
 800f046:	d007      	beq.n	800f058 <TIM_OC1_SetConfig+0x7c>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	4a2a      	ldr	r2, [pc, #168]	; (800f0f4 <TIM_OC1_SetConfig+0x118>)
 800f04c:	4293      	cmp	r3, r2
 800f04e:	d003      	beq.n	800f058 <TIM_OC1_SetConfig+0x7c>
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	4a29      	ldr	r2, [pc, #164]	; (800f0f8 <TIM_OC1_SetConfig+0x11c>)
 800f054:	4293      	cmp	r3, r2
 800f056:	d10c      	bne.n	800f072 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	f023 0308 	bic.w	r3, r3, #8
 800f05e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	68db      	ldr	r3, [r3, #12]
 800f064:	697a      	ldr	r2, [r7, #20]
 800f066:	4313      	orrs	r3, r2
 800f068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	f023 0304 	bic.w	r3, r3, #4
 800f070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4a1c      	ldr	r2, [pc, #112]	; (800f0e8 <TIM_OC1_SetConfig+0x10c>)
 800f076:	4293      	cmp	r3, r2
 800f078:	d00f      	beq.n	800f09a <TIM_OC1_SetConfig+0xbe>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	4a1b      	ldr	r2, [pc, #108]	; (800f0ec <TIM_OC1_SetConfig+0x110>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d00b      	beq.n	800f09a <TIM_OC1_SetConfig+0xbe>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	4a1a      	ldr	r2, [pc, #104]	; (800f0f0 <TIM_OC1_SetConfig+0x114>)
 800f086:	4293      	cmp	r3, r2
 800f088:	d007      	beq.n	800f09a <TIM_OC1_SetConfig+0xbe>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	4a19      	ldr	r2, [pc, #100]	; (800f0f4 <TIM_OC1_SetConfig+0x118>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d003      	beq.n	800f09a <TIM_OC1_SetConfig+0xbe>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	4a18      	ldr	r2, [pc, #96]	; (800f0f8 <TIM_OC1_SetConfig+0x11c>)
 800f096:	4293      	cmp	r3, r2
 800f098:	d111      	bne.n	800f0be <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f0a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	695b      	ldr	r3, [r3, #20]
 800f0ae:	693a      	ldr	r2, [r7, #16]
 800f0b0:	4313      	orrs	r3, r2
 800f0b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	699b      	ldr	r3, [r3, #24]
 800f0b8:	693a      	ldr	r2, [r7, #16]
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	693a      	ldr	r2, [r7, #16]
 800f0c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	68fa      	ldr	r2, [r7, #12]
 800f0c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	685a      	ldr	r2, [r3, #4]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	697a      	ldr	r2, [r7, #20]
 800f0d6:	621a      	str	r2, [r3, #32]
}
 800f0d8:	bf00      	nop
 800f0da:	371c      	adds	r7, #28
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr
 800f0e4:	fffeff8f 	.word	0xfffeff8f
 800f0e8:	40010000 	.word	0x40010000
 800f0ec:	40010400 	.word	0x40010400
 800f0f0:	40014000 	.word	0x40014000
 800f0f4:	40014400 	.word	0x40014400
 800f0f8:	40014800 	.word	0x40014800

0800f0fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b087      	sub	sp, #28
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6a1b      	ldr	r3, [r3, #32]
 800f10a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6a1b      	ldr	r3, [r3, #32]
 800f110:	f023 0210 	bic.w	r2, r3, #16
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	685b      	ldr	r3, [r3, #4]
 800f11c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	699b      	ldr	r3, [r3, #24]
 800f122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f124:	68fa      	ldr	r2, [r7, #12]
 800f126:	4b34      	ldr	r3, [pc, #208]	; (800f1f8 <TIM_OC2_SetConfig+0xfc>)
 800f128:	4013      	ands	r3, r2
 800f12a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	021b      	lsls	r3, r3, #8
 800f13a:	68fa      	ldr	r2, [r7, #12]
 800f13c:	4313      	orrs	r3, r2
 800f13e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	f023 0320 	bic.w	r3, r3, #32
 800f146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	689b      	ldr	r3, [r3, #8]
 800f14c:	011b      	lsls	r3, r3, #4
 800f14e:	697a      	ldr	r2, [r7, #20]
 800f150:	4313      	orrs	r3, r2
 800f152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4a29      	ldr	r2, [pc, #164]	; (800f1fc <TIM_OC2_SetConfig+0x100>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d003      	beq.n	800f164 <TIM_OC2_SetConfig+0x68>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	4a28      	ldr	r2, [pc, #160]	; (800f200 <TIM_OC2_SetConfig+0x104>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d10d      	bne.n	800f180 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f16a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	68db      	ldr	r3, [r3, #12]
 800f170:	011b      	lsls	r3, r3, #4
 800f172:	697a      	ldr	r2, [r7, #20]
 800f174:	4313      	orrs	r3, r2
 800f176:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f17e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	4a1e      	ldr	r2, [pc, #120]	; (800f1fc <TIM_OC2_SetConfig+0x100>)
 800f184:	4293      	cmp	r3, r2
 800f186:	d00f      	beq.n	800f1a8 <TIM_OC2_SetConfig+0xac>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	4a1d      	ldr	r2, [pc, #116]	; (800f200 <TIM_OC2_SetConfig+0x104>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d00b      	beq.n	800f1a8 <TIM_OC2_SetConfig+0xac>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	4a1c      	ldr	r2, [pc, #112]	; (800f204 <TIM_OC2_SetConfig+0x108>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d007      	beq.n	800f1a8 <TIM_OC2_SetConfig+0xac>
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	4a1b      	ldr	r2, [pc, #108]	; (800f208 <TIM_OC2_SetConfig+0x10c>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d003      	beq.n	800f1a8 <TIM_OC2_SetConfig+0xac>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4a1a      	ldr	r2, [pc, #104]	; (800f20c <TIM_OC2_SetConfig+0x110>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d113      	bne.n	800f1d0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f1ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f1b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	695b      	ldr	r3, [r3, #20]
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	693a      	ldr	r2, [r7, #16]
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	699b      	ldr	r3, [r3, #24]
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	693a      	ldr	r2, [r7, #16]
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	693a      	ldr	r2, [r7, #16]
 800f1d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	68fa      	ldr	r2, [r7, #12]
 800f1da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	685a      	ldr	r2, [r3, #4]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	697a      	ldr	r2, [r7, #20]
 800f1e8:	621a      	str	r2, [r3, #32]
}
 800f1ea:	bf00      	nop
 800f1ec:	371c      	adds	r7, #28
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr
 800f1f6:	bf00      	nop
 800f1f8:	feff8fff 	.word	0xfeff8fff
 800f1fc:	40010000 	.word	0x40010000
 800f200:	40010400 	.word	0x40010400
 800f204:	40014000 	.word	0x40014000
 800f208:	40014400 	.word	0x40014400
 800f20c:	40014800 	.word	0x40014800

0800f210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f210:	b480      	push	{r7}
 800f212:	b087      	sub	sp, #28
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	6a1b      	ldr	r3, [r3, #32]
 800f21e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6a1b      	ldr	r3, [r3, #32]
 800f224:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	69db      	ldr	r3, [r3, #28]
 800f236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f238:	68fa      	ldr	r2, [r7, #12]
 800f23a:	4b33      	ldr	r3, [pc, #204]	; (800f308 <TIM_OC3_SetConfig+0xf8>)
 800f23c:	4013      	ands	r3, r2
 800f23e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	f023 0303 	bic.w	r3, r3, #3
 800f246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	68fa      	ldr	r2, [r7, #12]
 800f24e:	4313      	orrs	r3, r2
 800f250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	689b      	ldr	r3, [r3, #8]
 800f25e:	021b      	lsls	r3, r3, #8
 800f260:	697a      	ldr	r2, [r7, #20]
 800f262:	4313      	orrs	r3, r2
 800f264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	4a28      	ldr	r2, [pc, #160]	; (800f30c <TIM_OC3_SetConfig+0xfc>)
 800f26a:	4293      	cmp	r3, r2
 800f26c:	d003      	beq.n	800f276 <TIM_OC3_SetConfig+0x66>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	4a27      	ldr	r2, [pc, #156]	; (800f310 <TIM_OC3_SetConfig+0x100>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d10d      	bne.n	800f292 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f27c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	68db      	ldr	r3, [r3, #12]
 800f282:	021b      	lsls	r3, r3, #8
 800f284:	697a      	ldr	r2, [r7, #20]
 800f286:	4313      	orrs	r3, r2
 800f288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	4a1d      	ldr	r2, [pc, #116]	; (800f30c <TIM_OC3_SetConfig+0xfc>)
 800f296:	4293      	cmp	r3, r2
 800f298:	d00f      	beq.n	800f2ba <TIM_OC3_SetConfig+0xaa>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	4a1c      	ldr	r2, [pc, #112]	; (800f310 <TIM_OC3_SetConfig+0x100>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	d00b      	beq.n	800f2ba <TIM_OC3_SetConfig+0xaa>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	4a1b      	ldr	r2, [pc, #108]	; (800f314 <TIM_OC3_SetConfig+0x104>)
 800f2a6:	4293      	cmp	r3, r2
 800f2a8:	d007      	beq.n	800f2ba <TIM_OC3_SetConfig+0xaa>
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	4a1a      	ldr	r2, [pc, #104]	; (800f318 <TIM_OC3_SetConfig+0x108>)
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d003      	beq.n	800f2ba <TIM_OC3_SetConfig+0xaa>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	4a19      	ldr	r2, [pc, #100]	; (800f31c <TIM_OC3_SetConfig+0x10c>)
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d113      	bne.n	800f2e2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f2c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	695b      	ldr	r3, [r3, #20]
 800f2ce:	011b      	lsls	r3, r3, #4
 800f2d0:	693a      	ldr	r2, [r7, #16]
 800f2d2:	4313      	orrs	r3, r2
 800f2d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	699b      	ldr	r3, [r3, #24]
 800f2da:	011b      	lsls	r3, r3, #4
 800f2dc:	693a      	ldr	r2, [r7, #16]
 800f2de:	4313      	orrs	r3, r2
 800f2e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	693a      	ldr	r2, [r7, #16]
 800f2e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	68fa      	ldr	r2, [r7, #12]
 800f2ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	685a      	ldr	r2, [r3, #4]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	697a      	ldr	r2, [r7, #20]
 800f2fa:	621a      	str	r2, [r3, #32]
}
 800f2fc:	bf00      	nop
 800f2fe:	371c      	adds	r7, #28
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr
 800f308:	fffeff8f 	.word	0xfffeff8f
 800f30c:	40010000 	.word	0x40010000
 800f310:	40010400 	.word	0x40010400
 800f314:	40014000 	.word	0x40014000
 800f318:	40014400 	.word	0x40014400
 800f31c:	40014800 	.word	0x40014800

0800f320 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f320:	b480      	push	{r7}
 800f322:	b087      	sub	sp, #28
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6a1b      	ldr	r3, [r3, #32]
 800f32e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6a1b      	ldr	r3, [r3, #32]
 800f334:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	685b      	ldr	r3, [r3, #4]
 800f340:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	69db      	ldr	r3, [r3, #28]
 800f346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f348:	68fa      	ldr	r2, [r7, #12]
 800f34a:	4b24      	ldr	r3, [pc, #144]	; (800f3dc <TIM_OC4_SetConfig+0xbc>)
 800f34c:	4013      	ands	r3, r2
 800f34e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	021b      	lsls	r3, r3, #8
 800f35e:	68fa      	ldr	r2, [r7, #12]
 800f360:	4313      	orrs	r3, r2
 800f362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f36a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	689b      	ldr	r3, [r3, #8]
 800f370:	031b      	lsls	r3, r3, #12
 800f372:	693a      	ldr	r2, [r7, #16]
 800f374:	4313      	orrs	r3, r2
 800f376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	4a19      	ldr	r2, [pc, #100]	; (800f3e0 <TIM_OC4_SetConfig+0xc0>)
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d00f      	beq.n	800f3a0 <TIM_OC4_SetConfig+0x80>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	4a18      	ldr	r2, [pc, #96]	; (800f3e4 <TIM_OC4_SetConfig+0xc4>)
 800f384:	4293      	cmp	r3, r2
 800f386:	d00b      	beq.n	800f3a0 <TIM_OC4_SetConfig+0x80>
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	4a17      	ldr	r2, [pc, #92]	; (800f3e8 <TIM_OC4_SetConfig+0xc8>)
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d007      	beq.n	800f3a0 <TIM_OC4_SetConfig+0x80>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	4a16      	ldr	r2, [pc, #88]	; (800f3ec <TIM_OC4_SetConfig+0xcc>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d003      	beq.n	800f3a0 <TIM_OC4_SetConfig+0x80>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	4a15      	ldr	r2, [pc, #84]	; (800f3f0 <TIM_OC4_SetConfig+0xd0>)
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d109      	bne.n	800f3b4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f3a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	695b      	ldr	r3, [r3, #20]
 800f3ac:	019b      	lsls	r3, r3, #6
 800f3ae:	697a      	ldr	r2, [r7, #20]
 800f3b0:	4313      	orrs	r3, r2
 800f3b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	697a      	ldr	r2, [r7, #20]
 800f3b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	68fa      	ldr	r2, [r7, #12]
 800f3be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	685a      	ldr	r2, [r3, #4]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	693a      	ldr	r2, [r7, #16]
 800f3cc:	621a      	str	r2, [r3, #32]
}
 800f3ce:	bf00      	nop
 800f3d0:	371c      	adds	r7, #28
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d8:	4770      	bx	lr
 800f3da:	bf00      	nop
 800f3dc:	feff8fff 	.word	0xfeff8fff
 800f3e0:	40010000 	.word	0x40010000
 800f3e4:	40010400 	.word	0x40010400
 800f3e8:	40014000 	.word	0x40014000
 800f3ec:	40014400 	.word	0x40014400
 800f3f0:	40014800 	.word	0x40014800

0800f3f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f3f4:	b480      	push	{r7}
 800f3f6:	b087      	sub	sp, #28
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6a1b      	ldr	r3, [r3, #32]
 800f402:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6a1b      	ldr	r3, [r3, #32]
 800f408:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f41c:	68fa      	ldr	r2, [r7, #12]
 800f41e:	4b21      	ldr	r3, [pc, #132]	; (800f4a4 <TIM_OC5_SetConfig+0xb0>)
 800f420:	4013      	ands	r3, r2
 800f422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	68fa      	ldr	r2, [r7, #12]
 800f42a:	4313      	orrs	r3, r2
 800f42c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f434:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	689b      	ldr	r3, [r3, #8]
 800f43a:	041b      	lsls	r3, r3, #16
 800f43c:	693a      	ldr	r2, [r7, #16]
 800f43e:	4313      	orrs	r3, r2
 800f440:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	4a18      	ldr	r2, [pc, #96]	; (800f4a8 <TIM_OC5_SetConfig+0xb4>)
 800f446:	4293      	cmp	r3, r2
 800f448:	d00f      	beq.n	800f46a <TIM_OC5_SetConfig+0x76>
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	4a17      	ldr	r2, [pc, #92]	; (800f4ac <TIM_OC5_SetConfig+0xb8>)
 800f44e:	4293      	cmp	r3, r2
 800f450:	d00b      	beq.n	800f46a <TIM_OC5_SetConfig+0x76>
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	4a16      	ldr	r2, [pc, #88]	; (800f4b0 <TIM_OC5_SetConfig+0xbc>)
 800f456:	4293      	cmp	r3, r2
 800f458:	d007      	beq.n	800f46a <TIM_OC5_SetConfig+0x76>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	4a15      	ldr	r2, [pc, #84]	; (800f4b4 <TIM_OC5_SetConfig+0xc0>)
 800f45e:	4293      	cmp	r3, r2
 800f460:	d003      	beq.n	800f46a <TIM_OC5_SetConfig+0x76>
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	4a14      	ldr	r2, [pc, #80]	; (800f4b8 <TIM_OC5_SetConfig+0xc4>)
 800f466:	4293      	cmp	r3, r2
 800f468:	d109      	bne.n	800f47e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f470:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	695b      	ldr	r3, [r3, #20]
 800f476:	021b      	lsls	r3, r3, #8
 800f478:	697a      	ldr	r2, [r7, #20]
 800f47a:	4313      	orrs	r3, r2
 800f47c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	697a      	ldr	r2, [r7, #20]
 800f482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	68fa      	ldr	r2, [r7, #12]
 800f488:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	685a      	ldr	r2, [r3, #4]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	693a      	ldr	r2, [r7, #16]
 800f496:	621a      	str	r2, [r3, #32]
}
 800f498:	bf00      	nop
 800f49a:	371c      	adds	r7, #28
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr
 800f4a4:	fffeff8f 	.word	0xfffeff8f
 800f4a8:	40010000 	.word	0x40010000
 800f4ac:	40010400 	.word	0x40010400
 800f4b0:	40014000 	.word	0x40014000
 800f4b4:	40014400 	.word	0x40014400
 800f4b8:	40014800 	.word	0x40014800

0800f4bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b087      	sub	sp, #28
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
 800f4c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6a1b      	ldr	r3, [r3, #32]
 800f4ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6a1b      	ldr	r3, [r3, #32]
 800f4d0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	685b      	ldr	r3, [r3, #4]
 800f4dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f4e4:	68fa      	ldr	r2, [r7, #12]
 800f4e6:	4b22      	ldr	r3, [pc, #136]	; (800f570 <TIM_OC6_SetConfig+0xb4>)
 800f4e8:	4013      	ands	r3, r2
 800f4ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	021b      	lsls	r3, r3, #8
 800f4f2:	68fa      	ldr	r2, [r7, #12]
 800f4f4:	4313      	orrs	r3, r2
 800f4f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f4fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	689b      	ldr	r3, [r3, #8]
 800f504:	051b      	lsls	r3, r3, #20
 800f506:	693a      	ldr	r2, [r7, #16]
 800f508:	4313      	orrs	r3, r2
 800f50a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	4a19      	ldr	r2, [pc, #100]	; (800f574 <TIM_OC6_SetConfig+0xb8>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d00f      	beq.n	800f534 <TIM_OC6_SetConfig+0x78>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	4a18      	ldr	r2, [pc, #96]	; (800f578 <TIM_OC6_SetConfig+0xbc>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d00b      	beq.n	800f534 <TIM_OC6_SetConfig+0x78>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	4a17      	ldr	r2, [pc, #92]	; (800f57c <TIM_OC6_SetConfig+0xc0>)
 800f520:	4293      	cmp	r3, r2
 800f522:	d007      	beq.n	800f534 <TIM_OC6_SetConfig+0x78>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	4a16      	ldr	r2, [pc, #88]	; (800f580 <TIM_OC6_SetConfig+0xc4>)
 800f528:	4293      	cmp	r3, r2
 800f52a:	d003      	beq.n	800f534 <TIM_OC6_SetConfig+0x78>
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	4a15      	ldr	r2, [pc, #84]	; (800f584 <TIM_OC6_SetConfig+0xc8>)
 800f530:	4293      	cmp	r3, r2
 800f532:	d109      	bne.n	800f548 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f53a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	695b      	ldr	r3, [r3, #20]
 800f540:	029b      	lsls	r3, r3, #10
 800f542:	697a      	ldr	r2, [r7, #20]
 800f544:	4313      	orrs	r3, r2
 800f546:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	697a      	ldr	r2, [r7, #20]
 800f54c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	68fa      	ldr	r2, [r7, #12]
 800f552:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	685a      	ldr	r2, [r3, #4]
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	693a      	ldr	r2, [r7, #16]
 800f560:	621a      	str	r2, [r3, #32]
}
 800f562:	bf00      	nop
 800f564:	371c      	adds	r7, #28
 800f566:	46bd      	mov	sp, r7
 800f568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56c:	4770      	bx	lr
 800f56e:	bf00      	nop
 800f570:	feff8fff 	.word	0xfeff8fff
 800f574:	40010000 	.word	0x40010000
 800f578:	40010400 	.word	0x40010400
 800f57c:	40014000 	.word	0x40014000
 800f580:	40014400 	.word	0x40014400
 800f584:	40014800 	.word	0x40014800

0800f588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f588:	b480      	push	{r7}
 800f58a:	b087      	sub	sp, #28
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	60b9      	str	r1, [r7, #8]
 800f592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	6a1b      	ldr	r3, [r3, #32]
 800f598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	6a1b      	ldr	r3, [r3, #32]
 800f59e:	f023 0201 	bic.w	r2, r3, #1
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	699b      	ldr	r3, [r3, #24]
 800f5aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f5b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	011b      	lsls	r3, r3, #4
 800f5b8:	693a      	ldr	r2, [r7, #16]
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	f023 030a 	bic.w	r3, r3, #10
 800f5c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f5c6:	697a      	ldr	r2, [r7, #20]
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	4313      	orrs	r3, r2
 800f5cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	693a      	ldr	r2, [r7, #16]
 800f5d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	697a      	ldr	r2, [r7, #20]
 800f5d8:	621a      	str	r2, [r3, #32]
}
 800f5da:	bf00      	nop
 800f5dc:	371c      	adds	r7, #28
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e4:	4770      	bx	lr

0800f5e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f5e6:	b480      	push	{r7}
 800f5e8:	b087      	sub	sp, #28
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	60f8      	str	r0, [r7, #12]
 800f5ee:	60b9      	str	r1, [r7, #8]
 800f5f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	6a1b      	ldr	r3, [r3, #32]
 800f5f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	6a1b      	ldr	r3, [r3, #32]
 800f5fc:	f023 0210 	bic.w	r2, r3, #16
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	699b      	ldr	r3, [r3, #24]
 800f608:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f610:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	031b      	lsls	r3, r3, #12
 800f616:	693a      	ldr	r2, [r7, #16]
 800f618:	4313      	orrs	r3, r2
 800f61a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f622:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	011b      	lsls	r3, r3, #4
 800f628:	697a      	ldr	r2, [r7, #20]
 800f62a:	4313      	orrs	r3, r2
 800f62c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	693a      	ldr	r2, [r7, #16]
 800f632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	697a      	ldr	r2, [r7, #20]
 800f638:	621a      	str	r2, [r3, #32]
}
 800f63a:	bf00      	nop
 800f63c:	371c      	adds	r7, #28
 800f63e:	46bd      	mov	sp, r7
 800f640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f644:	4770      	bx	lr
	...

0800f648 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f648:	b480      	push	{r7}
 800f64a:	b085      	sub	sp, #20
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
 800f650:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	689b      	ldr	r3, [r3, #8]
 800f656:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f658:	68fa      	ldr	r2, [r7, #12]
 800f65a:	4b09      	ldr	r3, [pc, #36]	; (800f680 <TIM_ITRx_SetConfig+0x38>)
 800f65c:	4013      	ands	r3, r2
 800f65e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f660:	683a      	ldr	r2, [r7, #0]
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	4313      	orrs	r3, r2
 800f666:	f043 0307 	orr.w	r3, r3, #7
 800f66a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	68fa      	ldr	r2, [r7, #12]
 800f670:	609a      	str	r2, [r3, #8]
}
 800f672:	bf00      	nop
 800f674:	3714      	adds	r7, #20
 800f676:	46bd      	mov	sp, r7
 800f678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67c:	4770      	bx	lr
 800f67e:	bf00      	nop
 800f680:	ffcfff8f 	.word	0xffcfff8f

0800f684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f684:	b480      	push	{r7}
 800f686:	b087      	sub	sp, #28
 800f688:	af00      	add	r7, sp, #0
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	60b9      	str	r1, [r7, #8]
 800f68e:	607a      	str	r2, [r7, #4]
 800f690:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	689b      	ldr	r3, [r3, #8]
 800f696:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f69e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	021a      	lsls	r2, r3, #8
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	431a      	orrs	r2, r3
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	4313      	orrs	r3, r2
 800f6ac:	697a      	ldr	r2, [r7, #20]
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	697a      	ldr	r2, [r7, #20]
 800f6b6:	609a      	str	r2, [r3, #8]
}
 800f6b8:	bf00      	nop
 800f6ba:	371c      	adds	r7, #28
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr

0800f6c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b087      	sub	sp, #28
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	60b9      	str	r1, [r7, #8]
 800f6ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	f003 031f 	and.w	r3, r3, #31
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f6dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	6a1a      	ldr	r2, [r3, #32]
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	43db      	mvns	r3, r3
 800f6e6:	401a      	ands	r2, r3
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	6a1a      	ldr	r2, [r3, #32]
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	f003 031f 	and.w	r3, r3, #31
 800f6f6:	6879      	ldr	r1, [r7, #4]
 800f6f8:	fa01 f303 	lsl.w	r3, r1, r3
 800f6fc:	431a      	orrs	r2, r3
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	621a      	str	r2, [r3, #32]
}
 800f702:	bf00      	nop
 800f704:	371c      	adds	r7, #28
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr
	...

0800f710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f710:	b480      	push	{r7}
 800f712:	b085      	sub	sp, #20
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
 800f718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f720:	2b01      	cmp	r3, #1
 800f722:	d101      	bne.n	800f728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f724:	2302      	movs	r3, #2
 800f726:	e06d      	b.n	800f804 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2201      	movs	r2, #1
 800f72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2202      	movs	r2, #2
 800f734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	689b      	ldr	r3, [r3, #8]
 800f746:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	4a30      	ldr	r2, [pc, #192]	; (800f810 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d004      	beq.n	800f75c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	4a2f      	ldr	r2, [pc, #188]	; (800f814 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f758:	4293      	cmp	r3, r2
 800f75a:	d108      	bne.n	800f76e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f762:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	68fa      	ldr	r2, [r7, #12]
 800f76a:	4313      	orrs	r3, r2
 800f76c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f774:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	68fa      	ldr	r2, [r7, #12]
 800f77c:	4313      	orrs	r3, r2
 800f77e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	68fa      	ldr	r2, [r7, #12]
 800f786:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	4a20      	ldr	r2, [pc, #128]	; (800f810 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d022      	beq.n	800f7d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f79a:	d01d      	beq.n	800f7d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4a1d      	ldr	r2, [pc, #116]	; (800f818 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	d018      	beq.n	800f7d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	4a1c      	ldr	r2, [pc, #112]	; (800f81c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d013      	beq.n	800f7d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	4a1a      	ldr	r2, [pc, #104]	; (800f820 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d00e      	beq.n	800f7d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	4a15      	ldr	r2, [pc, #84]	; (800f814 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d009      	beq.n	800f7d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	4a16      	ldr	r2, [pc, #88]	; (800f824 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d004      	beq.n	800f7d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	4a15      	ldr	r2, [pc, #84]	; (800f828 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f7d4:	4293      	cmp	r3, r2
 800f7d6:	d10c      	bne.n	800f7f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f7de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	689b      	ldr	r3, [r3, #8]
 800f7e4:	68ba      	ldr	r2, [r7, #8]
 800f7e6:	4313      	orrs	r3, r2
 800f7e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	68ba      	ldr	r2, [r7, #8]
 800f7f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2201      	movs	r2, #1
 800f7f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f802:	2300      	movs	r3, #0
}
 800f804:	4618      	mov	r0, r3
 800f806:	3714      	adds	r7, #20
 800f808:	46bd      	mov	sp, r7
 800f80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80e:	4770      	bx	lr
 800f810:	40010000 	.word	0x40010000
 800f814:	40010400 	.word	0x40010400
 800f818:	40000400 	.word	0x40000400
 800f81c:	40000800 	.word	0x40000800
 800f820:	40000c00 	.word	0x40000c00
 800f824:	40001800 	.word	0x40001800
 800f828:	40014000 	.word	0x40014000

0800f82c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b085      	sub	sp, #20
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f836:	2300      	movs	r3, #0
 800f838:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f840:	2b01      	cmp	r3, #1
 800f842:	d101      	bne.n	800f848 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f844:	2302      	movs	r3, #2
 800f846:	e065      	b.n	800f914 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2201      	movs	r2, #1
 800f84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	68db      	ldr	r3, [r3, #12]
 800f85a:	4313      	orrs	r3, r2
 800f85c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	4313      	orrs	r3, r2
 800f86a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	685b      	ldr	r3, [r3, #4]
 800f876:	4313      	orrs	r3, r2
 800f878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	4313      	orrs	r3, r2
 800f886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	691b      	ldr	r3, [r3, #16]
 800f892:	4313      	orrs	r3, r2
 800f894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	695b      	ldr	r3, [r3, #20]
 800f8a0:	4313      	orrs	r3, r2
 800f8a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8ae:	4313      	orrs	r3, r2
 800f8b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	699b      	ldr	r3, [r3, #24]
 800f8bc:	041b      	lsls	r3, r3, #16
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	4a16      	ldr	r2, [pc, #88]	; (800f920 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	d004      	beq.n	800f8d6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	4a14      	ldr	r2, [pc, #80]	; (800f924 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d115      	bne.n	800f902 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8e0:	051b      	lsls	r3, r3, #20
 800f8e2:	4313      	orrs	r3, r2
 800f8e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	69db      	ldr	r3, [r3, #28]
 800f8f0:	4313      	orrs	r3, r2
 800f8f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	6a1b      	ldr	r3, [r3, #32]
 800f8fe:	4313      	orrs	r3, r2
 800f900:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	68fa      	ldr	r2, [r7, #12]
 800f908:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2200      	movs	r2, #0
 800f90e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f912:	2300      	movs	r3, #0
}
 800f914:	4618      	mov	r0, r3
 800f916:	3714      	adds	r7, #20
 800f918:	46bd      	mov	sp, r7
 800f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91e:	4770      	bx	lr
 800f920:	40010000 	.word	0x40010000
 800f924:	40010400 	.word	0x40010400

0800f928 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f930:	bf00      	nop
 800f932:	370c      	adds	r7, #12
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr

0800f93c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f944:	bf00      	nop
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f958:	bf00      	nop
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr

0800f964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b082      	sub	sp, #8
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d101      	bne.n	800f976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f972:	2301      	movs	r3, #1
 800f974:	e042      	b.n	800f9fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d106      	bne.n	800f98e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2200      	movs	r2, #0
 800f984:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f7f3 fbbf 	bl	800310c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2224      	movs	r2, #36	; 0x24
 800f992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f022 0201 	bic.w	r2, r2, #1
 800f9a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d002      	beq.n	800f9b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f001 fb0c 	bl	8010fcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f000 fda1 	bl	80104fc <UART_SetConfig>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	2b01      	cmp	r3, #1
 800f9be:	d101      	bne.n	800f9c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	e01b      	b.n	800f9fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	685a      	ldr	r2, [r3, #4]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f9d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	689a      	ldr	r2, [r3, #8]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f9e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	681a      	ldr	r2, [r3, #0]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	f042 0201 	orr.w	r2, r2, #1
 800f9f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f001 fb8b 	bl	8011110 <UART_CheckIdleState>
 800f9fa:	4603      	mov	r3, r0
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3708      	adds	r7, #8
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b08a      	sub	sp, #40	; 0x28
 800fa08:	af02      	add	r7, sp, #8
 800fa0a:	60f8      	str	r0, [r7, #12]
 800fa0c:	60b9      	str	r1, [r7, #8]
 800fa0e:	603b      	str	r3, [r7, #0]
 800fa10:	4613      	mov	r3, r2
 800fa12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa1a:	2b20      	cmp	r3, #32
 800fa1c:	d17b      	bne.n	800fb16 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d002      	beq.n	800fa2a <HAL_UART_Transmit+0x26>
 800fa24:	88fb      	ldrh	r3, [r7, #6]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d101      	bne.n	800fa2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	e074      	b.n	800fb18 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	2200      	movs	r2, #0
 800fa32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	2221      	movs	r2, #33	; 0x21
 800fa3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fa3e:	f7f3 fe9f 	bl	8003780 <HAL_GetTick>
 800fa42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	88fa      	ldrh	r2, [r7, #6]
 800fa48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	88fa      	ldrh	r2, [r7, #6]
 800fa50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	689b      	ldr	r3, [r3, #8]
 800fa58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa5c:	d108      	bne.n	800fa70 <HAL_UART_Transmit+0x6c>
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	691b      	ldr	r3, [r3, #16]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d104      	bne.n	800fa70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fa66:	2300      	movs	r3, #0
 800fa68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	61bb      	str	r3, [r7, #24]
 800fa6e:	e003      	b.n	800fa78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fa74:	2300      	movs	r3, #0
 800fa76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fa78:	e030      	b.n	800fadc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	9300      	str	r3, [sp, #0]
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	2200      	movs	r2, #0
 800fa82:	2180      	movs	r1, #128	; 0x80
 800fa84:	68f8      	ldr	r0, [r7, #12]
 800fa86:	f001 fbed 	bl	8011264 <UART_WaitOnFlagUntilTimeout>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d005      	beq.n	800fa9c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	2220      	movs	r2, #32
 800fa94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800fa98:	2303      	movs	r3, #3
 800fa9a:	e03d      	b.n	800fb18 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800fa9c:	69fb      	ldr	r3, [r7, #28]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d10b      	bne.n	800faba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800faa2:	69bb      	ldr	r3, [r7, #24]
 800faa4:	881b      	ldrh	r3, [r3, #0]
 800faa6:	461a      	mov	r2, r3
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fab0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fab2:	69bb      	ldr	r3, [r7, #24]
 800fab4:	3302      	adds	r3, #2
 800fab6:	61bb      	str	r3, [r7, #24]
 800fab8:	e007      	b.n	800faca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800faba:	69fb      	ldr	r3, [r7, #28]
 800fabc:	781a      	ldrb	r2, [r3, #0]
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fac4:	69fb      	ldr	r3, [r7, #28]
 800fac6:	3301      	adds	r3, #1
 800fac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fad0:	b29b      	uxth	r3, r3
 800fad2:	3b01      	subs	r3, #1
 800fad4:	b29a      	uxth	r2, r3
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fae2:	b29b      	uxth	r3, r3
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d1c8      	bne.n	800fa7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	9300      	str	r3, [sp, #0]
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	2200      	movs	r2, #0
 800faf0:	2140      	movs	r1, #64	; 0x40
 800faf2:	68f8      	ldr	r0, [r7, #12]
 800faf4:	f001 fbb6 	bl	8011264 <UART_WaitOnFlagUntilTimeout>
 800faf8:	4603      	mov	r3, r0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d005      	beq.n	800fb0a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	2220      	movs	r2, #32
 800fb02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800fb06:	2303      	movs	r3, #3
 800fb08:	e006      	b.n	800fb18 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	2220      	movs	r2, #32
 800fb0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fb12:	2300      	movs	r3, #0
 800fb14:	e000      	b.n	800fb18 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800fb16:	2302      	movs	r3, #2
  }
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3720      	adds	r7, #32
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b08a      	sub	sp, #40	; 0x28
 800fb24:	af02      	add	r7, sp, #8
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	603b      	str	r3, [r7, #0]
 800fb2c:	4613      	mov	r3, r2
 800fb2e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb36:	2b20      	cmp	r3, #32
 800fb38:	f040 80b5 	bne.w	800fca6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d002      	beq.n	800fb48 <HAL_UART_Receive+0x28>
 800fb42:	88fb      	ldrh	r3, [r7, #6]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d101      	bne.n	800fb4c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fb48:	2301      	movs	r3, #1
 800fb4a:	e0ad      	b.n	800fca8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	2222      	movs	r2, #34	; 0x22
 800fb58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fb62:	f7f3 fe0d 	bl	8003780 <HAL_GetTick>
 800fb66:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	88fa      	ldrh	r2, [r7, #6]
 800fb6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	88fa      	ldrh	r2, [r7, #6]
 800fb74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	689b      	ldr	r3, [r3, #8]
 800fb7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb80:	d10e      	bne.n	800fba0 <HAL_UART_Receive+0x80>
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	691b      	ldr	r3, [r3, #16]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d105      	bne.n	800fb96 <HAL_UART_Receive+0x76>
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fb90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb94:	e02d      	b.n	800fbf2 <HAL_UART_Receive+0xd2>
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	22ff      	movs	r2, #255	; 0xff
 800fb9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fb9e:	e028      	b.n	800fbf2 <HAL_UART_Receive+0xd2>
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	689b      	ldr	r3, [r3, #8]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d10d      	bne.n	800fbc4 <HAL_UART_Receive+0xa4>
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	691b      	ldr	r3, [r3, #16]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d104      	bne.n	800fbba <HAL_UART_Receive+0x9a>
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	22ff      	movs	r2, #255	; 0xff
 800fbb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbb8:	e01b      	b.n	800fbf2 <HAL_UART_Receive+0xd2>
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	227f      	movs	r2, #127	; 0x7f
 800fbbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbc2:	e016      	b.n	800fbf2 <HAL_UART_Receive+0xd2>
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	689b      	ldr	r3, [r3, #8]
 800fbc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fbcc:	d10d      	bne.n	800fbea <HAL_UART_Receive+0xca>
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	691b      	ldr	r3, [r3, #16]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d104      	bne.n	800fbe0 <HAL_UART_Receive+0xc0>
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	227f      	movs	r2, #127	; 0x7f
 800fbda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbde:	e008      	b.n	800fbf2 <HAL_UART_Receive+0xd2>
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	223f      	movs	r2, #63	; 0x3f
 800fbe4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fbe8:	e003      	b.n	800fbf2 <HAL_UART_Receive+0xd2>
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	2200      	movs	r2, #0
 800fbee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbf8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc02:	d108      	bne.n	800fc16 <HAL_UART_Receive+0xf6>
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	691b      	ldr	r3, [r3, #16]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d104      	bne.n	800fc16 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	61bb      	str	r3, [r7, #24]
 800fc14:	e003      	b.n	800fc1e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800fc1e:	e036      	b.n	800fc8e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	9300      	str	r3, [sp, #0]
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	2200      	movs	r2, #0
 800fc28:	2120      	movs	r1, #32
 800fc2a:	68f8      	ldr	r0, [r7, #12]
 800fc2c:	f001 fb1a 	bl	8011264 <UART_WaitOnFlagUntilTimeout>
 800fc30:	4603      	mov	r3, r0
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d005      	beq.n	800fc42 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2220      	movs	r2, #32
 800fc3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800fc3e:	2303      	movs	r3, #3
 800fc40:	e032      	b.n	800fca8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800fc42:	69fb      	ldr	r3, [r7, #28]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d10c      	bne.n	800fc62 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc4e:	b29a      	uxth	r2, r3
 800fc50:	8a7b      	ldrh	r3, [r7, #18]
 800fc52:	4013      	ands	r3, r2
 800fc54:	b29a      	uxth	r2, r3
 800fc56:	69bb      	ldr	r3, [r7, #24]
 800fc58:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fc5a:	69bb      	ldr	r3, [r7, #24]
 800fc5c:	3302      	adds	r3, #2
 800fc5e:	61bb      	str	r3, [r7, #24]
 800fc60:	e00c      	b.n	800fc7c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc68:	b2da      	uxtb	r2, r3
 800fc6a:	8a7b      	ldrh	r3, [r7, #18]
 800fc6c:	b2db      	uxtb	r3, r3
 800fc6e:	4013      	ands	r3, r2
 800fc70:	b2da      	uxtb	r2, r3
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800fc76:	69fb      	ldr	r3, [r7, #28]
 800fc78:	3301      	adds	r3, #1
 800fc7a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	3b01      	subs	r3, #1
 800fc86:	b29a      	uxth	r2, r3
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc94:	b29b      	uxth	r3, r3
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d1c2      	bne.n	800fc20 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	2220      	movs	r2, #32
 800fc9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800fca2:	2300      	movs	r3, #0
 800fca4:	e000      	b.n	800fca8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800fca6:	2302      	movs	r3, #2
  }
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3720      	adds	r7, #32
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}

0800fcb0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b08a      	sub	sp, #40	; 0x28
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	60f8      	str	r0, [r7, #12]
 800fcb8:	60b9      	str	r1, [r7, #8]
 800fcba:	4613      	mov	r3, r2
 800fcbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fcc4:	2b20      	cmp	r3, #32
 800fcc6:	d137      	bne.n	800fd38 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d002      	beq.n	800fcd4 <HAL_UART_Receive_IT+0x24>
 800fcce:	88fb      	ldrh	r3, [r7, #6]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d101      	bne.n	800fcd8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	e030      	b.n	800fd3a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	4a18      	ldr	r2, [pc, #96]	; (800fd44 <HAL_UART_Receive_IT+0x94>)
 800fce4:	4293      	cmp	r3, r2
 800fce6:	d01f      	beq.n	800fd28 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d018      	beq.n	800fd28 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	e853 3f00 	ldrex	r3, [r3]
 800fd02:	613b      	str	r3, [r7, #16]
   return(result);
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fd0a:	627b      	str	r3, [r7, #36]	; 0x24
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	461a      	mov	r2, r3
 800fd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd14:	623b      	str	r3, [r7, #32]
 800fd16:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd18:	69f9      	ldr	r1, [r7, #28]
 800fd1a:	6a3a      	ldr	r2, [r7, #32]
 800fd1c:	e841 2300 	strex	r3, r2, [r1]
 800fd20:	61bb      	str	r3, [r7, #24]
   return(result);
 800fd22:	69bb      	ldr	r3, [r7, #24]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d1e6      	bne.n	800fcf6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800fd28:	88fb      	ldrh	r3, [r7, #6]
 800fd2a:	461a      	mov	r2, r3
 800fd2c:	68b9      	ldr	r1, [r7, #8]
 800fd2e:	68f8      	ldr	r0, [r7, #12]
 800fd30:	f001 fb06 	bl	8011340 <UART_Start_Receive_IT>
 800fd34:	4603      	mov	r3, r0
 800fd36:	e000      	b.n	800fd3a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fd38:	2302      	movs	r3, #2
  }
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3728      	adds	r7, #40	; 0x28
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}
 800fd42:	bf00      	nop
 800fd44:	58000c00 	.word	0x58000c00

0800fd48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b0ba      	sub	sp, #232	; 0xe8
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	69db      	ldr	r3, [r3, #28]
 800fd56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	689b      	ldr	r3, [r3, #8]
 800fd6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fd6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800fd72:	f640 030f 	movw	r3, #2063	; 0x80f
 800fd76:	4013      	ands	r3, r2
 800fd78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800fd7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d11b      	bne.n	800fdbc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fd84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd88:	f003 0320 	and.w	r3, r3, #32
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d015      	beq.n	800fdbc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fd90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fd94:	f003 0320 	and.w	r3, r3, #32
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d105      	bne.n	800fda8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fd9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fda0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d009      	beq.n	800fdbc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	f000 8377 	beq.w	80104a0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	4798      	blx	r3
      }
      return;
 800fdba:	e371      	b.n	80104a0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fdbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	f000 8123 	beq.w	801000c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fdc6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800fdca:	4b8d      	ldr	r3, [pc, #564]	; (8010000 <HAL_UART_IRQHandler+0x2b8>)
 800fdcc:	4013      	ands	r3, r2
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d106      	bne.n	800fde0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fdd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800fdd6:	4b8b      	ldr	r3, [pc, #556]	; (8010004 <HAL_UART_IRQHandler+0x2bc>)
 800fdd8:	4013      	ands	r3, r2
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	f000 8116 	beq.w	801000c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fde0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fde4:	f003 0301 	and.w	r3, r3, #1
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d011      	beq.n	800fe10 <HAL_UART_IRQHandler+0xc8>
 800fdec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fdf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d00b      	beq.n	800fe10 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	2201      	movs	r2, #1
 800fdfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe06:	f043 0201 	orr.w	r2, r3, #1
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe14:	f003 0302 	and.w	r3, r3, #2
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d011      	beq.n	800fe40 <HAL_UART_IRQHandler+0xf8>
 800fe1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fe20:	f003 0301 	and.w	r3, r3, #1
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d00b      	beq.n	800fe40 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	2202      	movs	r2, #2
 800fe2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe36:	f043 0204 	orr.w	r2, r3, #4
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe44:	f003 0304 	and.w	r3, r3, #4
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d011      	beq.n	800fe70 <HAL_UART_IRQHandler+0x128>
 800fe4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fe50:	f003 0301 	and.w	r3, r3, #1
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d00b      	beq.n	800fe70 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	2204      	movs	r2, #4
 800fe5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe66:	f043 0202 	orr.w	r2, r3, #2
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fe70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe74:	f003 0308 	and.w	r3, r3, #8
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d017      	beq.n	800feac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fe7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe80:	f003 0320 	and.w	r3, r3, #32
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d105      	bne.n	800fe94 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fe88:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800fe8c:	4b5c      	ldr	r3, [pc, #368]	; (8010000 <HAL_UART_IRQHandler+0x2b8>)
 800fe8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d00b      	beq.n	800feac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	2208      	movs	r2, #8
 800fe9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fea2:	f043 0208 	orr.w	r2, r3, #8
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800feac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800feb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d012      	beq.n	800fede <HAL_UART_IRQHandler+0x196>
 800feb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800febc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d00c      	beq.n	800fede <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fecc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fed4:	f043 0220 	orr.w	r2, r3, #32
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	f000 82dd 	beq.w	80104a4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800feea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800feee:	f003 0320 	and.w	r3, r3, #32
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d013      	beq.n	800ff1e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fefa:	f003 0320 	and.w	r3, r3, #32
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d105      	bne.n	800ff0e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ff02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d007      	beq.n	800ff1e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d003      	beq.n	800ff1e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	689b      	ldr	r3, [r3, #8]
 800ff2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff32:	2b40      	cmp	r3, #64	; 0x40
 800ff34:	d005      	beq.n	800ff42 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ff36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ff3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d054      	beq.n	800ffec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f001 fb1e 	bl	8011584 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	689b      	ldr	r3, [r3, #8]
 800ff4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff52:	2b40      	cmp	r3, #64	; 0x40
 800ff54:	d146      	bne.n	800ffe4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	3308      	adds	r3, #8
 800ff5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff64:	e853 3f00 	ldrex	r3, [r3]
 800ff68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ff6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ff70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	3308      	adds	r3, #8
 800ff7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ff82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ff86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ff8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ff92:	e841 2300 	strex	r3, r2, [r1]
 800ff96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ff9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d1d9      	bne.n	800ff56 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d017      	beq.n	800ffdc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffb2:	4a15      	ldr	r2, [pc, #84]	; (8010008 <HAL_UART_IRQHandler+0x2c0>)
 800ffb4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7f6 fdeb 	bl	8006b98 <HAL_DMA_Abort_IT>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d019      	beq.n	800fffc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffd0:	687a      	ldr	r2, [r7, #4]
 800ffd2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ffd6:	4610      	mov	r0, r2
 800ffd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffda:	e00f      	b.n	800fffc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f000 fa77 	bl	80104d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffe2:	e00b      	b.n	800fffc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f000 fa73 	bl	80104d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ffea:	e007      	b.n	800fffc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f000 fa6f 	bl	80104d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2200      	movs	r2, #0
 800fff6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800fffa:	e253      	b.n	80104a4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fffc:	bf00      	nop
    return;
 800fffe:	e251      	b.n	80104a4 <HAL_UART_IRQHandler+0x75c>
 8010000:	10000001 	.word	0x10000001
 8010004:	04000120 	.word	0x04000120
 8010008:	08011651 	.word	0x08011651

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010010:	2b01      	cmp	r3, #1
 8010012:	f040 81e7 	bne.w	80103e4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801001a:	f003 0310 	and.w	r3, r3, #16
 801001e:	2b00      	cmp	r3, #0
 8010020:	f000 81e0 	beq.w	80103e4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010028:	f003 0310 	and.w	r3, r3, #16
 801002c:	2b00      	cmp	r3, #0
 801002e:	f000 81d9 	beq.w	80103e4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	2210      	movs	r2, #16
 8010038:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	689b      	ldr	r3, [r3, #8]
 8010040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010044:	2b40      	cmp	r3, #64	; 0x40
 8010046:	f040 8151 	bne.w	80102ec <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	4a96      	ldr	r2, [pc, #600]	; (80102ac <HAL_UART_IRQHandler+0x564>)
 8010054:	4293      	cmp	r3, r2
 8010056:	d068      	beq.n	801012a <HAL_UART_IRQHandler+0x3e2>
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4a93      	ldr	r2, [pc, #588]	; (80102b0 <HAL_UART_IRQHandler+0x568>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d061      	beq.n	801012a <HAL_UART_IRQHandler+0x3e2>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	4a91      	ldr	r2, [pc, #580]	; (80102b4 <HAL_UART_IRQHandler+0x56c>)
 8010070:	4293      	cmp	r3, r2
 8010072:	d05a      	beq.n	801012a <HAL_UART_IRQHandler+0x3e2>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	4a8e      	ldr	r2, [pc, #568]	; (80102b8 <HAL_UART_IRQHandler+0x570>)
 801007e:	4293      	cmp	r3, r2
 8010080:	d053      	beq.n	801012a <HAL_UART_IRQHandler+0x3e2>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	4a8c      	ldr	r2, [pc, #560]	; (80102bc <HAL_UART_IRQHandler+0x574>)
 801008c:	4293      	cmp	r3, r2
 801008e:	d04c      	beq.n	801012a <HAL_UART_IRQHandler+0x3e2>
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	4a89      	ldr	r2, [pc, #548]	; (80102c0 <HAL_UART_IRQHandler+0x578>)
 801009a:	4293      	cmp	r3, r2
 801009c:	d045      	beq.n	801012a <HAL_UART_IRQHandler+0x3e2>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	4a87      	ldr	r2, [pc, #540]	; (80102c4 <HAL_UART_IRQHandler+0x57c>)
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d03e      	beq.n	801012a <HAL_UART_IRQHandler+0x3e2>
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	4a84      	ldr	r2, [pc, #528]	; (80102c8 <HAL_UART_IRQHandler+0x580>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d037      	beq.n	801012a <HAL_UART_IRQHandler+0x3e2>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	4a82      	ldr	r2, [pc, #520]	; (80102cc <HAL_UART_IRQHandler+0x584>)
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d030      	beq.n	801012a <HAL_UART_IRQHandler+0x3e2>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	4a7f      	ldr	r2, [pc, #508]	; (80102d0 <HAL_UART_IRQHandler+0x588>)
 80100d2:	4293      	cmp	r3, r2
 80100d4:	d029      	beq.n	801012a <HAL_UART_IRQHandler+0x3e2>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	4a7d      	ldr	r2, [pc, #500]	; (80102d4 <HAL_UART_IRQHandler+0x58c>)
 80100e0:	4293      	cmp	r3, r2
 80100e2:	d022      	beq.n	801012a <HAL_UART_IRQHandler+0x3e2>
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	4a7a      	ldr	r2, [pc, #488]	; (80102d8 <HAL_UART_IRQHandler+0x590>)
 80100ee:	4293      	cmp	r3, r2
 80100f0:	d01b      	beq.n	801012a <HAL_UART_IRQHandler+0x3e2>
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	4a78      	ldr	r2, [pc, #480]	; (80102dc <HAL_UART_IRQHandler+0x594>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d014      	beq.n	801012a <HAL_UART_IRQHandler+0x3e2>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4a75      	ldr	r2, [pc, #468]	; (80102e0 <HAL_UART_IRQHandler+0x598>)
 801010a:	4293      	cmp	r3, r2
 801010c:	d00d      	beq.n	801012a <HAL_UART_IRQHandler+0x3e2>
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	4a73      	ldr	r2, [pc, #460]	; (80102e4 <HAL_UART_IRQHandler+0x59c>)
 8010118:	4293      	cmp	r3, r2
 801011a:	d006      	beq.n	801012a <HAL_UART_IRQHandler+0x3e2>
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	4a70      	ldr	r2, [pc, #448]	; (80102e8 <HAL_UART_IRQHandler+0x5a0>)
 8010126:	4293      	cmp	r3, r2
 8010128:	d106      	bne.n	8010138 <HAL_UART_IRQHandler+0x3f0>
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	b29b      	uxth	r3, r3
 8010136:	e005      	b.n	8010144 <HAL_UART_IRQHandler+0x3fc>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	b29b      	uxth	r3, r3
 8010144:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010148:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801014c:	2b00      	cmp	r3, #0
 801014e:	f000 81ab 	beq.w	80104a8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010158:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801015c:	429a      	cmp	r2, r3
 801015e:	f080 81a3 	bcs.w	80104a8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010168:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010172:	69db      	ldr	r3, [r3, #28]
 8010174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010178:	f000 8087 	beq.w	801028a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010184:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010188:	e853 3f00 	ldrex	r3, [r3]
 801018c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010190:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010198:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	461a      	mov	r2, r3
 80101a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80101a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80101aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80101b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80101b6:	e841 2300 	strex	r3, r2, [r1]
 80101ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80101be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d1da      	bne.n	801017c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	3308      	adds	r3, #8
 80101cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80101d0:	e853 3f00 	ldrex	r3, [r3]
 80101d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80101d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80101d8:	f023 0301 	bic.w	r3, r3, #1
 80101dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	3308      	adds	r3, #8
 80101e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80101ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80101ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80101f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80101f6:	e841 2300 	strex	r3, r2, [r1]
 80101fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80101fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d1e1      	bne.n	80101c6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	3308      	adds	r3, #8
 8010208:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801020a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801020c:	e853 3f00 	ldrex	r3, [r3]
 8010210:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	3308      	adds	r3, #8
 8010222:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010226:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010228:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801022a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801022c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801022e:	e841 2300 	strex	r3, r2, [r1]
 8010232:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010236:	2b00      	cmp	r3, #0
 8010238:	d1e3      	bne.n	8010202 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	2220      	movs	r2, #32
 801023e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	2200      	movs	r2, #0
 8010246:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801024e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010250:	e853 3f00 	ldrex	r3, [r3]
 8010254:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010258:	f023 0310 	bic.w	r3, r3, #16
 801025c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	461a      	mov	r2, r3
 8010266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801026a:	65bb      	str	r3, [r7, #88]	; 0x58
 801026c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801026e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010270:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010272:	e841 2300 	strex	r3, r2, [r1]
 8010276:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801027a:	2b00      	cmp	r3, #0
 801027c:	d1e4      	bne.n	8010248 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010284:	4618      	mov	r0, r3
 8010286:	f7f6 f969 	bl	800655c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2202      	movs	r2, #2
 801028e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801029c:	b29b      	uxth	r3, r3
 801029e:	1ad3      	subs	r3, r2, r3
 80102a0:	b29b      	uxth	r3, r3
 80102a2:	4619      	mov	r1, r3
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f000 f91d 	bl	80104e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80102aa:	e0fd      	b.n	80104a8 <HAL_UART_IRQHandler+0x760>
 80102ac:	40020010 	.word	0x40020010
 80102b0:	40020028 	.word	0x40020028
 80102b4:	40020040 	.word	0x40020040
 80102b8:	40020058 	.word	0x40020058
 80102bc:	40020070 	.word	0x40020070
 80102c0:	40020088 	.word	0x40020088
 80102c4:	400200a0 	.word	0x400200a0
 80102c8:	400200b8 	.word	0x400200b8
 80102cc:	40020410 	.word	0x40020410
 80102d0:	40020428 	.word	0x40020428
 80102d4:	40020440 	.word	0x40020440
 80102d8:	40020458 	.word	0x40020458
 80102dc:	40020470 	.word	0x40020470
 80102e0:	40020488 	.word	0x40020488
 80102e4:	400204a0 	.word	0x400204a0
 80102e8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80102f8:	b29b      	uxth	r3, r3
 80102fa:	1ad3      	subs	r3, r2, r3
 80102fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010306:	b29b      	uxth	r3, r3
 8010308:	2b00      	cmp	r3, #0
 801030a:	f000 80cf 	beq.w	80104ac <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 801030e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010312:	2b00      	cmp	r3, #0
 8010314:	f000 80ca 	beq.w	80104ac <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801031e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010320:	e853 3f00 	ldrex	r3, [r3]
 8010324:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801032c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	461a      	mov	r2, r3
 8010336:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801033a:	647b      	str	r3, [r7, #68]	; 0x44
 801033c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801033e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010342:	e841 2300 	strex	r3, r2, [r1]
 8010346:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801034a:	2b00      	cmp	r3, #0
 801034c:	d1e4      	bne.n	8010318 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	3308      	adds	r3, #8
 8010354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010358:	e853 3f00 	ldrex	r3, [r3]
 801035c:	623b      	str	r3, [r7, #32]
   return(result);
 801035e:	6a3a      	ldr	r2, [r7, #32]
 8010360:	4b55      	ldr	r3, [pc, #340]	; (80104b8 <HAL_UART_IRQHandler+0x770>)
 8010362:	4013      	ands	r3, r2
 8010364:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	3308      	adds	r3, #8
 801036e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010372:	633a      	str	r2, [r7, #48]	; 0x30
 8010374:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801037a:	e841 2300 	strex	r3, r2, [r1]
 801037e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010382:	2b00      	cmp	r3, #0
 8010384:	d1e3      	bne.n	801034e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2220      	movs	r2, #32
 801038a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2200      	movs	r2, #0
 8010392:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2200      	movs	r2, #0
 8010398:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	e853 3f00 	ldrex	r3, [r3]
 80103a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f023 0310 	bic.w	r3, r3, #16
 80103ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	461a      	mov	r2, r3
 80103b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80103bc:	61fb      	str	r3, [r7, #28]
 80103be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103c0:	69b9      	ldr	r1, [r7, #24]
 80103c2:	69fa      	ldr	r2, [r7, #28]
 80103c4:	e841 2300 	strex	r3, r2, [r1]
 80103c8:	617b      	str	r3, [r7, #20]
   return(result);
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d1e4      	bne.n	801039a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2202      	movs	r2, #2
 80103d4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80103d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80103da:	4619      	mov	r1, r3
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f000 f881 	bl	80104e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80103e2:	e063      	b.n	80104ac <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80103e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d00e      	beq.n	801040e <HAL_UART_IRQHandler+0x6c6>
 80103f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d008      	beq.n	801040e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010404:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f001 fe80 	bl	801210c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801040c:	e051      	b.n	80104b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801040e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010416:	2b00      	cmp	r3, #0
 8010418:	d014      	beq.n	8010444 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801041a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801041e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010422:	2b00      	cmp	r3, #0
 8010424:	d105      	bne.n	8010432 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010426:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801042a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801042e:	2b00      	cmp	r3, #0
 8010430:	d008      	beq.n	8010444 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010436:	2b00      	cmp	r3, #0
 8010438:	d03a      	beq.n	80104b0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	4798      	blx	r3
    }
    return;
 8010442:	e035      	b.n	80104b0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801044c:	2b00      	cmp	r3, #0
 801044e:	d009      	beq.n	8010464 <HAL_UART_IRQHandler+0x71c>
 8010450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010458:	2b00      	cmp	r3, #0
 801045a:	d003      	beq.n	8010464 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f001 f90d 	bl	801167c <UART_EndTransmit_IT>
    return;
 8010462:	e026      	b.n	80104b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010468:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801046c:	2b00      	cmp	r3, #0
 801046e:	d009      	beq.n	8010484 <HAL_UART_IRQHandler+0x73c>
 8010470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010474:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010478:	2b00      	cmp	r3, #0
 801047a:	d003      	beq.n	8010484 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f001 fe59 	bl	8012134 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010482:	e016      	b.n	80104b2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801048c:	2b00      	cmp	r3, #0
 801048e:	d010      	beq.n	80104b2 <HAL_UART_IRQHandler+0x76a>
 8010490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010494:	2b00      	cmp	r3, #0
 8010496:	da0c      	bge.n	80104b2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f001 fe41 	bl	8012120 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801049e:	e008      	b.n	80104b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80104a0:	bf00      	nop
 80104a2:	e006      	b.n	80104b2 <HAL_UART_IRQHandler+0x76a>
    return;
 80104a4:	bf00      	nop
 80104a6:	e004      	b.n	80104b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80104a8:	bf00      	nop
 80104aa:	e002      	b.n	80104b2 <HAL_UART_IRQHandler+0x76a>
      return;
 80104ac:	bf00      	nop
 80104ae:	e000      	b.n	80104b2 <HAL_UART_IRQHandler+0x76a>
    return;
 80104b0:	bf00      	nop
  }
}
 80104b2:	37e8      	adds	r7, #232	; 0xe8
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}
 80104b8:	effffffe 	.word	0xeffffffe

080104bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80104bc:	b480      	push	{r7}
 80104be:	b083      	sub	sp, #12
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80104c4:	bf00      	nop
 80104c6:	370c      	adds	r7, #12
 80104c8:	46bd      	mov	sp, r7
 80104ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ce:	4770      	bx	lr

080104d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80104d0:	b480      	push	{r7}
 80104d2:	b083      	sub	sp, #12
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80104d8:	bf00      	nop
 80104da:	370c      	adds	r7, #12
 80104dc:	46bd      	mov	sp, r7
 80104de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e2:	4770      	bx	lr

080104e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80104e4:	b480      	push	{r7}
 80104e6:	b083      	sub	sp, #12
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	460b      	mov	r3, r1
 80104ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80104f0:	bf00      	nop
 80104f2:	370c      	adds	r7, #12
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr

080104fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80104fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010500:	b092      	sub	sp, #72	; 0x48
 8010502:	af00      	add	r7, sp, #0
 8010504:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010506:	2300      	movs	r3, #0
 8010508:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801050c:	697b      	ldr	r3, [r7, #20]
 801050e:	689a      	ldr	r2, [r3, #8]
 8010510:	697b      	ldr	r3, [r7, #20]
 8010512:	691b      	ldr	r3, [r3, #16]
 8010514:	431a      	orrs	r2, r3
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	695b      	ldr	r3, [r3, #20]
 801051a:	431a      	orrs	r2, r3
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	69db      	ldr	r3, [r3, #28]
 8010520:	4313      	orrs	r3, r2
 8010522:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	4bbe      	ldr	r3, [pc, #760]	; (8010824 <UART_SetConfig+0x328>)
 801052c:	4013      	ands	r3, r2
 801052e:	697a      	ldr	r2, [r7, #20]
 8010530:	6812      	ldr	r2, [r2, #0]
 8010532:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010534:	430b      	orrs	r3, r1
 8010536:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	68da      	ldr	r2, [r3, #12]
 8010546:	697b      	ldr	r3, [r7, #20]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	430a      	orrs	r2, r1
 801054c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	699b      	ldr	r3, [r3, #24]
 8010552:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	4ab3      	ldr	r2, [pc, #716]	; (8010828 <UART_SetConfig+0x32c>)
 801055a:	4293      	cmp	r3, r2
 801055c:	d004      	beq.n	8010568 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	6a1b      	ldr	r3, [r3, #32]
 8010562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010564:	4313      	orrs	r3, r2
 8010566:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	689a      	ldr	r2, [r3, #8]
 801056e:	4baf      	ldr	r3, [pc, #700]	; (801082c <UART_SetConfig+0x330>)
 8010570:	4013      	ands	r3, r2
 8010572:	697a      	ldr	r2, [r7, #20]
 8010574:	6812      	ldr	r2, [r2, #0]
 8010576:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010578:	430b      	orrs	r3, r1
 801057a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010582:	f023 010f 	bic.w	r1, r3, #15
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	430a      	orrs	r2, r1
 8010590:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	4aa6      	ldr	r2, [pc, #664]	; (8010830 <UART_SetConfig+0x334>)
 8010598:	4293      	cmp	r3, r2
 801059a:	d177      	bne.n	801068c <UART_SetConfig+0x190>
 801059c:	4ba5      	ldr	r3, [pc, #660]	; (8010834 <UART_SetConfig+0x338>)
 801059e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80105a4:	2b28      	cmp	r3, #40	; 0x28
 80105a6:	d86d      	bhi.n	8010684 <UART_SetConfig+0x188>
 80105a8:	a201      	add	r2, pc, #4	; (adr r2, 80105b0 <UART_SetConfig+0xb4>)
 80105aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105ae:	bf00      	nop
 80105b0:	08010655 	.word	0x08010655
 80105b4:	08010685 	.word	0x08010685
 80105b8:	08010685 	.word	0x08010685
 80105bc:	08010685 	.word	0x08010685
 80105c0:	08010685 	.word	0x08010685
 80105c4:	08010685 	.word	0x08010685
 80105c8:	08010685 	.word	0x08010685
 80105cc:	08010685 	.word	0x08010685
 80105d0:	0801065d 	.word	0x0801065d
 80105d4:	08010685 	.word	0x08010685
 80105d8:	08010685 	.word	0x08010685
 80105dc:	08010685 	.word	0x08010685
 80105e0:	08010685 	.word	0x08010685
 80105e4:	08010685 	.word	0x08010685
 80105e8:	08010685 	.word	0x08010685
 80105ec:	08010685 	.word	0x08010685
 80105f0:	08010665 	.word	0x08010665
 80105f4:	08010685 	.word	0x08010685
 80105f8:	08010685 	.word	0x08010685
 80105fc:	08010685 	.word	0x08010685
 8010600:	08010685 	.word	0x08010685
 8010604:	08010685 	.word	0x08010685
 8010608:	08010685 	.word	0x08010685
 801060c:	08010685 	.word	0x08010685
 8010610:	0801066d 	.word	0x0801066d
 8010614:	08010685 	.word	0x08010685
 8010618:	08010685 	.word	0x08010685
 801061c:	08010685 	.word	0x08010685
 8010620:	08010685 	.word	0x08010685
 8010624:	08010685 	.word	0x08010685
 8010628:	08010685 	.word	0x08010685
 801062c:	08010685 	.word	0x08010685
 8010630:	08010675 	.word	0x08010675
 8010634:	08010685 	.word	0x08010685
 8010638:	08010685 	.word	0x08010685
 801063c:	08010685 	.word	0x08010685
 8010640:	08010685 	.word	0x08010685
 8010644:	08010685 	.word	0x08010685
 8010648:	08010685 	.word	0x08010685
 801064c:	08010685 	.word	0x08010685
 8010650:	0801067d 	.word	0x0801067d
 8010654:	2301      	movs	r3, #1
 8010656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801065a:	e222      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 801065c:	2304      	movs	r3, #4
 801065e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010662:	e21e      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010664:	2308      	movs	r3, #8
 8010666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801066a:	e21a      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 801066c:	2310      	movs	r3, #16
 801066e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010672:	e216      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010674:	2320      	movs	r3, #32
 8010676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801067a:	e212      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 801067c:	2340      	movs	r3, #64	; 0x40
 801067e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010682:	e20e      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010684:	2380      	movs	r3, #128	; 0x80
 8010686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801068a:	e20a      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 801068c:	697b      	ldr	r3, [r7, #20]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	4a69      	ldr	r2, [pc, #420]	; (8010838 <UART_SetConfig+0x33c>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d130      	bne.n	80106f8 <UART_SetConfig+0x1fc>
 8010696:	4b67      	ldr	r3, [pc, #412]	; (8010834 <UART_SetConfig+0x338>)
 8010698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801069a:	f003 0307 	and.w	r3, r3, #7
 801069e:	2b05      	cmp	r3, #5
 80106a0:	d826      	bhi.n	80106f0 <UART_SetConfig+0x1f4>
 80106a2:	a201      	add	r2, pc, #4	; (adr r2, 80106a8 <UART_SetConfig+0x1ac>)
 80106a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106a8:	080106c1 	.word	0x080106c1
 80106ac:	080106c9 	.word	0x080106c9
 80106b0:	080106d1 	.word	0x080106d1
 80106b4:	080106d9 	.word	0x080106d9
 80106b8:	080106e1 	.word	0x080106e1
 80106bc:	080106e9 	.word	0x080106e9
 80106c0:	2300      	movs	r3, #0
 80106c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106c6:	e1ec      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80106c8:	2304      	movs	r3, #4
 80106ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106ce:	e1e8      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80106d0:	2308      	movs	r3, #8
 80106d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106d6:	e1e4      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80106d8:	2310      	movs	r3, #16
 80106da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106de:	e1e0      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80106e0:	2320      	movs	r3, #32
 80106e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106e6:	e1dc      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80106e8:	2340      	movs	r3, #64	; 0x40
 80106ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106ee:	e1d8      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80106f0:	2380      	movs	r3, #128	; 0x80
 80106f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106f6:	e1d4      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	4a4f      	ldr	r2, [pc, #316]	; (801083c <UART_SetConfig+0x340>)
 80106fe:	4293      	cmp	r3, r2
 8010700:	d130      	bne.n	8010764 <UART_SetConfig+0x268>
 8010702:	4b4c      	ldr	r3, [pc, #304]	; (8010834 <UART_SetConfig+0x338>)
 8010704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010706:	f003 0307 	and.w	r3, r3, #7
 801070a:	2b05      	cmp	r3, #5
 801070c:	d826      	bhi.n	801075c <UART_SetConfig+0x260>
 801070e:	a201      	add	r2, pc, #4	; (adr r2, 8010714 <UART_SetConfig+0x218>)
 8010710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010714:	0801072d 	.word	0x0801072d
 8010718:	08010735 	.word	0x08010735
 801071c:	0801073d 	.word	0x0801073d
 8010720:	08010745 	.word	0x08010745
 8010724:	0801074d 	.word	0x0801074d
 8010728:	08010755 	.word	0x08010755
 801072c:	2300      	movs	r3, #0
 801072e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010732:	e1b6      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010734:	2304      	movs	r3, #4
 8010736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801073a:	e1b2      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 801073c:	2308      	movs	r3, #8
 801073e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010742:	e1ae      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010744:	2310      	movs	r3, #16
 8010746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801074a:	e1aa      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 801074c:	2320      	movs	r3, #32
 801074e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010752:	e1a6      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010754:	2340      	movs	r3, #64	; 0x40
 8010756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801075a:	e1a2      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 801075c:	2380      	movs	r3, #128	; 0x80
 801075e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010762:	e19e      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	4a35      	ldr	r2, [pc, #212]	; (8010840 <UART_SetConfig+0x344>)
 801076a:	4293      	cmp	r3, r2
 801076c:	d130      	bne.n	80107d0 <UART_SetConfig+0x2d4>
 801076e:	4b31      	ldr	r3, [pc, #196]	; (8010834 <UART_SetConfig+0x338>)
 8010770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010772:	f003 0307 	and.w	r3, r3, #7
 8010776:	2b05      	cmp	r3, #5
 8010778:	d826      	bhi.n	80107c8 <UART_SetConfig+0x2cc>
 801077a:	a201      	add	r2, pc, #4	; (adr r2, 8010780 <UART_SetConfig+0x284>)
 801077c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010780:	08010799 	.word	0x08010799
 8010784:	080107a1 	.word	0x080107a1
 8010788:	080107a9 	.word	0x080107a9
 801078c:	080107b1 	.word	0x080107b1
 8010790:	080107b9 	.word	0x080107b9
 8010794:	080107c1 	.word	0x080107c1
 8010798:	2300      	movs	r3, #0
 801079a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801079e:	e180      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80107a0:	2304      	movs	r3, #4
 80107a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107a6:	e17c      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80107a8:	2308      	movs	r3, #8
 80107aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ae:	e178      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80107b0:	2310      	movs	r3, #16
 80107b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107b6:	e174      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80107b8:	2320      	movs	r3, #32
 80107ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107be:	e170      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80107c0:	2340      	movs	r3, #64	; 0x40
 80107c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107c6:	e16c      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80107c8:	2380      	movs	r3, #128	; 0x80
 80107ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ce:	e168      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	4a1b      	ldr	r2, [pc, #108]	; (8010844 <UART_SetConfig+0x348>)
 80107d6:	4293      	cmp	r3, r2
 80107d8:	d142      	bne.n	8010860 <UART_SetConfig+0x364>
 80107da:	4b16      	ldr	r3, [pc, #88]	; (8010834 <UART_SetConfig+0x338>)
 80107dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107de:	f003 0307 	and.w	r3, r3, #7
 80107e2:	2b05      	cmp	r3, #5
 80107e4:	d838      	bhi.n	8010858 <UART_SetConfig+0x35c>
 80107e6:	a201      	add	r2, pc, #4	; (adr r2, 80107ec <UART_SetConfig+0x2f0>)
 80107e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ec:	08010805 	.word	0x08010805
 80107f0:	0801080d 	.word	0x0801080d
 80107f4:	08010815 	.word	0x08010815
 80107f8:	0801081d 	.word	0x0801081d
 80107fc:	08010849 	.word	0x08010849
 8010800:	08010851 	.word	0x08010851
 8010804:	2300      	movs	r3, #0
 8010806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801080a:	e14a      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 801080c:	2304      	movs	r3, #4
 801080e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010812:	e146      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010814:	2308      	movs	r3, #8
 8010816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801081a:	e142      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 801081c:	2310      	movs	r3, #16
 801081e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010822:	e13e      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010824:	cfff69f3 	.word	0xcfff69f3
 8010828:	58000c00 	.word	0x58000c00
 801082c:	11fff4ff 	.word	0x11fff4ff
 8010830:	40011000 	.word	0x40011000
 8010834:	58024400 	.word	0x58024400
 8010838:	40004400 	.word	0x40004400
 801083c:	40004800 	.word	0x40004800
 8010840:	40004c00 	.word	0x40004c00
 8010844:	40005000 	.word	0x40005000
 8010848:	2320      	movs	r3, #32
 801084a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801084e:	e128      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010850:	2340      	movs	r3, #64	; 0x40
 8010852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010856:	e124      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010858:	2380      	movs	r3, #128	; 0x80
 801085a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801085e:	e120      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	4acb      	ldr	r2, [pc, #812]	; (8010b94 <UART_SetConfig+0x698>)
 8010866:	4293      	cmp	r3, r2
 8010868:	d176      	bne.n	8010958 <UART_SetConfig+0x45c>
 801086a:	4bcb      	ldr	r3, [pc, #812]	; (8010b98 <UART_SetConfig+0x69c>)
 801086c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801086e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010872:	2b28      	cmp	r3, #40	; 0x28
 8010874:	d86c      	bhi.n	8010950 <UART_SetConfig+0x454>
 8010876:	a201      	add	r2, pc, #4	; (adr r2, 801087c <UART_SetConfig+0x380>)
 8010878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801087c:	08010921 	.word	0x08010921
 8010880:	08010951 	.word	0x08010951
 8010884:	08010951 	.word	0x08010951
 8010888:	08010951 	.word	0x08010951
 801088c:	08010951 	.word	0x08010951
 8010890:	08010951 	.word	0x08010951
 8010894:	08010951 	.word	0x08010951
 8010898:	08010951 	.word	0x08010951
 801089c:	08010929 	.word	0x08010929
 80108a0:	08010951 	.word	0x08010951
 80108a4:	08010951 	.word	0x08010951
 80108a8:	08010951 	.word	0x08010951
 80108ac:	08010951 	.word	0x08010951
 80108b0:	08010951 	.word	0x08010951
 80108b4:	08010951 	.word	0x08010951
 80108b8:	08010951 	.word	0x08010951
 80108bc:	08010931 	.word	0x08010931
 80108c0:	08010951 	.word	0x08010951
 80108c4:	08010951 	.word	0x08010951
 80108c8:	08010951 	.word	0x08010951
 80108cc:	08010951 	.word	0x08010951
 80108d0:	08010951 	.word	0x08010951
 80108d4:	08010951 	.word	0x08010951
 80108d8:	08010951 	.word	0x08010951
 80108dc:	08010939 	.word	0x08010939
 80108e0:	08010951 	.word	0x08010951
 80108e4:	08010951 	.word	0x08010951
 80108e8:	08010951 	.word	0x08010951
 80108ec:	08010951 	.word	0x08010951
 80108f0:	08010951 	.word	0x08010951
 80108f4:	08010951 	.word	0x08010951
 80108f8:	08010951 	.word	0x08010951
 80108fc:	08010941 	.word	0x08010941
 8010900:	08010951 	.word	0x08010951
 8010904:	08010951 	.word	0x08010951
 8010908:	08010951 	.word	0x08010951
 801090c:	08010951 	.word	0x08010951
 8010910:	08010951 	.word	0x08010951
 8010914:	08010951 	.word	0x08010951
 8010918:	08010951 	.word	0x08010951
 801091c:	08010949 	.word	0x08010949
 8010920:	2301      	movs	r3, #1
 8010922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010926:	e0bc      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010928:	2304      	movs	r3, #4
 801092a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801092e:	e0b8      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010930:	2308      	movs	r3, #8
 8010932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010936:	e0b4      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010938:	2310      	movs	r3, #16
 801093a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801093e:	e0b0      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010940:	2320      	movs	r3, #32
 8010942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010946:	e0ac      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010948:	2340      	movs	r3, #64	; 0x40
 801094a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801094e:	e0a8      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010950:	2380      	movs	r3, #128	; 0x80
 8010952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010956:	e0a4      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	4a8f      	ldr	r2, [pc, #572]	; (8010b9c <UART_SetConfig+0x6a0>)
 801095e:	4293      	cmp	r3, r2
 8010960:	d130      	bne.n	80109c4 <UART_SetConfig+0x4c8>
 8010962:	4b8d      	ldr	r3, [pc, #564]	; (8010b98 <UART_SetConfig+0x69c>)
 8010964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010966:	f003 0307 	and.w	r3, r3, #7
 801096a:	2b05      	cmp	r3, #5
 801096c:	d826      	bhi.n	80109bc <UART_SetConfig+0x4c0>
 801096e:	a201      	add	r2, pc, #4	; (adr r2, 8010974 <UART_SetConfig+0x478>)
 8010970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010974:	0801098d 	.word	0x0801098d
 8010978:	08010995 	.word	0x08010995
 801097c:	0801099d 	.word	0x0801099d
 8010980:	080109a5 	.word	0x080109a5
 8010984:	080109ad 	.word	0x080109ad
 8010988:	080109b5 	.word	0x080109b5
 801098c:	2300      	movs	r3, #0
 801098e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010992:	e086      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010994:	2304      	movs	r3, #4
 8010996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801099a:	e082      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 801099c:	2308      	movs	r3, #8
 801099e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109a2:	e07e      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80109a4:	2310      	movs	r3, #16
 80109a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109aa:	e07a      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80109ac:	2320      	movs	r3, #32
 80109ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109b2:	e076      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80109b4:	2340      	movs	r3, #64	; 0x40
 80109b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ba:	e072      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80109bc:	2380      	movs	r3, #128	; 0x80
 80109be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109c2:	e06e      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	4a75      	ldr	r2, [pc, #468]	; (8010ba0 <UART_SetConfig+0x6a4>)
 80109ca:	4293      	cmp	r3, r2
 80109cc:	d130      	bne.n	8010a30 <UART_SetConfig+0x534>
 80109ce:	4b72      	ldr	r3, [pc, #456]	; (8010b98 <UART_SetConfig+0x69c>)
 80109d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109d2:	f003 0307 	and.w	r3, r3, #7
 80109d6:	2b05      	cmp	r3, #5
 80109d8:	d826      	bhi.n	8010a28 <UART_SetConfig+0x52c>
 80109da:	a201      	add	r2, pc, #4	; (adr r2, 80109e0 <UART_SetConfig+0x4e4>)
 80109dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109e0:	080109f9 	.word	0x080109f9
 80109e4:	08010a01 	.word	0x08010a01
 80109e8:	08010a09 	.word	0x08010a09
 80109ec:	08010a11 	.word	0x08010a11
 80109f0:	08010a19 	.word	0x08010a19
 80109f4:	08010a21 	.word	0x08010a21
 80109f8:	2300      	movs	r3, #0
 80109fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109fe:	e050      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010a00:	2304      	movs	r3, #4
 8010a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a06:	e04c      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010a08:	2308      	movs	r3, #8
 8010a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a0e:	e048      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010a10:	2310      	movs	r3, #16
 8010a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a16:	e044      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010a18:	2320      	movs	r3, #32
 8010a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a1e:	e040      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010a20:	2340      	movs	r3, #64	; 0x40
 8010a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a26:	e03c      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010a28:	2380      	movs	r3, #128	; 0x80
 8010a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a2e:	e038      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010a30:	697b      	ldr	r3, [r7, #20]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	4a5b      	ldr	r2, [pc, #364]	; (8010ba4 <UART_SetConfig+0x6a8>)
 8010a36:	4293      	cmp	r3, r2
 8010a38:	d130      	bne.n	8010a9c <UART_SetConfig+0x5a0>
 8010a3a:	4b57      	ldr	r3, [pc, #348]	; (8010b98 <UART_SetConfig+0x69c>)
 8010a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a3e:	f003 0307 	and.w	r3, r3, #7
 8010a42:	2b05      	cmp	r3, #5
 8010a44:	d826      	bhi.n	8010a94 <UART_SetConfig+0x598>
 8010a46:	a201      	add	r2, pc, #4	; (adr r2, 8010a4c <UART_SetConfig+0x550>)
 8010a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a4c:	08010a65 	.word	0x08010a65
 8010a50:	08010a6d 	.word	0x08010a6d
 8010a54:	08010a75 	.word	0x08010a75
 8010a58:	08010a7d 	.word	0x08010a7d
 8010a5c:	08010a85 	.word	0x08010a85
 8010a60:	08010a8d 	.word	0x08010a8d
 8010a64:	2302      	movs	r3, #2
 8010a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a6a:	e01a      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010a6c:	2304      	movs	r3, #4
 8010a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a72:	e016      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010a74:	2308      	movs	r3, #8
 8010a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a7a:	e012      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010a7c:	2310      	movs	r3, #16
 8010a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a82:	e00e      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010a84:	2320      	movs	r3, #32
 8010a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a8a:	e00a      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010a8c:	2340      	movs	r3, #64	; 0x40
 8010a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a92:	e006      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010a94:	2380      	movs	r3, #128	; 0x80
 8010a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a9a:	e002      	b.n	8010aa2 <UART_SetConfig+0x5a6>
 8010a9c:	2380      	movs	r3, #128	; 0x80
 8010a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	4a3f      	ldr	r2, [pc, #252]	; (8010ba4 <UART_SetConfig+0x6a8>)
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	f040 80f8 	bne.w	8010c9e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010aae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010ab2:	2b20      	cmp	r3, #32
 8010ab4:	dc46      	bgt.n	8010b44 <UART_SetConfig+0x648>
 8010ab6:	2b02      	cmp	r3, #2
 8010ab8:	f2c0 8082 	blt.w	8010bc0 <UART_SetConfig+0x6c4>
 8010abc:	3b02      	subs	r3, #2
 8010abe:	2b1e      	cmp	r3, #30
 8010ac0:	d87e      	bhi.n	8010bc0 <UART_SetConfig+0x6c4>
 8010ac2:	a201      	add	r2, pc, #4	; (adr r2, 8010ac8 <UART_SetConfig+0x5cc>)
 8010ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ac8:	08010b4b 	.word	0x08010b4b
 8010acc:	08010bc1 	.word	0x08010bc1
 8010ad0:	08010b53 	.word	0x08010b53
 8010ad4:	08010bc1 	.word	0x08010bc1
 8010ad8:	08010bc1 	.word	0x08010bc1
 8010adc:	08010bc1 	.word	0x08010bc1
 8010ae0:	08010b63 	.word	0x08010b63
 8010ae4:	08010bc1 	.word	0x08010bc1
 8010ae8:	08010bc1 	.word	0x08010bc1
 8010aec:	08010bc1 	.word	0x08010bc1
 8010af0:	08010bc1 	.word	0x08010bc1
 8010af4:	08010bc1 	.word	0x08010bc1
 8010af8:	08010bc1 	.word	0x08010bc1
 8010afc:	08010bc1 	.word	0x08010bc1
 8010b00:	08010b73 	.word	0x08010b73
 8010b04:	08010bc1 	.word	0x08010bc1
 8010b08:	08010bc1 	.word	0x08010bc1
 8010b0c:	08010bc1 	.word	0x08010bc1
 8010b10:	08010bc1 	.word	0x08010bc1
 8010b14:	08010bc1 	.word	0x08010bc1
 8010b18:	08010bc1 	.word	0x08010bc1
 8010b1c:	08010bc1 	.word	0x08010bc1
 8010b20:	08010bc1 	.word	0x08010bc1
 8010b24:	08010bc1 	.word	0x08010bc1
 8010b28:	08010bc1 	.word	0x08010bc1
 8010b2c:	08010bc1 	.word	0x08010bc1
 8010b30:	08010bc1 	.word	0x08010bc1
 8010b34:	08010bc1 	.word	0x08010bc1
 8010b38:	08010bc1 	.word	0x08010bc1
 8010b3c:	08010bc1 	.word	0x08010bc1
 8010b40:	08010bb3 	.word	0x08010bb3
 8010b44:	2b40      	cmp	r3, #64	; 0x40
 8010b46:	d037      	beq.n	8010bb8 <UART_SetConfig+0x6bc>
 8010b48:	e03a      	b.n	8010bc0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010b4a:	f7fb fd57 	bl	800c5fc <HAL_RCCEx_GetD3PCLK1Freq>
 8010b4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010b50:	e03c      	b.n	8010bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b56:	4618      	mov	r0, r3
 8010b58:	f7fb fd66 	bl	800c628 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b60:	e034      	b.n	8010bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010b62:	f107 0318 	add.w	r3, r7, #24
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7fb feb2 	bl	800c8d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010b6c:	69fb      	ldr	r3, [r7, #28]
 8010b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b70:	e02c      	b.n	8010bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b72:	4b09      	ldr	r3, [pc, #36]	; (8010b98 <UART_SetConfig+0x69c>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	f003 0320 	and.w	r3, r3, #32
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d016      	beq.n	8010bac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010b7e:	4b06      	ldr	r3, [pc, #24]	; (8010b98 <UART_SetConfig+0x69c>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	08db      	lsrs	r3, r3, #3
 8010b84:	f003 0303 	and.w	r3, r3, #3
 8010b88:	4a07      	ldr	r2, [pc, #28]	; (8010ba8 <UART_SetConfig+0x6ac>)
 8010b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8010b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010b90:	e01c      	b.n	8010bcc <UART_SetConfig+0x6d0>
 8010b92:	bf00      	nop
 8010b94:	40011400 	.word	0x40011400
 8010b98:	58024400 	.word	0x58024400
 8010b9c:	40007800 	.word	0x40007800
 8010ba0:	40007c00 	.word	0x40007c00
 8010ba4:	58000c00 	.word	0x58000c00
 8010ba8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010bac:	4b9d      	ldr	r3, [pc, #628]	; (8010e24 <UART_SetConfig+0x928>)
 8010bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bb0:	e00c      	b.n	8010bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010bb2:	4b9d      	ldr	r3, [pc, #628]	; (8010e28 <UART_SetConfig+0x92c>)
 8010bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bb6:	e009      	b.n	8010bcc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010bb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010bbe:	e005      	b.n	8010bcc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010bca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	f000 81de 	beq.w	8010f90 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bd8:	4a94      	ldr	r2, [pc, #592]	; (8010e2c <UART_SetConfig+0x930>)
 8010bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bde:	461a      	mov	r2, r3
 8010be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010be2:	fbb3 f3f2 	udiv	r3, r3, r2
 8010be6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	685a      	ldr	r2, [r3, #4]
 8010bec:	4613      	mov	r3, r2
 8010bee:	005b      	lsls	r3, r3, #1
 8010bf0:	4413      	add	r3, r2
 8010bf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	d305      	bcc.n	8010c04 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	685b      	ldr	r3, [r3, #4]
 8010bfc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d903      	bls.n	8010c0c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010c04:	2301      	movs	r3, #1
 8010c06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010c0a:	e1c1      	b.n	8010f90 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c0e:	2200      	movs	r2, #0
 8010c10:	60bb      	str	r3, [r7, #8]
 8010c12:	60fa      	str	r2, [r7, #12]
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c18:	4a84      	ldr	r2, [pc, #528]	; (8010e2c <UART_SetConfig+0x930>)
 8010c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c1e:	b29b      	uxth	r3, r3
 8010c20:	2200      	movs	r2, #0
 8010c22:	603b      	str	r3, [r7, #0]
 8010c24:	607a      	str	r2, [r7, #4]
 8010c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010c2e:	f7ef fb57 	bl	80002e0 <__aeabi_uldivmod>
 8010c32:	4602      	mov	r2, r0
 8010c34:	460b      	mov	r3, r1
 8010c36:	4610      	mov	r0, r2
 8010c38:	4619      	mov	r1, r3
 8010c3a:	f04f 0200 	mov.w	r2, #0
 8010c3e:	f04f 0300 	mov.w	r3, #0
 8010c42:	020b      	lsls	r3, r1, #8
 8010c44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010c48:	0202      	lsls	r2, r0, #8
 8010c4a:	6979      	ldr	r1, [r7, #20]
 8010c4c:	6849      	ldr	r1, [r1, #4]
 8010c4e:	0849      	lsrs	r1, r1, #1
 8010c50:	2000      	movs	r0, #0
 8010c52:	460c      	mov	r4, r1
 8010c54:	4605      	mov	r5, r0
 8010c56:	eb12 0804 	adds.w	r8, r2, r4
 8010c5a:	eb43 0905 	adc.w	r9, r3, r5
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	685b      	ldr	r3, [r3, #4]
 8010c62:	2200      	movs	r2, #0
 8010c64:	469a      	mov	sl, r3
 8010c66:	4693      	mov	fp, r2
 8010c68:	4652      	mov	r2, sl
 8010c6a:	465b      	mov	r3, fp
 8010c6c:	4640      	mov	r0, r8
 8010c6e:	4649      	mov	r1, r9
 8010c70:	f7ef fb36 	bl	80002e0 <__aeabi_uldivmod>
 8010c74:	4602      	mov	r2, r0
 8010c76:	460b      	mov	r3, r1
 8010c78:	4613      	mov	r3, r2
 8010c7a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010c82:	d308      	bcc.n	8010c96 <UART_SetConfig+0x79a>
 8010c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010c8a:	d204      	bcs.n	8010c96 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010c8c:	697b      	ldr	r3, [r7, #20]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c92:	60da      	str	r2, [r3, #12]
 8010c94:	e17c      	b.n	8010f90 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010c96:	2301      	movs	r3, #1
 8010c98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010c9c:	e178      	b.n	8010f90 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	69db      	ldr	r3, [r3, #28]
 8010ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ca6:	f040 80c5 	bne.w	8010e34 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010caa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010cae:	2b20      	cmp	r3, #32
 8010cb0:	dc48      	bgt.n	8010d44 <UART_SetConfig+0x848>
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	db7b      	blt.n	8010dae <UART_SetConfig+0x8b2>
 8010cb6:	2b20      	cmp	r3, #32
 8010cb8:	d879      	bhi.n	8010dae <UART_SetConfig+0x8b2>
 8010cba:	a201      	add	r2, pc, #4	; (adr r2, 8010cc0 <UART_SetConfig+0x7c4>)
 8010cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc0:	08010d4b 	.word	0x08010d4b
 8010cc4:	08010d53 	.word	0x08010d53
 8010cc8:	08010daf 	.word	0x08010daf
 8010ccc:	08010daf 	.word	0x08010daf
 8010cd0:	08010d5b 	.word	0x08010d5b
 8010cd4:	08010daf 	.word	0x08010daf
 8010cd8:	08010daf 	.word	0x08010daf
 8010cdc:	08010daf 	.word	0x08010daf
 8010ce0:	08010d6b 	.word	0x08010d6b
 8010ce4:	08010daf 	.word	0x08010daf
 8010ce8:	08010daf 	.word	0x08010daf
 8010cec:	08010daf 	.word	0x08010daf
 8010cf0:	08010daf 	.word	0x08010daf
 8010cf4:	08010daf 	.word	0x08010daf
 8010cf8:	08010daf 	.word	0x08010daf
 8010cfc:	08010daf 	.word	0x08010daf
 8010d00:	08010d7b 	.word	0x08010d7b
 8010d04:	08010daf 	.word	0x08010daf
 8010d08:	08010daf 	.word	0x08010daf
 8010d0c:	08010daf 	.word	0x08010daf
 8010d10:	08010daf 	.word	0x08010daf
 8010d14:	08010daf 	.word	0x08010daf
 8010d18:	08010daf 	.word	0x08010daf
 8010d1c:	08010daf 	.word	0x08010daf
 8010d20:	08010daf 	.word	0x08010daf
 8010d24:	08010daf 	.word	0x08010daf
 8010d28:	08010daf 	.word	0x08010daf
 8010d2c:	08010daf 	.word	0x08010daf
 8010d30:	08010daf 	.word	0x08010daf
 8010d34:	08010daf 	.word	0x08010daf
 8010d38:	08010daf 	.word	0x08010daf
 8010d3c:	08010daf 	.word	0x08010daf
 8010d40:	08010da1 	.word	0x08010da1
 8010d44:	2b40      	cmp	r3, #64	; 0x40
 8010d46:	d02e      	beq.n	8010da6 <UART_SetConfig+0x8aa>
 8010d48:	e031      	b.n	8010dae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d4a:	f7f9 fc5f 	bl	800a60c <HAL_RCC_GetPCLK1Freq>
 8010d4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010d50:	e033      	b.n	8010dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d52:	f7f9 fc71 	bl	800a638 <HAL_RCC_GetPCLK2Freq>
 8010d56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010d58:	e02f      	b.n	8010dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fb fc62 	bl	800c628 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d68:	e027      	b.n	8010dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d6a:	f107 0318 	add.w	r3, r7, #24
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fb fdae 	bl	800c8d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010d74:	69fb      	ldr	r3, [r7, #28]
 8010d76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d78:	e01f      	b.n	8010dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d7a:	4b2d      	ldr	r3, [pc, #180]	; (8010e30 <UART_SetConfig+0x934>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f003 0320 	and.w	r3, r3, #32
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d009      	beq.n	8010d9a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010d86:	4b2a      	ldr	r3, [pc, #168]	; (8010e30 <UART_SetConfig+0x934>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	08db      	lsrs	r3, r3, #3
 8010d8c:	f003 0303 	and.w	r3, r3, #3
 8010d90:	4a24      	ldr	r2, [pc, #144]	; (8010e24 <UART_SetConfig+0x928>)
 8010d92:	fa22 f303 	lsr.w	r3, r2, r3
 8010d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010d98:	e00f      	b.n	8010dba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010d9a:	4b22      	ldr	r3, [pc, #136]	; (8010e24 <UART_SetConfig+0x928>)
 8010d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d9e:	e00c      	b.n	8010dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010da0:	4b21      	ldr	r3, [pc, #132]	; (8010e28 <UART_SetConfig+0x92c>)
 8010da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010da4:	e009      	b.n	8010dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dac:	e005      	b.n	8010dba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010dae:	2300      	movs	r3, #0
 8010db0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010db2:	2301      	movs	r3, #1
 8010db4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010db8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	f000 80e7 	beq.w	8010f90 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dc6:	4a19      	ldr	r2, [pc, #100]	; (8010e2c <UART_SetConfig+0x930>)
 8010dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010dcc:	461a      	mov	r2, r3
 8010dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010dd4:	005a      	lsls	r2, r3, #1
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	685b      	ldr	r3, [r3, #4]
 8010dda:	085b      	lsrs	r3, r3, #1
 8010ddc:	441a      	add	r2, r3
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	685b      	ldr	r3, [r3, #4]
 8010de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010de6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dea:	2b0f      	cmp	r3, #15
 8010dec:	d916      	bls.n	8010e1c <UART_SetConfig+0x920>
 8010dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010df4:	d212      	bcs.n	8010e1c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df8:	b29b      	uxth	r3, r3
 8010dfa:	f023 030f 	bic.w	r3, r3, #15
 8010dfe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e02:	085b      	lsrs	r3, r3, #1
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	f003 0307 	and.w	r3, r3, #7
 8010e0a:	b29a      	uxth	r2, r3
 8010e0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010e0e:	4313      	orrs	r3, r2
 8010e10:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010e18:	60da      	str	r2, [r3, #12]
 8010e1a:	e0b9      	b.n	8010f90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010e22:	e0b5      	b.n	8010f90 <UART_SetConfig+0xa94>
 8010e24:	03d09000 	.word	0x03d09000
 8010e28:	003d0900 	.word	0x003d0900
 8010e2c:	08016694 	.word	0x08016694
 8010e30:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010e34:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010e38:	2b20      	cmp	r3, #32
 8010e3a:	dc49      	bgt.n	8010ed0 <UART_SetConfig+0x9d4>
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	db7c      	blt.n	8010f3a <UART_SetConfig+0xa3e>
 8010e40:	2b20      	cmp	r3, #32
 8010e42:	d87a      	bhi.n	8010f3a <UART_SetConfig+0xa3e>
 8010e44:	a201      	add	r2, pc, #4	; (adr r2, 8010e4c <UART_SetConfig+0x950>)
 8010e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e4a:	bf00      	nop
 8010e4c:	08010ed7 	.word	0x08010ed7
 8010e50:	08010edf 	.word	0x08010edf
 8010e54:	08010f3b 	.word	0x08010f3b
 8010e58:	08010f3b 	.word	0x08010f3b
 8010e5c:	08010ee7 	.word	0x08010ee7
 8010e60:	08010f3b 	.word	0x08010f3b
 8010e64:	08010f3b 	.word	0x08010f3b
 8010e68:	08010f3b 	.word	0x08010f3b
 8010e6c:	08010ef7 	.word	0x08010ef7
 8010e70:	08010f3b 	.word	0x08010f3b
 8010e74:	08010f3b 	.word	0x08010f3b
 8010e78:	08010f3b 	.word	0x08010f3b
 8010e7c:	08010f3b 	.word	0x08010f3b
 8010e80:	08010f3b 	.word	0x08010f3b
 8010e84:	08010f3b 	.word	0x08010f3b
 8010e88:	08010f3b 	.word	0x08010f3b
 8010e8c:	08010f07 	.word	0x08010f07
 8010e90:	08010f3b 	.word	0x08010f3b
 8010e94:	08010f3b 	.word	0x08010f3b
 8010e98:	08010f3b 	.word	0x08010f3b
 8010e9c:	08010f3b 	.word	0x08010f3b
 8010ea0:	08010f3b 	.word	0x08010f3b
 8010ea4:	08010f3b 	.word	0x08010f3b
 8010ea8:	08010f3b 	.word	0x08010f3b
 8010eac:	08010f3b 	.word	0x08010f3b
 8010eb0:	08010f3b 	.word	0x08010f3b
 8010eb4:	08010f3b 	.word	0x08010f3b
 8010eb8:	08010f3b 	.word	0x08010f3b
 8010ebc:	08010f3b 	.word	0x08010f3b
 8010ec0:	08010f3b 	.word	0x08010f3b
 8010ec4:	08010f3b 	.word	0x08010f3b
 8010ec8:	08010f3b 	.word	0x08010f3b
 8010ecc:	08010f2d 	.word	0x08010f2d
 8010ed0:	2b40      	cmp	r3, #64	; 0x40
 8010ed2:	d02e      	beq.n	8010f32 <UART_SetConfig+0xa36>
 8010ed4:	e031      	b.n	8010f3a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010ed6:	f7f9 fb99 	bl	800a60c <HAL_RCC_GetPCLK1Freq>
 8010eda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010edc:	e033      	b.n	8010f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010ede:	f7f9 fbab 	bl	800a638 <HAL_RCC_GetPCLK2Freq>
 8010ee2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010ee4:	e02f      	b.n	8010f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7fb fb9c 	bl	800c628 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ef4:	e027      	b.n	8010f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ef6:	f107 0318 	add.w	r3, r7, #24
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7fb fce8 	bl	800c8d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010f00:	69fb      	ldr	r3, [r7, #28]
 8010f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f04:	e01f      	b.n	8010f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f06:	4b2d      	ldr	r3, [pc, #180]	; (8010fbc <UART_SetConfig+0xac0>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	f003 0320 	and.w	r3, r3, #32
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d009      	beq.n	8010f26 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010f12:	4b2a      	ldr	r3, [pc, #168]	; (8010fbc <UART_SetConfig+0xac0>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	08db      	lsrs	r3, r3, #3
 8010f18:	f003 0303 	and.w	r3, r3, #3
 8010f1c:	4a28      	ldr	r2, [pc, #160]	; (8010fc0 <UART_SetConfig+0xac4>)
 8010f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8010f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010f24:	e00f      	b.n	8010f46 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8010f26:	4b26      	ldr	r3, [pc, #152]	; (8010fc0 <UART_SetConfig+0xac4>)
 8010f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f2a:	e00c      	b.n	8010f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010f2c:	4b25      	ldr	r3, [pc, #148]	; (8010fc4 <UART_SetConfig+0xac8>)
 8010f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f30:	e009      	b.n	8010f46 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f38:	e005      	b.n	8010f46 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010f3e:	2301      	movs	r3, #1
 8010f40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010f44:	bf00      	nop
    }

    if (pclk != 0U)
 8010f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d021      	beq.n	8010f90 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f50:	4a1d      	ldr	r2, [pc, #116]	; (8010fc8 <UART_SetConfig+0xacc>)
 8010f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f56:	461a      	mov	r2, r3
 8010f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8010f5e:	697b      	ldr	r3, [r7, #20]
 8010f60:	685b      	ldr	r3, [r3, #4]
 8010f62:	085b      	lsrs	r3, r3, #1
 8010f64:	441a      	add	r2, r3
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	685b      	ldr	r3, [r3, #4]
 8010f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f6e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f72:	2b0f      	cmp	r3, #15
 8010f74:	d909      	bls.n	8010f8a <UART_SetConfig+0xa8e>
 8010f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f7c:	d205      	bcs.n	8010f8a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f80:	b29a      	uxth	r2, r3
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	60da      	str	r2, [r3, #12]
 8010f88:	e002      	b.n	8010f90 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	2201      	movs	r2, #1
 8010f94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	2200      	movs	r2, #0
 8010faa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8010fac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3748      	adds	r7, #72	; 0x48
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010fba:	bf00      	nop
 8010fbc:	58024400 	.word	0x58024400
 8010fc0:	03d09000 	.word	0x03d09000
 8010fc4:	003d0900 	.word	0x003d0900
 8010fc8:	08016694 	.word	0x08016694

08010fcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b083      	sub	sp, #12
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fd8:	f003 0308 	and.w	r3, r3, #8
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d00a      	beq.n	8010ff6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	430a      	orrs	r2, r1
 8010ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ffa:	f003 0301 	and.w	r3, r3, #1
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d00a      	beq.n	8011018 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	430a      	orrs	r2, r1
 8011016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801101c:	f003 0302 	and.w	r3, r3, #2
 8011020:	2b00      	cmp	r3, #0
 8011022:	d00a      	beq.n	801103a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	430a      	orrs	r2, r1
 8011038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801103e:	f003 0304 	and.w	r3, r3, #4
 8011042:	2b00      	cmp	r3, #0
 8011044:	d00a      	beq.n	801105c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	685b      	ldr	r3, [r3, #4]
 801104c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	430a      	orrs	r2, r1
 801105a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011060:	f003 0310 	and.w	r3, r3, #16
 8011064:	2b00      	cmp	r3, #0
 8011066:	d00a      	beq.n	801107e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	689b      	ldr	r3, [r3, #8]
 801106e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	430a      	orrs	r2, r1
 801107c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011082:	f003 0320 	and.w	r3, r3, #32
 8011086:	2b00      	cmp	r3, #0
 8011088:	d00a      	beq.n	80110a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	689b      	ldr	r3, [r3, #8]
 8011090:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	430a      	orrs	r2, r1
 801109e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d01a      	beq.n	80110e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	685b      	ldr	r3, [r3, #4]
 80110b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	430a      	orrs	r2, r1
 80110c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80110ca:	d10a      	bne.n	80110e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	685b      	ldr	r3, [r3, #4]
 80110d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	430a      	orrs	r2, r1
 80110e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d00a      	beq.n	8011104 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	685b      	ldr	r3, [r3, #4]
 80110f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	430a      	orrs	r2, r1
 8011102:	605a      	str	r2, [r3, #4]
  }
}
 8011104:	bf00      	nop
 8011106:	370c      	adds	r7, #12
 8011108:	46bd      	mov	sp, r7
 801110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110e:	4770      	bx	lr

08011110 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b098      	sub	sp, #96	; 0x60
 8011114:	af02      	add	r7, sp, #8
 8011116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2200      	movs	r2, #0
 801111c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011120:	f7f2 fb2e 	bl	8003780 <HAL_GetTick>
 8011124:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	f003 0308 	and.w	r3, r3, #8
 8011130:	2b08      	cmp	r3, #8
 8011132:	d12f      	bne.n	8011194 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011134:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011138:	9300      	str	r3, [sp, #0]
 801113a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801113c:	2200      	movs	r2, #0
 801113e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	f000 f88e 	bl	8011264 <UART_WaitOnFlagUntilTimeout>
 8011148:	4603      	mov	r3, r0
 801114a:	2b00      	cmp	r3, #0
 801114c:	d022      	beq.n	8011194 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011156:	e853 3f00 	ldrex	r3, [r3]
 801115a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801115c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801115e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011162:	653b      	str	r3, [r7, #80]	; 0x50
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	461a      	mov	r2, r3
 801116a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801116c:	647b      	str	r3, [r7, #68]	; 0x44
 801116e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011170:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011174:	e841 2300 	strex	r3, r2, [r1]
 8011178:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801117a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801117c:	2b00      	cmp	r3, #0
 801117e:	d1e6      	bne.n	801114e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2220      	movs	r2, #32
 8011184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2200      	movs	r2, #0
 801118c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011190:	2303      	movs	r3, #3
 8011192:	e063      	b.n	801125c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	f003 0304 	and.w	r3, r3, #4
 801119e:	2b04      	cmp	r3, #4
 80111a0:	d149      	bne.n	8011236 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80111a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80111a6:	9300      	str	r3, [sp, #0]
 80111a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111aa:	2200      	movs	r2, #0
 80111ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	f000 f857 	bl	8011264 <UART_WaitOnFlagUntilTimeout>
 80111b6:	4603      	mov	r3, r0
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d03c      	beq.n	8011236 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c4:	e853 3f00 	ldrex	r3, [r3]
 80111c8:	623b      	str	r3, [r7, #32]
   return(result);
 80111ca:	6a3b      	ldr	r3, [r7, #32]
 80111cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80111d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	461a      	mov	r2, r3
 80111d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111da:	633b      	str	r3, [r7, #48]	; 0x30
 80111dc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80111e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111e2:	e841 2300 	strex	r3, r2, [r1]
 80111e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80111e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d1e6      	bne.n	80111bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	3308      	adds	r3, #8
 80111f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	e853 3f00 	ldrex	r3, [r3]
 80111fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	f023 0301 	bic.w	r3, r3, #1
 8011204:	64bb      	str	r3, [r7, #72]	; 0x48
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	3308      	adds	r3, #8
 801120c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801120e:	61fa      	str	r2, [r7, #28]
 8011210:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011212:	69b9      	ldr	r1, [r7, #24]
 8011214:	69fa      	ldr	r2, [r7, #28]
 8011216:	e841 2300 	strex	r3, r2, [r1]
 801121a:	617b      	str	r3, [r7, #20]
   return(result);
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d1e5      	bne.n	80111ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2220      	movs	r2, #32
 8011226:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2200      	movs	r2, #0
 801122e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011232:	2303      	movs	r3, #3
 8011234:	e012      	b.n	801125c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2220      	movs	r2, #32
 801123a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	2220      	movs	r2, #32
 8011242:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2200      	movs	r2, #0
 801124a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2200      	movs	r2, #0
 8011250:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	2200      	movs	r2, #0
 8011256:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801125a:	2300      	movs	r3, #0
}
 801125c:	4618      	mov	r0, r3
 801125e:	3758      	adds	r7, #88	; 0x58
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}

08011264 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b084      	sub	sp, #16
 8011268:	af00      	add	r7, sp, #0
 801126a:	60f8      	str	r0, [r7, #12]
 801126c:	60b9      	str	r1, [r7, #8]
 801126e:	603b      	str	r3, [r7, #0]
 8011270:	4613      	mov	r3, r2
 8011272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011274:	e04f      	b.n	8011316 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011276:	69bb      	ldr	r3, [r7, #24]
 8011278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801127c:	d04b      	beq.n	8011316 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801127e:	f7f2 fa7f 	bl	8003780 <HAL_GetTick>
 8011282:	4602      	mov	r2, r0
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	1ad3      	subs	r3, r2, r3
 8011288:	69ba      	ldr	r2, [r7, #24]
 801128a:	429a      	cmp	r2, r3
 801128c:	d302      	bcc.n	8011294 <UART_WaitOnFlagUntilTimeout+0x30>
 801128e:	69bb      	ldr	r3, [r7, #24]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d101      	bne.n	8011298 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011294:	2303      	movs	r3, #3
 8011296:	e04e      	b.n	8011336 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	f003 0304 	and.w	r3, r3, #4
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d037      	beq.n	8011316 <UART_WaitOnFlagUntilTimeout+0xb2>
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	2b80      	cmp	r3, #128	; 0x80
 80112aa:	d034      	beq.n	8011316 <UART_WaitOnFlagUntilTimeout+0xb2>
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	2b40      	cmp	r3, #64	; 0x40
 80112b0:	d031      	beq.n	8011316 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	69db      	ldr	r3, [r3, #28]
 80112b8:	f003 0308 	and.w	r3, r3, #8
 80112bc:	2b08      	cmp	r3, #8
 80112be:	d110      	bne.n	80112e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	2208      	movs	r2, #8
 80112c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80112c8:	68f8      	ldr	r0, [r7, #12]
 80112ca:	f000 f95b 	bl	8011584 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	2208      	movs	r2, #8
 80112d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	2200      	movs	r2, #0
 80112da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80112de:	2301      	movs	r3, #1
 80112e0:	e029      	b.n	8011336 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	69db      	ldr	r3, [r3, #28]
 80112e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80112ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80112f0:	d111      	bne.n	8011316 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80112fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80112fc:	68f8      	ldr	r0, [r7, #12]
 80112fe:	f000 f941 	bl	8011584 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2220      	movs	r2, #32
 8011306:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	2200      	movs	r2, #0
 801130e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011312:	2303      	movs	r3, #3
 8011314:	e00f      	b.n	8011336 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	69da      	ldr	r2, [r3, #28]
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	4013      	ands	r3, r2
 8011320:	68ba      	ldr	r2, [r7, #8]
 8011322:	429a      	cmp	r2, r3
 8011324:	bf0c      	ite	eq
 8011326:	2301      	moveq	r3, #1
 8011328:	2300      	movne	r3, #0
 801132a:	b2db      	uxtb	r3, r3
 801132c:	461a      	mov	r2, r3
 801132e:	79fb      	ldrb	r3, [r7, #7]
 8011330:	429a      	cmp	r2, r3
 8011332:	d0a0      	beq.n	8011276 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011334:	2300      	movs	r3, #0
}
 8011336:	4618      	mov	r0, r3
 8011338:	3710      	adds	r7, #16
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}
	...

08011340 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011340:	b480      	push	{r7}
 8011342:	b0a3      	sub	sp, #140	; 0x8c
 8011344:	af00      	add	r7, sp, #0
 8011346:	60f8      	str	r0, [r7, #12]
 8011348:	60b9      	str	r1, [r7, #8]
 801134a:	4613      	mov	r3, r2
 801134c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	68ba      	ldr	r2, [r7, #8]
 8011352:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	88fa      	ldrh	r2, [r7, #6]
 8011358:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	88fa      	ldrh	r2, [r7, #6]
 8011360:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	2200      	movs	r2, #0
 8011368:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	689b      	ldr	r3, [r3, #8]
 801136e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011372:	d10e      	bne.n	8011392 <UART_Start_Receive_IT+0x52>
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	691b      	ldr	r3, [r3, #16]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d105      	bne.n	8011388 <UART_Start_Receive_IT+0x48>
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011382:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011386:	e02d      	b.n	80113e4 <UART_Start_Receive_IT+0xa4>
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	22ff      	movs	r2, #255	; 0xff
 801138c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011390:	e028      	b.n	80113e4 <UART_Start_Receive_IT+0xa4>
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	689b      	ldr	r3, [r3, #8]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d10d      	bne.n	80113b6 <UART_Start_Receive_IT+0x76>
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	691b      	ldr	r3, [r3, #16]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d104      	bne.n	80113ac <UART_Start_Receive_IT+0x6c>
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	22ff      	movs	r2, #255	; 0xff
 80113a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80113aa:	e01b      	b.n	80113e4 <UART_Start_Receive_IT+0xa4>
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	227f      	movs	r2, #127	; 0x7f
 80113b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80113b4:	e016      	b.n	80113e4 <UART_Start_Receive_IT+0xa4>
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	689b      	ldr	r3, [r3, #8]
 80113ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80113be:	d10d      	bne.n	80113dc <UART_Start_Receive_IT+0x9c>
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	691b      	ldr	r3, [r3, #16]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d104      	bne.n	80113d2 <UART_Start_Receive_IT+0x92>
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	227f      	movs	r2, #127	; 0x7f
 80113cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80113d0:	e008      	b.n	80113e4 <UART_Start_Receive_IT+0xa4>
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	223f      	movs	r2, #63	; 0x3f
 80113d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80113da:	e003      	b.n	80113e4 <UART_Start_Receive_IT+0xa4>
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	2200      	movs	r2, #0
 80113e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	2200      	movs	r2, #0
 80113e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	2222      	movs	r2, #34	; 0x22
 80113f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	3308      	adds	r3, #8
 80113fa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80113fe:	e853 3f00 	ldrex	r3, [r3]
 8011402:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011404:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011406:	f043 0301 	orr.w	r3, r3, #1
 801140a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	3308      	adds	r3, #8
 8011414:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011418:	673a      	str	r2, [r7, #112]	; 0x70
 801141a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801141c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801141e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011420:	e841 2300 	strex	r3, r2, [r1]
 8011424:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011426:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011428:	2b00      	cmp	r3, #0
 801142a:	d1e3      	bne.n	80113f4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011434:	d14f      	bne.n	80114d6 <UART_Start_Receive_IT+0x196>
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801143c:	88fa      	ldrh	r2, [r7, #6]
 801143e:	429a      	cmp	r2, r3
 8011440:	d349      	bcc.n	80114d6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	689b      	ldr	r3, [r3, #8]
 8011446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801144a:	d107      	bne.n	801145c <UART_Start_Receive_IT+0x11c>
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	691b      	ldr	r3, [r3, #16]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d103      	bne.n	801145c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	4a47      	ldr	r2, [pc, #284]	; (8011574 <UART_Start_Receive_IT+0x234>)
 8011458:	675a      	str	r2, [r3, #116]	; 0x74
 801145a:	e002      	b.n	8011462 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	4a46      	ldr	r2, [pc, #280]	; (8011578 <UART_Start_Receive_IT+0x238>)
 8011460:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	691b      	ldr	r3, [r3, #16]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d01a      	beq.n	80114a0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011472:	e853 3f00 	ldrex	r3, [r3]
 8011476:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801147a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801147e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	461a      	mov	r2, r3
 8011488:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801148c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801148e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011490:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011492:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011494:	e841 2300 	strex	r3, r2, [r1]
 8011498:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801149a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801149c:	2b00      	cmp	r3, #0
 801149e:	d1e4      	bne.n	801146a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	3308      	adds	r3, #8
 80114a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114aa:	e853 3f00 	ldrex	r3, [r3]
 80114ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80114b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80114b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	3308      	adds	r3, #8
 80114be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80114c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80114c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80114c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114c8:	e841 2300 	strex	r3, r2, [r1]
 80114cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80114ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d1e5      	bne.n	80114a0 <UART_Start_Receive_IT+0x160>
 80114d4:	e046      	b.n	8011564 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	689b      	ldr	r3, [r3, #8]
 80114da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80114de:	d107      	bne.n	80114f0 <UART_Start_Receive_IT+0x1b0>
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	691b      	ldr	r3, [r3, #16]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d103      	bne.n	80114f0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	4a24      	ldr	r2, [pc, #144]	; (801157c <UART_Start_Receive_IT+0x23c>)
 80114ec:	675a      	str	r2, [r3, #116]	; 0x74
 80114ee:	e002      	b.n	80114f6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	4a23      	ldr	r2, [pc, #140]	; (8011580 <UART_Start_Receive_IT+0x240>)
 80114f4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	691b      	ldr	r3, [r3, #16]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d019      	beq.n	8011532 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011506:	e853 3f00 	ldrex	r3, [r3]
 801150a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801150e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011512:	677b      	str	r3, [r7, #116]	; 0x74
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	461a      	mov	r2, r3
 801151a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801151c:	637b      	str	r3, [r7, #52]	; 0x34
 801151e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011524:	e841 2300 	strex	r3, r2, [r1]
 8011528:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801152a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152c:	2b00      	cmp	r3, #0
 801152e:	d1e6      	bne.n	80114fe <UART_Start_Receive_IT+0x1be>
 8011530:	e018      	b.n	8011564 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	e853 3f00 	ldrex	r3, [r3]
 801153e:	613b      	str	r3, [r7, #16]
   return(result);
 8011540:	693b      	ldr	r3, [r7, #16]
 8011542:	f043 0320 	orr.w	r3, r3, #32
 8011546:	67bb      	str	r3, [r7, #120]	; 0x78
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	461a      	mov	r2, r3
 801154e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011550:	623b      	str	r3, [r7, #32]
 8011552:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011554:	69f9      	ldr	r1, [r7, #28]
 8011556:	6a3a      	ldr	r2, [r7, #32]
 8011558:	e841 2300 	strex	r3, r2, [r1]
 801155c:	61bb      	str	r3, [r7, #24]
   return(result);
 801155e:	69bb      	ldr	r3, [r7, #24]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d1e6      	bne.n	8011532 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011564:	2300      	movs	r3, #0
}
 8011566:	4618      	mov	r0, r3
 8011568:	378c      	adds	r7, #140	; 0x8c
 801156a:	46bd      	mov	sp, r7
 801156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011570:	4770      	bx	lr
 8011572:	bf00      	nop
 8011574:	08011da5 	.word	0x08011da5
 8011578:	08011a45 	.word	0x08011a45
 801157c:	0801188d 	.word	0x0801188d
 8011580:	080116d5 	.word	0x080116d5

08011584 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011584:	b480      	push	{r7}
 8011586:	b095      	sub	sp, #84	; 0x54
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011594:	e853 3f00 	ldrex	r3, [r3]
 8011598:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801159a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80115a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	461a      	mov	r2, r3
 80115a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115aa:	643b      	str	r3, [r7, #64]	; 0x40
 80115ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80115b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80115b2:	e841 2300 	strex	r3, r2, [r1]
 80115b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80115b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d1e6      	bne.n	801158c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	3308      	adds	r3, #8
 80115c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115c6:	6a3b      	ldr	r3, [r7, #32]
 80115c8:	e853 3f00 	ldrex	r3, [r3]
 80115cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80115ce:	69fa      	ldr	r2, [r7, #28]
 80115d0:	4b1e      	ldr	r3, [pc, #120]	; (801164c <UART_EndRxTransfer+0xc8>)
 80115d2:	4013      	ands	r3, r2
 80115d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	3308      	adds	r3, #8
 80115dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80115e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80115e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115e6:	e841 2300 	strex	r3, r2, [r1]
 80115ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80115ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d1e5      	bne.n	80115be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115f6:	2b01      	cmp	r3, #1
 80115f8:	d118      	bne.n	801162c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	e853 3f00 	ldrex	r3, [r3]
 8011606:	60bb      	str	r3, [r7, #8]
   return(result);
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	f023 0310 	bic.w	r3, r3, #16
 801160e:	647b      	str	r3, [r7, #68]	; 0x44
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	461a      	mov	r2, r3
 8011616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011618:	61bb      	str	r3, [r7, #24]
 801161a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801161c:	6979      	ldr	r1, [r7, #20]
 801161e:	69ba      	ldr	r2, [r7, #24]
 8011620:	e841 2300 	strex	r3, r2, [r1]
 8011624:	613b      	str	r3, [r7, #16]
   return(result);
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d1e6      	bne.n	80115fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2220      	movs	r2, #32
 8011630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2200      	movs	r2, #0
 8011638:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2200      	movs	r2, #0
 801163e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011640:	bf00      	nop
 8011642:	3754      	adds	r7, #84	; 0x54
 8011644:	46bd      	mov	sp, r7
 8011646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164a:	4770      	bx	lr
 801164c:	effffffe 	.word	0xeffffffe

08011650 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b084      	sub	sp, #16
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801165c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	2200      	movs	r2, #0
 8011662:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	2200      	movs	r2, #0
 801166a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801166e:	68f8      	ldr	r0, [r7, #12]
 8011670:	f7fe ff2e 	bl	80104d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011674:	bf00      	nop
 8011676:	3710      	adds	r7, #16
 8011678:	46bd      	mov	sp, r7
 801167a:	bd80      	pop	{r7, pc}

0801167c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b088      	sub	sp, #32
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	e853 3f00 	ldrex	r3, [r3]
 8011690:	60bb      	str	r3, [r7, #8]
   return(result);
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011698:	61fb      	str	r3, [r7, #28]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	461a      	mov	r2, r3
 80116a0:	69fb      	ldr	r3, [r7, #28]
 80116a2:	61bb      	str	r3, [r7, #24]
 80116a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116a6:	6979      	ldr	r1, [r7, #20]
 80116a8:	69ba      	ldr	r2, [r7, #24]
 80116aa:	e841 2300 	strex	r3, r2, [r1]
 80116ae:	613b      	str	r3, [r7, #16]
   return(result);
 80116b0:	693b      	ldr	r3, [r7, #16]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d1e6      	bne.n	8011684 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2220      	movs	r2, #32
 80116ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2200      	movs	r2, #0
 80116c2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f7fe fef9 	bl	80104bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80116ca:	bf00      	nop
 80116cc:	3720      	adds	r7, #32
 80116ce:	46bd      	mov	sp, r7
 80116d0:	bd80      	pop	{r7, pc}
	...

080116d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b09c      	sub	sp, #112	; 0x70
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80116e2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80116ec:	2b22      	cmp	r3, #34	; 0x22
 80116ee:	f040 80be 	bne.w	801186e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80116fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011700:	b2d9      	uxtb	r1, r3
 8011702:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011706:	b2da      	uxtb	r2, r3
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801170c:	400a      	ands	r2, r1
 801170e:	b2d2      	uxtb	r2, r2
 8011710:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011716:	1c5a      	adds	r2, r3, #1
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011722:	b29b      	uxth	r3, r3
 8011724:	3b01      	subs	r3, #1
 8011726:	b29a      	uxth	r2, r3
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011734:	b29b      	uxth	r3, r3
 8011736:	2b00      	cmp	r3, #0
 8011738:	f040 80a1 	bne.w	801187e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011744:	e853 3f00 	ldrex	r3, [r3]
 8011748:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801174a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801174c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011750:	66bb      	str	r3, [r7, #104]	; 0x68
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	461a      	mov	r2, r3
 8011758:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801175a:	65bb      	str	r3, [r7, #88]	; 0x58
 801175c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801175e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011760:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011762:	e841 2300 	strex	r3, r2, [r1]
 8011766:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011768:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801176a:	2b00      	cmp	r3, #0
 801176c:	d1e6      	bne.n	801173c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	3308      	adds	r3, #8
 8011774:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011778:	e853 3f00 	ldrex	r3, [r3]
 801177c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801177e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011780:	f023 0301 	bic.w	r3, r3, #1
 8011784:	667b      	str	r3, [r7, #100]	; 0x64
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	3308      	adds	r3, #8
 801178c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801178e:	647a      	str	r2, [r7, #68]	; 0x44
 8011790:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011792:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011796:	e841 2300 	strex	r3, r2, [r1]
 801179a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801179c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d1e5      	bne.n	801176e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2220      	movs	r2, #32
 80117a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	2200      	movs	r2, #0
 80117ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2200      	movs	r2, #0
 80117b4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	4a33      	ldr	r2, [pc, #204]	; (8011888 <UART_RxISR_8BIT+0x1b4>)
 80117bc:	4293      	cmp	r3, r2
 80117be:	d01f      	beq.n	8011800 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	685b      	ldr	r3, [r3, #4]
 80117c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d018      	beq.n	8011800 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d6:	e853 3f00 	ldrex	r3, [r3]
 80117da:	623b      	str	r3, [r7, #32]
   return(result);
 80117dc:	6a3b      	ldr	r3, [r7, #32]
 80117de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80117e2:	663b      	str	r3, [r7, #96]	; 0x60
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	461a      	mov	r2, r3
 80117ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117ec:	633b      	str	r3, [r7, #48]	; 0x30
 80117ee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80117f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117f4:	e841 2300 	strex	r3, r2, [r1]
 80117f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80117fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d1e6      	bne.n	80117ce <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011804:	2b01      	cmp	r3, #1
 8011806:	d12e      	bne.n	8011866 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2200      	movs	r2, #0
 801180c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011814:	693b      	ldr	r3, [r7, #16]
 8011816:	e853 3f00 	ldrex	r3, [r3]
 801181a:	60fb      	str	r3, [r7, #12]
   return(result);
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	f023 0310 	bic.w	r3, r3, #16
 8011822:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	461a      	mov	r2, r3
 801182a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801182c:	61fb      	str	r3, [r7, #28]
 801182e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011830:	69b9      	ldr	r1, [r7, #24]
 8011832:	69fa      	ldr	r2, [r7, #28]
 8011834:	e841 2300 	strex	r3, r2, [r1]
 8011838:	617b      	str	r3, [r7, #20]
   return(result);
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d1e6      	bne.n	801180e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	69db      	ldr	r3, [r3, #28]
 8011846:	f003 0310 	and.w	r3, r3, #16
 801184a:	2b10      	cmp	r3, #16
 801184c:	d103      	bne.n	8011856 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	2210      	movs	r2, #16
 8011854:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801185c:	4619      	mov	r1, r3
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f7fe fe40 	bl	80104e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011864:	e00b      	b.n	801187e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011866:	6878      	ldr	r0, [r7, #4]
 8011868:	f7ee fef2 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 801186c:	e007      	b.n	801187e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	699a      	ldr	r2, [r3, #24]
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	f042 0208 	orr.w	r2, r2, #8
 801187c:	619a      	str	r2, [r3, #24]
}
 801187e:	bf00      	nop
 8011880:	3770      	adds	r7, #112	; 0x70
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
 8011886:	bf00      	nop
 8011888:	58000c00 	.word	0x58000c00

0801188c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b09c      	sub	sp, #112	; 0x70
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801189a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118a4:	2b22      	cmp	r3, #34	; 0x22
 80118a6:	f040 80be 	bne.w	8011a26 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118b8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80118ba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80118be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80118c2:	4013      	ands	r3, r2
 80118c4:	b29a      	uxth	r2, r3
 80118c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80118c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118ce:	1c9a      	adds	r2, r3, #2
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80118da:	b29b      	uxth	r3, r3
 80118dc:	3b01      	subs	r3, #1
 80118de:	b29a      	uxth	r2, r3
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	f040 80a1 	bne.w	8011a36 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80118fc:	e853 3f00 	ldrex	r3, [r3]
 8011900:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011908:	667b      	str	r3, [r7, #100]	; 0x64
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	461a      	mov	r2, r3
 8011910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011912:	657b      	str	r3, [r7, #84]	; 0x54
 8011914:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011916:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011918:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801191a:	e841 2300 	strex	r3, r2, [r1]
 801191e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011922:	2b00      	cmp	r3, #0
 8011924:	d1e6      	bne.n	80118f4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	3308      	adds	r3, #8
 801192c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801192e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011930:	e853 3f00 	ldrex	r3, [r3]
 8011934:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011938:	f023 0301 	bic.w	r3, r3, #1
 801193c:	663b      	str	r3, [r7, #96]	; 0x60
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	3308      	adds	r3, #8
 8011944:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011946:	643a      	str	r2, [r7, #64]	; 0x40
 8011948:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801194a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801194c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801194e:	e841 2300 	strex	r3, r2, [r1]
 8011952:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011956:	2b00      	cmp	r3, #0
 8011958:	d1e5      	bne.n	8011926 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2220      	movs	r2, #32
 801195e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2200      	movs	r2, #0
 8011966:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2200      	movs	r2, #0
 801196c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	4a33      	ldr	r2, [pc, #204]	; (8011a40 <UART_RxISR_16BIT+0x1b4>)
 8011974:	4293      	cmp	r3, r2
 8011976:	d01f      	beq.n	80119b8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	685b      	ldr	r3, [r3, #4]
 801197e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011982:	2b00      	cmp	r3, #0
 8011984:	d018      	beq.n	80119b8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801198c:	6a3b      	ldr	r3, [r7, #32]
 801198e:	e853 3f00 	ldrex	r3, [r3]
 8011992:	61fb      	str	r3, [r7, #28]
   return(result);
 8011994:	69fb      	ldr	r3, [r7, #28]
 8011996:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801199a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	461a      	mov	r2, r3
 80119a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80119a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119a6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80119aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119ac:	e841 2300 	strex	r3, r2, [r1]
 80119b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80119b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d1e6      	bne.n	8011986 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119bc:	2b01      	cmp	r3, #1
 80119be:	d12e      	bne.n	8011a1e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2200      	movs	r2, #0
 80119c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	e853 3f00 	ldrex	r3, [r3]
 80119d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	f023 0310 	bic.w	r3, r3, #16
 80119da:	65bb      	str	r3, [r7, #88]	; 0x58
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	461a      	mov	r2, r3
 80119e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80119e4:	61bb      	str	r3, [r7, #24]
 80119e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119e8:	6979      	ldr	r1, [r7, #20]
 80119ea:	69ba      	ldr	r2, [r7, #24]
 80119ec:	e841 2300 	strex	r3, r2, [r1]
 80119f0:	613b      	str	r3, [r7, #16]
   return(result);
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d1e6      	bne.n	80119c6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	69db      	ldr	r3, [r3, #28]
 80119fe:	f003 0310 	and.w	r3, r3, #16
 8011a02:	2b10      	cmp	r3, #16
 8011a04:	d103      	bne.n	8011a0e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	2210      	movs	r2, #16
 8011a0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011a14:	4619      	mov	r1, r3
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	f7fe fd64 	bl	80104e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011a1c:	e00b      	b.n	8011a36 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f7ee fe16 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8011a24:	e007      	b.n	8011a36 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	699a      	ldr	r2, [r3, #24]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	f042 0208 	orr.w	r2, r2, #8
 8011a34:	619a      	str	r2, [r3, #24]
}
 8011a36:	bf00      	nop
 8011a38:	3770      	adds	r7, #112	; 0x70
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}
 8011a3e:	bf00      	nop
 8011a40:	58000c00 	.word	0x58000c00

08011a44 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b0ac      	sub	sp, #176	; 0xb0
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a52:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	69db      	ldr	r3, [r3, #28]
 8011a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	689b      	ldr	r3, [r3, #8]
 8011a70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a7a:	2b22      	cmp	r3, #34	; 0x22
 8011a7c:	f040 8180 	bne.w	8011d80 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011a86:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011a8a:	e123      	b.n	8011cd4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a92:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011a96:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011a9a:	b2d9      	uxtb	r1, r3
 8011a9c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8011aa0:	b2da      	uxtb	r2, r3
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011aa6:	400a      	ands	r2, r1
 8011aa8:	b2d2      	uxtb	r2, r2
 8011aaa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ab0:	1c5a      	adds	r2, r3, #1
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011abc:	b29b      	uxth	r3, r3
 8011abe:	3b01      	subs	r3, #1
 8011ac0:	b29a      	uxth	r2, r3
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	69db      	ldr	r3, [r3, #28]
 8011ace:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ad6:	f003 0307 	and.w	r3, r3, #7
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d053      	beq.n	8011b86 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ae2:	f003 0301 	and.w	r3, r3, #1
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d011      	beq.n	8011b0e <UART_RxISR_8BIT_FIFOEN+0xca>
 8011aea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d00b      	beq.n	8011b0e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	2201      	movs	r2, #1
 8011afc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b04:	f043 0201 	orr.w	r2, r3, #1
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011b12:	f003 0302 	and.w	r3, r3, #2
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d011      	beq.n	8011b3e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011b1e:	f003 0301 	and.w	r3, r3, #1
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d00b      	beq.n	8011b3e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	2202      	movs	r2, #2
 8011b2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b34:	f043 0204 	orr.w	r2, r3, #4
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011b42:	f003 0304 	and.w	r3, r3, #4
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d011      	beq.n	8011b6e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011b4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011b4e:	f003 0301 	and.w	r3, r3, #1
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d00b      	beq.n	8011b6e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	2204      	movs	r2, #4
 8011b5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b64:	f043 0202 	orr.w	r2, r3, #2
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d006      	beq.n	8011b86 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f7fe fca9 	bl	80104d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	2200      	movs	r2, #0
 8011b82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011b8c:	b29b      	uxth	r3, r3
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	f040 80a0 	bne.w	8011cd4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b9c:	e853 3f00 	ldrex	r3, [r3]
 8011ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8011ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	461a      	mov	r2, r3
 8011bb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011bb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011bb8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011bbc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011bbe:	e841 2300 	strex	r3, r2, [r1]
 8011bc2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8011bc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d1e4      	bne.n	8011b94 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	3308      	adds	r3, #8
 8011bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011bd4:	e853 3f00 	ldrex	r3, [r3]
 8011bd8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8011bda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011bdc:	4b6e      	ldr	r3, [pc, #440]	; (8011d98 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8011bde:	4013      	ands	r3, r2
 8011be0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	3308      	adds	r3, #8
 8011bea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011bee:	66ba      	str	r2, [r7, #104]	; 0x68
 8011bf0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bf2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011bf4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011bf6:	e841 2300 	strex	r3, r2, [r1]
 8011bfa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011bfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d1e3      	bne.n	8011bca <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2220      	movs	r2, #32
 8011c06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	2200      	movs	r2, #0
 8011c14:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	4a60      	ldr	r2, [pc, #384]	; (8011d9c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011c1c:	4293      	cmp	r3, r2
 8011c1e:	d021      	beq.n	8011c64 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	685b      	ldr	r3, [r3, #4]
 8011c26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d01a      	beq.n	8011c64 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c36:	e853 3f00 	ldrex	r3, [r3]
 8011c3a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	461a      	mov	r2, r3
 8011c4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011c50:	657b      	str	r3, [r7, #84]	; 0x54
 8011c52:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011c56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011c58:	e841 2300 	strex	r3, r2, [r1]
 8011c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d1e4      	bne.n	8011c2e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c68:	2b01      	cmp	r3, #1
 8011c6a:	d130      	bne.n	8011cce <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2200      	movs	r2, #0
 8011c70:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c7a:	e853 3f00 	ldrex	r3, [r3]
 8011c7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c82:	f023 0310 	bic.w	r3, r3, #16
 8011c86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	461a      	mov	r2, r3
 8011c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011c94:	643b      	str	r3, [r7, #64]	; 0x40
 8011c96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011c9c:	e841 2300 	strex	r3, r2, [r1]
 8011ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d1e4      	bne.n	8011c72 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	69db      	ldr	r3, [r3, #28]
 8011cae:	f003 0310 	and.w	r3, r3, #16
 8011cb2:	2b10      	cmp	r3, #16
 8011cb4:	d103      	bne.n	8011cbe <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	2210      	movs	r2, #16
 8011cbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	f7fe fc0c 	bl	80104e4 <HAL_UARTEx_RxEventCallback>
 8011ccc:	e002      	b.n	8011cd4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f7ee fcbe 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011cd4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d006      	beq.n	8011cea <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8011cdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ce0:	f003 0320 	and.w	r3, r3, #32
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	f47f aed1 	bne.w	8011a8c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011cf0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011cf4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d049      	beq.n	8011d90 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011d02:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d242      	bcs.n	8011d90 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	3308      	adds	r3, #8
 8011d10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d12:	6a3b      	ldr	r3, [r7, #32]
 8011d14:	e853 3f00 	ldrex	r3, [r3]
 8011d18:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d1a:	69fb      	ldr	r3, [r7, #28]
 8011d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	3308      	adds	r3, #8
 8011d2a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011d2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011d30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d36:	e841 2300 	strex	r3, r2, [r1]
 8011d3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d1e3      	bne.n	8011d0a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	4a16      	ldr	r2, [pc, #88]	; (8011da0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011d46:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	e853 3f00 	ldrex	r3, [r3]
 8011d54:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	f043 0320 	orr.w	r3, r3, #32
 8011d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	461a      	mov	r2, r3
 8011d66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011d6a:	61bb      	str	r3, [r7, #24]
 8011d6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d6e:	6979      	ldr	r1, [r7, #20]
 8011d70:	69ba      	ldr	r2, [r7, #24]
 8011d72:	e841 2300 	strex	r3, r2, [r1]
 8011d76:	613b      	str	r3, [r7, #16]
   return(result);
 8011d78:	693b      	ldr	r3, [r7, #16]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d1e4      	bne.n	8011d48 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011d7e:	e007      	b.n	8011d90 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	699a      	ldr	r2, [r3, #24]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	f042 0208 	orr.w	r2, r2, #8
 8011d8e:	619a      	str	r2, [r3, #24]
}
 8011d90:	bf00      	nop
 8011d92:	37b0      	adds	r7, #176	; 0xb0
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}
 8011d98:	effffffe 	.word	0xeffffffe
 8011d9c:	58000c00 	.word	0x58000c00
 8011da0:	080116d5 	.word	0x080116d5

08011da4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b0ae      	sub	sp, #184	; 0xb8
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011db2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	69db      	ldr	r3, [r3, #28]
 8011dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	689b      	ldr	r3, [r3, #8]
 8011dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011dda:	2b22      	cmp	r3, #34	; 0x22
 8011ddc:	f040 8184 	bne.w	80120e8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011de6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011dea:	e127      	b.n	801203c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011df2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011dfe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8011e02:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8011e06:	4013      	ands	r3, r2
 8011e08:	b29a      	uxth	r2, r3
 8011e0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011e0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e14:	1c9a      	adds	r2, r3, #2
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011e20:	b29b      	uxth	r3, r3
 8011e22:	3b01      	subs	r3, #1
 8011e24:	b29a      	uxth	r2, r3
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	69db      	ldr	r3, [r3, #28]
 8011e32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011e36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011e3a:	f003 0307 	and.w	r3, r3, #7
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d053      	beq.n	8011eea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011e46:	f003 0301 	and.w	r3, r3, #1
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d011      	beq.n	8011e72 <UART_RxISR_16BIT_FIFOEN+0xce>
 8011e4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d00b      	beq.n	8011e72 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	2201      	movs	r2, #1
 8011e60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e68:	f043 0201 	orr.w	r2, r3, #1
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011e72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011e76:	f003 0302 	and.w	r3, r3, #2
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d011      	beq.n	8011ea2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011e7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011e82:	f003 0301 	and.w	r3, r3, #1
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d00b      	beq.n	8011ea2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	2202      	movs	r2, #2
 8011e90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e98:	f043 0204 	orr.w	r2, r3, #4
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011ea2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011ea6:	f003 0304 	and.w	r3, r3, #4
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d011      	beq.n	8011ed2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011eae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011eb2:	f003 0301 	and.w	r3, r3, #1
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d00b      	beq.n	8011ed2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	2204      	movs	r2, #4
 8011ec0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ec8:	f043 0202 	orr.w	r2, r3, #2
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d006      	beq.n	8011eea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f7fe faf7 	bl	80104d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011ef0:	b29b      	uxth	r3, r3
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	f040 80a2 	bne.w	801203c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011f00:	e853 3f00 	ldrex	r3, [r3]
 8011f04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011f0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	461a      	mov	r2, r3
 8011f16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011f1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011f1e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011f22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011f26:	e841 2300 	strex	r3, r2, [r1]
 8011f2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d1e2      	bne.n	8011ef8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	3308      	adds	r3, #8
 8011f38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f3c:	e853 3f00 	ldrex	r3, [r3]
 8011f40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011f42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011f44:	4b6e      	ldr	r3, [pc, #440]	; (8012100 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8011f46:	4013      	ands	r3, r2
 8011f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	3308      	adds	r3, #8
 8011f52:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011f56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011f58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011f5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011f5e:	e841 2300 	strex	r3, r2, [r1]
 8011f62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011f64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d1e3      	bne.n	8011f32 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	2220      	movs	r2, #32
 8011f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2200      	movs	r2, #0
 8011f76:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	4a60      	ldr	r2, [pc, #384]	; (8012104 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011f84:	4293      	cmp	r3, r2
 8011f86:	d021      	beq.n	8011fcc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d01a      	beq.n	8011fcc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f9e:	e853 3f00 	ldrex	r3, [r3]
 8011fa2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fa6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011faa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	461a      	mov	r2, r3
 8011fb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011fb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8011fba:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011fbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011fc0:	e841 2300 	strex	r3, r2, [r1]
 8011fc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d1e4      	bne.n	8011f96 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fd0:	2b01      	cmp	r3, #1
 8011fd2:	d130      	bne.n	8012036 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe2:	e853 3f00 	ldrex	r3, [r3]
 8011fe6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fea:	f023 0310 	bic.w	r3, r3, #16
 8011fee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	461a      	mov	r2, r3
 8011ff8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8011ffe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012000:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012004:	e841 2300 	strex	r3, r2, [r1]
 8012008:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801200a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801200c:	2b00      	cmp	r3, #0
 801200e:	d1e4      	bne.n	8011fda <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	69db      	ldr	r3, [r3, #28]
 8012016:	f003 0310 	and.w	r3, r3, #16
 801201a:	2b10      	cmp	r3, #16
 801201c:	d103      	bne.n	8012026 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	2210      	movs	r2, #16
 8012024:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801202c:	4619      	mov	r1, r3
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f7fe fa58 	bl	80104e4 <HAL_UARTEx_RxEventCallback>
 8012034:	e002      	b.n	801203c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012036:	6878      	ldr	r0, [r7, #4]
 8012038:	f7ee fb0a 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801203c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012040:	2b00      	cmp	r3, #0
 8012042:	d006      	beq.n	8012052 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012044:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012048:	f003 0320 	and.w	r3, r3, #32
 801204c:	2b00      	cmp	r3, #0
 801204e:	f47f aecd 	bne.w	8011dec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012058:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801205c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012060:	2b00      	cmp	r3, #0
 8012062:	d049      	beq.n	80120f8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801206a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801206e:	429a      	cmp	r2, r3
 8012070:	d242      	bcs.n	80120f8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	3308      	adds	r3, #8
 8012078:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801207c:	e853 3f00 	ldrex	r3, [r3]
 8012080:	623b      	str	r3, [r7, #32]
   return(result);
 8012082:	6a3b      	ldr	r3, [r7, #32]
 8012084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	3308      	adds	r3, #8
 8012092:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012096:	633a      	str	r2, [r7, #48]	; 0x30
 8012098:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801209a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801209c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801209e:	e841 2300 	strex	r3, r2, [r1]
 80120a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80120a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d1e3      	bne.n	8012072 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	4a16      	ldr	r2, [pc, #88]	; (8012108 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80120ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120b6:	693b      	ldr	r3, [r7, #16]
 80120b8:	e853 3f00 	ldrex	r3, [r3]
 80120bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	f043 0320 	orr.w	r3, r3, #32
 80120c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	461a      	mov	r2, r3
 80120ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80120d2:	61fb      	str	r3, [r7, #28]
 80120d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120d6:	69b9      	ldr	r1, [r7, #24]
 80120d8:	69fa      	ldr	r2, [r7, #28]
 80120da:	e841 2300 	strex	r3, r2, [r1]
 80120de:	617b      	str	r3, [r7, #20]
   return(result);
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d1e4      	bne.n	80120b0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80120e6:	e007      	b.n	80120f8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	699a      	ldr	r2, [r3, #24]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	f042 0208 	orr.w	r2, r2, #8
 80120f6:	619a      	str	r2, [r3, #24]
}
 80120f8:	bf00      	nop
 80120fa:	37b8      	adds	r7, #184	; 0xb8
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bd80      	pop	{r7, pc}
 8012100:	effffffe 	.word	0xeffffffe
 8012104:	58000c00 	.word	0x58000c00
 8012108:	0801188d 	.word	0x0801188d

0801210c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801210c:	b480      	push	{r7}
 801210e:	b083      	sub	sp, #12
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012114:	bf00      	nop
 8012116:	370c      	adds	r7, #12
 8012118:	46bd      	mov	sp, r7
 801211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211e:	4770      	bx	lr

08012120 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012120:	b480      	push	{r7}
 8012122:	b083      	sub	sp, #12
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012128:	bf00      	nop
 801212a:	370c      	adds	r7, #12
 801212c:	46bd      	mov	sp, r7
 801212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012132:	4770      	bx	lr

08012134 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012134:	b480      	push	{r7}
 8012136:	b083      	sub	sp, #12
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801213c:	bf00      	nop
 801213e:	370c      	adds	r7, #12
 8012140:	46bd      	mov	sp, r7
 8012142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012146:	4770      	bx	lr

08012148 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012148:	b480      	push	{r7}
 801214a:	b085      	sub	sp, #20
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012156:	2b01      	cmp	r3, #1
 8012158:	d101      	bne.n	801215e <HAL_UARTEx_DisableFifoMode+0x16>
 801215a:	2302      	movs	r3, #2
 801215c:	e027      	b.n	80121ae <HAL_UARTEx_DisableFifoMode+0x66>
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2201      	movs	r2, #1
 8012162:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2224      	movs	r2, #36	; 0x24
 801216a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	681a      	ldr	r2, [r3, #0]
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	f022 0201 	bic.w	r2, r2, #1
 8012184:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801218c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2200      	movs	r2, #0
 8012192:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	68fa      	ldr	r2, [r7, #12]
 801219a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	2220      	movs	r2, #32
 80121a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2200      	movs	r2, #0
 80121a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80121ac:	2300      	movs	r3, #0
}
 80121ae:	4618      	mov	r0, r3
 80121b0:	3714      	adds	r7, #20
 80121b2:	46bd      	mov	sp, r7
 80121b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b8:	4770      	bx	lr

080121ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80121ba:	b580      	push	{r7, lr}
 80121bc:	b084      	sub	sp, #16
 80121be:	af00      	add	r7, sp, #0
 80121c0:	6078      	str	r0, [r7, #4]
 80121c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80121ca:	2b01      	cmp	r3, #1
 80121cc:	d101      	bne.n	80121d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80121ce:	2302      	movs	r3, #2
 80121d0:	e02d      	b.n	801222e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2201      	movs	r2, #1
 80121d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	2224      	movs	r2, #36	; 0x24
 80121de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	681a      	ldr	r2, [r3, #0]
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	f022 0201 	bic.w	r2, r2, #1
 80121f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	689b      	ldr	r3, [r3, #8]
 8012200:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	683a      	ldr	r2, [r7, #0]
 801220a:	430a      	orrs	r2, r1
 801220c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f000 f850 	bl	80122b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	68fa      	ldr	r2, [r7, #12]
 801221a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2220      	movs	r2, #32
 8012220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2200      	movs	r2, #0
 8012228:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801222c:	2300      	movs	r3, #0
}
 801222e:	4618      	mov	r0, r3
 8012230:	3710      	adds	r7, #16
 8012232:	46bd      	mov	sp, r7
 8012234:	bd80      	pop	{r7, pc}

08012236 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012236:	b580      	push	{r7, lr}
 8012238:	b084      	sub	sp, #16
 801223a:	af00      	add	r7, sp, #0
 801223c:	6078      	str	r0, [r7, #4]
 801223e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012246:	2b01      	cmp	r3, #1
 8012248:	d101      	bne.n	801224e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801224a:	2302      	movs	r3, #2
 801224c:	e02d      	b.n	80122aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2201      	movs	r2, #1
 8012252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2224      	movs	r2, #36	; 0x24
 801225a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	681a      	ldr	r2, [r3, #0]
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	f022 0201 	bic.w	r2, r2, #1
 8012274:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	689b      	ldr	r3, [r3, #8]
 801227c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	683a      	ldr	r2, [r7, #0]
 8012286:	430a      	orrs	r2, r1
 8012288:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f000 f812 	bl	80122b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	68fa      	ldr	r2, [r7, #12]
 8012296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	2220      	movs	r2, #32
 801229c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2200      	movs	r2, #0
 80122a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80122a8:	2300      	movs	r3, #0
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3710      	adds	r7, #16
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
	...

080122b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80122b4:	b480      	push	{r7}
 80122b6:	b085      	sub	sp, #20
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d108      	bne.n	80122d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2201      	movs	r2, #1
 80122c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2201      	movs	r2, #1
 80122d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80122d4:	e031      	b.n	801233a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80122d6:	2310      	movs	r3, #16
 80122d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80122da:	2310      	movs	r3, #16
 80122dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	689b      	ldr	r3, [r3, #8]
 80122e4:	0e5b      	lsrs	r3, r3, #25
 80122e6:	b2db      	uxtb	r3, r3
 80122e8:	f003 0307 	and.w	r3, r3, #7
 80122ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	689b      	ldr	r3, [r3, #8]
 80122f4:	0f5b      	lsrs	r3, r3, #29
 80122f6:	b2db      	uxtb	r3, r3
 80122f8:	f003 0307 	and.w	r3, r3, #7
 80122fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80122fe:	7bbb      	ldrb	r3, [r7, #14]
 8012300:	7b3a      	ldrb	r2, [r7, #12]
 8012302:	4911      	ldr	r1, [pc, #68]	; (8012348 <UARTEx_SetNbDataToProcess+0x94>)
 8012304:	5c8a      	ldrb	r2, [r1, r2]
 8012306:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801230a:	7b3a      	ldrb	r2, [r7, #12]
 801230c:	490f      	ldr	r1, [pc, #60]	; (801234c <UARTEx_SetNbDataToProcess+0x98>)
 801230e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012310:	fb93 f3f2 	sdiv	r3, r3, r2
 8012314:	b29a      	uxth	r2, r3
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801231c:	7bfb      	ldrb	r3, [r7, #15]
 801231e:	7b7a      	ldrb	r2, [r7, #13]
 8012320:	4909      	ldr	r1, [pc, #36]	; (8012348 <UARTEx_SetNbDataToProcess+0x94>)
 8012322:	5c8a      	ldrb	r2, [r1, r2]
 8012324:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012328:	7b7a      	ldrb	r2, [r7, #13]
 801232a:	4908      	ldr	r1, [pc, #32]	; (801234c <UARTEx_SetNbDataToProcess+0x98>)
 801232c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801232e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012332:	b29a      	uxth	r2, r3
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801233a:	bf00      	nop
 801233c:	3714      	adds	r7, #20
 801233e:	46bd      	mov	sp, r7
 8012340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012344:	4770      	bx	lr
 8012346:	bf00      	nop
 8012348:	080166ac 	.word	0x080166ac
 801234c:	080166b4 	.word	0x080166b4

08012350 <__NVIC_SetPriority>:
{
 8012350:	b480      	push	{r7}
 8012352:	b083      	sub	sp, #12
 8012354:	af00      	add	r7, sp, #0
 8012356:	4603      	mov	r3, r0
 8012358:	6039      	str	r1, [r7, #0]
 801235a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801235c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012360:	2b00      	cmp	r3, #0
 8012362:	db0a      	blt.n	801237a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	b2da      	uxtb	r2, r3
 8012368:	490c      	ldr	r1, [pc, #48]	; (801239c <__NVIC_SetPriority+0x4c>)
 801236a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801236e:	0112      	lsls	r2, r2, #4
 8012370:	b2d2      	uxtb	r2, r2
 8012372:	440b      	add	r3, r1
 8012374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012378:	e00a      	b.n	8012390 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	b2da      	uxtb	r2, r3
 801237e:	4908      	ldr	r1, [pc, #32]	; (80123a0 <__NVIC_SetPriority+0x50>)
 8012380:	88fb      	ldrh	r3, [r7, #6]
 8012382:	f003 030f 	and.w	r3, r3, #15
 8012386:	3b04      	subs	r3, #4
 8012388:	0112      	lsls	r2, r2, #4
 801238a:	b2d2      	uxtb	r2, r2
 801238c:	440b      	add	r3, r1
 801238e:	761a      	strb	r2, [r3, #24]
}
 8012390:	bf00      	nop
 8012392:	370c      	adds	r7, #12
 8012394:	46bd      	mov	sp, r7
 8012396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239a:	4770      	bx	lr
 801239c:	e000e100 	.word	0xe000e100
 80123a0:	e000ed00 	.word	0xe000ed00

080123a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80123a4:	b580      	push	{r7, lr}
 80123a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80123a8:	4b05      	ldr	r3, [pc, #20]	; (80123c0 <SysTick_Handler+0x1c>)
 80123aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80123ac:	f002 f9ce 	bl	801474c <xTaskGetSchedulerState>
 80123b0:	4603      	mov	r3, r0
 80123b2:	2b01      	cmp	r3, #1
 80123b4:	d001      	beq.n	80123ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80123b6:	f002 ffef 	bl	8015398 <xPortSysTickHandler>
  }
}
 80123ba:	bf00      	nop
 80123bc:	bd80      	pop	{r7, pc}
 80123be:	bf00      	nop
 80123c0:	e000e010 	.word	0xe000e010

080123c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80123c4:	b580      	push	{r7, lr}
 80123c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80123c8:	2100      	movs	r1, #0
 80123ca:	f06f 0004 	mvn.w	r0, #4
 80123ce:	f7ff ffbf 	bl	8012350 <__NVIC_SetPriority>
#endif
}
 80123d2:	bf00      	nop
 80123d4:	bd80      	pop	{r7, pc}
	...

080123d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80123d8:	b480      	push	{r7}
 80123da:	b083      	sub	sp, #12
 80123dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80123de:	f3ef 8305 	mrs	r3, IPSR
 80123e2:	603b      	str	r3, [r7, #0]
  return(result);
 80123e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d003      	beq.n	80123f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80123ea:	f06f 0305 	mvn.w	r3, #5
 80123ee:	607b      	str	r3, [r7, #4]
 80123f0:	e00c      	b.n	801240c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80123f2:	4b0a      	ldr	r3, [pc, #40]	; (801241c <osKernelInitialize+0x44>)
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d105      	bne.n	8012406 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80123fa:	4b08      	ldr	r3, [pc, #32]	; (801241c <osKernelInitialize+0x44>)
 80123fc:	2201      	movs	r2, #1
 80123fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012400:	2300      	movs	r3, #0
 8012402:	607b      	str	r3, [r7, #4]
 8012404:	e002      	b.n	801240c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801240a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801240c:	687b      	ldr	r3, [r7, #4]
}
 801240e:	4618      	mov	r0, r3
 8012410:	370c      	adds	r7, #12
 8012412:	46bd      	mov	sp, r7
 8012414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012418:	4770      	bx	lr
 801241a:	bf00      	nop
 801241c:	24000c3c 	.word	0x24000c3c

08012420 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012420:	b580      	push	{r7, lr}
 8012422:	b082      	sub	sp, #8
 8012424:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012426:	f3ef 8305 	mrs	r3, IPSR
 801242a:	603b      	str	r3, [r7, #0]
  return(result);
 801242c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801242e:	2b00      	cmp	r3, #0
 8012430:	d003      	beq.n	801243a <osKernelStart+0x1a>
    stat = osErrorISR;
 8012432:	f06f 0305 	mvn.w	r3, #5
 8012436:	607b      	str	r3, [r7, #4]
 8012438:	e010      	b.n	801245c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801243a:	4b0b      	ldr	r3, [pc, #44]	; (8012468 <osKernelStart+0x48>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	2b01      	cmp	r3, #1
 8012440:	d109      	bne.n	8012456 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012442:	f7ff ffbf 	bl	80123c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012446:	4b08      	ldr	r3, [pc, #32]	; (8012468 <osKernelStart+0x48>)
 8012448:	2202      	movs	r2, #2
 801244a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801244c:	f001 fc98 	bl	8013d80 <vTaskStartScheduler>
      stat = osOK;
 8012450:	2300      	movs	r3, #0
 8012452:	607b      	str	r3, [r7, #4]
 8012454:	e002      	b.n	801245c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801245a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801245c:	687b      	ldr	r3, [r7, #4]
}
 801245e:	4618      	mov	r0, r3
 8012460:	3708      	adds	r7, #8
 8012462:	46bd      	mov	sp, r7
 8012464:	bd80      	pop	{r7, pc}
 8012466:	bf00      	nop
 8012468:	24000c3c 	.word	0x24000c3c

0801246c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801246c:	b580      	push	{r7, lr}
 801246e:	b08e      	sub	sp, #56	; 0x38
 8012470:	af04      	add	r7, sp, #16
 8012472:	60f8      	str	r0, [r7, #12]
 8012474:	60b9      	str	r1, [r7, #8]
 8012476:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012478:	2300      	movs	r3, #0
 801247a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801247c:	f3ef 8305 	mrs	r3, IPSR
 8012480:	617b      	str	r3, [r7, #20]
  return(result);
 8012482:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012484:	2b00      	cmp	r3, #0
 8012486:	d17e      	bne.n	8012586 <osThreadNew+0x11a>
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d07b      	beq.n	8012586 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801248e:	2380      	movs	r3, #128	; 0x80
 8012490:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012492:	2318      	movs	r3, #24
 8012494:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012496:	2300      	movs	r3, #0
 8012498:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801249a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801249e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d045      	beq.n	8012532 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d002      	beq.n	80124b4 <osThreadNew+0x48>
        name = attr->name;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	699b      	ldr	r3, [r3, #24]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d002      	beq.n	80124c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	699b      	ldr	r3, [r3, #24]
 80124c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80124c2:	69fb      	ldr	r3, [r7, #28]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d008      	beq.n	80124da <osThreadNew+0x6e>
 80124c8:	69fb      	ldr	r3, [r7, #28]
 80124ca:	2b38      	cmp	r3, #56	; 0x38
 80124cc:	d805      	bhi.n	80124da <osThreadNew+0x6e>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	685b      	ldr	r3, [r3, #4]
 80124d2:	f003 0301 	and.w	r3, r3, #1
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d001      	beq.n	80124de <osThreadNew+0x72>
        return (NULL);
 80124da:	2300      	movs	r3, #0
 80124dc:	e054      	b.n	8012588 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	695b      	ldr	r3, [r3, #20]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d003      	beq.n	80124ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	695b      	ldr	r3, [r3, #20]
 80124ea:	089b      	lsrs	r3, r3, #2
 80124ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	689b      	ldr	r3, [r3, #8]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d00e      	beq.n	8012514 <osThreadNew+0xa8>
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	68db      	ldr	r3, [r3, #12]
 80124fa:	2b5b      	cmp	r3, #91	; 0x5b
 80124fc:	d90a      	bls.n	8012514 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012502:	2b00      	cmp	r3, #0
 8012504:	d006      	beq.n	8012514 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	695b      	ldr	r3, [r3, #20]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d002      	beq.n	8012514 <osThreadNew+0xa8>
        mem = 1;
 801250e:	2301      	movs	r3, #1
 8012510:	61bb      	str	r3, [r7, #24]
 8012512:	e010      	b.n	8012536 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	689b      	ldr	r3, [r3, #8]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d10c      	bne.n	8012536 <osThreadNew+0xca>
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	68db      	ldr	r3, [r3, #12]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d108      	bne.n	8012536 <osThreadNew+0xca>
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	691b      	ldr	r3, [r3, #16]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d104      	bne.n	8012536 <osThreadNew+0xca>
          mem = 0;
 801252c:	2300      	movs	r3, #0
 801252e:	61bb      	str	r3, [r7, #24]
 8012530:	e001      	b.n	8012536 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012532:	2300      	movs	r3, #0
 8012534:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012536:	69bb      	ldr	r3, [r7, #24]
 8012538:	2b01      	cmp	r3, #1
 801253a:	d110      	bne.n	801255e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012540:	687a      	ldr	r2, [r7, #4]
 8012542:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012544:	9202      	str	r2, [sp, #8]
 8012546:	9301      	str	r3, [sp, #4]
 8012548:	69fb      	ldr	r3, [r7, #28]
 801254a:	9300      	str	r3, [sp, #0]
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	6a3a      	ldr	r2, [r7, #32]
 8012550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012552:	68f8      	ldr	r0, [r7, #12]
 8012554:	f001 f924 	bl	80137a0 <xTaskCreateStatic>
 8012558:	4603      	mov	r3, r0
 801255a:	613b      	str	r3, [r7, #16]
 801255c:	e013      	b.n	8012586 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801255e:	69bb      	ldr	r3, [r7, #24]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d110      	bne.n	8012586 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012564:	6a3b      	ldr	r3, [r7, #32]
 8012566:	b29a      	uxth	r2, r3
 8012568:	f107 0310 	add.w	r3, r7, #16
 801256c:	9301      	str	r3, [sp, #4]
 801256e:	69fb      	ldr	r3, [r7, #28]
 8012570:	9300      	str	r3, [sp, #0]
 8012572:	68bb      	ldr	r3, [r7, #8]
 8012574:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012576:	68f8      	ldr	r0, [r7, #12]
 8012578:	f001 f96f 	bl	801385a <xTaskCreate>
 801257c:	4603      	mov	r3, r0
 801257e:	2b01      	cmp	r3, #1
 8012580:	d001      	beq.n	8012586 <osThreadNew+0x11a>
            hTask = NULL;
 8012582:	2300      	movs	r3, #0
 8012584:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012586:	693b      	ldr	r3, [r7, #16]
}
 8012588:	4618      	mov	r0, r3
 801258a:	3728      	adds	r7, #40	; 0x28
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}

08012590 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8012590:	b480      	push	{r7}
 8012592:	b083      	sub	sp, #12
 8012594:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012596:	f3ef 8305 	mrs	r3, IPSR
 801259a:	603b      	str	r3, [r7, #0]
  return(result);
 801259c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d003      	beq.n	80125aa <osThreadYield+0x1a>
    stat = osErrorISR;
 80125a2:	f06f 0305 	mvn.w	r3, #5
 80125a6:	607b      	str	r3, [r7, #4]
 80125a8:	e009      	b.n	80125be <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80125aa:	2300      	movs	r3, #0
 80125ac:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80125ae:	4b07      	ldr	r3, [pc, #28]	; (80125cc <osThreadYield+0x3c>)
 80125b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125b4:	601a      	str	r2, [r3, #0]
 80125b6:	f3bf 8f4f 	dsb	sy
 80125ba:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80125be:	687b      	ldr	r3, [r7, #4]
}
 80125c0:	4618      	mov	r0, r3
 80125c2:	370c      	adds	r7, #12
 80125c4:	46bd      	mov	sp, r7
 80125c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ca:	4770      	bx	lr
 80125cc:	e000ed04 	.word	0xe000ed04

080125d0 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b086      	sub	sp, #24
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125dc:	f3ef 8305 	mrs	r3, IPSR
 80125e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80125e2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d003      	beq.n	80125f0 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80125e8:	f06f 0305 	mvn.w	r3, #5
 80125ec:	617b      	str	r3, [r7, #20]
 80125ee:	e00b      	b.n	8012608 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80125f0:	693b      	ldr	r3, [r7, #16]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d103      	bne.n	80125fe <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80125f6:	f06f 0303 	mvn.w	r3, #3
 80125fa:	617b      	str	r3, [r7, #20]
 80125fc:	e004      	b.n	8012608 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80125fe:	2300      	movs	r3, #0
 8012600:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8012602:	6938      	ldr	r0, [r7, #16]
 8012604:	f001 faa2 	bl	8013b4c <vTaskSuspend>
  }

  return (stat);
 8012608:	697b      	ldr	r3, [r7, #20]
}
 801260a:	4618      	mov	r0, r3
 801260c:	3718      	adds	r7, #24
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}

08012612 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012612:	b580      	push	{r7, lr}
 8012614:	b084      	sub	sp, #16
 8012616:	af00      	add	r7, sp, #0
 8012618:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801261a:	f3ef 8305 	mrs	r3, IPSR
 801261e:	60bb      	str	r3, [r7, #8]
  return(result);
 8012620:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012622:	2b00      	cmp	r3, #0
 8012624:	d003      	beq.n	801262e <osDelay+0x1c>
    stat = osErrorISR;
 8012626:	f06f 0305 	mvn.w	r3, #5
 801262a:	60fb      	str	r3, [r7, #12]
 801262c:	e007      	b.n	801263e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801262e:	2300      	movs	r3, #0
 8012630:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d002      	beq.n	801263e <osDelay+0x2c>
      vTaskDelay(ticks);
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	f001 fa53 	bl	8013ae4 <vTaskDelay>
    }
  }

  return (stat);
 801263e:	68fb      	ldr	r3, [r7, #12]
}
 8012640:	4618      	mov	r0, r3
 8012642:	3710      	adds	r7, #16
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}

08012648 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8012648:	b580      	push	{r7, lr}
 801264a:	b086      	sub	sp, #24
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012650:	2300      	movs	r3, #0
 8012652:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012654:	f3ef 8305 	mrs	r3, IPSR
 8012658:	60fb      	str	r3, [r7, #12]
  return(result);
 801265a:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 801265c:	2b00      	cmp	r3, #0
 801265e:	d12d      	bne.n	80126bc <osEventFlagsNew+0x74>
    mem = -1;
 8012660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012664:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d015      	beq.n	8012698 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	689b      	ldr	r3, [r3, #8]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d006      	beq.n	8012682 <osEventFlagsNew+0x3a>
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	68db      	ldr	r3, [r3, #12]
 8012678:	2b1f      	cmp	r3, #31
 801267a:	d902      	bls.n	8012682 <osEventFlagsNew+0x3a>
        mem = 1;
 801267c:	2301      	movs	r3, #1
 801267e:	613b      	str	r3, [r7, #16]
 8012680:	e00c      	b.n	801269c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	689b      	ldr	r3, [r3, #8]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d108      	bne.n	801269c <osEventFlagsNew+0x54>
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	68db      	ldr	r3, [r3, #12]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d104      	bne.n	801269c <osEventFlagsNew+0x54>
          mem = 0;
 8012692:	2300      	movs	r3, #0
 8012694:	613b      	str	r3, [r7, #16]
 8012696:	e001      	b.n	801269c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8012698:	2300      	movs	r3, #0
 801269a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 801269c:	693b      	ldr	r3, [r7, #16]
 801269e:	2b01      	cmp	r3, #1
 80126a0:	d106      	bne.n	80126b0 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	689b      	ldr	r3, [r3, #8]
 80126a6:	4618      	mov	r0, r3
 80126a8:	f000 f8ec 	bl	8012884 <xEventGroupCreateStatic>
 80126ac:	6178      	str	r0, [r7, #20]
 80126ae:	e005      	b.n	80126bc <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80126b0:	693b      	ldr	r3, [r7, #16]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d102      	bne.n	80126bc <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80126b6:	f000 f91c 	bl	80128f2 <xEventGroupCreate>
 80126ba:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80126bc:	697b      	ldr	r3, [r7, #20]
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3718      	adds	r7, #24
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}
	...

080126c8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b086      	sub	sp, #24
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80126d6:	693b      	ldr	r3, [r7, #16]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d004      	beq.n	80126e6 <osEventFlagsSet+0x1e>
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d003      	beq.n	80126ee <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80126e6:	f06f 0303 	mvn.w	r3, #3
 80126ea:	617b      	str	r3, [r7, #20]
 80126ec:	e028      	b.n	8012740 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126ee:	f3ef 8305 	mrs	r3, IPSR
 80126f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80126f4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d01d      	beq.n	8012736 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80126fa:	2300      	movs	r3, #0
 80126fc:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80126fe:	f107 0308 	add.w	r3, r7, #8
 8012702:	461a      	mov	r2, r3
 8012704:	6839      	ldr	r1, [r7, #0]
 8012706:	6938      	ldr	r0, [r7, #16]
 8012708:	f000 fa96 	bl	8012c38 <xEventGroupSetBitsFromISR>
 801270c:	4603      	mov	r3, r0
 801270e:	2b00      	cmp	r3, #0
 8012710:	d103      	bne.n	801271a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8012712:	f06f 0302 	mvn.w	r3, #2
 8012716:	617b      	str	r3, [r7, #20]
 8012718:	e012      	b.n	8012740 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801271a:	683b      	ldr	r3, [r7, #0]
 801271c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d00d      	beq.n	8012740 <osEventFlagsSet+0x78>
 8012724:	4b09      	ldr	r3, [pc, #36]	; (801274c <osEventFlagsSet+0x84>)
 8012726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801272a:	601a      	str	r2, [r3, #0]
 801272c:	f3bf 8f4f 	dsb	sy
 8012730:	f3bf 8f6f 	isb	sy
 8012734:	e004      	b.n	8012740 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8012736:	6839      	ldr	r1, [r7, #0]
 8012738:	6938      	ldr	r0, [r7, #16]
 801273a:	f000 f9c3 	bl	8012ac4 <xEventGroupSetBits>
 801273e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012740:	697b      	ldr	r3, [r7, #20]
}
 8012742:	4618      	mov	r0, r3
 8012744:	3718      	adds	r7, #24
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}
 801274a:	bf00      	nop
 801274c:	e000ed04 	.word	0xe000ed04

08012750 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8012750:	b580      	push	{r7, lr}
 8012752:	b08c      	sub	sp, #48	; 0x30
 8012754:	af02      	add	r7, sp, #8
 8012756:	60f8      	str	r0, [r7, #12]
 8012758:	60b9      	str	r1, [r7, #8]
 801275a:	607a      	str	r2, [r7, #4]
 801275c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012762:	69bb      	ldr	r3, [r7, #24]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d004      	beq.n	8012772 <osEventFlagsWait+0x22>
 8012768:	68bb      	ldr	r3, [r7, #8]
 801276a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801276e:	2b00      	cmp	r3, #0
 8012770:	d003      	beq.n	801277a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8012772:	f06f 0303 	mvn.w	r3, #3
 8012776:	61fb      	str	r3, [r7, #28]
 8012778:	e04b      	b.n	8012812 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801277a:	f3ef 8305 	mrs	r3, IPSR
 801277e:	617b      	str	r3, [r7, #20]
  return(result);
 8012780:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012782:	2b00      	cmp	r3, #0
 8012784:	d003      	beq.n	801278e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8012786:	f06f 0305 	mvn.w	r3, #5
 801278a:	61fb      	str	r3, [r7, #28]
 801278c:	e041      	b.n	8012812 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	f003 0301 	and.w	r3, r3, #1
 8012794:	2b00      	cmp	r3, #0
 8012796:	d002      	beq.n	801279e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8012798:	2301      	movs	r3, #1
 801279a:	627b      	str	r3, [r7, #36]	; 0x24
 801279c:	e001      	b.n	80127a2 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 801279e:	2300      	movs	r3, #0
 80127a0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f003 0302 	and.w	r3, r3, #2
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d002      	beq.n	80127b2 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80127ac:	2300      	movs	r3, #0
 80127ae:	623b      	str	r3, [r7, #32]
 80127b0:	e001      	b.n	80127b6 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80127b2:	2301      	movs	r3, #1
 80127b4:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	9300      	str	r3, [sp, #0]
 80127ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127bc:	6a3a      	ldr	r2, [r7, #32]
 80127be:	68b9      	ldr	r1, [r7, #8]
 80127c0:	69b8      	ldr	r0, [r7, #24]
 80127c2:	f000 f8b1 	bl	8012928 <xEventGroupWaitBits>
 80127c6:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f003 0301 	and.w	r3, r3, #1
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d010      	beq.n	80127f4 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80127d2:	68ba      	ldr	r2, [r7, #8]
 80127d4:	69fb      	ldr	r3, [r7, #28]
 80127d6:	4013      	ands	r3, r2
 80127d8:	68ba      	ldr	r2, [r7, #8]
 80127da:	429a      	cmp	r2, r3
 80127dc:	d019      	beq.n	8012812 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d003      	beq.n	80127ec <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80127e4:	f06f 0301 	mvn.w	r3, #1
 80127e8:	61fb      	str	r3, [r7, #28]
 80127ea:	e012      	b.n	8012812 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80127ec:	f06f 0302 	mvn.w	r3, #2
 80127f0:	61fb      	str	r3, [r7, #28]
 80127f2:	e00e      	b.n	8012812 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80127f4:	68ba      	ldr	r2, [r7, #8]
 80127f6:	69fb      	ldr	r3, [r7, #28]
 80127f8:	4013      	ands	r3, r2
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d109      	bne.n	8012812 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d003      	beq.n	801280c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8012804:	f06f 0301 	mvn.w	r3, #1
 8012808:	61fb      	str	r3, [r7, #28]
 801280a:	e002      	b.n	8012812 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801280c:	f06f 0302 	mvn.w	r3, #2
 8012810:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8012812:	69fb      	ldr	r3, [r7, #28]
}
 8012814:	4618      	mov	r0, r3
 8012816:	3728      	adds	r7, #40	; 0x28
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}

0801281c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801281c:	b480      	push	{r7}
 801281e:	b085      	sub	sp, #20
 8012820:	af00      	add	r7, sp, #0
 8012822:	60f8      	str	r0, [r7, #12]
 8012824:	60b9      	str	r1, [r7, #8]
 8012826:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	4a07      	ldr	r2, [pc, #28]	; (8012848 <vApplicationGetIdleTaskMemory+0x2c>)
 801282c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	4a06      	ldr	r2, [pc, #24]	; (801284c <vApplicationGetIdleTaskMemory+0x30>)
 8012832:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2280      	movs	r2, #128	; 0x80
 8012838:	601a      	str	r2, [r3, #0]
}
 801283a:	bf00      	nop
 801283c:	3714      	adds	r7, #20
 801283e:	46bd      	mov	sp, r7
 8012840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012844:	4770      	bx	lr
 8012846:	bf00      	nop
 8012848:	24000c40 	.word	0x24000c40
 801284c:	24000c9c 	.word	0x24000c9c

08012850 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012850:	b480      	push	{r7}
 8012852:	b085      	sub	sp, #20
 8012854:	af00      	add	r7, sp, #0
 8012856:	60f8      	str	r0, [r7, #12]
 8012858:	60b9      	str	r1, [r7, #8]
 801285a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	4a07      	ldr	r2, [pc, #28]	; (801287c <vApplicationGetTimerTaskMemory+0x2c>)
 8012860:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012862:	68bb      	ldr	r3, [r7, #8]
 8012864:	4a06      	ldr	r2, [pc, #24]	; (8012880 <vApplicationGetTimerTaskMemory+0x30>)
 8012866:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801286e:	601a      	str	r2, [r3, #0]
}
 8012870:	bf00      	nop
 8012872:	3714      	adds	r7, #20
 8012874:	46bd      	mov	sp, r7
 8012876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287a:	4770      	bx	lr
 801287c:	24000e9c 	.word	0x24000e9c
 8012880:	24000ef8 	.word	0x24000ef8

08012884 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8012884:	b580      	push	{r7, lr}
 8012886:	b086      	sub	sp, #24
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d10a      	bne.n	80128a8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012896:	f383 8811 	msr	BASEPRI, r3
 801289a:	f3bf 8f6f 	isb	sy
 801289e:	f3bf 8f4f 	dsb	sy
 80128a2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80128a4:	bf00      	nop
 80128a6:	e7fe      	b.n	80128a6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80128a8:	2320      	movs	r3, #32
 80128aa:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	2b20      	cmp	r3, #32
 80128b0:	d00a      	beq.n	80128c8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80128b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b6:	f383 8811 	msr	BASEPRI, r3
 80128ba:	f3bf 8f6f 	isb	sy
 80128be:	f3bf 8f4f 	dsb	sy
 80128c2:	60fb      	str	r3, [r7, #12]
}
 80128c4:	bf00      	nop
 80128c6:	e7fe      	b.n	80128c6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d00a      	beq.n	80128e8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80128d2:	697b      	ldr	r3, [r7, #20]
 80128d4:	2200      	movs	r2, #0
 80128d6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	3304      	adds	r3, #4
 80128dc:	4618      	mov	r0, r3
 80128de:	f000 f9bf 	bl	8012c60 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	2201      	movs	r2, #1
 80128e6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80128e8:	697b      	ldr	r3, [r7, #20]
	}
 80128ea:	4618      	mov	r0, r3
 80128ec:	3718      	adds	r7, #24
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}

080128f2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80128f2:	b580      	push	{r7, lr}
 80128f4:	b082      	sub	sp, #8
 80128f6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80128f8:	2020      	movs	r0, #32
 80128fa:	f002 fddd 	bl	80154b8 <pvPortMalloc>
 80128fe:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d00a      	beq.n	801291c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2200      	movs	r2, #0
 801290a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	3304      	adds	r3, #4
 8012910:	4618      	mov	r0, r3
 8012912:	f000 f9a5 	bl	8012c60 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2200      	movs	r2, #0
 801291a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 801291c:	687b      	ldr	r3, [r7, #4]
	}
 801291e:	4618      	mov	r0, r3
 8012920:	3708      	adds	r7, #8
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}
	...

08012928 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b090      	sub	sp, #64	; 0x40
 801292c:	af00      	add	r7, sp, #0
 801292e:	60f8      	str	r0, [r7, #12]
 8012930:	60b9      	str	r1, [r7, #8]
 8012932:	607a      	str	r2, [r7, #4]
 8012934:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801293a:	2300      	movs	r3, #0
 801293c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801293e:	2300      	movs	r3, #0
 8012940:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d10a      	bne.n	801295e <xEventGroupWaitBits+0x36>
	__asm volatile
 8012948:	f04f 0350 	mov.w	r3, #80	; 0x50
 801294c:	f383 8811 	msr	BASEPRI, r3
 8012950:	f3bf 8f6f 	isb	sy
 8012954:	f3bf 8f4f 	dsb	sy
 8012958:	623b      	str	r3, [r7, #32]
}
 801295a:	bf00      	nop
 801295c:	e7fe      	b.n	801295c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801295e:	68bb      	ldr	r3, [r7, #8]
 8012960:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012964:	2b00      	cmp	r3, #0
 8012966:	d00a      	beq.n	801297e <xEventGroupWaitBits+0x56>
	__asm volatile
 8012968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801296c:	f383 8811 	msr	BASEPRI, r3
 8012970:	f3bf 8f6f 	isb	sy
 8012974:	f3bf 8f4f 	dsb	sy
 8012978:	61fb      	str	r3, [r7, #28]
}
 801297a:	bf00      	nop
 801297c:	e7fe      	b.n	801297c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801297e:	68bb      	ldr	r3, [r7, #8]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d10a      	bne.n	801299a <xEventGroupWaitBits+0x72>
	__asm volatile
 8012984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012988:	f383 8811 	msr	BASEPRI, r3
 801298c:	f3bf 8f6f 	isb	sy
 8012990:	f3bf 8f4f 	dsb	sy
 8012994:	61bb      	str	r3, [r7, #24]
}
 8012996:	bf00      	nop
 8012998:	e7fe      	b.n	8012998 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801299a:	f001 fed7 	bl	801474c <xTaskGetSchedulerState>
 801299e:	4603      	mov	r3, r0
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d102      	bne.n	80129aa <xEventGroupWaitBits+0x82>
 80129a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d101      	bne.n	80129ae <xEventGroupWaitBits+0x86>
 80129aa:	2301      	movs	r3, #1
 80129ac:	e000      	b.n	80129b0 <xEventGroupWaitBits+0x88>
 80129ae:	2300      	movs	r3, #0
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d10a      	bne.n	80129ca <xEventGroupWaitBits+0xa2>
	__asm volatile
 80129b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b8:	f383 8811 	msr	BASEPRI, r3
 80129bc:	f3bf 8f6f 	isb	sy
 80129c0:	f3bf 8f4f 	dsb	sy
 80129c4:	617b      	str	r3, [r7, #20]
}
 80129c6:	bf00      	nop
 80129c8:	e7fe      	b.n	80129c8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80129ca:	f001 fa3f 	bl	8013e4c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80129ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80129d4:	683a      	ldr	r2, [r7, #0]
 80129d6:	68b9      	ldr	r1, [r7, #8]
 80129d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129da:	f000 f90b 	bl	8012bf4 <prvTestWaitCondition>
 80129de:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80129e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d00e      	beq.n	8012a04 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80129e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80129ea:	2300      	movs	r3, #0
 80129ec:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d028      	beq.n	8012a46 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80129f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129f6:	681a      	ldr	r2, [r3, #0]
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	43db      	mvns	r3, r3
 80129fc:	401a      	ands	r2, r3
 80129fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a00:	601a      	str	r2, [r3, #0]
 8012a02:	e020      	b.n	8012a46 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8012a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d104      	bne.n	8012a14 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8012a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8012a0e:	2301      	movs	r3, #1
 8012a10:	633b      	str	r3, [r7, #48]	; 0x30
 8012a12:	e018      	b.n	8012a46 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d003      	beq.n	8012a22 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8012a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012a20:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d003      	beq.n	8012a30 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8012a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012a2e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8012a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a32:	1d18      	adds	r0, r3, #4
 8012a34:	68ba      	ldr	r2, [r7, #8]
 8012a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a38:	4313      	orrs	r3, r2
 8012a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	f001 fbfd 	bl	801423c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8012a42:	2300      	movs	r3, #0
 8012a44:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8012a46:	f001 fa0f 	bl	8013e68 <xTaskResumeAll>
 8012a4a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8012a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d031      	beq.n	8012ab6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8012a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d107      	bne.n	8012a68 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8012a58:	4b19      	ldr	r3, [pc, #100]	; (8012ac0 <xEventGroupWaitBits+0x198>)
 8012a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a5e:	601a      	str	r2, [r3, #0]
 8012a60:	f3bf 8f4f 	dsb	sy
 8012a64:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8012a68:	f001 fefc 	bl	8014864 <uxTaskResetEventItemValue>
 8012a6c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8012a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d11a      	bne.n	8012aae <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8012a78:	f002 fbfc 	bl	8015274 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8012a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8012a82:	683a      	ldr	r2, [r7, #0]
 8012a84:	68b9      	ldr	r1, [r7, #8]
 8012a86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012a88:	f000 f8b4 	bl	8012bf4 <prvTestWaitCondition>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d009      	beq.n	8012aa6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d006      	beq.n	8012aa6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a9a:	681a      	ldr	r2, [r3, #0]
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	43db      	mvns	r3, r3
 8012aa0:	401a      	ands	r2, r3
 8012aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012aa4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8012aa6:	2301      	movs	r3, #1
 8012aa8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8012aaa:	f002 fc13 	bl	80152d4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ab0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8012ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3740      	adds	r7, #64	; 0x40
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	e000ed04 	.word	0xe000ed04

08012ac4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b08e      	sub	sp, #56	; 0x38
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
 8012acc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d10a      	bne.n	8012af6 <xEventGroupSetBits+0x32>
	__asm volatile
 8012ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae4:	f383 8811 	msr	BASEPRI, r3
 8012ae8:	f3bf 8f6f 	isb	sy
 8012aec:	f3bf 8f4f 	dsb	sy
 8012af0:	613b      	str	r3, [r7, #16]
}
 8012af2:	bf00      	nop
 8012af4:	e7fe      	b.n	8012af4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d00a      	beq.n	8012b16 <xEventGroupSetBits+0x52>
	__asm volatile
 8012b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b04:	f383 8811 	msr	BASEPRI, r3
 8012b08:	f3bf 8f6f 	isb	sy
 8012b0c:	f3bf 8f4f 	dsb	sy
 8012b10:	60fb      	str	r3, [r7, #12]
}
 8012b12:	bf00      	nop
 8012b14:	e7fe      	b.n	8012b14 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8012b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b18:	3304      	adds	r3, #4
 8012b1a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b1e:	3308      	adds	r3, #8
 8012b20:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8012b22:	f001 f993 	bl	8013e4c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8012b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b28:	68db      	ldr	r3, [r3, #12]
 8012b2a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8012b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b2e:	681a      	ldr	r2, [r3, #0]
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	431a      	orrs	r2, r3
 8012b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b36:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8012b38:	e03c      	b.n	8012bb4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8012b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b3c:	685b      	ldr	r3, [r3, #4]
 8012b3e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8012b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8012b46:	2300      	movs	r3, #0
 8012b48:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8012b4a:	69bb      	ldr	r3, [r7, #24]
 8012b4c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012b50:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012b52:	69bb      	ldr	r3, [r7, #24]
 8012b54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012b58:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d108      	bne.n	8012b76 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8012b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b66:	681a      	ldr	r2, [r3, #0]
 8012b68:	69bb      	ldr	r3, [r7, #24]
 8012b6a:	4013      	ands	r3, r2
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d00b      	beq.n	8012b88 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8012b70:	2301      	movs	r3, #1
 8012b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b74:	e008      	b.n	8012b88 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8012b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b78:	681a      	ldr	r2, [r3, #0]
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	4013      	ands	r3, r2
 8012b7e:	69ba      	ldr	r2, [r7, #24]
 8012b80:	429a      	cmp	r2, r3
 8012b82:	d101      	bne.n	8012b88 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8012b84:	2301      	movs	r3, #1
 8012b86:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8012b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d010      	beq.n	8012bb0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8012b8e:	697b      	ldr	r3, [r7, #20]
 8012b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d003      	beq.n	8012ba0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8012b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b9a:	69bb      	ldr	r3, [r7, #24]
 8012b9c:	4313      	orrs	r3, r2
 8012b9e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8012ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012ba8:	4619      	mov	r1, r3
 8012baa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012bac:	f001 fc12 	bl	80143d4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8012bb0:	69fb      	ldr	r3, [r7, #28]
 8012bb2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8012bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bb6:	6a3b      	ldr	r3, [r7, #32]
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	d1be      	bne.n	8012b3a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8012bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bbe:	681a      	ldr	r2, [r3, #0]
 8012bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc2:	43db      	mvns	r3, r3
 8012bc4:	401a      	ands	r2, r3
 8012bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bc8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8012bca:	f001 f94d 	bl	8013e68 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8012bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd0:	681b      	ldr	r3, [r3, #0]
}
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3738      	adds	r7, #56	; 0x38
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}

08012bda <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8012bda:	b580      	push	{r7, lr}
 8012bdc:	b082      	sub	sp, #8
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	6078      	str	r0, [r7, #4]
 8012be2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8012be4:	6839      	ldr	r1, [r7, #0]
 8012be6:	6878      	ldr	r0, [r7, #4]
 8012be8:	f7ff ff6c 	bl	8012ac4 <xEventGroupSetBits>
}
 8012bec:	bf00      	nop
 8012bee:	3708      	adds	r7, #8
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}

08012bf4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8012bf4:	b480      	push	{r7}
 8012bf6:	b087      	sub	sp, #28
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	60f8      	str	r0, [r7, #12]
 8012bfc:	60b9      	str	r1, [r7, #8]
 8012bfe:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8012c00:	2300      	movs	r3, #0
 8012c02:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d107      	bne.n	8012c1a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8012c0a:	68fa      	ldr	r2, [r7, #12]
 8012c0c:	68bb      	ldr	r3, [r7, #8]
 8012c0e:	4013      	ands	r3, r2
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d00a      	beq.n	8012c2a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012c14:	2301      	movs	r3, #1
 8012c16:	617b      	str	r3, [r7, #20]
 8012c18:	e007      	b.n	8012c2a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8012c1a:	68fa      	ldr	r2, [r7, #12]
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	4013      	ands	r3, r2
 8012c20:	68ba      	ldr	r2, [r7, #8]
 8012c22:	429a      	cmp	r2, r3
 8012c24:	d101      	bne.n	8012c2a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012c26:	2301      	movs	r3, #1
 8012c28:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8012c2a:	697b      	ldr	r3, [r7, #20]
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	371c      	adds	r7, #28
 8012c30:	46bd      	mov	sp, r7
 8012c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c36:	4770      	bx	lr

08012c38 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b086      	sub	sp, #24
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	60f8      	str	r0, [r7, #12]
 8012c40:	60b9      	str	r1, [r7, #8]
 8012c42:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	68ba      	ldr	r2, [r7, #8]
 8012c48:	68f9      	ldr	r1, [r7, #12]
 8012c4a:	4804      	ldr	r0, [pc, #16]	; (8012c5c <xEventGroupSetBitsFromISR+0x24>)
 8012c4c:	f002 f9c4 	bl	8014fd8 <xTimerPendFunctionCallFromISR>
 8012c50:	6178      	str	r0, [r7, #20]

		return xReturn;
 8012c52:	697b      	ldr	r3, [r7, #20]
	}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3718      	adds	r7, #24
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}
 8012c5c:	08012bdb 	.word	0x08012bdb

08012c60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012c60:	b480      	push	{r7}
 8012c62:	b083      	sub	sp, #12
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	f103 0208 	add.w	r2, r3, #8
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f103 0208 	add.w	r2, r3, #8
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	f103 0208 	add.w	r2, r3, #8
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	2200      	movs	r2, #0
 8012c92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012c94:	bf00      	nop
 8012c96:	370c      	adds	r7, #12
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9e:	4770      	bx	lr

08012ca0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012ca0:	b480      	push	{r7}
 8012ca2:	b083      	sub	sp, #12
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2200      	movs	r2, #0
 8012cac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012cae:	bf00      	nop
 8012cb0:	370c      	adds	r7, #12
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb8:	4770      	bx	lr

08012cba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012cba:	b480      	push	{r7}
 8012cbc:	b085      	sub	sp, #20
 8012cbe:	af00      	add	r7, sp, #0
 8012cc0:	6078      	str	r0, [r7, #4]
 8012cc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	685b      	ldr	r3, [r3, #4]
 8012cc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	68fa      	ldr	r2, [r7, #12]
 8012cce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	689a      	ldr	r2, [r3, #8]
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	689b      	ldr	r3, [r3, #8]
 8012cdc:	683a      	ldr	r2, [r7, #0]
 8012cde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	683a      	ldr	r2, [r7, #0]
 8012ce4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012ce6:	683b      	ldr	r3, [r7, #0]
 8012ce8:	687a      	ldr	r2, [r7, #4]
 8012cea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	1c5a      	adds	r2, r3, #1
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	601a      	str	r2, [r3, #0]
}
 8012cf6:	bf00      	nop
 8012cf8:	3714      	adds	r7, #20
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d00:	4770      	bx	lr

08012d02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012d02:	b480      	push	{r7}
 8012d04:	b085      	sub	sp, #20
 8012d06:	af00      	add	r7, sp, #0
 8012d08:	6078      	str	r0, [r7, #4]
 8012d0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d18:	d103      	bne.n	8012d22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	691b      	ldr	r3, [r3, #16]
 8012d1e:	60fb      	str	r3, [r7, #12]
 8012d20:	e00c      	b.n	8012d3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	3308      	adds	r3, #8
 8012d26:	60fb      	str	r3, [r7, #12]
 8012d28:	e002      	b.n	8012d30 <vListInsert+0x2e>
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	685b      	ldr	r3, [r3, #4]
 8012d2e:	60fb      	str	r3, [r7, #12]
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	685b      	ldr	r3, [r3, #4]
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	68ba      	ldr	r2, [r7, #8]
 8012d38:	429a      	cmp	r2, r3
 8012d3a:	d2f6      	bcs.n	8012d2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	685a      	ldr	r2, [r3, #4]
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	685b      	ldr	r3, [r3, #4]
 8012d48:	683a      	ldr	r2, [r7, #0]
 8012d4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012d4c:	683b      	ldr	r3, [r7, #0]
 8012d4e:	68fa      	ldr	r2, [r7, #12]
 8012d50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	683a      	ldr	r2, [r7, #0]
 8012d56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	687a      	ldr	r2, [r7, #4]
 8012d5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	1c5a      	adds	r2, r3, #1
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	601a      	str	r2, [r3, #0]
}
 8012d68:	bf00      	nop
 8012d6a:	3714      	adds	r7, #20
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d72:	4770      	bx	lr

08012d74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012d74:	b480      	push	{r7}
 8012d76:	b085      	sub	sp, #20
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	691b      	ldr	r3, [r3, #16]
 8012d80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	685b      	ldr	r3, [r3, #4]
 8012d86:	687a      	ldr	r2, [r7, #4]
 8012d88:	6892      	ldr	r2, [r2, #8]
 8012d8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	689b      	ldr	r3, [r3, #8]
 8012d90:	687a      	ldr	r2, [r7, #4]
 8012d92:	6852      	ldr	r2, [r2, #4]
 8012d94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	685b      	ldr	r3, [r3, #4]
 8012d9a:	687a      	ldr	r2, [r7, #4]
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d103      	bne.n	8012da8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	689a      	ldr	r2, [r3, #8]
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2200      	movs	r2, #0
 8012dac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	1e5a      	subs	r2, r3, #1
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	681b      	ldr	r3, [r3, #0]
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3714      	adds	r7, #20
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc6:	4770      	bx	lr

08012dc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b084      	sub	sp, #16
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d10a      	bne.n	8012df2 <xQueueGenericReset+0x2a>
	__asm volatile
 8012ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de0:	f383 8811 	msr	BASEPRI, r3
 8012de4:	f3bf 8f6f 	isb	sy
 8012de8:	f3bf 8f4f 	dsb	sy
 8012dec:	60bb      	str	r3, [r7, #8]
}
 8012dee:	bf00      	nop
 8012df0:	e7fe      	b.n	8012df0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012df2:	f002 fa3f 	bl	8015274 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	681a      	ldr	r2, [r3, #0]
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012dfe:	68f9      	ldr	r1, [r7, #12]
 8012e00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012e02:	fb01 f303 	mul.w	r3, r1, r3
 8012e06:	441a      	add	r2, r3
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	2200      	movs	r2, #0
 8012e10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	681a      	ldr	r2, [r3, #0]
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	681a      	ldr	r2, [r3, #0]
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e22:	3b01      	subs	r3, #1
 8012e24:	68f9      	ldr	r1, [r7, #12]
 8012e26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012e28:	fb01 f303 	mul.w	r3, r1, r3
 8012e2c:	441a      	add	r2, r3
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	22ff      	movs	r2, #255	; 0xff
 8012e36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	22ff      	movs	r2, #255	; 0xff
 8012e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d114      	bne.n	8012e72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	691b      	ldr	r3, [r3, #16]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d01a      	beq.n	8012e86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	3310      	adds	r3, #16
 8012e54:	4618      	mov	r0, r3
 8012e56:	f001 fa59 	bl	801430c <xTaskRemoveFromEventList>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d012      	beq.n	8012e86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012e60:	4b0c      	ldr	r3, [pc, #48]	; (8012e94 <xQueueGenericReset+0xcc>)
 8012e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e66:	601a      	str	r2, [r3, #0]
 8012e68:	f3bf 8f4f 	dsb	sy
 8012e6c:	f3bf 8f6f 	isb	sy
 8012e70:	e009      	b.n	8012e86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	3310      	adds	r3, #16
 8012e76:	4618      	mov	r0, r3
 8012e78:	f7ff fef2 	bl	8012c60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	3324      	adds	r3, #36	; 0x24
 8012e80:	4618      	mov	r0, r3
 8012e82:	f7ff feed 	bl	8012c60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012e86:	f002 fa25 	bl	80152d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012e8a:	2301      	movs	r3, #1
}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3710      	adds	r7, #16
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}
 8012e94:	e000ed04 	.word	0xe000ed04

08012e98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b08e      	sub	sp, #56	; 0x38
 8012e9c:	af02      	add	r7, sp, #8
 8012e9e:	60f8      	str	r0, [r7, #12]
 8012ea0:	60b9      	str	r1, [r7, #8]
 8012ea2:	607a      	str	r2, [r7, #4]
 8012ea4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d10a      	bne.n	8012ec2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb0:	f383 8811 	msr	BASEPRI, r3
 8012eb4:	f3bf 8f6f 	isb	sy
 8012eb8:	f3bf 8f4f 	dsb	sy
 8012ebc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012ebe:	bf00      	nop
 8012ec0:	e7fe      	b.n	8012ec0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012ec2:	683b      	ldr	r3, [r7, #0]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d10a      	bne.n	8012ede <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ecc:	f383 8811 	msr	BASEPRI, r3
 8012ed0:	f3bf 8f6f 	isb	sy
 8012ed4:	f3bf 8f4f 	dsb	sy
 8012ed8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012eda:	bf00      	nop
 8012edc:	e7fe      	b.n	8012edc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d002      	beq.n	8012eea <xQueueGenericCreateStatic+0x52>
 8012ee4:	68bb      	ldr	r3, [r7, #8]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d001      	beq.n	8012eee <xQueueGenericCreateStatic+0x56>
 8012eea:	2301      	movs	r3, #1
 8012eec:	e000      	b.n	8012ef0 <xQueueGenericCreateStatic+0x58>
 8012eee:	2300      	movs	r3, #0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d10a      	bne.n	8012f0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ef8:	f383 8811 	msr	BASEPRI, r3
 8012efc:	f3bf 8f6f 	isb	sy
 8012f00:	f3bf 8f4f 	dsb	sy
 8012f04:	623b      	str	r3, [r7, #32]
}
 8012f06:	bf00      	nop
 8012f08:	e7fe      	b.n	8012f08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d102      	bne.n	8012f16 <xQueueGenericCreateStatic+0x7e>
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d101      	bne.n	8012f1a <xQueueGenericCreateStatic+0x82>
 8012f16:	2301      	movs	r3, #1
 8012f18:	e000      	b.n	8012f1c <xQueueGenericCreateStatic+0x84>
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d10a      	bne.n	8012f36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f24:	f383 8811 	msr	BASEPRI, r3
 8012f28:	f3bf 8f6f 	isb	sy
 8012f2c:	f3bf 8f4f 	dsb	sy
 8012f30:	61fb      	str	r3, [r7, #28]
}
 8012f32:	bf00      	nop
 8012f34:	e7fe      	b.n	8012f34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012f36:	2350      	movs	r3, #80	; 0x50
 8012f38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012f3a:	697b      	ldr	r3, [r7, #20]
 8012f3c:	2b50      	cmp	r3, #80	; 0x50
 8012f3e:	d00a      	beq.n	8012f56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f44:	f383 8811 	msr	BASEPRI, r3
 8012f48:	f3bf 8f6f 	isb	sy
 8012f4c:	f3bf 8f4f 	dsb	sy
 8012f50:	61bb      	str	r3, [r7, #24]
}
 8012f52:	bf00      	nop
 8012f54:	e7fe      	b.n	8012f54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012f56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d00d      	beq.n	8012f7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f64:	2201      	movs	r2, #1
 8012f66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012f6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f70:	9300      	str	r3, [sp, #0]
 8012f72:	4613      	mov	r3, r2
 8012f74:	687a      	ldr	r2, [r7, #4]
 8012f76:	68b9      	ldr	r1, [r7, #8]
 8012f78:	68f8      	ldr	r0, [r7, #12]
 8012f7a:	f000 f805 	bl	8012f88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012f80:	4618      	mov	r0, r3
 8012f82:	3730      	adds	r7, #48	; 0x30
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}

08012f88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b084      	sub	sp, #16
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	60f8      	str	r0, [r7, #12]
 8012f90:	60b9      	str	r1, [r7, #8]
 8012f92:	607a      	str	r2, [r7, #4]
 8012f94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d103      	bne.n	8012fa4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012f9c:	69bb      	ldr	r3, [r7, #24]
 8012f9e:	69ba      	ldr	r2, [r7, #24]
 8012fa0:	601a      	str	r2, [r3, #0]
 8012fa2:	e002      	b.n	8012faa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012fa4:	69bb      	ldr	r3, [r7, #24]
 8012fa6:	687a      	ldr	r2, [r7, #4]
 8012fa8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012faa:	69bb      	ldr	r3, [r7, #24]
 8012fac:	68fa      	ldr	r2, [r7, #12]
 8012fae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012fb0:	69bb      	ldr	r3, [r7, #24]
 8012fb2:	68ba      	ldr	r2, [r7, #8]
 8012fb4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012fb6:	2101      	movs	r1, #1
 8012fb8:	69b8      	ldr	r0, [r7, #24]
 8012fba:	f7ff ff05 	bl	8012dc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012fbe:	69bb      	ldr	r3, [r7, #24]
 8012fc0:	78fa      	ldrb	r2, [r7, #3]
 8012fc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012fc6:	bf00      	nop
 8012fc8:	3710      	adds	r7, #16
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd80      	pop	{r7, pc}
	...

08012fd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b08e      	sub	sp, #56	; 0x38
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	60f8      	str	r0, [r7, #12]
 8012fd8:	60b9      	str	r1, [r7, #8]
 8012fda:	607a      	str	r2, [r7, #4]
 8012fdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d10a      	bne.n	8013002 <xQueueGenericSend+0x32>
	__asm volatile
 8012fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff0:	f383 8811 	msr	BASEPRI, r3
 8012ff4:	f3bf 8f6f 	isb	sy
 8012ff8:	f3bf 8f4f 	dsb	sy
 8012ffc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012ffe:	bf00      	nop
 8013000:	e7fe      	b.n	8013000 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d103      	bne.n	8013010 <xQueueGenericSend+0x40>
 8013008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801300c:	2b00      	cmp	r3, #0
 801300e:	d101      	bne.n	8013014 <xQueueGenericSend+0x44>
 8013010:	2301      	movs	r3, #1
 8013012:	e000      	b.n	8013016 <xQueueGenericSend+0x46>
 8013014:	2300      	movs	r3, #0
 8013016:	2b00      	cmp	r3, #0
 8013018:	d10a      	bne.n	8013030 <xQueueGenericSend+0x60>
	__asm volatile
 801301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801301e:	f383 8811 	msr	BASEPRI, r3
 8013022:	f3bf 8f6f 	isb	sy
 8013026:	f3bf 8f4f 	dsb	sy
 801302a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801302c:	bf00      	nop
 801302e:	e7fe      	b.n	801302e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	2b02      	cmp	r3, #2
 8013034:	d103      	bne.n	801303e <xQueueGenericSend+0x6e>
 8013036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801303a:	2b01      	cmp	r3, #1
 801303c:	d101      	bne.n	8013042 <xQueueGenericSend+0x72>
 801303e:	2301      	movs	r3, #1
 8013040:	e000      	b.n	8013044 <xQueueGenericSend+0x74>
 8013042:	2300      	movs	r3, #0
 8013044:	2b00      	cmp	r3, #0
 8013046:	d10a      	bne.n	801305e <xQueueGenericSend+0x8e>
	__asm volatile
 8013048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801304c:	f383 8811 	msr	BASEPRI, r3
 8013050:	f3bf 8f6f 	isb	sy
 8013054:	f3bf 8f4f 	dsb	sy
 8013058:	623b      	str	r3, [r7, #32]
}
 801305a:	bf00      	nop
 801305c:	e7fe      	b.n	801305c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801305e:	f001 fb75 	bl	801474c <xTaskGetSchedulerState>
 8013062:	4603      	mov	r3, r0
 8013064:	2b00      	cmp	r3, #0
 8013066:	d102      	bne.n	801306e <xQueueGenericSend+0x9e>
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d101      	bne.n	8013072 <xQueueGenericSend+0xa2>
 801306e:	2301      	movs	r3, #1
 8013070:	e000      	b.n	8013074 <xQueueGenericSend+0xa4>
 8013072:	2300      	movs	r3, #0
 8013074:	2b00      	cmp	r3, #0
 8013076:	d10a      	bne.n	801308e <xQueueGenericSend+0xbe>
	__asm volatile
 8013078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801307c:	f383 8811 	msr	BASEPRI, r3
 8013080:	f3bf 8f6f 	isb	sy
 8013084:	f3bf 8f4f 	dsb	sy
 8013088:	61fb      	str	r3, [r7, #28]
}
 801308a:	bf00      	nop
 801308c:	e7fe      	b.n	801308c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801308e:	f002 f8f1 	bl	8015274 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801309a:	429a      	cmp	r2, r3
 801309c:	d302      	bcc.n	80130a4 <xQueueGenericSend+0xd4>
 801309e:	683b      	ldr	r3, [r7, #0]
 80130a0:	2b02      	cmp	r3, #2
 80130a2:	d129      	bne.n	80130f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80130a4:	683a      	ldr	r2, [r7, #0]
 80130a6:	68b9      	ldr	r1, [r7, #8]
 80130a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130aa:	f000 fa0b 	bl	80134c4 <prvCopyDataToQueue>
 80130ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80130b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d010      	beq.n	80130da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80130b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ba:	3324      	adds	r3, #36	; 0x24
 80130bc:	4618      	mov	r0, r3
 80130be:	f001 f925 	bl	801430c <xTaskRemoveFromEventList>
 80130c2:	4603      	mov	r3, r0
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d013      	beq.n	80130f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80130c8:	4b3f      	ldr	r3, [pc, #252]	; (80131c8 <xQueueGenericSend+0x1f8>)
 80130ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130ce:	601a      	str	r2, [r3, #0]
 80130d0:	f3bf 8f4f 	dsb	sy
 80130d4:	f3bf 8f6f 	isb	sy
 80130d8:	e00a      	b.n	80130f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80130da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d007      	beq.n	80130f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80130e0:	4b39      	ldr	r3, [pc, #228]	; (80131c8 <xQueueGenericSend+0x1f8>)
 80130e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130e6:	601a      	str	r2, [r3, #0]
 80130e8:	f3bf 8f4f 	dsb	sy
 80130ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80130f0:	f002 f8f0 	bl	80152d4 <vPortExitCritical>
				return pdPASS;
 80130f4:	2301      	movs	r3, #1
 80130f6:	e063      	b.n	80131c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d103      	bne.n	8013106 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80130fe:	f002 f8e9 	bl	80152d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013102:	2300      	movs	r3, #0
 8013104:	e05c      	b.n	80131c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013108:	2b00      	cmp	r3, #0
 801310a:	d106      	bne.n	801311a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801310c:	f107 0314 	add.w	r3, r7, #20
 8013110:	4618      	mov	r0, r3
 8013112:	f001 f9c1 	bl	8014498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013116:	2301      	movs	r3, #1
 8013118:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801311a:	f002 f8db 	bl	80152d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801311e:	f000 fe95 	bl	8013e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013122:	f002 f8a7 	bl	8015274 <vPortEnterCritical>
 8013126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013128:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801312c:	b25b      	sxtb	r3, r3
 801312e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013132:	d103      	bne.n	801313c <xQueueGenericSend+0x16c>
 8013134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013136:	2200      	movs	r2, #0
 8013138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013142:	b25b      	sxtb	r3, r3
 8013144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013148:	d103      	bne.n	8013152 <xQueueGenericSend+0x182>
 801314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801314c:	2200      	movs	r2, #0
 801314e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013152:	f002 f8bf 	bl	80152d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013156:	1d3a      	adds	r2, r7, #4
 8013158:	f107 0314 	add.w	r3, r7, #20
 801315c:	4611      	mov	r1, r2
 801315e:	4618      	mov	r0, r3
 8013160:	f001 f9b0 	bl	80144c4 <xTaskCheckForTimeOut>
 8013164:	4603      	mov	r3, r0
 8013166:	2b00      	cmp	r3, #0
 8013168:	d124      	bne.n	80131b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801316a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801316c:	f000 faa2 	bl	80136b4 <prvIsQueueFull>
 8013170:	4603      	mov	r3, r0
 8013172:	2b00      	cmp	r3, #0
 8013174:	d018      	beq.n	80131a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013178:	3310      	adds	r3, #16
 801317a:	687a      	ldr	r2, [r7, #4]
 801317c:	4611      	mov	r1, r2
 801317e:	4618      	mov	r0, r3
 8013180:	f001 f838 	bl	80141f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013186:	f000 fa2d 	bl	80135e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801318a:	f000 fe6d 	bl	8013e68 <xTaskResumeAll>
 801318e:	4603      	mov	r3, r0
 8013190:	2b00      	cmp	r3, #0
 8013192:	f47f af7c 	bne.w	801308e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013196:	4b0c      	ldr	r3, [pc, #48]	; (80131c8 <xQueueGenericSend+0x1f8>)
 8013198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801319c:	601a      	str	r2, [r3, #0]
 801319e:	f3bf 8f4f 	dsb	sy
 80131a2:	f3bf 8f6f 	isb	sy
 80131a6:	e772      	b.n	801308e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80131a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131aa:	f000 fa1b 	bl	80135e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80131ae:	f000 fe5b 	bl	8013e68 <xTaskResumeAll>
 80131b2:	e76c      	b.n	801308e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80131b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131b6:	f000 fa15 	bl	80135e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80131ba:	f000 fe55 	bl	8013e68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80131be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80131c0:	4618      	mov	r0, r3
 80131c2:	3738      	adds	r7, #56	; 0x38
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}
 80131c8:	e000ed04 	.word	0xe000ed04

080131cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b090      	sub	sp, #64	; 0x40
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	60f8      	str	r0, [r7, #12]
 80131d4:	60b9      	str	r1, [r7, #8]
 80131d6:	607a      	str	r2, [r7, #4]
 80131d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80131de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d10a      	bne.n	80131fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80131e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131e8:	f383 8811 	msr	BASEPRI, r3
 80131ec:	f3bf 8f6f 	isb	sy
 80131f0:	f3bf 8f4f 	dsb	sy
 80131f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80131f6:	bf00      	nop
 80131f8:	e7fe      	b.n	80131f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d103      	bne.n	8013208 <xQueueGenericSendFromISR+0x3c>
 8013200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013204:	2b00      	cmp	r3, #0
 8013206:	d101      	bne.n	801320c <xQueueGenericSendFromISR+0x40>
 8013208:	2301      	movs	r3, #1
 801320a:	e000      	b.n	801320e <xQueueGenericSendFromISR+0x42>
 801320c:	2300      	movs	r3, #0
 801320e:	2b00      	cmp	r3, #0
 8013210:	d10a      	bne.n	8013228 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013216:	f383 8811 	msr	BASEPRI, r3
 801321a:	f3bf 8f6f 	isb	sy
 801321e:	f3bf 8f4f 	dsb	sy
 8013222:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013224:	bf00      	nop
 8013226:	e7fe      	b.n	8013226 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013228:	683b      	ldr	r3, [r7, #0]
 801322a:	2b02      	cmp	r3, #2
 801322c:	d103      	bne.n	8013236 <xQueueGenericSendFromISR+0x6a>
 801322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013232:	2b01      	cmp	r3, #1
 8013234:	d101      	bne.n	801323a <xQueueGenericSendFromISR+0x6e>
 8013236:	2301      	movs	r3, #1
 8013238:	e000      	b.n	801323c <xQueueGenericSendFromISR+0x70>
 801323a:	2300      	movs	r3, #0
 801323c:	2b00      	cmp	r3, #0
 801323e:	d10a      	bne.n	8013256 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013244:	f383 8811 	msr	BASEPRI, r3
 8013248:	f3bf 8f6f 	isb	sy
 801324c:	f3bf 8f4f 	dsb	sy
 8013250:	623b      	str	r3, [r7, #32]
}
 8013252:	bf00      	nop
 8013254:	e7fe      	b.n	8013254 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013256:	f002 f8ef 	bl	8015438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801325a:	f3ef 8211 	mrs	r2, BASEPRI
 801325e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013262:	f383 8811 	msr	BASEPRI, r3
 8013266:	f3bf 8f6f 	isb	sy
 801326a:	f3bf 8f4f 	dsb	sy
 801326e:	61fa      	str	r2, [r7, #28]
 8013270:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013272:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013274:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801327c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801327e:	429a      	cmp	r2, r3
 8013280:	d302      	bcc.n	8013288 <xQueueGenericSendFromISR+0xbc>
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	2b02      	cmp	r3, #2
 8013286:	d12f      	bne.n	80132e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801328a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801328e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013296:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013298:	683a      	ldr	r2, [r7, #0]
 801329a:	68b9      	ldr	r1, [r7, #8]
 801329c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801329e:	f000 f911 	bl	80134c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80132a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80132a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80132aa:	d112      	bne.n	80132d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80132ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d016      	beq.n	80132e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80132b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132b6:	3324      	adds	r3, #36	; 0x24
 80132b8:	4618      	mov	r0, r3
 80132ba:	f001 f827 	bl	801430c <xTaskRemoveFromEventList>
 80132be:	4603      	mov	r3, r0
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d00e      	beq.n	80132e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d00b      	beq.n	80132e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	2201      	movs	r2, #1
 80132ce:	601a      	str	r2, [r3, #0]
 80132d0:	e007      	b.n	80132e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80132d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80132d6:	3301      	adds	r3, #1
 80132d8:	b2db      	uxtb	r3, r3
 80132da:	b25a      	sxtb	r2, r3
 80132dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80132e2:	2301      	movs	r3, #1
 80132e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80132e6:	e001      	b.n	80132ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80132e8:	2300      	movs	r3, #0
 80132ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80132ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80132f0:	697b      	ldr	r3, [r7, #20]
 80132f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80132f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80132f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80132fa:	4618      	mov	r0, r3
 80132fc:	3740      	adds	r7, #64	; 0x40
 80132fe:	46bd      	mov	sp, r7
 8013300:	bd80      	pop	{r7, pc}
	...

08013304 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b08c      	sub	sp, #48	; 0x30
 8013308:	af00      	add	r7, sp, #0
 801330a:	60f8      	str	r0, [r7, #12]
 801330c:	60b9      	str	r1, [r7, #8]
 801330e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013310:	2300      	movs	r3, #0
 8013312:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801331a:	2b00      	cmp	r3, #0
 801331c:	d10a      	bne.n	8013334 <xQueueReceive+0x30>
	__asm volatile
 801331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013322:	f383 8811 	msr	BASEPRI, r3
 8013326:	f3bf 8f6f 	isb	sy
 801332a:	f3bf 8f4f 	dsb	sy
 801332e:	623b      	str	r3, [r7, #32]
}
 8013330:	bf00      	nop
 8013332:	e7fe      	b.n	8013332 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d103      	bne.n	8013342 <xQueueReceive+0x3e>
 801333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801333e:	2b00      	cmp	r3, #0
 8013340:	d101      	bne.n	8013346 <xQueueReceive+0x42>
 8013342:	2301      	movs	r3, #1
 8013344:	e000      	b.n	8013348 <xQueueReceive+0x44>
 8013346:	2300      	movs	r3, #0
 8013348:	2b00      	cmp	r3, #0
 801334a:	d10a      	bne.n	8013362 <xQueueReceive+0x5e>
	__asm volatile
 801334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013350:	f383 8811 	msr	BASEPRI, r3
 8013354:	f3bf 8f6f 	isb	sy
 8013358:	f3bf 8f4f 	dsb	sy
 801335c:	61fb      	str	r3, [r7, #28]
}
 801335e:	bf00      	nop
 8013360:	e7fe      	b.n	8013360 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013362:	f001 f9f3 	bl	801474c <xTaskGetSchedulerState>
 8013366:	4603      	mov	r3, r0
 8013368:	2b00      	cmp	r3, #0
 801336a:	d102      	bne.n	8013372 <xQueueReceive+0x6e>
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d101      	bne.n	8013376 <xQueueReceive+0x72>
 8013372:	2301      	movs	r3, #1
 8013374:	e000      	b.n	8013378 <xQueueReceive+0x74>
 8013376:	2300      	movs	r3, #0
 8013378:	2b00      	cmp	r3, #0
 801337a:	d10a      	bne.n	8013392 <xQueueReceive+0x8e>
	__asm volatile
 801337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013380:	f383 8811 	msr	BASEPRI, r3
 8013384:	f3bf 8f6f 	isb	sy
 8013388:	f3bf 8f4f 	dsb	sy
 801338c:	61bb      	str	r3, [r7, #24]
}
 801338e:	bf00      	nop
 8013390:	e7fe      	b.n	8013390 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013392:	f001 ff6f 	bl	8015274 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801339a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d01f      	beq.n	80133e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80133a2:	68b9      	ldr	r1, [r7, #8]
 80133a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133a6:	f000 f8f7 	bl	8013598 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80133aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ac:	1e5a      	subs	r2, r3, #1
 80133ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80133b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b4:	691b      	ldr	r3, [r3, #16]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d00f      	beq.n	80133da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80133ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133bc:	3310      	adds	r3, #16
 80133be:	4618      	mov	r0, r3
 80133c0:	f000 ffa4 	bl	801430c <xTaskRemoveFromEventList>
 80133c4:	4603      	mov	r3, r0
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d007      	beq.n	80133da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80133ca:	4b3d      	ldr	r3, [pc, #244]	; (80134c0 <xQueueReceive+0x1bc>)
 80133cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133d0:	601a      	str	r2, [r3, #0]
 80133d2:	f3bf 8f4f 	dsb	sy
 80133d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80133da:	f001 ff7b 	bl	80152d4 <vPortExitCritical>
				return pdPASS;
 80133de:	2301      	movs	r3, #1
 80133e0:	e069      	b.n	80134b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d103      	bne.n	80133f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80133e8:	f001 ff74 	bl	80152d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80133ec:	2300      	movs	r3, #0
 80133ee:	e062      	b.n	80134b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80133f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d106      	bne.n	8013404 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80133f6:	f107 0310 	add.w	r3, r7, #16
 80133fa:	4618      	mov	r0, r3
 80133fc:	f001 f84c 	bl	8014498 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013400:	2301      	movs	r3, #1
 8013402:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013404:	f001 ff66 	bl	80152d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013408:	f000 fd20 	bl	8013e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801340c:	f001 ff32 	bl	8015274 <vPortEnterCritical>
 8013410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013412:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013416:	b25b      	sxtb	r3, r3
 8013418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801341c:	d103      	bne.n	8013426 <xQueueReceive+0x122>
 801341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013420:	2200      	movs	r2, #0
 8013422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801342c:	b25b      	sxtb	r3, r3
 801342e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013432:	d103      	bne.n	801343c <xQueueReceive+0x138>
 8013434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013436:	2200      	movs	r2, #0
 8013438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801343c:	f001 ff4a 	bl	80152d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013440:	1d3a      	adds	r2, r7, #4
 8013442:	f107 0310 	add.w	r3, r7, #16
 8013446:	4611      	mov	r1, r2
 8013448:	4618      	mov	r0, r3
 801344a:	f001 f83b 	bl	80144c4 <xTaskCheckForTimeOut>
 801344e:	4603      	mov	r3, r0
 8013450:	2b00      	cmp	r3, #0
 8013452:	d123      	bne.n	801349c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013456:	f000 f917 	bl	8013688 <prvIsQueueEmpty>
 801345a:	4603      	mov	r3, r0
 801345c:	2b00      	cmp	r3, #0
 801345e:	d017      	beq.n	8013490 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013462:	3324      	adds	r3, #36	; 0x24
 8013464:	687a      	ldr	r2, [r7, #4]
 8013466:	4611      	mov	r1, r2
 8013468:	4618      	mov	r0, r3
 801346a:	f000 fec3 	bl	80141f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801346e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013470:	f000 f8b8 	bl	80135e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013474:	f000 fcf8 	bl	8013e68 <xTaskResumeAll>
 8013478:	4603      	mov	r3, r0
 801347a:	2b00      	cmp	r3, #0
 801347c:	d189      	bne.n	8013392 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801347e:	4b10      	ldr	r3, [pc, #64]	; (80134c0 <xQueueReceive+0x1bc>)
 8013480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013484:	601a      	str	r2, [r3, #0]
 8013486:	f3bf 8f4f 	dsb	sy
 801348a:	f3bf 8f6f 	isb	sy
 801348e:	e780      	b.n	8013392 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013492:	f000 f8a7 	bl	80135e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013496:	f000 fce7 	bl	8013e68 <xTaskResumeAll>
 801349a:	e77a      	b.n	8013392 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801349c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801349e:	f000 f8a1 	bl	80135e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80134a2:	f000 fce1 	bl	8013e68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80134a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134a8:	f000 f8ee 	bl	8013688 <prvIsQueueEmpty>
 80134ac:	4603      	mov	r3, r0
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	f43f af6f 	beq.w	8013392 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80134b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80134b6:	4618      	mov	r0, r3
 80134b8:	3730      	adds	r7, #48	; 0x30
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}
 80134be:	bf00      	nop
 80134c0:	e000ed04 	.word	0xe000ed04

080134c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b086      	sub	sp, #24
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	60b9      	str	r1, [r7, #8]
 80134ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80134d0:	2300      	movs	r3, #0
 80134d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d10d      	bne.n	80134fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d14d      	bne.n	8013586 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	689b      	ldr	r3, [r3, #8]
 80134ee:	4618      	mov	r0, r3
 80134f0:	f001 f94a 	bl	8014788 <xTaskPriorityDisinherit>
 80134f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	2200      	movs	r2, #0
 80134fa:	609a      	str	r2, [r3, #8]
 80134fc:	e043      	b.n	8013586 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d119      	bne.n	8013538 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	6858      	ldr	r0, [r3, #4]
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801350c:	461a      	mov	r2, r3
 801350e:	68b9      	ldr	r1, [r7, #8]
 8013510:	f002 f9f6 	bl	8015900 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	685a      	ldr	r2, [r3, #4]
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801351c:	441a      	add	r2, r3
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	685a      	ldr	r2, [r3, #4]
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	689b      	ldr	r3, [r3, #8]
 801352a:	429a      	cmp	r2, r3
 801352c:	d32b      	bcc.n	8013586 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	681a      	ldr	r2, [r3, #0]
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	605a      	str	r2, [r3, #4]
 8013536:	e026      	b.n	8013586 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	68d8      	ldr	r0, [r3, #12]
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013540:	461a      	mov	r2, r3
 8013542:	68b9      	ldr	r1, [r7, #8]
 8013544:	f002 f9dc 	bl	8015900 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	68da      	ldr	r2, [r3, #12]
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013550:	425b      	negs	r3, r3
 8013552:	441a      	add	r2, r3
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	68da      	ldr	r2, [r3, #12]
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	429a      	cmp	r2, r3
 8013562:	d207      	bcs.n	8013574 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	689a      	ldr	r2, [r3, #8]
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801356c:	425b      	negs	r3, r3
 801356e:	441a      	add	r2, r3
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2b02      	cmp	r3, #2
 8013578:	d105      	bne.n	8013586 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d002      	beq.n	8013586 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	3b01      	subs	r3, #1
 8013584:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013586:	693b      	ldr	r3, [r7, #16]
 8013588:	1c5a      	adds	r2, r3, #1
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801358e:	697b      	ldr	r3, [r7, #20]
}
 8013590:	4618      	mov	r0, r3
 8013592:	3718      	adds	r7, #24
 8013594:	46bd      	mov	sp, r7
 8013596:	bd80      	pop	{r7, pc}

08013598 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b082      	sub	sp, #8
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d018      	beq.n	80135dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	68da      	ldr	r2, [r3, #12]
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135b2:	441a      	add	r2, r3
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	68da      	ldr	r2, [r3, #12]
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	689b      	ldr	r3, [r3, #8]
 80135c0:	429a      	cmp	r2, r3
 80135c2:	d303      	bcc.n	80135cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	681a      	ldr	r2, [r3, #0]
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	68d9      	ldr	r1, [r3, #12]
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135d4:	461a      	mov	r2, r3
 80135d6:	6838      	ldr	r0, [r7, #0]
 80135d8:	f002 f992 	bl	8015900 <memcpy>
	}
}
 80135dc:	bf00      	nop
 80135de:	3708      	adds	r7, #8
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd80      	pop	{r7, pc}

080135e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b084      	sub	sp, #16
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80135ec:	f001 fe42 	bl	8015274 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80135f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80135f8:	e011      	b.n	801361e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d012      	beq.n	8013628 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	3324      	adds	r3, #36	; 0x24
 8013606:	4618      	mov	r0, r3
 8013608:	f000 fe80 	bl	801430c <xTaskRemoveFromEventList>
 801360c:	4603      	mov	r3, r0
 801360e:	2b00      	cmp	r3, #0
 8013610:	d001      	beq.n	8013616 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013612:	f000 ffb9 	bl	8014588 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013616:	7bfb      	ldrb	r3, [r7, #15]
 8013618:	3b01      	subs	r3, #1
 801361a:	b2db      	uxtb	r3, r3
 801361c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801361e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013622:	2b00      	cmp	r3, #0
 8013624:	dce9      	bgt.n	80135fa <prvUnlockQueue+0x16>
 8013626:	e000      	b.n	801362a <prvUnlockQueue+0x46>
					break;
 8013628:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	22ff      	movs	r2, #255	; 0xff
 801362e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013632:	f001 fe4f 	bl	80152d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013636:	f001 fe1d 	bl	8015274 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013640:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013642:	e011      	b.n	8013668 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	691b      	ldr	r3, [r3, #16]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d012      	beq.n	8013672 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	3310      	adds	r3, #16
 8013650:	4618      	mov	r0, r3
 8013652:	f000 fe5b 	bl	801430c <xTaskRemoveFromEventList>
 8013656:	4603      	mov	r3, r0
 8013658:	2b00      	cmp	r3, #0
 801365a:	d001      	beq.n	8013660 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801365c:	f000 ff94 	bl	8014588 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013660:	7bbb      	ldrb	r3, [r7, #14]
 8013662:	3b01      	subs	r3, #1
 8013664:	b2db      	uxtb	r3, r3
 8013666:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013668:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801366c:	2b00      	cmp	r3, #0
 801366e:	dce9      	bgt.n	8013644 <prvUnlockQueue+0x60>
 8013670:	e000      	b.n	8013674 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013672:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	22ff      	movs	r2, #255	; 0xff
 8013678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801367c:	f001 fe2a 	bl	80152d4 <vPortExitCritical>
}
 8013680:	bf00      	nop
 8013682:	3710      	adds	r7, #16
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}

08013688 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b084      	sub	sp, #16
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013690:	f001 fdf0 	bl	8015274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013698:	2b00      	cmp	r3, #0
 801369a:	d102      	bne.n	80136a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801369c:	2301      	movs	r3, #1
 801369e:	60fb      	str	r3, [r7, #12]
 80136a0:	e001      	b.n	80136a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80136a2:	2300      	movs	r3, #0
 80136a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80136a6:	f001 fe15 	bl	80152d4 <vPortExitCritical>

	return xReturn;
 80136aa:	68fb      	ldr	r3, [r7, #12]
}
 80136ac:	4618      	mov	r0, r3
 80136ae:	3710      	adds	r7, #16
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}

080136b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b084      	sub	sp, #16
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80136bc:	f001 fdda 	bl	8015274 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136c8:	429a      	cmp	r2, r3
 80136ca:	d102      	bne.n	80136d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80136cc:	2301      	movs	r3, #1
 80136ce:	60fb      	str	r3, [r7, #12]
 80136d0:	e001      	b.n	80136d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80136d2:	2300      	movs	r3, #0
 80136d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80136d6:	f001 fdfd 	bl	80152d4 <vPortExitCritical>

	return xReturn;
 80136da:	68fb      	ldr	r3, [r7, #12]
}
 80136dc:	4618      	mov	r0, r3
 80136de:	3710      	adds	r7, #16
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bd80      	pop	{r7, pc}

080136e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80136e4:	b480      	push	{r7}
 80136e6:	b085      	sub	sp, #20
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
 80136ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80136ee:	2300      	movs	r3, #0
 80136f0:	60fb      	str	r3, [r7, #12]
 80136f2:	e014      	b.n	801371e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80136f4:	4a0f      	ldr	r2, [pc, #60]	; (8013734 <vQueueAddToRegistry+0x50>)
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d10b      	bne.n	8013718 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013700:	490c      	ldr	r1, [pc, #48]	; (8013734 <vQueueAddToRegistry+0x50>)
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	683a      	ldr	r2, [r7, #0]
 8013706:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801370a:	4a0a      	ldr	r2, [pc, #40]	; (8013734 <vQueueAddToRegistry+0x50>)
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	00db      	lsls	r3, r3, #3
 8013710:	4413      	add	r3, r2
 8013712:	687a      	ldr	r2, [r7, #4]
 8013714:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013716:	e006      	b.n	8013726 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	3301      	adds	r3, #1
 801371c:	60fb      	str	r3, [r7, #12]
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	2b07      	cmp	r3, #7
 8013722:	d9e7      	bls.n	80136f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013724:	bf00      	nop
 8013726:	bf00      	nop
 8013728:	3714      	adds	r7, #20
 801372a:	46bd      	mov	sp, r7
 801372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013730:	4770      	bx	lr
 8013732:	bf00      	nop
 8013734:	240012f8 	.word	0x240012f8

08013738 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013738:	b580      	push	{r7, lr}
 801373a:	b086      	sub	sp, #24
 801373c:	af00      	add	r7, sp, #0
 801373e:	60f8      	str	r0, [r7, #12]
 8013740:	60b9      	str	r1, [r7, #8]
 8013742:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013748:	f001 fd94 	bl	8015274 <vPortEnterCritical>
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013752:	b25b      	sxtb	r3, r3
 8013754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013758:	d103      	bne.n	8013762 <vQueueWaitForMessageRestricted+0x2a>
 801375a:	697b      	ldr	r3, [r7, #20]
 801375c:	2200      	movs	r2, #0
 801375e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013762:	697b      	ldr	r3, [r7, #20]
 8013764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013768:	b25b      	sxtb	r3, r3
 801376a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801376e:	d103      	bne.n	8013778 <vQueueWaitForMessageRestricted+0x40>
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	2200      	movs	r2, #0
 8013774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013778:	f001 fdac 	bl	80152d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801377c:	697b      	ldr	r3, [r7, #20]
 801377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013780:	2b00      	cmp	r3, #0
 8013782:	d106      	bne.n	8013792 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013784:	697b      	ldr	r3, [r7, #20]
 8013786:	3324      	adds	r3, #36	; 0x24
 8013788:	687a      	ldr	r2, [r7, #4]
 801378a:	68b9      	ldr	r1, [r7, #8]
 801378c:	4618      	mov	r0, r3
 801378e:	f000 fd91 	bl	80142b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013792:	6978      	ldr	r0, [r7, #20]
 8013794:	f7ff ff26 	bl	80135e4 <prvUnlockQueue>
	}
 8013798:	bf00      	nop
 801379a:	3718      	adds	r7, #24
 801379c:	46bd      	mov	sp, r7
 801379e:	bd80      	pop	{r7, pc}

080137a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b08e      	sub	sp, #56	; 0x38
 80137a4:	af04      	add	r7, sp, #16
 80137a6:	60f8      	str	r0, [r7, #12]
 80137a8:	60b9      	str	r1, [r7, #8]
 80137aa:	607a      	str	r2, [r7, #4]
 80137ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80137ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d10a      	bne.n	80137ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80137b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b8:	f383 8811 	msr	BASEPRI, r3
 80137bc:	f3bf 8f6f 	isb	sy
 80137c0:	f3bf 8f4f 	dsb	sy
 80137c4:	623b      	str	r3, [r7, #32]
}
 80137c6:	bf00      	nop
 80137c8:	e7fe      	b.n	80137c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80137ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d10a      	bne.n	80137e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80137d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137d4:	f383 8811 	msr	BASEPRI, r3
 80137d8:	f3bf 8f6f 	isb	sy
 80137dc:	f3bf 8f4f 	dsb	sy
 80137e0:	61fb      	str	r3, [r7, #28]
}
 80137e2:	bf00      	nop
 80137e4:	e7fe      	b.n	80137e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80137e6:	235c      	movs	r3, #92	; 0x5c
 80137e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80137ea:	693b      	ldr	r3, [r7, #16]
 80137ec:	2b5c      	cmp	r3, #92	; 0x5c
 80137ee:	d00a      	beq.n	8013806 <xTaskCreateStatic+0x66>
	__asm volatile
 80137f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137f4:	f383 8811 	msr	BASEPRI, r3
 80137f8:	f3bf 8f6f 	isb	sy
 80137fc:	f3bf 8f4f 	dsb	sy
 8013800:	61bb      	str	r3, [r7, #24]
}
 8013802:	bf00      	nop
 8013804:	e7fe      	b.n	8013804 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013806:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801380a:	2b00      	cmp	r3, #0
 801380c:	d01e      	beq.n	801384c <xTaskCreateStatic+0xac>
 801380e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013810:	2b00      	cmp	r3, #0
 8013812:	d01b      	beq.n	801384c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013816:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801381c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013820:	2202      	movs	r2, #2
 8013822:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013826:	2300      	movs	r3, #0
 8013828:	9303      	str	r3, [sp, #12]
 801382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801382c:	9302      	str	r3, [sp, #8]
 801382e:	f107 0314 	add.w	r3, r7, #20
 8013832:	9301      	str	r3, [sp, #4]
 8013834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013836:	9300      	str	r3, [sp, #0]
 8013838:	683b      	ldr	r3, [r7, #0]
 801383a:	687a      	ldr	r2, [r7, #4]
 801383c:	68b9      	ldr	r1, [r7, #8]
 801383e:	68f8      	ldr	r0, [r7, #12]
 8013840:	f000 f850 	bl	80138e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013846:	f000 f8dd 	bl	8013a04 <prvAddNewTaskToReadyList>
 801384a:	e001      	b.n	8013850 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801384c:	2300      	movs	r3, #0
 801384e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013850:	697b      	ldr	r3, [r7, #20]
	}
 8013852:	4618      	mov	r0, r3
 8013854:	3728      	adds	r7, #40	; 0x28
 8013856:	46bd      	mov	sp, r7
 8013858:	bd80      	pop	{r7, pc}

0801385a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801385a:	b580      	push	{r7, lr}
 801385c:	b08c      	sub	sp, #48	; 0x30
 801385e:	af04      	add	r7, sp, #16
 8013860:	60f8      	str	r0, [r7, #12]
 8013862:	60b9      	str	r1, [r7, #8]
 8013864:	603b      	str	r3, [r7, #0]
 8013866:	4613      	mov	r3, r2
 8013868:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801386a:	88fb      	ldrh	r3, [r7, #6]
 801386c:	009b      	lsls	r3, r3, #2
 801386e:	4618      	mov	r0, r3
 8013870:	f001 fe22 	bl	80154b8 <pvPortMalloc>
 8013874:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013876:	697b      	ldr	r3, [r7, #20]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d00e      	beq.n	801389a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801387c:	205c      	movs	r0, #92	; 0x5c
 801387e:	f001 fe1b 	bl	80154b8 <pvPortMalloc>
 8013882:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013884:	69fb      	ldr	r3, [r7, #28]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d003      	beq.n	8013892 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801388a:	69fb      	ldr	r3, [r7, #28]
 801388c:	697a      	ldr	r2, [r7, #20]
 801388e:	631a      	str	r2, [r3, #48]	; 0x30
 8013890:	e005      	b.n	801389e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013892:	6978      	ldr	r0, [r7, #20]
 8013894:	f001 fedc 	bl	8015650 <vPortFree>
 8013898:	e001      	b.n	801389e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801389a:	2300      	movs	r3, #0
 801389c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801389e:	69fb      	ldr	r3, [r7, #28]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d017      	beq.n	80138d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80138a4:	69fb      	ldr	r3, [r7, #28]
 80138a6:	2200      	movs	r2, #0
 80138a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80138ac:	88fa      	ldrh	r2, [r7, #6]
 80138ae:	2300      	movs	r3, #0
 80138b0:	9303      	str	r3, [sp, #12]
 80138b2:	69fb      	ldr	r3, [r7, #28]
 80138b4:	9302      	str	r3, [sp, #8]
 80138b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b8:	9301      	str	r3, [sp, #4]
 80138ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138bc:	9300      	str	r3, [sp, #0]
 80138be:	683b      	ldr	r3, [r7, #0]
 80138c0:	68b9      	ldr	r1, [r7, #8]
 80138c2:	68f8      	ldr	r0, [r7, #12]
 80138c4:	f000 f80e 	bl	80138e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80138c8:	69f8      	ldr	r0, [r7, #28]
 80138ca:	f000 f89b 	bl	8013a04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80138ce:	2301      	movs	r3, #1
 80138d0:	61bb      	str	r3, [r7, #24]
 80138d2:	e002      	b.n	80138da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80138d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80138d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80138da:	69bb      	ldr	r3, [r7, #24]
	}
 80138dc:	4618      	mov	r0, r3
 80138de:	3720      	adds	r7, #32
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd80      	pop	{r7, pc}

080138e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b088      	sub	sp, #32
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	60f8      	str	r0, [r7, #12]
 80138ec:	60b9      	str	r1, [r7, #8]
 80138ee:	607a      	str	r2, [r7, #4]
 80138f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80138f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	009b      	lsls	r3, r3, #2
 80138fa:	461a      	mov	r2, r3
 80138fc:	21a5      	movs	r1, #165	; 0xa5
 80138fe:	f002 f80d 	bl	801591c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013906:	6879      	ldr	r1, [r7, #4]
 8013908:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801390c:	440b      	add	r3, r1
 801390e:	009b      	lsls	r3, r3, #2
 8013910:	4413      	add	r3, r2
 8013912:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013914:	69bb      	ldr	r3, [r7, #24]
 8013916:	f023 0307 	bic.w	r3, r3, #7
 801391a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801391c:	69bb      	ldr	r3, [r7, #24]
 801391e:	f003 0307 	and.w	r3, r3, #7
 8013922:	2b00      	cmp	r3, #0
 8013924:	d00a      	beq.n	801393c <prvInitialiseNewTask+0x58>
	__asm volatile
 8013926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801392a:	f383 8811 	msr	BASEPRI, r3
 801392e:	f3bf 8f6f 	isb	sy
 8013932:	f3bf 8f4f 	dsb	sy
 8013936:	617b      	str	r3, [r7, #20]
}
 8013938:	bf00      	nop
 801393a:	e7fe      	b.n	801393a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801393c:	68bb      	ldr	r3, [r7, #8]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d01f      	beq.n	8013982 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013942:	2300      	movs	r3, #0
 8013944:	61fb      	str	r3, [r7, #28]
 8013946:	e012      	b.n	801396e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013948:	68ba      	ldr	r2, [r7, #8]
 801394a:	69fb      	ldr	r3, [r7, #28]
 801394c:	4413      	add	r3, r2
 801394e:	7819      	ldrb	r1, [r3, #0]
 8013950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013952:	69fb      	ldr	r3, [r7, #28]
 8013954:	4413      	add	r3, r2
 8013956:	3334      	adds	r3, #52	; 0x34
 8013958:	460a      	mov	r2, r1
 801395a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801395c:	68ba      	ldr	r2, [r7, #8]
 801395e:	69fb      	ldr	r3, [r7, #28]
 8013960:	4413      	add	r3, r2
 8013962:	781b      	ldrb	r3, [r3, #0]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d006      	beq.n	8013976 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013968:	69fb      	ldr	r3, [r7, #28]
 801396a:	3301      	adds	r3, #1
 801396c:	61fb      	str	r3, [r7, #28]
 801396e:	69fb      	ldr	r3, [r7, #28]
 8013970:	2b0f      	cmp	r3, #15
 8013972:	d9e9      	bls.n	8013948 <prvInitialiseNewTask+0x64>
 8013974:	e000      	b.n	8013978 <prvInitialiseNewTask+0x94>
			{
				break;
 8013976:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397a:	2200      	movs	r2, #0
 801397c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013980:	e003      	b.n	801398a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013984:	2200      	movs	r2, #0
 8013986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801398c:	2b37      	cmp	r3, #55	; 0x37
 801398e:	d901      	bls.n	8013994 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013990:	2337      	movs	r3, #55	; 0x37
 8013992:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013998:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801399c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801399e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80139a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a2:	2200      	movs	r2, #0
 80139a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80139a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a8:	3304      	adds	r3, #4
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7ff f978 	bl	8012ca0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80139b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b2:	3318      	adds	r3, #24
 80139b4:	4618      	mov	r0, r3
 80139b6:	f7ff f973 	bl	8012ca0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80139ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80139c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80139c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80139ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80139d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d2:	2200      	movs	r2, #0
 80139d4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80139d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d8:	2200      	movs	r2, #0
 80139da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80139de:	683a      	ldr	r2, [r7, #0]
 80139e0:	68f9      	ldr	r1, [r7, #12]
 80139e2:	69b8      	ldr	r0, [r7, #24]
 80139e4:	f001 fb18 	bl	8015018 <pxPortInitialiseStack>
 80139e8:	4602      	mov	r2, r0
 80139ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80139ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d002      	beq.n	80139fa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80139f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80139fa:	bf00      	nop
 80139fc:	3720      	adds	r7, #32
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bd80      	pop	{r7, pc}
	...

08013a04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b082      	sub	sp, #8
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013a0c:	f001 fc32 	bl	8015274 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013a10:	4b2d      	ldr	r3, [pc, #180]	; (8013ac8 <prvAddNewTaskToReadyList+0xc4>)
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	3301      	adds	r3, #1
 8013a16:	4a2c      	ldr	r2, [pc, #176]	; (8013ac8 <prvAddNewTaskToReadyList+0xc4>)
 8013a18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013a1a:	4b2c      	ldr	r3, [pc, #176]	; (8013acc <prvAddNewTaskToReadyList+0xc8>)
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d109      	bne.n	8013a36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013a22:	4a2a      	ldr	r2, [pc, #168]	; (8013acc <prvAddNewTaskToReadyList+0xc8>)
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013a28:	4b27      	ldr	r3, [pc, #156]	; (8013ac8 <prvAddNewTaskToReadyList+0xc4>)
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	2b01      	cmp	r3, #1
 8013a2e:	d110      	bne.n	8013a52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013a30:	f000 fdce 	bl	80145d0 <prvInitialiseTaskLists>
 8013a34:	e00d      	b.n	8013a52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013a36:	4b26      	ldr	r3, [pc, #152]	; (8013ad0 <prvAddNewTaskToReadyList+0xcc>)
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d109      	bne.n	8013a52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013a3e:	4b23      	ldr	r3, [pc, #140]	; (8013acc <prvAddNewTaskToReadyList+0xc8>)
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a48:	429a      	cmp	r2, r3
 8013a4a:	d802      	bhi.n	8013a52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013a4c:	4a1f      	ldr	r2, [pc, #124]	; (8013acc <prvAddNewTaskToReadyList+0xc8>)
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013a52:	4b20      	ldr	r3, [pc, #128]	; (8013ad4 <prvAddNewTaskToReadyList+0xd0>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	3301      	adds	r3, #1
 8013a58:	4a1e      	ldr	r2, [pc, #120]	; (8013ad4 <prvAddNewTaskToReadyList+0xd0>)
 8013a5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013a5c:	4b1d      	ldr	r3, [pc, #116]	; (8013ad4 <prvAddNewTaskToReadyList+0xd0>)
 8013a5e:	681a      	ldr	r2, [r3, #0]
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a68:	4b1b      	ldr	r3, [pc, #108]	; (8013ad8 <prvAddNewTaskToReadyList+0xd4>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	429a      	cmp	r2, r3
 8013a6e:	d903      	bls.n	8013a78 <prvAddNewTaskToReadyList+0x74>
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a74:	4a18      	ldr	r2, [pc, #96]	; (8013ad8 <prvAddNewTaskToReadyList+0xd4>)
 8013a76:	6013      	str	r3, [r2, #0]
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a7c:	4613      	mov	r3, r2
 8013a7e:	009b      	lsls	r3, r3, #2
 8013a80:	4413      	add	r3, r2
 8013a82:	009b      	lsls	r3, r3, #2
 8013a84:	4a15      	ldr	r2, [pc, #84]	; (8013adc <prvAddNewTaskToReadyList+0xd8>)
 8013a86:	441a      	add	r2, r3
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	3304      	adds	r3, #4
 8013a8c:	4619      	mov	r1, r3
 8013a8e:	4610      	mov	r0, r2
 8013a90:	f7ff f913 	bl	8012cba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013a94:	f001 fc1e 	bl	80152d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013a98:	4b0d      	ldr	r3, [pc, #52]	; (8013ad0 <prvAddNewTaskToReadyList+0xcc>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d00e      	beq.n	8013abe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013aa0:	4b0a      	ldr	r3, [pc, #40]	; (8013acc <prvAddNewTaskToReadyList+0xc8>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aaa:	429a      	cmp	r2, r3
 8013aac:	d207      	bcs.n	8013abe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013aae:	4b0c      	ldr	r3, [pc, #48]	; (8013ae0 <prvAddNewTaskToReadyList+0xdc>)
 8013ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ab4:	601a      	str	r2, [r3, #0]
 8013ab6:	f3bf 8f4f 	dsb	sy
 8013aba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013abe:	bf00      	nop
 8013ac0:	3708      	adds	r7, #8
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}
 8013ac6:	bf00      	nop
 8013ac8:	2400180c 	.word	0x2400180c
 8013acc:	24001338 	.word	0x24001338
 8013ad0:	24001818 	.word	0x24001818
 8013ad4:	24001828 	.word	0x24001828
 8013ad8:	24001814 	.word	0x24001814
 8013adc:	2400133c 	.word	0x2400133c
 8013ae0:	e000ed04 	.word	0xe000ed04

08013ae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b084      	sub	sp, #16
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013aec:	2300      	movs	r3, #0
 8013aee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d017      	beq.n	8013b26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013af6:	4b13      	ldr	r3, [pc, #76]	; (8013b44 <vTaskDelay+0x60>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d00a      	beq.n	8013b14 <vTaskDelay+0x30>
	__asm volatile
 8013afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b02:	f383 8811 	msr	BASEPRI, r3
 8013b06:	f3bf 8f6f 	isb	sy
 8013b0a:	f3bf 8f4f 	dsb	sy
 8013b0e:	60bb      	str	r3, [r7, #8]
}
 8013b10:	bf00      	nop
 8013b12:	e7fe      	b.n	8013b12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013b14:	f000 f99a 	bl	8013e4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013b18:	2100      	movs	r1, #0
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f000 feba 	bl	8014894 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013b20:	f000 f9a2 	bl	8013e68 <xTaskResumeAll>
 8013b24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d107      	bne.n	8013b3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013b2c:	4b06      	ldr	r3, [pc, #24]	; (8013b48 <vTaskDelay+0x64>)
 8013b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b32:	601a      	str	r2, [r3, #0]
 8013b34:	f3bf 8f4f 	dsb	sy
 8013b38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013b3c:	bf00      	nop
 8013b3e:	3710      	adds	r7, #16
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bd80      	pop	{r7, pc}
 8013b44:	24001834 	.word	0x24001834
 8013b48:	e000ed04 	.word	0xe000ed04

08013b4c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b084      	sub	sp, #16
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013b54:	f001 fb8e 	bl	8015274 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d102      	bne.n	8013b64 <vTaskSuspend+0x18>
 8013b5e:	4b30      	ldr	r3, [pc, #192]	; (8013c20 <vTaskSuspend+0xd4>)
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	e000      	b.n	8013b66 <vTaskSuspend+0x1a>
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	3304      	adds	r3, #4
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f7ff f901 	bl	8012d74 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d004      	beq.n	8013b84 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	3318      	adds	r3, #24
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f7ff f8f8 	bl	8012d74 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	3304      	adds	r3, #4
 8013b88:	4619      	mov	r1, r3
 8013b8a:	4826      	ldr	r0, [pc, #152]	; (8013c24 <vTaskSuspend+0xd8>)
 8013b8c:	f7ff f895 	bl	8012cba <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8013b96:	b2db      	uxtb	r3, r3
 8013b98:	2b01      	cmp	r3, #1
 8013b9a:	d103      	bne.n	8013ba4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8013ba4:	f001 fb96 	bl	80152d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8013ba8:	4b1f      	ldr	r3, [pc, #124]	; (8013c28 <vTaskSuspend+0xdc>)
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d005      	beq.n	8013bbc <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8013bb0:	f001 fb60 	bl	8015274 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8013bb4:	f000 fdaa 	bl	801470c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8013bb8:	f001 fb8c 	bl	80152d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8013bbc:	4b18      	ldr	r3, [pc, #96]	; (8013c20 <vTaskSuspend+0xd4>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	68fa      	ldr	r2, [r7, #12]
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	d127      	bne.n	8013c16 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8013bc6:	4b18      	ldr	r3, [pc, #96]	; (8013c28 <vTaskSuspend+0xdc>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d017      	beq.n	8013bfe <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8013bce:	4b17      	ldr	r3, [pc, #92]	; (8013c2c <vTaskSuspend+0xe0>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d00a      	beq.n	8013bec <vTaskSuspend+0xa0>
	__asm volatile
 8013bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bda:	f383 8811 	msr	BASEPRI, r3
 8013bde:	f3bf 8f6f 	isb	sy
 8013be2:	f3bf 8f4f 	dsb	sy
 8013be6:	60bb      	str	r3, [r7, #8]
}
 8013be8:	bf00      	nop
 8013bea:	e7fe      	b.n	8013bea <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8013bec:	4b10      	ldr	r3, [pc, #64]	; (8013c30 <vTaskSuspend+0xe4>)
 8013bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bf2:	601a      	str	r2, [r3, #0]
 8013bf4:	f3bf 8f4f 	dsb	sy
 8013bf8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013bfc:	e00b      	b.n	8013c16 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8013bfe:	4b09      	ldr	r3, [pc, #36]	; (8013c24 <vTaskSuspend+0xd8>)
 8013c00:	681a      	ldr	r2, [r3, #0]
 8013c02:	4b0c      	ldr	r3, [pc, #48]	; (8013c34 <vTaskSuspend+0xe8>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d103      	bne.n	8013c12 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8013c0a:	4b05      	ldr	r3, [pc, #20]	; (8013c20 <vTaskSuspend+0xd4>)
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	601a      	str	r2, [r3, #0]
	}
 8013c10:	e001      	b.n	8013c16 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8013c12:	f000 fa91 	bl	8014138 <vTaskSwitchContext>
	}
 8013c16:	bf00      	nop
 8013c18:	3710      	adds	r7, #16
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	bd80      	pop	{r7, pc}
 8013c1e:	bf00      	nop
 8013c20:	24001338 	.word	0x24001338
 8013c24:	240017f8 	.word	0x240017f8
 8013c28:	24001818 	.word	0x24001818
 8013c2c:	24001834 	.word	0x24001834
 8013c30:	e000ed04 	.word	0xe000ed04
 8013c34:	2400180c 	.word	0x2400180c

08013c38 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8013c38:	b480      	push	{r7}
 8013c3a:	b087      	sub	sp, #28
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8013c40:	2300      	movs	r3, #0
 8013c42:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d10a      	bne.n	8013c64 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8013c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c52:	f383 8811 	msr	BASEPRI, r3
 8013c56:	f3bf 8f6f 	isb	sy
 8013c5a:	f3bf 8f4f 	dsb	sy
 8013c5e:	60fb      	str	r3, [r7, #12]
}
 8013c60:	bf00      	nop
 8013c62:	e7fe      	b.n	8013c62 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013c64:	693b      	ldr	r3, [r7, #16]
 8013c66:	695b      	ldr	r3, [r3, #20]
 8013c68:	4a0a      	ldr	r2, [pc, #40]	; (8013c94 <prvTaskIsTaskSuspended+0x5c>)
 8013c6a:	4293      	cmp	r3, r2
 8013c6c:	d10a      	bne.n	8013c84 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c72:	4a09      	ldr	r2, [pc, #36]	; (8013c98 <prvTaskIsTaskSuspended+0x60>)
 8013c74:	4293      	cmp	r3, r2
 8013c76:	d005      	beq.n	8013c84 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8013c78:	693b      	ldr	r3, [r7, #16]
 8013c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d101      	bne.n	8013c84 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8013c80:	2301      	movs	r3, #1
 8013c82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013c84:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013c86:	4618      	mov	r0, r3
 8013c88:	371c      	adds	r7, #28
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c90:	4770      	bx	lr
 8013c92:	bf00      	nop
 8013c94:	240017f8 	.word	0x240017f8
 8013c98:	240017cc 	.word	0x240017cc

08013c9c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b08a      	sub	sp, #40	; 0x28
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d10a      	bne.n	8013cc8 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8013cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb6:	f383 8811 	msr	BASEPRI, r3
 8013cba:	f3bf 8f6f 	isb	sy
 8013cbe:	f3bf 8f4f 	dsb	sy
 8013cc2:	61bb      	str	r3, [r7, #24]
}
 8013cc4:	bf00      	nop
 8013cc6:	e7fe      	b.n	8013cc6 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013cc8:	f001 fbb6 	bl	8015438 <vPortValidateInterruptPriority>
	__asm volatile
 8013ccc:	f3ef 8211 	mrs	r2, BASEPRI
 8013cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cd4:	f383 8811 	msr	BASEPRI, r3
 8013cd8:	f3bf 8f6f 	isb	sy
 8013cdc:	f3bf 8f4f 	dsb	sy
 8013ce0:	617a      	str	r2, [r7, #20]
 8013ce2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013ce4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013ce6:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8013ce8:	6a38      	ldr	r0, [r7, #32]
 8013cea:	f7ff ffa5 	bl	8013c38 <prvTaskIsTaskSuspended>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d030      	beq.n	8013d56 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cf4:	4b1d      	ldr	r3, [pc, #116]	; (8013d6c <xTaskResumeFromISR+0xd0>)
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d126      	bne.n	8013d4a <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013cfc:	6a3b      	ldr	r3, [r7, #32]
 8013cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d00:	4b1b      	ldr	r3, [pc, #108]	; (8013d70 <xTaskResumeFromISR+0xd4>)
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d301      	bcc.n	8013d0e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d0e:	6a3b      	ldr	r3, [r7, #32]
 8013d10:	3304      	adds	r3, #4
 8013d12:	4618      	mov	r0, r3
 8013d14:	f7ff f82e 	bl	8012d74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013d18:	6a3b      	ldr	r3, [r7, #32]
 8013d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d1c:	4b15      	ldr	r3, [pc, #84]	; (8013d74 <xTaskResumeFromISR+0xd8>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	429a      	cmp	r2, r3
 8013d22:	d903      	bls.n	8013d2c <xTaskResumeFromISR+0x90>
 8013d24:	6a3b      	ldr	r3, [r7, #32]
 8013d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d28:	4a12      	ldr	r2, [pc, #72]	; (8013d74 <xTaskResumeFromISR+0xd8>)
 8013d2a:	6013      	str	r3, [r2, #0]
 8013d2c:	6a3b      	ldr	r3, [r7, #32]
 8013d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d30:	4613      	mov	r3, r2
 8013d32:	009b      	lsls	r3, r3, #2
 8013d34:	4413      	add	r3, r2
 8013d36:	009b      	lsls	r3, r3, #2
 8013d38:	4a0f      	ldr	r2, [pc, #60]	; (8013d78 <xTaskResumeFromISR+0xdc>)
 8013d3a:	441a      	add	r2, r3
 8013d3c:	6a3b      	ldr	r3, [r7, #32]
 8013d3e:	3304      	adds	r3, #4
 8013d40:	4619      	mov	r1, r3
 8013d42:	4610      	mov	r0, r2
 8013d44:	f7fe ffb9 	bl	8012cba <vListInsertEnd>
 8013d48:	e005      	b.n	8013d56 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013d4a:	6a3b      	ldr	r3, [r7, #32]
 8013d4c:	3318      	adds	r3, #24
 8013d4e:	4619      	mov	r1, r3
 8013d50:	480a      	ldr	r0, [pc, #40]	; (8013d7c <xTaskResumeFromISR+0xe0>)
 8013d52:	f7fe ffb2 	bl	8012cba <vListInsertEnd>
 8013d56:	69fb      	ldr	r3, [r7, #28]
 8013d58:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	f383 8811 	msr	BASEPRI, r3
}
 8013d60:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8013d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013d64:	4618      	mov	r0, r3
 8013d66:	3728      	adds	r7, #40	; 0x28
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	bd80      	pop	{r7, pc}
 8013d6c:	24001834 	.word	0x24001834
 8013d70:	24001338 	.word	0x24001338
 8013d74:	24001814 	.word	0x24001814
 8013d78:	2400133c 	.word	0x2400133c
 8013d7c:	240017cc 	.word	0x240017cc

08013d80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b08a      	sub	sp, #40	; 0x28
 8013d84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013d86:	2300      	movs	r3, #0
 8013d88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013d8e:	463a      	mov	r2, r7
 8013d90:	1d39      	adds	r1, r7, #4
 8013d92:	f107 0308 	add.w	r3, r7, #8
 8013d96:	4618      	mov	r0, r3
 8013d98:	f7fe fd40 	bl	801281c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013d9c:	6839      	ldr	r1, [r7, #0]
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	68ba      	ldr	r2, [r7, #8]
 8013da2:	9202      	str	r2, [sp, #8]
 8013da4:	9301      	str	r3, [sp, #4]
 8013da6:	2300      	movs	r3, #0
 8013da8:	9300      	str	r3, [sp, #0]
 8013daa:	2300      	movs	r3, #0
 8013dac:	460a      	mov	r2, r1
 8013dae:	4921      	ldr	r1, [pc, #132]	; (8013e34 <vTaskStartScheduler+0xb4>)
 8013db0:	4821      	ldr	r0, [pc, #132]	; (8013e38 <vTaskStartScheduler+0xb8>)
 8013db2:	f7ff fcf5 	bl	80137a0 <xTaskCreateStatic>
 8013db6:	4603      	mov	r3, r0
 8013db8:	4a20      	ldr	r2, [pc, #128]	; (8013e3c <vTaskStartScheduler+0xbc>)
 8013dba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013dbc:	4b1f      	ldr	r3, [pc, #124]	; (8013e3c <vTaskStartScheduler+0xbc>)
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d002      	beq.n	8013dca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	617b      	str	r3, [r7, #20]
 8013dc8:	e001      	b.n	8013dce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013dca:	2300      	movs	r3, #0
 8013dcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013dce:	697b      	ldr	r3, [r7, #20]
 8013dd0:	2b01      	cmp	r3, #1
 8013dd2:	d102      	bne.n	8013dda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013dd4:	f000 fdb2 	bl	801493c <xTimerCreateTimerTask>
 8013dd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013dda:	697b      	ldr	r3, [r7, #20]
 8013ddc:	2b01      	cmp	r3, #1
 8013dde:	d116      	bne.n	8013e0e <vTaskStartScheduler+0x8e>
	__asm volatile
 8013de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013de4:	f383 8811 	msr	BASEPRI, r3
 8013de8:	f3bf 8f6f 	isb	sy
 8013dec:	f3bf 8f4f 	dsb	sy
 8013df0:	613b      	str	r3, [r7, #16]
}
 8013df2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013df4:	4b12      	ldr	r3, [pc, #72]	; (8013e40 <vTaskStartScheduler+0xc0>)
 8013df6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013dfa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013dfc:	4b11      	ldr	r3, [pc, #68]	; (8013e44 <vTaskStartScheduler+0xc4>)
 8013dfe:	2201      	movs	r2, #1
 8013e00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013e02:	4b11      	ldr	r3, [pc, #68]	; (8013e48 <vTaskStartScheduler+0xc8>)
 8013e04:	2200      	movs	r2, #0
 8013e06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013e08:	f001 f992 	bl	8015130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013e0c:	e00e      	b.n	8013e2c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013e0e:	697b      	ldr	r3, [r7, #20]
 8013e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e14:	d10a      	bne.n	8013e2c <vTaskStartScheduler+0xac>
	__asm volatile
 8013e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e1a:	f383 8811 	msr	BASEPRI, r3
 8013e1e:	f3bf 8f6f 	isb	sy
 8013e22:	f3bf 8f4f 	dsb	sy
 8013e26:	60fb      	str	r3, [r7, #12]
}
 8013e28:	bf00      	nop
 8013e2a:	e7fe      	b.n	8013e2a <vTaskStartScheduler+0xaa>
}
 8013e2c:	bf00      	nop
 8013e2e:	3718      	adds	r7, #24
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}
 8013e34:	0801658c 	.word	0x0801658c
 8013e38:	080145a1 	.word	0x080145a1
 8013e3c:	24001830 	.word	0x24001830
 8013e40:	2400182c 	.word	0x2400182c
 8013e44:	24001818 	.word	0x24001818
 8013e48:	24001810 	.word	0x24001810

08013e4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013e4c:	b480      	push	{r7}
 8013e4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013e50:	4b04      	ldr	r3, [pc, #16]	; (8013e64 <vTaskSuspendAll+0x18>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	3301      	adds	r3, #1
 8013e56:	4a03      	ldr	r2, [pc, #12]	; (8013e64 <vTaskSuspendAll+0x18>)
 8013e58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013e5a:	bf00      	nop
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e62:	4770      	bx	lr
 8013e64:	24001834 	.word	0x24001834

08013e68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b084      	sub	sp, #16
 8013e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013e6e:	2300      	movs	r3, #0
 8013e70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013e72:	2300      	movs	r3, #0
 8013e74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013e76:	4b42      	ldr	r3, [pc, #264]	; (8013f80 <xTaskResumeAll+0x118>)
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d10a      	bne.n	8013e94 <xTaskResumeAll+0x2c>
	__asm volatile
 8013e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e82:	f383 8811 	msr	BASEPRI, r3
 8013e86:	f3bf 8f6f 	isb	sy
 8013e8a:	f3bf 8f4f 	dsb	sy
 8013e8e:	603b      	str	r3, [r7, #0]
}
 8013e90:	bf00      	nop
 8013e92:	e7fe      	b.n	8013e92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013e94:	f001 f9ee 	bl	8015274 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013e98:	4b39      	ldr	r3, [pc, #228]	; (8013f80 <xTaskResumeAll+0x118>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	3b01      	subs	r3, #1
 8013e9e:	4a38      	ldr	r2, [pc, #224]	; (8013f80 <xTaskResumeAll+0x118>)
 8013ea0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ea2:	4b37      	ldr	r3, [pc, #220]	; (8013f80 <xTaskResumeAll+0x118>)
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d162      	bne.n	8013f70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013eaa:	4b36      	ldr	r3, [pc, #216]	; (8013f84 <xTaskResumeAll+0x11c>)
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d05e      	beq.n	8013f70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013eb2:	e02f      	b.n	8013f14 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013eb4:	4b34      	ldr	r3, [pc, #208]	; (8013f88 <xTaskResumeAll+0x120>)
 8013eb6:	68db      	ldr	r3, [r3, #12]
 8013eb8:	68db      	ldr	r3, [r3, #12]
 8013eba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	3318      	adds	r3, #24
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f7fe ff57 	bl	8012d74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	3304      	adds	r3, #4
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f7fe ff52 	bl	8012d74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ed4:	4b2d      	ldr	r3, [pc, #180]	; (8013f8c <xTaskResumeAll+0x124>)
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	429a      	cmp	r2, r3
 8013eda:	d903      	bls.n	8013ee4 <xTaskResumeAll+0x7c>
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ee0:	4a2a      	ldr	r2, [pc, #168]	; (8013f8c <xTaskResumeAll+0x124>)
 8013ee2:	6013      	str	r3, [r2, #0]
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ee8:	4613      	mov	r3, r2
 8013eea:	009b      	lsls	r3, r3, #2
 8013eec:	4413      	add	r3, r2
 8013eee:	009b      	lsls	r3, r3, #2
 8013ef0:	4a27      	ldr	r2, [pc, #156]	; (8013f90 <xTaskResumeAll+0x128>)
 8013ef2:	441a      	add	r2, r3
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	3304      	adds	r3, #4
 8013ef8:	4619      	mov	r1, r3
 8013efa:	4610      	mov	r0, r2
 8013efc:	f7fe fedd 	bl	8012cba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f04:	4b23      	ldr	r3, [pc, #140]	; (8013f94 <xTaskResumeAll+0x12c>)
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	d302      	bcc.n	8013f14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013f0e:	4b22      	ldr	r3, [pc, #136]	; (8013f98 <xTaskResumeAll+0x130>)
 8013f10:	2201      	movs	r2, #1
 8013f12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f14:	4b1c      	ldr	r3, [pc, #112]	; (8013f88 <xTaskResumeAll+0x120>)
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d1cb      	bne.n	8013eb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d001      	beq.n	8013f26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013f22:	f000 fbf3 	bl	801470c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013f26:	4b1d      	ldr	r3, [pc, #116]	; (8013f9c <xTaskResumeAll+0x134>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d010      	beq.n	8013f54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013f32:	f000 f847 	bl	8013fc4 <xTaskIncrementTick>
 8013f36:	4603      	mov	r3, r0
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d002      	beq.n	8013f42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013f3c:	4b16      	ldr	r3, [pc, #88]	; (8013f98 <xTaskResumeAll+0x130>)
 8013f3e:	2201      	movs	r2, #1
 8013f40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	3b01      	subs	r3, #1
 8013f46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d1f1      	bne.n	8013f32 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013f4e:	4b13      	ldr	r3, [pc, #76]	; (8013f9c <xTaskResumeAll+0x134>)
 8013f50:	2200      	movs	r2, #0
 8013f52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013f54:	4b10      	ldr	r3, [pc, #64]	; (8013f98 <xTaskResumeAll+0x130>)
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d009      	beq.n	8013f70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013f60:	4b0f      	ldr	r3, [pc, #60]	; (8013fa0 <xTaskResumeAll+0x138>)
 8013f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f66:	601a      	str	r2, [r3, #0]
 8013f68:	f3bf 8f4f 	dsb	sy
 8013f6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013f70:	f001 f9b0 	bl	80152d4 <vPortExitCritical>

	return xAlreadyYielded;
 8013f74:	68bb      	ldr	r3, [r7, #8]
}
 8013f76:	4618      	mov	r0, r3
 8013f78:	3710      	adds	r7, #16
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd80      	pop	{r7, pc}
 8013f7e:	bf00      	nop
 8013f80:	24001834 	.word	0x24001834
 8013f84:	2400180c 	.word	0x2400180c
 8013f88:	240017cc 	.word	0x240017cc
 8013f8c:	24001814 	.word	0x24001814
 8013f90:	2400133c 	.word	0x2400133c
 8013f94:	24001338 	.word	0x24001338
 8013f98:	24001820 	.word	0x24001820
 8013f9c:	2400181c 	.word	0x2400181c
 8013fa0:	e000ed04 	.word	0xe000ed04

08013fa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013fa4:	b480      	push	{r7}
 8013fa6:	b083      	sub	sp, #12
 8013fa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013faa:	4b05      	ldr	r3, [pc, #20]	; (8013fc0 <xTaskGetTickCount+0x1c>)
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013fb0:	687b      	ldr	r3, [r7, #4]
}
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	370c      	adds	r7, #12
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fbc:	4770      	bx	lr
 8013fbe:	bf00      	nop
 8013fc0:	24001810 	.word	0x24001810

08013fc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b086      	sub	sp, #24
 8013fc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013fca:	2300      	movs	r3, #0
 8013fcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013fce:	4b4f      	ldr	r3, [pc, #316]	; (801410c <xTaskIncrementTick+0x148>)
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	f040 808f 	bne.w	80140f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013fd8:	4b4d      	ldr	r3, [pc, #308]	; (8014110 <xTaskIncrementTick+0x14c>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	3301      	adds	r3, #1
 8013fde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013fe0:	4a4b      	ldr	r2, [pc, #300]	; (8014110 <xTaskIncrementTick+0x14c>)
 8013fe2:	693b      	ldr	r3, [r7, #16]
 8013fe4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013fe6:	693b      	ldr	r3, [r7, #16]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d120      	bne.n	801402e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013fec:	4b49      	ldr	r3, [pc, #292]	; (8014114 <xTaskIncrementTick+0x150>)
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d00a      	beq.n	801400c <xTaskIncrementTick+0x48>
	__asm volatile
 8013ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ffa:	f383 8811 	msr	BASEPRI, r3
 8013ffe:	f3bf 8f6f 	isb	sy
 8014002:	f3bf 8f4f 	dsb	sy
 8014006:	603b      	str	r3, [r7, #0]
}
 8014008:	bf00      	nop
 801400a:	e7fe      	b.n	801400a <xTaskIncrementTick+0x46>
 801400c:	4b41      	ldr	r3, [pc, #260]	; (8014114 <xTaskIncrementTick+0x150>)
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	60fb      	str	r3, [r7, #12]
 8014012:	4b41      	ldr	r3, [pc, #260]	; (8014118 <xTaskIncrementTick+0x154>)
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	4a3f      	ldr	r2, [pc, #252]	; (8014114 <xTaskIncrementTick+0x150>)
 8014018:	6013      	str	r3, [r2, #0]
 801401a:	4a3f      	ldr	r2, [pc, #252]	; (8014118 <xTaskIncrementTick+0x154>)
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	6013      	str	r3, [r2, #0]
 8014020:	4b3e      	ldr	r3, [pc, #248]	; (801411c <xTaskIncrementTick+0x158>)
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	3301      	adds	r3, #1
 8014026:	4a3d      	ldr	r2, [pc, #244]	; (801411c <xTaskIncrementTick+0x158>)
 8014028:	6013      	str	r3, [r2, #0]
 801402a:	f000 fb6f 	bl	801470c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801402e:	4b3c      	ldr	r3, [pc, #240]	; (8014120 <xTaskIncrementTick+0x15c>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	693a      	ldr	r2, [r7, #16]
 8014034:	429a      	cmp	r2, r3
 8014036:	d349      	bcc.n	80140cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014038:	4b36      	ldr	r3, [pc, #216]	; (8014114 <xTaskIncrementTick+0x150>)
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d104      	bne.n	801404c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014042:	4b37      	ldr	r3, [pc, #220]	; (8014120 <xTaskIncrementTick+0x15c>)
 8014044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014048:	601a      	str	r2, [r3, #0]
					break;
 801404a:	e03f      	b.n	80140cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801404c:	4b31      	ldr	r3, [pc, #196]	; (8014114 <xTaskIncrementTick+0x150>)
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	68db      	ldr	r3, [r3, #12]
 8014052:	68db      	ldr	r3, [r3, #12]
 8014054:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	685b      	ldr	r3, [r3, #4]
 801405a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801405c:	693a      	ldr	r2, [r7, #16]
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	429a      	cmp	r2, r3
 8014062:	d203      	bcs.n	801406c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014064:	4a2e      	ldr	r2, [pc, #184]	; (8014120 <xTaskIncrementTick+0x15c>)
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801406a:	e02f      	b.n	80140cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801406c:	68bb      	ldr	r3, [r7, #8]
 801406e:	3304      	adds	r3, #4
 8014070:	4618      	mov	r0, r3
 8014072:	f7fe fe7f 	bl	8012d74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014076:	68bb      	ldr	r3, [r7, #8]
 8014078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801407a:	2b00      	cmp	r3, #0
 801407c:	d004      	beq.n	8014088 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801407e:	68bb      	ldr	r3, [r7, #8]
 8014080:	3318      	adds	r3, #24
 8014082:	4618      	mov	r0, r3
 8014084:	f7fe fe76 	bl	8012d74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801408c:	4b25      	ldr	r3, [pc, #148]	; (8014124 <xTaskIncrementTick+0x160>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	429a      	cmp	r2, r3
 8014092:	d903      	bls.n	801409c <xTaskIncrementTick+0xd8>
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014098:	4a22      	ldr	r2, [pc, #136]	; (8014124 <xTaskIncrementTick+0x160>)
 801409a:	6013      	str	r3, [r2, #0]
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140a0:	4613      	mov	r3, r2
 80140a2:	009b      	lsls	r3, r3, #2
 80140a4:	4413      	add	r3, r2
 80140a6:	009b      	lsls	r3, r3, #2
 80140a8:	4a1f      	ldr	r2, [pc, #124]	; (8014128 <xTaskIncrementTick+0x164>)
 80140aa:	441a      	add	r2, r3
 80140ac:	68bb      	ldr	r3, [r7, #8]
 80140ae:	3304      	adds	r3, #4
 80140b0:	4619      	mov	r1, r3
 80140b2:	4610      	mov	r0, r2
 80140b4:	f7fe fe01 	bl	8012cba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140bc:	4b1b      	ldr	r3, [pc, #108]	; (801412c <xTaskIncrementTick+0x168>)
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140c2:	429a      	cmp	r2, r3
 80140c4:	d3b8      	bcc.n	8014038 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80140c6:	2301      	movs	r3, #1
 80140c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80140ca:	e7b5      	b.n	8014038 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80140cc:	4b17      	ldr	r3, [pc, #92]	; (801412c <xTaskIncrementTick+0x168>)
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140d2:	4915      	ldr	r1, [pc, #84]	; (8014128 <xTaskIncrementTick+0x164>)
 80140d4:	4613      	mov	r3, r2
 80140d6:	009b      	lsls	r3, r3, #2
 80140d8:	4413      	add	r3, r2
 80140da:	009b      	lsls	r3, r3, #2
 80140dc:	440b      	add	r3, r1
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	2b01      	cmp	r3, #1
 80140e2:	d901      	bls.n	80140e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80140e4:	2301      	movs	r3, #1
 80140e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80140e8:	4b11      	ldr	r3, [pc, #68]	; (8014130 <xTaskIncrementTick+0x16c>)
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d007      	beq.n	8014100 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80140f0:	2301      	movs	r3, #1
 80140f2:	617b      	str	r3, [r7, #20]
 80140f4:	e004      	b.n	8014100 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80140f6:	4b0f      	ldr	r3, [pc, #60]	; (8014134 <xTaskIncrementTick+0x170>)
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	3301      	adds	r3, #1
 80140fc:	4a0d      	ldr	r2, [pc, #52]	; (8014134 <xTaskIncrementTick+0x170>)
 80140fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014100:	697b      	ldr	r3, [r7, #20]
}
 8014102:	4618      	mov	r0, r3
 8014104:	3718      	adds	r7, #24
 8014106:	46bd      	mov	sp, r7
 8014108:	bd80      	pop	{r7, pc}
 801410a:	bf00      	nop
 801410c:	24001834 	.word	0x24001834
 8014110:	24001810 	.word	0x24001810
 8014114:	240017c4 	.word	0x240017c4
 8014118:	240017c8 	.word	0x240017c8
 801411c:	24001824 	.word	0x24001824
 8014120:	2400182c 	.word	0x2400182c
 8014124:	24001814 	.word	0x24001814
 8014128:	2400133c 	.word	0x2400133c
 801412c:	24001338 	.word	0x24001338
 8014130:	24001820 	.word	0x24001820
 8014134:	2400181c 	.word	0x2400181c

08014138 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014138:	b480      	push	{r7}
 801413a:	b085      	sub	sp, #20
 801413c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801413e:	4b28      	ldr	r3, [pc, #160]	; (80141e0 <vTaskSwitchContext+0xa8>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d003      	beq.n	801414e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014146:	4b27      	ldr	r3, [pc, #156]	; (80141e4 <vTaskSwitchContext+0xac>)
 8014148:	2201      	movs	r2, #1
 801414a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801414c:	e041      	b.n	80141d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801414e:	4b25      	ldr	r3, [pc, #148]	; (80141e4 <vTaskSwitchContext+0xac>)
 8014150:	2200      	movs	r2, #0
 8014152:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014154:	4b24      	ldr	r3, [pc, #144]	; (80141e8 <vTaskSwitchContext+0xb0>)
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	60fb      	str	r3, [r7, #12]
 801415a:	e010      	b.n	801417e <vTaskSwitchContext+0x46>
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d10a      	bne.n	8014178 <vTaskSwitchContext+0x40>
	__asm volatile
 8014162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014166:	f383 8811 	msr	BASEPRI, r3
 801416a:	f3bf 8f6f 	isb	sy
 801416e:	f3bf 8f4f 	dsb	sy
 8014172:	607b      	str	r3, [r7, #4]
}
 8014174:	bf00      	nop
 8014176:	e7fe      	b.n	8014176 <vTaskSwitchContext+0x3e>
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	3b01      	subs	r3, #1
 801417c:	60fb      	str	r3, [r7, #12]
 801417e:	491b      	ldr	r1, [pc, #108]	; (80141ec <vTaskSwitchContext+0xb4>)
 8014180:	68fa      	ldr	r2, [r7, #12]
 8014182:	4613      	mov	r3, r2
 8014184:	009b      	lsls	r3, r3, #2
 8014186:	4413      	add	r3, r2
 8014188:	009b      	lsls	r3, r3, #2
 801418a:	440b      	add	r3, r1
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d0e4      	beq.n	801415c <vTaskSwitchContext+0x24>
 8014192:	68fa      	ldr	r2, [r7, #12]
 8014194:	4613      	mov	r3, r2
 8014196:	009b      	lsls	r3, r3, #2
 8014198:	4413      	add	r3, r2
 801419a:	009b      	lsls	r3, r3, #2
 801419c:	4a13      	ldr	r2, [pc, #76]	; (80141ec <vTaskSwitchContext+0xb4>)
 801419e:	4413      	add	r3, r2
 80141a0:	60bb      	str	r3, [r7, #8]
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	685b      	ldr	r3, [r3, #4]
 80141a6:	685a      	ldr	r2, [r3, #4]
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	605a      	str	r2, [r3, #4]
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	685a      	ldr	r2, [r3, #4]
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	3308      	adds	r3, #8
 80141b4:	429a      	cmp	r2, r3
 80141b6:	d104      	bne.n	80141c2 <vTaskSwitchContext+0x8a>
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	685b      	ldr	r3, [r3, #4]
 80141bc:	685a      	ldr	r2, [r3, #4]
 80141be:	68bb      	ldr	r3, [r7, #8]
 80141c0:	605a      	str	r2, [r3, #4]
 80141c2:	68bb      	ldr	r3, [r7, #8]
 80141c4:	685b      	ldr	r3, [r3, #4]
 80141c6:	68db      	ldr	r3, [r3, #12]
 80141c8:	4a09      	ldr	r2, [pc, #36]	; (80141f0 <vTaskSwitchContext+0xb8>)
 80141ca:	6013      	str	r3, [r2, #0]
 80141cc:	4a06      	ldr	r2, [pc, #24]	; (80141e8 <vTaskSwitchContext+0xb0>)
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	6013      	str	r3, [r2, #0]
}
 80141d2:	bf00      	nop
 80141d4:	3714      	adds	r7, #20
 80141d6:	46bd      	mov	sp, r7
 80141d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141dc:	4770      	bx	lr
 80141de:	bf00      	nop
 80141e0:	24001834 	.word	0x24001834
 80141e4:	24001820 	.word	0x24001820
 80141e8:	24001814 	.word	0x24001814
 80141ec:	2400133c 	.word	0x2400133c
 80141f0:	24001338 	.word	0x24001338

080141f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b084      	sub	sp, #16
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
 80141fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d10a      	bne.n	801421a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014208:	f383 8811 	msr	BASEPRI, r3
 801420c:	f3bf 8f6f 	isb	sy
 8014210:	f3bf 8f4f 	dsb	sy
 8014214:	60fb      	str	r3, [r7, #12]
}
 8014216:	bf00      	nop
 8014218:	e7fe      	b.n	8014218 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801421a:	4b07      	ldr	r3, [pc, #28]	; (8014238 <vTaskPlaceOnEventList+0x44>)
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	3318      	adds	r3, #24
 8014220:	4619      	mov	r1, r3
 8014222:	6878      	ldr	r0, [r7, #4]
 8014224:	f7fe fd6d 	bl	8012d02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014228:	2101      	movs	r1, #1
 801422a:	6838      	ldr	r0, [r7, #0]
 801422c:	f000 fb32 	bl	8014894 <prvAddCurrentTaskToDelayedList>
}
 8014230:	bf00      	nop
 8014232:	3710      	adds	r7, #16
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}
 8014238:	24001338 	.word	0x24001338

0801423c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b086      	sub	sp, #24
 8014240:	af00      	add	r7, sp, #0
 8014242:	60f8      	str	r0, [r7, #12]
 8014244:	60b9      	str	r1, [r7, #8]
 8014246:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d10a      	bne.n	8014264 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014252:	f383 8811 	msr	BASEPRI, r3
 8014256:	f3bf 8f6f 	isb	sy
 801425a:	f3bf 8f4f 	dsb	sy
 801425e:	617b      	str	r3, [r7, #20]
}
 8014260:	bf00      	nop
 8014262:	e7fe      	b.n	8014262 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014264:	4b11      	ldr	r3, [pc, #68]	; (80142ac <vTaskPlaceOnUnorderedEventList+0x70>)
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d10a      	bne.n	8014282 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014270:	f383 8811 	msr	BASEPRI, r3
 8014274:	f3bf 8f6f 	isb	sy
 8014278:	f3bf 8f4f 	dsb	sy
 801427c:	613b      	str	r3, [r7, #16]
}
 801427e:	bf00      	nop
 8014280:	e7fe      	b.n	8014280 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014282:	4b0b      	ldr	r3, [pc, #44]	; (80142b0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	68ba      	ldr	r2, [r7, #8]
 8014288:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801428c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801428e:	4b08      	ldr	r3, [pc, #32]	; (80142b0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	3318      	adds	r3, #24
 8014294:	4619      	mov	r1, r3
 8014296:	68f8      	ldr	r0, [r7, #12]
 8014298:	f7fe fd0f 	bl	8012cba <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801429c:	2101      	movs	r1, #1
 801429e:	6878      	ldr	r0, [r7, #4]
 80142a0:	f000 faf8 	bl	8014894 <prvAddCurrentTaskToDelayedList>
}
 80142a4:	bf00      	nop
 80142a6:	3718      	adds	r7, #24
 80142a8:	46bd      	mov	sp, r7
 80142aa:	bd80      	pop	{r7, pc}
 80142ac:	24001834 	.word	0x24001834
 80142b0:	24001338 	.word	0x24001338

080142b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b086      	sub	sp, #24
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	60f8      	str	r0, [r7, #12]
 80142bc:	60b9      	str	r1, [r7, #8]
 80142be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d10a      	bne.n	80142dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80142c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142ca:	f383 8811 	msr	BASEPRI, r3
 80142ce:	f3bf 8f6f 	isb	sy
 80142d2:	f3bf 8f4f 	dsb	sy
 80142d6:	617b      	str	r3, [r7, #20]
}
 80142d8:	bf00      	nop
 80142da:	e7fe      	b.n	80142da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80142dc:	4b0a      	ldr	r3, [pc, #40]	; (8014308 <vTaskPlaceOnEventListRestricted+0x54>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	3318      	adds	r3, #24
 80142e2:	4619      	mov	r1, r3
 80142e4:	68f8      	ldr	r0, [r7, #12]
 80142e6:	f7fe fce8 	bl	8012cba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d002      	beq.n	80142f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80142f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80142f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80142f6:	6879      	ldr	r1, [r7, #4]
 80142f8:	68b8      	ldr	r0, [r7, #8]
 80142fa:	f000 facb 	bl	8014894 <prvAddCurrentTaskToDelayedList>
	}
 80142fe:	bf00      	nop
 8014300:	3718      	adds	r7, #24
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}
 8014306:	bf00      	nop
 8014308:	24001338 	.word	0x24001338

0801430c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b086      	sub	sp, #24
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	68db      	ldr	r3, [r3, #12]
 8014318:	68db      	ldr	r3, [r3, #12]
 801431a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801431c:	693b      	ldr	r3, [r7, #16]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d10a      	bne.n	8014338 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014326:	f383 8811 	msr	BASEPRI, r3
 801432a:	f3bf 8f6f 	isb	sy
 801432e:	f3bf 8f4f 	dsb	sy
 8014332:	60fb      	str	r3, [r7, #12]
}
 8014334:	bf00      	nop
 8014336:	e7fe      	b.n	8014336 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014338:	693b      	ldr	r3, [r7, #16]
 801433a:	3318      	adds	r3, #24
 801433c:	4618      	mov	r0, r3
 801433e:	f7fe fd19 	bl	8012d74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014342:	4b1e      	ldr	r3, [pc, #120]	; (80143bc <xTaskRemoveFromEventList+0xb0>)
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d11d      	bne.n	8014386 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801434a:	693b      	ldr	r3, [r7, #16]
 801434c:	3304      	adds	r3, #4
 801434e:	4618      	mov	r0, r3
 8014350:	f7fe fd10 	bl	8012d74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014358:	4b19      	ldr	r3, [pc, #100]	; (80143c0 <xTaskRemoveFromEventList+0xb4>)
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	429a      	cmp	r2, r3
 801435e:	d903      	bls.n	8014368 <xTaskRemoveFromEventList+0x5c>
 8014360:	693b      	ldr	r3, [r7, #16]
 8014362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014364:	4a16      	ldr	r2, [pc, #88]	; (80143c0 <xTaskRemoveFromEventList+0xb4>)
 8014366:	6013      	str	r3, [r2, #0]
 8014368:	693b      	ldr	r3, [r7, #16]
 801436a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801436c:	4613      	mov	r3, r2
 801436e:	009b      	lsls	r3, r3, #2
 8014370:	4413      	add	r3, r2
 8014372:	009b      	lsls	r3, r3, #2
 8014374:	4a13      	ldr	r2, [pc, #76]	; (80143c4 <xTaskRemoveFromEventList+0xb8>)
 8014376:	441a      	add	r2, r3
 8014378:	693b      	ldr	r3, [r7, #16]
 801437a:	3304      	adds	r3, #4
 801437c:	4619      	mov	r1, r3
 801437e:	4610      	mov	r0, r2
 8014380:	f7fe fc9b 	bl	8012cba <vListInsertEnd>
 8014384:	e005      	b.n	8014392 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	3318      	adds	r3, #24
 801438a:	4619      	mov	r1, r3
 801438c:	480e      	ldr	r0, [pc, #56]	; (80143c8 <xTaskRemoveFromEventList+0xbc>)
 801438e:	f7fe fc94 	bl	8012cba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014392:	693b      	ldr	r3, [r7, #16]
 8014394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014396:	4b0d      	ldr	r3, [pc, #52]	; (80143cc <xTaskRemoveFromEventList+0xc0>)
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801439c:	429a      	cmp	r2, r3
 801439e:	d905      	bls.n	80143ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80143a0:	2301      	movs	r3, #1
 80143a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80143a4:	4b0a      	ldr	r3, [pc, #40]	; (80143d0 <xTaskRemoveFromEventList+0xc4>)
 80143a6:	2201      	movs	r2, #1
 80143a8:	601a      	str	r2, [r3, #0]
 80143aa:	e001      	b.n	80143b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80143ac:	2300      	movs	r3, #0
 80143ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80143b0:	697b      	ldr	r3, [r7, #20]
}
 80143b2:	4618      	mov	r0, r3
 80143b4:	3718      	adds	r7, #24
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bd80      	pop	{r7, pc}
 80143ba:	bf00      	nop
 80143bc:	24001834 	.word	0x24001834
 80143c0:	24001814 	.word	0x24001814
 80143c4:	2400133c 	.word	0x2400133c
 80143c8:	240017cc 	.word	0x240017cc
 80143cc:	24001338 	.word	0x24001338
 80143d0:	24001820 	.word	0x24001820

080143d4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b086      	sub	sp, #24
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80143de:	4b29      	ldr	r3, [pc, #164]	; (8014484 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d10a      	bne.n	80143fc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80143e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ea:	f383 8811 	msr	BASEPRI, r3
 80143ee:	f3bf 8f6f 	isb	sy
 80143f2:	f3bf 8f4f 	dsb	sy
 80143f6:	613b      	str	r3, [r7, #16]
}
 80143f8:	bf00      	nop
 80143fa:	e7fe      	b.n	80143fa <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	68db      	ldr	r3, [r3, #12]
 801440a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801440c:	697b      	ldr	r3, [r7, #20]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d10a      	bne.n	8014428 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014416:	f383 8811 	msr	BASEPRI, r3
 801441a:	f3bf 8f6f 	isb	sy
 801441e:	f3bf 8f4f 	dsb	sy
 8014422:	60fb      	str	r3, [r7, #12]
}
 8014424:	bf00      	nop
 8014426:	e7fe      	b.n	8014426 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014428:	6878      	ldr	r0, [r7, #4]
 801442a:	f7fe fca3 	bl	8012d74 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801442e:	697b      	ldr	r3, [r7, #20]
 8014430:	3304      	adds	r3, #4
 8014432:	4618      	mov	r0, r3
 8014434:	f7fe fc9e 	bl	8012d74 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014438:	697b      	ldr	r3, [r7, #20]
 801443a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801443c:	4b12      	ldr	r3, [pc, #72]	; (8014488 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	429a      	cmp	r2, r3
 8014442:	d903      	bls.n	801444c <vTaskRemoveFromUnorderedEventList+0x78>
 8014444:	697b      	ldr	r3, [r7, #20]
 8014446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014448:	4a0f      	ldr	r2, [pc, #60]	; (8014488 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801444a:	6013      	str	r3, [r2, #0]
 801444c:	697b      	ldr	r3, [r7, #20]
 801444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014450:	4613      	mov	r3, r2
 8014452:	009b      	lsls	r3, r3, #2
 8014454:	4413      	add	r3, r2
 8014456:	009b      	lsls	r3, r3, #2
 8014458:	4a0c      	ldr	r2, [pc, #48]	; (801448c <vTaskRemoveFromUnorderedEventList+0xb8>)
 801445a:	441a      	add	r2, r3
 801445c:	697b      	ldr	r3, [r7, #20]
 801445e:	3304      	adds	r3, #4
 8014460:	4619      	mov	r1, r3
 8014462:	4610      	mov	r0, r2
 8014464:	f7fe fc29 	bl	8012cba <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014468:	697b      	ldr	r3, [r7, #20]
 801446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801446c:	4b08      	ldr	r3, [pc, #32]	; (8014490 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014472:	429a      	cmp	r2, r3
 8014474:	d902      	bls.n	801447c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014476:	4b07      	ldr	r3, [pc, #28]	; (8014494 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014478:	2201      	movs	r2, #1
 801447a:	601a      	str	r2, [r3, #0]
	}
}
 801447c:	bf00      	nop
 801447e:	3718      	adds	r7, #24
 8014480:	46bd      	mov	sp, r7
 8014482:	bd80      	pop	{r7, pc}
 8014484:	24001834 	.word	0x24001834
 8014488:	24001814 	.word	0x24001814
 801448c:	2400133c 	.word	0x2400133c
 8014490:	24001338 	.word	0x24001338
 8014494:	24001820 	.word	0x24001820

08014498 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014498:	b480      	push	{r7}
 801449a:	b083      	sub	sp, #12
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80144a0:	4b06      	ldr	r3, [pc, #24]	; (80144bc <vTaskInternalSetTimeOutState+0x24>)
 80144a2:	681a      	ldr	r2, [r3, #0]
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80144a8:	4b05      	ldr	r3, [pc, #20]	; (80144c0 <vTaskInternalSetTimeOutState+0x28>)
 80144aa:	681a      	ldr	r2, [r3, #0]
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	605a      	str	r2, [r3, #4]
}
 80144b0:	bf00      	nop
 80144b2:	370c      	adds	r7, #12
 80144b4:	46bd      	mov	sp, r7
 80144b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ba:	4770      	bx	lr
 80144bc:	24001824 	.word	0x24001824
 80144c0:	24001810 	.word	0x24001810

080144c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b088      	sub	sp, #32
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
 80144cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d10a      	bne.n	80144ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80144d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144d8:	f383 8811 	msr	BASEPRI, r3
 80144dc:	f3bf 8f6f 	isb	sy
 80144e0:	f3bf 8f4f 	dsb	sy
 80144e4:	613b      	str	r3, [r7, #16]
}
 80144e6:	bf00      	nop
 80144e8:	e7fe      	b.n	80144e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80144ea:	683b      	ldr	r3, [r7, #0]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d10a      	bne.n	8014506 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80144f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144f4:	f383 8811 	msr	BASEPRI, r3
 80144f8:	f3bf 8f6f 	isb	sy
 80144fc:	f3bf 8f4f 	dsb	sy
 8014500:	60fb      	str	r3, [r7, #12]
}
 8014502:	bf00      	nop
 8014504:	e7fe      	b.n	8014504 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014506:	f000 feb5 	bl	8015274 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801450a:	4b1d      	ldr	r3, [pc, #116]	; (8014580 <xTaskCheckForTimeOut+0xbc>)
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	685b      	ldr	r3, [r3, #4]
 8014514:	69ba      	ldr	r2, [r7, #24]
 8014516:	1ad3      	subs	r3, r2, r3
 8014518:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801451a:	683b      	ldr	r3, [r7, #0]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014522:	d102      	bne.n	801452a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014524:	2300      	movs	r3, #0
 8014526:	61fb      	str	r3, [r7, #28]
 8014528:	e023      	b.n	8014572 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	681a      	ldr	r2, [r3, #0]
 801452e:	4b15      	ldr	r3, [pc, #84]	; (8014584 <xTaskCheckForTimeOut+0xc0>)
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	429a      	cmp	r2, r3
 8014534:	d007      	beq.n	8014546 <xTaskCheckForTimeOut+0x82>
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	685b      	ldr	r3, [r3, #4]
 801453a:	69ba      	ldr	r2, [r7, #24]
 801453c:	429a      	cmp	r2, r3
 801453e:	d302      	bcc.n	8014546 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014540:	2301      	movs	r3, #1
 8014542:	61fb      	str	r3, [r7, #28]
 8014544:	e015      	b.n	8014572 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014546:	683b      	ldr	r3, [r7, #0]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	697a      	ldr	r2, [r7, #20]
 801454c:	429a      	cmp	r2, r3
 801454e:	d20b      	bcs.n	8014568 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	681a      	ldr	r2, [r3, #0]
 8014554:	697b      	ldr	r3, [r7, #20]
 8014556:	1ad2      	subs	r2, r2, r3
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801455c:	6878      	ldr	r0, [r7, #4]
 801455e:	f7ff ff9b 	bl	8014498 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014562:	2300      	movs	r3, #0
 8014564:	61fb      	str	r3, [r7, #28]
 8014566:	e004      	b.n	8014572 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014568:	683b      	ldr	r3, [r7, #0]
 801456a:	2200      	movs	r2, #0
 801456c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801456e:	2301      	movs	r3, #1
 8014570:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014572:	f000 feaf 	bl	80152d4 <vPortExitCritical>

	return xReturn;
 8014576:	69fb      	ldr	r3, [r7, #28]
}
 8014578:	4618      	mov	r0, r3
 801457a:	3720      	adds	r7, #32
 801457c:	46bd      	mov	sp, r7
 801457e:	bd80      	pop	{r7, pc}
 8014580:	24001810 	.word	0x24001810
 8014584:	24001824 	.word	0x24001824

08014588 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014588:	b480      	push	{r7}
 801458a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801458c:	4b03      	ldr	r3, [pc, #12]	; (801459c <vTaskMissedYield+0x14>)
 801458e:	2201      	movs	r2, #1
 8014590:	601a      	str	r2, [r3, #0]
}
 8014592:	bf00      	nop
 8014594:	46bd      	mov	sp, r7
 8014596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459a:	4770      	bx	lr
 801459c:	24001820 	.word	0x24001820

080145a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b082      	sub	sp, #8
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80145a8:	f000 f852 	bl	8014650 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80145ac:	4b06      	ldr	r3, [pc, #24]	; (80145c8 <prvIdleTask+0x28>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	2b01      	cmp	r3, #1
 80145b2:	d9f9      	bls.n	80145a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80145b4:	4b05      	ldr	r3, [pc, #20]	; (80145cc <prvIdleTask+0x2c>)
 80145b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145ba:	601a      	str	r2, [r3, #0]
 80145bc:	f3bf 8f4f 	dsb	sy
 80145c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80145c4:	e7f0      	b.n	80145a8 <prvIdleTask+0x8>
 80145c6:	bf00      	nop
 80145c8:	2400133c 	.word	0x2400133c
 80145cc:	e000ed04 	.word	0xe000ed04

080145d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b082      	sub	sp, #8
 80145d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80145d6:	2300      	movs	r3, #0
 80145d8:	607b      	str	r3, [r7, #4]
 80145da:	e00c      	b.n	80145f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80145dc:	687a      	ldr	r2, [r7, #4]
 80145de:	4613      	mov	r3, r2
 80145e0:	009b      	lsls	r3, r3, #2
 80145e2:	4413      	add	r3, r2
 80145e4:	009b      	lsls	r3, r3, #2
 80145e6:	4a12      	ldr	r2, [pc, #72]	; (8014630 <prvInitialiseTaskLists+0x60>)
 80145e8:	4413      	add	r3, r2
 80145ea:	4618      	mov	r0, r3
 80145ec:	f7fe fb38 	bl	8012c60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	3301      	adds	r3, #1
 80145f4:	607b      	str	r3, [r7, #4]
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2b37      	cmp	r3, #55	; 0x37
 80145fa:	d9ef      	bls.n	80145dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80145fc:	480d      	ldr	r0, [pc, #52]	; (8014634 <prvInitialiseTaskLists+0x64>)
 80145fe:	f7fe fb2f 	bl	8012c60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014602:	480d      	ldr	r0, [pc, #52]	; (8014638 <prvInitialiseTaskLists+0x68>)
 8014604:	f7fe fb2c 	bl	8012c60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014608:	480c      	ldr	r0, [pc, #48]	; (801463c <prvInitialiseTaskLists+0x6c>)
 801460a:	f7fe fb29 	bl	8012c60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801460e:	480c      	ldr	r0, [pc, #48]	; (8014640 <prvInitialiseTaskLists+0x70>)
 8014610:	f7fe fb26 	bl	8012c60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014614:	480b      	ldr	r0, [pc, #44]	; (8014644 <prvInitialiseTaskLists+0x74>)
 8014616:	f7fe fb23 	bl	8012c60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801461a:	4b0b      	ldr	r3, [pc, #44]	; (8014648 <prvInitialiseTaskLists+0x78>)
 801461c:	4a05      	ldr	r2, [pc, #20]	; (8014634 <prvInitialiseTaskLists+0x64>)
 801461e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014620:	4b0a      	ldr	r3, [pc, #40]	; (801464c <prvInitialiseTaskLists+0x7c>)
 8014622:	4a05      	ldr	r2, [pc, #20]	; (8014638 <prvInitialiseTaskLists+0x68>)
 8014624:	601a      	str	r2, [r3, #0]
}
 8014626:	bf00      	nop
 8014628:	3708      	adds	r7, #8
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}
 801462e:	bf00      	nop
 8014630:	2400133c 	.word	0x2400133c
 8014634:	2400179c 	.word	0x2400179c
 8014638:	240017b0 	.word	0x240017b0
 801463c:	240017cc 	.word	0x240017cc
 8014640:	240017e0 	.word	0x240017e0
 8014644:	240017f8 	.word	0x240017f8
 8014648:	240017c4 	.word	0x240017c4
 801464c:	240017c8 	.word	0x240017c8

08014650 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b082      	sub	sp, #8
 8014654:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014656:	e019      	b.n	801468c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014658:	f000 fe0c 	bl	8015274 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801465c:	4b10      	ldr	r3, [pc, #64]	; (80146a0 <prvCheckTasksWaitingTermination+0x50>)
 801465e:	68db      	ldr	r3, [r3, #12]
 8014660:	68db      	ldr	r3, [r3, #12]
 8014662:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	3304      	adds	r3, #4
 8014668:	4618      	mov	r0, r3
 801466a:	f7fe fb83 	bl	8012d74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801466e:	4b0d      	ldr	r3, [pc, #52]	; (80146a4 <prvCheckTasksWaitingTermination+0x54>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	3b01      	subs	r3, #1
 8014674:	4a0b      	ldr	r2, [pc, #44]	; (80146a4 <prvCheckTasksWaitingTermination+0x54>)
 8014676:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014678:	4b0b      	ldr	r3, [pc, #44]	; (80146a8 <prvCheckTasksWaitingTermination+0x58>)
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	3b01      	subs	r3, #1
 801467e:	4a0a      	ldr	r2, [pc, #40]	; (80146a8 <prvCheckTasksWaitingTermination+0x58>)
 8014680:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014682:	f000 fe27 	bl	80152d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014686:	6878      	ldr	r0, [r7, #4]
 8014688:	f000 f810 	bl	80146ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801468c:	4b06      	ldr	r3, [pc, #24]	; (80146a8 <prvCheckTasksWaitingTermination+0x58>)
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d1e1      	bne.n	8014658 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014694:	bf00      	nop
 8014696:	bf00      	nop
 8014698:	3708      	adds	r7, #8
 801469a:	46bd      	mov	sp, r7
 801469c:	bd80      	pop	{r7, pc}
 801469e:	bf00      	nop
 80146a0:	240017e0 	.word	0x240017e0
 80146a4:	2400180c 	.word	0x2400180c
 80146a8:	240017f4 	.word	0x240017f4

080146ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b084      	sub	sp, #16
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d108      	bne.n	80146d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146c2:	4618      	mov	r0, r3
 80146c4:	f000 ffc4 	bl	8015650 <vPortFree>
				vPortFree( pxTCB );
 80146c8:	6878      	ldr	r0, [r7, #4]
 80146ca:	f000 ffc1 	bl	8015650 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80146ce:	e018      	b.n	8014702 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80146d6:	2b01      	cmp	r3, #1
 80146d8:	d103      	bne.n	80146e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80146da:	6878      	ldr	r0, [r7, #4]
 80146dc:	f000 ffb8 	bl	8015650 <vPortFree>
	}
 80146e0:	e00f      	b.n	8014702 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80146e8:	2b02      	cmp	r3, #2
 80146ea:	d00a      	beq.n	8014702 <prvDeleteTCB+0x56>
	__asm volatile
 80146ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f0:	f383 8811 	msr	BASEPRI, r3
 80146f4:	f3bf 8f6f 	isb	sy
 80146f8:	f3bf 8f4f 	dsb	sy
 80146fc:	60fb      	str	r3, [r7, #12]
}
 80146fe:	bf00      	nop
 8014700:	e7fe      	b.n	8014700 <prvDeleteTCB+0x54>
	}
 8014702:	bf00      	nop
 8014704:	3710      	adds	r7, #16
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}
	...

0801470c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801470c:	b480      	push	{r7}
 801470e:	b083      	sub	sp, #12
 8014710:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014712:	4b0c      	ldr	r3, [pc, #48]	; (8014744 <prvResetNextTaskUnblockTime+0x38>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d104      	bne.n	8014726 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801471c:	4b0a      	ldr	r3, [pc, #40]	; (8014748 <prvResetNextTaskUnblockTime+0x3c>)
 801471e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014722:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014724:	e008      	b.n	8014738 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014726:	4b07      	ldr	r3, [pc, #28]	; (8014744 <prvResetNextTaskUnblockTime+0x38>)
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	68db      	ldr	r3, [r3, #12]
 801472c:	68db      	ldr	r3, [r3, #12]
 801472e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	685b      	ldr	r3, [r3, #4]
 8014734:	4a04      	ldr	r2, [pc, #16]	; (8014748 <prvResetNextTaskUnblockTime+0x3c>)
 8014736:	6013      	str	r3, [r2, #0]
}
 8014738:	bf00      	nop
 801473a:	370c      	adds	r7, #12
 801473c:	46bd      	mov	sp, r7
 801473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014742:	4770      	bx	lr
 8014744:	240017c4 	.word	0x240017c4
 8014748:	2400182c 	.word	0x2400182c

0801474c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801474c:	b480      	push	{r7}
 801474e:	b083      	sub	sp, #12
 8014750:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014752:	4b0b      	ldr	r3, [pc, #44]	; (8014780 <xTaskGetSchedulerState+0x34>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d102      	bne.n	8014760 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801475a:	2301      	movs	r3, #1
 801475c:	607b      	str	r3, [r7, #4]
 801475e:	e008      	b.n	8014772 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014760:	4b08      	ldr	r3, [pc, #32]	; (8014784 <xTaskGetSchedulerState+0x38>)
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d102      	bne.n	801476e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014768:	2302      	movs	r3, #2
 801476a:	607b      	str	r3, [r7, #4]
 801476c:	e001      	b.n	8014772 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801476e:	2300      	movs	r3, #0
 8014770:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014772:	687b      	ldr	r3, [r7, #4]
	}
 8014774:	4618      	mov	r0, r3
 8014776:	370c      	adds	r7, #12
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr
 8014780:	24001818 	.word	0x24001818
 8014784:	24001834 	.word	0x24001834

08014788 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014788:	b580      	push	{r7, lr}
 801478a:	b086      	sub	sp, #24
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014794:	2300      	movs	r3, #0
 8014796:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d056      	beq.n	801484c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801479e:	4b2e      	ldr	r3, [pc, #184]	; (8014858 <xTaskPriorityDisinherit+0xd0>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	693a      	ldr	r2, [r7, #16]
 80147a4:	429a      	cmp	r2, r3
 80147a6:	d00a      	beq.n	80147be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80147a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ac:	f383 8811 	msr	BASEPRI, r3
 80147b0:	f3bf 8f6f 	isb	sy
 80147b4:	f3bf 8f4f 	dsb	sy
 80147b8:	60fb      	str	r3, [r7, #12]
}
 80147ba:	bf00      	nop
 80147bc:	e7fe      	b.n	80147bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80147be:	693b      	ldr	r3, [r7, #16]
 80147c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d10a      	bne.n	80147dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80147c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ca:	f383 8811 	msr	BASEPRI, r3
 80147ce:	f3bf 8f6f 	isb	sy
 80147d2:	f3bf 8f4f 	dsb	sy
 80147d6:	60bb      	str	r3, [r7, #8]
}
 80147d8:	bf00      	nop
 80147da:	e7fe      	b.n	80147da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80147dc:	693b      	ldr	r3, [r7, #16]
 80147de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80147e0:	1e5a      	subs	r2, r3, #1
 80147e2:	693b      	ldr	r3, [r7, #16]
 80147e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80147e6:	693b      	ldr	r3, [r7, #16]
 80147e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147ea:	693b      	ldr	r3, [r7, #16]
 80147ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147ee:	429a      	cmp	r2, r3
 80147f0:	d02c      	beq.n	801484c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80147f2:	693b      	ldr	r3, [r7, #16]
 80147f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d128      	bne.n	801484c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80147fa:	693b      	ldr	r3, [r7, #16]
 80147fc:	3304      	adds	r3, #4
 80147fe:	4618      	mov	r0, r3
 8014800:	f7fe fab8 	bl	8012d74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014804:	693b      	ldr	r3, [r7, #16]
 8014806:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014808:	693b      	ldr	r3, [r7, #16]
 801480a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014810:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014814:	693b      	ldr	r3, [r7, #16]
 8014816:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014818:	693b      	ldr	r3, [r7, #16]
 801481a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801481c:	4b0f      	ldr	r3, [pc, #60]	; (801485c <xTaskPriorityDisinherit+0xd4>)
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	429a      	cmp	r2, r3
 8014822:	d903      	bls.n	801482c <xTaskPriorityDisinherit+0xa4>
 8014824:	693b      	ldr	r3, [r7, #16]
 8014826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014828:	4a0c      	ldr	r2, [pc, #48]	; (801485c <xTaskPriorityDisinherit+0xd4>)
 801482a:	6013      	str	r3, [r2, #0]
 801482c:	693b      	ldr	r3, [r7, #16]
 801482e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014830:	4613      	mov	r3, r2
 8014832:	009b      	lsls	r3, r3, #2
 8014834:	4413      	add	r3, r2
 8014836:	009b      	lsls	r3, r3, #2
 8014838:	4a09      	ldr	r2, [pc, #36]	; (8014860 <xTaskPriorityDisinherit+0xd8>)
 801483a:	441a      	add	r2, r3
 801483c:	693b      	ldr	r3, [r7, #16]
 801483e:	3304      	adds	r3, #4
 8014840:	4619      	mov	r1, r3
 8014842:	4610      	mov	r0, r2
 8014844:	f7fe fa39 	bl	8012cba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014848:	2301      	movs	r3, #1
 801484a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801484c:	697b      	ldr	r3, [r7, #20]
	}
 801484e:	4618      	mov	r0, r3
 8014850:	3718      	adds	r7, #24
 8014852:	46bd      	mov	sp, r7
 8014854:	bd80      	pop	{r7, pc}
 8014856:	bf00      	nop
 8014858:	24001338 	.word	0x24001338
 801485c:	24001814 	.word	0x24001814
 8014860:	2400133c 	.word	0x2400133c

08014864 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8014864:	b480      	push	{r7}
 8014866:	b083      	sub	sp, #12
 8014868:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801486a:	4b09      	ldr	r3, [pc, #36]	; (8014890 <uxTaskResetEventItemValue+0x2c>)
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	699b      	ldr	r3, [r3, #24]
 8014870:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014872:	4b07      	ldr	r3, [pc, #28]	; (8014890 <uxTaskResetEventItemValue+0x2c>)
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014878:	4b05      	ldr	r3, [pc, #20]	; (8014890 <uxTaskResetEventItemValue+0x2c>)
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8014880:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8014882:	687b      	ldr	r3, [r7, #4]
}
 8014884:	4618      	mov	r0, r3
 8014886:	370c      	adds	r7, #12
 8014888:	46bd      	mov	sp, r7
 801488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488e:	4770      	bx	lr
 8014890:	24001338 	.word	0x24001338

08014894 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b084      	sub	sp, #16
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
 801489c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801489e:	4b21      	ldr	r3, [pc, #132]	; (8014924 <prvAddCurrentTaskToDelayedList+0x90>)
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80148a4:	4b20      	ldr	r3, [pc, #128]	; (8014928 <prvAddCurrentTaskToDelayedList+0x94>)
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	3304      	adds	r3, #4
 80148aa:	4618      	mov	r0, r3
 80148ac:	f7fe fa62 	bl	8012d74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148b6:	d10a      	bne.n	80148ce <prvAddCurrentTaskToDelayedList+0x3a>
 80148b8:	683b      	ldr	r3, [r7, #0]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d007      	beq.n	80148ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80148be:	4b1a      	ldr	r3, [pc, #104]	; (8014928 <prvAddCurrentTaskToDelayedList+0x94>)
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	3304      	adds	r3, #4
 80148c4:	4619      	mov	r1, r3
 80148c6:	4819      	ldr	r0, [pc, #100]	; (801492c <prvAddCurrentTaskToDelayedList+0x98>)
 80148c8:	f7fe f9f7 	bl	8012cba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80148cc:	e026      	b.n	801491c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80148ce:	68fa      	ldr	r2, [r7, #12]
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	4413      	add	r3, r2
 80148d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80148d6:	4b14      	ldr	r3, [pc, #80]	; (8014928 <prvAddCurrentTaskToDelayedList+0x94>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	68ba      	ldr	r2, [r7, #8]
 80148dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80148de:	68ba      	ldr	r2, [r7, #8]
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	429a      	cmp	r2, r3
 80148e4:	d209      	bcs.n	80148fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80148e6:	4b12      	ldr	r3, [pc, #72]	; (8014930 <prvAddCurrentTaskToDelayedList+0x9c>)
 80148e8:	681a      	ldr	r2, [r3, #0]
 80148ea:	4b0f      	ldr	r3, [pc, #60]	; (8014928 <prvAddCurrentTaskToDelayedList+0x94>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	3304      	adds	r3, #4
 80148f0:	4619      	mov	r1, r3
 80148f2:	4610      	mov	r0, r2
 80148f4:	f7fe fa05 	bl	8012d02 <vListInsert>
}
 80148f8:	e010      	b.n	801491c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80148fa:	4b0e      	ldr	r3, [pc, #56]	; (8014934 <prvAddCurrentTaskToDelayedList+0xa0>)
 80148fc:	681a      	ldr	r2, [r3, #0]
 80148fe:	4b0a      	ldr	r3, [pc, #40]	; (8014928 <prvAddCurrentTaskToDelayedList+0x94>)
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	3304      	adds	r3, #4
 8014904:	4619      	mov	r1, r3
 8014906:	4610      	mov	r0, r2
 8014908:	f7fe f9fb 	bl	8012d02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801490c:	4b0a      	ldr	r3, [pc, #40]	; (8014938 <prvAddCurrentTaskToDelayedList+0xa4>)
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	68ba      	ldr	r2, [r7, #8]
 8014912:	429a      	cmp	r2, r3
 8014914:	d202      	bcs.n	801491c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014916:	4a08      	ldr	r2, [pc, #32]	; (8014938 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014918:	68bb      	ldr	r3, [r7, #8]
 801491a:	6013      	str	r3, [r2, #0]
}
 801491c:	bf00      	nop
 801491e:	3710      	adds	r7, #16
 8014920:	46bd      	mov	sp, r7
 8014922:	bd80      	pop	{r7, pc}
 8014924:	24001810 	.word	0x24001810
 8014928:	24001338 	.word	0x24001338
 801492c:	240017f8 	.word	0x240017f8
 8014930:	240017c8 	.word	0x240017c8
 8014934:	240017c4 	.word	0x240017c4
 8014938:	2400182c 	.word	0x2400182c

0801493c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801493c:	b580      	push	{r7, lr}
 801493e:	b08a      	sub	sp, #40	; 0x28
 8014940:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014942:	2300      	movs	r3, #0
 8014944:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014946:	f000 fb07 	bl	8014f58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801494a:	4b1c      	ldr	r3, [pc, #112]	; (80149bc <xTimerCreateTimerTask+0x80>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d021      	beq.n	8014996 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014952:	2300      	movs	r3, #0
 8014954:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014956:	2300      	movs	r3, #0
 8014958:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801495a:	1d3a      	adds	r2, r7, #4
 801495c:	f107 0108 	add.w	r1, r7, #8
 8014960:	f107 030c 	add.w	r3, r7, #12
 8014964:	4618      	mov	r0, r3
 8014966:	f7fd ff73 	bl	8012850 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801496a:	6879      	ldr	r1, [r7, #4]
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	68fa      	ldr	r2, [r7, #12]
 8014970:	9202      	str	r2, [sp, #8]
 8014972:	9301      	str	r3, [sp, #4]
 8014974:	2302      	movs	r3, #2
 8014976:	9300      	str	r3, [sp, #0]
 8014978:	2300      	movs	r3, #0
 801497a:	460a      	mov	r2, r1
 801497c:	4910      	ldr	r1, [pc, #64]	; (80149c0 <xTimerCreateTimerTask+0x84>)
 801497e:	4811      	ldr	r0, [pc, #68]	; (80149c4 <xTimerCreateTimerTask+0x88>)
 8014980:	f7fe ff0e 	bl	80137a0 <xTaskCreateStatic>
 8014984:	4603      	mov	r3, r0
 8014986:	4a10      	ldr	r2, [pc, #64]	; (80149c8 <xTimerCreateTimerTask+0x8c>)
 8014988:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801498a:	4b0f      	ldr	r3, [pc, #60]	; (80149c8 <xTimerCreateTimerTask+0x8c>)
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d001      	beq.n	8014996 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014992:	2301      	movs	r3, #1
 8014994:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014996:	697b      	ldr	r3, [r7, #20]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d10a      	bne.n	80149b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149a0:	f383 8811 	msr	BASEPRI, r3
 80149a4:	f3bf 8f6f 	isb	sy
 80149a8:	f3bf 8f4f 	dsb	sy
 80149ac:	613b      	str	r3, [r7, #16]
}
 80149ae:	bf00      	nop
 80149b0:	e7fe      	b.n	80149b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80149b2:	697b      	ldr	r3, [r7, #20]
}
 80149b4:	4618      	mov	r0, r3
 80149b6:	3718      	adds	r7, #24
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}
 80149bc:	24001868 	.word	0x24001868
 80149c0:	08016594 	.word	0x08016594
 80149c4:	08014b01 	.word	0x08014b01
 80149c8:	2400186c 	.word	0x2400186c

080149cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b08a      	sub	sp, #40	; 0x28
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	60f8      	str	r0, [r7, #12]
 80149d4:	60b9      	str	r1, [r7, #8]
 80149d6:	607a      	str	r2, [r7, #4]
 80149d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80149da:	2300      	movs	r3, #0
 80149dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d10a      	bne.n	80149fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80149e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e8:	f383 8811 	msr	BASEPRI, r3
 80149ec:	f3bf 8f6f 	isb	sy
 80149f0:	f3bf 8f4f 	dsb	sy
 80149f4:	623b      	str	r3, [r7, #32]
}
 80149f6:	bf00      	nop
 80149f8:	e7fe      	b.n	80149f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80149fa:	4b1a      	ldr	r3, [pc, #104]	; (8014a64 <xTimerGenericCommand+0x98>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d02a      	beq.n	8014a58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	2b05      	cmp	r3, #5
 8014a12:	dc18      	bgt.n	8014a46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014a14:	f7ff fe9a 	bl	801474c <xTaskGetSchedulerState>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	2b02      	cmp	r3, #2
 8014a1c:	d109      	bne.n	8014a32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014a1e:	4b11      	ldr	r3, [pc, #68]	; (8014a64 <xTimerGenericCommand+0x98>)
 8014a20:	6818      	ldr	r0, [r3, #0]
 8014a22:	f107 0110 	add.w	r1, r7, #16
 8014a26:	2300      	movs	r3, #0
 8014a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a2a:	f7fe fad1 	bl	8012fd0 <xQueueGenericSend>
 8014a2e:	6278      	str	r0, [r7, #36]	; 0x24
 8014a30:	e012      	b.n	8014a58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014a32:	4b0c      	ldr	r3, [pc, #48]	; (8014a64 <xTimerGenericCommand+0x98>)
 8014a34:	6818      	ldr	r0, [r3, #0]
 8014a36:	f107 0110 	add.w	r1, r7, #16
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	f7fe fac7 	bl	8012fd0 <xQueueGenericSend>
 8014a42:	6278      	str	r0, [r7, #36]	; 0x24
 8014a44:	e008      	b.n	8014a58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014a46:	4b07      	ldr	r3, [pc, #28]	; (8014a64 <xTimerGenericCommand+0x98>)
 8014a48:	6818      	ldr	r0, [r3, #0]
 8014a4a:	f107 0110 	add.w	r1, r7, #16
 8014a4e:	2300      	movs	r3, #0
 8014a50:	683a      	ldr	r2, [r7, #0]
 8014a52:	f7fe fbbb 	bl	80131cc <xQueueGenericSendFromISR>
 8014a56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	3728      	adds	r7, #40	; 0x28
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}
 8014a62:	bf00      	nop
 8014a64:	24001868 	.word	0x24001868

08014a68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014a68:	b580      	push	{r7, lr}
 8014a6a:	b088      	sub	sp, #32
 8014a6c:	af02      	add	r7, sp, #8
 8014a6e:	6078      	str	r0, [r7, #4]
 8014a70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a72:	4b22      	ldr	r3, [pc, #136]	; (8014afc <prvProcessExpiredTimer+0x94>)
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	68db      	ldr	r3, [r3, #12]
 8014a78:	68db      	ldr	r3, [r3, #12]
 8014a7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	3304      	adds	r3, #4
 8014a80:	4618      	mov	r0, r3
 8014a82:	f7fe f977 	bl	8012d74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014a86:	697b      	ldr	r3, [r7, #20]
 8014a88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014a8c:	f003 0304 	and.w	r3, r3, #4
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d022      	beq.n	8014ada <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014a94:	697b      	ldr	r3, [r7, #20]
 8014a96:	699a      	ldr	r2, [r3, #24]
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	18d1      	adds	r1, r2, r3
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	683a      	ldr	r2, [r7, #0]
 8014aa0:	6978      	ldr	r0, [r7, #20]
 8014aa2:	f000 f8d1 	bl	8014c48 <prvInsertTimerInActiveList>
 8014aa6:	4603      	mov	r3, r0
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d01f      	beq.n	8014aec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014aac:	2300      	movs	r3, #0
 8014aae:	9300      	str	r3, [sp, #0]
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	687a      	ldr	r2, [r7, #4]
 8014ab4:	2100      	movs	r1, #0
 8014ab6:	6978      	ldr	r0, [r7, #20]
 8014ab8:	f7ff ff88 	bl	80149cc <xTimerGenericCommand>
 8014abc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014abe:	693b      	ldr	r3, [r7, #16]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d113      	bne.n	8014aec <prvProcessExpiredTimer+0x84>
	__asm volatile
 8014ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ac8:	f383 8811 	msr	BASEPRI, r3
 8014acc:	f3bf 8f6f 	isb	sy
 8014ad0:	f3bf 8f4f 	dsb	sy
 8014ad4:	60fb      	str	r3, [r7, #12]
}
 8014ad6:	bf00      	nop
 8014ad8:	e7fe      	b.n	8014ad8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014ada:	697b      	ldr	r3, [r7, #20]
 8014adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ae0:	f023 0301 	bic.w	r3, r3, #1
 8014ae4:	b2da      	uxtb	r2, r3
 8014ae6:	697b      	ldr	r3, [r7, #20]
 8014ae8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014aec:	697b      	ldr	r3, [r7, #20]
 8014aee:	6a1b      	ldr	r3, [r3, #32]
 8014af0:	6978      	ldr	r0, [r7, #20]
 8014af2:	4798      	blx	r3
}
 8014af4:	bf00      	nop
 8014af6:	3718      	adds	r7, #24
 8014af8:	46bd      	mov	sp, r7
 8014afa:	bd80      	pop	{r7, pc}
 8014afc:	24001860 	.word	0x24001860

08014b00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b084      	sub	sp, #16
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014b08:	f107 0308 	add.w	r3, r7, #8
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	f000 f857 	bl	8014bc0 <prvGetNextExpireTime>
 8014b12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	4619      	mov	r1, r3
 8014b18:	68f8      	ldr	r0, [r7, #12]
 8014b1a:	f000 f803 	bl	8014b24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014b1e:	f000 f8d5 	bl	8014ccc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014b22:	e7f1      	b.n	8014b08 <prvTimerTask+0x8>

08014b24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b084      	sub	sp, #16
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
 8014b2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014b2e:	f7ff f98d 	bl	8013e4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014b32:	f107 0308 	add.w	r3, r7, #8
 8014b36:	4618      	mov	r0, r3
 8014b38:	f000 f866 	bl	8014c08 <prvSampleTimeNow>
 8014b3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014b3e:	68bb      	ldr	r3, [r7, #8]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d130      	bne.n	8014ba6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014b44:	683b      	ldr	r3, [r7, #0]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d10a      	bne.n	8014b60 <prvProcessTimerOrBlockTask+0x3c>
 8014b4a:	687a      	ldr	r2, [r7, #4]
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	d806      	bhi.n	8014b60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014b52:	f7ff f989 	bl	8013e68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014b56:	68f9      	ldr	r1, [r7, #12]
 8014b58:	6878      	ldr	r0, [r7, #4]
 8014b5a:	f7ff ff85 	bl	8014a68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014b5e:	e024      	b.n	8014baa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014b60:	683b      	ldr	r3, [r7, #0]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d008      	beq.n	8014b78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014b66:	4b13      	ldr	r3, [pc, #76]	; (8014bb4 <prvProcessTimerOrBlockTask+0x90>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d101      	bne.n	8014b74 <prvProcessTimerOrBlockTask+0x50>
 8014b70:	2301      	movs	r3, #1
 8014b72:	e000      	b.n	8014b76 <prvProcessTimerOrBlockTask+0x52>
 8014b74:	2300      	movs	r3, #0
 8014b76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014b78:	4b0f      	ldr	r3, [pc, #60]	; (8014bb8 <prvProcessTimerOrBlockTask+0x94>)
 8014b7a:	6818      	ldr	r0, [r3, #0]
 8014b7c:	687a      	ldr	r2, [r7, #4]
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	1ad3      	subs	r3, r2, r3
 8014b82:	683a      	ldr	r2, [r7, #0]
 8014b84:	4619      	mov	r1, r3
 8014b86:	f7fe fdd7 	bl	8013738 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014b8a:	f7ff f96d 	bl	8013e68 <xTaskResumeAll>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d10a      	bne.n	8014baa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014b94:	4b09      	ldr	r3, [pc, #36]	; (8014bbc <prvProcessTimerOrBlockTask+0x98>)
 8014b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b9a:	601a      	str	r2, [r3, #0]
 8014b9c:	f3bf 8f4f 	dsb	sy
 8014ba0:	f3bf 8f6f 	isb	sy
}
 8014ba4:	e001      	b.n	8014baa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014ba6:	f7ff f95f 	bl	8013e68 <xTaskResumeAll>
}
 8014baa:	bf00      	nop
 8014bac:	3710      	adds	r7, #16
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}
 8014bb2:	bf00      	nop
 8014bb4:	24001864 	.word	0x24001864
 8014bb8:	24001868 	.word	0x24001868
 8014bbc:	e000ed04 	.word	0xe000ed04

08014bc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014bc0:	b480      	push	{r7}
 8014bc2:	b085      	sub	sp, #20
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014bc8:	4b0e      	ldr	r3, [pc, #56]	; (8014c04 <prvGetNextExpireTime+0x44>)
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d101      	bne.n	8014bd6 <prvGetNextExpireTime+0x16>
 8014bd2:	2201      	movs	r2, #1
 8014bd4:	e000      	b.n	8014bd8 <prvGetNextExpireTime+0x18>
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d105      	bne.n	8014bf0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014be4:	4b07      	ldr	r3, [pc, #28]	; (8014c04 <prvGetNextExpireTime+0x44>)
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	68db      	ldr	r3, [r3, #12]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	60fb      	str	r3, [r7, #12]
 8014bee:	e001      	b.n	8014bf4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
}
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	3714      	adds	r7, #20
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c00:	4770      	bx	lr
 8014c02:	bf00      	nop
 8014c04:	24001860 	.word	0x24001860

08014c08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b084      	sub	sp, #16
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014c10:	f7ff f9c8 	bl	8013fa4 <xTaskGetTickCount>
 8014c14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014c16:	4b0b      	ldr	r3, [pc, #44]	; (8014c44 <prvSampleTimeNow+0x3c>)
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	68fa      	ldr	r2, [r7, #12]
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d205      	bcs.n	8014c2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014c20:	f000 f936 	bl	8014e90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	2201      	movs	r2, #1
 8014c28:	601a      	str	r2, [r3, #0]
 8014c2a:	e002      	b.n	8014c32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2200      	movs	r2, #0
 8014c30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014c32:	4a04      	ldr	r2, [pc, #16]	; (8014c44 <prvSampleTimeNow+0x3c>)
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014c38:	68fb      	ldr	r3, [r7, #12]
}
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	3710      	adds	r7, #16
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd80      	pop	{r7, pc}
 8014c42:	bf00      	nop
 8014c44:	24001870 	.word	0x24001870

08014c48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b086      	sub	sp, #24
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	60f8      	str	r0, [r7, #12]
 8014c50:	60b9      	str	r1, [r7, #8]
 8014c52:	607a      	str	r2, [r7, #4]
 8014c54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014c56:	2300      	movs	r3, #0
 8014c58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	68ba      	ldr	r2, [r7, #8]
 8014c5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	68fa      	ldr	r2, [r7, #12]
 8014c64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014c66:	68ba      	ldr	r2, [r7, #8]
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	429a      	cmp	r2, r3
 8014c6c:	d812      	bhi.n	8014c94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c6e:	687a      	ldr	r2, [r7, #4]
 8014c70:	683b      	ldr	r3, [r7, #0]
 8014c72:	1ad2      	subs	r2, r2, r3
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	699b      	ldr	r3, [r3, #24]
 8014c78:	429a      	cmp	r2, r3
 8014c7a:	d302      	bcc.n	8014c82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014c7c:	2301      	movs	r3, #1
 8014c7e:	617b      	str	r3, [r7, #20]
 8014c80:	e01b      	b.n	8014cba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014c82:	4b10      	ldr	r3, [pc, #64]	; (8014cc4 <prvInsertTimerInActiveList+0x7c>)
 8014c84:	681a      	ldr	r2, [r3, #0]
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	3304      	adds	r3, #4
 8014c8a:	4619      	mov	r1, r3
 8014c8c:	4610      	mov	r0, r2
 8014c8e:	f7fe f838 	bl	8012d02 <vListInsert>
 8014c92:	e012      	b.n	8014cba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014c94:	687a      	ldr	r2, [r7, #4]
 8014c96:	683b      	ldr	r3, [r7, #0]
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	d206      	bcs.n	8014caa <prvInsertTimerInActiveList+0x62>
 8014c9c:	68ba      	ldr	r2, [r7, #8]
 8014c9e:	683b      	ldr	r3, [r7, #0]
 8014ca0:	429a      	cmp	r2, r3
 8014ca2:	d302      	bcc.n	8014caa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	617b      	str	r3, [r7, #20]
 8014ca8:	e007      	b.n	8014cba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014caa:	4b07      	ldr	r3, [pc, #28]	; (8014cc8 <prvInsertTimerInActiveList+0x80>)
 8014cac:	681a      	ldr	r2, [r3, #0]
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	3304      	adds	r3, #4
 8014cb2:	4619      	mov	r1, r3
 8014cb4:	4610      	mov	r0, r2
 8014cb6:	f7fe f824 	bl	8012d02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014cba:	697b      	ldr	r3, [r7, #20]
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	3718      	adds	r7, #24
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd80      	pop	{r7, pc}
 8014cc4:	24001864 	.word	0x24001864
 8014cc8:	24001860 	.word	0x24001860

08014ccc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b08e      	sub	sp, #56	; 0x38
 8014cd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014cd2:	e0ca      	b.n	8014e6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	da18      	bge.n	8014d0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014cda:	1d3b      	adds	r3, r7, #4
 8014cdc:	3304      	adds	r3, #4
 8014cde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d10a      	bne.n	8014cfc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8014ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cea:	f383 8811 	msr	BASEPRI, r3
 8014cee:	f3bf 8f6f 	isb	sy
 8014cf2:	f3bf 8f4f 	dsb	sy
 8014cf6:	61fb      	str	r3, [r7, #28]
}
 8014cf8:	bf00      	nop
 8014cfa:	e7fe      	b.n	8014cfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d02:	6850      	ldr	r0, [r2, #4]
 8014d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d06:	6892      	ldr	r2, [r2, #8]
 8014d08:	4611      	mov	r1, r2
 8014d0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	f2c0 80aa 	blt.w	8014e68 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d1a:	695b      	ldr	r3, [r3, #20]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d004      	beq.n	8014d2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d22:	3304      	adds	r3, #4
 8014d24:	4618      	mov	r0, r3
 8014d26:	f7fe f825 	bl	8012d74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014d2a:	463b      	mov	r3, r7
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f7ff ff6b 	bl	8014c08 <prvSampleTimeNow>
 8014d32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	2b09      	cmp	r3, #9
 8014d38:	f200 8097 	bhi.w	8014e6a <prvProcessReceivedCommands+0x19e>
 8014d3c:	a201      	add	r2, pc, #4	; (adr r2, 8014d44 <prvProcessReceivedCommands+0x78>)
 8014d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d42:	bf00      	nop
 8014d44:	08014d6d 	.word	0x08014d6d
 8014d48:	08014d6d 	.word	0x08014d6d
 8014d4c:	08014d6d 	.word	0x08014d6d
 8014d50:	08014de1 	.word	0x08014de1
 8014d54:	08014df5 	.word	0x08014df5
 8014d58:	08014e3f 	.word	0x08014e3f
 8014d5c:	08014d6d 	.word	0x08014d6d
 8014d60:	08014d6d 	.word	0x08014d6d
 8014d64:	08014de1 	.word	0x08014de1
 8014d68:	08014df5 	.word	0x08014df5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014d72:	f043 0301 	orr.w	r3, r3, #1
 8014d76:	b2da      	uxtb	r2, r3
 8014d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014d7e:	68ba      	ldr	r2, [r7, #8]
 8014d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d82:	699b      	ldr	r3, [r3, #24]
 8014d84:	18d1      	adds	r1, r2, r3
 8014d86:	68bb      	ldr	r3, [r7, #8]
 8014d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d8c:	f7ff ff5c 	bl	8014c48 <prvInsertTimerInActiveList>
 8014d90:	4603      	mov	r3, r0
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d069      	beq.n	8014e6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d98:	6a1b      	ldr	r3, [r3, #32]
 8014d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014da0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014da4:	f003 0304 	and.w	r3, r3, #4
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d05e      	beq.n	8014e6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014dac:	68ba      	ldr	r2, [r7, #8]
 8014dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014db0:	699b      	ldr	r3, [r3, #24]
 8014db2:	441a      	add	r2, r3
 8014db4:	2300      	movs	r3, #0
 8014db6:	9300      	str	r3, [sp, #0]
 8014db8:	2300      	movs	r3, #0
 8014dba:	2100      	movs	r1, #0
 8014dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014dbe:	f7ff fe05 	bl	80149cc <xTimerGenericCommand>
 8014dc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014dc4:	6a3b      	ldr	r3, [r7, #32]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d14f      	bne.n	8014e6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8014dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dce:	f383 8811 	msr	BASEPRI, r3
 8014dd2:	f3bf 8f6f 	isb	sy
 8014dd6:	f3bf 8f4f 	dsb	sy
 8014dda:	61bb      	str	r3, [r7, #24]
}
 8014ddc:	bf00      	nop
 8014dde:	e7fe      	b.n	8014dde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014de6:	f023 0301 	bic.w	r3, r3, #1
 8014dea:	b2da      	uxtb	r2, r3
 8014dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014df2:	e03a      	b.n	8014e6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014df6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014dfa:	f043 0301 	orr.w	r3, r3, #1
 8014dfe:	b2da      	uxtb	r2, r3
 8014e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014e06:	68ba      	ldr	r2, [r7, #8]
 8014e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e0e:	699b      	ldr	r3, [r3, #24]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d10a      	bne.n	8014e2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8014e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e18:	f383 8811 	msr	BASEPRI, r3
 8014e1c:	f3bf 8f6f 	isb	sy
 8014e20:	f3bf 8f4f 	dsb	sy
 8014e24:	617b      	str	r3, [r7, #20]
}
 8014e26:	bf00      	nop
 8014e28:	e7fe      	b.n	8014e28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e2c:	699a      	ldr	r2, [r3, #24]
 8014e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e30:	18d1      	adds	r1, r2, r3
 8014e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014e38:	f7ff ff06 	bl	8014c48 <prvInsertTimerInActiveList>
					break;
 8014e3c:	e015      	b.n	8014e6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e44:	f003 0302 	and.w	r3, r3, #2
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d103      	bne.n	8014e54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014e4e:	f000 fbff 	bl	8015650 <vPortFree>
 8014e52:	e00a      	b.n	8014e6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e5a:	f023 0301 	bic.w	r3, r3, #1
 8014e5e:	b2da      	uxtb	r2, r3
 8014e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014e66:	e000      	b.n	8014e6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014e68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014e6a:	4b08      	ldr	r3, [pc, #32]	; (8014e8c <prvProcessReceivedCommands+0x1c0>)
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	1d39      	adds	r1, r7, #4
 8014e70:	2200      	movs	r2, #0
 8014e72:	4618      	mov	r0, r3
 8014e74:	f7fe fa46 	bl	8013304 <xQueueReceive>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	f47f af2a 	bne.w	8014cd4 <prvProcessReceivedCommands+0x8>
	}
}
 8014e80:	bf00      	nop
 8014e82:	bf00      	nop
 8014e84:	3730      	adds	r7, #48	; 0x30
 8014e86:	46bd      	mov	sp, r7
 8014e88:	bd80      	pop	{r7, pc}
 8014e8a:	bf00      	nop
 8014e8c:	24001868 	.word	0x24001868

08014e90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b088      	sub	sp, #32
 8014e94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014e96:	e048      	b.n	8014f2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014e98:	4b2d      	ldr	r3, [pc, #180]	; (8014f50 <prvSwitchTimerLists+0xc0>)
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	68db      	ldr	r3, [r3, #12]
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ea2:	4b2b      	ldr	r3, [pc, #172]	; (8014f50 <prvSwitchTimerLists+0xc0>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	68db      	ldr	r3, [r3, #12]
 8014ea8:	68db      	ldr	r3, [r3, #12]
 8014eaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	3304      	adds	r3, #4
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7fd ff5f 	bl	8012d74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	6a1b      	ldr	r3, [r3, #32]
 8014eba:	68f8      	ldr	r0, [r7, #12]
 8014ebc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014ec4:	f003 0304 	and.w	r3, r3, #4
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d02e      	beq.n	8014f2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	699b      	ldr	r3, [r3, #24]
 8014ed0:	693a      	ldr	r2, [r7, #16]
 8014ed2:	4413      	add	r3, r2
 8014ed4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014ed6:	68ba      	ldr	r2, [r7, #8]
 8014ed8:	693b      	ldr	r3, [r7, #16]
 8014eda:	429a      	cmp	r2, r3
 8014edc:	d90e      	bls.n	8014efc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	68ba      	ldr	r2, [r7, #8]
 8014ee2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	68fa      	ldr	r2, [r7, #12]
 8014ee8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014eea:	4b19      	ldr	r3, [pc, #100]	; (8014f50 <prvSwitchTimerLists+0xc0>)
 8014eec:	681a      	ldr	r2, [r3, #0]
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	3304      	adds	r3, #4
 8014ef2:	4619      	mov	r1, r3
 8014ef4:	4610      	mov	r0, r2
 8014ef6:	f7fd ff04 	bl	8012d02 <vListInsert>
 8014efa:	e016      	b.n	8014f2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014efc:	2300      	movs	r3, #0
 8014efe:	9300      	str	r3, [sp, #0]
 8014f00:	2300      	movs	r3, #0
 8014f02:	693a      	ldr	r2, [r7, #16]
 8014f04:	2100      	movs	r1, #0
 8014f06:	68f8      	ldr	r0, [r7, #12]
 8014f08:	f7ff fd60 	bl	80149cc <xTimerGenericCommand>
 8014f0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d10a      	bne.n	8014f2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8014f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f18:	f383 8811 	msr	BASEPRI, r3
 8014f1c:	f3bf 8f6f 	isb	sy
 8014f20:	f3bf 8f4f 	dsb	sy
 8014f24:	603b      	str	r3, [r7, #0]
}
 8014f26:	bf00      	nop
 8014f28:	e7fe      	b.n	8014f28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014f2a:	4b09      	ldr	r3, [pc, #36]	; (8014f50 <prvSwitchTimerLists+0xc0>)
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d1b1      	bne.n	8014e98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014f34:	4b06      	ldr	r3, [pc, #24]	; (8014f50 <prvSwitchTimerLists+0xc0>)
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014f3a:	4b06      	ldr	r3, [pc, #24]	; (8014f54 <prvSwitchTimerLists+0xc4>)
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	4a04      	ldr	r2, [pc, #16]	; (8014f50 <prvSwitchTimerLists+0xc0>)
 8014f40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014f42:	4a04      	ldr	r2, [pc, #16]	; (8014f54 <prvSwitchTimerLists+0xc4>)
 8014f44:	697b      	ldr	r3, [r7, #20]
 8014f46:	6013      	str	r3, [r2, #0]
}
 8014f48:	bf00      	nop
 8014f4a:	3718      	adds	r7, #24
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}
 8014f50:	24001860 	.word	0x24001860
 8014f54:	24001864 	.word	0x24001864

08014f58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b082      	sub	sp, #8
 8014f5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014f5e:	f000 f989 	bl	8015274 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014f62:	4b15      	ldr	r3, [pc, #84]	; (8014fb8 <prvCheckForValidListAndQueue+0x60>)
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d120      	bne.n	8014fac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014f6a:	4814      	ldr	r0, [pc, #80]	; (8014fbc <prvCheckForValidListAndQueue+0x64>)
 8014f6c:	f7fd fe78 	bl	8012c60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014f70:	4813      	ldr	r0, [pc, #76]	; (8014fc0 <prvCheckForValidListAndQueue+0x68>)
 8014f72:	f7fd fe75 	bl	8012c60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014f76:	4b13      	ldr	r3, [pc, #76]	; (8014fc4 <prvCheckForValidListAndQueue+0x6c>)
 8014f78:	4a10      	ldr	r2, [pc, #64]	; (8014fbc <prvCheckForValidListAndQueue+0x64>)
 8014f7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014f7c:	4b12      	ldr	r3, [pc, #72]	; (8014fc8 <prvCheckForValidListAndQueue+0x70>)
 8014f7e:	4a10      	ldr	r2, [pc, #64]	; (8014fc0 <prvCheckForValidListAndQueue+0x68>)
 8014f80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014f82:	2300      	movs	r3, #0
 8014f84:	9300      	str	r3, [sp, #0]
 8014f86:	4b11      	ldr	r3, [pc, #68]	; (8014fcc <prvCheckForValidListAndQueue+0x74>)
 8014f88:	4a11      	ldr	r2, [pc, #68]	; (8014fd0 <prvCheckForValidListAndQueue+0x78>)
 8014f8a:	2110      	movs	r1, #16
 8014f8c:	200a      	movs	r0, #10
 8014f8e:	f7fd ff83 	bl	8012e98 <xQueueGenericCreateStatic>
 8014f92:	4603      	mov	r3, r0
 8014f94:	4a08      	ldr	r2, [pc, #32]	; (8014fb8 <prvCheckForValidListAndQueue+0x60>)
 8014f96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014f98:	4b07      	ldr	r3, [pc, #28]	; (8014fb8 <prvCheckForValidListAndQueue+0x60>)
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d005      	beq.n	8014fac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014fa0:	4b05      	ldr	r3, [pc, #20]	; (8014fb8 <prvCheckForValidListAndQueue+0x60>)
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	490b      	ldr	r1, [pc, #44]	; (8014fd4 <prvCheckForValidListAndQueue+0x7c>)
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f7fe fb9c 	bl	80136e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014fac:	f000 f992 	bl	80152d4 <vPortExitCritical>
}
 8014fb0:	bf00      	nop
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bd80      	pop	{r7, pc}
 8014fb6:	bf00      	nop
 8014fb8:	24001868 	.word	0x24001868
 8014fbc:	24001838 	.word	0x24001838
 8014fc0:	2400184c 	.word	0x2400184c
 8014fc4:	24001860 	.word	0x24001860
 8014fc8:	24001864 	.word	0x24001864
 8014fcc:	24001914 	.word	0x24001914
 8014fd0:	24001874 	.word	0x24001874
 8014fd4:	0801659c 	.word	0x0801659c

08014fd8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014fd8:	b580      	push	{r7, lr}
 8014fda:	b08a      	sub	sp, #40	; 0x28
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	60f8      	str	r0, [r7, #12]
 8014fe0:	60b9      	str	r1, [r7, #8]
 8014fe2:	607a      	str	r2, [r7, #4]
 8014fe4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8014fe6:	f06f 0301 	mvn.w	r3, #1
 8014fea:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8014ff0:	68bb      	ldr	r3, [r7, #8]
 8014ff2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014ff8:	4b06      	ldr	r3, [pc, #24]	; (8015014 <xTimerPendFunctionCallFromISR+0x3c>)
 8014ffa:	6818      	ldr	r0, [r3, #0]
 8014ffc:	f107 0114 	add.w	r1, r7, #20
 8015000:	2300      	movs	r3, #0
 8015002:	683a      	ldr	r2, [r7, #0]
 8015004:	f7fe f8e2 	bl	80131cc <xQueueGenericSendFromISR>
 8015008:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801500c:	4618      	mov	r0, r3
 801500e:	3728      	adds	r7, #40	; 0x28
 8015010:	46bd      	mov	sp, r7
 8015012:	bd80      	pop	{r7, pc}
 8015014:	24001868 	.word	0x24001868

08015018 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015018:	b480      	push	{r7}
 801501a:	b085      	sub	sp, #20
 801501c:	af00      	add	r7, sp, #0
 801501e:	60f8      	str	r0, [r7, #12]
 8015020:	60b9      	str	r1, [r7, #8]
 8015022:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	3b04      	subs	r3, #4
 8015028:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	3b04      	subs	r3, #4
 8015036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015038:	68bb      	ldr	r3, [r7, #8]
 801503a:	f023 0201 	bic.w	r2, r3, #1
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	3b04      	subs	r3, #4
 8015046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015048:	4a0c      	ldr	r2, [pc, #48]	; (801507c <pxPortInitialiseStack+0x64>)
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	3b14      	subs	r3, #20
 8015052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015054:	687a      	ldr	r2, [r7, #4]
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	3b04      	subs	r3, #4
 801505e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	f06f 0202 	mvn.w	r2, #2
 8015066:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	3b20      	subs	r3, #32
 801506c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801506e:	68fb      	ldr	r3, [r7, #12]
}
 8015070:	4618      	mov	r0, r3
 8015072:	3714      	adds	r7, #20
 8015074:	46bd      	mov	sp, r7
 8015076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801507a:	4770      	bx	lr
 801507c:	08015081 	.word	0x08015081

08015080 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015080:	b480      	push	{r7}
 8015082:	b085      	sub	sp, #20
 8015084:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015086:	2300      	movs	r3, #0
 8015088:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801508a:	4b12      	ldr	r3, [pc, #72]	; (80150d4 <prvTaskExitError+0x54>)
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015092:	d00a      	beq.n	80150aa <prvTaskExitError+0x2a>
	__asm volatile
 8015094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015098:	f383 8811 	msr	BASEPRI, r3
 801509c:	f3bf 8f6f 	isb	sy
 80150a0:	f3bf 8f4f 	dsb	sy
 80150a4:	60fb      	str	r3, [r7, #12]
}
 80150a6:	bf00      	nop
 80150a8:	e7fe      	b.n	80150a8 <prvTaskExitError+0x28>
	__asm volatile
 80150aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150ae:	f383 8811 	msr	BASEPRI, r3
 80150b2:	f3bf 8f6f 	isb	sy
 80150b6:	f3bf 8f4f 	dsb	sy
 80150ba:	60bb      	str	r3, [r7, #8]
}
 80150bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80150be:	bf00      	nop
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d0fc      	beq.n	80150c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80150c6:	bf00      	nop
 80150c8:	bf00      	nop
 80150ca:	3714      	adds	r7, #20
 80150cc:	46bd      	mov	sp, r7
 80150ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d2:	4770      	bx	lr
 80150d4:	24000098 	.word	0x24000098
	...

080150e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80150e0:	4b07      	ldr	r3, [pc, #28]	; (8015100 <pxCurrentTCBConst2>)
 80150e2:	6819      	ldr	r1, [r3, #0]
 80150e4:	6808      	ldr	r0, [r1, #0]
 80150e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150ea:	f380 8809 	msr	PSP, r0
 80150ee:	f3bf 8f6f 	isb	sy
 80150f2:	f04f 0000 	mov.w	r0, #0
 80150f6:	f380 8811 	msr	BASEPRI, r0
 80150fa:	4770      	bx	lr
 80150fc:	f3af 8000 	nop.w

08015100 <pxCurrentTCBConst2>:
 8015100:	24001338 	.word	0x24001338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015104:	bf00      	nop
 8015106:	bf00      	nop

08015108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015108:	4808      	ldr	r0, [pc, #32]	; (801512c <prvPortStartFirstTask+0x24>)
 801510a:	6800      	ldr	r0, [r0, #0]
 801510c:	6800      	ldr	r0, [r0, #0]
 801510e:	f380 8808 	msr	MSP, r0
 8015112:	f04f 0000 	mov.w	r0, #0
 8015116:	f380 8814 	msr	CONTROL, r0
 801511a:	b662      	cpsie	i
 801511c:	b661      	cpsie	f
 801511e:	f3bf 8f4f 	dsb	sy
 8015122:	f3bf 8f6f 	isb	sy
 8015126:	df00      	svc	0
 8015128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801512a:	bf00      	nop
 801512c:	e000ed08 	.word	0xe000ed08

08015130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b086      	sub	sp, #24
 8015134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015136:	4b46      	ldr	r3, [pc, #280]	; (8015250 <xPortStartScheduler+0x120>)
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	4a46      	ldr	r2, [pc, #280]	; (8015254 <xPortStartScheduler+0x124>)
 801513c:	4293      	cmp	r3, r2
 801513e:	d10a      	bne.n	8015156 <xPortStartScheduler+0x26>
	__asm volatile
 8015140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015144:	f383 8811 	msr	BASEPRI, r3
 8015148:	f3bf 8f6f 	isb	sy
 801514c:	f3bf 8f4f 	dsb	sy
 8015150:	613b      	str	r3, [r7, #16]
}
 8015152:	bf00      	nop
 8015154:	e7fe      	b.n	8015154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015156:	4b3e      	ldr	r3, [pc, #248]	; (8015250 <xPortStartScheduler+0x120>)
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	4a3f      	ldr	r2, [pc, #252]	; (8015258 <xPortStartScheduler+0x128>)
 801515c:	4293      	cmp	r3, r2
 801515e:	d10a      	bne.n	8015176 <xPortStartScheduler+0x46>
	__asm volatile
 8015160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015164:	f383 8811 	msr	BASEPRI, r3
 8015168:	f3bf 8f6f 	isb	sy
 801516c:	f3bf 8f4f 	dsb	sy
 8015170:	60fb      	str	r3, [r7, #12]
}
 8015172:	bf00      	nop
 8015174:	e7fe      	b.n	8015174 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015176:	4b39      	ldr	r3, [pc, #228]	; (801525c <xPortStartScheduler+0x12c>)
 8015178:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801517a:	697b      	ldr	r3, [r7, #20]
 801517c:	781b      	ldrb	r3, [r3, #0]
 801517e:	b2db      	uxtb	r3, r3
 8015180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015182:	697b      	ldr	r3, [r7, #20]
 8015184:	22ff      	movs	r2, #255	; 0xff
 8015186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015188:	697b      	ldr	r3, [r7, #20]
 801518a:	781b      	ldrb	r3, [r3, #0]
 801518c:	b2db      	uxtb	r3, r3
 801518e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015190:	78fb      	ldrb	r3, [r7, #3]
 8015192:	b2db      	uxtb	r3, r3
 8015194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015198:	b2da      	uxtb	r2, r3
 801519a:	4b31      	ldr	r3, [pc, #196]	; (8015260 <xPortStartScheduler+0x130>)
 801519c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801519e:	4b31      	ldr	r3, [pc, #196]	; (8015264 <xPortStartScheduler+0x134>)
 80151a0:	2207      	movs	r2, #7
 80151a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80151a4:	e009      	b.n	80151ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80151a6:	4b2f      	ldr	r3, [pc, #188]	; (8015264 <xPortStartScheduler+0x134>)
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	3b01      	subs	r3, #1
 80151ac:	4a2d      	ldr	r2, [pc, #180]	; (8015264 <xPortStartScheduler+0x134>)
 80151ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80151b0:	78fb      	ldrb	r3, [r7, #3]
 80151b2:	b2db      	uxtb	r3, r3
 80151b4:	005b      	lsls	r3, r3, #1
 80151b6:	b2db      	uxtb	r3, r3
 80151b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80151ba:	78fb      	ldrb	r3, [r7, #3]
 80151bc:	b2db      	uxtb	r3, r3
 80151be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80151c2:	2b80      	cmp	r3, #128	; 0x80
 80151c4:	d0ef      	beq.n	80151a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80151c6:	4b27      	ldr	r3, [pc, #156]	; (8015264 <xPortStartScheduler+0x134>)
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	f1c3 0307 	rsb	r3, r3, #7
 80151ce:	2b04      	cmp	r3, #4
 80151d0:	d00a      	beq.n	80151e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80151d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151d6:	f383 8811 	msr	BASEPRI, r3
 80151da:	f3bf 8f6f 	isb	sy
 80151de:	f3bf 8f4f 	dsb	sy
 80151e2:	60bb      	str	r3, [r7, #8]
}
 80151e4:	bf00      	nop
 80151e6:	e7fe      	b.n	80151e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80151e8:	4b1e      	ldr	r3, [pc, #120]	; (8015264 <xPortStartScheduler+0x134>)
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	021b      	lsls	r3, r3, #8
 80151ee:	4a1d      	ldr	r2, [pc, #116]	; (8015264 <xPortStartScheduler+0x134>)
 80151f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80151f2:	4b1c      	ldr	r3, [pc, #112]	; (8015264 <xPortStartScheduler+0x134>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80151fa:	4a1a      	ldr	r2, [pc, #104]	; (8015264 <xPortStartScheduler+0x134>)
 80151fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	b2da      	uxtb	r2, r3
 8015202:	697b      	ldr	r3, [r7, #20]
 8015204:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015206:	4b18      	ldr	r3, [pc, #96]	; (8015268 <xPortStartScheduler+0x138>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	4a17      	ldr	r2, [pc, #92]	; (8015268 <xPortStartScheduler+0x138>)
 801520c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015212:	4b15      	ldr	r3, [pc, #84]	; (8015268 <xPortStartScheduler+0x138>)
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	4a14      	ldr	r2, [pc, #80]	; (8015268 <xPortStartScheduler+0x138>)
 8015218:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801521c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801521e:	f000 f8dd 	bl	80153dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015222:	4b12      	ldr	r3, [pc, #72]	; (801526c <xPortStartScheduler+0x13c>)
 8015224:	2200      	movs	r2, #0
 8015226:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015228:	f000 f8fc 	bl	8015424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801522c:	4b10      	ldr	r3, [pc, #64]	; (8015270 <xPortStartScheduler+0x140>)
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	4a0f      	ldr	r2, [pc, #60]	; (8015270 <xPortStartScheduler+0x140>)
 8015232:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015236:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015238:	f7ff ff66 	bl	8015108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801523c:	f7fe ff7c 	bl	8014138 <vTaskSwitchContext>
	prvTaskExitError();
 8015240:	f7ff ff1e 	bl	8015080 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015244:	2300      	movs	r3, #0
}
 8015246:	4618      	mov	r0, r3
 8015248:	3718      	adds	r7, #24
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}
 801524e:	bf00      	nop
 8015250:	e000ed00 	.word	0xe000ed00
 8015254:	410fc271 	.word	0x410fc271
 8015258:	410fc270 	.word	0x410fc270
 801525c:	e000e400 	.word	0xe000e400
 8015260:	24001964 	.word	0x24001964
 8015264:	24001968 	.word	0x24001968
 8015268:	e000ed20 	.word	0xe000ed20
 801526c:	24000098 	.word	0x24000098
 8015270:	e000ef34 	.word	0xe000ef34

08015274 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015274:	b480      	push	{r7}
 8015276:	b083      	sub	sp, #12
 8015278:	af00      	add	r7, sp, #0
	__asm volatile
 801527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801527e:	f383 8811 	msr	BASEPRI, r3
 8015282:	f3bf 8f6f 	isb	sy
 8015286:	f3bf 8f4f 	dsb	sy
 801528a:	607b      	str	r3, [r7, #4]
}
 801528c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801528e:	4b0f      	ldr	r3, [pc, #60]	; (80152cc <vPortEnterCritical+0x58>)
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	3301      	adds	r3, #1
 8015294:	4a0d      	ldr	r2, [pc, #52]	; (80152cc <vPortEnterCritical+0x58>)
 8015296:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015298:	4b0c      	ldr	r3, [pc, #48]	; (80152cc <vPortEnterCritical+0x58>)
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	2b01      	cmp	r3, #1
 801529e:	d10f      	bne.n	80152c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80152a0:	4b0b      	ldr	r3, [pc, #44]	; (80152d0 <vPortEnterCritical+0x5c>)
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	b2db      	uxtb	r3, r3
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d00a      	beq.n	80152c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80152aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152ae:	f383 8811 	msr	BASEPRI, r3
 80152b2:	f3bf 8f6f 	isb	sy
 80152b6:	f3bf 8f4f 	dsb	sy
 80152ba:	603b      	str	r3, [r7, #0]
}
 80152bc:	bf00      	nop
 80152be:	e7fe      	b.n	80152be <vPortEnterCritical+0x4a>
	}
}
 80152c0:	bf00      	nop
 80152c2:	370c      	adds	r7, #12
 80152c4:	46bd      	mov	sp, r7
 80152c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ca:	4770      	bx	lr
 80152cc:	24000098 	.word	0x24000098
 80152d0:	e000ed04 	.word	0xe000ed04

080152d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80152d4:	b480      	push	{r7}
 80152d6:	b083      	sub	sp, #12
 80152d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80152da:	4b12      	ldr	r3, [pc, #72]	; (8015324 <vPortExitCritical+0x50>)
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d10a      	bne.n	80152f8 <vPortExitCritical+0x24>
	__asm volatile
 80152e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152e6:	f383 8811 	msr	BASEPRI, r3
 80152ea:	f3bf 8f6f 	isb	sy
 80152ee:	f3bf 8f4f 	dsb	sy
 80152f2:	607b      	str	r3, [r7, #4]
}
 80152f4:	bf00      	nop
 80152f6:	e7fe      	b.n	80152f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80152f8:	4b0a      	ldr	r3, [pc, #40]	; (8015324 <vPortExitCritical+0x50>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	3b01      	subs	r3, #1
 80152fe:	4a09      	ldr	r2, [pc, #36]	; (8015324 <vPortExitCritical+0x50>)
 8015300:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015302:	4b08      	ldr	r3, [pc, #32]	; (8015324 <vPortExitCritical+0x50>)
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d105      	bne.n	8015316 <vPortExitCritical+0x42>
 801530a:	2300      	movs	r3, #0
 801530c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801530e:	683b      	ldr	r3, [r7, #0]
 8015310:	f383 8811 	msr	BASEPRI, r3
}
 8015314:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015316:	bf00      	nop
 8015318:	370c      	adds	r7, #12
 801531a:	46bd      	mov	sp, r7
 801531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015320:	4770      	bx	lr
 8015322:	bf00      	nop
 8015324:	24000098 	.word	0x24000098
	...

08015330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015330:	f3ef 8009 	mrs	r0, PSP
 8015334:	f3bf 8f6f 	isb	sy
 8015338:	4b15      	ldr	r3, [pc, #84]	; (8015390 <pxCurrentTCBConst>)
 801533a:	681a      	ldr	r2, [r3, #0]
 801533c:	f01e 0f10 	tst.w	lr, #16
 8015340:	bf08      	it	eq
 8015342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801534a:	6010      	str	r0, [r2, #0]
 801534c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015354:	f380 8811 	msr	BASEPRI, r0
 8015358:	f3bf 8f4f 	dsb	sy
 801535c:	f3bf 8f6f 	isb	sy
 8015360:	f7fe feea 	bl	8014138 <vTaskSwitchContext>
 8015364:	f04f 0000 	mov.w	r0, #0
 8015368:	f380 8811 	msr	BASEPRI, r0
 801536c:	bc09      	pop	{r0, r3}
 801536e:	6819      	ldr	r1, [r3, #0]
 8015370:	6808      	ldr	r0, [r1, #0]
 8015372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015376:	f01e 0f10 	tst.w	lr, #16
 801537a:	bf08      	it	eq
 801537c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015380:	f380 8809 	msr	PSP, r0
 8015384:	f3bf 8f6f 	isb	sy
 8015388:	4770      	bx	lr
 801538a:	bf00      	nop
 801538c:	f3af 8000 	nop.w

08015390 <pxCurrentTCBConst>:
 8015390:	24001338 	.word	0x24001338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015394:	bf00      	nop
 8015396:	bf00      	nop

08015398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b082      	sub	sp, #8
 801539c:	af00      	add	r7, sp, #0
	__asm volatile
 801539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153a2:	f383 8811 	msr	BASEPRI, r3
 80153a6:	f3bf 8f6f 	isb	sy
 80153aa:	f3bf 8f4f 	dsb	sy
 80153ae:	607b      	str	r3, [r7, #4]
}
 80153b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80153b2:	f7fe fe07 	bl	8013fc4 <xTaskIncrementTick>
 80153b6:	4603      	mov	r3, r0
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d003      	beq.n	80153c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80153bc:	4b06      	ldr	r3, [pc, #24]	; (80153d8 <xPortSysTickHandler+0x40>)
 80153be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153c2:	601a      	str	r2, [r3, #0]
 80153c4:	2300      	movs	r3, #0
 80153c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80153c8:	683b      	ldr	r3, [r7, #0]
 80153ca:	f383 8811 	msr	BASEPRI, r3
}
 80153ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80153d0:	bf00      	nop
 80153d2:	3708      	adds	r7, #8
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bd80      	pop	{r7, pc}
 80153d8:	e000ed04 	.word	0xe000ed04

080153dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80153dc:	b480      	push	{r7}
 80153de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80153e0:	4b0b      	ldr	r3, [pc, #44]	; (8015410 <vPortSetupTimerInterrupt+0x34>)
 80153e2:	2200      	movs	r2, #0
 80153e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80153e6:	4b0b      	ldr	r3, [pc, #44]	; (8015414 <vPortSetupTimerInterrupt+0x38>)
 80153e8:	2200      	movs	r2, #0
 80153ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80153ec:	4b0a      	ldr	r3, [pc, #40]	; (8015418 <vPortSetupTimerInterrupt+0x3c>)
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	4a0a      	ldr	r2, [pc, #40]	; (801541c <vPortSetupTimerInterrupt+0x40>)
 80153f2:	fba2 2303 	umull	r2, r3, r2, r3
 80153f6:	099b      	lsrs	r3, r3, #6
 80153f8:	4a09      	ldr	r2, [pc, #36]	; (8015420 <vPortSetupTimerInterrupt+0x44>)
 80153fa:	3b01      	subs	r3, #1
 80153fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80153fe:	4b04      	ldr	r3, [pc, #16]	; (8015410 <vPortSetupTimerInterrupt+0x34>)
 8015400:	2207      	movs	r2, #7
 8015402:	601a      	str	r2, [r3, #0]
}
 8015404:	bf00      	nop
 8015406:	46bd      	mov	sp, r7
 8015408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540c:	4770      	bx	lr
 801540e:	bf00      	nop
 8015410:	e000e010 	.word	0xe000e010
 8015414:	e000e018 	.word	0xe000e018
 8015418:	24000088 	.word	0x24000088
 801541c:	10624dd3 	.word	0x10624dd3
 8015420:	e000e014 	.word	0xe000e014

08015424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015424:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015434 <vPortEnableVFP+0x10>
 8015428:	6801      	ldr	r1, [r0, #0]
 801542a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801542e:	6001      	str	r1, [r0, #0]
 8015430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015432:	bf00      	nop
 8015434:	e000ed88 	.word	0xe000ed88

08015438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015438:	b480      	push	{r7}
 801543a:	b085      	sub	sp, #20
 801543c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801543e:	f3ef 8305 	mrs	r3, IPSR
 8015442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	2b0f      	cmp	r3, #15
 8015448:	d914      	bls.n	8015474 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801544a:	4a17      	ldr	r2, [pc, #92]	; (80154a8 <vPortValidateInterruptPriority+0x70>)
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	4413      	add	r3, r2
 8015450:	781b      	ldrb	r3, [r3, #0]
 8015452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015454:	4b15      	ldr	r3, [pc, #84]	; (80154ac <vPortValidateInterruptPriority+0x74>)
 8015456:	781b      	ldrb	r3, [r3, #0]
 8015458:	7afa      	ldrb	r2, [r7, #11]
 801545a:	429a      	cmp	r2, r3
 801545c:	d20a      	bcs.n	8015474 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015462:	f383 8811 	msr	BASEPRI, r3
 8015466:	f3bf 8f6f 	isb	sy
 801546a:	f3bf 8f4f 	dsb	sy
 801546e:	607b      	str	r3, [r7, #4]
}
 8015470:	bf00      	nop
 8015472:	e7fe      	b.n	8015472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015474:	4b0e      	ldr	r3, [pc, #56]	; (80154b0 <vPortValidateInterruptPriority+0x78>)
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801547c:	4b0d      	ldr	r3, [pc, #52]	; (80154b4 <vPortValidateInterruptPriority+0x7c>)
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	429a      	cmp	r2, r3
 8015482:	d90a      	bls.n	801549a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015488:	f383 8811 	msr	BASEPRI, r3
 801548c:	f3bf 8f6f 	isb	sy
 8015490:	f3bf 8f4f 	dsb	sy
 8015494:	603b      	str	r3, [r7, #0]
}
 8015496:	bf00      	nop
 8015498:	e7fe      	b.n	8015498 <vPortValidateInterruptPriority+0x60>
	}
 801549a:	bf00      	nop
 801549c:	3714      	adds	r7, #20
 801549e:	46bd      	mov	sp, r7
 80154a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a4:	4770      	bx	lr
 80154a6:	bf00      	nop
 80154a8:	e000e3f0 	.word	0xe000e3f0
 80154ac:	24001964 	.word	0x24001964
 80154b0:	e000ed0c 	.word	0xe000ed0c
 80154b4:	24001968 	.word	0x24001968

080154b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b08a      	sub	sp, #40	; 0x28
 80154bc:	af00      	add	r7, sp, #0
 80154be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80154c0:	2300      	movs	r3, #0
 80154c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80154c4:	f7fe fcc2 	bl	8013e4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80154c8:	4b5b      	ldr	r3, [pc, #364]	; (8015638 <pvPortMalloc+0x180>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d101      	bne.n	80154d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80154d0:	f000 f920 	bl	8015714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80154d4:	4b59      	ldr	r3, [pc, #356]	; (801563c <pvPortMalloc+0x184>)
 80154d6:	681a      	ldr	r2, [r3, #0]
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	4013      	ands	r3, r2
 80154dc:	2b00      	cmp	r3, #0
 80154de:	f040 8093 	bne.w	8015608 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d01d      	beq.n	8015524 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80154e8:	2208      	movs	r2, #8
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	4413      	add	r3, r2
 80154ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	f003 0307 	and.w	r3, r3, #7
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d014      	beq.n	8015524 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	f023 0307 	bic.w	r3, r3, #7
 8015500:	3308      	adds	r3, #8
 8015502:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	f003 0307 	and.w	r3, r3, #7
 801550a:	2b00      	cmp	r3, #0
 801550c:	d00a      	beq.n	8015524 <pvPortMalloc+0x6c>
	__asm volatile
 801550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015512:	f383 8811 	msr	BASEPRI, r3
 8015516:	f3bf 8f6f 	isb	sy
 801551a:	f3bf 8f4f 	dsb	sy
 801551e:	617b      	str	r3, [r7, #20]
}
 8015520:	bf00      	nop
 8015522:	e7fe      	b.n	8015522 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d06e      	beq.n	8015608 <pvPortMalloc+0x150>
 801552a:	4b45      	ldr	r3, [pc, #276]	; (8015640 <pvPortMalloc+0x188>)
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	687a      	ldr	r2, [r7, #4]
 8015530:	429a      	cmp	r2, r3
 8015532:	d869      	bhi.n	8015608 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015534:	4b43      	ldr	r3, [pc, #268]	; (8015644 <pvPortMalloc+0x18c>)
 8015536:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015538:	4b42      	ldr	r3, [pc, #264]	; (8015644 <pvPortMalloc+0x18c>)
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801553e:	e004      	b.n	801554a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015542:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801554c:	685b      	ldr	r3, [r3, #4]
 801554e:	687a      	ldr	r2, [r7, #4]
 8015550:	429a      	cmp	r2, r3
 8015552:	d903      	bls.n	801555c <pvPortMalloc+0xa4>
 8015554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d1f1      	bne.n	8015540 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801555c:	4b36      	ldr	r3, [pc, #216]	; (8015638 <pvPortMalloc+0x180>)
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015562:	429a      	cmp	r2, r3
 8015564:	d050      	beq.n	8015608 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015566:	6a3b      	ldr	r3, [r7, #32]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	2208      	movs	r2, #8
 801556c:	4413      	add	r3, r2
 801556e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015572:	681a      	ldr	r2, [r3, #0]
 8015574:	6a3b      	ldr	r3, [r7, #32]
 8015576:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801557a:	685a      	ldr	r2, [r3, #4]
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	1ad2      	subs	r2, r2, r3
 8015580:	2308      	movs	r3, #8
 8015582:	005b      	lsls	r3, r3, #1
 8015584:	429a      	cmp	r2, r3
 8015586:	d91f      	bls.n	80155c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	4413      	add	r3, r2
 801558e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015590:	69bb      	ldr	r3, [r7, #24]
 8015592:	f003 0307 	and.w	r3, r3, #7
 8015596:	2b00      	cmp	r3, #0
 8015598:	d00a      	beq.n	80155b0 <pvPortMalloc+0xf8>
	__asm volatile
 801559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801559e:	f383 8811 	msr	BASEPRI, r3
 80155a2:	f3bf 8f6f 	isb	sy
 80155a6:	f3bf 8f4f 	dsb	sy
 80155aa:	613b      	str	r3, [r7, #16]
}
 80155ac:	bf00      	nop
 80155ae:	e7fe      	b.n	80155ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80155b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b2:	685a      	ldr	r2, [r3, #4]
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	1ad2      	subs	r2, r2, r3
 80155b8:	69bb      	ldr	r3, [r7, #24]
 80155ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80155bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155be:	687a      	ldr	r2, [r7, #4]
 80155c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80155c2:	69b8      	ldr	r0, [r7, #24]
 80155c4:	f000 f908 	bl	80157d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80155c8:	4b1d      	ldr	r3, [pc, #116]	; (8015640 <pvPortMalloc+0x188>)
 80155ca:	681a      	ldr	r2, [r3, #0]
 80155cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ce:	685b      	ldr	r3, [r3, #4]
 80155d0:	1ad3      	subs	r3, r2, r3
 80155d2:	4a1b      	ldr	r2, [pc, #108]	; (8015640 <pvPortMalloc+0x188>)
 80155d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80155d6:	4b1a      	ldr	r3, [pc, #104]	; (8015640 <pvPortMalloc+0x188>)
 80155d8:	681a      	ldr	r2, [r3, #0]
 80155da:	4b1b      	ldr	r3, [pc, #108]	; (8015648 <pvPortMalloc+0x190>)
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	429a      	cmp	r2, r3
 80155e0:	d203      	bcs.n	80155ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80155e2:	4b17      	ldr	r3, [pc, #92]	; (8015640 <pvPortMalloc+0x188>)
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	4a18      	ldr	r2, [pc, #96]	; (8015648 <pvPortMalloc+0x190>)
 80155e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80155ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ec:	685a      	ldr	r2, [r3, #4]
 80155ee:	4b13      	ldr	r3, [pc, #76]	; (801563c <pvPortMalloc+0x184>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	431a      	orrs	r2, r3
 80155f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80155f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155fa:	2200      	movs	r2, #0
 80155fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80155fe:	4b13      	ldr	r3, [pc, #76]	; (801564c <pvPortMalloc+0x194>)
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	3301      	adds	r3, #1
 8015604:	4a11      	ldr	r2, [pc, #68]	; (801564c <pvPortMalloc+0x194>)
 8015606:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015608:	f7fe fc2e 	bl	8013e68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801560c:	69fb      	ldr	r3, [r7, #28]
 801560e:	f003 0307 	and.w	r3, r3, #7
 8015612:	2b00      	cmp	r3, #0
 8015614:	d00a      	beq.n	801562c <pvPortMalloc+0x174>
	__asm volatile
 8015616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801561a:	f383 8811 	msr	BASEPRI, r3
 801561e:	f3bf 8f6f 	isb	sy
 8015622:	f3bf 8f4f 	dsb	sy
 8015626:	60fb      	str	r3, [r7, #12]
}
 8015628:	bf00      	nop
 801562a:	e7fe      	b.n	801562a <pvPortMalloc+0x172>
	return pvReturn;
 801562c:	69fb      	ldr	r3, [r7, #28]
}
 801562e:	4618      	mov	r0, r3
 8015630:	3728      	adds	r7, #40	; 0x28
 8015632:	46bd      	mov	sp, r7
 8015634:	bd80      	pop	{r7, pc}
 8015636:	bf00      	nop
 8015638:	24005574 	.word	0x24005574
 801563c:	24005588 	.word	0x24005588
 8015640:	24005578 	.word	0x24005578
 8015644:	2400556c 	.word	0x2400556c
 8015648:	2400557c 	.word	0x2400557c
 801564c:	24005580 	.word	0x24005580

08015650 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b086      	sub	sp, #24
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d04d      	beq.n	80156fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015662:	2308      	movs	r3, #8
 8015664:	425b      	negs	r3, r3
 8015666:	697a      	ldr	r2, [r7, #20]
 8015668:	4413      	add	r3, r2
 801566a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801566c:	697b      	ldr	r3, [r7, #20]
 801566e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015670:	693b      	ldr	r3, [r7, #16]
 8015672:	685a      	ldr	r2, [r3, #4]
 8015674:	4b24      	ldr	r3, [pc, #144]	; (8015708 <vPortFree+0xb8>)
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	4013      	ands	r3, r2
 801567a:	2b00      	cmp	r3, #0
 801567c:	d10a      	bne.n	8015694 <vPortFree+0x44>
	__asm volatile
 801567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015682:	f383 8811 	msr	BASEPRI, r3
 8015686:	f3bf 8f6f 	isb	sy
 801568a:	f3bf 8f4f 	dsb	sy
 801568e:	60fb      	str	r3, [r7, #12]
}
 8015690:	bf00      	nop
 8015692:	e7fe      	b.n	8015692 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015694:	693b      	ldr	r3, [r7, #16]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d00a      	beq.n	80156b2 <vPortFree+0x62>
	__asm volatile
 801569c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156a0:	f383 8811 	msr	BASEPRI, r3
 80156a4:	f3bf 8f6f 	isb	sy
 80156a8:	f3bf 8f4f 	dsb	sy
 80156ac:	60bb      	str	r3, [r7, #8]
}
 80156ae:	bf00      	nop
 80156b0:	e7fe      	b.n	80156b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80156b2:	693b      	ldr	r3, [r7, #16]
 80156b4:	685a      	ldr	r2, [r3, #4]
 80156b6:	4b14      	ldr	r3, [pc, #80]	; (8015708 <vPortFree+0xb8>)
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	4013      	ands	r3, r2
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d01e      	beq.n	80156fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80156c0:	693b      	ldr	r3, [r7, #16]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d11a      	bne.n	80156fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80156c8:	693b      	ldr	r3, [r7, #16]
 80156ca:	685a      	ldr	r2, [r3, #4]
 80156cc:	4b0e      	ldr	r3, [pc, #56]	; (8015708 <vPortFree+0xb8>)
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	43db      	mvns	r3, r3
 80156d2:	401a      	ands	r2, r3
 80156d4:	693b      	ldr	r3, [r7, #16]
 80156d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80156d8:	f7fe fbb8 	bl	8013e4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80156dc:	693b      	ldr	r3, [r7, #16]
 80156de:	685a      	ldr	r2, [r3, #4]
 80156e0:	4b0a      	ldr	r3, [pc, #40]	; (801570c <vPortFree+0xbc>)
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	4413      	add	r3, r2
 80156e6:	4a09      	ldr	r2, [pc, #36]	; (801570c <vPortFree+0xbc>)
 80156e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80156ea:	6938      	ldr	r0, [r7, #16]
 80156ec:	f000 f874 	bl	80157d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80156f0:	4b07      	ldr	r3, [pc, #28]	; (8015710 <vPortFree+0xc0>)
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	3301      	adds	r3, #1
 80156f6:	4a06      	ldr	r2, [pc, #24]	; (8015710 <vPortFree+0xc0>)
 80156f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80156fa:	f7fe fbb5 	bl	8013e68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80156fe:	bf00      	nop
 8015700:	3718      	adds	r7, #24
 8015702:	46bd      	mov	sp, r7
 8015704:	bd80      	pop	{r7, pc}
 8015706:	bf00      	nop
 8015708:	24005588 	.word	0x24005588
 801570c:	24005578 	.word	0x24005578
 8015710:	24005584 	.word	0x24005584

08015714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015714:	b480      	push	{r7}
 8015716:	b085      	sub	sp, #20
 8015718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801571a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801571e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015720:	4b27      	ldr	r3, [pc, #156]	; (80157c0 <prvHeapInit+0xac>)
 8015722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	f003 0307 	and.w	r3, r3, #7
 801572a:	2b00      	cmp	r3, #0
 801572c:	d00c      	beq.n	8015748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	3307      	adds	r3, #7
 8015732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	f023 0307 	bic.w	r3, r3, #7
 801573a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801573c:	68ba      	ldr	r2, [r7, #8]
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	1ad3      	subs	r3, r2, r3
 8015742:	4a1f      	ldr	r2, [pc, #124]	; (80157c0 <prvHeapInit+0xac>)
 8015744:	4413      	add	r3, r2
 8015746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801574c:	4a1d      	ldr	r2, [pc, #116]	; (80157c4 <prvHeapInit+0xb0>)
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015752:	4b1c      	ldr	r3, [pc, #112]	; (80157c4 <prvHeapInit+0xb0>)
 8015754:	2200      	movs	r2, #0
 8015756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	68ba      	ldr	r2, [r7, #8]
 801575c:	4413      	add	r3, r2
 801575e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015760:	2208      	movs	r2, #8
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	1a9b      	subs	r3, r3, r2
 8015766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	f023 0307 	bic.w	r3, r3, #7
 801576e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	4a15      	ldr	r2, [pc, #84]	; (80157c8 <prvHeapInit+0xb4>)
 8015774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015776:	4b14      	ldr	r3, [pc, #80]	; (80157c8 <prvHeapInit+0xb4>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	2200      	movs	r2, #0
 801577c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801577e:	4b12      	ldr	r3, [pc, #72]	; (80157c8 <prvHeapInit+0xb4>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	2200      	movs	r2, #0
 8015784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801578a:	683b      	ldr	r3, [r7, #0]
 801578c:	68fa      	ldr	r2, [r7, #12]
 801578e:	1ad2      	subs	r2, r2, r3
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015794:	4b0c      	ldr	r3, [pc, #48]	; (80157c8 <prvHeapInit+0xb4>)
 8015796:	681a      	ldr	r2, [r3, #0]
 8015798:	683b      	ldr	r3, [r7, #0]
 801579a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	685b      	ldr	r3, [r3, #4]
 80157a0:	4a0a      	ldr	r2, [pc, #40]	; (80157cc <prvHeapInit+0xb8>)
 80157a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80157a4:	683b      	ldr	r3, [r7, #0]
 80157a6:	685b      	ldr	r3, [r3, #4]
 80157a8:	4a09      	ldr	r2, [pc, #36]	; (80157d0 <prvHeapInit+0xbc>)
 80157aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80157ac:	4b09      	ldr	r3, [pc, #36]	; (80157d4 <prvHeapInit+0xc0>)
 80157ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80157b2:	601a      	str	r2, [r3, #0]
}
 80157b4:	bf00      	nop
 80157b6:	3714      	adds	r7, #20
 80157b8:	46bd      	mov	sp, r7
 80157ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157be:	4770      	bx	lr
 80157c0:	2400196c 	.word	0x2400196c
 80157c4:	2400556c 	.word	0x2400556c
 80157c8:	24005574 	.word	0x24005574
 80157cc:	2400557c 	.word	0x2400557c
 80157d0:	24005578 	.word	0x24005578
 80157d4:	24005588 	.word	0x24005588

080157d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80157d8:	b480      	push	{r7}
 80157da:	b085      	sub	sp, #20
 80157dc:	af00      	add	r7, sp, #0
 80157de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80157e0:	4b28      	ldr	r3, [pc, #160]	; (8015884 <prvInsertBlockIntoFreeList+0xac>)
 80157e2:	60fb      	str	r3, [r7, #12]
 80157e4:	e002      	b.n	80157ec <prvInsertBlockIntoFreeList+0x14>
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	60fb      	str	r3, [r7, #12]
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	687a      	ldr	r2, [r7, #4]
 80157f2:	429a      	cmp	r2, r3
 80157f4:	d8f7      	bhi.n	80157e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	685b      	ldr	r3, [r3, #4]
 80157fe:	68ba      	ldr	r2, [r7, #8]
 8015800:	4413      	add	r3, r2
 8015802:	687a      	ldr	r2, [r7, #4]
 8015804:	429a      	cmp	r2, r3
 8015806:	d108      	bne.n	801581a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	685a      	ldr	r2, [r3, #4]
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	685b      	ldr	r3, [r3, #4]
 8015810:	441a      	add	r2, r3
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	685b      	ldr	r3, [r3, #4]
 8015822:	68ba      	ldr	r2, [r7, #8]
 8015824:	441a      	add	r2, r3
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	429a      	cmp	r2, r3
 801582c:	d118      	bne.n	8015860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	681a      	ldr	r2, [r3, #0]
 8015832:	4b15      	ldr	r3, [pc, #84]	; (8015888 <prvInsertBlockIntoFreeList+0xb0>)
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	429a      	cmp	r2, r3
 8015838:	d00d      	beq.n	8015856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	685a      	ldr	r2, [r3, #4]
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	685b      	ldr	r3, [r3, #4]
 8015844:	441a      	add	r2, r3
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	681a      	ldr	r2, [r3, #0]
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	601a      	str	r2, [r3, #0]
 8015854:	e008      	b.n	8015868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015856:	4b0c      	ldr	r3, [pc, #48]	; (8015888 <prvInsertBlockIntoFreeList+0xb0>)
 8015858:	681a      	ldr	r2, [r3, #0]
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	601a      	str	r2, [r3, #0]
 801585e:	e003      	b.n	8015868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	681a      	ldr	r2, [r3, #0]
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015868:	68fa      	ldr	r2, [r7, #12]
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	429a      	cmp	r2, r3
 801586e:	d002      	beq.n	8015876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	687a      	ldr	r2, [r7, #4]
 8015874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015876:	bf00      	nop
 8015878:	3714      	adds	r7, #20
 801587a:	46bd      	mov	sp, r7
 801587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015880:	4770      	bx	lr
 8015882:	bf00      	nop
 8015884:	2400556c 	.word	0x2400556c
 8015888:	24005574 	.word	0x24005574

0801588c <__errno>:
 801588c:	4b01      	ldr	r3, [pc, #4]	; (8015894 <__errno+0x8>)
 801588e:	6818      	ldr	r0, [r3, #0]
 8015890:	4770      	bx	lr
 8015892:	bf00      	nop
 8015894:	2400009c 	.word	0x2400009c

08015898 <__libc_init_array>:
 8015898:	b570      	push	{r4, r5, r6, lr}
 801589a:	4d0d      	ldr	r5, [pc, #52]	; (80158d0 <__libc_init_array+0x38>)
 801589c:	4c0d      	ldr	r4, [pc, #52]	; (80158d4 <__libc_init_array+0x3c>)
 801589e:	1b64      	subs	r4, r4, r5
 80158a0:	10a4      	asrs	r4, r4, #2
 80158a2:	2600      	movs	r6, #0
 80158a4:	42a6      	cmp	r6, r4
 80158a6:	d109      	bne.n	80158bc <__libc_init_array+0x24>
 80158a8:	4d0b      	ldr	r5, [pc, #44]	; (80158d8 <__libc_init_array+0x40>)
 80158aa:	4c0c      	ldr	r4, [pc, #48]	; (80158dc <__libc_init_array+0x44>)
 80158ac:	f000 fd3c 	bl	8016328 <_init>
 80158b0:	1b64      	subs	r4, r4, r5
 80158b2:	10a4      	asrs	r4, r4, #2
 80158b4:	2600      	movs	r6, #0
 80158b6:	42a6      	cmp	r6, r4
 80158b8:	d105      	bne.n	80158c6 <__libc_init_array+0x2e>
 80158ba:	bd70      	pop	{r4, r5, r6, pc}
 80158bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80158c0:	4798      	blx	r3
 80158c2:	3601      	adds	r6, #1
 80158c4:	e7ee      	b.n	80158a4 <__libc_init_array+0xc>
 80158c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80158ca:	4798      	blx	r3
 80158cc:	3601      	adds	r6, #1
 80158ce:	e7f2      	b.n	80158b6 <__libc_init_array+0x1e>
 80158d0:	08016728 	.word	0x08016728
 80158d4:	08016728 	.word	0x08016728
 80158d8:	08016728 	.word	0x08016728
 80158dc:	0801672c 	.word	0x0801672c

080158e0 <malloc>:
 80158e0:	4b02      	ldr	r3, [pc, #8]	; (80158ec <malloc+0xc>)
 80158e2:	4601      	mov	r1, r0
 80158e4:	6818      	ldr	r0, [r3, #0]
 80158e6:	f000 b88d 	b.w	8015a04 <_malloc_r>
 80158ea:	bf00      	nop
 80158ec:	2400009c 	.word	0x2400009c

080158f0 <free>:
 80158f0:	4b02      	ldr	r3, [pc, #8]	; (80158fc <free+0xc>)
 80158f2:	4601      	mov	r1, r0
 80158f4:	6818      	ldr	r0, [r3, #0]
 80158f6:	f000 b819 	b.w	801592c <_free_r>
 80158fa:	bf00      	nop
 80158fc:	2400009c 	.word	0x2400009c

08015900 <memcpy>:
 8015900:	440a      	add	r2, r1
 8015902:	4291      	cmp	r1, r2
 8015904:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015908:	d100      	bne.n	801590c <memcpy+0xc>
 801590a:	4770      	bx	lr
 801590c:	b510      	push	{r4, lr}
 801590e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015912:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015916:	4291      	cmp	r1, r2
 8015918:	d1f9      	bne.n	801590e <memcpy+0xe>
 801591a:	bd10      	pop	{r4, pc}

0801591c <memset>:
 801591c:	4402      	add	r2, r0
 801591e:	4603      	mov	r3, r0
 8015920:	4293      	cmp	r3, r2
 8015922:	d100      	bne.n	8015926 <memset+0xa>
 8015924:	4770      	bx	lr
 8015926:	f803 1b01 	strb.w	r1, [r3], #1
 801592a:	e7f9      	b.n	8015920 <memset+0x4>

0801592c <_free_r>:
 801592c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801592e:	2900      	cmp	r1, #0
 8015930:	d044      	beq.n	80159bc <_free_r+0x90>
 8015932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015936:	9001      	str	r0, [sp, #4]
 8015938:	2b00      	cmp	r3, #0
 801593a:	f1a1 0404 	sub.w	r4, r1, #4
 801593e:	bfb8      	it	lt
 8015940:	18e4      	addlt	r4, r4, r3
 8015942:	f000 fc39 	bl	80161b8 <__malloc_lock>
 8015946:	4a1e      	ldr	r2, [pc, #120]	; (80159c0 <_free_r+0x94>)
 8015948:	9801      	ldr	r0, [sp, #4]
 801594a:	6813      	ldr	r3, [r2, #0]
 801594c:	b933      	cbnz	r3, 801595c <_free_r+0x30>
 801594e:	6063      	str	r3, [r4, #4]
 8015950:	6014      	str	r4, [r2, #0]
 8015952:	b003      	add	sp, #12
 8015954:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015958:	f000 bc34 	b.w	80161c4 <__malloc_unlock>
 801595c:	42a3      	cmp	r3, r4
 801595e:	d908      	bls.n	8015972 <_free_r+0x46>
 8015960:	6825      	ldr	r5, [r4, #0]
 8015962:	1961      	adds	r1, r4, r5
 8015964:	428b      	cmp	r3, r1
 8015966:	bf01      	itttt	eq
 8015968:	6819      	ldreq	r1, [r3, #0]
 801596a:	685b      	ldreq	r3, [r3, #4]
 801596c:	1949      	addeq	r1, r1, r5
 801596e:	6021      	streq	r1, [r4, #0]
 8015970:	e7ed      	b.n	801594e <_free_r+0x22>
 8015972:	461a      	mov	r2, r3
 8015974:	685b      	ldr	r3, [r3, #4]
 8015976:	b10b      	cbz	r3, 801597c <_free_r+0x50>
 8015978:	42a3      	cmp	r3, r4
 801597a:	d9fa      	bls.n	8015972 <_free_r+0x46>
 801597c:	6811      	ldr	r1, [r2, #0]
 801597e:	1855      	adds	r5, r2, r1
 8015980:	42a5      	cmp	r5, r4
 8015982:	d10b      	bne.n	801599c <_free_r+0x70>
 8015984:	6824      	ldr	r4, [r4, #0]
 8015986:	4421      	add	r1, r4
 8015988:	1854      	adds	r4, r2, r1
 801598a:	42a3      	cmp	r3, r4
 801598c:	6011      	str	r1, [r2, #0]
 801598e:	d1e0      	bne.n	8015952 <_free_r+0x26>
 8015990:	681c      	ldr	r4, [r3, #0]
 8015992:	685b      	ldr	r3, [r3, #4]
 8015994:	6053      	str	r3, [r2, #4]
 8015996:	4421      	add	r1, r4
 8015998:	6011      	str	r1, [r2, #0]
 801599a:	e7da      	b.n	8015952 <_free_r+0x26>
 801599c:	d902      	bls.n	80159a4 <_free_r+0x78>
 801599e:	230c      	movs	r3, #12
 80159a0:	6003      	str	r3, [r0, #0]
 80159a2:	e7d6      	b.n	8015952 <_free_r+0x26>
 80159a4:	6825      	ldr	r5, [r4, #0]
 80159a6:	1961      	adds	r1, r4, r5
 80159a8:	428b      	cmp	r3, r1
 80159aa:	bf04      	itt	eq
 80159ac:	6819      	ldreq	r1, [r3, #0]
 80159ae:	685b      	ldreq	r3, [r3, #4]
 80159b0:	6063      	str	r3, [r4, #4]
 80159b2:	bf04      	itt	eq
 80159b4:	1949      	addeq	r1, r1, r5
 80159b6:	6021      	streq	r1, [r4, #0]
 80159b8:	6054      	str	r4, [r2, #4]
 80159ba:	e7ca      	b.n	8015952 <_free_r+0x26>
 80159bc:	b003      	add	sp, #12
 80159be:	bd30      	pop	{r4, r5, pc}
 80159c0:	2400558c 	.word	0x2400558c

080159c4 <sbrk_aligned>:
 80159c4:	b570      	push	{r4, r5, r6, lr}
 80159c6:	4e0e      	ldr	r6, [pc, #56]	; (8015a00 <sbrk_aligned+0x3c>)
 80159c8:	460c      	mov	r4, r1
 80159ca:	6831      	ldr	r1, [r6, #0]
 80159cc:	4605      	mov	r5, r0
 80159ce:	b911      	cbnz	r1, 80159d6 <sbrk_aligned+0x12>
 80159d0:	f000 f902 	bl	8015bd8 <_sbrk_r>
 80159d4:	6030      	str	r0, [r6, #0]
 80159d6:	4621      	mov	r1, r4
 80159d8:	4628      	mov	r0, r5
 80159da:	f000 f8fd 	bl	8015bd8 <_sbrk_r>
 80159de:	1c43      	adds	r3, r0, #1
 80159e0:	d00a      	beq.n	80159f8 <sbrk_aligned+0x34>
 80159e2:	1cc4      	adds	r4, r0, #3
 80159e4:	f024 0403 	bic.w	r4, r4, #3
 80159e8:	42a0      	cmp	r0, r4
 80159ea:	d007      	beq.n	80159fc <sbrk_aligned+0x38>
 80159ec:	1a21      	subs	r1, r4, r0
 80159ee:	4628      	mov	r0, r5
 80159f0:	f000 f8f2 	bl	8015bd8 <_sbrk_r>
 80159f4:	3001      	adds	r0, #1
 80159f6:	d101      	bne.n	80159fc <sbrk_aligned+0x38>
 80159f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80159fc:	4620      	mov	r0, r4
 80159fe:	bd70      	pop	{r4, r5, r6, pc}
 8015a00:	24005590 	.word	0x24005590

08015a04 <_malloc_r>:
 8015a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a08:	1ccd      	adds	r5, r1, #3
 8015a0a:	f025 0503 	bic.w	r5, r5, #3
 8015a0e:	3508      	adds	r5, #8
 8015a10:	2d0c      	cmp	r5, #12
 8015a12:	bf38      	it	cc
 8015a14:	250c      	movcc	r5, #12
 8015a16:	2d00      	cmp	r5, #0
 8015a18:	4607      	mov	r7, r0
 8015a1a:	db01      	blt.n	8015a20 <_malloc_r+0x1c>
 8015a1c:	42a9      	cmp	r1, r5
 8015a1e:	d905      	bls.n	8015a2c <_malloc_r+0x28>
 8015a20:	230c      	movs	r3, #12
 8015a22:	603b      	str	r3, [r7, #0]
 8015a24:	2600      	movs	r6, #0
 8015a26:	4630      	mov	r0, r6
 8015a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a2c:	4e2e      	ldr	r6, [pc, #184]	; (8015ae8 <_malloc_r+0xe4>)
 8015a2e:	f000 fbc3 	bl	80161b8 <__malloc_lock>
 8015a32:	6833      	ldr	r3, [r6, #0]
 8015a34:	461c      	mov	r4, r3
 8015a36:	bb34      	cbnz	r4, 8015a86 <_malloc_r+0x82>
 8015a38:	4629      	mov	r1, r5
 8015a3a:	4638      	mov	r0, r7
 8015a3c:	f7ff ffc2 	bl	80159c4 <sbrk_aligned>
 8015a40:	1c43      	adds	r3, r0, #1
 8015a42:	4604      	mov	r4, r0
 8015a44:	d14d      	bne.n	8015ae2 <_malloc_r+0xde>
 8015a46:	6834      	ldr	r4, [r6, #0]
 8015a48:	4626      	mov	r6, r4
 8015a4a:	2e00      	cmp	r6, #0
 8015a4c:	d140      	bne.n	8015ad0 <_malloc_r+0xcc>
 8015a4e:	6823      	ldr	r3, [r4, #0]
 8015a50:	4631      	mov	r1, r6
 8015a52:	4638      	mov	r0, r7
 8015a54:	eb04 0803 	add.w	r8, r4, r3
 8015a58:	f000 f8be 	bl	8015bd8 <_sbrk_r>
 8015a5c:	4580      	cmp	r8, r0
 8015a5e:	d13a      	bne.n	8015ad6 <_malloc_r+0xd2>
 8015a60:	6821      	ldr	r1, [r4, #0]
 8015a62:	3503      	adds	r5, #3
 8015a64:	1a6d      	subs	r5, r5, r1
 8015a66:	f025 0503 	bic.w	r5, r5, #3
 8015a6a:	3508      	adds	r5, #8
 8015a6c:	2d0c      	cmp	r5, #12
 8015a6e:	bf38      	it	cc
 8015a70:	250c      	movcc	r5, #12
 8015a72:	4629      	mov	r1, r5
 8015a74:	4638      	mov	r0, r7
 8015a76:	f7ff ffa5 	bl	80159c4 <sbrk_aligned>
 8015a7a:	3001      	adds	r0, #1
 8015a7c:	d02b      	beq.n	8015ad6 <_malloc_r+0xd2>
 8015a7e:	6823      	ldr	r3, [r4, #0]
 8015a80:	442b      	add	r3, r5
 8015a82:	6023      	str	r3, [r4, #0]
 8015a84:	e00e      	b.n	8015aa4 <_malloc_r+0xa0>
 8015a86:	6822      	ldr	r2, [r4, #0]
 8015a88:	1b52      	subs	r2, r2, r5
 8015a8a:	d41e      	bmi.n	8015aca <_malloc_r+0xc6>
 8015a8c:	2a0b      	cmp	r2, #11
 8015a8e:	d916      	bls.n	8015abe <_malloc_r+0xba>
 8015a90:	1961      	adds	r1, r4, r5
 8015a92:	42a3      	cmp	r3, r4
 8015a94:	6025      	str	r5, [r4, #0]
 8015a96:	bf18      	it	ne
 8015a98:	6059      	strne	r1, [r3, #4]
 8015a9a:	6863      	ldr	r3, [r4, #4]
 8015a9c:	bf08      	it	eq
 8015a9e:	6031      	streq	r1, [r6, #0]
 8015aa0:	5162      	str	r2, [r4, r5]
 8015aa2:	604b      	str	r3, [r1, #4]
 8015aa4:	4638      	mov	r0, r7
 8015aa6:	f104 060b 	add.w	r6, r4, #11
 8015aaa:	f000 fb8b 	bl	80161c4 <__malloc_unlock>
 8015aae:	f026 0607 	bic.w	r6, r6, #7
 8015ab2:	1d23      	adds	r3, r4, #4
 8015ab4:	1af2      	subs	r2, r6, r3
 8015ab6:	d0b6      	beq.n	8015a26 <_malloc_r+0x22>
 8015ab8:	1b9b      	subs	r3, r3, r6
 8015aba:	50a3      	str	r3, [r4, r2]
 8015abc:	e7b3      	b.n	8015a26 <_malloc_r+0x22>
 8015abe:	6862      	ldr	r2, [r4, #4]
 8015ac0:	42a3      	cmp	r3, r4
 8015ac2:	bf0c      	ite	eq
 8015ac4:	6032      	streq	r2, [r6, #0]
 8015ac6:	605a      	strne	r2, [r3, #4]
 8015ac8:	e7ec      	b.n	8015aa4 <_malloc_r+0xa0>
 8015aca:	4623      	mov	r3, r4
 8015acc:	6864      	ldr	r4, [r4, #4]
 8015ace:	e7b2      	b.n	8015a36 <_malloc_r+0x32>
 8015ad0:	4634      	mov	r4, r6
 8015ad2:	6876      	ldr	r6, [r6, #4]
 8015ad4:	e7b9      	b.n	8015a4a <_malloc_r+0x46>
 8015ad6:	230c      	movs	r3, #12
 8015ad8:	603b      	str	r3, [r7, #0]
 8015ada:	4638      	mov	r0, r7
 8015adc:	f000 fb72 	bl	80161c4 <__malloc_unlock>
 8015ae0:	e7a1      	b.n	8015a26 <_malloc_r+0x22>
 8015ae2:	6025      	str	r5, [r4, #0]
 8015ae4:	e7de      	b.n	8015aa4 <_malloc_r+0xa0>
 8015ae6:	bf00      	nop
 8015ae8:	2400558c 	.word	0x2400558c

08015aec <_puts_r>:
 8015aec:	b570      	push	{r4, r5, r6, lr}
 8015aee:	460e      	mov	r6, r1
 8015af0:	4605      	mov	r5, r0
 8015af2:	b118      	cbz	r0, 8015afc <_puts_r+0x10>
 8015af4:	6983      	ldr	r3, [r0, #24]
 8015af6:	b90b      	cbnz	r3, 8015afc <_puts_r+0x10>
 8015af8:	f000 fa58 	bl	8015fac <__sinit>
 8015afc:	69ab      	ldr	r3, [r5, #24]
 8015afe:	68ac      	ldr	r4, [r5, #8]
 8015b00:	b913      	cbnz	r3, 8015b08 <_puts_r+0x1c>
 8015b02:	4628      	mov	r0, r5
 8015b04:	f000 fa52 	bl	8015fac <__sinit>
 8015b08:	4b2c      	ldr	r3, [pc, #176]	; (8015bbc <_puts_r+0xd0>)
 8015b0a:	429c      	cmp	r4, r3
 8015b0c:	d120      	bne.n	8015b50 <_puts_r+0x64>
 8015b0e:	686c      	ldr	r4, [r5, #4]
 8015b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015b12:	07db      	lsls	r3, r3, #31
 8015b14:	d405      	bmi.n	8015b22 <_puts_r+0x36>
 8015b16:	89a3      	ldrh	r3, [r4, #12]
 8015b18:	0598      	lsls	r0, r3, #22
 8015b1a:	d402      	bmi.n	8015b22 <_puts_r+0x36>
 8015b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b1e:	f000 fae3 	bl	80160e8 <__retarget_lock_acquire_recursive>
 8015b22:	89a3      	ldrh	r3, [r4, #12]
 8015b24:	0719      	lsls	r1, r3, #28
 8015b26:	d51d      	bpl.n	8015b64 <_puts_r+0x78>
 8015b28:	6923      	ldr	r3, [r4, #16]
 8015b2a:	b1db      	cbz	r3, 8015b64 <_puts_r+0x78>
 8015b2c:	3e01      	subs	r6, #1
 8015b2e:	68a3      	ldr	r3, [r4, #8]
 8015b30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015b34:	3b01      	subs	r3, #1
 8015b36:	60a3      	str	r3, [r4, #8]
 8015b38:	bb39      	cbnz	r1, 8015b8a <_puts_r+0x9e>
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	da38      	bge.n	8015bb0 <_puts_r+0xc4>
 8015b3e:	4622      	mov	r2, r4
 8015b40:	210a      	movs	r1, #10
 8015b42:	4628      	mov	r0, r5
 8015b44:	f000 f858 	bl	8015bf8 <__swbuf_r>
 8015b48:	3001      	adds	r0, #1
 8015b4a:	d011      	beq.n	8015b70 <_puts_r+0x84>
 8015b4c:	250a      	movs	r5, #10
 8015b4e:	e011      	b.n	8015b74 <_puts_r+0x88>
 8015b50:	4b1b      	ldr	r3, [pc, #108]	; (8015bc0 <_puts_r+0xd4>)
 8015b52:	429c      	cmp	r4, r3
 8015b54:	d101      	bne.n	8015b5a <_puts_r+0x6e>
 8015b56:	68ac      	ldr	r4, [r5, #8]
 8015b58:	e7da      	b.n	8015b10 <_puts_r+0x24>
 8015b5a:	4b1a      	ldr	r3, [pc, #104]	; (8015bc4 <_puts_r+0xd8>)
 8015b5c:	429c      	cmp	r4, r3
 8015b5e:	bf08      	it	eq
 8015b60:	68ec      	ldreq	r4, [r5, #12]
 8015b62:	e7d5      	b.n	8015b10 <_puts_r+0x24>
 8015b64:	4621      	mov	r1, r4
 8015b66:	4628      	mov	r0, r5
 8015b68:	f000 f898 	bl	8015c9c <__swsetup_r>
 8015b6c:	2800      	cmp	r0, #0
 8015b6e:	d0dd      	beq.n	8015b2c <_puts_r+0x40>
 8015b70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8015b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015b76:	07da      	lsls	r2, r3, #31
 8015b78:	d405      	bmi.n	8015b86 <_puts_r+0x9a>
 8015b7a:	89a3      	ldrh	r3, [r4, #12]
 8015b7c:	059b      	lsls	r3, r3, #22
 8015b7e:	d402      	bmi.n	8015b86 <_puts_r+0x9a>
 8015b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b82:	f000 fab2 	bl	80160ea <__retarget_lock_release_recursive>
 8015b86:	4628      	mov	r0, r5
 8015b88:	bd70      	pop	{r4, r5, r6, pc}
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	da04      	bge.n	8015b98 <_puts_r+0xac>
 8015b8e:	69a2      	ldr	r2, [r4, #24]
 8015b90:	429a      	cmp	r2, r3
 8015b92:	dc06      	bgt.n	8015ba2 <_puts_r+0xb6>
 8015b94:	290a      	cmp	r1, #10
 8015b96:	d004      	beq.n	8015ba2 <_puts_r+0xb6>
 8015b98:	6823      	ldr	r3, [r4, #0]
 8015b9a:	1c5a      	adds	r2, r3, #1
 8015b9c:	6022      	str	r2, [r4, #0]
 8015b9e:	7019      	strb	r1, [r3, #0]
 8015ba0:	e7c5      	b.n	8015b2e <_puts_r+0x42>
 8015ba2:	4622      	mov	r2, r4
 8015ba4:	4628      	mov	r0, r5
 8015ba6:	f000 f827 	bl	8015bf8 <__swbuf_r>
 8015baa:	3001      	adds	r0, #1
 8015bac:	d1bf      	bne.n	8015b2e <_puts_r+0x42>
 8015bae:	e7df      	b.n	8015b70 <_puts_r+0x84>
 8015bb0:	6823      	ldr	r3, [r4, #0]
 8015bb2:	250a      	movs	r5, #10
 8015bb4:	1c5a      	adds	r2, r3, #1
 8015bb6:	6022      	str	r2, [r4, #0]
 8015bb8:	701d      	strb	r5, [r3, #0]
 8015bba:	e7db      	b.n	8015b74 <_puts_r+0x88>
 8015bbc:	080166e0 	.word	0x080166e0
 8015bc0:	08016700 	.word	0x08016700
 8015bc4:	080166c0 	.word	0x080166c0

08015bc8 <puts>:
 8015bc8:	4b02      	ldr	r3, [pc, #8]	; (8015bd4 <puts+0xc>)
 8015bca:	4601      	mov	r1, r0
 8015bcc:	6818      	ldr	r0, [r3, #0]
 8015bce:	f7ff bf8d 	b.w	8015aec <_puts_r>
 8015bd2:	bf00      	nop
 8015bd4:	2400009c 	.word	0x2400009c

08015bd8 <_sbrk_r>:
 8015bd8:	b538      	push	{r3, r4, r5, lr}
 8015bda:	4d06      	ldr	r5, [pc, #24]	; (8015bf4 <_sbrk_r+0x1c>)
 8015bdc:	2300      	movs	r3, #0
 8015bde:	4604      	mov	r4, r0
 8015be0:	4608      	mov	r0, r1
 8015be2:	602b      	str	r3, [r5, #0]
 8015be4:	f7ed fc94 	bl	8003510 <_sbrk>
 8015be8:	1c43      	adds	r3, r0, #1
 8015bea:	d102      	bne.n	8015bf2 <_sbrk_r+0x1a>
 8015bec:	682b      	ldr	r3, [r5, #0]
 8015bee:	b103      	cbz	r3, 8015bf2 <_sbrk_r+0x1a>
 8015bf0:	6023      	str	r3, [r4, #0]
 8015bf2:	bd38      	pop	{r3, r4, r5, pc}
 8015bf4:	24005598 	.word	0x24005598

08015bf8 <__swbuf_r>:
 8015bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bfa:	460e      	mov	r6, r1
 8015bfc:	4614      	mov	r4, r2
 8015bfe:	4605      	mov	r5, r0
 8015c00:	b118      	cbz	r0, 8015c0a <__swbuf_r+0x12>
 8015c02:	6983      	ldr	r3, [r0, #24]
 8015c04:	b90b      	cbnz	r3, 8015c0a <__swbuf_r+0x12>
 8015c06:	f000 f9d1 	bl	8015fac <__sinit>
 8015c0a:	4b21      	ldr	r3, [pc, #132]	; (8015c90 <__swbuf_r+0x98>)
 8015c0c:	429c      	cmp	r4, r3
 8015c0e:	d12b      	bne.n	8015c68 <__swbuf_r+0x70>
 8015c10:	686c      	ldr	r4, [r5, #4]
 8015c12:	69a3      	ldr	r3, [r4, #24]
 8015c14:	60a3      	str	r3, [r4, #8]
 8015c16:	89a3      	ldrh	r3, [r4, #12]
 8015c18:	071a      	lsls	r2, r3, #28
 8015c1a:	d52f      	bpl.n	8015c7c <__swbuf_r+0x84>
 8015c1c:	6923      	ldr	r3, [r4, #16]
 8015c1e:	b36b      	cbz	r3, 8015c7c <__swbuf_r+0x84>
 8015c20:	6923      	ldr	r3, [r4, #16]
 8015c22:	6820      	ldr	r0, [r4, #0]
 8015c24:	1ac0      	subs	r0, r0, r3
 8015c26:	6963      	ldr	r3, [r4, #20]
 8015c28:	b2f6      	uxtb	r6, r6
 8015c2a:	4283      	cmp	r3, r0
 8015c2c:	4637      	mov	r7, r6
 8015c2e:	dc04      	bgt.n	8015c3a <__swbuf_r+0x42>
 8015c30:	4621      	mov	r1, r4
 8015c32:	4628      	mov	r0, r5
 8015c34:	f000 f926 	bl	8015e84 <_fflush_r>
 8015c38:	bb30      	cbnz	r0, 8015c88 <__swbuf_r+0x90>
 8015c3a:	68a3      	ldr	r3, [r4, #8]
 8015c3c:	3b01      	subs	r3, #1
 8015c3e:	60a3      	str	r3, [r4, #8]
 8015c40:	6823      	ldr	r3, [r4, #0]
 8015c42:	1c5a      	adds	r2, r3, #1
 8015c44:	6022      	str	r2, [r4, #0]
 8015c46:	701e      	strb	r6, [r3, #0]
 8015c48:	6963      	ldr	r3, [r4, #20]
 8015c4a:	3001      	adds	r0, #1
 8015c4c:	4283      	cmp	r3, r0
 8015c4e:	d004      	beq.n	8015c5a <__swbuf_r+0x62>
 8015c50:	89a3      	ldrh	r3, [r4, #12]
 8015c52:	07db      	lsls	r3, r3, #31
 8015c54:	d506      	bpl.n	8015c64 <__swbuf_r+0x6c>
 8015c56:	2e0a      	cmp	r6, #10
 8015c58:	d104      	bne.n	8015c64 <__swbuf_r+0x6c>
 8015c5a:	4621      	mov	r1, r4
 8015c5c:	4628      	mov	r0, r5
 8015c5e:	f000 f911 	bl	8015e84 <_fflush_r>
 8015c62:	b988      	cbnz	r0, 8015c88 <__swbuf_r+0x90>
 8015c64:	4638      	mov	r0, r7
 8015c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c68:	4b0a      	ldr	r3, [pc, #40]	; (8015c94 <__swbuf_r+0x9c>)
 8015c6a:	429c      	cmp	r4, r3
 8015c6c:	d101      	bne.n	8015c72 <__swbuf_r+0x7a>
 8015c6e:	68ac      	ldr	r4, [r5, #8]
 8015c70:	e7cf      	b.n	8015c12 <__swbuf_r+0x1a>
 8015c72:	4b09      	ldr	r3, [pc, #36]	; (8015c98 <__swbuf_r+0xa0>)
 8015c74:	429c      	cmp	r4, r3
 8015c76:	bf08      	it	eq
 8015c78:	68ec      	ldreq	r4, [r5, #12]
 8015c7a:	e7ca      	b.n	8015c12 <__swbuf_r+0x1a>
 8015c7c:	4621      	mov	r1, r4
 8015c7e:	4628      	mov	r0, r5
 8015c80:	f000 f80c 	bl	8015c9c <__swsetup_r>
 8015c84:	2800      	cmp	r0, #0
 8015c86:	d0cb      	beq.n	8015c20 <__swbuf_r+0x28>
 8015c88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015c8c:	e7ea      	b.n	8015c64 <__swbuf_r+0x6c>
 8015c8e:	bf00      	nop
 8015c90:	080166e0 	.word	0x080166e0
 8015c94:	08016700 	.word	0x08016700
 8015c98:	080166c0 	.word	0x080166c0

08015c9c <__swsetup_r>:
 8015c9c:	4b32      	ldr	r3, [pc, #200]	; (8015d68 <__swsetup_r+0xcc>)
 8015c9e:	b570      	push	{r4, r5, r6, lr}
 8015ca0:	681d      	ldr	r5, [r3, #0]
 8015ca2:	4606      	mov	r6, r0
 8015ca4:	460c      	mov	r4, r1
 8015ca6:	b125      	cbz	r5, 8015cb2 <__swsetup_r+0x16>
 8015ca8:	69ab      	ldr	r3, [r5, #24]
 8015caa:	b913      	cbnz	r3, 8015cb2 <__swsetup_r+0x16>
 8015cac:	4628      	mov	r0, r5
 8015cae:	f000 f97d 	bl	8015fac <__sinit>
 8015cb2:	4b2e      	ldr	r3, [pc, #184]	; (8015d6c <__swsetup_r+0xd0>)
 8015cb4:	429c      	cmp	r4, r3
 8015cb6:	d10f      	bne.n	8015cd8 <__swsetup_r+0x3c>
 8015cb8:	686c      	ldr	r4, [r5, #4]
 8015cba:	89a3      	ldrh	r3, [r4, #12]
 8015cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015cc0:	0719      	lsls	r1, r3, #28
 8015cc2:	d42c      	bmi.n	8015d1e <__swsetup_r+0x82>
 8015cc4:	06dd      	lsls	r5, r3, #27
 8015cc6:	d411      	bmi.n	8015cec <__swsetup_r+0x50>
 8015cc8:	2309      	movs	r3, #9
 8015cca:	6033      	str	r3, [r6, #0]
 8015ccc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015cd0:	81a3      	strh	r3, [r4, #12]
 8015cd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015cd6:	e03e      	b.n	8015d56 <__swsetup_r+0xba>
 8015cd8:	4b25      	ldr	r3, [pc, #148]	; (8015d70 <__swsetup_r+0xd4>)
 8015cda:	429c      	cmp	r4, r3
 8015cdc:	d101      	bne.n	8015ce2 <__swsetup_r+0x46>
 8015cde:	68ac      	ldr	r4, [r5, #8]
 8015ce0:	e7eb      	b.n	8015cba <__swsetup_r+0x1e>
 8015ce2:	4b24      	ldr	r3, [pc, #144]	; (8015d74 <__swsetup_r+0xd8>)
 8015ce4:	429c      	cmp	r4, r3
 8015ce6:	bf08      	it	eq
 8015ce8:	68ec      	ldreq	r4, [r5, #12]
 8015cea:	e7e6      	b.n	8015cba <__swsetup_r+0x1e>
 8015cec:	0758      	lsls	r0, r3, #29
 8015cee:	d512      	bpl.n	8015d16 <__swsetup_r+0x7a>
 8015cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015cf2:	b141      	cbz	r1, 8015d06 <__swsetup_r+0x6a>
 8015cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015cf8:	4299      	cmp	r1, r3
 8015cfa:	d002      	beq.n	8015d02 <__swsetup_r+0x66>
 8015cfc:	4630      	mov	r0, r6
 8015cfe:	f7ff fe15 	bl	801592c <_free_r>
 8015d02:	2300      	movs	r3, #0
 8015d04:	6363      	str	r3, [r4, #52]	; 0x34
 8015d06:	89a3      	ldrh	r3, [r4, #12]
 8015d08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015d0c:	81a3      	strh	r3, [r4, #12]
 8015d0e:	2300      	movs	r3, #0
 8015d10:	6063      	str	r3, [r4, #4]
 8015d12:	6923      	ldr	r3, [r4, #16]
 8015d14:	6023      	str	r3, [r4, #0]
 8015d16:	89a3      	ldrh	r3, [r4, #12]
 8015d18:	f043 0308 	orr.w	r3, r3, #8
 8015d1c:	81a3      	strh	r3, [r4, #12]
 8015d1e:	6923      	ldr	r3, [r4, #16]
 8015d20:	b94b      	cbnz	r3, 8015d36 <__swsetup_r+0x9a>
 8015d22:	89a3      	ldrh	r3, [r4, #12]
 8015d24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d2c:	d003      	beq.n	8015d36 <__swsetup_r+0x9a>
 8015d2e:	4621      	mov	r1, r4
 8015d30:	4630      	mov	r0, r6
 8015d32:	f000 fa01 	bl	8016138 <__smakebuf_r>
 8015d36:	89a0      	ldrh	r0, [r4, #12]
 8015d38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015d3c:	f010 0301 	ands.w	r3, r0, #1
 8015d40:	d00a      	beq.n	8015d58 <__swsetup_r+0xbc>
 8015d42:	2300      	movs	r3, #0
 8015d44:	60a3      	str	r3, [r4, #8]
 8015d46:	6963      	ldr	r3, [r4, #20]
 8015d48:	425b      	negs	r3, r3
 8015d4a:	61a3      	str	r3, [r4, #24]
 8015d4c:	6923      	ldr	r3, [r4, #16]
 8015d4e:	b943      	cbnz	r3, 8015d62 <__swsetup_r+0xc6>
 8015d50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015d54:	d1ba      	bne.n	8015ccc <__swsetup_r+0x30>
 8015d56:	bd70      	pop	{r4, r5, r6, pc}
 8015d58:	0781      	lsls	r1, r0, #30
 8015d5a:	bf58      	it	pl
 8015d5c:	6963      	ldrpl	r3, [r4, #20]
 8015d5e:	60a3      	str	r3, [r4, #8]
 8015d60:	e7f4      	b.n	8015d4c <__swsetup_r+0xb0>
 8015d62:	2000      	movs	r0, #0
 8015d64:	e7f7      	b.n	8015d56 <__swsetup_r+0xba>
 8015d66:	bf00      	nop
 8015d68:	2400009c 	.word	0x2400009c
 8015d6c:	080166e0 	.word	0x080166e0
 8015d70:	08016700 	.word	0x08016700
 8015d74:	080166c0 	.word	0x080166c0

08015d78 <__sflush_r>:
 8015d78:	898a      	ldrh	r2, [r1, #12]
 8015d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d7e:	4605      	mov	r5, r0
 8015d80:	0710      	lsls	r0, r2, #28
 8015d82:	460c      	mov	r4, r1
 8015d84:	d458      	bmi.n	8015e38 <__sflush_r+0xc0>
 8015d86:	684b      	ldr	r3, [r1, #4]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	dc05      	bgt.n	8015d98 <__sflush_r+0x20>
 8015d8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	dc02      	bgt.n	8015d98 <__sflush_r+0x20>
 8015d92:	2000      	movs	r0, #0
 8015d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d9a:	2e00      	cmp	r6, #0
 8015d9c:	d0f9      	beq.n	8015d92 <__sflush_r+0x1a>
 8015d9e:	2300      	movs	r3, #0
 8015da0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015da4:	682f      	ldr	r7, [r5, #0]
 8015da6:	602b      	str	r3, [r5, #0]
 8015da8:	d032      	beq.n	8015e10 <__sflush_r+0x98>
 8015daa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015dac:	89a3      	ldrh	r3, [r4, #12]
 8015dae:	075a      	lsls	r2, r3, #29
 8015db0:	d505      	bpl.n	8015dbe <__sflush_r+0x46>
 8015db2:	6863      	ldr	r3, [r4, #4]
 8015db4:	1ac0      	subs	r0, r0, r3
 8015db6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015db8:	b10b      	cbz	r3, 8015dbe <__sflush_r+0x46>
 8015dba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015dbc:	1ac0      	subs	r0, r0, r3
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	4602      	mov	r2, r0
 8015dc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015dc4:	6a21      	ldr	r1, [r4, #32]
 8015dc6:	4628      	mov	r0, r5
 8015dc8:	47b0      	blx	r6
 8015dca:	1c43      	adds	r3, r0, #1
 8015dcc:	89a3      	ldrh	r3, [r4, #12]
 8015dce:	d106      	bne.n	8015dde <__sflush_r+0x66>
 8015dd0:	6829      	ldr	r1, [r5, #0]
 8015dd2:	291d      	cmp	r1, #29
 8015dd4:	d82c      	bhi.n	8015e30 <__sflush_r+0xb8>
 8015dd6:	4a2a      	ldr	r2, [pc, #168]	; (8015e80 <__sflush_r+0x108>)
 8015dd8:	40ca      	lsrs	r2, r1
 8015dda:	07d6      	lsls	r6, r2, #31
 8015ddc:	d528      	bpl.n	8015e30 <__sflush_r+0xb8>
 8015dde:	2200      	movs	r2, #0
 8015de0:	6062      	str	r2, [r4, #4]
 8015de2:	04d9      	lsls	r1, r3, #19
 8015de4:	6922      	ldr	r2, [r4, #16]
 8015de6:	6022      	str	r2, [r4, #0]
 8015de8:	d504      	bpl.n	8015df4 <__sflush_r+0x7c>
 8015dea:	1c42      	adds	r2, r0, #1
 8015dec:	d101      	bne.n	8015df2 <__sflush_r+0x7a>
 8015dee:	682b      	ldr	r3, [r5, #0]
 8015df0:	b903      	cbnz	r3, 8015df4 <__sflush_r+0x7c>
 8015df2:	6560      	str	r0, [r4, #84]	; 0x54
 8015df4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015df6:	602f      	str	r7, [r5, #0]
 8015df8:	2900      	cmp	r1, #0
 8015dfa:	d0ca      	beq.n	8015d92 <__sflush_r+0x1a>
 8015dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e00:	4299      	cmp	r1, r3
 8015e02:	d002      	beq.n	8015e0a <__sflush_r+0x92>
 8015e04:	4628      	mov	r0, r5
 8015e06:	f7ff fd91 	bl	801592c <_free_r>
 8015e0a:	2000      	movs	r0, #0
 8015e0c:	6360      	str	r0, [r4, #52]	; 0x34
 8015e0e:	e7c1      	b.n	8015d94 <__sflush_r+0x1c>
 8015e10:	6a21      	ldr	r1, [r4, #32]
 8015e12:	2301      	movs	r3, #1
 8015e14:	4628      	mov	r0, r5
 8015e16:	47b0      	blx	r6
 8015e18:	1c41      	adds	r1, r0, #1
 8015e1a:	d1c7      	bne.n	8015dac <__sflush_r+0x34>
 8015e1c:	682b      	ldr	r3, [r5, #0]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d0c4      	beq.n	8015dac <__sflush_r+0x34>
 8015e22:	2b1d      	cmp	r3, #29
 8015e24:	d001      	beq.n	8015e2a <__sflush_r+0xb2>
 8015e26:	2b16      	cmp	r3, #22
 8015e28:	d101      	bne.n	8015e2e <__sflush_r+0xb6>
 8015e2a:	602f      	str	r7, [r5, #0]
 8015e2c:	e7b1      	b.n	8015d92 <__sflush_r+0x1a>
 8015e2e:	89a3      	ldrh	r3, [r4, #12]
 8015e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e34:	81a3      	strh	r3, [r4, #12]
 8015e36:	e7ad      	b.n	8015d94 <__sflush_r+0x1c>
 8015e38:	690f      	ldr	r7, [r1, #16]
 8015e3a:	2f00      	cmp	r7, #0
 8015e3c:	d0a9      	beq.n	8015d92 <__sflush_r+0x1a>
 8015e3e:	0793      	lsls	r3, r2, #30
 8015e40:	680e      	ldr	r6, [r1, #0]
 8015e42:	bf08      	it	eq
 8015e44:	694b      	ldreq	r3, [r1, #20]
 8015e46:	600f      	str	r7, [r1, #0]
 8015e48:	bf18      	it	ne
 8015e4a:	2300      	movne	r3, #0
 8015e4c:	eba6 0807 	sub.w	r8, r6, r7
 8015e50:	608b      	str	r3, [r1, #8]
 8015e52:	f1b8 0f00 	cmp.w	r8, #0
 8015e56:	dd9c      	ble.n	8015d92 <__sflush_r+0x1a>
 8015e58:	6a21      	ldr	r1, [r4, #32]
 8015e5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015e5c:	4643      	mov	r3, r8
 8015e5e:	463a      	mov	r2, r7
 8015e60:	4628      	mov	r0, r5
 8015e62:	47b0      	blx	r6
 8015e64:	2800      	cmp	r0, #0
 8015e66:	dc06      	bgt.n	8015e76 <__sflush_r+0xfe>
 8015e68:	89a3      	ldrh	r3, [r4, #12]
 8015e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e6e:	81a3      	strh	r3, [r4, #12]
 8015e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e74:	e78e      	b.n	8015d94 <__sflush_r+0x1c>
 8015e76:	4407      	add	r7, r0
 8015e78:	eba8 0800 	sub.w	r8, r8, r0
 8015e7c:	e7e9      	b.n	8015e52 <__sflush_r+0xda>
 8015e7e:	bf00      	nop
 8015e80:	20400001 	.word	0x20400001

08015e84 <_fflush_r>:
 8015e84:	b538      	push	{r3, r4, r5, lr}
 8015e86:	690b      	ldr	r3, [r1, #16]
 8015e88:	4605      	mov	r5, r0
 8015e8a:	460c      	mov	r4, r1
 8015e8c:	b913      	cbnz	r3, 8015e94 <_fflush_r+0x10>
 8015e8e:	2500      	movs	r5, #0
 8015e90:	4628      	mov	r0, r5
 8015e92:	bd38      	pop	{r3, r4, r5, pc}
 8015e94:	b118      	cbz	r0, 8015e9e <_fflush_r+0x1a>
 8015e96:	6983      	ldr	r3, [r0, #24]
 8015e98:	b90b      	cbnz	r3, 8015e9e <_fflush_r+0x1a>
 8015e9a:	f000 f887 	bl	8015fac <__sinit>
 8015e9e:	4b14      	ldr	r3, [pc, #80]	; (8015ef0 <_fflush_r+0x6c>)
 8015ea0:	429c      	cmp	r4, r3
 8015ea2:	d11b      	bne.n	8015edc <_fflush_r+0x58>
 8015ea4:	686c      	ldr	r4, [r5, #4]
 8015ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d0ef      	beq.n	8015e8e <_fflush_r+0xa>
 8015eae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015eb0:	07d0      	lsls	r0, r2, #31
 8015eb2:	d404      	bmi.n	8015ebe <_fflush_r+0x3a>
 8015eb4:	0599      	lsls	r1, r3, #22
 8015eb6:	d402      	bmi.n	8015ebe <_fflush_r+0x3a>
 8015eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015eba:	f000 f915 	bl	80160e8 <__retarget_lock_acquire_recursive>
 8015ebe:	4628      	mov	r0, r5
 8015ec0:	4621      	mov	r1, r4
 8015ec2:	f7ff ff59 	bl	8015d78 <__sflush_r>
 8015ec6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ec8:	07da      	lsls	r2, r3, #31
 8015eca:	4605      	mov	r5, r0
 8015ecc:	d4e0      	bmi.n	8015e90 <_fflush_r+0xc>
 8015ece:	89a3      	ldrh	r3, [r4, #12]
 8015ed0:	059b      	lsls	r3, r3, #22
 8015ed2:	d4dd      	bmi.n	8015e90 <_fflush_r+0xc>
 8015ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ed6:	f000 f908 	bl	80160ea <__retarget_lock_release_recursive>
 8015eda:	e7d9      	b.n	8015e90 <_fflush_r+0xc>
 8015edc:	4b05      	ldr	r3, [pc, #20]	; (8015ef4 <_fflush_r+0x70>)
 8015ede:	429c      	cmp	r4, r3
 8015ee0:	d101      	bne.n	8015ee6 <_fflush_r+0x62>
 8015ee2:	68ac      	ldr	r4, [r5, #8]
 8015ee4:	e7df      	b.n	8015ea6 <_fflush_r+0x22>
 8015ee6:	4b04      	ldr	r3, [pc, #16]	; (8015ef8 <_fflush_r+0x74>)
 8015ee8:	429c      	cmp	r4, r3
 8015eea:	bf08      	it	eq
 8015eec:	68ec      	ldreq	r4, [r5, #12]
 8015eee:	e7da      	b.n	8015ea6 <_fflush_r+0x22>
 8015ef0:	080166e0 	.word	0x080166e0
 8015ef4:	08016700 	.word	0x08016700
 8015ef8:	080166c0 	.word	0x080166c0

08015efc <std>:
 8015efc:	2300      	movs	r3, #0
 8015efe:	b510      	push	{r4, lr}
 8015f00:	4604      	mov	r4, r0
 8015f02:	e9c0 3300 	strd	r3, r3, [r0]
 8015f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f0a:	6083      	str	r3, [r0, #8]
 8015f0c:	8181      	strh	r1, [r0, #12]
 8015f0e:	6643      	str	r3, [r0, #100]	; 0x64
 8015f10:	81c2      	strh	r2, [r0, #14]
 8015f12:	6183      	str	r3, [r0, #24]
 8015f14:	4619      	mov	r1, r3
 8015f16:	2208      	movs	r2, #8
 8015f18:	305c      	adds	r0, #92	; 0x5c
 8015f1a:	f7ff fcff 	bl	801591c <memset>
 8015f1e:	4b05      	ldr	r3, [pc, #20]	; (8015f34 <std+0x38>)
 8015f20:	6263      	str	r3, [r4, #36]	; 0x24
 8015f22:	4b05      	ldr	r3, [pc, #20]	; (8015f38 <std+0x3c>)
 8015f24:	62a3      	str	r3, [r4, #40]	; 0x28
 8015f26:	4b05      	ldr	r3, [pc, #20]	; (8015f3c <std+0x40>)
 8015f28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015f2a:	4b05      	ldr	r3, [pc, #20]	; (8015f40 <std+0x44>)
 8015f2c:	6224      	str	r4, [r4, #32]
 8015f2e:	6323      	str	r3, [r4, #48]	; 0x30
 8015f30:	bd10      	pop	{r4, pc}
 8015f32:	bf00      	nop
 8015f34:	080161d1 	.word	0x080161d1
 8015f38:	080161f3 	.word	0x080161f3
 8015f3c:	0801622b 	.word	0x0801622b
 8015f40:	0801624f 	.word	0x0801624f

08015f44 <_cleanup_r>:
 8015f44:	4901      	ldr	r1, [pc, #4]	; (8015f4c <_cleanup_r+0x8>)
 8015f46:	f000 b8af 	b.w	80160a8 <_fwalk_reent>
 8015f4a:	bf00      	nop
 8015f4c:	08015e85 	.word	0x08015e85

08015f50 <__sfmoreglue>:
 8015f50:	b570      	push	{r4, r5, r6, lr}
 8015f52:	2268      	movs	r2, #104	; 0x68
 8015f54:	1e4d      	subs	r5, r1, #1
 8015f56:	4355      	muls	r5, r2
 8015f58:	460e      	mov	r6, r1
 8015f5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015f5e:	f7ff fd51 	bl	8015a04 <_malloc_r>
 8015f62:	4604      	mov	r4, r0
 8015f64:	b140      	cbz	r0, 8015f78 <__sfmoreglue+0x28>
 8015f66:	2100      	movs	r1, #0
 8015f68:	e9c0 1600 	strd	r1, r6, [r0]
 8015f6c:	300c      	adds	r0, #12
 8015f6e:	60a0      	str	r0, [r4, #8]
 8015f70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015f74:	f7ff fcd2 	bl	801591c <memset>
 8015f78:	4620      	mov	r0, r4
 8015f7a:	bd70      	pop	{r4, r5, r6, pc}

08015f7c <__sfp_lock_acquire>:
 8015f7c:	4801      	ldr	r0, [pc, #4]	; (8015f84 <__sfp_lock_acquire+0x8>)
 8015f7e:	f000 b8b3 	b.w	80160e8 <__retarget_lock_acquire_recursive>
 8015f82:	bf00      	nop
 8015f84:	24005595 	.word	0x24005595

08015f88 <__sfp_lock_release>:
 8015f88:	4801      	ldr	r0, [pc, #4]	; (8015f90 <__sfp_lock_release+0x8>)
 8015f8a:	f000 b8ae 	b.w	80160ea <__retarget_lock_release_recursive>
 8015f8e:	bf00      	nop
 8015f90:	24005595 	.word	0x24005595

08015f94 <__sinit_lock_acquire>:
 8015f94:	4801      	ldr	r0, [pc, #4]	; (8015f9c <__sinit_lock_acquire+0x8>)
 8015f96:	f000 b8a7 	b.w	80160e8 <__retarget_lock_acquire_recursive>
 8015f9a:	bf00      	nop
 8015f9c:	24005596 	.word	0x24005596

08015fa0 <__sinit_lock_release>:
 8015fa0:	4801      	ldr	r0, [pc, #4]	; (8015fa8 <__sinit_lock_release+0x8>)
 8015fa2:	f000 b8a2 	b.w	80160ea <__retarget_lock_release_recursive>
 8015fa6:	bf00      	nop
 8015fa8:	24005596 	.word	0x24005596

08015fac <__sinit>:
 8015fac:	b510      	push	{r4, lr}
 8015fae:	4604      	mov	r4, r0
 8015fb0:	f7ff fff0 	bl	8015f94 <__sinit_lock_acquire>
 8015fb4:	69a3      	ldr	r3, [r4, #24]
 8015fb6:	b11b      	cbz	r3, 8015fc0 <__sinit+0x14>
 8015fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fbc:	f7ff bff0 	b.w	8015fa0 <__sinit_lock_release>
 8015fc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015fc4:	6523      	str	r3, [r4, #80]	; 0x50
 8015fc6:	4b13      	ldr	r3, [pc, #76]	; (8016014 <__sinit+0x68>)
 8015fc8:	4a13      	ldr	r2, [pc, #76]	; (8016018 <__sinit+0x6c>)
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8015fce:	42a3      	cmp	r3, r4
 8015fd0:	bf04      	itt	eq
 8015fd2:	2301      	moveq	r3, #1
 8015fd4:	61a3      	streq	r3, [r4, #24]
 8015fd6:	4620      	mov	r0, r4
 8015fd8:	f000 f820 	bl	801601c <__sfp>
 8015fdc:	6060      	str	r0, [r4, #4]
 8015fde:	4620      	mov	r0, r4
 8015fe0:	f000 f81c 	bl	801601c <__sfp>
 8015fe4:	60a0      	str	r0, [r4, #8]
 8015fe6:	4620      	mov	r0, r4
 8015fe8:	f000 f818 	bl	801601c <__sfp>
 8015fec:	2200      	movs	r2, #0
 8015fee:	60e0      	str	r0, [r4, #12]
 8015ff0:	2104      	movs	r1, #4
 8015ff2:	6860      	ldr	r0, [r4, #4]
 8015ff4:	f7ff ff82 	bl	8015efc <std>
 8015ff8:	68a0      	ldr	r0, [r4, #8]
 8015ffa:	2201      	movs	r2, #1
 8015ffc:	2109      	movs	r1, #9
 8015ffe:	f7ff ff7d 	bl	8015efc <std>
 8016002:	68e0      	ldr	r0, [r4, #12]
 8016004:	2202      	movs	r2, #2
 8016006:	2112      	movs	r1, #18
 8016008:	f7ff ff78 	bl	8015efc <std>
 801600c:	2301      	movs	r3, #1
 801600e:	61a3      	str	r3, [r4, #24]
 8016010:	e7d2      	b.n	8015fb8 <__sinit+0xc>
 8016012:	bf00      	nop
 8016014:	080166bc 	.word	0x080166bc
 8016018:	08015f45 	.word	0x08015f45

0801601c <__sfp>:
 801601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801601e:	4607      	mov	r7, r0
 8016020:	f7ff ffac 	bl	8015f7c <__sfp_lock_acquire>
 8016024:	4b1e      	ldr	r3, [pc, #120]	; (80160a0 <__sfp+0x84>)
 8016026:	681e      	ldr	r6, [r3, #0]
 8016028:	69b3      	ldr	r3, [r6, #24]
 801602a:	b913      	cbnz	r3, 8016032 <__sfp+0x16>
 801602c:	4630      	mov	r0, r6
 801602e:	f7ff ffbd 	bl	8015fac <__sinit>
 8016032:	3648      	adds	r6, #72	; 0x48
 8016034:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016038:	3b01      	subs	r3, #1
 801603a:	d503      	bpl.n	8016044 <__sfp+0x28>
 801603c:	6833      	ldr	r3, [r6, #0]
 801603e:	b30b      	cbz	r3, 8016084 <__sfp+0x68>
 8016040:	6836      	ldr	r6, [r6, #0]
 8016042:	e7f7      	b.n	8016034 <__sfp+0x18>
 8016044:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016048:	b9d5      	cbnz	r5, 8016080 <__sfp+0x64>
 801604a:	4b16      	ldr	r3, [pc, #88]	; (80160a4 <__sfp+0x88>)
 801604c:	60e3      	str	r3, [r4, #12]
 801604e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016052:	6665      	str	r5, [r4, #100]	; 0x64
 8016054:	f000 f847 	bl	80160e6 <__retarget_lock_init_recursive>
 8016058:	f7ff ff96 	bl	8015f88 <__sfp_lock_release>
 801605c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016060:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016064:	6025      	str	r5, [r4, #0]
 8016066:	61a5      	str	r5, [r4, #24]
 8016068:	2208      	movs	r2, #8
 801606a:	4629      	mov	r1, r5
 801606c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016070:	f7ff fc54 	bl	801591c <memset>
 8016074:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016078:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801607c:	4620      	mov	r0, r4
 801607e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016080:	3468      	adds	r4, #104	; 0x68
 8016082:	e7d9      	b.n	8016038 <__sfp+0x1c>
 8016084:	2104      	movs	r1, #4
 8016086:	4638      	mov	r0, r7
 8016088:	f7ff ff62 	bl	8015f50 <__sfmoreglue>
 801608c:	4604      	mov	r4, r0
 801608e:	6030      	str	r0, [r6, #0]
 8016090:	2800      	cmp	r0, #0
 8016092:	d1d5      	bne.n	8016040 <__sfp+0x24>
 8016094:	f7ff ff78 	bl	8015f88 <__sfp_lock_release>
 8016098:	230c      	movs	r3, #12
 801609a:	603b      	str	r3, [r7, #0]
 801609c:	e7ee      	b.n	801607c <__sfp+0x60>
 801609e:	bf00      	nop
 80160a0:	080166bc 	.word	0x080166bc
 80160a4:	ffff0001 	.word	0xffff0001

080160a8 <_fwalk_reent>:
 80160a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160ac:	4606      	mov	r6, r0
 80160ae:	4688      	mov	r8, r1
 80160b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80160b4:	2700      	movs	r7, #0
 80160b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80160ba:	f1b9 0901 	subs.w	r9, r9, #1
 80160be:	d505      	bpl.n	80160cc <_fwalk_reent+0x24>
 80160c0:	6824      	ldr	r4, [r4, #0]
 80160c2:	2c00      	cmp	r4, #0
 80160c4:	d1f7      	bne.n	80160b6 <_fwalk_reent+0xe>
 80160c6:	4638      	mov	r0, r7
 80160c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160cc:	89ab      	ldrh	r3, [r5, #12]
 80160ce:	2b01      	cmp	r3, #1
 80160d0:	d907      	bls.n	80160e2 <_fwalk_reent+0x3a>
 80160d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80160d6:	3301      	adds	r3, #1
 80160d8:	d003      	beq.n	80160e2 <_fwalk_reent+0x3a>
 80160da:	4629      	mov	r1, r5
 80160dc:	4630      	mov	r0, r6
 80160de:	47c0      	blx	r8
 80160e0:	4307      	orrs	r7, r0
 80160e2:	3568      	adds	r5, #104	; 0x68
 80160e4:	e7e9      	b.n	80160ba <_fwalk_reent+0x12>

080160e6 <__retarget_lock_init_recursive>:
 80160e6:	4770      	bx	lr

080160e8 <__retarget_lock_acquire_recursive>:
 80160e8:	4770      	bx	lr

080160ea <__retarget_lock_release_recursive>:
 80160ea:	4770      	bx	lr

080160ec <__swhatbuf_r>:
 80160ec:	b570      	push	{r4, r5, r6, lr}
 80160ee:	460e      	mov	r6, r1
 80160f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160f4:	2900      	cmp	r1, #0
 80160f6:	b096      	sub	sp, #88	; 0x58
 80160f8:	4614      	mov	r4, r2
 80160fa:	461d      	mov	r5, r3
 80160fc:	da08      	bge.n	8016110 <__swhatbuf_r+0x24>
 80160fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016102:	2200      	movs	r2, #0
 8016104:	602a      	str	r2, [r5, #0]
 8016106:	061a      	lsls	r2, r3, #24
 8016108:	d410      	bmi.n	801612c <__swhatbuf_r+0x40>
 801610a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801610e:	e00e      	b.n	801612e <__swhatbuf_r+0x42>
 8016110:	466a      	mov	r2, sp
 8016112:	f000 f8c3 	bl	801629c <_fstat_r>
 8016116:	2800      	cmp	r0, #0
 8016118:	dbf1      	blt.n	80160fe <__swhatbuf_r+0x12>
 801611a:	9a01      	ldr	r2, [sp, #4]
 801611c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016120:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016124:	425a      	negs	r2, r3
 8016126:	415a      	adcs	r2, r3
 8016128:	602a      	str	r2, [r5, #0]
 801612a:	e7ee      	b.n	801610a <__swhatbuf_r+0x1e>
 801612c:	2340      	movs	r3, #64	; 0x40
 801612e:	2000      	movs	r0, #0
 8016130:	6023      	str	r3, [r4, #0]
 8016132:	b016      	add	sp, #88	; 0x58
 8016134:	bd70      	pop	{r4, r5, r6, pc}
	...

08016138 <__smakebuf_r>:
 8016138:	898b      	ldrh	r3, [r1, #12]
 801613a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801613c:	079d      	lsls	r5, r3, #30
 801613e:	4606      	mov	r6, r0
 8016140:	460c      	mov	r4, r1
 8016142:	d507      	bpl.n	8016154 <__smakebuf_r+0x1c>
 8016144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016148:	6023      	str	r3, [r4, #0]
 801614a:	6123      	str	r3, [r4, #16]
 801614c:	2301      	movs	r3, #1
 801614e:	6163      	str	r3, [r4, #20]
 8016150:	b002      	add	sp, #8
 8016152:	bd70      	pop	{r4, r5, r6, pc}
 8016154:	ab01      	add	r3, sp, #4
 8016156:	466a      	mov	r2, sp
 8016158:	f7ff ffc8 	bl	80160ec <__swhatbuf_r>
 801615c:	9900      	ldr	r1, [sp, #0]
 801615e:	4605      	mov	r5, r0
 8016160:	4630      	mov	r0, r6
 8016162:	f7ff fc4f 	bl	8015a04 <_malloc_r>
 8016166:	b948      	cbnz	r0, 801617c <__smakebuf_r+0x44>
 8016168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801616c:	059a      	lsls	r2, r3, #22
 801616e:	d4ef      	bmi.n	8016150 <__smakebuf_r+0x18>
 8016170:	f023 0303 	bic.w	r3, r3, #3
 8016174:	f043 0302 	orr.w	r3, r3, #2
 8016178:	81a3      	strh	r3, [r4, #12]
 801617a:	e7e3      	b.n	8016144 <__smakebuf_r+0xc>
 801617c:	4b0d      	ldr	r3, [pc, #52]	; (80161b4 <__smakebuf_r+0x7c>)
 801617e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016180:	89a3      	ldrh	r3, [r4, #12]
 8016182:	6020      	str	r0, [r4, #0]
 8016184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016188:	81a3      	strh	r3, [r4, #12]
 801618a:	9b00      	ldr	r3, [sp, #0]
 801618c:	6163      	str	r3, [r4, #20]
 801618e:	9b01      	ldr	r3, [sp, #4]
 8016190:	6120      	str	r0, [r4, #16]
 8016192:	b15b      	cbz	r3, 80161ac <__smakebuf_r+0x74>
 8016194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016198:	4630      	mov	r0, r6
 801619a:	f000 f891 	bl	80162c0 <_isatty_r>
 801619e:	b128      	cbz	r0, 80161ac <__smakebuf_r+0x74>
 80161a0:	89a3      	ldrh	r3, [r4, #12]
 80161a2:	f023 0303 	bic.w	r3, r3, #3
 80161a6:	f043 0301 	orr.w	r3, r3, #1
 80161aa:	81a3      	strh	r3, [r4, #12]
 80161ac:	89a0      	ldrh	r0, [r4, #12]
 80161ae:	4305      	orrs	r5, r0
 80161b0:	81a5      	strh	r5, [r4, #12]
 80161b2:	e7cd      	b.n	8016150 <__smakebuf_r+0x18>
 80161b4:	08015f45 	.word	0x08015f45

080161b8 <__malloc_lock>:
 80161b8:	4801      	ldr	r0, [pc, #4]	; (80161c0 <__malloc_lock+0x8>)
 80161ba:	f7ff bf95 	b.w	80160e8 <__retarget_lock_acquire_recursive>
 80161be:	bf00      	nop
 80161c0:	24005594 	.word	0x24005594

080161c4 <__malloc_unlock>:
 80161c4:	4801      	ldr	r0, [pc, #4]	; (80161cc <__malloc_unlock+0x8>)
 80161c6:	f7ff bf90 	b.w	80160ea <__retarget_lock_release_recursive>
 80161ca:	bf00      	nop
 80161cc:	24005594 	.word	0x24005594

080161d0 <__sread>:
 80161d0:	b510      	push	{r4, lr}
 80161d2:	460c      	mov	r4, r1
 80161d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161d8:	f000 f894 	bl	8016304 <_read_r>
 80161dc:	2800      	cmp	r0, #0
 80161de:	bfab      	itete	ge
 80161e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80161e2:	89a3      	ldrhlt	r3, [r4, #12]
 80161e4:	181b      	addge	r3, r3, r0
 80161e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80161ea:	bfac      	ite	ge
 80161ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80161ee:	81a3      	strhlt	r3, [r4, #12]
 80161f0:	bd10      	pop	{r4, pc}

080161f2 <__swrite>:
 80161f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161f6:	461f      	mov	r7, r3
 80161f8:	898b      	ldrh	r3, [r1, #12]
 80161fa:	05db      	lsls	r3, r3, #23
 80161fc:	4605      	mov	r5, r0
 80161fe:	460c      	mov	r4, r1
 8016200:	4616      	mov	r6, r2
 8016202:	d505      	bpl.n	8016210 <__swrite+0x1e>
 8016204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016208:	2302      	movs	r3, #2
 801620a:	2200      	movs	r2, #0
 801620c:	f000 f868 	bl	80162e0 <_lseek_r>
 8016210:	89a3      	ldrh	r3, [r4, #12]
 8016212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801621a:	81a3      	strh	r3, [r4, #12]
 801621c:	4632      	mov	r2, r6
 801621e:	463b      	mov	r3, r7
 8016220:	4628      	mov	r0, r5
 8016222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016226:	f000 b817 	b.w	8016258 <_write_r>

0801622a <__sseek>:
 801622a:	b510      	push	{r4, lr}
 801622c:	460c      	mov	r4, r1
 801622e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016232:	f000 f855 	bl	80162e0 <_lseek_r>
 8016236:	1c43      	adds	r3, r0, #1
 8016238:	89a3      	ldrh	r3, [r4, #12]
 801623a:	bf15      	itete	ne
 801623c:	6560      	strne	r0, [r4, #84]	; 0x54
 801623e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016242:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016246:	81a3      	strheq	r3, [r4, #12]
 8016248:	bf18      	it	ne
 801624a:	81a3      	strhne	r3, [r4, #12]
 801624c:	bd10      	pop	{r4, pc}

0801624e <__sclose>:
 801624e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016252:	f000 b813 	b.w	801627c <_close_r>
	...

08016258 <_write_r>:
 8016258:	b538      	push	{r3, r4, r5, lr}
 801625a:	4d07      	ldr	r5, [pc, #28]	; (8016278 <_write_r+0x20>)
 801625c:	4604      	mov	r4, r0
 801625e:	4608      	mov	r0, r1
 8016260:	4611      	mov	r1, r2
 8016262:	2200      	movs	r2, #0
 8016264:	602a      	str	r2, [r5, #0]
 8016266:	461a      	mov	r2, r3
 8016268:	f7ed f901 	bl	800346e <_write>
 801626c:	1c43      	adds	r3, r0, #1
 801626e:	d102      	bne.n	8016276 <_write_r+0x1e>
 8016270:	682b      	ldr	r3, [r5, #0]
 8016272:	b103      	cbz	r3, 8016276 <_write_r+0x1e>
 8016274:	6023      	str	r3, [r4, #0]
 8016276:	bd38      	pop	{r3, r4, r5, pc}
 8016278:	24005598 	.word	0x24005598

0801627c <_close_r>:
 801627c:	b538      	push	{r3, r4, r5, lr}
 801627e:	4d06      	ldr	r5, [pc, #24]	; (8016298 <_close_r+0x1c>)
 8016280:	2300      	movs	r3, #0
 8016282:	4604      	mov	r4, r0
 8016284:	4608      	mov	r0, r1
 8016286:	602b      	str	r3, [r5, #0]
 8016288:	f7ed f90d 	bl	80034a6 <_close>
 801628c:	1c43      	adds	r3, r0, #1
 801628e:	d102      	bne.n	8016296 <_close_r+0x1a>
 8016290:	682b      	ldr	r3, [r5, #0]
 8016292:	b103      	cbz	r3, 8016296 <_close_r+0x1a>
 8016294:	6023      	str	r3, [r4, #0]
 8016296:	bd38      	pop	{r3, r4, r5, pc}
 8016298:	24005598 	.word	0x24005598

0801629c <_fstat_r>:
 801629c:	b538      	push	{r3, r4, r5, lr}
 801629e:	4d07      	ldr	r5, [pc, #28]	; (80162bc <_fstat_r+0x20>)
 80162a0:	2300      	movs	r3, #0
 80162a2:	4604      	mov	r4, r0
 80162a4:	4608      	mov	r0, r1
 80162a6:	4611      	mov	r1, r2
 80162a8:	602b      	str	r3, [r5, #0]
 80162aa:	f7ed f908 	bl	80034be <_fstat>
 80162ae:	1c43      	adds	r3, r0, #1
 80162b0:	d102      	bne.n	80162b8 <_fstat_r+0x1c>
 80162b2:	682b      	ldr	r3, [r5, #0]
 80162b4:	b103      	cbz	r3, 80162b8 <_fstat_r+0x1c>
 80162b6:	6023      	str	r3, [r4, #0]
 80162b8:	bd38      	pop	{r3, r4, r5, pc}
 80162ba:	bf00      	nop
 80162bc:	24005598 	.word	0x24005598

080162c0 <_isatty_r>:
 80162c0:	b538      	push	{r3, r4, r5, lr}
 80162c2:	4d06      	ldr	r5, [pc, #24]	; (80162dc <_isatty_r+0x1c>)
 80162c4:	2300      	movs	r3, #0
 80162c6:	4604      	mov	r4, r0
 80162c8:	4608      	mov	r0, r1
 80162ca:	602b      	str	r3, [r5, #0]
 80162cc:	f7ed f907 	bl	80034de <_isatty>
 80162d0:	1c43      	adds	r3, r0, #1
 80162d2:	d102      	bne.n	80162da <_isatty_r+0x1a>
 80162d4:	682b      	ldr	r3, [r5, #0]
 80162d6:	b103      	cbz	r3, 80162da <_isatty_r+0x1a>
 80162d8:	6023      	str	r3, [r4, #0]
 80162da:	bd38      	pop	{r3, r4, r5, pc}
 80162dc:	24005598 	.word	0x24005598

080162e0 <_lseek_r>:
 80162e0:	b538      	push	{r3, r4, r5, lr}
 80162e2:	4d07      	ldr	r5, [pc, #28]	; (8016300 <_lseek_r+0x20>)
 80162e4:	4604      	mov	r4, r0
 80162e6:	4608      	mov	r0, r1
 80162e8:	4611      	mov	r1, r2
 80162ea:	2200      	movs	r2, #0
 80162ec:	602a      	str	r2, [r5, #0]
 80162ee:	461a      	mov	r2, r3
 80162f0:	f7ed f900 	bl	80034f4 <_lseek>
 80162f4:	1c43      	adds	r3, r0, #1
 80162f6:	d102      	bne.n	80162fe <_lseek_r+0x1e>
 80162f8:	682b      	ldr	r3, [r5, #0]
 80162fa:	b103      	cbz	r3, 80162fe <_lseek_r+0x1e>
 80162fc:	6023      	str	r3, [r4, #0]
 80162fe:	bd38      	pop	{r3, r4, r5, pc}
 8016300:	24005598 	.word	0x24005598

08016304 <_read_r>:
 8016304:	b538      	push	{r3, r4, r5, lr}
 8016306:	4d07      	ldr	r5, [pc, #28]	; (8016324 <_read_r+0x20>)
 8016308:	4604      	mov	r4, r0
 801630a:	4608      	mov	r0, r1
 801630c:	4611      	mov	r1, r2
 801630e:	2200      	movs	r2, #0
 8016310:	602a      	str	r2, [r5, #0]
 8016312:	461a      	mov	r2, r3
 8016314:	f7ed f88e 	bl	8003434 <_read>
 8016318:	1c43      	adds	r3, r0, #1
 801631a:	d102      	bne.n	8016322 <_read_r+0x1e>
 801631c:	682b      	ldr	r3, [r5, #0]
 801631e:	b103      	cbz	r3, 8016322 <_read_r+0x1e>
 8016320:	6023      	str	r3, [r4, #0]
 8016322:	bd38      	pop	{r3, r4, r5, pc}
 8016324:	24005598 	.word	0x24005598

08016328 <_init>:
 8016328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801632a:	bf00      	nop
 801632c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801632e:	bc08      	pop	{r3}
 8016330:	469e      	mov	lr, r3
 8016332:	4770      	bx	lr

08016334 <_fini>:
 8016334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016336:	bf00      	nop
 8016338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801633a:	bc08      	pop	{r3}
 801633c:	469e      	mov	lr, r3
 801633e:	4770      	bx	lr
