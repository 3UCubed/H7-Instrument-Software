
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016870  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08016b10  08016b10  00026b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016f24  08016f24  00026f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016f2c  08016f2c  00026f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016f30  08016f30  00026f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08016f34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000590c  24000120  0801703c  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24005a2c  0801703c  00035a2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032bb6  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005545  00000000  00000000  00062cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002670  00000000  00000000  00068238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002468  00000000  00000000  0006a8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003fd9b  00000000  00000000  0006cd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003153a  00000000  00000000  000acaab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001946ba  00000000  00000000  000ddfe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0027269f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000acb8  00000000  00000000  002726f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016af8 	.word	0x08016af8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08016af8 	.word	0x08016af8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
	...

080005f4 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a13      	ldr	r2, [pc, #76]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d106      	bne.n	8000612 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
	{
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2101      	movs	r1, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f012 fa50 	bl	8012ab0 <osEventFlagsSet>
	}
	else
	{
		printf("Unknown Timer Interrupt\n");
	}
}
 8000610:	e018      	b.n	8000644 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim2)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d106      	bne.n	8000628 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2102      	movs	r1, #2
 8000620:	4618      	mov	r0, r3
 8000622:	f012 fa45 	bl	8012ab0 <osEventFlagsSet>
}
 8000626:	e00d      	b.n	8000644 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim3)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d106      	bne.n	800063e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2104      	movs	r1, #4
 8000636:	4618      	mov	r0, r3
 8000638:	f012 fa3a 	bl	8012ab0 <osEventFlagsSet>
}
 800063c:	e002      	b.n	8000644 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		printf("Unknown Timer Interrupt\n");
 800063e:	4807      	ldr	r0, [pc, #28]	; (800065c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000640:	f015 feaa 	bl	8016398 <puts>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	24000508 	.word	0x24000508
 8000650:	24000be8 	.word	0x24000be8
 8000654:	24000554 	.word	0x24000554
 8000658:	240005a0 	.word	0x240005a0
 800065c:	08016b70 	.word	0x08016b70

08000660 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af02      	add	r7, sp, #8
 8000666:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000668:	2201      	movs	r2, #1
 800066a:	49f2      	ldr	r1, [pc, #968]	; (8000a34 <HAL_UART_RxCpltCallback+0x3d4>)
 800066c:	48f2      	ldr	r0, [pc, #968]	; (8000a38 <HAL_UART_RxCpltCallback+0x3d8>)
 800066e:	f00f fbb9 	bl	800fde4 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000672:	4bf0      	ldr	r3, [pc, #960]	; (8000a34 <HAL_UART_RxCpltCallback+0x3d4>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	2be0      	cmp	r3, #224	; 0xe0
 800067c:	f200 83e8 	bhi.w	8000e50 <HAL_UART_RxCpltCallback+0x7f0>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <HAL_UART_RxCpltCallback+0x28>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	08000a21 	.word	0x08000a21
 800068c:	08000a5d 	.word	0x08000a5d
 8000690:	08000ae3 	.word	0x08000ae3
 8000694:	08000b0d 	.word	0x08000b0d
 8000698:	08000b35 	.word	0x08000b35
 800069c:	08000b5f 	.word	0x08000b5f
 80006a0:	08000b8b 	.word	0x08000b8b
 80006a4:	08000bb7 	.word	0x08000bb7
 80006a8:	08000be1 	.word	0x08000be1
 80006ac:	08000c0d 	.word	0x08000c0d
 80006b0:	08000c39 	.word	0x08000c39
 80006b4:	08000c6b 	.word	0x08000c6b
 80006b8:	08000c9d 	.word	0x08000c9d
 80006bc:	08000cef 	.word	0x08000cef
 80006c0:	08000df5 	.word	0x08000df5
 80006c4:	08000e25 	.word	0x08000e25
 80006c8:	08000a0d 	.word	0x08000a0d
 80006cc:	08000a49 	.word	0x08000a49
 80006d0:	08000acd 	.word	0x08000acd
 80006d4:	08000af9 	.word	0x08000af9
 80006d8:	08000b21 	.word	0x08000b21
 80006dc:	08000b49 	.word	0x08000b49
 80006e0:	08000b75 	.word	0x08000b75
 80006e4:	08000ba1 	.word	0x08000ba1
 80006e8:	08000bcd 	.word	0x08000bcd
 80006ec:	08000bf5 	.word	0x08000bf5
 80006f0:	08000c1d 	.word	0x08000c1d
 80006f4:	08000c4f 	.word	0x08000c4f
 80006f8:	08000c81 	.word	0x08000c81
 80006fc:	08000cb3 	.word	0x08000cb3
 8000700:	08000dcd 	.word	0x08000dcd
 8000704:	08000e1d 	.word	0x08000e1d
 8000708:	08000e51 	.word	0x08000e51
 800070c:	08000e51 	.word	0x08000e51
 8000710:	08000e51 	.word	0x08000e51
 8000714:	08000e51 	.word	0x08000e51
 8000718:	08000e51 	.word	0x08000e51
 800071c:	08000e51 	.word	0x08000e51
 8000720:	08000e51 	.word	0x08000e51
 8000724:	08000e51 	.word	0x08000e51
 8000728:	08000e51 	.word	0x08000e51
 800072c:	08000e51 	.word	0x08000e51
 8000730:	08000e51 	.word	0x08000e51
 8000734:	08000e51 	.word	0x08000e51
 8000738:	08000e51 	.word	0x08000e51
 800073c:	08000e51 	.word	0x08000e51
 8000740:	08000e51 	.word	0x08000e51
 8000744:	08000e51 	.word	0x08000e51
 8000748:	08000e51 	.word	0x08000e51
 800074c:	08000e51 	.word	0x08000e51
 8000750:	08000e51 	.word	0x08000e51
 8000754:	08000e51 	.word	0x08000e51
 8000758:	08000e51 	.word	0x08000e51
 800075c:	08000e51 	.word	0x08000e51
 8000760:	08000e51 	.word	0x08000e51
 8000764:	08000e51 	.word	0x08000e51
 8000768:	08000e51 	.word	0x08000e51
 800076c:	08000e51 	.word	0x08000e51
 8000770:	08000e51 	.word	0x08000e51
 8000774:	08000e51 	.word	0x08000e51
 8000778:	08000e51 	.word	0x08000e51
 800077c:	08000e51 	.word	0x08000e51
 8000780:	08000e51 	.word	0x08000e51
 8000784:	08000e51 	.word	0x08000e51
 8000788:	08000e51 	.word	0x08000e51
 800078c:	08000e51 	.word	0x08000e51
 8000790:	08000e51 	.word	0x08000e51
 8000794:	08000e51 	.word	0x08000e51
 8000798:	08000e51 	.word	0x08000e51
 800079c:	08000e51 	.word	0x08000e51
 80007a0:	08000e51 	.word	0x08000e51
 80007a4:	08000e51 	.word	0x08000e51
 80007a8:	08000e51 	.word	0x08000e51
 80007ac:	08000e51 	.word	0x08000e51
 80007b0:	08000e51 	.word	0x08000e51
 80007b4:	08000e51 	.word	0x08000e51
 80007b8:	08000e51 	.word	0x08000e51
 80007bc:	08000e51 	.word	0x08000e51
 80007c0:	08000e51 	.word	0x08000e51
 80007c4:	08000e51 	.word	0x08000e51
 80007c8:	08000e51 	.word	0x08000e51
 80007cc:	08000e51 	.word	0x08000e51
 80007d0:	08000e51 	.word	0x08000e51
 80007d4:	08000e51 	.word	0x08000e51
 80007d8:	08000e51 	.word	0x08000e51
 80007dc:	08000e51 	.word	0x08000e51
 80007e0:	08000e51 	.word	0x08000e51
 80007e4:	08000e51 	.word	0x08000e51
 80007e8:	08000e51 	.word	0x08000e51
 80007ec:	08000e51 	.word	0x08000e51
 80007f0:	08000e51 	.word	0x08000e51
 80007f4:	08000e51 	.word	0x08000e51
 80007f8:	08000e51 	.word	0x08000e51
 80007fc:	08000e51 	.word	0x08000e51
 8000800:	08000e51 	.word	0x08000e51
 8000804:	08000e51 	.word	0x08000e51
 8000808:	08000e51 	.word	0x08000e51
 800080c:	08000e51 	.word	0x08000e51
 8000810:	08000e51 	.word	0x08000e51
 8000814:	08000e51 	.word	0x08000e51
 8000818:	08000e51 	.word	0x08000e51
 800081c:	08000e51 	.word	0x08000e51
 8000820:	08000e51 	.word	0x08000e51
 8000824:	08000e51 	.word	0x08000e51
 8000828:	08000e51 	.word	0x08000e51
 800082c:	08000e51 	.word	0x08000e51
 8000830:	08000e51 	.word	0x08000e51
 8000834:	08000e51 	.word	0x08000e51
 8000838:	08000e51 	.word	0x08000e51
 800083c:	08000e51 	.word	0x08000e51
 8000840:	08000e51 	.word	0x08000e51
 8000844:	08000e51 	.word	0x08000e51
 8000848:	08000e51 	.word	0x08000e51
 800084c:	08000e51 	.word	0x08000e51
 8000850:	08000e51 	.word	0x08000e51
 8000854:	08000e51 	.word	0x08000e51
 8000858:	08000e51 	.word	0x08000e51
 800085c:	08000e51 	.word	0x08000e51
 8000860:	08000e51 	.word	0x08000e51
 8000864:	08000e51 	.word	0x08000e51
 8000868:	08000e51 	.word	0x08000e51
 800086c:	08000e51 	.word	0x08000e51
 8000870:	08000e51 	.word	0x08000e51
 8000874:	08000e51 	.word	0x08000e51
 8000878:	08000e51 	.word	0x08000e51
 800087c:	08000e51 	.word	0x08000e51
 8000880:	08000e51 	.word	0x08000e51
 8000884:	08000e51 	.word	0x08000e51
 8000888:	08000e51 	.word	0x08000e51
 800088c:	08000e51 	.word	0x08000e51
 8000890:	08000e51 	.word	0x08000e51
 8000894:	08000e51 	.word	0x08000e51
 8000898:	08000e51 	.word	0x08000e51
 800089c:	08000e51 	.word	0x08000e51
 80008a0:	08000e51 	.word	0x08000e51
 80008a4:	08000e51 	.word	0x08000e51
 80008a8:	08000e51 	.word	0x08000e51
 80008ac:	08000e51 	.word	0x08000e51
 80008b0:	08000e51 	.word	0x08000e51
 80008b4:	08000e51 	.word	0x08000e51
 80008b8:	08000e51 	.word	0x08000e51
 80008bc:	08000e51 	.word	0x08000e51
 80008c0:	08000e51 	.word	0x08000e51
 80008c4:	08000e51 	.word	0x08000e51
 80008c8:	08000e51 	.word	0x08000e51
 80008cc:	08000e51 	.word	0x08000e51
 80008d0:	08000e51 	.word	0x08000e51
 80008d4:	08000e51 	.word	0x08000e51
 80008d8:	08000e51 	.word	0x08000e51
 80008dc:	08000e51 	.word	0x08000e51
 80008e0:	08000e51 	.word	0x08000e51
 80008e4:	08000e51 	.word	0x08000e51
 80008e8:	08000e51 	.word	0x08000e51
 80008ec:	08000e51 	.word	0x08000e51
 80008f0:	08000e51 	.word	0x08000e51
 80008f4:	08000e51 	.word	0x08000e51
 80008f8:	08000e51 	.word	0x08000e51
 80008fc:	08000e51 	.word	0x08000e51
 8000900:	08000e51 	.word	0x08000e51
 8000904:	08000e51 	.word	0x08000e51
 8000908:	08000e51 	.word	0x08000e51
 800090c:	08000e51 	.word	0x08000e51
 8000910:	08000e51 	.word	0x08000e51
 8000914:	08000e51 	.word	0x08000e51
 8000918:	08000e51 	.word	0x08000e51
 800091c:	08000e51 	.word	0x08000e51
 8000920:	08000e51 	.word	0x08000e51
 8000924:	08000e51 	.word	0x08000e51
 8000928:	08000e51 	.word	0x08000e51
 800092c:	08000e51 	.word	0x08000e51
 8000930:	08000e51 	.word	0x08000e51
 8000934:	08000e51 	.word	0x08000e51
 8000938:	08000e51 	.word	0x08000e51
 800093c:	08000e51 	.word	0x08000e51
 8000940:	08000e51 	.word	0x08000e51
 8000944:	08000e51 	.word	0x08000e51
 8000948:	08000e51 	.word	0x08000e51
 800094c:	08000e51 	.word	0x08000e51
 8000950:	08000e51 	.word	0x08000e51
 8000954:	08000e51 	.word	0x08000e51
 8000958:	08000e51 	.word	0x08000e51
 800095c:	08000e51 	.word	0x08000e51
 8000960:	08000e51 	.word	0x08000e51
 8000964:	08000e51 	.word	0x08000e51
 8000968:	08000e51 	.word	0x08000e51
 800096c:	08000e51 	.word	0x08000e51
 8000970:	08000e51 	.word	0x08000e51
 8000974:	08000e51 	.word	0x08000e51
 8000978:	08000e51 	.word	0x08000e51
 800097c:	08000e51 	.word	0x08000e51
 8000980:	08000e51 	.word	0x08000e51
 8000984:	08000e51 	.word	0x08000e51
 8000988:	08000e51 	.word	0x08000e51
 800098c:	08000e51 	.word	0x08000e51
 8000990:	08000e51 	.word	0x08000e51
 8000994:	08000e51 	.word	0x08000e51
 8000998:	08000e51 	.word	0x08000e51
 800099c:	08000e51 	.word	0x08000e51
 80009a0:	08000e51 	.word	0x08000e51
 80009a4:	08000e51 	.word	0x08000e51
 80009a8:	08000e51 	.word	0x08000e51
 80009ac:	08000e51 	.word	0x08000e51
 80009b0:	08000e51 	.word	0x08000e51
 80009b4:	08000e51 	.word	0x08000e51
 80009b8:	08000e51 	.word	0x08000e51
 80009bc:	08000e51 	.word	0x08000e51
 80009c0:	08000e51 	.word	0x08000e51
 80009c4:	08000e51 	.word	0x08000e51
 80009c8:	08000e3f 	.word	0x08000e3f
 80009cc:	08000e51 	.word	0x08000e51
 80009d0:	08000e51 	.word	0x08000e51
 80009d4:	08000e51 	.word	0x08000e51
 80009d8:	08000e51 	.word	0x08000e51
 80009dc:	08000e51 	.word	0x08000e51
 80009e0:	08000e51 	.word	0x08000e51
 80009e4:	08000e51 	.word	0x08000e51
 80009e8:	08000e51 	.word	0x08000e51
 80009ec:	08000e51 	.word	0x08000e51
 80009f0:	08000e51 	.word	0x08000e51
 80009f4:	08000e51 	.word	0x08000e51
 80009f8:	08000e51 	.word	0x08000e51
 80009fc:	08000e51 	.word	0x08000e51
 8000a00:	08000e51 	.word	0x08000e51
 8000a04:	08000e51 	.word	0x08000e51
 8000a08:	08000e2d 	.word	0x08000e2d
	case 0x10: {
		printf("SDN1 ON\n");
 8000a0c:	480b      	ldr	r0, [pc, #44]	; (8000a3c <HAL_UART_RxCpltCallback+0x3dc>)
 8000a0e:	f015 fcc3 	bl	8016398 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a14:	2104      	movs	r1, #4
 8000a16:	2201      	movs	r2, #1
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f008 f93b 	bl	8008c94 <HAL_GPIO_WritePin>
		break;
 8000a1e:	e222      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <HAL_UART_RxCpltCallback+0x3e4>)
 8000a22:	f015 fcb9 	bl	8016398 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a28:	2104      	movs	r1, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f008 f931 	bl	8008c94 <HAL_GPIO_WritePin>
		break;
 8000a32:	e218      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
 8000a34:	24000bec 	.word	0x24000bec
 8000a38:	240005ec 	.word	0x240005ec
 8000a3c:	08016b88 	.word	0x08016b88
 8000a40:	58020400 	.word	0x58020400
 8000a44:	08016b90 	.word	0x08016b90
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a48:	48b8      	ldr	r0, [pc, #736]	; (8000d2c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a4a:	f015 fca5 	bl	8016398 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a4e:	4bb8      	ldr	r3, [pc, #736]	; (8000d30 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a50:	2120      	movs	r1, #32
 8000a52:	2201      	movs	r2, #1
 8000a54:	4618      	mov	r0, r3
 8000a56:	f008 f91d 	bl	8008c94 <HAL_GPIO_WritePin>

		break;
 8000a5a:	e204      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a5c:	48b5      	ldr	r0, [pc, #724]	; (8000d34 <HAL_UART_RxCpltCallback+0x6d4>)
 8000a5e:	f015 fc9b 	bl	8016398 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a62:	4bb3      	ldr	r3, [pc, #716]	; (8000d30 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a64:	2120      	movs	r1, #32
 8000a66:	2200      	movs	r2, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f008 f913 	bl	8008c94 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a6e:	4bb0      	ldr	r3, [pc, #704]	; (8000d30 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a70:	2140      	movs	r1, #64	; 0x40
 8000a72:	2200      	movs	r2, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f008 f90d 	bl	8008c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a7a:	4baf      	ldr	r3, [pc, #700]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a80:	2200      	movs	r2, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f008 f906 	bl	8008c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a88:	4bab      	ldr	r3, [pc, #684]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f008 f8ff 	bl	8008c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000a96:	4ba8      	ldr	r3, [pc, #672]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f008 f8f8 	bl	8008c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000aa4:	4ba4      	ldr	r3, [pc, #656]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aa6:	2140      	movs	r1, #64	; 0x40
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f008 f8f2 	bl	8008c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ab0:	4ba1      	ldr	r3, [pc, #644]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ab2:	2180      	movs	r1, #128	; 0x80
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f008 f8ec 	bl	8008c94 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000abc:	4b9e      	ldr	r3, [pc, #632]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000abe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f008 f8e5 	bl	8008c94 <HAL_GPIO_WritePin>

		break;
 8000aca:	e1cc      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000acc:	489b      	ldr	r0, [pc, #620]	; (8000d3c <HAL_UART_RxCpltCallback+0x6dc>)
 8000ace:	f015 fc63 	bl	8016398 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ad2:	4b99      	ldr	r3, [pc, #612]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ad4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4618      	mov	r0, r3
 8000adc:	f008 f8da 	bl	8008c94 <HAL_GPIO_WritePin>
		break;
 8000ae0:	e1c1      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000ae2:	4897      	ldr	r0, [pc, #604]	; (8000d40 <HAL_UART_RxCpltCallback+0x6e0>)
 8000ae4:	f015 fc58 	bl	8016398 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ae8:	4b93      	ldr	r3, [pc, #588]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aee:	2200      	movs	r2, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f008 f8cf 	bl	8008c94 <HAL_GPIO_WritePin>
		break;
 8000af6:	e1b6      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000af8:	4892      	ldr	r0, [pc, #584]	; (8000d44 <HAL_UART_RxCpltCallback+0x6e4>)
 8000afa:	f015 fc4d 	bl	8016398 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000afe:	4b8e      	ldr	r3, [pc, #568]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	2201      	movs	r2, #1
 8000b04:	4618      	mov	r0, r3
 8000b06:	f008 f8c5 	bl	8008c94 <HAL_GPIO_WritePin>
		break;
 8000b0a:	e1ac      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b0c:	488e      	ldr	r0, [pc, #568]	; (8000d48 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b0e:	f015 fc43 	bl	8016398 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b12:	4b89      	ldr	r3, [pc, #548]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	2200      	movs	r2, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f008 f8bb 	bl	8008c94 <HAL_GPIO_WritePin>
		break;
 8000b1e:	e1a2      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b20:	488a      	ldr	r0, [pc, #552]	; (8000d4c <HAL_UART_RxCpltCallback+0x6ec>)
 8000b22:	f015 fc39 	bl	8016398 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b26:	4b84      	ldr	r3, [pc, #528]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b28:	2140      	movs	r1, #64	; 0x40
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f008 f8b1 	bl	8008c94 <HAL_GPIO_WritePin>
		break;
 8000b32:	e198      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b34:	4886      	ldr	r0, [pc, #536]	; (8000d50 <HAL_UART_RxCpltCallback+0x6f0>)
 8000b36:	f015 fc2f 	bl	8016398 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b3a:	4b7f      	ldr	r3, [pc, #508]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b3c:	2140      	movs	r1, #64	; 0x40
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f008 f8a7 	bl	8008c94 <HAL_GPIO_WritePin>
		break;
 8000b46:	e18e      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b48:	4882      	ldr	r0, [pc, #520]	; (8000d54 <HAL_UART_RxCpltCallback+0x6f4>)
 8000b4a:	f015 fc25 	bl	8016398 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b4e:	4b7a      	ldr	r3, [pc, #488]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b54:	2201      	movs	r2, #1
 8000b56:	4618      	mov	r0, r3
 8000b58:	f008 f89c 	bl	8008c94 <HAL_GPIO_WritePin>
		break;
 8000b5c:	e183      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b5e:	487e      	ldr	r0, [pc, #504]	; (8000d58 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b60:	f015 fc1a 	bl	8016398 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b64:	4b74      	ldr	r3, [pc, #464]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f008 f891 	bl	8008c94 <HAL_GPIO_WritePin>
		break;
 8000b72:	e178      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b74:	4879      	ldr	r0, [pc, #484]	; (8000d5c <HAL_UART_RxCpltCallback+0x6fc>)
 8000b76:	f015 fc0f 	bl	8016398 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b7a:	4b6f      	ldr	r3, [pc, #444]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b80:	2201      	movs	r2, #1
 8000b82:	4618      	mov	r0, r3
 8000b84:	f008 f886 	bl	8008c94 <HAL_GPIO_WritePin>
		break;
 8000b88:	e16d      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000b8a:	4875      	ldr	r0, [pc, #468]	; (8000d60 <HAL_UART_RxCpltCallback+0x700>)
 8000b8c:	f015 fc04 	bl	8016398 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b90:	4b69      	ldr	r3, [pc, #420]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b96:	2200      	movs	r2, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f008 f87b 	bl	8008c94 <HAL_GPIO_WritePin>
		break;
 8000b9e:	e162      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000ba0:	4870      	ldr	r0, [pc, #448]	; (8000d64 <HAL_UART_RxCpltCallback+0x704>)
 8000ba2:	f015 fbf9 	bl	8016398 <puts>
	    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000ba6:	4b64      	ldr	r3, [pc, #400]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ba8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bac:	2201      	movs	r2, #1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f008 f870 	bl	8008c94 <HAL_GPIO_WritePin>
		break;
 8000bb4:	e157      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000bb6:	486c      	ldr	r0, [pc, #432]	; (8000d68 <HAL_UART_RxCpltCallback+0x708>)
 8000bb8:	f015 fbee 	bl	8016398 <puts>
	    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000bbc:	4b5e      	ldr	r3, [pc, #376]	; (8000d38 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f008 f865 	bl	8008c94 <HAL_GPIO_WritePin>

		break;
 8000bca:	e14c      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bcc:	4867      	ldr	r0, [pc, #412]	; (8000d6c <HAL_UART_RxCpltCallback+0x70c>)
 8000bce:	f015 fbe3 	bl	8016398 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bd2:	4b57      	ldr	r3, [pc, #348]	; (8000d30 <HAL_UART_RxCpltCallback+0x6d0>)
 8000bd4:	2140      	movs	r1, #64	; 0x40
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f008 f85b 	bl	8008c94 <HAL_GPIO_WritePin>
		break;
 8000bde:	e142      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000be0:	4863      	ldr	r0, [pc, #396]	; (8000d70 <HAL_UART_RxCpltCallback+0x710>)
 8000be2:	f015 fbd9 	bl	8016398 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000be6:	4b52      	ldr	r3, [pc, #328]	; (8000d30 <HAL_UART_RxCpltCallback+0x6d0>)
 8000be8:	2140      	movs	r1, #64	; 0x40
 8000bea:	2200      	movs	r2, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f008 f851 	bl	8008c94 <HAL_GPIO_WritePin>
		break;
 8000bf2:	e138      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000bf4:	485f      	ldr	r0, [pc, #380]	; (8000d74 <HAL_UART_RxCpltCallback+0x714>)
 8000bf6:	f015 fbcf 	bl	8016398 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	2320      	movs	r3, #32
 8000c00:	4a5d      	ldr	r2, [pc, #372]	; (8000d78 <HAL_UART_RxCpltCallback+0x718>)
 8000c02:	2100      	movs	r1, #0
 8000c04:	485d      	ldr	r0, [pc, #372]	; (8000d7c <HAL_UART_RxCpltCallback+0x71c>)
 8000c06:	f004 fcb5 	bl	8005574 <HAL_DAC_Start_DMA>
		break;
 8000c0a:	e12c      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c0c:	485c      	ldr	r0, [pc, #368]	; (8000d80 <HAL_UART_RxCpltCallback+0x720>)
 8000c0e:	f015 fbc3 	bl	8016398 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c12:	2100      	movs	r1, #0
 8000c14:	4859      	ldr	r0, [pc, #356]	; (8000d7c <HAL_UART_RxCpltCallback+0x71c>)
 8000c16:	f004 fd6d 	bl	80056f4 <HAL_DAC_Stop_DMA>
		break;
 8000c1a:	e124      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c1c:	4859      	ldr	r0, [pc, #356]	; (8000d84 <HAL_UART_RxCpltCallback+0x724>)
 8000c1e:	f015 fbbb 	bl	8016398 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c22:	210c      	movs	r1, #12
 8000c24:	4858      	ldr	r0, [pc, #352]	; (8000d88 <HAL_UART_RxCpltCallback+0x728>)
 8000c26:	f00d fbfd 	bl	800e424 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000c2a:	4b58      	ldr	r3, [pc, #352]	; (8000d8c <HAL_UART_RxCpltCallback+0x72c>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000c30:	4b57      	ldr	r3, [pc, #348]	; (8000d90 <HAL_UART_RxCpltCallback+0x730>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	801a      	strh	r2, [r3, #0]
		break;
 8000c36:	e116      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c38:	4856      	ldr	r0, [pc, #344]	; (8000d94 <HAL_UART_RxCpltCallback+0x734>)
 8000c3a:	f015 fbad 	bl	8016398 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000c3e:	210c      	movs	r1, #12
 8000c40:	4851      	ldr	r0, [pc, #324]	; (8000d88 <HAL_UART_RxCpltCallback+0x728>)
 8000c42:	f00d fd49 	bl	800e6d8 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000c46:	4b51      	ldr	r3, [pc, #324]	; (8000d8c <HAL_UART_RxCpltCallback+0x72c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
		break;
 8000c4c:	e10b      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c4e:	4852      	ldr	r0, [pc, #328]	; (8000d98 <HAL_UART_RxCpltCallback+0x738>)
 8000c50:	f015 fba2 	bl	8016398 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c54:	2100      	movs	r1, #0
 8000c56:	4851      	ldr	r0, [pc, #324]	; (8000d9c <HAL_UART_RxCpltCallback+0x73c>)
 8000c58:	f00d fbe4 	bl	800e424 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000c5c:	4b50      	ldr	r3, [pc, #320]	; (8000da0 <HAL_UART_RxCpltCallback+0x740>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000c62:	4b50      	ldr	r3, [pc, #320]	; (8000da4 <HAL_UART_RxCpltCallback+0x744>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	801a      	strh	r2, [r3, #0]
		break;
 8000c68:	e0fd      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c6a:	484f      	ldr	r0, [pc, #316]	; (8000da8 <HAL_UART_RxCpltCallback+0x748>)
 8000c6c:	f015 fb94 	bl	8016398 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000c70:	2100      	movs	r1, #0
 8000c72:	484a      	ldr	r0, [pc, #296]	; (8000d9c <HAL_UART_RxCpltCallback+0x73c>)
 8000c74:	f00d fd30 	bl	800e6d8 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000c78:	4b49      	ldr	r3, [pc, #292]	; (8000da0 <HAL_UART_RxCpltCallback+0x740>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
		break;
 8000c7e:	e0f2      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000c80:	484a      	ldr	r0, [pc, #296]	; (8000dac <HAL_UART_RxCpltCallback+0x74c>)
 8000c82:	f015 fb89 	bl	8016398 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000c86:	2100      	movs	r1, #0
 8000c88:	4849      	ldr	r0, [pc, #292]	; (8000db0 <HAL_UART_RxCpltCallback+0x750>)
 8000c8a:	f00d fbcb 	bl	800e424 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000c8e:	4b49      	ldr	r3, [pc, #292]	; (8000db4 <HAL_UART_RxCpltCallback+0x754>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000c94:	4b48      	ldr	r3, [pc, #288]	; (8000db8 <HAL_UART_RxCpltCallback+0x758>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	801a      	strh	r2, [r3, #0]
		break;
 8000c9a:	e0e4      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000c9c:	4847      	ldr	r0, [pc, #284]	; (8000dbc <HAL_UART_RxCpltCallback+0x75c>)
 8000c9e:	f015 fb7b 	bl	8016398 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4842      	ldr	r0, [pc, #264]	; (8000db0 <HAL_UART_RxCpltCallback+0x750>)
 8000ca6:	f00d fd17 	bl	800e6d8 <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000caa:	4b42      	ldr	r3, [pc, #264]	; (8000db4 <HAL_UART_RxCpltCallback+0x754>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
		break;
 8000cb0:	e0d9      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000cb2:	4843      	ldr	r0, [pc, #268]	; (8000dc0 <HAL_UART_RxCpltCallback+0x760>)
 8000cb4:	f015 fb70 	bl	8016398 <puts>
		if (step < 17) {
 8000cb8:	4b42      	ldr	r3, [pc, #264]	; (8000dc4 <HAL_UART_RxCpltCallback+0x764>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b10      	cmp	r3, #16
 8000cbe:	f200 80cb 	bhi.w	8000e58 <HAL_UART_RxCpltCallback+0x7f8>
			step+=2;
 8000cc2:	4b40      	ldr	r3, [pc, #256]	; (8000dc4 <HAL_UART_RxCpltCallback+0x764>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b3e      	ldr	r3, [pc, #248]	; (8000dc4 <HAL_UART_RxCpltCallback+0x764>)
 8000ccc:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000cce:	4b3d      	ldr	r3, [pc, #244]	; (8000dc4 <HAL_UART_RxCpltCallback+0x764>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <HAL_UART_RxCpltCallback+0x718>)
 8000cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4827      	ldr	r0, [pc, #156]	; (8000d7c <HAL_UART_RxCpltCallback+0x71c>)
 8000ce0:	f004 fdab 	bl	800583a <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4825      	ldr	r0, [pc, #148]	; (8000d7c <HAL_UART_RxCpltCallback+0x71c>)
 8000ce8:	f004 fbec 	bl	80054c4 <HAL_DAC_Start>
		}
		break;
 8000cec:	e0b4      	b.n	8000e58 <HAL_UART_RxCpltCallback+0x7f8>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000cee:	4836      	ldr	r0, [pc, #216]	; (8000dc8 <HAL_UART_RxCpltCallback+0x768>)
 8000cf0:	f015 fb52 	bl	8016398 <puts>
		if (step > 3) {
 8000cf4:	4b33      	ldr	r3, [pc, #204]	; (8000dc4 <HAL_UART_RxCpltCallback+0x764>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	f240 80af 	bls.w	8000e5c <HAL_UART_RxCpltCallback+0x7fc>
			step-=2;
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <HAL_UART_RxCpltCallback+0x764>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	3b02      	subs	r3, #2
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <HAL_UART_RxCpltCallback+0x764>)
 8000d08:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <HAL_UART_RxCpltCallback+0x764>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <HAL_UART_RxCpltCallback+0x718>)
 8000d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4818      	ldr	r0, [pc, #96]	; (8000d7c <HAL_UART_RxCpltCallback+0x71c>)
 8000d1c:	f004 fd8d 	bl	800583a <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d20:	2100      	movs	r1, #0
 8000d22:	4816      	ldr	r0, [pc, #88]	; (8000d7c <HAL_UART_RxCpltCallback+0x71c>)
 8000d24:	f004 fbce 	bl	80054c4 <HAL_DAC_Start>
		}
		break;
 8000d28:	e098      	b.n	8000e5c <HAL_UART_RxCpltCallback+0x7fc>
 8000d2a:	bf00      	nop
 8000d2c:	08016b9c 	.word	0x08016b9c
 8000d30:	58020400 	.word	0x58020400
 8000d34:	08016ba8 	.word	0x08016ba8
 8000d38:	58020800 	.word	0x58020800
 8000d3c:	08016bb4 	.word	0x08016bb4
 8000d40:	08016bc0 	.word	0x08016bc0
 8000d44:	08016bd0 	.word	0x08016bd0
 8000d48:	08016bdc 	.word	0x08016bdc
 8000d4c:	08016be8 	.word	0x08016be8
 8000d50:	08016bf4 	.word	0x08016bf4
 8000d54:	08016c04 	.word	0x08016c04
 8000d58:	08016c10 	.word	0x08016c10
 8000d5c:	08016c1c 	.word	0x08016c1c
 8000d60:	08016c28 	.word	0x08016c28
 8000d64:	08016c34 	.word	0x08016c34
 8000d68:	08016c44 	.word	0x08016c44
 8000d6c:	08016c54 	.word	0x08016c54
 8000d70:	08016c60 	.word	0x08016c60
 8000d74:	08016c70 	.word	0x08016c70
 8000d78:	24000010 	.word	0x24000010
 8000d7c:	240002f4 	.word	0x240002f4
 8000d80:	08016c80 	.word	0x08016c80
 8000d84:	08016c90 	.word	0x08016c90
 8000d88:	24000554 	.word	0x24000554
 8000d8c:	24000be3 	.word	0x24000be3
 8000d90:	24000bde 	.word	0x24000bde
 8000d94:	08016c98 	.word	0x08016c98
 8000d98:	08016ca4 	.word	0x08016ca4
 8000d9c:	24000508 	.word	0x24000508
 8000da0:	24000be2 	.word	0x24000be2
 8000da4:	24000bdc 	.word	0x24000bdc
 8000da8:	08016cac 	.word	0x08016cac
 8000dac:	08016cb4 	.word	0x08016cb4
 8000db0:	240005a0 	.word	0x240005a0
 8000db4:	24000be4 	.word	0x24000be4
 8000db8:	24000be0 	.word	0x24000be0
 8000dbc:	08016cbc 	.word	0x08016cbc
 8000dc0:	08016cc4 	.word	0x08016cc4
 8000dc4:	2400000c 	.word	0x2400000c
 8000dc8:	08016ccc 	.word	0x08016ccc
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000dcc:	4828      	ldr	r0, [pc, #160]	; (8000e70 <HAL_UART_RxCpltCallback+0x810>)
 8000dce:	f015 fae3 	bl	8016398 <puts>
		if (cadence <= 50000){
 8000dd2:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <HAL_UART_RxCpltCallback+0x814>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d840      	bhi.n	8000e60 <HAL_UART_RxCpltCallback+0x800>
			cadence *= 2;
 8000dde:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <HAL_UART_RxCpltCallback+0x814>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4a23      	ldr	r2, [pc, #140]	; (8000e74 <HAL_UART_RxCpltCallback+0x814>)
 8000de6:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000de8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dec:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <HAL_UART_RxCpltCallback+0x814>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000df2:	e035      	b.n	8000e60 <HAL_UART_RxCpltCallback+0x800>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000df4:	4820      	ldr	r0, [pc, #128]	; (8000e78 <HAL_UART_RxCpltCallback+0x818>)
 8000df6:	f015 facf 	bl	8016398 <puts>
		if (cadence >= 6250){
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <HAL_UART_RxCpltCallback+0x814>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d92e      	bls.n	8000e64 <HAL_UART_RxCpltCallback+0x804>
			cadence /= 2;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <HAL_UART_RxCpltCallback+0x814>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	085b      	lsrs	r3, r3, #1
 8000e0c:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <HAL_UART_RxCpltCallback+0x814>)
 8000e0e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_UART_RxCpltCallback+0x814>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e1a:	e023      	b.n	8000e64 <HAL_UART_RxCpltCallback+0x804>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000e1c:	4817      	ldr	r0, [pc, #92]	; (8000e7c <HAL_UART_RxCpltCallback+0x81c>)
 8000e1e:	f015 fabb 	bl	8016398 <puts>
		// TODO: Exit stop mode
		break;
 8000e22:	e020      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e24:	4816      	ldr	r0, [pc, #88]	; (8000e80 <HAL_UART_RxCpltCallback+0x820>)
 8000e26:	f015 fab7 	bl	8016398 <puts>
		// TODO: Enter stop mode
		break;
 8000e2a:	e01c      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e2c:	4815      	ldr	r0, [pc, #84]	; (8000e84 <HAL_UART_RxCpltCallback+0x824>)
 8000e2e:	f015 fab3 	bl	8016398 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_UART_RxCpltCallback+0x828>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f013 fb10 	bl	801445c <xTaskResumeFromISR>
		break;
 8000e3c:	e013      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000e3e:	4813      	ldr	r0, [pc, #76]	; (8000e8c <HAL_UART_RxCpltCallback+0x82c>)
 8000e40:	f015 faaa 	bl	8016398 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_UART_RxCpltCallback+0x830>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f013 fb07 	bl	801445c <xTaskResumeFromISR>
		break;
 8000e4e:	e00a      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
	}
	default:{
		printf("Unknown Command\n");
 8000e50:	4810      	ldr	r0, [pc, #64]	; (8000e94 <HAL_UART_RxCpltCallback+0x834>)
 8000e52:	f015 faa1 	bl	8016398 <puts>
		break;
 8000e56:	e006      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e58:	bf00      	nop
 8000e5a:	e004      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e5c:	bf00      	nop
 8000e5e:	e002      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e60:	bf00      	nop
 8000e62:	e000      	b.n	8000e66 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e64:	bf00      	nop
	}
	}
}
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	08016cd8 	.word	0x08016cd8
 8000e74:	24000008 	.word	0x24000008
 8000e78:	08016ce4 	.word	0x08016ce4
 8000e7c:	08016cf0 	.word	0x08016cf0
 8000e80:	08016d00 	.word	0x08016d00
 8000e84:	08016d10 	.word	0x08016d10
 8000e88:	24000708 	.word	0x24000708
 8000e8c:	08016d1c 	.word	0x08016d1c
 8000e90:	24000968 	.word	0x24000968
 8000e94:	08016d28 	.word	0x08016d28

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f002 fd7e 	bl	800399c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f8a4 	bl	8000fec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ea4:	f000 f91e 	bl	80010e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea8:	f000 fe78 	bl	8001b9c <MX_GPIO_Init>
  MX_DMA_Init();
 8000eac:	f000 fe3e 	bl	8001b2c <MX_DMA_Init>
  MX_TIM3_Init();
 8000eb0:	f000 fda2 	bl	80019f8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000eb4:	f000 fdee 	bl	8001a94 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000eb8:	f000 fb2a 	bl	8001510 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000ebc:	f000 fc20 	bl	8001700 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000ec0:	f000 fd24 	bl	800190c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ec4:	f000 fc74 	bl	80017b0 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000ec8:	f000 fa5e 	bl	8001388 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000ecc:	f000 f93a 	bl	8001144 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000ed0:	f000 faec 	bl	80014ac <MX_DAC1_Init>
  MX_SPI1_Init();
 8000ed4:	f000 fbbc 	bl	8001650 <MX_SPI1_Init>
  MX_RTC_Init();
 8000ed8:	f000 fb5c 	bl	8001594 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	if (!handshake())
 8000edc:	f001 f852 	bl	8001f84 <handshake>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <main+0x52>
	{
		Error_Handler();
 8000ee6:	f001 fe41 	bl	8002b6c <Error_Handler>
	}

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eea:	f011 fc69 	bl	80127c0 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2108      	movs	r1, #8
 8000ef2:	2010      	movs	r0, #16
 8000ef4:	f011 fe86 	bl	8012c04 <osMessageQueueNew>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a24      	ldr	r2, [pc, #144]	; (8000f8c <main+0xf4>)
 8000efc:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000efe:	4a24      	ldr	r2, [pc, #144]	; (8000f90 <main+0xf8>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	4824      	ldr	r0, [pc, #144]	; (8000f94 <main+0xfc>)
 8000f04:	f011 fca6 	bl	8012854 <osThreadNew>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <main+0x100>)
 8000f0c:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000f0e:	4a23      	ldr	r2, [pc, #140]	; (8000f9c <main+0x104>)
 8000f10:	2100      	movs	r1, #0
 8000f12:	4823      	ldr	r0, [pc, #140]	; (8000fa0 <main+0x108>)
 8000f14:	f011 fc9e 	bl	8012854 <osThreadNew>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a22      	ldr	r2, [pc, #136]	; (8000fa4 <main+0x10c>)
 8000f1c:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <main+0x110>)
 8000f20:	2100      	movs	r1, #0
 8000f22:	4822      	ldr	r0, [pc, #136]	; (8000fac <main+0x114>)
 8000f24:	f011 fc96 	bl	8012854 <osThreadNew>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a21      	ldr	r2, [pc, #132]	; (8000fb0 <main+0x118>)
 8000f2c:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000f2e:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <main+0x11c>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	4821      	ldr	r0, [pc, #132]	; (8000fb8 <main+0x120>)
 8000f34:	f011 fc8e 	bl	8012854 <osThreadNew>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a20      	ldr	r2, [pc, #128]	; (8000fbc <main+0x124>)
 8000f3c:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000f3e:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <main+0x128>)
 8000f40:	2100      	movs	r1, #0
 8000f42:	4820      	ldr	r0, [pc, #128]	; (8000fc4 <main+0x12c>)
 8000f44:	f011 fc86 	bl	8012854 <osThreadNew>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a1f      	ldr	r2, [pc, #124]	; (8000fc8 <main+0x130>)
 8000f4c:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000f4e:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <main+0x134>)
 8000f50:	2100      	movs	r1, #0
 8000f52:	481f      	ldr	r0, [pc, #124]	; (8000fd0 <main+0x138>)
 8000f54:	f011 fc7e 	bl	8012854 <osThreadNew>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <main+0x13c>)
 8000f5c:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <main+0x140>)
 8000f60:	2100      	movs	r1, #0
 8000f62:	481e      	ldr	r0, [pc, #120]	; (8000fdc <main+0x144>)
 8000f64:	f011 fc76 	bl	8012854 <osThreadNew>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a1d      	ldr	r2, [pc, #116]	; (8000fe0 <main+0x148>)
 8000f6c:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f011 fd5e 	bl	8012a30 <osEventFlagsNew>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <main+0x14c>)
 8000f78:	6013      	str	r3, [r2, #0]
	system_setup();
 8000f7a:	f001 f891 	bl	80020a0 <system_setup>
	printf("Starting kernal...\n");
 8000f7e:	481a      	ldr	r0, [pc, #104]	; (8000fe8 <main+0x150>)
 8000f80:	f015 fa0a 	bl	8016398 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f84:	f011 fc40 	bl	8012808 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f88:	e7fe      	b.n	8000f88 <main+0xf0>
 8000f8a:	bf00      	nop
 8000f8c:	24000bcc 	.word	0x24000bcc
 8000f90:	08016d84 	.word	0x08016d84
 8000f94:	08002859 	.word	0x08002859
 8000f98:	240006f8 	.word	0x240006f8
 8000f9c:	08016da8 	.word	0x08016da8
 8000fa0:	0800289d 	.word	0x0800289d
 8000fa4:	240006fc 	.word	0x240006fc
 8000fa8:	08016dcc 	.word	0x08016dcc
 8000fac:	080028e1 	.word	0x080028e1
 8000fb0:	24000700 	.word	0x24000700
 8000fb4:	08016df0 	.word	0x08016df0
 8000fb8:	08002925 	.word	0x08002925
 8000fbc:	24000704 	.word	0x24000704
 8000fc0:	08016e14 	.word	0x08016e14
 8000fc4:	08002949 	.word	0x08002949
 8000fc8:	24000708 	.word	0x24000708
 8000fcc:	08016e38 	.word	0x08016e38
 8000fd0:	080029f1 	.word	0x080029f1
 8000fd4:	24000968 	.word	0x24000968
 8000fd8:	08016e5c 	.word	0x08016e5c
 8000fdc:	08002a99 	.word	0x08002a99
 8000fe0:	24000bc8 	.word	0x24000bc8
 8000fe4:	24000be8 	.word	0x24000be8
 8000fe8:	08016d38 	.word	0x08016d38

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b09c      	sub	sp, #112	; 0x70
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	224c      	movs	r2, #76	; 0x4c
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f015 f876 	bl	80160ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2220      	movs	r2, #32
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f015 f870 	bl	80160ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800100c:	2002      	movs	r0, #2
 800100e:	f008 fc67 	bl	80098e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	4b31      	ldr	r3, [pc, #196]	; (80010dc <SystemClock_Config+0xf0>)
 8001018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101a:	4a30      	ldr	r2, [pc, #192]	; (80010dc <SystemClock_Config+0xf0>)
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001022:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <SystemClock_Config+0xf0>)
 8001024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <SystemClock_Config+0xf4>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001034:	4a2a      	ldr	r2, [pc, #168]	; (80010e0 <SystemClock_Config+0xf4>)
 8001036:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <SystemClock_Config+0xf4>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001048:	bf00      	nop
 800104a:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <SystemClock_Config+0xf4>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001056:	d1f8      	bne.n	800104a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001058:	2301      	movs	r3, #1
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800105c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001062:	2302      	movs	r3, #2
 8001064:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001066:	2302      	movs	r3, #2
 8001068:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800106a:	2304      	movs	r3, #4
 800106c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 800106e:	2320      	movs	r3, #32
 8001070:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001072:	2304      	movs	r3, #4
 8001074:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001076:	2304      	movs	r3, #4
 8001078:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800107a:	2302      	movs	r3, #2
 800107c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800107e:	2308      	movs	r3, #8
 8001080:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001082:	2300      	movs	r3, #0
 8001084:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108e:	4618      	mov	r0, r3
 8001090:	f008 fc60 	bl	8009954 <HAL_RCC_OscConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800109a:	f001 fd67 	bl	8002b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109e:	233f      	movs	r3, #63	; 0x3f
 80010a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a2:	2303      	movs	r3, #3
 80010a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2101      	movs	r1, #1
 80010c2:	4618      	mov	r0, r3
 80010c4:	f009 f8a0 	bl	800a208 <HAL_RCC_ClockConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80010ce:	f001 fd4d 	bl	8002b6c <Error_Handler>
  }
}
 80010d2:	bf00      	nop
 80010d4:	3770      	adds	r7, #112	; 0x70
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	58000400 	.word	0x58000400
 80010e0:	58024800 	.word	0x58024800

080010e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0b0      	sub	sp, #192	; 0xc0
 80010e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ea:	463b      	mov	r3, r7
 80010ec:	22c0      	movs	r2, #192	; 0xc0
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f014 fffb 	bl	80160ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001102:	2304      	movs	r3, #4
 8001104:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001106:	2320      	movs	r3, #32
 8001108:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800110a:	2308      	movs	r3, #8
 800110c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800110e:	2304      	movs	r3, #4
 8001110:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	4618      	mov	r0, r3
 800112c:	f009 fc3a 	bl	800a9a4 <HAL_RCCEx_PeriphCLKConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001136:	f001 fd19 	bl	8002b6c <Error_Handler>
  }
}
 800113a:	bf00      	nop
 800113c:	37c0      	adds	r7, #192	; 0xc0
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800114a:	f107 031c 	add.w	r3, r7, #28
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	463b      	mov	r3, r7
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	615a      	str	r2, [r3, #20]
 8001166:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001168:	4b7a      	ldr	r3, [pc, #488]	; (8001354 <MX_ADC1_Init+0x210>)
 800116a:	4a7b      	ldr	r2, [pc, #492]	; (8001358 <MX_ADC1_Init+0x214>)
 800116c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800116e:	4b79      	ldr	r3, [pc, #484]	; (8001354 <MX_ADC1_Init+0x210>)
 8001170:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001174:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001176:	4b77      	ldr	r3, [pc, #476]	; (8001354 <MX_ADC1_Init+0x210>)
 8001178:	2208      	movs	r2, #8
 800117a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800117c:	4b75      	ldr	r3, [pc, #468]	; (8001354 <MX_ADC1_Init+0x210>)
 800117e:	2201      	movs	r2, #1
 8001180:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001182:	4b74      	ldr	r3, [pc, #464]	; (8001354 <MX_ADC1_Init+0x210>)
 8001184:	2204      	movs	r2, #4
 8001186:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001188:	4b72      	ldr	r3, [pc, #456]	; (8001354 <MX_ADC1_Init+0x210>)
 800118a:	2200      	movs	r2, #0
 800118c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800118e:	4b71      	ldr	r3, [pc, #452]	; (8001354 <MX_ADC1_Init+0x210>)
 8001190:	2201      	movs	r2, #1
 8001192:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8001194:	4b6f      	ldr	r3, [pc, #444]	; (8001354 <MX_ADC1_Init+0x210>)
 8001196:	220b      	movs	r2, #11
 8001198:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119a:	4b6e      	ldr	r3, [pc, #440]	; (8001354 <MX_ADC1_Init+0x210>)
 800119c:	2200      	movs	r2, #0
 800119e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a0:	4b6c      	ldr	r3, [pc, #432]	; (8001354 <MX_ADC1_Init+0x210>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a6:	4b6b      	ldr	r3, [pc, #428]	; (8001354 <MX_ADC1_Init+0x210>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011ac:	4b69      	ldr	r3, [pc, #420]	; (8001354 <MX_ADC1_Init+0x210>)
 80011ae:	2203      	movs	r2, #3
 80011b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011b2:	4b68      	ldr	r3, [pc, #416]	; (8001354 <MX_ADC1_Init+0x210>)
 80011b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011ba:	4b66      	ldr	r3, [pc, #408]	; (8001354 <MX_ADC1_Init+0x210>)
 80011bc:	2200      	movs	r2, #0
 80011be:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011c0:	4b64      	ldr	r3, [pc, #400]	; (8001354 <MX_ADC1_Init+0x210>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c8:	4862      	ldr	r0, [pc, #392]	; (8001354 <MX_ADC1_Init+0x210>)
 80011ca:	f002 fe73 	bl	8003eb4 <HAL_ADC_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011d4:	f001 fcca 	bl	8002b6c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	485c      	ldr	r0, [pc, #368]	; (8001354 <MX_ADC1_Init+0x210>)
 80011e4:	f003 ff8e 	bl	8005104 <HAL_ADCEx_MultiModeConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80011ee:	f001 fcbd 	bl	8002b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011f2:	4b5a      	ldr	r3, [pc, #360]	; (800135c <MX_ADC1_Init+0x218>)
 80011f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011f6:	2306      	movs	r3, #6
 80011f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80011fa:	2307      	movs	r3, #7
 80011fc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011fe:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001202:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001204:	2304      	movs	r3, #4
 8001206:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	484f      	ldr	r0, [pc, #316]	; (8001354 <MX_ADC1_Init+0x210>)
 8001216:	f003 f8d1 	bl	80043bc <HAL_ADC_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001220:	f001 fca4 	bl	8002b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001224:	4b4e      	ldr	r3, [pc, #312]	; (8001360 <MX_ADC1_Init+0x21c>)
 8001226:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001228:	230c      	movs	r3, #12
 800122a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122c:	463b      	mov	r3, r7
 800122e:	4619      	mov	r1, r3
 8001230:	4848      	ldr	r0, [pc, #288]	; (8001354 <MX_ADC1_Init+0x210>)
 8001232:	f003 f8c3 	bl	80043bc <HAL_ADC_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 800123c:	f001 fc96 	bl	8002b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001240:	4b48      	ldr	r3, [pc, #288]	; (8001364 <MX_ADC1_Init+0x220>)
 8001242:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001244:	2312      	movs	r3, #18
 8001246:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001248:	463b      	mov	r3, r7
 800124a:	4619      	mov	r1, r3
 800124c:	4841      	ldr	r0, [pc, #260]	; (8001354 <MX_ADC1_Init+0x210>)
 800124e:	f003 f8b5 	bl	80043bc <HAL_ADC_ConfigChannel>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001258:	f001 fc88 	bl	8002b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800125c:	4b42      	ldr	r3, [pc, #264]	; (8001368 <MX_ADC1_Init+0x224>)
 800125e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001260:	2318      	movs	r3, #24
 8001262:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	4619      	mov	r1, r3
 8001268:	483a      	ldr	r0, [pc, #232]	; (8001354 <MX_ADC1_Init+0x210>)
 800126a:	f003 f8a7 	bl	80043bc <HAL_ADC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001274:	f001 fc7a 	bl	8002b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001278:	4b3c      	ldr	r3, [pc, #240]	; (800136c <MX_ADC1_Init+0x228>)
 800127a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800127c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001280:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	4619      	mov	r1, r3
 8001286:	4833      	ldr	r0, [pc, #204]	; (8001354 <MX_ADC1_Init+0x210>)
 8001288:	f003 f898 	bl	80043bc <HAL_ADC_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001292:	f001 fc6b 	bl	8002b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001296:	4b36      	ldr	r3, [pc, #216]	; (8001370 <MX_ADC1_Init+0x22c>)
 8001298:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800129a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800129e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	482b      	ldr	r0, [pc, #172]	; (8001354 <MX_ADC1_Init+0x210>)
 80012a6:	f003 f889 	bl	80043bc <HAL_ADC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80012b0:	f001 fc5c 	bl	8002b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012b4:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <MX_ADC1_Init+0x230>)
 80012b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012b8:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80012bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	4619      	mov	r1, r3
 80012c2:	4824      	ldr	r0, [pc, #144]	; (8001354 <MX_ADC1_Init+0x210>)
 80012c4:	f003 f87a 	bl	80043bc <HAL_ADC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80012ce:	f001 fc4d 	bl	8002b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012d2:	4b29      	ldr	r3, [pc, #164]	; (8001378 <MX_ADC1_Init+0x234>)
 80012d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012d6:	f44f 7389 	mov.w	r3, #274	; 0x112
 80012da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	4619      	mov	r1, r3
 80012e0:	481c      	ldr	r0, [pc, #112]	; (8001354 <MX_ADC1_Init+0x210>)
 80012e2:	f003 f86b 	bl	80043bc <HAL_ADC_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 80012ec:	f001 fc3e 	bl	8002b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <MX_ADC1_Init+0x238>)
 80012f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80012f4:	f44f 738c 	mov.w	r3, #280	; 0x118
 80012f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fa:	463b      	mov	r3, r7
 80012fc:	4619      	mov	r1, r3
 80012fe:	4815      	ldr	r0, [pc, #84]	; (8001354 <MX_ADC1_Init+0x210>)
 8001300:	f003 f85c 	bl	80043bc <HAL_ADC_ConfigChannel>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800130a:	f001 fc2f 	bl	8002b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <MX_ADC1_Init+0x23c>)
 8001310:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001316:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_ADC1_Init+0x210>)
 800131e:	f003 f84d 	bl	80043bc <HAL_ADC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001328:	f001 fc20 	bl	8002b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MX_ADC1_Init+0x240>)
 800132e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001330:	f240 2306 	movw	r3, #518	; 0x206
 8001334:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <MX_ADC1_Init+0x210>)
 800133c:	f003 f83e 	bl	80043bc <HAL_ADC_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001346:	f001 fc11 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2400013c 	.word	0x2400013c
 8001358:	40022000 	.word	0x40022000
 800135c:	0c900008 	.word	0x0c900008
 8001360:	10c00010 	.word	0x10c00010
 8001364:	14f00020 	.word	0x14f00020
 8001368:	1d500080 	.word	0x1d500080
 800136c:	21800100 	.word	0x21800100
 8001370:	25b00200 	.word	0x25b00200
 8001374:	2a000400 	.word	0x2a000400
 8001378:	2e300800 	.word	0x2e300800
 800137c:	3ac04000 	.word	0x3ac04000
 8001380:	3ef08000 	.word	0x3ef08000
 8001384:	47520000 	.word	0x47520000

08001388 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
 800139c:	615a      	str	r2, [r3, #20]
 800139e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013a0:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <MX_ADC3_Init+0x110>)
 80013a2:	4a3e      	ldr	r2, [pc, #248]	; (800149c <MX_ADC3_Init+0x114>)
 80013a4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013a6:	4b3c      	ldr	r3, [pc, #240]	; (8001498 <MX_ADC3_Init+0x110>)
 80013a8:	2208      	movs	r2, #8
 80013aa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013ac:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <MX_ADC3_Init+0x110>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b2:	4b39      	ldr	r3, [pc, #228]	; (8001498 <MX_ADC3_Init+0x110>)
 80013b4:	2204      	movs	r2, #4
 80013b6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013b8:	4b37      	ldr	r3, [pc, #220]	; (8001498 <MX_ADC3_Init+0x110>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013be:	4b36      	ldr	r3, [pc, #216]	; (8001498 <MX_ADC3_Init+0x110>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80013c4:	4b34      	ldr	r3, [pc, #208]	; (8001498 <MX_ADC3_Init+0x110>)
 80013c6:	2204      	movs	r2, #4
 80013c8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <MX_ADC3_Init+0x110>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d0:	4b31      	ldr	r3, [pc, #196]	; (8001498 <MX_ADC3_Init+0x110>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <MX_ADC3_Init+0x110>)
 80013d8:	2200      	movs	r2, #0
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80013dc:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <MX_ADC3_Init+0x110>)
 80013de:	2203      	movs	r2, #3
 80013e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013e2:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <MX_ADC3_Init+0x110>)
 80013e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013ea:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <MX_ADC3_Init+0x110>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <MX_ADC3_Init+0x110>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013f8:	4827      	ldr	r0, [pc, #156]	; (8001498 <MX_ADC3_Init+0x110>)
 80013fa:	f002 fd5b 	bl	8003eb4 <HAL_ADC_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001404:	f001 fbb2 	bl	8002b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <MX_ADC3_Init+0x118>)
 800140a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800140c:	2306      	movs	r3, #6
 800140e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001410:	2307      	movs	r3, #7
 8001412:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001414:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001418:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800141a:	2304      	movs	r3, #4
 800141c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	4619      	mov	r1, r3
 800142a:	481b      	ldr	r0, [pc, #108]	; (8001498 <MX_ADC3_Init+0x110>)
 800142c:	f002 ffc6 	bl	80043bc <HAL_ADC_ConfigChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001436:	f001 fb99 	bl	8002b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_ADC3_Init+0x11c>)
 800143c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800143e:	230c      	movs	r3, #12
 8001440:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	4619      	mov	r1, r3
 8001446:	4814      	ldr	r0, [pc, #80]	; (8001498 <MX_ADC3_Init+0x110>)
 8001448:	f002 ffb8 	bl	80043bc <HAL_ADC_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8001452:	f001 fb8b 	bl	8002b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001456:	2301      	movs	r3, #1
 8001458:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800145a:	2312      	movs	r3, #18
 800145c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	480d      	ldr	r0, [pc, #52]	; (8001498 <MX_ADC3_Init+0x110>)
 8001464:	f002 ffaa 	bl	80043bc <HAL_ADC_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800146e:	f001 fb7d 	bl	8002b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <MX_ADC3_Init+0x120>)
 8001474:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001476:	2318      	movs	r3, #24
 8001478:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4619      	mov	r1, r3
 800147e:	4806      	ldr	r0, [pc, #24]	; (8001498 <MX_ADC3_Init+0x110>)
 8001480:	f002 ff9c 	bl	80043bc <HAL_ADC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800148a:	f001 fb6f 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	3720      	adds	r7, #32
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	240001a0 	.word	0x240001a0
 800149c:	58026000 	.word	0x58026000
 80014a0:	cb840000 	.word	0xcb840000
 80014a4:	cfb80000 	.word	0xcfb80000
 80014a8:	04300002 	.word	0x04300002

080014ac <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2224      	movs	r2, #36	; 0x24
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f014 fe17 	bl	80160ec <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <MX_DAC1_Init+0x5c>)
 80014c0:	4a12      	ldr	r2, [pc, #72]	; (800150c <MX_DAC1_Init+0x60>)
 80014c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014c4:	4810      	ldr	r0, [pc, #64]	; (8001508 <MX_DAC1_Init+0x5c>)
 80014c6:	f003 ffdb 	bl	8005480 <HAL_DAC_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014d0:	f001 fb4c 	bl	8002b6c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80014d8:	230a      	movs	r3, #10
 80014da:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014e0:	2301      	movs	r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	2200      	movs	r2, #0
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <MX_DAC1_Init+0x5c>)
 80014f0:	f004 f9f6 	bl	80058e0 <HAL_DAC_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80014fa:	f001 fb37 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	; 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	240002f4 	.word	0x240002f4
 800150c:	40007400 	.word	0x40007400

08001510 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001514:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <MX_I2C1_Init+0x78>)
 8001516:	4a1d      	ldr	r2, [pc, #116]	; (800158c <MX_I2C1_Init+0x7c>)
 8001518:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <MX_I2C1_Init+0x78>)
 800151c:	4a1c      	ldr	r2, [pc, #112]	; (8001590 <MX_I2C1_Init+0x80>)
 800151e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <MX_I2C1_Init+0x78>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <MX_I2C1_Init+0x78>)
 8001528:	2201      	movs	r2, #1
 800152a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <MX_I2C1_Init+0x78>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <MX_I2C1_Init+0x78>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_I2C1_Init+0x78>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_I2C1_Init+0x78>)
 8001540:	2200      	movs	r2, #0
 8001542:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001544:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_I2C1_Init+0x78>)
 8001546:	2200      	movs	r2, #0
 8001548:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800154a:	480f      	ldr	r0, [pc, #60]	; (8001588 <MX_I2C1_Init+0x78>)
 800154c:	f007 fbbc 	bl	8008cc8 <HAL_I2C_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001556:	f001 fb09 	bl	8002b6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800155a:	2100      	movs	r1, #0
 800155c:	480a      	ldr	r0, [pc, #40]	; (8001588 <MX_I2C1_Init+0x78>)
 800155e:	f008 f903 	bl	8009768 <HAL_I2CEx_ConfigAnalogFilter>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001568:	f001 fb00 	bl	8002b6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	4806      	ldr	r0, [pc, #24]	; (8001588 <MX_I2C1_Init+0x78>)
 8001570:	f008 f945 	bl	80097fe <HAL_I2CEx_ConfigDigitalFilter>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800157a:	f001 faf7 	bl	8002b6c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800157e:	2001      	movs	r0, #1
 8001580:	f008 f98a 	bl	8009898 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	24000380 	.word	0x24000380
 800158c:	40005400 	.word	0x40005400
 8001590:	0020081f 	.word	0x0020081f

08001594 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015a8:	2300      	movs	r3, #0
 80015aa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015ac:	4b26      	ldr	r3, [pc, #152]	; (8001648 <MX_RTC_Init+0xb4>)
 80015ae:	4a27      	ldr	r2, [pc, #156]	; (800164c <MX_RTC_Init+0xb8>)
 80015b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <MX_RTC_Init+0xb4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100;
 80015b8:	4b23      	ldr	r3, [pc, #140]	; (8001648 <MX_RTC_Init+0xb4>)
 80015ba:	2264      	movs	r2, #100	; 0x64
 80015bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000;
 80015be:	4b22      	ldr	r3, [pc, #136]	; (8001648 <MX_RTC_Init+0xb4>)
 80015c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80015c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <MX_RTC_Init+0xb4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <MX_RTC_Init+0xb4>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015d2:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <MX_RTC_Init+0xb4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <MX_RTC_Init+0xb4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015de:	481a      	ldr	r0, [pc, #104]	; (8001648 <MX_RTC_Init+0xb4>)
 80015e0:	f00b fede 	bl	800d3a0 <HAL_RTC_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80015ea:	f001 fabf 	bl	8002b6c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2201      	movs	r2, #1
 8001606:	4619      	mov	r1, r3
 8001608:	480f      	ldr	r0, [pc, #60]	; (8001648 <MX_RTC_Init+0xb4>)
 800160a:	f00b ff4b 	bl	800d4a4 <HAL_RTC_SetTime>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001614:	f001 faaa 	bl	8002b6c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001618:	2301      	movs	r3, #1
 800161a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800161c:	2301      	movs	r3, #1
 800161e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001620:	2301      	movs	r3, #1
 8001622:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001624:	2300      	movs	r3, #0
 8001626:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001628:	463b      	mov	r3, r7
 800162a:	2201      	movs	r2, #1
 800162c:	4619      	mov	r1, r3
 800162e:	4806      	ldr	r0, [pc, #24]	; (8001648 <MX_RTC_Init+0xb4>)
 8001630:	f00c f832 	bl	800d698 <HAL_RTC_SetDate>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800163a:	f001 fa97 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	240003d4 	.word	0x240003d4
 800164c:	58004000 	.word	0x58004000

08001650 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <MX_SPI1_Init+0xa8>)
 8001656:	4a29      	ldr	r2, [pc, #164]	; (80016fc <MX_SPI1_Init+0xac>)
 8001658:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800165a:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <MX_SPI1_Init+0xa8>)
 800165c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001660:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <MX_SPI1_Init+0xa8>)
 8001664:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001668:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <MX_SPI1_Init+0xa8>)
 800166c:	220f      	movs	r2, #15
 800166e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <MX_SPI1_Init+0xa8>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <MX_SPI1_Init+0xa8>)
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800167c:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <MX_SPI1_Init+0xa8>)
 800167e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001682:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_SPI1_Init+0xa8>)
 8001686:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800168a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_SPI1_Init+0xa8>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <MX_SPI1_Init+0xa8>)
 8001694:	2200      	movs	r2, #0
 8001696:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_SPI1_Init+0xa8>)
 800169a:	2200      	movs	r2, #0
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MX_SPI1_Init+0xa8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_SPI1_Init+0xa8>)
 80016a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_SPI1_Init+0xa8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_SPI1_Init+0xa8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_SPI1_Init+0xa8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_SPI1_Init+0xa8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_SPI1_Init+0xa8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <MX_SPI1_Init+0xa8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_SPI1_Init+0xa8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <MX_SPI1_Init+0xa8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_SPI1_Init+0xa8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016e2:	4805      	ldr	r0, [pc, #20]	; (80016f8 <MX_SPI1_Init+0xa8>)
 80016e4:	f00c f97e 	bl	800d9e4 <HAL_SPI_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80016ee:	f001 fa3d 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	240003f8 	.word	0x240003f8
 80016fc:	40013000 	.word	0x40013000

08001700 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001704:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <MX_SPI2_Init+0xa8>)
 8001706:	4a29      	ldr	r2, [pc, #164]	; (80017ac <MX_SPI2_Init+0xac>)
 8001708:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800170a:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <MX_SPI2_Init+0xa8>)
 800170c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001710:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001712:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <MX_SPI2_Init+0xa8>)
 8001714:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001718:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <MX_SPI2_Init+0xa8>)
 800171c:	220f      	movs	r2, #15
 800171e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <MX_SPI2_Init+0xa8>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <MX_SPI2_Init+0xa8>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <MX_SPI2_Init+0xa8>)
 800172e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001732:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001734:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_SPI2_Init+0xa8>)
 8001736:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800173a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_SPI2_Init+0xa8>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_SPI2_Init+0xa8>)
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_SPI2_Init+0xa8>)
 800174a:	2200      	movs	r2, #0
 800174c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <MX_SPI2_Init+0xa8>)
 8001750:	2200      	movs	r2, #0
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_SPI2_Init+0xa8>)
 8001756:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800175a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_SPI2_Init+0xa8>)
 800175e:	2200      	movs	r2, #0
 8001760:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <MX_SPI2_Init+0xa8>)
 8001764:	2200      	movs	r2, #0
 8001766:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_SPI2_Init+0xa8>)
 800176a:	2200      	movs	r2, #0
 800176c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_SPI2_Init+0xa8>)
 8001770:	2200      	movs	r2, #0
 8001772:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_SPI2_Init+0xa8>)
 8001776:	2200      	movs	r2, #0
 8001778:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <MX_SPI2_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_SPI2_Init+0xa8>)
 8001782:	2200      	movs	r2, #0
 8001784:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <MX_SPI2_Init+0xa8>)
 8001788:	2200      	movs	r2, #0
 800178a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_SPI2_Init+0xa8>)
 800178e:	2200      	movs	r2, #0
 8001790:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001792:	4805      	ldr	r0, [pc, #20]	; (80017a8 <MX_SPI2_Init+0xa8>)
 8001794:	f00c f926 	bl	800d9e4 <HAL_SPI_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800179e:	f001 f9e5 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	24000480 	.word	0x24000480
 80017ac:	40003800 	.word	0x40003800

080017b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b09a      	sub	sp, #104	; 0x68
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
 80017e0:	615a      	str	r2, [r3, #20]
 80017e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	222c      	movs	r2, #44	; 0x2c
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f014 fc7e 	bl	80160ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017f0:	4b44      	ldr	r3, [pc, #272]	; (8001904 <MX_TIM1_Init+0x154>)
 80017f2:	4a45      	ldr	r2, [pc, #276]	; (8001908 <MX_TIM1_Init+0x158>)
 80017f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80017f6:	4b43      	ldr	r3, [pc, #268]	; (8001904 <MX_TIM1_Init+0x154>)
 80017f8:	2231      	movs	r2, #49	; 0x31
 80017fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fc:	4b41      	ldr	r3, [pc, #260]	; (8001904 <MX_TIM1_Init+0x154>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8001802:	4b40      	ldr	r3, [pc, #256]	; (8001904 <MX_TIM1_Init+0x154>)
 8001804:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001808:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180a:	4b3e      	ldr	r3, [pc, #248]	; (8001904 <MX_TIM1_Init+0x154>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001810:	4b3c      	ldr	r3, [pc, #240]	; (8001904 <MX_TIM1_Init+0x154>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001816:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <MX_TIM1_Init+0x154>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800181c:	4839      	ldr	r0, [pc, #228]	; (8001904 <MX_TIM1_Init+0x154>)
 800181e:	f00c fd32 	bl	800e286 <HAL_TIM_Base_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001828:	f001 f9a0 	bl	8002b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001830:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001832:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001836:	4619      	mov	r1, r3
 8001838:	4832      	ldr	r0, [pc, #200]	; (8001904 <MX_TIM1_Init+0x154>)
 800183a:	f00d faad 	bl	800ed98 <HAL_TIM_ConfigClockSource>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001844:	f001 f992 	bl	8002b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001848:	482e      	ldr	r0, [pc, #184]	; (8001904 <MX_TIM1_Init+0x154>)
 800184a:	f00d f829 	bl	800e8a0 <HAL_TIM_PWM_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001854:	f001 f98a 	bl	8002b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800185c:	2300      	movs	r3, #0
 800185e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001864:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001868:	4619      	mov	r1, r3
 800186a:	4826      	ldr	r0, [pc, #152]	; (8001904 <MX_TIM1_Init+0x154>)
 800186c:	f00d ffea 	bl	800f844 <HAL_TIMEx_MasterConfigSynchronization>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001876:	f001 f979 	bl	8002b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800187a:	2360      	movs	r3, #96	; 0x60
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800187e:	f240 13df 	movw	r3, #479	; 0x1df
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001884:	2300      	movs	r3, #0
 8001886:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001888:	2300      	movs	r3, #0
 800188a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001894:	2300      	movs	r3, #0
 8001896:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800189c:	2200      	movs	r2, #0
 800189e:	4619      	mov	r1, r3
 80018a0:	4818      	ldr	r0, [pc, #96]	; (8001904 <MX_TIM1_Init+0x154>)
 80018a2:	f00d f965 	bl	800eb70 <HAL_TIM_PWM_ConfigChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80018ac:	f001 f95e 	bl	8002b6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	4619      	mov	r1, r3
 80018e4:	4807      	ldr	r0, [pc, #28]	; (8001904 <MX_TIM1_Init+0x154>)
 80018e6:	f00e f83b 	bl	800f960 <HAL_TIMEx_ConfigBreakDeadTime>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80018f0:	f001 f93c 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <MX_TIM1_Init+0x154>)
 80018f6:	f001 fcc9 	bl	800328c <HAL_TIM_MspPostInit>

}
 80018fa:	bf00      	nop
 80018fc:	3768      	adds	r7, #104	; 0x68
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	24000508 	.word	0x24000508
 8001908:	40010000 	.word	0x40010000

0800190c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08e      	sub	sp, #56	; 0x38
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800192c:	463b      	mov	r3, r7
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	615a      	str	r2, [r3, #20]
 800193c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800193e:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <MX_TIM2_Init+0xe8>)
 8001940:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001944:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001946:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <MX_TIM2_Init+0xe8>)
 8001948:	2231      	movs	r2, #49	; 0x31
 800194a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <MX_TIM2_Init+0xe8>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001952:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <MX_TIM2_Init+0xe8>)
 8001954:	f640 4234 	movw	r2, #3124	; 0xc34
 8001958:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195a:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <MX_TIM2_Init+0xe8>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001960:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <MX_TIM2_Init+0xe8>)
 8001962:	2280      	movs	r2, #128	; 0x80
 8001964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001966:	4823      	ldr	r0, [pc, #140]	; (80019f4 <MX_TIM2_Init+0xe8>)
 8001968:	f00c fc8d 	bl	800e286 <HAL_TIM_Base_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001972:	f001 f8fb 	bl	8002b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800197c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001980:	4619      	mov	r1, r3
 8001982:	481c      	ldr	r0, [pc, #112]	; (80019f4 <MX_TIM2_Init+0xe8>)
 8001984:	f00d fa08 	bl	800ed98 <HAL_TIM_ConfigClockSource>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800198e:	f001 f8ed 	bl	8002b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001992:	4818      	ldr	r0, [pc, #96]	; (80019f4 <MX_TIM2_Init+0xe8>)
 8001994:	f00c ff84 	bl	800e8a0 <HAL_TIM_PWM_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800199e:	f001 f8e5 	bl	8002b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019a2:	2320      	movs	r3, #32
 80019a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	4810      	ldr	r0, [pc, #64]	; (80019f4 <MX_TIM2_Init+0xe8>)
 80019b2:	f00d ff47 	bl	800f844 <HAL_TIMEx_MasterConfigSynchronization>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019bc:	f001 f8d6 	bl	8002b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c0:	2360      	movs	r3, #96	; 0x60
 80019c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019d0:	463b      	mov	r3, r7
 80019d2:	220c      	movs	r2, #12
 80019d4:	4619      	mov	r1, r3
 80019d6:	4807      	ldr	r0, [pc, #28]	; (80019f4 <MX_TIM2_Init+0xe8>)
 80019d8:	f00d f8ca 	bl	800eb70 <HAL_TIM_PWM_ConfigChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019e2:	f001 f8c3 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019e6:	4803      	ldr	r0, [pc, #12]	; (80019f4 <MX_TIM2_Init+0xe8>)
 80019e8:	f001 fc50 	bl	800328c <HAL_TIM_MspPostInit>

}
 80019ec:	bf00      	nop
 80019ee:	3738      	adds	r7, #56	; 0x38
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	24000554 	.word	0x24000554

080019f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fe:	f107 0310 	add.w	r3, r7, #16
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a16:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a18:	4a1d      	ldr	r2, [pc, #116]	; (8001a90 <MX_TIM3_Init+0x98>)
 8001a1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a1e:	2263      	movs	r2, #99	; 0x63
 8001a20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001a28:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a2a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a30:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a3c:	4813      	ldr	r0, [pc, #76]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a3e:	f00c fc22 	bl	800e286 <HAL_TIM_Base_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a48:	f001 f890 	bl	8002b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a52:	f107 0310 	add.w	r3, r7, #16
 8001a56:	4619      	mov	r1, r3
 8001a58:	480c      	ldr	r0, [pc, #48]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a5a:	f00d f99d 	bl	800ed98 <HAL_TIM_ConfigClockSource>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a64:	f001 f882 	bl	8002b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a76:	f00d fee5 	bl	800f844 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a80:	f001 f874 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a84:	bf00      	nop
 8001a86:	3720      	adds	r7, #32
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	240005a0 	.word	0x240005a0
 8001a90:	40000400 	.word	0x40000400

08001a94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a98:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <MX_USART1_UART_Init+0x90>)
 8001a9a:	4a23      	ldr	r2, [pc, #140]	; (8001b28 <MX_USART1_UART_Init+0x94>)
 8001a9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001a9e:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <MX_USART1_UART_Init+0x90>)
 8001aa0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001aa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa6:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <MX_USART1_UART_Init+0x90>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <MX_USART1_UART_Init+0x90>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <MX_USART1_UART_Init+0x90>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <MX_USART1_UART_Init+0x90>)
 8001aba:	220c      	movs	r2, #12
 8001abc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <MX_USART1_UART_Init+0x90>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <MX_USART1_UART_Init+0x90>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <MX_USART1_UART_Init+0x90>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <MX_USART1_UART_Init+0x90>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <MX_USART1_UART_Init+0x90>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001adc:	4811      	ldr	r0, [pc, #68]	; (8001b24 <MX_USART1_UART_Init+0x90>)
 8001ade:	f00d ffdb 	bl	800fa98 <HAL_UART_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001ae8:	f001 f840 	bl	8002b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aec:	2100      	movs	r1, #0
 8001aee:	480d      	ldr	r0, [pc, #52]	; (8001b24 <MX_USART1_UART_Init+0x90>)
 8001af0:	f010 fd57 	bl	80125a2 <HAL_UARTEx_SetTxFifoThreshold>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001afa:	f001 f837 	bl	8002b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001afe:	2100      	movs	r1, #0
 8001b00:	4808      	ldr	r0, [pc, #32]	; (8001b24 <MX_USART1_UART_Init+0x90>)
 8001b02:	f010 fd8c 	bl	801261e <HAL_UARTEx_SetRxFifoThreshold>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b0c:	f001 f82e 	bl	8002b6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b10:	4804      	ldr	r0, [pc, #16]	; (8001b24 <MX_USART1_UART_Init+0x90>)
 8001b12:	f010 fd0d 	bl	8012530 <HAL_UARTEx_DisableFifoMode>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b1c:	f001 f826 	bl	8002b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	240005ec 	.word	0x240005ec
 8001b28:	40011000 	.word	0x40011000

08001b2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b32:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <MX_DMA_Init+0x6c>)
 8001b34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b38:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <MX_DMA_Init+0x6c>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <MX_DMA_Init+0x6c>)
 8001b44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2105      	movs	r1, #5
 8001b54:	200b      	movs	r0, #11
 8001b56:	f003 fc6b 	bl	8005430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b5a:	200b      	movs	r0, #11
 8001b5c:	f003 fc82 	bl	8005464 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2105      	movs	r1, #5
 8001b64:	200c      	movs	r0, #12
 8001b66:	f003 fc63 	bl	8005430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b6a:	200c      	movs	r0, #12
 8001b6c:	f003 fc7a 	bl	8005464 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2105      	movs	r1, #5
 8001b74:	200d      	movs	r0, #13
 8001b76:	f003 fc5b 	bl	8005430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b7a:	200d      	movs	r0, #13
 8001b7c:	f003 fc72 	bl	8005464 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2105      	movs	r1, #5
 8001b84:	2010      	movs	r0, #16
 8001b86:	f003 fc53 	bl	8005430 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b8a:	2010      	movs	r0, #16
 8001b8c:	f003 fc6a 	bl	8005464 <HAL_NVIC_EnableIRQ>

}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	58024400 	.word	0x58024400

08001b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb2:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <MX_GPIO_Init+0xe8>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	4a32      	ldr	r2, [pc, #200]	; (8001c84 <MX_GPIO_Init+0xe8>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc2:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <MX_GPIO_Init+0xe8>)
 8001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <MX_GPIO_Init+0xe8>)
 8001bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd6:	4a2b      	ldr	r2, [pc, #172]	; (8001c84 <MX_GPIO_Init+0xe8>)
 8001bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001be0:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <MX_GPIO_Init+0xe8>)
 8001be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <MX_GPIO_Init+0xe8>)
 8001bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf4:	4a23      	ldr	r2, [pc, #140]	; (8001c84 <MX_GPIO_Init+0xe8>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <MX_GPIO_Init+0xe8>)
 8001c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0c:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <MX_GPIO_Init+0xe8>)
 8001c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c12:	4a1c      	ldr	r2, [pc, #112]	; (8001c84 <MX_GPIO_Init+0xe8>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <MX_GPIO_Init+0xe8>)
 8001c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c30:	4815      	ldr	r0, [pc, #84]	; (8001c88 <MX_GPIO_Init+0xec>)
 8001c32:	f007 f82f 	bl	8008c94 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2164      	movs	r1, #100	; 0x64
 8001c3a:	4814      	ldr	r0, [pc, #80]	; (8001c8c <MX_GPIO_Init+0xf0>)
 8001c3c:	f007 f82a 	bl	8008c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c40:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c44:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c46:	2301      	movs	r3, #1
 8001c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4619      	mov	r1, r3
 8001c58:	480b      	ldr	r0, [pc, #44]	; (8001c88 <MX_GPIO_Init+0xec>)
 8001c5a:	f006 fe53 	bl	8008904 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001c5e:	2364      	movs	r3, #100	; 0x64
 8001c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c66:	2302      	movs	r3, #2
 8001c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_GPIO_Init+0xf0>)
 8001c76:	f006 fe45 	bl	8008904 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c7a:	bf00      	nop
 8001c7c:	3728      	adds	r7, #40	; 0x28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	58024400 	.word	0x58024400
 8001c88:	58020800 	.word	0x58020800
 8001c8c:	58020400 	.word	0x58020400

08001c90 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	b299      	uxth	r1, r3
 8001ca2:	f107 0208 	add.w	r2, r7, #8
 8001ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2301      	movs	r3, #1
 8001cae:	4817      	ldr	r0, [pc, #92]	; (8001d0c <poll_i2c_sensor+0x7c>)
 8001cb0:	f007 f8a6 	bl	8008e00 <HAL_I2C_Master_Transmit>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001cb8:	7b7b      	ldrb	r3, [r7, #13]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001cbe:	4814      	ldr	r0, [pc, #80]	; (8001d10 <poll_i2c_sensor+0x80>)
 8001cc0:	f014 fb6a 	bl	8016398 <puts>
 8001cc4:	e01c      	b.n	8001d00 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	b299      	uxth	r1, r3
 8001cca:	f107 0208 	add.w	r2, r7, #8
 8001cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	480d      	ldr	r0, [pc, #52]	; (8001d0c <poll_i2c_sensor+0x7c>)
 8001cd8:	f007 f9aa 	bl	8009030 <HAL_I2C_Master_Receive>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001ce0:	7b7b      	ldrb	r3, [r7, #13]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001ce6:	480b      	ldr	r0, [pc, #44]	; (8001d14 <poll_i2c_sensor+0x84>)
 8001ce8:	f014 fb56 	bl	8016398 <puts>
 8001cec:	e008      	b.n	8001d00 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001cee:	7a3b      	ldrb	r3, [r7, #8]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001cf4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cf8:	7a7a      	ldrb	r2, [r7, #9]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	10db      	asrs	r3, r3, #3
 8001cfe:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001d00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	24000380 	.word	0x24000380
 8001d10:	08016d4c 	.word	0x08016d4c
 8001d14:	08016d5c 	.word	0x08016d5c

08001d18 <receive_pmt_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001d20:	f107 010c 	add.w	r1, r7, #12
 8001d24:	2301      	movs	r3, #1
 8001d26:	2201      	movs	r2, #1
 8001d28:	480c      	ldr	r0, [pc, #48]	; (8001d5c <receive_pmt_spi+0x44>)
 8001d2a:	f00b ff7f 	bl	800dc2c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001d32:	7b7b      	ldrb	r3, [r7, #13]
 8001d34:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <receive_pmt_spi+0x44>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <receive_pmt_spi+0x44>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d44:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7bba      	ldrb	r2, [r7, #14]
 8001d4a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	701a      	strb	r2, [r3, #0]
}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	240003f8 	.word	0x240003f8

08001d60 <receive_erpa_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001d68:	f107 010c 	add.w	r1, r7, #12
 8001d6c:	2364      	movs	r3, #100	; 0x64
 8001d6e:	2201      	movs	r2, #1
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <receive_erpa_spi+0x44>)
 8001d72:	f00b ff5b 	bl	800dc2c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001d7a:	7b7b      	ldrb	r3, [r7, #13]
 8001d7c:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <receive_erpa_spi+0x44>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <receive_erpa_spi+0x44>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d8c:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7bba      	ldrb	r2, [r7, #14]
 8001d92:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3301      	adds	r3, #1
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	701a      	strb	r2, [r3, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	24000480 	.word	0x24000480

08001da8 <receive_erpa_adc>:
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];	// SWPmon --
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <receive_erpa_adc+0x30>)
 8001db2:	885b      	ldrh	r3, [r3, #2]
 8001db4:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5]; 	// TEMP1 -- verified doesn't need to change
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <receive_erpa_adc+0x30>)
 8001db8:	895b      	ldrh	r3, [r3, #10]
 8001dba:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	89fa      	ldrh	r2, [r7, #14]
 8001dc0:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	89ba      	ldrh	r2, [r7, #12]
 8001dc8:	801a      	strh	r2, [r3, #0]
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	24000c60 	.word	0x24000c60

08001ddc <receive_hk_i2c>:
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001de4:	2390      	movs	r3, #144	; 0x90
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ff52 	bl	8001c90 <poll_i2c_sensor>
 8001dec:	4603      	mov	r3, r0
 8001dee:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001df0:	2394      	movs	r3, #148	; 0x94
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff4c 	bl	8001c90 <poll_i2c_sensor>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001dfc:	2392      	movs	r3, #146	; 0x92
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff46 	bl	8001c90 <poll_i2c_sensor>
 8001e04:	4603      	mov	r3, r0
 8001e06:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001e08:	2396      	movs	r3, #150	; 0x96
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff40 	bl	8001c90 <poll_i2c_sensor>
 8001e10:	4603      	mov	r3, r0
 8001e12:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	89fa      	ldrh	r2, [r7, #14]
 8001e18:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	89ba      	ldrh	r2, [r7, #12]
 8001e20:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3304      	adds	r3, #4
 8001e26:	897a      	ldrh	r2, [r7, #10]
 8001e28:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3306      	adds	r3, #6
 8001e2e:	893a      	ldrh	r2, [r7, #8]
 8001e30:	801a      	strh	r2, [r3, #0]
}
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <receive_hk_adc1>:
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];	// BUSVmon -- verified doesn't need to change
 8001e44:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <receive_hk_adc1+0x90>)
 8001e46:	8a9b      	ldrh	r3, [r3, #20]
 8001e48:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];	// BUSImon -- verified doesn't need to change
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <receive_hk_adc1+0x90>)
 8001e4c:	8a1b      	ldrh	r3, [r3, #16]
 8001e4e:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];	// 2v5mon -- verified doesn't need to change
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <receive_hk_adc1+0x90>)
 8001e52:	899b      	ldrh	r3, [r3, #12]
 8001e54:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];	// n3v3mon --
 8001e56:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <receive_hk_adc1+0x90>)
 8001e58:	8a5b      	ldrh	r3, [r3, #18]
 8001e5a:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];	// n200v -- verified doesn't need to change
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <receive_hk_adc1+0x90>)
 8001e5e:	889b      	ldrh	r3, [r3, #4]
 8001e60:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];	// n800v --
 8001e62:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <receive_hk_adc1+0x90>)
 8001e64:	88db      	ldrh	r3, [r3, #6]
 8001e66:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];	// 5vmon --
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <receive_hk_adc1+0x90>)
 8001e6a:	89db      	ldrh	r3, [r3, #14]
 8001e6c:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];	// 15vmon -- verified doesn't need to change
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <receive_hk_adc1+0x90>)
 8001e70:	891b      	ldrh	r3, [r3, #8]
 8001e72:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];	// 5vrefmon --
 8001e74:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <receive_hk_adc1+0x90>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	8bfa      	ldrh	r2, [r7, #30]
 8001e7e:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3302      	adds	r3, #2
 8001e84:	8bba      	ldrh	r2, [r7, #28]
 8001e86:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	8b7a      	ldrh	r2, [r7, #26]
 8001e8e:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3306      	adds	r3, #6
 8001e94:	8b3a      	ldrh	r2, [r7, #24]
 8001e96:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3308      	adds	r3, #8
 8001e9c:	8afa      	ldrh	r2, [r7, #22]
 8001e9e:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	330a      	adds	r3, #10
 8001ea4:	8aba      	ldrh	r2, [r7, #20]
 8001ea6:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	330c      	adds	r3, #12
 8001eac:	8a7a      	ldrh	r2, [r7, #18]
 8001eae:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	330e      	adds	r3, #14
 8001eb4:	8a3a      	ldrh	r2, [r7, #16]
 8001eb6:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3310      	adds	r3, #16
 8001ebc:	89fa      	ldrh	r2, [r7, #14]
 8001ebe:	801a      	strh	r2, [r3, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	3724      	adds	r7, #36	; 0x24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	24000c60 	.word	0x24000c60

08001ed0 <receive_hk_adc3>:
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <receive_hk_adc3+0x4c>)
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <receive_hk_adc3+0x4c>)
 8001ee0:	885b      	ldrh	r3, [r3, #2]
 8001ee2:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2]; 		// n5vmon --
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <receive_hk_adc3+0x4c>)
 8001ee6:	889b      	ldrh	r3, [r3, #4]
 8001ee8:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];		// 3v3mon --
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <receive_hk_adc3+0x4c>)
 8001eec:	88db      	ldrh	r3, [r3, #6]
 8001eee:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	89fa      	ldrh	r2, [r7, #14]
 8001ef4:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3302      	adds	r3, #2
 8001efa:	89ba      	ldrh	r2, [r7, #12]
 8001efc:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3304      	adds	r3, #4
 8001f02:	897a      	ldrh	r2, [r7, #10]
 8001f04:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3306      	adds	r3, #6
 8001f0a:	893a      	ldrh	r2, [r7, #8]
 8001f0c:	801a      	strh	r2, [r3, #0]
}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	24000c80 	.word	0x24000c80

08001f20 <HAL_UART_TxCpltCallback>:

// *********************************************************************************************************** HELPER FUNCTIONS
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <HAL_UART_TxCpltCallback+0x1c>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	24000000 	.word	0x24000000

08001f40 <create_packet>:

packet_t create_packet(const uint8_t* data, uint16_t size) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f014 f8ad 	bl	80160b0 <malloc>
 8001f56:	4603      	mov	r3, r0
 8001f58:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	88fa      	ldrh	r2, [r7, #6]
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f014 f8b5 	bl	80160d0 <memcpy>
    packet.size = size;
 8001f66:	88fb      	ldrh	r3, [r7, #6]
 8001f68:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f107 0310 	add.w	r3, r7, #16
 8001f72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f76:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <handshake>:

int handshake()
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b090      	sub	sp, #64	; 0x40
 8001f88:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8001f8a:	230a      	movs	r3, #10
 8001f8c:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do
	{
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8001f8e:	f107 011c 	add.w	r1, r7, #28
 8001f92:	2364      	movs	r3, #100	; 0x64
 8001f94:	2209      	movs	r2, #9
 8001f96:	4840      	ldr	r0, [pc, #256]	; (8002098 <handshake+0x114>)
 8001f98:	f00d fe5c 	bl	800fc54 <HAL_UART_Receive>
		key = rx_buffer[0];
 8001f9c:	7f3b      	ldrb	r3, [r7, #28]
 8001f9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}while(key != 0xFF);
 8001fa2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001fa6:	2bff      	cmp	r3, #255	; 0xff
 8001fa8:	d1f1      	bne.n	8001f8e <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8001faa:	7f7b      	ldrb	r3, [r7, #29]
 8001fac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001fb0:	7fbb      	ldrb	r3, [r7, #30]
 8001fb2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001fb6:	7ffb      	ldrb	r3, [r7, #31]
 8001fb8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8001fbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001fc4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001fc8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8001fcc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001fd0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8]; // Combine MSB and LSB for milliseconds
 8001fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	b21a      	sxth	r2, r3
 8001fdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8001fe8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001fec:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8001fee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ff2:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8001ff4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001ff8:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8001ffa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ffe:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 8002000:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002004:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 8002006:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800200a:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds;
 800200c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800200e:	60bb      	str	r3, [r7, #8]


	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 8002010:	f107 0318 	add.w	r3, r7, #24
 8002014:	2200      	movs	r2, #0
 8002016:	4619      	mov	r1, r3
 8002018:	4820      	ldr	r0, [pc, #128]	; (800209c <handshake+0x118>)
 800201a:	f00b fb3d 	bl	800d698 <HAL_RTC_SetDate>
 800201e:	4603      	mov	r3, r0
 8002020:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8002024:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <handshake+0xac>
	{
		Error_Handler();
 800202c:	f000 fd9e 	bl	8002b6c <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	2200      	movs	r2, #0
 8002034:	4619      	mov	r1, r3
 8002036:	4819      	ldr	r0, [pc, #100]	; (800209c <handshake+0x118>)
 8002038:	f00b fa34 	bl	800d4a4 <HAL_RTC_SetTime>
 800203c:	4603      	mov	r3, r0
 800203e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 8002042:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <handshake+0xca>
	{
		Error_Handler();
 800204a:	f000 fd8f 	bl	8002b6c <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 800204e:	23fa      	movs	r3, #250	; 0xfa
 8002050:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 1;
 8002054:	2301      	movs	r3, #1
 8002056:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 2;
 8002066:	2302      	movs	r3, #2
 8002068:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < allowed_tries; i++)
 800206c:	2300      	movs	r3, #0
 800206e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002070:	e009      	b.n	8002086 <handshake+0x102>
	{
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 8002072:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002076:	2364      	movs	r3, #100	; 0x64
 8002078:	2205      	movs	r2, #5
 800207a:	4807      	ldr	r0, [pc, #28]	; (8002098 <handshake+0x114>)
 800207c:	f00d fd5c 	bl	800fb38 <HAL_UART_Transmit>
	for(int i = 0; i < allowed_tries; i++)
 8002080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002082:	3301      	adds	r3, #1
 8002084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002086:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208a:	429a      	cmp	r2, r3
 800208c:	dbf1      	blt.n	8002072 <handshake+0xee>
	}

	return 1;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	3740      	adds	r7, #64	; 0x40
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	240005ec 	.word	0x240005ec
 800209c:	240003d4 	.word	0x240003d4

080020a0 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	TIM2->CCR4 = 312;
 80020a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020a8:	f44f 729c 	mov.w	r2, #312	; 0x138
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80020ae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020b6:	4815      	ldr	r0, [pc, #84]	; (800210c <system_setup+0x6c>)
 80020b8:	f002 ffc0 	bl	800503c <HAL_ADCEx_Calibration_Start>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <system_setup+0x26>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 80020c2:	f000 fd53 	bl	8002b6c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80020c6:	220b      	movs	r2, #11
 80020c8:	4911      	ldr	r1, [pc, #68]	; (8002110 <system_setup+0x70>)
 80020ca:	4810      	ldr	r0, [pc, #64]	; (800210c <system_setup+0x6c>)
 80020cc:	f002 f894 	bl	80041f8 <HAL_ADC_Start_DMA>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <system_setup+0x3a>
			ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80020d6:	f000 fd49 	bl	8002b6c <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80020da:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020e2:	480c      	ldr	r0, [pc, #48]	; (8002114 <system_setup+0x74>)
 80020e4:	f002 ffaa 	bl	800503c <HAL_ADCEx_Calibration_Start>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <system_setup+0x52>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 80020ee:	f000 fd3d 	bl	8002b6c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80020f2:	2204      	movs	r2, #4
 80020f4:	4908      	ldr	r1, [pc, #32]	; (8002118 <system_setup+0x78>)
 80020f6:	4807      	ldr	r0, [pc, #28]	; (8002114 <system_setup+0x74>)
 80020f8:	f002 f87e 	bl	80041f8 <HAL_ADC_Start_DMA>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <system_setup+0x66>
			ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002102:	f000 fd33 	bl	8002b6c <Error_Handler>
	}
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	2400013c 	.word	0x2400013c
 8002110:	24000c60 	.word	0x24000c60
 8002114:	240001a0 	.word	0x240001a0
 8002118:	24000c80 	.word	0x24000c80

0800211c <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8002124:	f107 0310 	add.w	r3, r7, #16
 8002128:	2200      	movs	r2, #0
 800212a:	4619      	mov	r1, r3
 800212c:	4821      	ldr	r0, [pc, #132]	; (80021b4 <getTimestamp+0x98>)
 800212e:	f00b fa57 	bl	800d5e0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	2200      	movs	r2, #0
 8002138:	4619      	mov	r1, r3
 800213a:	481e      	ldr	r0, [pc, #120]	; (80021b4 <getTimestamp+0x98>)
 800213c:	f00b fb34 	bl	800d7a8 <HAL_RTC_GetDate>

	uint32_t milliseconds = 1000000 - (currentTime.SubSeconds * 100);
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2264      	movs	r2, #100	; 0x64
 8002144:	fb03 f202 	mul.w	r2, r3, r2
 8002148:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <getTimestamp+0x9c>)
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	627b      	str	r3, [r7, #36]	; 0x24


	buffer[0] = currentDate.Year;		// 0-99
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;		// 1-12
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3301      	adds	r3, #1
 8002158:	7b7a      	ldrb	r2, [r7, #13]
 800215a:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;		// 1-31
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3302      	adds	r3, #2
 8002160:	7bba      	ldrb	r2, [r7, #14]
 8002162:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3303      	adds	r3, #3
 8002168:	7c3a      	ldrb	r2, [r7, #16]
 800216a:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3304      	adds	r3, #4
 8002170:	7c7a      	ldrb	r2, [r7, #17]
 8002172:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3305      	adds	r3, #5
 8002178:	7cba      	ldrb	r2, [r7, #18]
 800217a:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);  // High byte of milliseconds
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	0e1a      	lsrs	r2, r3, #24
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3306      	adds	r3, #6
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);  // High byte of milliseconds
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	0c1a      	lsrs	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3307      	adds	r3, #7
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);  // High byte of milliseconds
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	0a1a      	lsrs	r2, r3, #8
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3308      	adds	r3, #8
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3309      	adds	r3, #9
 80021a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	701a      	strb	r2, [r3, #0]
}
 80021aa:	bf00      	nop
 80021ac:	3728      	adds	r7, #40	; 0x28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	240003d4 	.word	0x240003d4
 80021b8:	000f4240 	.word	0x000f4240

080021bc <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80021c2:	bf00      	nop
 80021c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021c8:	4845      	ldr	r0, [pc, #276]	; (80022e0 <sample_pmt+0x124>)
 80021ca:	f006 fd4b 	bl	8008c64 <HAL_GPIO_ReadPin>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f7      	bne.n	80021c4 <sample_pmt+0x8>
	}
	uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80021d4:	2010      	movs	r0, #16
 80021d6:	f013 ff6b 	bl	80160b0 <malloc>
 80021da:	4603      	mov	r3, r0
 80021dc:	617b      	str	r3, [r7, #20]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 80021de:	2002      	movs	r0, #2
 80021e0:	f013 ff66 	bl	80160b0 <malloc>
 80021e4:	4603      	mov	r3, r0
 80021e6:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(10 * sizeof(uint8_t));
 80021e8:	200a      	movs	r0, #10
 80021ea:	f013 ff61 	bl	80160b0 <malloc>
 80021ee:	4603      	mov	r3, r0
 80021f0:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7ff ff92 	bl	800211c <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 80021f8:	6938      	ldr	r0, [r7, #16]
 80021fa:	f7ff fd8d 	bl	8001d18 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	22bb      	movs	r2, #187	; 0xbb
 8002202:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3301      	adds	r3, #1
 8002208:	22bb      	movs	r2, #187	; 0xbb
 800220a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 800220c:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <sample_pmt+0x128>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	b29a      	uxth	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	3302      	adds	r3, #2
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 800221c:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <sample_pmt+0x128>)
 800221e:	881a      	ldrh	r2, [r3, #0]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3303      	adds	r3, #3
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	3304      	adds	r3, #4
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	7812      	ldrb	r2, [r2, #0]
 8002230:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3305      	adds	r3, #5
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	7852      	ldrb	r2, [r2, #1]
 800223a:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	3306      	adds	r3, #6
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	7812      	ldrb	r2, [r2, #0]
 8002244:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3307      	adds	r3, #7
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	7852      	ldrb	r2, [r2, #1]
 800224e:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	3308      	adds	r3, #8
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	7892      	ldrb	r2, [r2, #2]
 8002258:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3309      	adds	r3, #9
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	78d2      	ldrb	r2, [r2, #3]
 8002262:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	330a      	adds	r3, #10
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	7912      	ldrb	r2, [r2, #4]
 800226c:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	330b      	adds	r3, #11
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	7952      	ldrb	r2, [r2, #5]
 8002276:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	330c      	adds	r3, #12
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	7992      	ldrb	r2, [r2, #6]
 8002280:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	330d      	adds	r3, #13
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	79d2      	ldrb	r2, [r2, #7]
 800228a:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[8];
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	330e      	adds	r3, #14
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	7a12      	ldrb	r2, [r2, #8]
 8002294:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[9];
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	330f      	adds	r3, #15
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	7a52      	ldrb	r2, [r2, #9]
 800229e:	701a      	strb	r2, [r3, #0]


	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2210      	movs	r2, #16
 80022a4:	6979      	ldr	r1, [r7, #20]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fe4a 	bl	8001f40 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <sample_pmt+0x12c>)
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	1d39      	adds	r1, r7, #4
 80022b2:	2300      	movs	r3, #0
 80022b4:	2200      	movs	r2, #0
 80022b6:	f010 fd19 	bl	8012cec <osMessageQueuePut>
	available_msgs++;
 80022ba:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <sample_pmt+0x130>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3301      	adds	r3, #1
 80022c0:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <sample_pmt+0x130>)
 80022c2:	6013      	str	r3, [r2, #0]
	free(buffer);
 80022c4:	6978      	ldr	r0, [r7, #20]
 80022c6:	f013 fefb 	bl	80160c0 <free>
	free(pmt_spi);
 80022ca:	6938      	ldr	r0, [r7, #16]
 80022cc:	f013 fef8 	bl	80160c0 <free>
	free(timestamp);
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f013 fef5 	bl	80160c0 <free>
}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	58020000 	.word	0x58020000
 80022e4:	24000bdc 	.word	0x24000bdc
 80022e8:	24000bcc 	.word	0x24000bcc
 80022ec:	24000bd8 	.word	0x24000bd8

080022f0 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80022f6:	bf00      	nop
 80022f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022fc:	4859      	ldr	r0, [pc, #356]	; (8002464 <sample_erpa+0x174>)
 80022fe:	f006 fcb1 	bl	8008c64 <HAL_GPIO_ReadPin>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f7      	bne.n	80022f8 <sample_erpa+0x8>
	}

	uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002308:	2014      	movs	r0, #20
 800230a:	f013 fed1 	bl	80160b0 <malloc>
 800230e:	4603      	mov	r3, r0
 8002310:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8002312:	2002      	movs	r0, #2
 8002314:	f013 fecc 	bl	80160b0 <malloc>
 8002318:	4603      	mov	r3, r0
 800231a:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 800231c:	2004      	movs	r0, #4
 800231e:	f013 fec7 	bl	80160b0 <malloc>
 8002322:	4603      	mov	r3, r0
 8002324:	60fb      	str	r3, [r7, #12]
	uint8_t* timestamp = (uint8_t*)malloc(10 * sizeof(uint8_t));
 8002326:	200a      	movs	r0, #10
 8002328:	f013 fec2 	bl	80160b0 <malloc>
 800232c:	4603      	mov	r3, r0
 800232e:	60bb      	str	r3, [r7, #8]
	getTimestamp(timestamp);
 8002330:	68b8      	ldr	r0, [r7, #8]
 8002332:	f7ff fef3 	bl	800211c <getTimestamp>
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 8002336:	6938      	ldr	r0, [r7, #16]
 8002338:	f7ff fd12 	bl	8001d60 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f7ff fd33 	bl	8001da8 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	22aa      	movs	r2, #170	; 0xaa
 8002346:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	3301      	adds	r3, #1
 800234c:	22aa      	movs	r2, #170	; 0xaa
 800234e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8002350:	4b45      	ldr	r3, [pc, #276]	; (8002468 <sample_erpa+0x178>)
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	b29a      	uxth	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	3302      	adds	r3, #2
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8002360:	4b41      	ldr	r3, [pc, #260]	; (8002468 <sample_erpa+0x178>)
 8002362:	881a      	ldrh	r2, [r3, #0]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3303      	adds	r3, #3
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	b29a      	uxth	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3304      	adds	r3, #4
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	881a      	ldrh	r2, [r3, #0]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	3305      	adds	r3, #5
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3302      	adds	r3, #2
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	b29a      	uxth	r2, r3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	3306      	adds	r3, #6
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3302      	adds	r3, #2
 800239e:	881a      	ldrh	r2, [r3, #0]
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	3307      	adds	r3, #7
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3308      	adds	r3, #8
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	7812      	ldrb	r2, [r2, #0]
 80023b0:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	3309      	adds	r3, #9
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	7852      	ldrb	r2, [r2, #1]
 80023ba:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	330a      	adds	r3, #10
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	330b      	adds	r3, #11
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	7852      	ldrb	r2, [r2, #1]
 80023ce:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	330c      	adds	r3, #12
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	7892      	ldrb	r2, [r2, #2]
 80023d8:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	330d      	adds	r3, #13
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	78d2      	ldrb	r2, [r2, #3]
 80023e2:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	330e      	adds	r3, #14
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	7912      	ldrb	r2, [r2, #4]
 80023ec:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	330f      	adds	r3, #15
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	7952      	ldrb	r2, [r2, #5]
 80023f6:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	3310      	adds	r3, #16
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	7992      	ldrb	r2, [r2, #6]
 8002400:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	3311      	adds	r3, #17
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	79d2      	ldrb	r2, [r2, #7]
 800240a:	701a      	strb	r2, [r3, #0]
	buffer[18] = timestamp[8];
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	3312      	adds	r3, #18
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	7a12      	ldrb	r2, [r2, #8]
 8002414:	701a      	strb	r2, [r3, #0]
	buffer[19] = timestamp[9];
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3313      	adds	r3, #19
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	7a52      	ldrb	r2, [r2, #9]
 800241e:	701a      	strb	r2, [r3, #0]




	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8002420:	463b      	mov	r3, r7
 8002422:	2214      	movs	r2, #20
 8002424:	6979      	ldr	r1, [r7, #20]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fd8a 	bl	8001f40 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <sample_erpa+0x17c>)
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	4639      	mov	r1, r7
 8002432:	2300      	movs	r3, #0
 8002434:	2200      	movs	r2, #0
 8002436:	f010 fc59 	bl	8012cec <osMessageQueuePut>
	available_msgs++;
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <sample_erpa+0x180>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	3301      	adds	r3, #1
 8002440:	4a0b      	ldr	r2, [pc, #44]	; (8002470 <sample_erpa+0x180>)
 8002442:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002444:	6978      	ldr	r0, [r7, #20]
 8002446:	f013 fe3b 	bl	80160c0 <free>
	free(erpa_spi);
 800244a:	6938      	ldr	r0, [r7, #16]
 800244c:	f013 fe38 	bl	80160c0 <free>
	free(erpa_adc);
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f013 fe35 	bl	80160c0 <free>
	free(timestamp);
 8002456:	68b8      	ldr	r0, [r7, #8]
 8002458:	f013 fe32 	bl	80160c0 <free>
}
 800245c:	bf00      	nop
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	58020400 	.word	0x58020400
 8002468:	24000bde 	.word	0x24000bde
 800246c:	24000bcc 	.word	0x24000bcc
 8002470:	24000bd8 	.word	0x24000bd8

08002474 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
	uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 800247a:	2030      	movs	r0, #48	; 0x30
 800247c:	f013 fe18 	bl	80160b0 <malloc>
 8002480:	4603      	mov	r3, r0
 8002482:	61fb      	str	r3, [r7, #28]

	static uint16_t last_i2c_reading[4];
	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8002484:	2008      	movs	r0, #8
 8002486:	f013 fe13 	bl	80160b0 <malloc>
 800248a:	4603      	mov	r3, r0
 800248c:	61bb      	str	r3, [r7, #24]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 800248e:	2012      	movs	r0, #18
 8002490:	f013 fe0e 	bl	80160b0 <malloc>
 8002494:	4603      	mov	r3, r0
 8002496:	617b      	str	r3, [r7, #20]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8002498:	2008      	movs	r0, #8
 800249a:	f013 fe09 	bl	80160b0 <malloc>
 800249e:	4603      	mov	r3, r0
 80024a0:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(10 * sizeof(uint8_t));
 80024a2:	200a      	movs	r0, #10
 80024a4:	f013 fe04 	bl	80160b0 <malloc>
 80024a8:	4603      	mov	r3, r0
 80024aa:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f7ff fe35 	bl	800211c <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999){
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <sample_hk+0x8c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ba:	db25      	blt.n	8002508 <sample_hk+0x94>
		receive_hk_i2c(hk_i2c);
 80024bc:	69b8      	ldr	r0, [r7, #24]
 80024be:	f7ff fc8d 	bl	8001ddc <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <sample_hk+0x90>)
 80024cc:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	3302      	adds	r3, #2
 80024d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <sample_hk+0x90>)
 80024da:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	3304      	adds	r3, #4
 80024e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <sample_hk+0x90>)
 80024e8:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	3306      	adds	r3, #6
 80024ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <sample_hk+0x90>)
 80024f6:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 80024f8:	4b01      	ldr	r3, [pc, #4]	; (8002500 <sample_hk+0x8c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e01f      	b.n	8002540 <sample_hk+0xcc>
 8002500:	24000004 	.word	0x24000004
 8002504:	24000c88 	.word	0x24000c88
	}
	else{
		TEMPERATURE_COUNTER++;
 8002508:	4ba4      	ldr	r3, [pc, #656]	; (800279c <sample_hk+0x328>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3301      	adds	r3, #1
 800250e:	4aa3      	ldr	r2, [pc, #652]	; (800279c <sample_hk+0x328>)
 8002510:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 8002512:	4ba3      	ldr	r3, [pc, #652]	; (80027a0 <sample_hk+0x32c>)
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	b21a      	sxth	r2, r3
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 800251c:	4ba0      	ldr	r3, [pc, #640]	; (80027a0 <sample_hk+0x32c>)
 800251e:	885a      	ldrh	r2, [r3, #2]
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	3302      	adds	r3, #2
 8002524:	b212      	sxth	r2, r2
 8002526:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 8002528:	4b9d      	ldr	r3, [pc, #628]	; (80027a0 <sample_hk+0x32c>)
 800252a:	889a      	ldrh	r2, [r3, #4]
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	3304      	adds	r3, #4
 8002530:	b212      	sxth	r2, r2
 8002532:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 8002534:	4b9a      	ldr	r3, [pc, #616]	; (80027a0 <sample_hk+0x32c>)
 8002536:	88da      	ldrh	r2, [r3, #6]
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	3306      	adds	r3, #6
 800253c:	b212      	sxth	r2, r2
 800253e:	801a      	strh	r2, [r3, #0]
	}
	receive_hk_adc1(hk_adc1);
 8002540:	6978      	ldr	r0, [r7, #20]
 8002542:	f7ff fc7b 	bl	8001e3c <receive_hk_adc1>
	receive_hk_adc3(hk_adc3);
 8002546:	6938      	ldr	r0, [r7, #16]
 8002548:	f7ff fcc2 	bl	8001ed0 <receive_hk_adc3>
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	22cc      	movs	r2, #204	; 0xcc
 8002550:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3301      	adds	r3, #1
 8002556:	22cc      	movs	r2, #204	; 0xcc
 8002558:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800255a:	4b92      	ldr	r3, [pc, #584]	; (80027a4 <sample_hk+0x330>)
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	b29a      	uxth	r2, r3
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3302      	adds	r3, #2
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800256a:	4b8e      	ldr	r3, [pc, #568]	; (80027a4 <sample_hk+0x330>)
 800256c:	881a      	ldrh	r2, [r3, #0]
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3303      	adds	r3, #3
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	3302      	adds	r3, #2
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	b29a      	uxth	r2, r3
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	3304      	adds	r3, #4
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	3302      	adds	r3, #2
 800258c:	881a      	ldrh	r2, [r3, #0]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3305      	adds	r3, #5
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	0a1b      	lsrs	r3, r3, #8
 800259c:	b29a      	uxth	r2, r3
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3306      	adds	r3, #6
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	881a      	ldrh	r2, [r3, #0]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3307      	adds	r3, #7
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b8:	121a      	asrs	r2, r3, #8
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3308      	adds	r3, #8
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	3309      	adds	r3, #9
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	3302      	adds	r3, #2
 80025d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d8:	121a      	asrs	r2, r3, #8
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	330a      	adds	r3, #10
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	3302      	adds	r3, #2
 80025e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	330b      	adds	r3, #11
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	3304      	adds	r3, #4
 80025f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025fa:	121a      	asrs	r2, r3, #8
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	330c      	adds	r3, #12
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	3304      	adds	r3, #4
 8002608:	f9b3 2000 	ldrsh.w	r2, [r3]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	330d      	adds	r3, #13
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	3306      	adds	r3, #6
 8002618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800261c:	121a      	asrs	r2, r3, #8
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	330e      	adds	r3, #14
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	3306      	adds	r3, #6
 800262a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	330f      	adds	r3, #15
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	b29a      	uxth	r2, r3
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3310      	adds	r3, #16
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	881a      	ldrh	r2, [r3, #0]
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3311      	adds	r3, #17
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3302      	adds	r3, #2
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	b29a      	uxth	r2, r3
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	3312      	adds	r3, #18
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	3302      	adds	r3, #2
 8002668:	881a      	ldrh	r2, [r3, #0]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3313      	adds	r3, #19
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3304      	adds	r3, #4
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	0a1b      	lsrs	r3, r3, #8
 800267a:	b29a      	uxth	r2, r3
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	3314      	adds	r3, #20
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	3304      	adds	r3, #4
 8002688:	881a      	ldrh	r2, [r3, #0]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3315      	adds	r3, #21
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc3[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	3306      	adds	r3, #6
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	b29a      	uxth	r2, r3
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	3316      	adds	r3, #22
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc3[3] & 0xFF);			// HK 3v3mon LSB
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	3306      	adds	r3, #6
 80026a8:	881a      	ldrh	r2, [r3, #0]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3317      	adds	r3, #23
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	330c      	adds	r3, #12
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	3318      	adds	r3, #24
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	330c      	adds	r3, #12
 80026c8:	881a      	ldrh	r2, [r3, #0]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3319      	adds	r3, #25
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3306      	adds	r3, #6
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	b29a      	uxth	r2, r3
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	331a      	adds	r3, #26
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3306      	adds	r3, #6
 80026e8:	881a      	ldrh	r2, [r3, #0]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	331b      	adds	r3, #27
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc3[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	3304      	adds	r3, #4
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	331c      	adds	r3, #28
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc3[2] & 0xFF);			// HK n5vmon LSB
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	3304      	adds	r3, #4
 8002708:	881a      	ldrh	r2, [r3, #0]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	331d      	adds	r3, #29
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	330e      	adds	r3, #14
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	0a1b      	lsrs	r3, r3, #8
 800271a:	b29a      	uxth	r2, r3
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	331e      	adds	r3, #30
 8002720:	b2d2      	uxtb	r2, r2
 8002722:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	330e      	adds	r3, #14
 8002728:	881a      	ldrh	r2, [r3, #0]
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	331f      	adds	r3, #31
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	3310      	adds	r3, #16
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	0a1b      	lsrs	r3, r3, #8
 800273a:	b29a      	uxth	r2, r3
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	3320      	adds	r3, #32
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	3310      	adds	r3, #16
 8002748:	881a      	ldrh	r2, [r3, #0]
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3321      	adds	r3, #33	; 0x21
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3308      	adds	r3, #8
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	b29a      	uxth	r2, r3
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	3322      	adds	r3, #34	; 0x22
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	3308      	adds	r3, #8
 8002768:	881a      	ldrh	r2, [r3, #0]
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3323      	adds	r3, #35	; 0x23
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	330a      	adds	r3, #10
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	b29a      	uxth	r2, r3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	3324      	adds	r3, #36	; 0x24
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	330a      	adds	r3, #10
 8002788:	881a      	ldrh	r2, [r3, #0]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3325      	adds	r3, #37	; 0x25
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3326      	adds	r3, #38	; 0x26
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	e006      	b.n	80027a8 <sample_hk+0x334>
 800279a:	bf00      	nop
 800279c:	24000004 	.word	0x24000004
 80027a0:	24000c88 	.word	0x24000c88
 80027a4:	24000be0 	.word	0x24000be0
 80027a8:	7812      	ldrb	r2, [r2, #0]
 80027aa:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	3327      	adds	r3, #39	; 0x27
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	7852      	ldrb	r2, [r2, #1]
 80027b4:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3328      	adds	r3, #40	; 0x28
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	7892      	ldrb	r2, [r2, #2]
 80027be:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	3329      	adds	r3, #41	; 0x29
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	78d2      	ldrb	r2, [r2, #3]
 80027c8:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	332a      	adds	r3, #42	; 0x2a
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	7912      	ldrb	r2, [r2, #4]
 80027d2:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	332b      	adds	r3, #43	; 0x2b
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	7952      	ldrb	r2, [r2, #5]
 80027dc:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	332c      	adds	r3, #44	; 0x2c
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	7992      	ldrb	r2, [r2, #6]
 80027e6:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	332d      	adds	r3, #45	; 0x2d
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	79d2      	ldrb	r2, [r2, #7]
 80027f0:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[8];
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	332e      	adds	r3, #46	; 0x2e
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	7a12      	ldrb	r2, [r2, #8]
 80027fa:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[9];
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	332f      	adds	r3, #47	; 0x2f
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	7a52      	ldrb	r2, [r2, #9]
 8002804:	701a      	strb	r2, [r3, #0]


	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	2230      	movs	r2, #48	; 0x30
 800280a:	69f9      	ldr	r1, [r7, #28]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fb97 	bl	8001f40 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <sample_hk+0x3dc>)
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	1d39      	adds	r1, r7, #4
 8002818:	2300      	movs	r3, #0
 800281a:	2200      	movs	r2, #0
 800281c:	f010 fa66 	bl	8012cec <osMessageQueuePut>
	available_msgs++;
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <sample_hk+0x3e0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3301      	adds	r3, #1
 8002826:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <sample_hk+0x3e0>)
 8002828:	6013      	str	r3, [r2, #0]

	free(buffer);
 800282a:	69f8      	ldr	r0, [r7, #28]
 800282c:	f013 fc48 	bl	80160c0 <free>
	free(hk_i2c);
 8002830:	69b8      	ldr	r0, [r7, #24]
 8002832:	f013 fc45 	bl	80160c0 <free>
	free(hk_adc1);
 8002836:	6978      	ldr	r0, [r7, #20]
 8002838:	f013 fc42 	bl	80160c0 <free>
	free(hk_adc3);
 800283c:	6938      	ldr	r0, [r7, #16]
 800283e:	f013 fc3f 	bl	80160c0 <free>
	free(timestamp);
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f013 fc3c 	bl	80160c0 <free>
}
 8002848:	bf00      	nop
 800284a:	3720      	adds	r7, #32
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	24000bcc 	.word	0x24000bcc
 8002854:	24000bd8 	.word	0x24000bd8

08002858 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <PMT_init+0x38>)
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002868:	2200      	movs	r2, #0
 800286a:	2101      	movs	r1, #1
 800286c:	f010 f964 	bl	8012b38 <osEventFlagsWait>
		if(PMT_ON){
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <PMT_init+0x3c>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d007      	beq.n	8002888 <PMT_init+0x30>
			sample_pmt();
 8002878:	f7ff fca0 	bl	80021bc <sample_pmt>
			pmt_seq++;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <PMT_init+0x40>)
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	3301      	adds	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <PMT_init+0x40>)
 8002886:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002888:	f010 f876 	bl	8012978 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800288c:	e7e8      	b.n	8002860 <PMT_init+0x8>
 800288e:	bf00      	nop
 8002890:	24000be8 	.word	0x24000be8
 8002894:	24000be2 	.word	0x24000be2
 8002898:	24000bdc 	.word	0x24000bdc

0800289c <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <ERPA_init+0x38>)
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ac:	2200      	movs	r2, #0
 80028ae:	2102      	movs	r1, #2
 80028b0:	f010 f942 	bl	8012b38 <osEventFlagsWait>
		if (ERPA_ON)
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <ERPA_init+0x3c>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d007      	beq.n	80028cc <ERPA_init+0x30>
		{
			sample_erpa();
 80028bc:	f7ff fd18 	bl	80022f0 <sample_erpa>
			erpa_seq++;
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <ERPA_init+0x40>)
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	3301      	adds	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	4b04      	ldr	r3, [pc, #16]	; (80028dc <ERPA_init+0x40>)
 80028ca:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 80028cc:	f010 f854 	bl	8012978 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80028d0:	e7e8      	b.n	80028a4 <ERPA_init+0x8>
 80028d2:	bf00      	nop
 80028d4:	24000be8 	.word	0x24000be8
 80028d8:	24000be3 	.word	0x24000be3
 80028dc:	24000bde 	.word	0x24000bde

080028e0 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HK_init+0x38>)
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028f0:	2200      	movs	r2, #0
 80028f2:	2104      	movs	r1, #4
 80028f4:	f010 f920 	bl	8012b38 <osEventFlagsWait>
		if(HK_ON)
 80028f8:	4b08      	ldr	r3, [pc, #32]	; (800291c <HK_init+0x3c>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HK_init+0x30>
		{
			sample_hk();
 8002900:	f7ff fdb8 	bl	8002474 <sample_hk>
			hk_seq++;
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HK_init+0x40>)
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	3301      	adds	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	4b04      	ldr	r3, [pc, #16]	; (8002920 <HK_init+0x40>)
 800290e:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 8002910:	f010 f832 	bl	8012978 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002914:	e7e8      	b.n	80028e8 <HK_init+0x8>
 8002916:	bf00      	nop
 8002918:	24000be8 	.word	0x24000be8
 800291c:	24000be4 	.word	0x24000be4
 8002920:	24000be0 	.word	0x24000be0

08002924 <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800292c:	2201      	movs	r2, #1
 800292e:	4904      	ldr	r1, [pc, #16]	; (8002940 <UART_RX_init+0x1c>)
 8002930:	4804      	ldr	r0, [pc, #16]	; (8002944 <UART_RX_init+0x20>)
 8002932:	f00d fa57 	bl	800fde4 <HAL_UART_Receive_IT>
		osDelay(5);
 8002936:	2005      	movs	r0, #5
 8002938:	f010 f85f 	bl	80129fa <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800293c:	e7f6      	b.n	800292c <UART_RX_init+0x8>
 800293e:	bf00      	nop
 8002940:	24000bec 	.word	0x24000bec
 8002944:	240005ec 	.word	0x240005ec

08002948 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002950:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <GPIO_on_init+0x9c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f010 f82f 	bl	80129b8 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 800295a:	4b23      	ldr	r3, [pc, #140]	; (80029e8 <GPIO_on_init+0xa0>)
 800295c:	2104      	movs	r1, #4
 800295e:	2201      	movs	r2, #1
 8002960:	4618      	mov	r0, r3
 8002962:	f006 f997 	bl	8008c94 <HAL_GPIO_WritePin>
		osDelay(100);
 8002966:	2064      	movs	r0, #100	; 0x64
 8002968:	f010 f847 	bl	80129fa <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 800296c:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <GPIO_on_init+0xa0>)
 800296e:	2120      	movs	r1, #32
 8002970:	2201      	movs	r2, #1
 8002972:	4618      	mov	r0, r3
 8002974:	f006 f98e 	bl	8008c94 <HAL_GPIO_WritePin>
		osDelay(100);
 8002978:	2064      	movs	r0, #100	; 0x64
 800297a:	f010 f83e 	bl	80129fa <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 800297e:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <GPIO_on_init+0xa4>)
 8002980:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002984:	2201      	movs	r2, #1
 8002986:	4618      	mov	r0, r3
 8002988:	f006 f984 	bl	8008c94 <HAL_GPIO_WritePin>
		osDelay(100);
 800298c:	2064      	movs	r0, #100	; 0x64
 800298e:	f010 f834 	bl	80129fa <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002992:	4b16      	ldr	r3, [pc, #88]	; (80029ec <GPIO_on_init+0xa4>)
 8002994:	2180      	movs	r1, #128	; 0x80
 8002996:	2201      	movs	r2, #1
 8002998:	4618      	mov	r0, r3
 800299a:	f006 f97b 	bl	8008c94 <HAL_GPIO_WritePin>
		osDelay(100);
 800299e:	2064      	movs	r0, #100	; 0x64
 80029a0:	f010 f82b 	bl	80129fa <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 80029a4:	4b11      	ldr	r3, [pc, #68]	; (80029ec <GPIO_on_init+0xa4>)
 80029a6:	2140      	movs	r1, #64	; 0x40
 80029a8:	2201      	movs	r2, #1
 80029aa:	4618      	mov	r0, r3
 80029ac:	f006 f972 	bl	8008c94 <HAL_GPIO_WritePin>
		osDelay(100);
 80029b0:	2064      	movs	r0, #100	; 0x64
 80029b2:	f010 f822 	bl	80129fa <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <GPIO_on_init+0xa4>)
 80029b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029bc:	2201      	movs	r2, #1
 80029be:	4618      	mov	r0, r3
 80029c0:	f006 f968 	bl	8008c94 <HAL_GPIO_WritePin>
		osDelay(100);
 80029c4:	2064      	movs	r0, #100	; 0x64
 80029c6:	f010 f818 	bl	80129fa <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <GPIO_on_init+0xa4>)
 80029cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029d0:	2201      	movs	r2, #1
 80029d2:	4618      	mov	r0, r3
 80029d4:	f006 f95e 	bl	8008c94 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 80029d8:	4b02      	ldr	r3, [pc, #8]	; (80029e4 <GPIO_on_init+0x9c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f00f ffeb 	bl	80129b8 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 80029e2:	e7ba      	b.n	800295a <GPIO_on_init+0x12>
 80029e4:	24000708 	.word	0x24000708
 80029e8:	58020400 	.word	0x58020400
 80029ec:	58020800 	.word	0x58020800

080029f0 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 80029f8:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <GPIO_off_init+0x9c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f00f ffdb 	bl	80129b8 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002a02:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <GPIO_off_init+0xa0>)
 8002a04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f006 f942 	bl	8008c94 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a10:	2064      	movs	r0, #100	; 0x64
 8002a12:	f00f fff2 	bl	80129fa <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002a16:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <GPIO_off_init+0xa0>)
 8002a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f006 f938 	bl	8008c94 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a24:	2064      	movs	r0, #100	; 0x64
 8002a26:	f00f ffe8 	bl	80129fa <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002a2a:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <GPIO_off_init+0xa0>)
 8002a2c:	2140      	movs	r1, #64	; 0x40
 8002a2e:	2200      	movs	r2, #0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f006 f92f 	bl	8008c94 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a36:	2064      	movs	r0, #100	; 0x64
 8002a38:	f00f ffdf 	bl	80129fa <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002a3c:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <GPIO_off_init+0xa0>)
 8002a3e:	2180      	movs	r1, #128	; 0x80
 8002a40:	2200      	movs	r2, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f006 f926 	bl	8008c94 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a48:	2064      	movs	r0, #100	; 0x64
 8002a4a:	f00f ffd6 	bl	80129fa <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <GPIO_off_init+0xa0>)
 8002a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a54:	2200      	movs	r2, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f006 f91c 	bl	8008c94 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a5c:	2064      	movs	r0, #100	; 0x64
 8002a5e:	f00f ffcc 	bl	80129fa <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002a62:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <GPIO_off_init+0xa4>)
 8002a64:	2120      	movs	r1, #32
 8002a66:	2200      	movs	r2, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f006 f913 	bl	8008c94 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a6e:	2064      	movs	r0, #100	; 0x64
 8002a70:	f00f ffc3 	bl	80129fa <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002a74:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <GPIO_off_init+0xa4>)
 8002a76:	2104      	movs	r1, #4
 8002a78:	2200      	movs	r2, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f006 f90a 	bl	8008c94 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002a80:	4b02      	ldr	r3, [pc, #8]	; (8002a8c <GPIO_off_init+0x9c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f00f ff97 	bl	80129b8 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002a8a:	e7ba      	b.n	8002a02 <GPIO_off_init+0x12>
 8002a8c:	24000968 	.word	0x24000968
 8002a90:	58020800 	.word	0x58020800
 8002a94:	58020400 	.word	0x58020400

08002a98 <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
  static uint8_t tx_buffer[1000];
  uint32_t total_size = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
  osStatus_t status;

  while (1) {
    total_size = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]

    // Retrieve all messages from the queue and store them in tx_buffer
    do {
      status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002aa8:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <UART_TX_init+0x9c>)
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	4921      	ldr	r1, [pc, #132]	; (8002b38 <UART_TX_init+0xa0>)
 8002ab4:	f010 f97a 	bl	8012dac <osMessageQueueGet>
 8002ab8:	60b8      	str	r0, [r7, #8]
      if (status == osOK) {
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d11c      	bne.n	8002afa <UART_TX_init+0x62>
        if (total_size + msg.size <= 1000) {
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <UART_TX_init+0xa0>)
 8002ac2:	889b      	ldrh	r3, [r3, #4]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4413      	add	r3, r2
 8002aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ace:	d818      	bhi.n	8002b02 <UART_TX_init+0x6a>
          memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a1a      	ldr	r2, [pc, #104]	; (8002b3c <UART_TX_init+0xa4>)
 8002ad4:	4413      	add	r3, r2
 8002ad6:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <UART_TX_init+0xa0>)
 8002ad8:	6811      	ldr	r1, [r2, #0]
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <UART_TX_init+0xa0>)
 8002adc:	8892      	ldrh	r2, [r2, #4]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f013 faf6 	bl	80160d0 <memcpy>
          free(msg.array);
 8002ae4:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <UART_TX_init+0xa0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f013 fae9 	bl	80160c0 <free>
          total_size += msg.size;
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <UART_TX_init+0xa0>)
 8002af0:	889b      	ldrh	r3, [r3, #4]
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4413      	add	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]
        } else {

          break;
        }
      }
    } while (status == osOK);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0d3      	beq.n	8002aa8 <UART_TX_init+0x10>
 8002b00:	e000      	b.n	8002b04 <UART_TX_init+0x6c>
          break;
 8002b02:	bf00      	nop

    if (total_size > 0) {
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d010      	beq.n	8002b2c <UART_TX_init+0x94>
      HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	490a      	ldr	r1, [pc, #40]	; (8002b3c <UART_TX_init+0xa4>)
 8002b12:	480b      	ldr	r0, [pc, #44]	; (8002b40 <UART_TX_init+0xa8>)
 8002b14:	f00d f9b2 	bl	800fe7c <HAL_UART_Transmit_DMA>

      // Wait for transmission to complete
      while (tx_flag == 0) {
 8002b18:	e001      	b.n	8002b1e <UART_TX_init+0x86>
        osThreadYield();
 8002b1a:	f00f ff2d 	bl	8012978 <osThreadYield>
      while (tx_flag == 0) {
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <UART_TX_init+0xac>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f9      	beq.n	8002b1a <UART_TX_init+0x82>
      }

      // Reset the flag
      tx_flag = 0;
 8002b26:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <UART_TX_init+0xac>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
    }

    // Yield thread control
    osThreadYield();
 8002b2c:	f00f ff24 	bl	8012978 <osThreadYield>
    total_size = 0;
 8002b30:	e7b8      	b.n	8002aa4 <UART_TX_init+0xc>
 8002b32:	bf00      	nop
 8002b34:	24000bcc 	.word	0x24000bcc
 8002b38:	24000bd0 	.word	0x24000bd0
 8002b3c:	24000c90 	.word	0x24000c90
 8002b40:	240005ec 	.word	0x240005ec
 8002b44:	24000000 	.word	0x24000000

08002b48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b5a:	f000 ff5b 	bl	8003a14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40001000 	.word	0x40001000

08002b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b70:	b672      	cpsid	i
}
 8002b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b74:	e7fe      	b.n	8002b74 <Error_Handler+0x8>
	...

08002b78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <HAL_MspInit+0x38>)
 8002b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b84:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <HAL_MspInit+0x38>)
 8002b86:	f043 0302 	orr.w	r3, r3, #2
 8002b8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b8e:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <HAL_MspInit+0x38>)
 8002b90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	607b      	str	r3, [r7, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	210f      	movs	r1, #15
 8002ba0:	f06f 0001 	mvn.w	r0, #1
 8002ba4:	f002 fc44 	bl	8005430 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	58024400 	.word	0x58024400

08002bb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08e      	sub	sp, #56	; 0x38
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a7b      	ldr	r2, [pc, #492]	; (8002dc0 <HAL_ADC_MspInit+0x20c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	f040 8091 	bne.w	8002cfa <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002bd8:	4b7a      	ldr	r3, [pc, #488]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002bda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bde:	4a79      	ldr	r2, [pc, #484]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002be0:	f043 0320 	orr.w	r3, r3, #32
 8002be4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002be8:	4b76      	ldr	r3, [pc, #472]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002bea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	623b      	str	r3, [r7, #32]
 8002bf4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bf6:	4b73      	ldr	r3, [pc, #460]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfc:	4a71      	ldr	r2, [pc, #452]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002bfe:	f043 0304 	orr.w	r3, r3, #4
 8002c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c06:	4b6f      	ldr	r3, [pc, #444]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c14:	4b6b      	ldr	r3, [pc, #428]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c1a:	4a6a      	ldr	r2, [pc, #424]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c24:	4b67      	ldr	r3, [pc, #412]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	61bb      	str	r3, [r7, #24]
 8002c30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c32:	4b64      	ldr	r3, [pc, #400]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c38:	4a62      	ldr	r2, [pc, #392]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002c3a:	f043 0302 	orr.w	r3, r3, #2
 8002c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c42:	4b60      	ldr	r3, [pc, #384]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002c50:	2333      	movs	r3, #51	; 0x33
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c54:	2303      	movs	r3, #3
 8002c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c60:	4619      	mov	r1, r3
 8002c62:	4859      	ldr	r0, [pc, #356]	; (8002dc8 <HAL_ADC_MspInit+0x214>)
 8002c64:	f005 fe4e 	bl	8008904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002c68:	23ce      	movs	r3, #206	; 0xce
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4854      	ldr	r0, [pc, #336]	; (8002dcc <HAL_ADC_MspInit+0x218>)
 8002c7c:	f005 fe42 	bl	8008904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c80:	2303      	movs	r3, #3
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c84:	2303      	movs	r3, #3
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c90:	4619      	mov	r1, r3
 8002c92:	484f      	ldr	r0, [pc, #316]	; (8002dd0 <HAL_ADC_MspInit+0x21c>)
 8002c94:	f005 fe36 	bl	8008904 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002c98:	4b4e      	ldr	r3, [pc, #312]	; (8002dd4 <HAL_ADC_MspInit+0x220>)
 8002c9a:	4a4f      	ldr	r2, [pc, #316]	; (8002dd8 <HAL_ADC_MspInit+0x224>)
 8002c9c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002c9e:	4b4d      	ldr	r3, [pc, #308]	; (8002dd4 <HAL_ADC_MspInit+0x220>)
 8002ca0:	2209      	movs	r2, #9
 8002ca2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ca4:	4b4b      	ldr	r3, [pc, #300]	; (8002dd4 <HAL_ADC_MspInit+0x220>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002caa:	4b4a      	ldr	r3, [pc, #296]	; (8002dd4 <HAL_ADC_MspInit+0x220>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002cb0:	4b48      	ldr	r3, [pc, #288]	; (8002dd4 <HAL_ADC_MspInit+0x220>)
 8002cb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cb6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cb8:	4b46      	ldr	r3, [pc, #280]	; (8002dd4 <HAL_ADC_MspInit+0x220>)
 8002cba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cbe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cc0:	4b44      	ldr	r3, [pc, #272]	; (8002dd4 <HAL_ADC_MspInit+0x220>)
 8002cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cc6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002cc8:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <HAL_ADC_MspInit+0x220>)
 8002cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cce:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002cd0:	4b40      	ldr	r3, [pc, #256]	; (8002dd4 <HAL_ADC_MspInit+0x220>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cd6:	4b3f      	ldr	r3, [pc, #252]	; (8002dd4 <HAL_ADC_MspInit+0x220>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002cdc:	483d      	ldr	r0, [pc, #244]	; (8002dd4 <HAL_ADC_MspInit+0x220>)
 8002cde:	f002 ffd5 	bl	8005c8c <HAL_DMA_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002ce8:	f7ff ff40 	bl	8002b6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a39      	ldr	r2, [pc, #228]	; (8002dd4 <HAL_ADC_MspInit+0x220>)
 8002cf0:	64da      	str	r2, [r3, #76]	; 0x4c
 8002cf2:	4a38      	ldr	r2, [pc, #224]	; (8002dd4 <HAL_ADC_MspInit+0x220>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002cf8:	e05e      	b.n	8002db8 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a37      	ldr	r2, [pc, #220]	; (8002ddc <HAL_ADC_MspInit+0x228>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d159      	bne.n	8002db8 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d04:	4b2f      	ldr	r3, [pc, #188]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d0a:	4a2e      	ldr	r2, [pc, #184]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002d0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d14:	4b2b      	ldr	r3, [pc, #172]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d22:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d28:	4a26      	ldr	r2, [pc, #152]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002d2a:	f043 0304 	orr.w	r3, r3, #4
 8002d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d32:	4b24      	ldr	r3, [pc, #144]	; (8002dc4 <HAL_ADC_MspInit+0x210>)
 8002d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002d40:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002d44:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002d48:	f000 fe90 	bl	8003a6c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002d4c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002d50:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002d54:	f000 fe8a 	bl	8003a6c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002d58:	4b21      	ldr	r3, [pc, #132]	; (8002de0 <HAL_ADC_MspInit+0x22c>)
 8002d5a:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <HAL_ADC_MspInit+0x230>)
 8002d5c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002d5e:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <HAL_ADC_MspInit+0x22c>)
 8002d60:	2273      	movs	r2, #115	; 0x73
 8002d62:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d64:	4b1e      	ldr	r3, [pc, #120]	; (8002de0 <HAL_ADC_MspInit+0x22c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <HAL_ADC_MspInit+0x22c>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002d70:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <HAL_ADC_MspInit+0x22c>)
 8002d72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d76:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <HAL_ADC_MspInit+0x22c>)
 8002d7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d7e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d80:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <HAL_ADC_MspInit+0x22c>)
 8002d82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d86:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002d88:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_ADC_MspInit+0x22c>)
 8002d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d8e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <HAL_ADC_MspInit+0x22c>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d96:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_ADC_MspInit+0x22c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002d9c:	4810      	ldr	r0, [pc, #64]	; (8002de0 <HAL_ADC_MspInit+0x22c>)
 8002d9e:	f002 ff75 	bl	8005c8c <HAL_DMA_Init>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002da8:	f7ff fee0 	bl	8002b6c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a0c      	ldr	r2, [pc, #48]	; (8002de0 <HAL_ADC_MspInit+0x22c>)
 8002db0:	64da      	str	r2, [r3, #76]	; 0x4c
 8002db2:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <HAL_ADC_MspInit+0x22c>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002db8:	bf00      	nop
 8002dba:	3738      	adds	r7, #56	; 0x38
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40022000 	.word	0x40022000
 8002dc4:	58024400 	.word	0x58024400
 8002dc8:	58020800 	.word	0x58020800
 8002dcc:	58020000 	.word	0x58020000
 8002dd0:	58020400 	.word	0x58020400
 8002dd4:	24000204 	.word	0x24000204
 8002dd8:	40020010 	.word	0x40020010
 8002ddc:	58026000 	.word	0x58026000
 8002de0:	2400027c 	.word	0x2400027c
 8002de4:	40020028 	.word	0x40020028

08002de8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	; 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a34      	ldr	r2, [pc, #208]	; (8002ed8 <HAL_DAC_MspInit+0xf0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d161      	bne.n	8002ece <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002e0a:	4b34      	ldr	r3, [pc, #208]	; (8002edc <HAL_DAC_MspInit+0xf4>)
 8002e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e10:	4a32      	ldr	r2, [pc, #200]	; (8002edc <HAL_DAC_MspInit+0xf4>)
 8002e12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e1a:	4b30      	ldr	r3, [pc, #192]	; (8002edc <HAL_DAC_MspInit+0xf4>)
 8002e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e28:	4b2c      	ldr	r3, [pc, #176]	; (8002edc <HAL_DAC_MspInit+0xf4>)
 8002e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e2e:	4a2b      	ldr	r2, [pc, #172]	; (8002edc <HAL_DAC_MspInit+0xf4>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e38:	4b28      	ldr	r3, [pc, #160]	; (8002edc <HAL_DAC_MspInit+0xf4>)
 8002e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e46:	2310      	movs	r3, #16
 8002e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e52:	f107 0314 	add.w	r3, r7, #20
 8002e56:	4619      	mov	r1, r3
 8002e58:	4821      	ldr	r0, [pc, #132]	; (8002ee0 <HAL_DAC_MspInit+0xf8>)
 8002e5a:	f005 fd53 	bl	8008904 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002e5e:	4b21      	ldr	r3, [pc, #132]	; (8002ee4 <HAL_DAC_MspInit+0xfc>)
 8002e60:	4a21      	ldr	r2, [pc, #132]	; (8002ee8 <HAL_DAC_MspInit+0x100>)
 8002e62:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002e64:	4b1f      	ldr	r3, [pc, #124]	; (8002ee4 <HAL_DAC_MspInit+0xfc>)
 8002e66:	2243      	movs	r2, #67	; 0x43
 8002e68:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ee4 <HAL_DAC_MspInit+0xfc>)
 8002e6c:	2240      	movs	r2, #64	; 0x40
 8002e6e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e70:	4b1c      	ldr	r3, [pc, #112]	; (8002ee4 <HAL_DAC_MspInit+0xfc>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <HAL_DAC_MspInit+0xfc>)
 8002e78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e7c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e7e:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <HAL_DAC_MspInit+0xfc>)
 8002e80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e84:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e86:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <HAL_DAC_MspInit+0xfc>)
 8002e88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e8c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <HAL_DAC_MspInit+0xfc>)
 8002e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e94:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HAL_DAC_MspInit+0xfc>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <HAL_DAC_MspInit+0xfc>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002ea2:	4810      	ldr	r0, [pc, #64]	; (8002ee4 <HAL_DAC_MspInit+0xfc>)
 8002ea4:	f002 fef2 	bl	8005c8c <HAL_DMA_Init>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002eae:	f7ff fe5d 	bl	8002b6c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <HAL_DAC_MspInit+0xfc>)
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <HAL_DAC_MspInit+0xfc>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2105      	movs	r1, #5
 8002ec2:	2036      	movs	r0, #54	; 0x36
 8002ec4:	f002 fab4 	bl	8005430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ec8:	2036      	movs	r0, #54	; 0x36
 8002eca:	f002 facb 	bl	8005464 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002ece:	bf00      	nop
 8002ed0:	3728      	adds	r7, #40	; 0x28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40007400 	.word	0x40007400
 8002edc:	58024400 	.word	0x58024400
 8002ee0:	58020000 	.word	0x58020000
 8002ee4:	24000308 	.word	0x24000308
 8002ee8:	40020088 	.word	0x40020088

08002eec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b0ba      	sub	sp, #232	; 0xe8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f04:	f107 0310 	add.w	r3, r7, #16
 8002f08:	22c0      	movs	r2, #192	; 0xc0
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f013 f8ed 	bl	80160ec <memset>
  if(hi2c->Instance==I2C1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a27      	ldr	r2, [pc, #156]	; (8002fb4 <HAL_I2C_MspInit+0xc8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d146      	bne.n	8002faa <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002f1c:	f04f 0208 	mov.w	r2, #8
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f2e:	f107 0310 	add.w	r3, r7, #16
 8002f32:	4618      	mov	r0, r3
 8002f34:	f007 fd36 	bl	800a9a4 <HAL_RCCEx_PeriphCLKConfig>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002f3e:	f7ff fe15 	bl	8002b6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <HAL_I2C_MspInit+0xcc>)
 8002f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f48:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <HAL_I2C_MspInit+0xcc>)
 8002f4a:	f043 0302 	orr.w	r3, r3, #2
 8002f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f52:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_I2C_MspInit+0xcc>)
 8002f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f68:	2312      	movs	r3, #18
 8002f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f84:	4619      	mov	r1, r3
 8002f86:	480d      	ldr	r0, [pc, #52]	; (8002fbc <HAL_I2C_MspInit+0xd0>)
 8002f88:	f005 fcbc 	bl	8008904 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f8c:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_I2C_MspInit+0xcc>)
 8002f8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f92:	4a09      	ldr	r2, [pc, #36]	; (8002fb8 <HAL_I2C_MspInit+0xcc>)
 8002f94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f9c:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_I2C_MspInit+0xcc>)
 8002f9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002faa:	bf00      	nop
 8002fac:	37e8      	adds	r7, #232	; 0xe8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40005400 	.word	0x40005400
 8002fb8:	58024400 	.word	0x58024400
 8002fbc:	58020400 	.word	0x58020400

08002fc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b0b2      	sub	sp, #200	; 0xc8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fc8:	f107 0308 	add.w	r3, r7, #8
 8002fcc:	22c0      	movs	r2, #192	; 0xc0
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f013 f88b 	bl	80160ec <memset>
  if(hrtc->Instance==RTC)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a10      	ldr	r2, [pc, #64]	; (800301c <HAL_RTC_MspInit+0x5c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d118      	bne.n	8003012 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002fe0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <HAL_RTC_MspInit+0x60>)
 8002fee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ff2:	f107 0308 	add.w	r3, r7, #8
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f007 fcd4 	bl	800a9a4 <HAL_RCCEx_PeriphCLKConfig>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003002:	f7ff fdb3 	bl	8002b6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003006:	4b07      	ldr	r3, [pc, #28]	; (8003024 <HAL_RTC_MspInit+0x64>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	4a06      	ldr	r2, [pc, #24]	; (8003024 <HAL_RTC_MspInit+0x64>)
 800300c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003010:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003012:	bf00      	nop
 8003014:	37c8      	adds	r7, #200	; 0xc8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	58004000 	.word	0x58004000
 8003020:	00019300 	.word	0x00019300
 8003024:	58024400 	.word	0x58024400

08003028 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b0bc      	sub	sp, #240	; 0xf0
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003030:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003040:	f107 0318 	add.w	r3, r7, #24
 8003044:	22c0      	movs	r2, #192	; 0xc0
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f013 f84f 	bl	80160ec <memset>
  if(hspi->Instance==SPI1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a4c      	ldr	r2, [pc, #304]	; (8003184 <HAL_SPI_MspInit+0x15c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d145      	bne.n	80030e4 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003058:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003064:	2300      	movs	r3, #0
 8003066:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003068:	f107 0318 	add.w	r3, r7, #24
 800306c:	4618      	mov	r0, r3
 800306e:	f007 fc99 	bl	800a9a4 <HAL_RCCEx_PeriphCLKConfig>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003078:	f7ff fd78 	bl	8002b6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800307c:	4b42      	ldr	r3, [pc, #264]	; (8003188 <HAL_SPI_MspInit+0x160>)
 800307e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003082:	4a41      	ldr	r2, [pc, #260]	; (8003188 <HAL_SPI_MspInit+0x160>)
 8003084:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003088:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800308c:	4b3e      	ldr	r3, [pc, #248]	; (8003188 <HAL_SPI_MspInit+0x160>)
 800308e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800309a:	4b3b      	ldr	r3, [pc, #236]	; (8003188 <HAL_SPI_MspInit+0x160>)
 800309c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a0:	4a39      	ldr	r2, [pc, #228]	; (8003188 <HAL_SPI_MspInit+0x160>)
 80030a2:	f043 0302 	orr.w	r3, r3, #2
 80030a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030aa:	4b37      	ldr	r3, [pc, #220]	; (8003188 <HAL_SPI_MspInit+0x160>)
 80030ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80030b8:	2318      	movs	r3, #24
 80030ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030be:	2302      	movs	r3, #2
 80030c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030d0:	2305      	movs	r3, #5
 80030d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030da:	4619      	mov	r1, r3
 80030dc:	482b      	ldr	r0, [pc, #172]	; (800318c <HAL_SPI_MspInit+0x164>)
 80030de:	f005 fc11 	bl	8008904 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80030e2:	e04a      	b.n	800317a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a29      	ldr	r2, [pc, #164]	; (8003190 <HAL_SPI_MspInit+0x168>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d145      	bne.n	800317a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80030ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030fe:	f107 0318 	add.w	r3, r7, #24
 8003102:	4618      	mov	r0, r3
 8003104:	f007 fc4e 	bl	800a9a4 <HAL_RCCEx_PeriphCLKConfig>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800310e:	f7ff fd2d 	bl	8002b6c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003112:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <HAL_SPI_MspInit+0x160>)
 8003114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003118:	4a1b      	ldr	r2, [pc, #108]	; (8003188 <HAL_SPI_MspInit+0x160>)
 800311a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800311e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003122:	4b19      	ldr	r3, [pc, #100]	; (8003188 <HAL_SPI_MspInit+0x160>)
 8003124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003130:	4b15      	ldr	r3, [pc, #84]	; (8003188 <HAL_SPI_MspInit+0x160>)
 8003132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003136:	4a14      	ldr	r2, [pc, #80]	; (8003188 <HAL_SPI_MspInit+0x160>)
 8003138:	f043 0302 	orr.w	r3, r3, #2
 800313c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <HAL_SPI_MspInit+0x160>)
 8003142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800314e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003156:	2302      	movs	r3, #2
 8003158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003162:	2300      	movs	r3, #0
 8003164:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003168:	2305      	movs	r3, #5
 800316a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003172:	4619      	mov	r1, r3
 8003174:	4805      	ldr	r0, [pc, #20]	; (800318c <HAL_SPI_MspInit+0x164>)
 8003176:	f005 fbc5 	bl	8008904 <HAL_GPIO_Init>
}
 800317a:	bf00      	nop
 800317c:	37f0      	adds	r7, #240	; 0xf0
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40013000 	.word	0x40013000
 8003188:	58024400 	.word	0x58024400
 800318c:	58020400 	.word	0x58020400
 8003190:	40003800 	.word	0x40003800

08003194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a37      	ldr	r2, [pc, #220]	; (8003280 <HAL_TIM_Base_MspInit+0xec>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d12f      	bne.n	8003206 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031a6:	4b37      	ldr	r3, [pc, #220]	; (8003284 <HAL_TIM_Base_MspInit+0xf0>)
 80031a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031ac:	4a35      	ldr	r2, [pc, #212]	; (8003284 <HAL_TIM_Base_MspInit+0xf0>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031b6:	4b33      	ldr	r3, [pc, #204]	; (8003284 <HAL_TIM_Base_MspInit+0xf0>)
 80031b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80031c4:	2200      	movs	r2, #0
 80031c6:	2105      	movs	r1, #5
 80031c8:	2018      	movs	r0, #24
 80031ca:	f002 f931 	bl	8005430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80031ce:	2018      	movs	r0, #24
 80031d0:	f002 f948 	bl	8005464 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80031d4:	2200      	movs	r2, #0
 80031d6:	2105      	movs	r1, #5
 80031d8:	2019      	movs	r0, #25
 80031da:	f002 f929 	bl	8005430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80031de:	2019      	movs	r0, #25
 80031e0:	f002 f940 	bl	8005464 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80031e4:	2200      	movs	r2, #0
 80031e6:	2105      	movs	r1, #5
 80031e8:	201a      	movs	r0, #26
 80031ea:	f002 f921 	bl	8005430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80031ee:	201a      	movs	r0, #26
 80031f0:	f002 f938 	bl	8005464 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80031f4:	2200      	movs	r2, #0
 80031f6:	2105      	movs	r1, #5
 80031f8:	201b      	movs	r0, #27
 80031fa:	f002 f919 	bl	8005430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80031fe:	201b      	movs	r0, #27
 8003200:	f002 f930 	bl	8005464 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003204:	e038      	b.n	8003278 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320e:	d117      	bne.n	8003240 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003210:	4b1c      	ldr	r3, [pc, #112]	; (8003284 <HAL_TIM_Base_MspInit+0xf0>)
 8003212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003216:	4a1b      	ldr	r2, [pc, #108]	; (8003284 <HAL_TIM_Base_MspInit+0xf0>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003220:	4b18      	ldr	r3, [pc, #96]	; (8003284 <HAL_TIM_Base_MspInit+0xf0>)
 8003222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800322e:	2200      	movs	r2, #0
 8003230:	2105      	movs	r1, #5
 8003232:	201c      	movs	r0, #28
 8003234:	f002 f8fc 	bl	8005430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003238:	201c      	movs	r0, #28
 800323a:	f002 f913 	bl	8005464 <HAL_NVIC_EnableIRQ>
}
 800323e:	e01b      	b.n	8003278 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a10      	ldr	r2, [pc, #64]	; (8003288 <HAL_TIM_Base_MspInit+0xf4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d116      	bne.n	8003278 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <HAL_TIM_Base_MspInit+0xf0>)
 800324c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003250:	4a0c      	ldr	r2, [pc, #48]	; (8003284 <HAL_TIM_Base_MspInit+0xf0>)
 8003252:	f043 0302 	orr.w	r3, r3, #2
 8003256:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800325a:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <HAL_TIM_Base_MspInit+0xf0>)
 800325c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003268:	2200      	movs	r2, #0
 800326a:	2105      	movs	r1, #5
 800326c:	201d      	movs	r0, #29
 800326e:	f002 f8df 	bl	8005430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003272:	201d      	movs	r0, #29
 8003274:	f002 f8f6 	bl	8005464 <HAL_NVIC_EnableIRQ>
}
 8003278:	bf00      	nop
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40010000 	.word	0x40010000
 8003284:	58024400 	.word	0x58024400
 8003288:	40000400 	.word	0x40000400

0800328c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	; 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a26      	ldr	r2, [pc, #152]	; (8003344 <HAL_TIM_MspPostInit+0xb8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d120      	bne.n	80032f0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <HAL_TIM_MspPostInit+0xbc>)
 80032b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b4:	4a24      	ldr	r2, [pc, #144]	; (8003348 <HAL_TIM_MspPostInit+0xbc>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032be:	4b22      	ldr	r3, [pc, #136]	; (8003348 <HAL_TIM_MspPostInit+0xbc>)
 80032c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d2:	2302      	movs	r3, #2
 80032d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	2300      	movs	r3, #0
 80032dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032de:	2301      	movs	r3, #1
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e2:	f107 0314 	add.w	r3, r7, #20
 80032e6:	4619      	mov	r1, r3
 80032e8:	4818      	ldr	r0, [pc, #96]	; (800334c <HAL_TIM_MspPostInit+0xc0>)
 80032ea:	f005 fb0b 	bl	8008904 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80032ee:	e024      	b.n	800333a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f8:	d11f      	bne.n	800333a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fa:	4b13      	ldr	r3, [pc, #76]	; (8003348 <HAL_TIM_MspPostInit+0xbc>)
 80032fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003300:	4a11      	ldr	r2, [pc, #68]	; (8003348 <HAL_TIM_MspPostInit+0xbc>)
 8003302:	f043 0302 	orr.w	r3, r3, #2
 8003306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_TIM_MspPostInit+0xbc>)
 800330c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003318:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800331c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331e:	2302      	movs	r3, #2
 8003320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003326:	2300      	movs	r3, #0
 8003328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800332a:	2301      	movs	r3, #1
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800332e:	f107 0314 	add.w	r3, r7, #20
 8003332:	4619      	mov	r1, r3
 8003334:	4806      	ldr	r0, [pc, #24]	; (8003350 <HAL_TIM_MspPostInit+0xc4>)
 8003336:	f005 fae5 	bl	8008904 <HAL_GPIO_Init>
}
 800333a:	bf00      	nop
 800333c:	3728      	adds	r7, #40	; 0x28
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40010000 	.word	0x40010000
 8003348:	58024400 	.word	0x58024400
 800334c:	58020000 	.word	0x58020000
 8003350:	58020400 	.word	0x58020400

08003354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b0ba      	sub	sp, #232	; 0xe8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800335c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	60da      	str	r2, [r3, #12]
 800336a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800336c:	f107 0310 	add.w	r3, r7, #16
 8003370:	22c0      	movs	r2, #192	; 0xc0
 8003372:	2100      	movs	r1, #0
 8003374:	4618      	mov	r0, r3
 8003376:	f012 feb9 	bl	80160ec <memset>
  if(huart->Instance==USART1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a41      	ldr	r2, [pc, #260]	; (8003484 <HAL_UART_MspInit+0x130>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d17b      	bne.n	800347c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003384:	f04f 0201 	mov.w	r2, #1
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003390:	2300      	movs	r3, #0
 8003392:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003396:	f107 0310 	add.w	r3, r7, #16
 800339a:	4618      	mov	r0, r3
 800339c:	f007 fb02 	bl	800a9a4 <HAL_RCCEx_PeriphCLKConfig>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80033a6:	f7ff fbe1 	bl	8002b6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033aa:	4b37      	ldr	r3, [pc, #220]	; (8003488 <HAL_UART_MspInit+0x134>)
 80033ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033b0:	4a35      	ldr	r2, [pc, #212]	; (8003488 <HAL_UART_MspInit+0x134>)
 80033b2:	f043 0310 	orr.w	r3, r3, #16
 80033b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80033ba:	4b33      	ldr	r3, [pc, #204]	; (8003488 <HAL_UART_MspInit+0x134>)
 80033bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c8:	4b2f      	ldr	r3, [pc, #188]	; (8003488 <HAL_UART_MspInit+0x134>)
 80033ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ce:	4a2e      	ldr	r2, [pc, #184]	; (8003488 <HAL_UART_MspInit+0x134>)
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033d8:	4b2b      	ldr	r3, [pc, #172]	; (8003488 <HAL_UART_MspInit+0x134>)
 80033da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80033e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ee:	2302      	movs	r3, #2
 80033f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fa:	2300      	movs	r3, #0
 80033fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003400:	2307      	movs	r3, #7
 8003402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003406:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800340a:	4619      	mov	r1, r3
 800340c:	481f      	ldr	r0, [pc, #124]	; (800348c <HAL_UART_MspInit+0x138>)
 800340e:	f005 fa79 	bl	8008904 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003412:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <HAL_UART_MspInit+0x13c>)
 8003414:	4a1f      	ldr	r2, [pc, #124]	; (8003494 <HAL_UART_MspInit+0x140>)
 8003416:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003418:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <HAL_UART_MspInit+0x13c>)
 800341a:	222a      	movs	r2, #42	; 0x2a
 800341c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800341e:	4b1c      	ldr	r3, [pc, #112]	; (8003490 <HAL_UART_MspInit+0x13c>)
 8003420:	2240      	movs	r2, #64	; 0x40
 8003422:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003424:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <HAL_UART_MspInit+0x13c>)
 8003426:	2200      	movs	r2, #0
 8003428:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800342a:	4b19      	ldr	r3, [pc, #100]	; (8003490 <HAL_UART_MspInit+0x13c>)
 800342c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003430:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003432:	4b17      	ldr	r3, [pc, #92]	; (8003490 <HAL_UART_MspInit+0x13c>)
 8003434:	2200      	movs	r2, #0
 8003436:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003438:	4b15      	ldr	r3, [pc, #84]	; (8003490 <HAL_UART_MspInit+0x13c>)
 800343a:	2200      	movs	r2, #0
 800343c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800343e:	4b14      	ldr	r3, [pc, #80]	; (8003490 <HAL_UART_MspInit+0x13c>)
 8003440:	2200      	movs	r2, #0
 8003442:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003444:	4b12      	ldr	r3, [pc, #72]	; (8003490 <HAL_UART_MspInit+0x13c>)
 8003446:	2200      	movs	r2, #0
 8003448:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800344a:	4b11      	ldr	r3, [pc, #68]	; (8003490 <HAL_UART_MspInit+0x13c>)
 800344c:	2200      	movs	r2, #0
 800344e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003450:	480f      	ldr	r0, [pc, #60]	; (8003490 <HAL_UART_MspInit+0x13c>)
 8003452:	f002 fc1b 	bl	8005c8c <HAL_DMA_Init>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800345c:	f7ff fb86 	bl	8002b6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a0b      	ldr	r2, [pc, #44]	; (8003490 <HAL_UART_MspInit+0x13c>)
 8003464:	67da      	str	r2, [r3, #124]	; 0x7c
 8003466:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <HAL_UART_MspInit+0x13c>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800346c:	2200      	movs	r2, #0
 800346e:	2105      	movs	r1, #5
 8003470:	2025      	movs	r0, #37	; 0x25
 8003472:	f001 ffdd 	bl	8005430 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003476:	2025      	movs	r0, #37	; 0x25
 8003478:	f001 fff4 	bl	8005464 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800347c:	bf00      	nop
 800347e:	37e8      	adds	r7, #232	; 0xe8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40011000 	.word	0x40011000
 8003488:	58024400 	.word	0x58024400
 800348c:	58020000 	.word	0x58020000
 8003490:	24000680 	.word	0x24000680
 8003494:	40020040 	.word	0x40020040

08003498 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b090      	sub	sp, #64	; 0x40
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b0f      	cmp	r3, #15
 80034a4:	d827      	bhi.n	80034f6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80034a6:	2200      	movs	r2, #0
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	2036      	movs	r0, #54	; 0x36
 80034ac:	f001 ffc0 	bl	8005430 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80034b0:	2036      	movs	r0, #54	; 0x36
 80034b2:	f001 ffd7 	bl	8005464 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80034b6:	4a29      	ldr	r2, [pc, #164]	; (800355c <HAL_InitTick+0xc4>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80034bc:	4b28      	ldr	r3, [pc, #160]	; (8003560 <HAL_InitTick+0xc8>)
 80034be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034c2:	4a27      	ldr	r2, [pc, #156]	; (8003560 <HAL_InitTick+0xc8>)
 80034c4:	f043 0310 	orr.w	r3, r3, #16
 80034c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034cc:	4b24      	ldr	r3, [pc, #144]	; (8003560 <HAL_InitTick+0xc8>)
 80034ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034da:	f107 0210 	add.w	r2, r7, #16
 80034de:	f107 0314 	add.w	r3, r7, #20
 80034e2:	4611      	mov	r1, r2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f007 fa1b 	bl	800a920 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80034ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ec:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80034ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d106      	bne.n	8003502 <HAL_InitTick+0x6a>
 80034f4:	e001      	b.n	80034fa <HAL_InitTick+0x62>
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e02b      	b.n	8003552 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80034fa:	f007 f9e5 	bl	800a8c8 <HAL_RCC_GetPCLK1Freq>
 80034fe:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003500:	e004      	b.n	800350c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003502:	f007 f9e1 	bl	800a8c8 <HAL_RCC_GetPCLK1Freq>
 8003506:	4603      	mov	r3, r0
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800350c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350e:	4a15      	ldr	r2, [pc, #84]	; (8003564 <HAL_InitTick+0xcc>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	0c9b      	lsrs	r3, r3, #18
 8003516:	3b01      	subs	r3, #1
 8003518:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <HAL_InitTick+0xd0>)
 800351c:	4a13      	ldr	r2, [pc, #76]	; (800356c <HAL_InitTick+0xd4>)
 800351e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_InitTick+0xd0>)
 8003522:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003526:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003528:	4a0f      	ldr	r2, [pc, #60]	; (8003568 <HAL_InitTick+0xd0>)
 800352a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <HAL_InitTick+0xd0>)
 8003530:	2200      	movs	r2, #0
 8003532:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003534:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <HAL_InitTick+0xd0>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800353a:	480b      	ldr	r0, [pc, #44]	; (8003568 <HAL_InitTick+0xd0>)
 800353c:	f00a fea3 	bl	800e286 <HAL_TIM_Base_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d104      	bne.n	8003550 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003546:	4808      	ldr	r0, [pc, #32]	; (8003568 <HAL_InitTick+0xd0>)
 8003548:	f00a fef4 	bl	800e334 <HAL_TIM_Base_Start_IT>
 800354c:	4603      	mov	r3, r0
 800354e:	e000      	b.n	8003552 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
}
 8003552:	4618      	mov	r0, r3
 8003554:	3740      	adds	r7, #64	; 0x40
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	24000098 	.word	0x24000098
 8003560:	58024400 	.word	0x58024400
 8003564:	431bde83 	.word	0x431bde83
 8003568:	24001078 	.word	0x24001078
 800356c:	40001000 	.word	0x40001000

08003570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003574:	e7fe      	b.n	8003574 <NMI_Handler+0x4>

08003576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003576:	b480      	push	{r7}
 8003578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800357a:	e7fe      	b.n	800357a <HardFault_Handler+0x4>

0800357c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003580:	e7fe      	b.n	8003580 <MemManage_Handler+0x4>

08003582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003582:	b480      	push	{r7}
 8003584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003586:	e7fe      	b.n	8003586 <BusFault_Handler+0x4>

08003588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800358c:	e7fe      	b.n	800358c <UsageFault_Handler+0x4>

0800358e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800358e:	b480      	push	{r7}
 8003590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035a0:	4802      	ldr	r0, [pc, #8]	; (80035ac <DMA1_Stream0_IRQHandler+0x10>)
 80035a2:	f003 fe9d 	bl	80072e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	24000204 	.word	0x24000204

080035b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <DMA1_Stream1_IRQHandler+0x10>)
 80035b6:	f003 fe93 	bl	80072e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	2400027c 	.word	0x2400027c

080035c4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <DMA1_Stream2_IRQHandler+0x10>)
 80035ca:	f003 fe89 	bl	80072e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	24000680 	.word	0x24000680

080035d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <DMA1_Stream5_IRQHandler+0x10>)
 80035de:	f003 fe7f 	bl	80072e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	24000308 	.word	0x24000308

080035ec <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <TIM1_BRK_IRQHandler+0x10>)
 80035f2:	f00b f9b6 	bl	800e962 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	24000508 	.word	0x24000508

08003600 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <TIM1_UP_IRQHandler+0x10>)
 8003606:	f00b f9ac 	bl	800e962 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	24000508 	.word	0x24000508

08003614 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003618:	4802      	ldr	r0, [pc, #8]	; (8003624 <TIM1_TRG_COM_IRQHandler+0x10>)
 800361a:	f00b f9a2 	bl	800e962 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	24000508 	.word	0x24000508

08003628 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800362c:	4802      	ldr	r0, [pc, #8]	; (8003638 <TIM1_CC_IRQHandler+0x10>)
 800362e:	f00b f998 	bl	800e962 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	24000508 	.word	0x24000508

0800363c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003640:	4802      	ldr	r0, [pc, #8]	; (800364c <TIM2_IRQHandler+0x10>)
 8003642:	f00b f98e 	bl	800e962 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	24000554 	.word	0x24000554

08003650 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003654:	4802      	ldr	r0, [pc, #8]	; (8003660 <TIM3_IRQHandler+0x10>)
 8003656:	f00b f984 	bl	800e962 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	240005a0 	.word	0x240005a0

08003664 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003668:	4802      	ldr	r0, [pc, #8]	; (8003674 <USART1_IRQHandler+0x10>)
 800366a:	f00c fc87 	bl	800ff7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	240005ec 	.word	0x240005ec

08003678 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <TIM6_DAC_IRQHandler+0x20>)
 800367e:	791b      	ldrb	r3, [r3, #4]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003686:	4804      	ldr	r0, [pc, #16]	; (8003698 <TIM6_DAC_IRQHandler+0x20>)
 8003688:	f002 f881 	bl	800578e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800368c:	4803      	ldr	r0, [pc, #12]	; (800369c <TIM6_DAC_IRQHandler+0x24>)
 800368e:	f00b f968 	bl	800e962 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	240002f4 	.word	0x240002f4
 800369c:	24001078 	.word	0x24001078

080036a0 <ITM_SendChar>:
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	71fb      	strb	r3, [r7, #7]
 80036aa:	4b0f      	ldr	r3, [pc, #60]	; (80036e8 <ITM_SendChar+0x48>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <ITM_SendChar+0x48>)
 80036b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <ITM_SendChar+0x4c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a0c      	ldr	r2, [pc, #48]	; (80036ec <ITM_SendChar+0x4c>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	bf00      	nop
 80036c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f8      	beq.n	80036c4 <ITM_SendChar+0x24>
 80036d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	e000edfc 	.word	0xe000edfc
 80036ec:	e0000e00 	.word	0xe0000e00

080036f0 <_read>:
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	e00a      	b.n	8003718 <_read+0x28>
 8003702:	f3af 8000 	nop.w
 8003706:	4601      	mov	r1, r0
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	60ba      	str	r2, [r7, #8]
 800370e:	b2ca      	uxtb	r2, r1
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	3301      	adds	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	429a      	cmp	r2, r3
 800371e:	dbf0      	blt.n	8003702 <_read+0x12>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <_write>:
 800372a:	b580      	push	{r7, lr}
 800372c:	b086      	sub	sp, #24
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	e009      	b.n	8003750 <_write+0x26>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	60ba      	str	r2, [r7, #8]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff ffab 	bl	80036a0 <ITM_SendChar>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3301      	adds	r3, #1
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	dbf1      	blt.n	800373c <_write+0x12>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <_close>:
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800376e:	4618      	mov	r0, r3
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <_fstat>:
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	6039      	str	r1, [r7, #0]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800378a:	605a      	str	r2, [r3, #4]
 800378c:	2300      	movs	r3, #0
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <_isatty>:
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	2301      	movs	r3, #1
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <_lseek>:
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	2300      	movs	r3, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <_sbrk>:
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	4a14      	ldr	r2, [pc, #80]	; (8003828 <_sbrk+0x5c>)
 80037d6:	4b15      	ldr	r3, [pc, #84]	; (800382c <_sbrk+0x60>)
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	4b13      	ldr	r3, [pc, #76]	; (8003830 <_sbrk+0x64>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d102      	bne.n	80037ee <_sbrk+0x22>
 80037e8:	4b11      	ldr	r3, [pc, #68]	; (8003830 <_sbrk+0x64>)
 80037ea:	4a12      	ldr	r2, [pc, #72]	; (8003834 <_sbrk+0x68>)
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	4b10      	ldr	r3, [pc, #64]	; (8003830 <_sbrk+0x64>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4413      	add	r3, r2
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d207      	bcs.n	800380c <_sbrk+0x40>
 80037fc:	f012 fc2e 	bl	801605c <__errno>
 8003800:	4603      	mov	r3, r0
 8003802:	220c      	movs	r2, #12
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800380a:	e009      	b.n	8003820 <_sbrk+0x54>
 800380c:	4b08      	ldr	r3, [pc, #32]	; (8003830 <_sbrk+0x64>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	4b07      	ldr	r3, [pc, #28]	; (8003830 <_sbrk+0x64>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4413      	add	r3, r2
 800381a:	4a05      	ldr	r2, [pc, #20]	; (8003830 <_sbrk+0x64>)
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	24080000 	.word	0x24080000
 800382c:	00000400 	.word	0x00000400
 8003830:	240010c4 	.word	0x240010c4
 8003834:	24005a30 	.word	0x24005a30

08003838 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800383c:	4b37      	ldr	r3, [pc, #220]	; (800391c <SystemInit+0xe4>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	4a36      	ldr	r2, [pc, #216]	; (800391c <SystemInit+0xe4>)
 8003844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800384c:	4b34      	ldr	r3, [pc, #208]	; (8003920 <SystemInit+0xe8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	2b06      	cmp	r3, #6
 8003856:	d807      	bhi.n	8003868 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003858:	4b31      	ldr	r3, [pc, #196]	; (8003920 <SystemInit+0xe8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f023 030f 	bic.w	r3, r3, #15
 8003860:	4a2f      	ldr	r2, [pc, #188]	; (8003920 <SystemInit+0xe8>)
 8003862:	f043 0307 	orr.w	r3, r3, #7
 8003866:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003868:	4b2e      	ldr	r3, [pc, #184]	; (8003924 <SystemInit+0xec>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a2d      	ldr	r2, [pc, #180]	; (8003924 <SystemInit+0xec>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003874:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <SystemInit+0xec>)
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800387a:	4b2a      	ldr	r3, [pc, #168]	; (8003924 <SystemInit+0xec>)
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	4929      	ldr	r1, [pc, #164]	; (8003924 <SystemInit+0xec>)
 8003880:	4b29      	ldr	r3, [pc, #164]	; (8003928 <SystemInit+0xf0>)
 8003882:	4013      	ands	r3, r2
 8003884:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003886:	4b26      	ldr	r3, [pc, #152]	; (8003920 <SystemInit+0xe8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d007      	beq.n	80038a2 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003892:	4b23      	ldr	r3, [pc, #140]	; (8003920 <SystemInit+0xe8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 030f 	bic.w	r3, r3, #15
 800389a:	4a21      	ldr	r2, [pc, #132]	; (8003920 <SystemInit+0xe8>)
 800389c:	f043 0307 	orr.w	r3, r3, #7
 80038a0:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80038a2:	4b20      	ldr	r3, [pc, #128]	; (8003924 <SystemInit+0xec>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80038a8:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <SystemInit+0xec>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80038ae:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <SystemInit+0xec>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80038b4:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <SystemInit+0xec>)
 80038b6:	4a1d      	ldr	r2, [pc, #116]	; (800392c <SystemInit+0xf4>)
 80038b8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80038ba:	4b1a      	ldr	r3, [pc, #104]	; (8003924 <SystemInit+0xec>)
 80038bc:	4a1c      	ldr	r2, [pc, #112]	; (8003930 <SystemInit+0xf8>)
 80038be:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80038c0:	4b18      	ldr	r3, [pc, #96]	; (8003924 <SystemInit+0xec>)
 80038c2:	4a1c      	ldr	r2, [pc, #112]	; (8003934 <SystemInit+0xfc>)
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80038c6:	4b17      	ldr	r3, [pc, #92]	; (8003924 <SystemInit+0xec>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80038cc:	4b15      	ldr	r3, [pc, #84]	; (8003924 <SystemInit+0xec>)
 80038ce:	4a19      	ldr	r2, [pc, #100]	; (8003934 <SystemInit+0xfc>)
 80038d0:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80038d2:	4b14      	ldr	r3, [pc, #80]	; (8003924 <SystemInit+0xec>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80038d8:	4b12      	ldr	r3, [pc, #72]	; (8003924 <SystemInit+0xec>)
 80038da:	4a16      	ldr	r2, [pc, #88]	; (8003934 <SystemInit+0xfc>)
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80038de:	4b11      	ldr	r3, [pc, #68]	; (8003924 <SystemInit+0xec>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80038e4:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <SystemInit+0xec>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a0e      	ldr	r2, [pc, #56]	; (8003924 <SystemInit+0xec>)
 80038ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ee:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80038f0:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <SystemInit+0xec>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <SystemInit+0x100>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <SystemInit+0x104>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003902:	d202      	bcs.n	800390a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003904:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <SystemInit+0x108>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800390a:	4b0e      	ldr	r3, [pc, #56]	; (8003944 <SystemInit+0x10c>)
 800390c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003910:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003912:	bf00      	nop
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	e000ed00 	.word	0xe000ed00
 8003920:	52002000 	.word	0x52002000
 8003924:	58024400 	.word	0x58024400
 8003928:	eaf6ed7f 	.word	0xeaf6ed7f
 800392c:	02020200 	.word	0x02020200
 8003930:	01ff0000 	.word	0x01ff0000
 8003934:	01010280 	.word	0x01010280
 8003938:	5c001000 	.word	0x5c001000
 800393c:	ffff0000 	.word	0xffff0000
 8003940:	51008108 	.word	0x51008108
 8003944:	52004000 	.word	0x52004000

08003948 <Reset_Handler>:
 8003948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003980 <LoopFillZerobss+0xe>
 800394c:	f7ff ff74 	bl	8003838 <SystemInit>
 8003950:	480c      	ldr	r0, [pc, #48]	; (8003984 <LoopFillZerobss+0x12>)
 8003952:	490d      	ldr	r1, [pc, #52]	; (8003988 <LoopFillZerobss+0x16>)
 8003954:	4a0d      	ldr	r2, [pc, #52]	; (800398c <LoopFillZerobss+0x1a>)
 8003956:	2300      	movs	r3, #0
 8003958:	e002      	b.n	8003960 <LoopCopyDataInit>

0800395a <CopyDataInit>:
 800395a:	58d4      	ldr	r4, [r2, r3]
 800395c:	50c4      	str	r4, [r0, r3]
 800395e:	3304      	adds	r3, #4

08003960 <LoopCopyDataInit>:
 8003960:	18c4      	adds	r4, r0, r3
 8003962:	428c      	cmp	r4, r1
 8003964:	d3f9      	bcc.n	800395a <CopyDataInit>
 8003966:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <LoopFillZerobss+0x1e>)
 8003968:	4c0a      	ldr	r4, [pc, #40]	; (8003994 <LoopFillZerobss+0x22>)
 800396a:	2300      	movs	r3, #0
 800396c:	e001      	b.n	8003972 <LoopFillZerobss>

0800396e <FillZerobss>:
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	3204      	adds	r2, #4

08003972 <LoopFillZerobss>:
 8003972:	42a2      	cmp	r2, r4
 8003974:	d3fb      	bcc.n	800396e <FillZerobss>
 8003976:	f012 fb77 	bl	8016068 <__libc_init_array>
 800397a:	f7fd fa8d 	bl	8000e98 <main>
 800397e:	4770      	bx	lr
 8003980:	24080000 	.word	0x24080000
 8003984:	24000000 	.word	0x24000000
 8003988:	24000108 	.word	0x24000108
 800398c:	08016f34 	.word	0x08016f34
 8003990:	24000120 	.word	0x24000120
 8003994:	24005a2c 	.word	0x24005a2c

08003998 <ADC3_IRQHandler>:
 8003998:	e7fe      	b.n	8003998 <ADC3_IRQHandler>
	...

0800399c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039a2:	2003      	movs	r0, #3
 80039a4:	f001 fd39 	bl	800541a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039a8:	f006 fde4 	bl	800a574 <HAL_RCC_GetSysClockFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <HAL_Init+0x68>)
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	4913      	ldr	r1, [pc, #76]	; (8003a08 <HAL_Init+0x6c>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	fa22 f303 	lsr.w	r3, r2, r3
 80039c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039c6:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <HAL_Init+0x68>)
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	4a0e      	ldr	r2, [pc, #56]	; (8003a08 <HAL_Init+0x6c>)
 80039d0:	5cd3      	ldrb	r3, [r2, r3]
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	fa22 f303 	lsr.w	r3, r2, r3
 80039dc:	4a0b      	ldr	r2, [pc, #44]	; (8003a0c <HAL_Init+0x70>)
 80039de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039e0:	4a0b      	ldr	r2, [pc, #44]	; (8003a10 <HAL_Init+0x74>)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039e6:	2005      	movs	r0, #5
 80039e8:	f7ff fd56 	bl	8003498 <HAL_InitTick>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e002      	b.n	80039fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80039f6:	f7ff f8bf 	bl	8002b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	58024400 	.word	0x58024400
 8003a08:	08016e80 	.word	0x08016e80
 8003a0c:	24000094 	.word	0x24000094
 8003a10:	24000090 	.word	0x24000090

08003a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_IncTick+0x20>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <HAL_IncTick+0x24>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4413      	add	r3, r2
 8003a24:	4a04      	ldr	r2, [pc, #16]	; (8003a38 <HAL_IncTick+0x24>)
 8003a26:	6013      	str	r3, [r2, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	2400009c 	.word	0x2400009c
 8003a38:	240010c8 	.word	0x240010c8

08003a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a40:	4b03      	ldr	r3, [pc, #12]	; (8003a50 <HAL_GetTick+0x14>)
 8003a42:	681b      	ldr	r3, [r3, #0]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	240010c8 	.word	0x240010c8

08003a54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <HAL_GetREVID+0x14>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	0c1b      	lsrs	r3, r3, #16
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	5c001000 	.word	0x5c001000

08003a6c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003a76:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	401a      	ands	r2, r3
 8003a80:	4904      	ldr	r1, [pc, #16]	; (8003a94 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	58000400 	.word	0x58000400

08003a98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	609a      	str	r2, [r3, #8]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3360      	adds	r3, #96	; 0x60
 8003b12:	461a      	mov	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003b34:	bf00      	nop
 8003b36:	371c      	adds	r7, #28
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f003 031f 	and.w	r3, r3, #31
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	431a      	orrs	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	611a      	str	r2, [r3, #16]
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b087      	sub	sp, #28
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3360      	adds	r3, #96	; 0x60
 8003b82:	461a      	mov	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	601a      	str	r2, [r3, #0]
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b087      	sub	sp, #28
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	3330      	adds	r3, #48	; 0x30
 8003bde:	461a      	mov	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	f003 030c 	and.w	r3, r3, #12
 8003bea:	4413      	add	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	211f      	movs	r1, #31
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	401a      	ands	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	0e9b      	lsrs	r3, r3, #26
 8003c06:	f003 011f 	and.w	r1, r3, #31
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
 8003c14:	431a      	orrs	r2, r3
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c1a:	bf00      	nop
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f023 0203 	bic.w	r2, r3, #3
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	60da      	str	r2, [r3, #12]
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3314      	adds	r3, #20
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	0e5b      	lsrs	r3, r3, #25
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	4413      	add	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	0d1b      	lsrs	r3, r3, #20
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	2107      	movs	r1, #7
 8003c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	401a      	ands	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	0d1b      	lsrs	r3, r3, #20
 8003c86:	f003 031f 	and.w	r3, r3, #31
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c90:	431a      	orrs	r2, r3
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c96:	bf00      	nop
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	401a      	ands	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f003 0318 	and.w	r3, r3, #24
 8003cc6:	4908      	ldr	r1, [pc, #32]	; (8003ce8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003cc8:	40d9      	lsrs	r1, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	400b      	ands	r3, r1
 8003cce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003cda:	bf00      	nop
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	000fffff 	.word	0x000fffff

08003cec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 031f 	and.w	r3, r3, #31
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6093      	str	r3, [r2, #8]
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	5fffffc0 	.word	0x5fffffc0

08003d2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d40:	d101      	bne.n	8003d46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <LL_ADC_EnableInternalRegulator+0x24>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	6fffffc0 	.word	0x6fffffc0

08003d7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d90:	d101      	bne.n	8003d96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689a      	ldr	r2, [r3, #8]
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <LL_ADC_Enable+0x24>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	f043 0201 	orr.w	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	7fffffc0 	.word	0x7fffffc0

08003dcc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <LL_ADC_Disable+0x24>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	f043 0202 	orr.w	r2, r3, #2
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	7fffffc0 	.word	0x7fffffc0

08003df4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <LL_ADC_IsEnabled+0x18>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <LL_ADC_IsEnabled+0x1a>
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d101      	bne.n	8003e32 <LL_ADC_IsDisableOngoing+0x18>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <LL_ADC_IsDisableOngoing+0x1a>
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <LL_ADC_REG_StartConversion+0x24>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	f043 0204 	orr.w	r2, r3, #4
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	7fffffc0 	.word	0x7fffffc0

08003e68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d101      	bne.n	8003e80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d101      	bne.n	8003ea6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003eb4:	b590      	push	{r4, r7, lr}
 8003eb6:	b089      	sub	sp, #36	; 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e18f      	b.n	80041ee <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7fe fe69 	bl	8002bb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff ff19 	bl	8003d2c <LL_ADC_IsDeepPowerDownEnabled>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d004      	beq.n	8003f0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff feff 	bl	8003d08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff ff34 	bl	8003d7c <LL_ADC_IsInternalRegulatorEnabled>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d114      	bne.n	8003f44 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff ff18 	bl	8003d54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f24:	4b87      	ldr	r3, [pc, #540]	; (8004144 <HAL_ADC_Init+0x290>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	099b      	lsrs	r3, r3, #6
 8003f2a:	4a87      	ldr	r2, [pc, #540]	; (8004148 <HAL_ADC_Init+0x294>)
 8003f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f30:	099b      	lsrs	r3, r3, #6
 8003f32:	3301      	adds	r3, #1
 8003f34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f36:	e002      	b.n	8003f3e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f9      	bne.n	8003f38 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff ff17 	bl	8003d7c <LL_ADC_IsInternalRegulatorEnabled>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10d      	bne.n	8003f70 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	f043 0210 	orr.w	r2, r3, #16
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f64:	f043 0201 	orr.w	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff ff77 	bl	8003e68 <LL_ADC_REG_IsConversionOngoing>
 8003f7a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f040 8129 	bne.w	80041dc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f040 8125 	bne.w	80041dc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f96:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f9a:	f043 0202 	orr.w	r2, r3, #2
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff ff24 	bl	8003df4 <LL_ADC_IsEnabled>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d136      	bne.n	8004020 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a65      	ldr	r2, [pc, #404]	; (800414c <HAL_ADC_Init+0x298>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d004      	beq.n	8003fc6 <HAL_ADC_Init+0x112>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a63      	ldr	r2, [pc, #396]	; (8004150 <HAL_ADC_Init+0x29c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d10e      	bne.n	8003fe4 <HAL_ADC_Init+0x130>
 8003fc6:	4861      	ldr	r0, [pc, #388]	; (800414c <HAL_ADC_Init+0x298>)
 8003fc8:	f7ff ff14 	bl	8003df4 <LL_ADC_IsEnabled>
 8003fcc:	4604      	mov	r4, r0
 8003fce:	4860      	ldr	r0, [pc, #384]	; (8004150 <HAL_ADC_Init+0x29c>)
 8003fd0:	f7ff ff10 	bl	8003df4 <LL_ADC_IsEnabled>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	4323      	orrs	r3, r4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	e008      	b.n	8003ff6 <HAL_ADC_Init+0x142>
 8003fe4:	485b      	ldr	r0, [pc, #364]	; (8004154 <HAL_ADC_Init+0x2a0>)
 8003fe6:	f7ff ff05 	bl	8003df4 <LL_ADC_IsEnabled>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	bf0c      	ite	eq
 8003ff0:	2301      	moveq	r3, #1
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d012      	beq.n	8004020 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a53      	ldr	r2, [pc, #332]	; (800414c <HAL_ADC_Init+0x298>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_ADC_Init+0x15a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a51      	ldr	r2, [pc, #324]	; (8004150 <HAL_ADC_Init+0x29c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <HAL_ADC_Init+0x15e>
 800400e:	4a52      	ldr	r2, [pc, #328]	; (8004158 <HAL_ADC_Init+0x2a4>)
 8004010:	e000      	b.n	8004014 <HAL_ADC_Init+0x160>
 8004012:	4a52      	ldr	r2, [pc, #328]	; (800415c <HAL_ADC_Init+0x2a8>)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4619      	mov	r1, r3
 800401a:	4610      	mov	r0, r2
 800401c:	f7ff fd3c 	bl	8003a98 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004020:	f7ff fd18 	bl	8003a54 <HAL_GetREVID>
 8004024:	4603      	mov	r3, r0
 8004026:	f241 0203 	movw	r2, #4099	; 0x1003
 800402a:	4293      	cmp	r3, r2
 800402c:	d914      	bls.n	8004058 <HAL_ADC_Init+0x1a4>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b10      	cmp	r3, #16
 8004034:	d110      	bne.n	8004058 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	7d5b      	ldrb	r3, [r3, #21]
 800403a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004040:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004046:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7f1b      	ldrb	r3, [r3, #28]
 800404c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800404e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004050:	f043 030c 	orr.w	r3, r3, #12
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	e00d      	b.n	8004074 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	7d5b      	ldrb	r3, [r3, #21]
 800405c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004062:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004068:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	7f1b      	ldrb	r3, [r3, #28]
 800406e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004070:	4313      	orrs	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	7f1b      	ldrb	r3, [r3, #28]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d106      	bne.n	800408a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	3b01      	subs	r3, #1
 8004082:	045b      	lsls	r3, r3, #17
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4313      	orrs	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	2b00      	cmp	r3, #0
 8004090:	d009      	beq.n	80040a6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	4b2c      	ldr	r3, [pc, #176]	; (8004160 <HAL_ADC_Init+0x2ac>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	69b9      	ldr	r1, [r7, #24]
 80040b6:	430b      	orrs	r3, r1
 80040b8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff fed2 	bl	8003e68 <LL_ADC_REG_IsConversionOngoing>
 80040c4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff fedf 	bl	8003e8e <LL_ADC_INJ_IsConversionOngoing>
 80040d0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d15f      	bne.n	8004198 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d15c      	bne.n	8004198 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	7d1b      	ldrb	r3, [r3, #20]
 80040e2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80040e8:	4313      	orrs	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <HAL_ADC_Init+0x2b0>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	69b9      	ldr	r1, [r7, #24]
 80040fc:	430b      	orrs	r3, r1
 80040fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004106:	2b01      	cmp	r3, #1
 8004108:	d130      	bne.n	800416c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	4b14      	ldr	r3, [pc, #80]	; (8004168 <HAL_ADC_Init+0x2b4>)
 8004118:	4013      	ands	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800411e:	3a01      	subs	r2, #1
 8004120:	0411      	lsls	r1, r2, #16
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004126:	4311      	orrs	r1, r2
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800412c:	4311      	orrs	r1, r2
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004132:	430a      	orrs	r2, r1
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	611a      	str	r2, [r3, #16]
 8004140:	e01c      	b.n	800417c <HAL_ADC_Init+0x2c8>
 8004142:	bf00      	nop
 8004144:	24000090 	.word	0x24000090
 8004148:	053e2d63 	.word	0x053e2d63
 800414c:	40022000 	.word	0x40022000
 8004150:	40022100 	.word	0x40022100
 8004154:	58026000 	.word	0x58026000
 8004158:	40022300 	.word	0x40022300
 800415c:	58026300 	.word	0x58026300
 8004160:	fff0c003 	.word	0xfff0c003
 8004164:	ffffbffc 	.word	0xffffbffc
 8004168:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691a      	ldr	r2, [r3, #16]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fdec 	bl	8004d70 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d10c      	bne.n	80041ba <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f023 010f 	bic.w	r1, r3, #15
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	1e5a      	subs	r2, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
 80041b8:	e007      	b.n	80041ca <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 020f 	bic.w	r2, r2, #15
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	f023 0303 	bic.w	r3, r3, #3
 80041d2:	f043 0201 	orr.w	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	655a      	str	r2, [r3, #84]	; 0x54
 80041da:	e007      	b.n	80041ec <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e0:	f043 0210 	orr.w	r2, r3, #16
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80041ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3724      	adds	r7, #36	; 0x24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd90      	pop	{r4, r7, pc}
 80041f6:	bf00      	nop

080041f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a55      	ldr	r2, [pc, #340]	; (8004360 <HAL_ADC_Start_DMA+0x168>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <HAL_ADC_Start_DMA+0x20>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a54      	ldr	r2, [pc, #336]	; (8004364 <HAL_ADC_Start_DMA+0x16c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d101      	bne.n	800421c <HAL_ADC_Start_DMA+0x24>
 8004218:	4b53      	ldr	r3, [pc, #332]	; (8004368 <HAL_ADC_Start_DMA+0x170>)
 800421a:	e000      	b.n	800421e <HAL_ADC_Start_DMA+0x26>
 800421c:	4b53      	ldr	r3, [pc, #332]	; (800436c <HAL_ADC_Start_DMA+0x174>)
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fd64 	bl	8003cec <LL_ADC_GetMultimode>
 8004224:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff fe1c 	bl	8003e68 <LL_ADC_REG_IsConversionOngoing>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	f040 808c 	bne.w	8004350 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_ADC_Start_DMA+0x4e>
 8004242:	2302      	movs	r3, #2
 8004244:	e087      	b.n	8004356 <HAL_ADC_Start_DMA+0x15e>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	2b05      	cmp	r3, #5
 8004258:	d002      	beq.n	8004260 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b09      	cmp	r3, #9
 800425e:	d170      	bne.n	8004342 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fc07 	bl	8004a74 <ADC_Enable>
 8004266:	4603      	mov	r3, r0
 8004268:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800426a:	7dfb      	ldrb	r3, [r7, #23]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d163      	bne.n	8004338 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004274:	4b3e      	ldr	r3, [pc, #248]	; (8004370 <HAL_ADC_Start_DMA+0x178>)
 8004276:	4013      	ands	r3, r2
 8004278:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a37      	ldr	r2, [pc, #220]	; (8004364 <HAL_ADC_Start_DMA+0x16c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d002      	beq.n	8004290 <HAL_ADC_Start_DMA+0x98>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	e000      	b.n	8004292 <HAL_ADC_Start_DMA+0x9a>
 8004290:	4b33      	ldr	r3, [pc, #204]	; (8004360 <HAL_ADC_Start_DMA+0x168>)
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	6812      	ldr	r2, [r2, #0]
 8004296:	4293      	cmp	r3, r2
 8004298:	d002      	beq.n	80042a0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d105      	bne.n	80042ac <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d006      	beq.n	80042c6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042bc:	f023 0206 	bic.w	r2, r3, #6
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	659a      	str	r2, [r3, #88]	; 0x58
 80042c4:	e002      	b.n	80042cc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d0:	4a28      	ldr	r2, [pc, #160]	; (8004374 <HAL_ADC_Start_DMA+0x17c>)
 80042d2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d8:	4a27      	ldr	r2, [pc, #156]	; (8004378 <HAL_ADC_Start_DMA+0x180>)
 80042da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e0:	4a26      	ldr	r2, [pc, #152]	; (800437c <HAL_ADC_Start_DMA+0x184>)
 80042e2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	221c      	movs	r2, #28
 80042ea:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0210 	orr.w	r2, r2, #16
 8004302:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	4619      	mov	r1, r3
 800430e:	4610      	mov	r0, r2
 8004310:	f7ff fc89 	bl	8003c26 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3340      	adds	r3, #64	; 0x40
 800431e:	4619      	mov	r1, r3
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f002 f80e 	bl	8006344 <HAL_DMA_Start_IT>
 8004328:	4603      	mov	r3, r0
 800432a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fd85 	bl	8003e40 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004336:	e00d      	b.n	8004354 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004340:	e008      	b.n	8004354 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800434e:	e001      	b.n	8004354 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004350:	2302      	movs	r3, #2
 8004352:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004354:	7dfb      	ldrb	r3, [r7, #23]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40022000 	.word	0x40022000
 8004364:	40022100 	.word	0x40022100
 8004368:	40022300 	.word	0x40022300
 800436c:	58026300 	.word	0x58026300
 8004370:	fffff0fe 	.word	0xfffff0fe
 8004374:	08004c47 	.word	0x08004c47
 8004378:	08004d1f 	.word	0x08004d1f
 800437c:	08004d3b 	.word	0x08004d3b

08004380 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80043bc:	b590      	push	{r4, r7, lr}
 80043be:	b0a1      	sub	sp, #132	; 0x84
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4a65      	ldr	r2, [pc, #404]	; (800456c <HAL_ADC_ConfigChannel+0x1b0>)
 80043d6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x2a>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e32e      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x688>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff fd38 	bl	8003e68 <LL_ADC_REG_IsConversionOngoing>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f040 8313 	bne.w	8004a26 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	db2c      	blt.n	8004462 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004410:	2b00      	cmp	r3, #0
 8004412:	d108      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x6a>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	0e9b      	lsrs	r3, r3, #26
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	2201      	movs	r2, #1
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	e016      	b.n	8004454 <HAL_ADC_ConfigChannel+0x98>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800442e:	fa93 f3a3 	rbit	r3, r3
 8004432:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004434:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004436:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004438:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800443e:	2320      	movs	r3, #32
 8004440:	e003      	b.n	800444a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004442:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004444:	fab3 f383 	clz	r3, r3
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f003 031f 	and.w	r3, r3, #31
 800444e:	2201      	movs	r2, #1
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	69d1      	ldr	r1, [r2, #28]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	430b      	orrs	r3, r1
 8004460:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6859      	ldr	r1, [r3, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	f7ff fbad 	bl	8003bce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff fcf5 	bl	8003e68 <LL_ADC_REG_IsConversionOngoing>
 800447e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fd02 	bl	8003e8e <LL_ADC_INJ_IsConversionOngoing>
 800448a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800448c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800448e:	2b00      	cmp	r3, #0
 8004490:	f040 80b8 	bne.w	8004604 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004496:	2b00      	cmp	r3, #0
 8004498:	f040 80b4 	bne.w	8004604 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	6819      	ldr	r1, [r3, #0]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	461a      	mov	r2, r3
 80044aa:	f7ff fbcf 	bl	8003c4c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80044ae:	4b30      	ldr	r3, [pc, #192]	; (8004570 <HAL_ADC_ConfigChannel+0x1b4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80044b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044ba:	d10b      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x118>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	089b      	lsrs	r3, r3, #2
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	e01d      	b.n	8004510 <HAL_ADC_ConfigChannel+0x154>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10b      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x13e>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	089b      	lsrs	r3, r3, #2
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	e00a      	b.n	8004510 <HAL_ADC_ConfigChannel+0x154>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	089b      	lsrs	r3, r3, #2
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	2b04      	cmp	r3, #4
 8004518:	d02c      	beq.n	8004574 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	6919      	ldr	r1, [r3, #16]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004528:	f7ff faea 	bl	8003b00 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	6919      	ldr	r1, [r3, #16]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	7e5b      	ldrb	r3, [r3, #25]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d102      	bne.n	8004542 <HAL_ADC_ConfigChannel+0x186>
 800453c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004540:	e000      	b.n	8004544 <HAL_ADC_ConfigChannel+0x188>
 8004542:	2300      	movs	r3, #0
 8004544:	461a      	mov	r2, r3
 8004546:	f7ff fb14 	bl	8003b72 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6919      	ldr	r1, [r3, #16]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	7e1b      	ldrb	r3, [r3, #24]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d102      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x1a4>
 800455a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800455e:	e000      	b.n	8004562 <HAL_ADC_ConfigChannel+0x1a6>
 8004560:	2300      	movs	r3, #0
 8004562:	461a      	mov	r2, r3
 8004564:	f7ff faec 	bl	8003b40 <LL_ADC_SetDataRightShift>
 8004568:	e04c      	b.n	8004604 <HAL_ADC_ConfigChannel+0x248>
 800456a:	bf00      	nop
 800456c:	47ff0000 	.word	0x47ff0000
 8004570:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	069b      	lsls	r3, r3, #26
 8004584:	429a      	cmp	r2, r3
 8004586:	d107      	bne.n	8004598 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004596:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800459e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	069b      	lsls	r3, r3, #26
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d107      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045ba:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	069b      	lsls	r3, r3, #26
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d107      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045de:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	069b      	lsls	r3, r3, #26
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d107      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004602:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fbf3 	bl	8003df4 <LL_ADC_IsEnabled>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	f040 8211 	bne.w	8004a38 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6819      	ldr	r1, [r3, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	461a      	mov	r2, r3
 8004624:	f7ff fb3e 	bl	8003ca4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	4aa1      	ldr	r2, [pc, #644]	; (80048b4 <HAL_ADC_ConfigChannel+0x4f8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	f040 812e 	bne.w	8004890 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10b      	bne.n	800465c <HAL_ADC_ConfigChannel+0x2a0>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	0e9b      	lsrs	r3, r3, #26
 800464a:	3301      	adds	r3, #1
 800464c:	f003 031f 	and.w	r3, r3, #31
 8004650:	2b09      	cmp	r3, #9
 8004652:	bf94      	ite	ls
 8004654:	2301      	movls	r3, #1
 8004656:	2300      	movhi	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e019      	b.n	8004690 <HAL_ADC_ConfigChannel+0x2d4>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004664:	fa93 f3a3 	rbit	r3, r3
 8004668:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800466a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800466c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800466e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004674:	2320      	movs	r3, #32
 8004676:	e003      	b.n	8004680 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800467a:	fab3 f383 	clz	r3, r3
 800467e:	b2db      	uxtb	r3, r3
 8004680:	3301      	adds	r3, #1
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	2b09      	cmp	r3, #9
 8004688:	bf94      	ite	ls
 800468a:	2301      	movls	r3, #1
 800468c:	2300      	movhi	r3, #0
 800468e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004690:	2b00      	cmp	r3, #0
 8004692:	d079      	beq.n	8004788 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800469c:	2b00      	cmp	r3, #0
 800469e:	d107      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x2f4>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	0e9b      	lsrs	r3, r3, #26
 80046a6:	3301      	adds	r3, #1
 80046a8:	069b      	lsls	r3, r3, #26
 80046aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046ae:	e015      	b.n	80046dc <HAL_ADC_ConfigChannel+0x320>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b8:	fa93 f3a3 	rbit	r3, r3
 80046bc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80046be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046c0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80046c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80046c8:	2320      	movs	r3, #32
 80046ca:	e003      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80046cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ce:	fab3 f383 	clz	r3, r3
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	3301      	adds	r3, #1
 80046d6:	069b      	lsls	r3, r3, #26
 80046d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x340>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	0e9b      	lsrs	r3, r3, #26
 80046ee:	3301      	adds	r3, #1
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	2101      	movs	r1, #1
 80046f6:	fa01 f303 	lsl.w	r3, r1, r3
 80046fa:	e017      	b.n	800472c <HAL_ADC_ConfigChannel+0x370>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004704:	fa93 f3a3 	rbit	r3, r3
 8004708:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800470a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800470e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004714:	2320      	movs	r3, #32
 8004716:	e003      	b.n	8004720 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800471a:	fab3 f383 	clz	r3, r3
 800471e:	b2db      	uxtb	r3, r3
 8004720:	3301      	adds	r3, #1
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	2101      	movs	r1, #1
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	ea42 0103 	orr.w	r1, r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x396>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	0e9b      	lsrs	r3, r3, #26
 8004742:	3301      	adds	r3, #1
 8004744:	f003 021f 	and.w	r2, r3, #31
 8004748:	4613      	mov	r3, r2
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	4413      	add	r3, r2
 800474e:	051b      	lsls	r3, r3, #20
 8004750:	e018      	b.n	8004784 <HAL_ADC_ConfigChannel+0x3c8>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475a:	fa93 f3a3 	rbit	r3, r3
 800475e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800476a:	2320      	movs	r3, #32
 800476c:	e003      	b.n	8004776 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	fab3 f383 	clz	r3, r3
 8004774:	b2db      	uxtb	r3, r3
 8004776:	3301      	adds	r3, #1
 8004778:	f003 021f 	and.w	r2, r3, #31
 800477c:	4613      	mov	r3, r2
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	4413      	add	r3, r2
 8004782:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004784:	430b      	orrs	r3, r1
 8004786:	e07e      	b.n	8004886 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004790:	2b00      	cmp	r3, #0
 8004792:	d107      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x3e8>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	0e9b      	lsrs	r3, r3, #26
 800479a:	3301      	adds	r3, #1
 800479c:	069b      	lsls	r3, r3, #26
 800479e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047a2:	e015      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x414>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	fa93 f3a3 	rbit	r3, r3
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80047bc:	2320      	movs	r3, #32
 80047be:	e003      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	fab3 f383 	clz	r3, r3
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	3301      	adds	r3, #1
 80047ca:	069b      	lsls	r3, r3, #26
 80047cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d109      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x434>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	0e9b      	lsrs	r3, r3, #26
 80047e2:	3301      	adds	r3, #1
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2101      	movs	r1, #1
 80047ea:	fa01 f303 	lsl.w	r3, r1, r3
 80047ee:	e017      	b.n	8004820 <HAL_ADC_ConfigChannel+0x464>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	fa93 f3a3 	rbit	r3, r3
 80047fc:	61bb      	str	r3, [r7, #24]
  return result;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004808:	2320      	movs	r3, #32
 800480a:	e003      	b.n	8004814 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	fab3 f383 	clz	r3, r3
 8004812:	b2db      	uxtb	r3, r3
 8004814:	3301      	adds	r3, #1
 8004816:	f003 031f 	and.w	r3, r3, #31
 800481a:	2101      	movs	r1, #1
 800481c:	fa01 f303 	lsl.w	r3, r1, r3
 8004820:	ea42 0103 	orr.w	r1, r2, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10d      	bne.n	800484c <HAL_ADC_ConfigChannel+0x490>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	0e9b      	lsrs	r3, r3, #26
 8004836:	3301      	adds	r3, #1
 8004838:	f003 021f 	and.w	r2, r3, #31
 800483c:	4613      	mov	r3, r2
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	4413      	add	r3, r2
 8004842:	3b1e      	subs	r3, #30
 8004844:	051b      	lsls	r3, r3, #20
 8004846:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800484a:	e01b      	b.n	8004884 <HAL_ADC_ConfigChannel+0x4c8>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	fa93 f3a3 	rbit	r3, r3
 8004858:	60fb      	str	r3, [r7, #12]
  return result;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004864:	2320      	movs	r3, #32
 8004866:	e003      	b.n	8004870 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	fab3 f383 	clz	r3, r3
 800486e:	b2db      	uxtb	r3, r3
 8004870:	3301      	adds	r3, #1
 8004872:	f003 021f 	and.w	r2, r3, #31
 8004876:	4613      	mov	r3, r2
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	4413      	add	r3, r2
 800487c:	3b1e      	subs	r3, #30
 800487e:	051b      	lsls	r3, r3, #20
 8004880:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004884:	430b      	orrs	r3, r1
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	6892      	ldr	r2, [r2, #8]
 800488a:	4619      	mov	r1, r3
 800488c:	f7ff f9de 	bl	8003c4c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f280 80cf 	bge.w	8004a38 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a06      	ldr	r2, [pc, #24]	; (80048b8 <HAL_ADC_ConfigChannel+0x4fc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d004      	beq.n	80048ae <HAL_ADC_ConfigChannel+0x4f2>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a04      	ldr	r2, [pc, #16]	; (80048bc <HAL_ADC_ConfigChannel+0x500>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d10a      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x508>
 80048ae:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <HAL_ADC_ConfigChannel+0x504>)
 80048b0:	e009      	b.n	80048c6 <HAL_ADC_ConfigChannel+0x50a>
 80048b2:	bf00      	nop
 80048b4:	47ff0000 	.word	0x47ff0000
 80048b8:	40022000 	.word	0x40022000
 80048bc:	40022100 	.word	0x40022100
 80048c0:	40022300 	.word	0x40022300
 80048c4:	4b61      	ldr	r3, [pc, #388]	; (8004a4c <HAL_ADC_ConfigChannel+0x690>)
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff f90c 	bl	8003ae4 <LL_ADC_GetCommonPathInternalCh>
 80048cc:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a5f      	ldr	r2, [pc, #380]	; (8004a50 <HAL_ADC_ConfigChannel+0x694>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d004      	beq.n	80048e2 <HAL_ADC_ConfigChannel+0x526>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a5d      	ldr	r2, [pc, #372]	; (8004a54 <HAL_ADC_ConfigChannel+0x698>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d10e      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x544>
 80048e2:	485b      	ldr	r0, [pc, #364]	; (8004a50 <HAL_ADC_ConfigChannel+0x694>)
 80048e4:	f7ff fa86 	bl	8003df4 <LL_ADC_IsEnabled>
 80048e8:	4604      	mov	r4, r0
 80048ea:	485a      	ldr	r0, [pc, #360]	; (8004a54 <HAL_ADC_ConfigChannel+0x698>)
 80048ec:	f7ff fa82 	bl	8003df4 <LL_ADC_IsEnabled>
 80048f0:	4603      	mov	r3, r0
 80048f2:	4323      	orrs	r3, r4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bf0c      	ite	eq
 80048f8:	2301      	moveq	r3, #1
 80048fa:	2300      	movne	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	e008      	b.n	8004912 <HAL_ADC_ConfigChannel+0x556>
 8004900:	4855      	ldr	r0, [pc, #340]	; (8004a58 <HAL_ADC_ConfigChannel+0x69c>)
 8004902:	f7ff fa77 	bl	8003df4 <LL_ADC_IsEnabled>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	bf0c      	ite	eq
 800490c:	2301      	moveq	r3, #1
 800490e:	2300      	movne	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d07d      	beq.n	8004a12 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a50      	ldr	r2, [pc, #320]	; (8004a5c <HAL_ADC_ConfigChannel+0x6a0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d130      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x5c6>
 8004920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004922:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d12b      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a4a      	ldr	r2, [pc, #296]	; (8004a58 <HAL_ADC_ConfigChannel+0x69c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	f040 8081 	bne.w	8004a38 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a45      	ldr	r2, [pc, #276]	; (8004a50 <HAL_ADC_ConfigChannel+0x694>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d004      	beq.n	800494a <HAL_ADC_ConfigChannel+0x58e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a43      	ldr	r2, [pc, #268]	; (8004a54 <HAL_ADC_ConfigChannel+0x698>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d101      	bne.n	800494e <HAL_ADC_ConfigChannel+0x592>
 800494a:	4a45      	ldr	r2, [pc, #276]	; (8004a60 <HAL_ADC_ConfigChannel+0x6a4>)
 800494c:	e000      	b.n	8004950 <HAL_ADC_ConfigChannel+0x594>
 800494e:	4a3f      	ldr	r2, [pc, #252]	; (8004a4c <HAL_ADC_ConfigChannel+0x690>)
 8004950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004952:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004956:	4619      	mov	r1, r3
 8004958:	4610      	mov	r0, r2
 800495a:	f7ff f8b0 	bl	8003abe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800495e:	4b41      	ldr	r3, [pc, #260]	; (8004a64 <HAL_ADC_ConfigChannel+0x6a8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	099b      	lsrs	r3, r3, #6
 8004964:	4a40      	ldr	r2, [pc, #256]	; (8004a68 <HAL_ADC_ConfigChannel+0x6ac>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	099b      	lsrs	r3, r3, #6
 800496c:	3301      	adds	r3, #1
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004972:	e002      	b.n	800497a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	3b01      	subs	r3, #1
 8004978:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1f9      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004980:	e05a      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a39      	ldr	r2, [pc, #228]	; (8004a6c <HAL_ADC_ConfigChannel+0x6b0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d11e      	bne.n	80049ca <HAL_ADC_ConfigChannel+0x60e>
 800498c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d119      	bne.n	80049ca <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a2f      	ldr	r2, [pc, #188]	; (8004a58 <HAL_ADC_ConfigChannel+0x69c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d14b      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a2a      	ldr	r2, [pc, #168]	; (8004a50 <HAL_ADC_ConfigChannel+0x694>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d004      	beq.n	80049b4 <HAL_ADC_ConfigChannel+0x5f8>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a29      	ldr	r2, [pc, #164]	; (8004a54 <HAL_ADC_ConfigChannel+0x698>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d101      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x5fc>
 80049b4:	4a2a      	ldr	r2, [pc, #168]	; (8004a60 <HAL_ADC_ConfigChannel+0x6a4>)
 80049b6:	e000      	b.n	80049ba <HAL_ADC_ConfigChannel+0x5fe>
 80049b8:	4a24      	ldr	r2, [pc, #144]	; (8004a4c <HAL_ADC_ConfigChannel+0x690>)
 80049ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049c0:	4619      	mov	r1, r3
 80049c2:	4610      	mov	r0, r2
 80049c4:	f7ff f87b 	bl	8003abe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049c8:	e036      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a28      	ldr	r2, [pc, #160]	; (8004a70 <HAL_ADC_ConfigChannel+0x6b4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d131      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x67c>
 80049d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d12c      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1d      	ldr	r2, [pc, #116]	; (8004a58 <HAL_ADC_ConfigChannel+0x69c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d127      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a18      	ldr	r2, [pc, #96]	; (8004a50 <HAL_ADC_ConfigChannel+0x694>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d004      	beq.n	80049fc <HAL_ADC_ConfigChannel+0x640>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a17      	ldr	r2, [pc, #92]	; (8004a54 <HAL_ADC_ConfigChannel+0x698>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d101      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x644>
 80049fc:	4a18      	ldr	r2, [pc, #96]	; (8004a60 <HAL_ADC_ConfigChannel+0x6a4>)
 80049fe:	e000      	b.n	8004a02 <HAL_ADC_ConfigChannel+0x646>
 8004a00:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <HAL_ADC_ConfigChannel+0x690>)
 8004a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	f7ff f857 	bl	8003abe <LL_ADC_SetCommonPathInternalCh>
 8004a10:	e012      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a16:	f043 0220 	orr.w	r2, r3, #32
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004a24:	e008      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2a:	f043 0220 	orr.w	r2, r3, #32
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004a40:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3784      	adds	r7, #132	; 0x84
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd90      	pop	{r4, r7, pc}
 8004a4c:	58026300 	.word	0x58026300
 8004a50:	40022000 	.word	0x40022000
 8004a54:	40022100 	.word	0x40022100
 8004a58:	58026000 	.word	0x58026000
 8004a5c:	cb840000 	.word	0xcb840000
 8004a60:	40022300 	.word	0x40022300
 8004a64:	24000090 	.word	0x24000090
 8004a68:	053e2d63 	.word	0x053e2d63
 8004a6c:	c7520000 	.word	0xc7520000
 8004a70:	cfb80000 	.word	0xcfb80000

08004a74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7ff f9b7 	bl	8003df4 <LL_ADC_IsEnabled>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d16e      	bne.n	8004b6a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	4b38      	ldr	r3, [pc, #224]	; (8004b74 <ADC_Enable+0x100>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00d      	beq.n	8004ab6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9e:	f043 0210 	orr.w	r2, r3, #16
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aaa:	f043 0201 	orr.w	r2, r3, #1
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e05a      	b.n	8004b6c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff f972 	bl	8003da4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ac0:	f7fe ffbc 	bl	8003a3c <HAL_GetTick>
 8004ac4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a2b      	ldr	r2, [pc, #172]	; (8004b78 <ADC_Enable+0x104>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d004      	beq.n	8004ada <ADC_Enable+0x66>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a29      	ldr	r2, [pc, #164]	; (8004b7c <ADC_Enable+0x108>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d101      	bne.n	8004ade <ADC_Enable+0x6a>
 8004ada:	4b29      	ldr	r3, [pc, #164]	; (8004b80 <ADC_Enable+0x10c>)
 8004adc:	e000      	b.n	8004ae0 <ADC_Enable+0x6c>
 8004ade:	4b29      	ldr	r3, [pc, #164]	; (8004b84 <ADC_Enable+0x110>)
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff f903 	bl	8003cec <LL_ADC_GetMultimode>
 8004ae6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a23      	ldr	r2, [pc, #140]	; (8004b7c <ADC_Enable+0x108>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d002      	beq.n	8004af8 <ADC_Enable+0x84>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	e000      	b.n	8004afa <ADC_Enable+0x86>
 8004af8:	4b1f      	ldr	r3, [pc, #124]	; (8004b78 <ADC_Enable+0x104>)
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d02c      	beq.n	8004b5c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d130      	bne.n	8004b6a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b08:	e028      	b.n	8004b5c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff f970 	bl	8003df4 <LL_ADC_IsEnabled>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d104      	bne.n	8004b24 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff f940 	bl	8003da4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b24:	f7fe ff8a 	bl	8003a3c <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d914      	bls.n	8004b5c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d00d      	beq.n	8004b5c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b44:	f043 0210 	orr.w	r2, r3, #16
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b50:	f043 0201 	orr.w	r2, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e007      	b.n	8004b6c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d1cf      	bne.n	8004b0a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	8000003f 	.word	0x8000003f
 8004b78:	40022000 	.word	0x40022000
 8004b7c:	40022100 	.word	0x40022100
 8004b80:	40022300 	.word	0x40022300
 8004b84:	58026300 	.word	0x58026300

08004b88 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff f940 	bl	8003e1a <LL_ADC_IsDisableOngoing>
 8004b9a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff f927 	bl	8003df4 <LL_ADC_IsEnabled>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d047      	beq.n	8004c3c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d144      	bne.n	8004c3c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 030d 	and.w	r3, r3, #13
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d10c      	bne.n	8004bda <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff f901 	bl	8003dcc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2203      	movs	r2, #3
 8004bd0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bd2:	f7fe ff33 	bl	8003a3c <HAL_GetTick>
 8004bd6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bd8:	e029      	b.n	8004c2e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	f043 0210 	orr.w	r2, r3, #16
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	f043 0201 	orr.w	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e023      	b.n	8004c3e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004bf6:	f7fe ff21 	bl	8003a3c <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d914      	bls.n	8004c2e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00d      	beq.n	8004c2e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	f043 0210 	orr.w	r2, r3, #16
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c22:	f043 0201 	orr.w	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e007      	b.n	8004c3e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1dc      	bne.n	8004bf6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d14b      	bne.n	8004cf8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d021      	beq.n	8004cbe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe ff92 	bl	8003ba8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d032      	beq.n	8004cf0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d12b      	bne.n	8004cf0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d11f      	bne.n	8004cf0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb4:	f043 0201 	orr.w	r2, r3, #1
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	655a      	str	r2, [r3, #84]	; 0x54
 8004cbc:	e018      	b.n	8004cf0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d111      	bne.n	8004cf0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d105      	bne.n	8004cf0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce8:	f043 0201 	orr.w	r2, r3, #1
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7ff fb45 	bl	8004380 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004cf6:	e00e      	b.n	8004d16 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f7ff fb4f 	bl	80043a8 <HAL_ADC_ErrorCallback>
}
 8004d0a:	e004      	b.n	8004d16 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	4798      	blx	r3
}
 8004d16:	bf00      	nop
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f7ff fb31 	bl	8004394 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d58:	f043 0204 	orr.w	r2, r3, #4
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7ff fb21 	bl	80043a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d66:	bf00      	nop
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a7a      	ldr	r2, [pc, #488]	; (8004f68 <ADC_ConfigureBoostMode+0x1f8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <ADC_ConfigureBoostMode+0x1c>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a79      	ldr	r2, [pc, #484]	; (8004f6c <ADC_ConfigureBoostMode+0x1fc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d109      	bne.n	8004da0 <ADC_ConfigureBoostMode+0x30>
 8004d8c:	4b78      	ldr	r3, [pc, #480]	; (8004f70 <ADC_ConfigureBoostMode+0x200>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	bf14      	ite	ne
 8004d98:	2301      	movne	r3, #1
 8004d9a:	2300      	moveq	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	e008      	b.n	8004db2 <ADC_ConfigureBoostMode+0x42>
 8004da0:	4b74      	ldr	r3, [pc, #464]	; (8004f74 <ADC_ConfigureBoostMode+0x204>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	bf14      	ite	ne
 8004dac:	2301      	movne	r3, #1
 8004dae:	2300      	moveq	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d01c      	beq.n	8004df0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004db6:	f005 fd57 	bl	800a868 <HAL_RCC_GetHCLKFreq>
 8004dba:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dc4:	d010      	beq.n	8004de8 <ADC_ConfigureBoostMode+0x78>
 8004dc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dca:	d873      	bhi.n	8004eb4 <ADC_ConfigureBoostMode+0x144>
 8004dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd0:	d002      	beq.n	8004dd8 <ADC_ConfigureBoostMode+0x68>
 8004dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dd6:	d16d      	bne.n	8004eb4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	0c1b      	lsrs	r3, r3, #16
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de4:	60fb      	str	r3, [r7, #12]
        break;
 8004de6:	e068      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	089b      	lsrs	r3, r3, #2
 8004dec:	60fb      	str	r3, [r7, #12]
        break;
 8004dee:	e064      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004df0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004df4:	f04f 0100 	mov.w	r1, #0
 8004df8:	f006 ffde 	bl	800bdb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004dfc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e06:	d051      	beq.n	8004eac <ADC_ConfigureBoostMode+0x13c>
 8004e08:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e0c:	d854      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e0e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e12:	d047      	beq.n	8004ea4 <ADC_ConfigureBoostMode+0x134>
 8004e14:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e18:	d84e      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e1a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e1e:	d03d      	beq.n	8004e9c <ADC_ConfigureBoostMode+0x12c>
 8004e20:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e24:	d848      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e2a:	d033      	beq.n	8004e94 <ADC_ConfigureBoostMode+0x124>
 8004e2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e30:	d842      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e32:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e36:	d029      	beq.n	8004e8c <ADC_ConfigureBoostMode+0x11c>
 8004e38:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e3c:	d83c      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e3e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e42:	d01a      	beq.n	8004e7a <ADC_ConfigureBoostMode+0x10a>
 8004e44:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e48:	d836      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e4a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e4e:	d014      	beq.n	8004e7a <ADC_ConfigureBoostMode+0x10a>
 8004e50:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e54:	d830      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e5a:	d00e      	beq.n	8004e7a <ADC_ConfigureBoostMode+0x10a>
 8004e5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e60:	d82a      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e66:	d008      	beq.n	8004e7a <ADC_ConfigureBoostMode+0x10a>
 8004e68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e6c:	d824      	bhi.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
 8004e6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e72:	d002      	beq.n	8004e7a <ADC_ConfigureBoostMode+0x10a>
 8004e74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e78:	d11e      	bne.n	8004eb8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	0c9b      	lsrs	r3, r3, #18
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e88:	60fb      	str	r3, [r7, #12]
        break;
 8004e8a:	e016      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	091b      	lsrs	r3, r3, #4
 8004e90:	60fb      	str	r3, [r7, #12]
        break;
 8004e92:	e012      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	095b      	lsrs	r3, r3, #5
 8004e98:	60fb      	str	r3, [r7, #12]
        break;
 8004e9a:	e00e      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	099b      	lsrs	r3, r3, #6
 8004ea0:	60fb      	str	r3, [r7, #12]
        break;
 8004ea2:	e00a      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	09db      	lsrs	r3, r3, #7
 8004ea8:	60fb      	str	r3, [r7, #12]
        break;
 8004eaa:	e006      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	0a1b      	lsrs	r3, r3, #8
 8004eb0:	60fb      	str	r3, [r7, #12]
        break;
 8004eb2:	e002      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
        break;
 8004eb4:	bf00      	nop
 8004eb6:	e000      	b.n	8004eba <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004eb8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004eba:	f7fe fdcb 	bl	8003a54 <HAL_GetREVID>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d815      	bhi.n	8004ef4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4a2b      	ldr	r2, [pc, #172]	; (8004f78 <ADC_ConfigureBoostMode+0x208>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d908      	bls.n	8004ee2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ede:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ee0:	e03e      	b.n	8004f60 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ef0:	609a      	str	r2, [r3, #8]
}
 8004ef2:	e035      	b.n	8004f60 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	085b      	lsrs	r3, r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a1f      	ldr	r2, [pc, #124]	; (8004f7c <ADC_ConfigureBoostMode+0x20c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d808      	bhi.n	8004f14 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f10:	609a      	str	r2, [r3, #8]
}
 8004f12:	e025      	b.n	8004f60 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4a1a      	ldr	r2, [pc, #104]	; (8004f80 <ADC_ConfigureBoostMode+0x210>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d80a      	bhi.n	8004f32 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f2e:	609a      	str	r2, [r3, #8]
}
 8004f30:	e016      	b.n	8004f60 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4a13      	ldr	r2, [pc, #76]	; (8004f84 <ADC_ConfigureBoostMode+0x214>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d80a      	bhi.n	8004f50 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f4c:	609a      	str	r2, [r3, #8]
}
 8004f4e:	e007      	b.n	8004f60 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004f5e:	609a      	str	r2, [r3, #8]
}
 8004f60:	bf00      	nop
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40022000 	.word	0x40022000
 8004f6c:	40022100 	.word	0x40022100
 8004f70:	40022300 	.word	0x40022300
 8004f74:	58026300 	.word	0x58026300
 8004f78:	01312d00 	.word	0x01312d00
 8004f7c:	005f5e10 	.word	0x005f5e10
 8004f80:	00bebc20 	.word	0x00bebc20
 8004f84:	017d7840 	.word	0x017d7840

08004f88 <LL_ADC_IsEnabled>:
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <LL_ADC_IsEnabled+0x18>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e000      	b.n	8004fa2 <LL_ADC_IsEnabled+0x1a>
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
	...

08004fb0 <LL_ADC_StartCalibration>:
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	4b09      	ldr	r3, [pc, #36]	; (8004fe8 <LL_ADC_StartCalibration+0x38>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	609a      	str	r2, [r3, #8]
}
 8004fdc:	bf00      	nop
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	3ffeffc0 	.word	0x3ffeffc0

08004fec <LL_ADC_IsCalibrationOnGoing>:
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005000:	d101      	bne.n	8005006 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <LL_ADC_REG_IsConversionOngoing>:
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b04      	cmp	r3, #4
 8005026:	d101      	bne.n	800502c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005028:	2301      	movs	r3, #1
 800502a:	e000      	b.n	800502e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005048:	2300      	movs	r3, #0
 800504a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_ADCEx_Calibration_Start+0x1e>
 8005056:	2302      	movs	r3, #2
 8005058:	e04c      	b.n	80050f4 <HAL_ADCEx_Calibration_Start+0xb8>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7ff fd90 	bl	8004b88 <ADC_Disable>
 8005068:	4603      	mov	r3, r0
 800506a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800506c:	7dfb      	ldrb	r3, [r7, #23]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d135      	bne.n	80050de <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005076:	4b21      	ldr	r3, [pc, #132]	; (80050fc <HAL_ADCEx_Calibration_Start+0xc0>)
 8005078:	4013      	ands	r3, r2
 800507a:	f043 0202 	orr.w	r2, r3, #2
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff ff90 	bl	8004fb0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005090:	e014      	b.n	80050bc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	3301      	adds	r3, #1
 8005096:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4a19      	ldr	r2, [pc, #100]	; (8005100 <HAL_ADCEx_Calibration_Start+0xc4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d30d      	bcc.n	80050bc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a4:	f023 0312 	bic.w	r3, r3, #18
 80050a8:	f043 0210 	orr.w	r2, r3, #16
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e01b      	b.n	80050f4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff ff93 	bl	8004fec <LL_ADC_IsCalibrationOnGoing>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e2      	bne.n	8005092 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d0:	f023 0303 	bic.w	r3, r3, #3
 80050d4:	f043 0201 	orr.w	r2, r3, #1
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	655a      	str	r2, [r3, #84]	; 0x54
 80050dc:	e005      	b.n	80050ea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e2:	f043 0210 	orr.w	r2, r3, #16
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80050f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	ffffeefd 	.word	0xffffeefd
 8005100:	25c3f800 	.word	0x25c3f800

08005104 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005104:	b590      	push	{r4, r7, lr}
 8005106:	b09f      	sub	sp, #124	; 0x7c
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800511e:	2302      	movs	r3, #2
 8005120:	e0be      	b.n	80052a0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800512a:	2300      	movs	r3, #0
 800512c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800512e:	2300      	movs	r3, #0
 8005130:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a5c      	ldr	r2, [pc, #368]	; (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d102      	bne.n	8005142 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800513c:	4b5b      	ldr	r3, [pc, #364]	; (80052ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800513e:	60bb      	str	r3, [r7, #8]
 8005140:	e001      	b.n	8005146 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005142:	2300      	movs	r3, #0
 8005144:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10b      	bne.n	8005164 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005150:	f043 0220 	orr.w	r2, r3, #32
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e09d      	b.n	80052a0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff ff54 	bl	8005014 <LL_ADC_REG_IsConversionOngoing>
 800516c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff ff4e 	bl	8005014 <LL_ADC_REG_IsConversionOngoing>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d17f      	bne.n	800527e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800517e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005180:	2b00      	cmp	r3, #0
 8005182:	d17c      	bne.n	800527e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a47      	ldr	r2, [pc, #284]	; (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d004      	beq.n	8005198 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a46      	ldr	r2, [pc, #280]	; (80052ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d101      	bne.n	800519c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005198:	4b45      	ldr	r3, [pc, #276]	; (80052b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800519a:	e000      	b.n	800519e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800519c:	4b45      	ldr	r3, [pc, #276]	; (80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800519e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d039      	beq.n	800521c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80051a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051b8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a3a      	ldr	r2, [pc, #232]	; (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d004      	beq.n	80051ce <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a38      	ldr	r2, [pc, #224]	; (80052ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d10e      	bne.n	80051ec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80051ce:	4836      	ldr	r0, [pc, #216]	; (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80051d0:	f7ff feda 	bl	8004f88 <LL_ADC_IsEnabled>
 80051d4:	4604      	mov	r4, r0
 80051d6:	4835      	ldr	r0, [pc, #212]	; (80052ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80051d8:	f7ff fed6 	bl	8004f88 <LL_ADC_IsEnabled>
 80051dc:	4603      	mov	r3, r0
 80051de:	4323      	orrs	r3, r4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	bf0c      	ite	eq
 80051e4:	2301      	moveq	r3, #1
 80051e6:	2300      	movne	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	e008      	b.n	80051fe <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80051ec:	4832      	ldr	r0, [pc, #200]	; (80052b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80051ee:	f7ff fecb 	bl	8004f88 <LL_ADC_IsEnabled>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	bf0c      	ite	eq
 80051f8:	2301      	moveq	r3, #1
 80051fa:	2300      	movne	r3, #0
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d047      	beq.n	8005292 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	4b2d      	ldr	r3, [pc, #180]	; (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005208:	4013      	ands	r3, r2
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	6811      	ldr	r1, [r2, #0]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	6892      	ldr	r2, [r2, #8]
 8005212:	430a      	orrs	r2, r1
 8005214:	431a      	orrs	r2, r3
 8005216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005218:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800521a:	e03a      	b.n	8005292 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800521c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005226:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1e      	ldr	r2, [pc, #120]	; (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1d      	ldr	r2, [pc, #116]	; (80052ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d10e      	bne.n	800525a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800523c:	481a      	ldr	r0, [pc, #104]	; (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800523e:	f7ff fea3 	bl	8004f88 <LL_ADC_IsEnabled>
 8005242:	4604      	mov	r4, r0
 8005244:	4819      	ldr	r0, [pc, #100]	; (80052ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005246:	f7ff fe9f 	bl	8004f88 <LL_ADC_IsEnabled>
 800524a:	4603      	mov	r3, r0
 800524c:	4323      	orrs	r3, r4
 800524e:	2b00      	cmp	r3, #0
 8005250:	bf0c      	ite	eq
 8005252:	2301      	moveq	r3, #1
 8005254:	2300      	movne	r3, #0
 8005256:	b2db      	uxtb	r3, r3
 8005258:	e008      	b.n	800526c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800525a:	4817      	ldr	r0, [pc, #92]	; (80052b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800525c:	f7ff fe94 	bl	8004f88 <LL_ADC_IsEnabled>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	bf0c      	ite	eq
 8005266:	2301      	moveq	r3, #1
 8005268:	2300      	movne	r3, #0
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d010      	beq.n	8005292 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	4b11      	ldr	r3, [pc, #68]	; (80052bc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005276:	4013      	ands	r3, r2
 8005278:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800527a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800527c:	e009      	b.n	8005292 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005282:	f043 0220 	orr.w	r2, r3, #32
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005290:	e000      	b.n	8005294 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005292:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800529c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	377c      	adds	r7, #124	; 0x7c
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd90      	pop	{r4, r7, pc}
 80052a8:	40022000 	.word	0x40022000
 80052ac:	40022100 	.word	0x40022100
 80052b0:	40022300 	.word	0x40022300
 80052b4:	58026300 	.word	0x58026300
 80052b8:	58026000 	.word	0x58026000
 80052bc:	fffff0e0 	.word	0xfffff0e0

080052c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052d0:	4b0b      	ldr	r3, [pc, #44]	; (8005300 <__NVIC_SetPriorityGrouping+0x40>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052dc:	4013      	ands	r3, r2
 80052de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80052e8:	4b06      	ldr	r3, [pc, #24]	; (8005304 <__NVIC_SetPriorityGrouping+0x44>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052ee:	4a04      	ldr	r2, [pc, #16]	; (8005300 <__NVIC_SetPriorityGrouping+0x40>)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	60d3      	str	r3, [r2, #12]
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	e000ed00 	.word	0xe000ed00
 8005304:	05fa0000 	.word	0x05fa0000

08005308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800530c:	4b04      	ldr	r3, [pc, #16]	; (8005320 <__NVIC_GetPriorityGrouping+0x18>)
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	0a1b      	lsrs	r3, r3, #8
 8005312:	f003 0307 	and.w	r3, r3, #7
}
 8005316:	4618      	mov	r0, r3
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	e000ed00 	.word	0xe000ed00

08005324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	4603      	mov	r3, r0
 800532c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800532e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005332:	2b00      	cmp	r3, #0
 8005334:	db0b      	blt.n	800534e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	f003 021f 	and.w	r2, r3, #31
 800533c:	4907      	ldr	r1, [pc, #28]	; (800535c <__NVIC_EnableIRQ+0x38>)
 800533e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	2001      	movs	r0, #1
 8005346:	fa00 f202 	lsl.w	r2, r0, r2
 800534a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	e000e100 	.word	0xe000e100

08005360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	6039      	str	r1, [r7, #0]
 800536a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800536c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005370:	2b00      	cmp	r3, #0
 8005372:	db0a      	blt.n	800538a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	b2da      	uxtb	r2, r3
 8005378:	490c      	ldr	r1, [pc, #48]	; (80053ac <__NVIC_SetPriority+0x4c>)
 800537a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800537e:	0112      	lsls	r2, r2, #4
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	440b      	add	r3, r1
 8005384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005388:	e00a      	b.n	80053a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	b2da      	uxtb	r2, r3
 800538e:	4908      	ldr	r1, [pc, #32]	; (80053b0 <__NVIC_SetPriority+0x50>)
 8005390:	88fb      	ldrh	r3, [r7, #6]
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	3b04      	subs	r3, #4
 8005398:	0112      	lsls	r2, r2, #4
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	440b      	add	r3, r1
 800539e:	761a      	strb	r2, [r3, #24]
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	e000e100 	.word	0xe000e100
 80053b0:	e000ed00 	.word	0xe000ed00

080053b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b089      	sub	sp, #36	; 0x24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f1c3 0307 	rsb	r3, r3, #7
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	bf28      	it	cs
 80053d2:	2304      	movcs	r3, #4
 80053d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	3304      	adds	r3, #4
 80053da:	2b06      	cmp	r3, #6
 80053dc:	d902      	bls.n	80053e4 <NVIC_EncodePriority+0x30>
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	3b03      	subs	r3, #3
 80053e2:	e000      	b.n	80053e6 <NVIC_EncodePriority+0x32>
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43da      	mvns	r2, r3
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	401a      	ands	r2, r3
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	fa01 f303 	lsl.w	r3, r1, r3
 8005406:	43d9      	mvns	r1, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800540c:	4313      	orrs	r3, r2
         );
}
 800540e:	4618      	mov	r0, r3
 8005410:	3724      	adds	r7, #36	; 0x24
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b082      	sub	sp, #8
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff ff4c 	bl	80052c0 <__NVIC_SetPriorityGrouping>
}
 8005428:	bf00      	nop
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	4603      	mov	r3, r0
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800543e:	f7ff ff63 	bl	8005308 <__NVIC_GetPriorityGrouping>
 8005442:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	6978      	ldr	r0, [r7, #20]
 800544a:	f7ff ffb3 	bl	80053b4 <NVIC_EncodePriority>
 800544e:	4602      	mov	r2, r0
 8005450:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005454:	4611      	mov	r1, r2
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff ff82 	bl	8005360 <__NVIC_SetPriority>
}
 800545c:	bf00      	nop
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	4603      	mov	r3, r0
 800546c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800546e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff ff56 	bl	8005324 <__NVIC_EnableIRQ>
}
 8005478:	bf00      	nop
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e014      	b.n	80054bc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	791b      	ldrb	r3, [r3, #4]
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d105      	bne.n	80054a8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fd fca0 	bl	8002de8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2202      	movs	r2, #2
 80054ac:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e046      	b.n	8005566 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	795b      	ldrb	r3, [r3, #5]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_DAC_Start+0x20>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e040      	b.n	8005566 <HAL_DAC_Start+0xa2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2202      	movs	r2, #2
 80054ee:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6819      	ldr	r1, [r3, #0]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	f003 0310 	and.w	r3, r3, #16
 80054fc:	2201      	movs	r2, #1
 80054fe:	409a      	lsls	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10f      	bne.n	800552e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005518:	2b02      	cmp	r3, #2
 800551a:	d11d      	bne.n	8005558 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f042 0201 	orr.w	r2, r2, #1
 800552a:	605a      	str	r2, [r3, #4]
 800552c:	e014      	b.n	8005558 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	2102      	movs	r1, #2
 8005540:	fa01 f303 	lsl.w	r3, r1, r3
 8005544:	429a      	cmp	r2, r3
 8005546:	d107      	bne.n	8005558 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0202 	orr.w	r2, r2, #2
 8005556:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
	...

08005574 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0a2      	b.n	80056d2 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	795b      	ldrb	r3, [r3, #5]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_DAC_Start_DMA+0x24>
 8005594:	2302      	movs	r3, #2
 8005596:	e09c      	b.n	80056d2 <HAL_DAC_Start_DMA+0x15e>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2201      	movs	r2, #1
 800559c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2202      	movs	r2, #2
 80055a2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d129      	bne.n	80055fe <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	4a4b      	ldr	r2, [pc, #300]	; (80056dc <HAL_DAC_Start_DMA+0x168>)
 80055b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	4a4a      	ldr	r2, [pc, #296]	; (80056e0 <HAL_DAC_Start_DMA+0x16c>)
 80055b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	4a49      	ldr	r2, [pc, #292]	; (80056e4 <HAL_DAC_Start_DMA+0x170>)
 80055c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055d0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <HAL_DAC_Start_DMA+0x6c>
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d005      	beq.n	80055ea <HAL_DAC_Start_DMA+0x76>
 80055de:	e009      	b.n	80055f4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3308      	adds	r3, #8
 80055e6:	613b      	str	r3, [r7, #16]
        break;
 80055e8:	e033      	b.n	8005652 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	330c      	adds	r3, #12
 80055f0:	613b      	str	r3, [r7, #16]
        break;
 80055f2:	e02e      	b.n	8005652 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3310      	adds	r3, #16
 80055fa:	613b      	str	r3, [r7, #16]
        break;
 80055fc:	e029      	b.n	8005652 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	4a39      	ldr	r2, [pc, #228]	; (80056e8 <HAL_DAC_Start_DMA+0x174>)
 8005604:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	4a38      	ldr	r2, [pc, #224]	; (80056ec <HAL_DAC_Start_DMA+0x178>)
 800560c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	4a37      	ldr	r2, [pc, #220]	; (80056f0 <HAL_DAC_Start_DMA+0x17c>)
 8005614:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005624:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_DAC_Start_DMA+0xc0>
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	2b04      	cmp	r3, #4
 8005630:	d005      	beq.n	800563e <HAL_DAC_Start_DMA+0xca>
 8005632:	e009      	b.n	8005648 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3314      	adds	r3, #20
 800563a:	613b      	str	r3, [r7, #16]
        break;
 800563c:	e009      	b.n	8005652 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3318      	adds	r3, #24
 8005644:	613b      	str	r3, [r7, #16]
        break;
 8005646:	e004      	b.n	8005652 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	331c      	adds	r3, #28
 800564e:	613b      	str	r3, [r7, #16]
        break;
 8005650:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d111      	bne.n	800567c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005666:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6898      	ldr	r0, [r3, #8]
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	f000 fe67 	bl	8006344 <HAL_DMA_Start_IT>
 8005676:	4603      	mov	r3, r0
 8005678:	75fb      	strb	r3, [r7, #23]
 800567a:	e010      	b.n	800569e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800568a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	68d8      	ldr	r0, [r3, #12]
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	f000 fe55 	bl	8006344 <HAL_DMA_Start_IT>
 800569a:	4603      	mov	r3, r0
 800569c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80056a4:	7dfb      	ldrb	r3, [r7, #23]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10c      	bne.n	80056c4 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6819      	ldr	r1, [r3, #0]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2201      	movs	r2, #1
 80056b8:	409a      	lsls	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	e005      	b.n	80056d0 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	f043 0204 	orr.w	r2, r3, #4
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80056d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	08005b65 	.word	0x08005b65
 80056e0:	08005b87 	.word	0x08005b87
 80056e4:	08005ba3 	.word	0x08005ba3
 80056e8:	08005c21 	.word	0x08005c21
 80056ec:	08005c43 	.word	0x08005c43
 80056f0:	08005c5f 	.word	0x08005c5f

080056f4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e03e      	b.n	8005786 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6819      	ldr	r1, [r3, #0]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	43da      	mvns	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	400a      	ands	r2, r1
 8005724:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6819      	ldr	r1, [r3, #0]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2201      	movs	r2, #1
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	43da      	mvns	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	400a      	ands	r2, r1
 8005740:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10d      	bne.n	8005764 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	4618      	mov	r0, r3
 800574e:	f001 f863 	bl	8006818 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	e00c      	b.n	800577e <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	4618      	mov	r0, r3
 800576a:	f001 f855 	bl	8006818 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800577c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a4:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01d      	beq.n	80057ec <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d018      	beq.n	80057ec <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2204      	movs	r2, #4
 80057be:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f043 0201 	orr.w	r2, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057e4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f86f 	bl	80058ca <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d01d      	beq.n	8005832 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d018      	beq.n	8005832 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2204      	movs	r2, #4
 8005804:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f043 0202 	orr.w	r2, r3, #2
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800581a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800582a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f9ed 	bl	8005c0c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005832:	bf00      	nop
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800583a:	b480      	push	{r7}
 800583c:	b087      	sub	sp, #28
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	607a      	str	r2, [r7, #4]
 8005846:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e015      	b.n	8005882 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d105      	bne.n	800586e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4413      	add	r3, r2
 8005868:	3308      	adds	r3, #8
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e004      	b.n	8005878 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4413      	add	r3, r2
 8005874:	3314      	adds	r3, #20
 8005876:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	461a      	mov	r2, r3
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
	...

080058e0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08a      	sub	sp, #40	; 0x28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <HAL_DAC_ConfigChannel+0x1e>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e12a      	b.n	8005b58 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	795b      	ldrb	r3, [r3, #5]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_DAC_ConfigChannel+0x2e>
 800590a:	2302      	movs	r3, #2
 800590c:	e124      	b.n	8005b58 <HAL_DAC_ConfigChannel+0x278>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2202      	movs	r2, #2
 8005918:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b04      	cmp	r3, #4
 8005920:	d17a      	bne.n	8005a18 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005922:	f7fe f88b 	bl	8003a3c <HAL_GetTick>
 8005926:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d13d      	bne.n	80059aa <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800592e:	e018      	b.n	8005962 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005930:	f7fe f884 	bl	8003a3c <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b01      	cmp	r3, #1
 800593c:	d911      	bls.n	8005962 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005944:	4b86      	ldr	r3, [pc, #536]	; (8005b60 <HAL_DAC_ConfigChannel+0x280>)
 8005946:	4013      	ands	r3, r2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00a      	beq.n	8005962 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	f043 0208 	orr.w	r2, r3, #8
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2203      	movs	r2, #3
 800595c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e0fa      	b.n	8005b58 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005968:	4b7d      	ldr	r3, [pc, #500]	; (8005b60 <HAL_DAC_ConfigChannel+0x280>)
 800596a:	4013      	ands	r3, r2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1df      	bne.n	8005930 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	6992      	ldr	r2, [r2, #24]
 8005978:	641a      	str	r2, [r3, #64]	; 0x40
 800597a:	e020      	b.n	80059be <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800597c:	f7fe f85e 	bl	8003a3c <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b01      	cmp	r3, #1
 8005988:	d90f      	bls.n	80059aa <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	2b00      	cmp	r3, #0
 8005992:	da0a      	bge.n	80059aa <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	f043 0208 	orr.w	r2, r3, #8
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2203      	movs	r2, #3
 80059a4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e0d6      	b.n	8005b58 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	dbe3      	blt.n	800597c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	6992      	ldr	r2, [r2, #24]
 80059bc:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f003 0310 	and.w	r3, r3, #16
 80059ca:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80059ce:	fa01 f303 	lsl.w	r3, r1, r3
 80059d2:	43db      	mvns	r3, r3
 80059d4:	ea02 0103 	and.w	r1, r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	69da      	ldr	r2, [r3, #28]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f003 0310 	and.w	r3, r3, #16
 80059e2:	409a      	lsls	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	21ff      	movs	r1, #255	; 0xff
 80059fa:	fa01 f303 	lsl.w	r3, r1, r3
 80059fe:	43db      	mvns	r3, r3
 8005a00:	ea02 0103 	and.w	r1, r2, r3
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6a1a      	ldr	r2, [r3, #32]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f003 0310 	and.w	r3, r3, #16
 8005a0e:	409a      	lsls	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d11d      	bne.n	8005a5c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	221f      	movs	r2, #31
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	43db      	mvns	r3, r3
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a62:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f003 0310 	and.w	r3, r3, #16
 8005a6a:	2207      	movs	r2, #7
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	43db      	mvns	r3, r3
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	4013      	ands	r3, r2
 8005a76:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d102      	bne.n	8005a86 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
 8005a84:	e00f      	b.n	8005aa6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d102      	bne.n	8005a94 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
 8005a92:	e008      	b.n	8005aa6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d102      	bne.n	8005aa2 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa0:	e001      	b.n	8005aa6 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6819      	ldr	r1, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	43da      	mvns	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	400a      	ands	r2, r1
 8005aec:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f003 0310 	and.w	r3, r3, #16
 8005afc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	43db      	mvns	r3, r3
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f003 0310 	and.w	r3, r3, #16
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6819      	ldr	r1, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	22c0      	movs	r2, #192	; 0xc0
 8005b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3e:	43da      	mvns	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	400a      	ands	r2, r1
 8005b46:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005b54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3728      	adds	r7, #40	; 0x28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	20008000 	.word	0x20008000

08005b64 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f7ff fe8b 	bl	800588e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	711a      	strb	r2, [r3, #4]
}
 8005b7e:	bf00      	nop
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f7ff fe84 	bl	80058a2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005b9a:	bf00      	nop
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f043 0204 	orr.w	r2, r3, #4
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7ff fe7a 	bl	80058b6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	711a      	strb	r2, [r3, #4]
}
 8005bc8:	bf00      	nop
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f7ff ffce 	bl	8005bd0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	711a      	strb	r2, [r3, #4]
}
 8005c3a:	bf00      	nop
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f7ff ffc7 	bl	8005be4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f043 0204 	orr.w	r2, r3, #4
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f7ff ffbd 	bl	8005bf8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	711a      	strb	r2, [r3, #4]
}
 8005c84:	bf00      	nop
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005c94:	f7fd fed2 	bl	8003a3c <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e316      	b.n	80062d2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a66      	ldr	r2, [pc, #408]	; (8005e44 <HAL_DMA_Init+0x1b8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d04a      	beq.n	8005d44 <HAL_DMA_Init+0xb8>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a65      	ldr	r2, [pc, #404]	; (8005e48 <HAL_DMA_Init+0x1bc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d045      	beq.n	8005d44 <HAL_DMA_Init+0xb8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a63      	ldr	r2, [pc, #396]	; (8005e4c <HAL_DMA_Init+0x1c0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d040      	beq.n	8005d44 <HAL_DMA_Init+0xb8>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a62      	ldr	r2, [pc, #392]	; (8005e50 <HAL_DMA_Init+0x1c4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d03b      	beq.n	8005d44 <HAL_DMA_Init+0xb8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a60      	ldr	r2, [pc, #384]	; (8005e54 <HAL_DMA_Init+0x1c8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d036      	beq.n	8005d44 <HAL_DMA_Init+0xb8>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a5f      	ldr	r2, [pc, #380]	; (8005e58 <HAL_DMA_Init+0x1cc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d031      	beq.n	8005d44 <HAL_DMA_Init+0xb8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a5d      	ldr	r2, [pc, #372]	; (8005e5c <HAL_DMA_Init+0x1d0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d02c      	beq.n	8005d44 <HAL_DMA_Init+0xb8>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a5c      	ldr	r2, [pc, #368]	; (8005e60 <HAL_DMA_Init+0x1d4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d027      	beq.n	8005d44 <HAL_DMA_Init+0xb8>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a5a      	ldr	r2, [pc, #360]	; (8005e64 <HAL_DMA_Init+0x1d8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d022      	beq.n	8005d44 <HAL_DMA_Init+0xb8>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a59      	ldr	r2, [pc, #356]	; (8005e68 <HAL_DMA_Init+0x1dc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d01d      	beq.n	8005d44 <HAL_DMA_Init+0xb8>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a57      	ldr	r2, [pc, #348]	; (8005e6c <HAL_DMA_Init+0x1e0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d018      	beq.n	8005d44 <HAL_DMA_Init+0xb8>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a56      	ldr	r2, [pc, #344]	; (8005e70 <HAL_DMA_Init+0x1e4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d013      	beq.n	8005d44 <HAL_DMA_Init+0xb8>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a54      	ldr	r2, [pc, #336]	; (8005e74 <HAL_DMA_Init+0x1e8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00e      	beq.n	8005d44 <HAL_DMA_Init+0xb8>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a53      	ldr	r2, [pc, #332]	; (8005e78 <HAL_DMA_Init+0x1ec>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d009      	beq.n	8005d44 <HAL_DMA_Init+0xb8>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a51      	ldr	r2, [pc, #324]	; (8005e7c <HAL_DMA_Init+0x1f0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d004      	beq.n	8005d44 <HAL_DMA_Init+0xb8>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a50      	ldr	r2, [pc, #320]	; (8005e80 <HAL_DMA_Init+0x1f4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d101      	bne.n	8005d48 <HAL_DMA_Init+0xbc>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e000      	b.n	8005d4a <HAL_DMA_Init+0xbe>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 813b 	beq.w	8005fc6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a37      	ldr	r2, [pc, #220]	; (8005e44 <HAL_DMA_Init+0x1b8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d04a      	beq.n	8005e00 <HAL_DMA_Init+0x174>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a36      	ldr	r2, [pc, #216]	; (8005e48 <HAL_DMA_Init+0x1bc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d045      	beq.n	8005e00 <HAL_DMA_Init+0x174>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a34      	ldr	r2, [pc, #208]	; (8005e4c <HAL_DMA_Init+0x1c0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d040      	beq.n	8005e00 <HAL_DMA_Init+0x174>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a33      	ldr	r2, [pc, #204]	; (8005e50 <HAL_DMA_Init+0x1c4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d03b      	beq.n	8005e00 <HAL_DMA_Init+0x174>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a31      	ldr	r2, [pc, #196]	; (8005e54 <HAL_DMA_Init+0x1c8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d036      	beq.n	8005e00 <HAL_DMA_Init+0x174>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a30      	ldr	r2, [pc, #192]	; (8005e58 <HAL_DMA_Init+0x1cc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d031      	beq.n	8005e00 <HAL_DMA_Init+0x174>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a2e      	ldr	r2, [pc, #184]	; (8005e5c <HAL_DMA_Init+0x1d0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d02c      	beq.n	8005e00 <HAL_DMA_Init+0x174>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a2d      	ldr	r2, [pc, #180]	; (8005e60 <HAL_DMA_Init+0x1d4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d027      	beq.n	8005e00 <HAL_DMA_Init+0x174>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a2b      	ldr	r2, [pc, #172]	; (8005e64 <HAL_DMA_Init+0x1d8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d022      	beq.n	8005e00 <HAL_DMA_Init+0x174>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a2a      	ldr	r2, [pc, #168]	; (8005e68 <HAL_DMA_Init+0x1dc>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d01d      	beq.n	8005e00 <HAL_DMA_Init+0x174>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a28      	ldr	r2, [pc, #160]	; (8005e6c <HAL_DMA_Init+0x1e0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d018      	beq.n	8005e00 <HAL_DMA_Init+0x174>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a27      	ldr	r2, [pc, #156]	; (8005e70 <HAL_DMA_Init+0x1e4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d013      	beq.n	8005e00 <HAL_DMA_Init+0x174>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a25      	ldr	r2, [pc, #148]	; (8005e74 <HAL_DMA_Init+0x1e8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00e      	beq.n	8005e00 <HAL_DMA_Init+0x174>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a24      	ldr	r2, [pc, #144]	; (8005e78 <HAL_DMA_Init+0x1ec>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d009      	beq.n	8005e00 <HAL_DMA_Init+0x174>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a22      	ldr	r2, [pc, #136]	; (8005e7c <HAL_DMA_Init+0x1f0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d004      	beq.n	8005e00 <HAL_DMA_Init+0x174>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a21      	ldr	r2, [pc, #132]	; (8005e80 <HAL_DMA_Init+0x1f4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d108      	bne.n	8005e12 <HAL_DMA_Init+0x186>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0201 	bic.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	e007      	b.n	8005e22 <HAL_DMA_Init+0x196>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0201 	bic.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e22:	e02f      	b.n	8005e84 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e24:	f7fd fe0a 	bl	8003a3c <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b05      	cmp	r3, #5
 8005e30:	d928      	bls.n	8005e84 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2220      	movs	r2, #32
 8005e36:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e246      	b.n	80062d2 <HAL_DMA_Init+0x646>
 8005e44:	40020010 	.word	0x40020010
 8005e48:	40020028 	.word	0x40020028
 8005e4c:	40020040 	.word	0x40020040
 8005e50:	40020058 	.word	0x40020058
 8005e54:	40020070 	.word	0x40020070
 8005e58:	40020088 	.word	0x40020088
 8005e5c:	400200a0 	.word	0x400200a0
 8005e60:	400200b8 	.word	0x400200b8
 8005e64:	40020410 	.word	0x40020410
 8005e68:	40020428 	.word	0x40020428
 8005e6c:	40020440 	.word	0x40020440
 8005e70:	40020458 	.word	0x40020458
 8005e74:	40020470 	.word	0x40020470
 8005e78:	40020488 	.word	0x40020488
 8005e7c:	400204a0 	.word	0x400204a0
 8005e80:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1c8      	bne.n	8005e24 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4b83      	ldr	r3, [pc, #524]	; (80060ac <HAL_DMA_Init+0x420>)
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005eaa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005eb6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ec2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d107      	bne.n	8005ee8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005ee8:	4b71      	ldr	r3, [pc, #452]	; (80060b0 <HAL_DMA_Init+0x424>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	4b71      	ldr	r3, [pc, #452]	; (80060b4 <HAL_DMA_Init+0x428>)
 8005eee:	4013      	ands	r3, r2
 8005ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ef4:	d328      	bcc.n	8005f48 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b28      	cmp	r3, #40	; 0x28
 8005efc:	d903      	bls.n	8005f06 <HAL_DMA_Init+0x27a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b2e      	cmp	r3, #46	; 0x2e
 8005f04:	d917      	bls.n	8005f36 <HAL_DMA_Init+0x2aa>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b3e      	cmp	r3, #62	; 0x3e
 8005f0c:	d903      	bls.n	8005f16 <HAL_DMA_Init+0x28a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b42      	cmp	r3, #66	; 0x42
 8005f14:	d90f      	bls.n	8005f36 <HAL_DMA_Init+0x2aa>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b46      	cmp	r3, #70	; 0x46
 8005f1c:	d903      	bls.n	8005f26 <HAL_DMA_Init+0x29a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b48      	cmp	r3, #72	; 0x48
 8005f24:	d907      	bls.n	8005f36 <HAL_DMA_Init+0x2aa>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2b4e      	cmp	r3, #78	; 0x4e
 8005f2c:	d905      	bls.n	8005f3a <HAL_DMA_Init+0x2ae>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2b52      	cmp	r3, #82	; 0x52
 8005f34:	d801      	bhi.n	8005f3a <HAL_DMA_Init+0x2ae>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <HAL_DMA_Init+0x2b0>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f46:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f023 0307 	bic.w	r3, r3, #7
 8005f5e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d117      	bne.n	8005fa2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00e      	beq.n	8005fa2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f002 fb33 	bl	80085f0 <DMA_CheckFifoParam>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d008      	beq.n	8005fa2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2240      	movs	r2, #64	; 0x40
 8005f94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e197      	b.n	80062d2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f002 fa6e 	bl	800848c <DMA_CalcBaseAndBitshift>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	223f      	movs	r2, #63	; 0x3f
 8005fbe:	409a      	lsls	r2, r3
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	609a      	str	r2, [r3, #8]
 8005fc4:	e0cd      	b.n	8006162 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a3b      	ldr	r2, [pc, #236]	; (80060b8 <HAL_DMA_Init+0x42c>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d022      	beq.n	8006016 <HAL_DMA_Init+0x38a>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a39      	ldr	r2, [pc, #228]	; (80060bc <HAL_DMA_Init+0x430>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d01d      	beq.n	8006016 <HAL_DMA_Init+0x38a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a38      	ldr	r2, [pc, #224]	; (80060c0 <HAL_DMA_Init+0x434>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d018      	beq.n	8006016 <HAL_DMA_Init+0x38a>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a36      	ldr	r2, [pc, #216]	; (80060c4 <HAL_DMA_Init+0x438>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d013      	beq.n	8006016 <HAL_DMA_Init+0x38a>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a35      	ldr	r2, [pc, #212]	; (80060c8 <HAL_DMA_Init+0x43c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d00e      	beq.n	8006016 <HAL_DMA_Init+0x38a>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a33      	ldr	r2, [pc, #204]	; (80060cc <HAL_DMA_Init+0x440>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d009      	beq.n	8006016 <HAL_DMA_Init+0x38a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a32      	ldr	r2, [pc, #200]	; (80060d0 <HAL_DMA_Init+0x444>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d004      	beq.n	8006016 <HAL_DMA_Init+0x38a>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a30      	ldr	r2, [pc, #192]	; (80060d4 <HAL_DMA_Init+0x448>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d101      	bne.n	800601a <HAL_DMA_Init+0x38e>
 8006016:	2301      	movs	r3, #1
 8006018:	e000      	b.n	800601c <HAL_DMA_Init+0x390>
 800601a:	2300      	movs	r3, #0
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 8097 	beq.w	8006150 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a24      	ldr	r2, [pc, #144]	; (80060b8 <HAL_DMA_Init+0x42c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d021      	beq.n	8006070 <HAL_DMA_Init+0x3e4>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a22      	ldr	r2, [pc, #136]	; (80060bc <HAL_DMA_Init+0x430>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d01c      	beq.n	8006070 <HAL_DMA_Init+0x3e4>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a21      	ldr	r2, [pc, #132]	; (80060c0 <HAL_DMA_Init+0x434>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d017      	beq.n	8006070 <HAL_DMA_Init+0x3e4>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1f      	ldr	r2, [pc, #124]	; (80060c4 <HAL_DMA_Init+0x438>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d012      	beq.n	8006070 <HAL_DMA_Init+0x3e4>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a1e      	ldr	r2, [pc, #120]	; (80060c8 <HAL_DMA_Init+0x43c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00d      	beq.n	8006070 <HAL_DMA_Init+0x3e4>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a1c      	ldr	r2, [pc, #112]	; (80060cc <HAL_DMA_Init+0x440>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d008      	beq.n	8006070 <HAL_DMA_Init+0x3e4>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a1b      	ldr	r2, [pc, #108]	; (80060d0 <HAL_DMA_Init+0x444>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d003      	beq.n	8006070 <HAL_DMA_Init+0x3e4>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a19      	ldr	r2, [pc, #100]	; (80060d4 <HAL_DMA_Init+0x448>)
 800606e:	4293      	cmp	r3, r2
 8006070:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <HAL_DMA_Init+0x44c>)
 800608e:	4013      	ands	r3, r2
 8006090:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	2b40      	cmp	r3, #64	; 0x40
 8006098:	d020      	beq.n	80060dc <HAL_DMA_Init+0x450>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2b80      	cmp	r3, #128	; 0x80
 80060a0:	d102      	bne.n	80060a8 <HAL_DMA_Init+0x41c>
 80060a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060a6:	e01a      	b.n	80060de <HAL_DMA_Init+0x452>
 80060a8:	2300      	movs	r3, #0
 80060aa:	e018      	b.n	80060de <HAL_DMA_Init+0x452>
 80060ac:	fe10803f 	.word	0xfe10803f
 80060b0:	5c001000 	.word	0x5c001000
 80060b4:	ffff0000 	.word	0xffff0000
 80060b8:	58025408 	.word	0x58025408
 80060bc:	5802541c 	.word	0x5802541c
 80060c0:	58025430 	.word	0x58025430
 80060c4:	58025444 	.word	0x58025444
 80060c8:	58025458 	.word	0x58025458
 80060cc:	5802546c 	.word	0x5802546c
 80060d0:	58025480 	.word	0x58025480
 80060d4:	58025494 	.word	0x58025494
 80060d8:	fffe000f 	.word	0xfffe000f
 80060dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	68d2      	ldr	r2, [r2, #12]
 80060e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80060ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80060f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80060fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006104:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800610c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	4b6e      	ldr	r3, [pc, #440]	; (80062dc <HAL_DMA_Init+0x650>)
 8006124:	4413      	add	r3, r2
 8006126:	4a6e      	ldr	r2, [pc, #440]	; (80062e0 <HAL_DMA_Init+0x654>)
 8006128:	fba2 2303 	umull	r2, r3, r2, r3
 800612c:	091b      	lsrs	r3, r3, #4
 800612e:	009a      	lsls	r2, r3, #2
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f002 f9a9 	bl	800848c <DMA_CalcBaseAndBitshift>
 800613a:	4603      	mov	r3, r0
 800613c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	2201      	movs	r2, #1
 8006148:	409a      	lsls	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	605a      	str	r2, [r3, #4]
 800614e:	e008      	b.n	8006162 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2240      	movs	r2, #64	; 0x40
 8006154:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2203      	movs	r2, #3
 800615a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e0b7      	b.n	80062d2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a5f      	ldr	r2, [pc, #380]	; (80062e4 <HAL_DMA_Init+0x658>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d072      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a5d      	ldr	r2, [pc, #372]	; (80062e8 <HAL_DMA_Init+0x65c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d06d      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a5c      	ldr	r2, [pc, #368]	; (80062ec <HAL_DMA_Init+0x660>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d068      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a5a      	ldr	r2, [pc, #360]	; (80062f0 <HAL_DMA_Init+0x664>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d063      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a59      	ldr	r2, [pc, #356]	; (80062f4 <HAL_DMA_Init+0x668>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d05e      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a57      	ldr	r2, [pc, #348]	; (80062f8 <HAL_DMA_Init+0x66c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d059      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a56      	ldr	r2, [pc, #344]	; (80062fc <HAL_DMA_Init+0x670>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d054      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a54      	ldr	r2, [pc, #336]	; (8006300 <HAL_DMA_Init+0x674>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d04f      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a53      	ldr	r2, [pc, #332]	; (8006304 <HAL_DMA_Init+0x678>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d04a      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a51      	ldr	r2, [pc, #324]	; (8006308 <HAL_DMA_Init+0x67c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d045      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a50      	ldr	r2, [pc, #320]	; (800630c <HAL_DMA_Init+0x680>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d040      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a4e      	ldr	r2, [pc, #312]	; (8006310 <HAL_DMA_Init+0x684>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d03b      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a4d      	ldr	r2, [pc, #308]	; (8006314 <HAL_DMA_Init+0x688>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d036      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a4b      	ldr	r2, [pc, #300]	; (8006318 <HAL_DMA_Init+0x68c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d031      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a4a      	ldr	r2, [pc, #296]	; (800631c <HAL_DMA_Init+0x690>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d02c      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a48      	ldr	r2, [pc, #288]	; (8006320 <HAL_DMA_Init+0x694>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d027      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a47      	ldr	r2, [pc, #284]	; (8006324 <HAL_DMA_Init+0x698>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d022      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a45      	ldr	r2, [pc, #276]	; (8006328 <HAL_DMA_Init+0x69c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d01d      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a44      	ldr	r2, [pc, #272]	; (800632c <HAL_DMA_Init+0x6a0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d018      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a42      	ldr	r2, [pc, #264]	; (8006330 <HAL_DMA_Init+0x6a4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d013      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a41      	ldr	r2, [pc, #260]	; (8006334 <HAL_DMA_Init+0x6a8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d00e      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a3f      	ldr	r2, [pc, #252]	; (8006338 <HAL_DMA_Init+0x6ac>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d009      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a3e      	ldr	r2, [pc, #248]	; (800633c <HAL_DMA_Init+0x6b0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d004      	beq.n	8006252 <HAL_DMA_Init+0x5c6>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a3c      	ldr	r2, [pc, #240]	; (8006340 <HAL_DMA_Init+0x6b4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d101      	bne.n	8006256 <HAL_DMA_Init+0x5ca>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <HAL_DMA_Init+0x5cc>
 8006256:	2300      	movs	r3, #0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d032      	beq.n	80062c2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f002 fa43 	bl	80086e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	2b80      	cmp	r3, #128	; 0x80
 8006268:	d102      	bne.n	8006270 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006284:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d010      	beq.n	80062b0 <HAL_DMA_Init+0x624>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b08      	cmp	r3, #8
 8006294:	d80c      	bhi.n	80062b0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f002 fac0 	bl	800881c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062ac:	605a      	str	r2, [r3, #4]
 80062ae:	e008      	b.n	80062c2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	a7fdabf8 	.word	0xa7fdabf8
 80062e0:	cccccccd 	.word	0xcccccccd
 80062e4:	40020010 	.word	0x40020010
 80062e8:	40020028 	.word	0x40020028
 80062ec:	40020040 	.word	0x40020040
 80062f0:	40020058 	.word	0x40020058
 80062f4:	40020070 	.word	0x40020070
 80062f8:	40020088 	.word	0x40020088
 80062fc:	400200a0 	.word	0x400200a0
 8006300:	400200b8 	.word	0x400200b8
 8006304:	40020410 	.word	0x40020410
 8006308:	40020428 	.word	0x40020428
 800630c:	40020440 	.word	0x40020440
 8006310:	40020458 	.word	0x40020458
 8006314:	40020470 	.word	0x40020470
 8006318:	40020488 	.word	0x40020488
 800631c:	400204a0 	.word	0x400204a0
 8006320:	400204b8 	.word	0x400204b8
 8006324:	58025408 	.word	0x58025408
 8006328:	5802541c 	.word	0x5802541c
 800632c:	58025430 	.word	0x58025430
 8006330:	58025444 	.word	0x58025444
 8006334:	58025458 	.word	0x58025458
 8006338:	5802546c 	.word	0x5802546c
 800633c:	58025480 	.word	0x58025480
 8006340:	58025494 	.word	0x58025494

08006344 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
 8006350:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e226      	b.n	80067ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <HAL_DMA_Start_IT+0x2a>
 800636a:	2302      	movs	r3, #2
 800636c:	e21f      	b.n	80067ae <HAL_DMA_Start_IT+0x46a>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b01      	cmp	r3, #1
 8006380:	f040 820a 	bne.w	8006798 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a68      	ldr	r2, [pc, #416]	; (8006538 <HAL_DMA_Start_IT+0x1f4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d04a      	beq.n	8006432 <HAL_DMA_Start_IT+0xee>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a66      	ldr	r2, [pc, #408]	; (800653c <HAL_DMA_Start_IT+0x1f8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d045      	beq.n	8006432 <HAL_DMA_Start_IT+0xee>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a65      	ldr	r2, [pc, #404]	; (8006540 <HAL_DMA_Start_IT+0x1fc>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d040      	beq.n	8006432 <HAL_DMA_Start_IT+0xee>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a63      	ldr	r2, [pc, #396]	; (8006544 <HAL_DMA_Start_IT+0x200>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d03b      	beq.n	8006432 <HAL_DMA_Start_IT+0xee>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a62      	ldr	r2, [pc, #392]	; (8006548 <HAL_DMA_Start_IT+0x204>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d036      	beq.n	8006432 <HAL_DMA_Start_IT+0xee>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a60      	ldr	r2, [pc, #384]	; (800654c <HAL_DMA_Start_IT+0x208>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d031      	beq.n	8006432 <HAL_DMA_Start_IT+0xee>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a5f      	ldr	r2, [pc, #380]	; (8006550 <HAL_DMA_Start_IT+0x20c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d02c      	beq.n	8006432 <HAL_DMA_Start_IT+0xee>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a5d      	ldr	r2, [pc, #372]	; (8006554 <HAL_DMA_Start_IT+0x210>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d027      	beq.n	8006432 <HAL_DMA_Start_IT+0xee>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a5c      	ldr	r2, [pc, #368]	; (8006558 <HAL_DMA_Start_IT+0x214>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d022      	beq.n	8006432 <HAL_DMA_Start_IT+0xee>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a5a      	ldr	r2, [pc, #360]	; (800655c <HAL_DMA_Start_IT+0x218>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d01d      	beq.n	8006432 <HAL_DMA_Start_IT+0xee>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a59      	ldr	r2, [pc, #356]	; (8006560 <HAL_DMA_Start_IT+0x21c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d018      	beq.n	8006432 <HAL_DMA_Start_IT+0xee>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a57      	ldr	r2, [pc, #348]	; (8006564 <HAL_DMA_Start_IT+0x220>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d013      	beq.n	8006432 <HAL_DMA_Start_IT+0xee>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a56      	ldr	r2, [pc, #344]	; (8006568 <HAL_DMA_Start_IT+0x224>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d00e      	beq.n	8006432 <HAL_DMA_Start_IT+0xee>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a54      	ldr	r2, [pc, #336]	; (800656c <HAL_DMA_Start_IT+0x228>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d009      	beq.n	8006432 <HAL_DMA_Start_IT+0xee>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a53      	ldr	r2, [pc, #332]	; (8006570 <HAL_DMA_Start_IT+0x22c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d004      	beq.n	8006432 <HAL_DMA_Start_IT+0xee>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a51      	ldr	r2, [pc, #324]	; (8006574 <HAL_DMA_Start_IT+0x230>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d108      	bne.n	8006444 <HAL_DMA_Start_IT+0x100>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0201 	bic.w	r2, r2, #1
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	e007      	b.n	8006454 <HAL_DMA_Start_IT+0x110>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0201 	bic.w	r2, r2, #1
 8006452:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f001 fe6a 	bl	8008134 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a34      	ldr	r2, [pc, #208]	; (8006538 <HAL_DMA_Start_IT+0x1f4>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d04a      	beq.n	8006500 <HAL_DMA_Start_IT+0x1bc>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a33      	ldr	r2, [pc, #204]	; (800653c <HAL_DMA_Start_IT+0x1f8>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d045      	beq.n	8006500 <HAL_DMA_Start_IT+0x1bc>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a31      	ldr	r2, [pc, #196]	; (8006540 <HAL_DMA_Start_IT+0x1fc>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d040      	beq.n	8006500 <HAL_DMA_Start_IT+0x1bc>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a30      	ldr	r2, [pc, #192]	; (8006544 <HAL_DMA_Start_IT+0x200>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d03b      	beq.n	8006500 <HAL_DMA_Start_IT+0x1bc>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a2e      	ldr	r2, [pc, #184]	; (8006548 <HAL_DMA_Start_IT+0x204>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d036      	beq.n	8006500 <HAL_DMA_Start_IT+0x1bc>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a2d      	ldr	r2, [pc, #180]	; (800654c <HAL_DMA_Start_IT+0x208>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d031      	beq.n	8006500 <HAL_DMA_Start_IT+0x1bc>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a2b      	ldr	r2, [pc, #172]	; (8006550 <HAL_DMA_Start_IT+0x20c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d02c      	beq.n	8006500 <HAL_DMA_Start_IT+0x1bc>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a2a      	ldr	r2, [pc, #168]	; (8006554 <HAL_DMA_Start_IT+0x210>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d027      	beq.n	8006500 <HAL_DMA_Start_IT+0x1bc>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a28      	ldr	r2, [pc, #160]	; (8006558 <HAL_DMA_Start_IT+0x214>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d022      	beq.n	8006500 <HAL_DMA_Start_IT+0x1bc>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a27      	ldr	r2, [pc, #156]	; (800655c <HAL_DMA_Start_IT+0x218>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d01d      	beq.n	8006500 <HAL_DMA_Start_IT+0x1bc>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a25      	ldr	r2, [pc, #148]	; (8006560 <HAL_DMA_Start_IT+0x21c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d018      	beq.n	8006500 <HAL_DMA_Start_IT+0x1bc>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a24      	ldr	r2, [pc, #144]	; (8006564 <HAL_DMA_Start_IT+0x220>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d013      	beq.n	8006500 <HAL_DMA_Start_IT+0x1bc>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a22      	ldr	r2, [pc, #136]	; (8006568 <HAL_DMA_Start_IT+0x224>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00e      	beq.n	8006500 <HAL_DMA_Start_IT+0x1bc>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a21      	ldr	r2, [pc, #132]	; (800656c <HAL_DMA_Start_IT+0x228>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d009      	beq.n	8006500 <HAL_DMA_Start_IT+0x1bc>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a1f      	ldr	r2, [pc, #124]	; (8006570 <HAL_DMA_Start_IT+0x22c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d004      	beq.n	8006500 <HAL_DMA_Start_IT+0x1bc>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a1e      	ldr	r2, [pc, #120]	; (8006574 <HAL_DMA_Start_IT+0x230>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d101      	bne.n	8006504 <HAL_DMA_Start_IT+0x1c0>
 8006500:	2301      	movs	r3, #1
 8006502:	e000      	b.n	8006506 <HAL_DMA_Start_IT+0x1c2>
 8006504:	2300      	movs	r3, #0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d036      	beq.n	8006578 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f023 021e 	bic.w	r2, r3, #30
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0216 	orr.w	r2, r2, #22
 800651c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	2b00      	cmp	r3, #0
 8006524:	d03e      	beq.n	80065a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f042 0208 	orr.w	r2, r2, #8
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	e035      	b.n	80065a4 <HAL_DMA_Start_IT+0x260>
 8006538:	40020010 	.word	0x40020010
 800653c:	40020028 	.word	0x40020028
 8006540:	40020040 	.word	0x40020040
 8006544:	40020058 	.word	0x40020058
 8006548:	40020070 	.word	0x40020070
 800654c:	40020088 	.word	0x40020088
 8006550:	400200a0 	.word	0x400200a0
 8006554:	400200b8 	.word	0x400200b8
 8006558:	40020410 	.word	0x40020410
 800655c:	40020428 	.word	0x40020428
 8006560:	40020440 	.word	0x40020440
 8006564:	40020458 	.word	0x40020458
 8006568:	40020470 	.word	0x40020470
 800656c:	40020488 	.word	0x40020488
 8006570:	400204a0 	.word	0x400204a0
 8006574:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f023 020e 	bic.w	r2, r3, #14
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 020a 	orr.w	r2, r2, #10
 800658a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d007      	beq.n	80065a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f042 0204 	orr.w	r2, r2, #4
 80065a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a83      	ldr	r2, [pc, #524]	; (80067b8 <HAL_DMA_Start_IT+0x474>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d072      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a82      	ldr	r2, [pc, #520]	; (80067bc <HAL_DMA_Start_IT+0x478>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d06d      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a80      	ldr	r2, [pc, #512]	; (80067c0 <HAL_DMA_Start_IT+0x47c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d068      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a7f      	ldr	r2, [pc, #508]	; (80067c4 <HAL_DMA_Start_IT+0x480>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d063      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a7d      	ldr	r2, [pc, #500]	; (80067c8 <HAL_DMA_Start_IT+0x484>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d05e      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a7c      	ldr	r2, [pc, #496]	; (80067cc <HAL_DMA_Start_IT+0x488>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d059      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a7a      	ldr	r2, [pc, #488]	; (80067d0 <HAL_DMA_Start_IT+0x48c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d054      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a79      	ldr	r2, [pc, #484]	; (80067d4 <HAL_DMA_Start_IT+0x490>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d04f      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a77      	ldr	r2, [pc, #476]	; (80067d8 <HAL_DMA_Start_IT+0x494>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d04a      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a76      	ldr	r2, [pc, #472]	; (80067dc <HAL_DMA_Start_IT+0x498>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d045      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a74      	ldr	r2, [pc, #464]	; (80067e0 <HAL_DMA_Start_IT+0x49c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d040      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a73      	ldr	r2, [pc, #460]	; (80067e4 <HAL_DMA_Start_IT+0x4a0>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d03b      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a71      	ldr	r2, [pc, #452]	; (80067e8 <HAL_DMA_Start_IT+0x4a4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d036      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a70      	ldr	r2, [pc, #448]	; (80067ec <HAL_DMA_Start_IT+0x4a8>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d031      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a6e      	ldr	r2, [pc, #440]	; (80067f0 <HAL_DMA_Start_IT+0x4ac>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d02c      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a6d      	ldr	r2, [pc, #436]	; (80067f4 <HAL_DMA_Start_IT+0x4b0>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d027      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a6b      	ldr	r2, [pc, #428]	; (80067f8 <HAL_DMA_Start_IT+0x4b4>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d022      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a6a      	ldr	r2, [pc, #424]	; (80067fc <HAL_DMA_Start_IT+0x4b8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d01d      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a68      	ldr	r2, [pc, #416]	; (8006800 <HAL_DMA_Start_IT+0x4bc>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d018      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a67      	ldr	r2, [pc, #412]	; (8006804 <HAL_DMA_Start_IT+0x4c0>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d013      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a65      	ldr	r2, [pc, #404]	; (8006808 <HAL_DMA_Start_IT+0x4c4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00e      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a64      	ldr	r2, [pc, #400]	; (800680c <HAL_DMA_Start_IT+0x4c8>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d009      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a62      	ldr	r2, [pc, #392]	; (8006810 <HAL_DMA_Start_IT+0x4cc>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d004      	beq.n	8006694 <HAL_DMA_Start_IT+0x350>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a61      	ldr	r2, [pc, #388]	; (8006814 <HAL_DMA_Start_IT+0x4d0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d101      	bne.n	8006698 <HAL_DMA_Start_IT+0x354>
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <HAL_DMA_Start_IT+0x356>
 8006698:	2300      	movs	r3, #0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d01a      	beq.n	80066d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d007      	beq.n	80066bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d007      	beq.n	80066d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a37      	ldr	r2, [pc, #220]	; (80067b8 <HAL_DMA_Start_IT+0x474>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d04a      	beq.n	8006774 <HAL_DMA_Start_IT+0x430>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a36      	ldr	r2, [pc, #216]	; (80067bc <HAL_DMA_Start_IT+0x478>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d045      	beq.n	8006774 <HAL_DMA_Start_IT+0x430>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a34      	ldr	r2, [pc, #208]	; (80067c0 <HAL_DMA_Start_IT+0x47c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d040      	beq.n	8006774 <HAL_DMA_Start_IT+0x430>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a33      	ldr	r2, [pc, #204]	; (80067c4 <HAL_DMA_Start_IT+0x480>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d03b      	beq.n	8006774 <HAL_DMA_Start_IT+0x430>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a31      	ldr	r2, [pc, #196]	; (80067c8 <HAL_DMA_Start_IT+0x484>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d036      	beq.n	8006774 <HAL_DMA_Start_IT+0x430>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a30      	ldr	r2, [pc, #192]	; (80067cc <HAL_DMA_Start_IT+0x488>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d031      	beq.n	8006774 <HAL_DMA_Start_IT+0x430>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a2e      	ldr	r2, [pc, #184]	; (80067d0 <HAL_DMA_Start_IT+0x48c>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d02c      	beq.n	8006774 <HAL_DMA_Start_IT+0x430>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a2d      	ldr	r2, [pc, #180]	; (80067d4 <HAL_DMA_Start_IT+0x490>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d027      	beq.n	8006774 <HAL_DMA_Start_IT+0x430>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a2b      	ldr	r2, [pc, #172]	; (80067d8 <HAL_DMA_Start_IT+0x494>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d022      	beq.n	8006774 <HAL_DMA_Start_IT+0x430>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a2a      	ldr	r2, [pc, #168]	; (80067dc <HAL_DMA_Start_IT+0x498>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d01d      	beq.n	8006774 <HAL_DMA_Start_IT+0x430>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a28      	ldr	r2, [pc, #160]	; (80067e0 <HAL_DMA_Start_IT+0x49c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d018      	beq.n	8006774 <HAL_DMA_Start_IT+0x430>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a27      	ldr	r2, [pc, #156]	; (80067e4 <HAL_DMA_Start_IT+0x4a0>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d013      	beq.n	8006774 <HAL_DMA_Start_IT+0x430>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a25      	ldr	r2, [pc, #148]	; (80067e8 <HAL_DMA_Start_IT+0x4a4>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00e      	beq.n	8006774 <HAL_DMA_Start_IT+0x430>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a24      	ldr	r2, [pc, #144]	; (80067ec <HAL_DMA_Start_IT+0x4a8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d009      	beq.n	8006774 <HAL_DMA_Start_IT+0x430>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a22      	ldr	r2, [pc, #136]	; (80067f0 <HAL_DMA_Start_IT+0x4ac>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d004      	beq.n	8006774 <HAL_DMA_Start_IT+0x430>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a21      	ldr	r2, [pc, #132]	; (80067f4 <HAL_DMA_Start_IT+0x4b0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d108      	bne.n	8006786 <HAL_DMA_Start_IT+0x442>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0201 	orr.w	r2, r2, #1
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	e012      	b.n	80067ac <HAL_DMA_Start_IT+0x468>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f042 0201 	orr.w	r2, r2, #1
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	e009      	b.n	80067ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800679e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	40020010 	.word	0x40020010
 80067bc:	40020028 	.word	0x40020028
 80067c0:	40020040 	.word	0x40020040
 80067c4:	40020058 	.word	0x40020058
 80067c8:	40020070 	.word	0x40020070
 80067cc:	40020088 	.word	0x40020088
 80067d0:	400200a0 	.word	0x400200a0
 80067d4:	400200b8 	.word	0x400200b8
 80067d8:	40020410 	.word	0x40020410
 80067dc:	40020428 	.word	0x40020428
 80067e0:	40020440 	.word	0x40020440
 80067e4:	40020458 	.word	0x40020458
 80067e8:	40020470 	.word	0x40020470
 80067ec:	40020488 	.word	0x40020488
 80067f0:	400204a0 	.word	0x400204a0
 80067f4:	400204b8 	.word	0x400204b8
 80067f8:	58025408 	.word	0x58025408
 80067fc:	5802541c 	.word	0x5802541c
 8006800:	58025430 	.word	0x58025430
 8006804:	58025444 	.word	0x58025444
 8006808:	58025458 	.word	0x58025458
 800680c:	5802546c 	.word	0x5802546c
 8006810:	58025480 	.word	0x58025480
 8006814:	58025494 	.word	0x58025494

08006818 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006820:	f7fd f90c 	bl	8003a3c <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e2dc      	b.n	8006dea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d008      	beq.n	800684e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2280      	movs	r2, #128	; 0x80
 8006840:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e2cd      	b.n	8006dea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a76      	ldr	r2, [pc, #472]	; (8006a2c <HAL_DMA_Abort+0x214>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d04a      	beq.n	80068ee <HAL_DMA_Abort+0xd6>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a74      	ldr	r2, [pc, #464]	; (8006a30 <HAL_DMA_Abort+0x218>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d045      	beq.n	80068ee <HAL_DMA_Abort+0xd6>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a73      	ldr	r2, [pc, #460]	; (8006a34 <HAL_DMA_Abort+0x21c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d040      	beq.n	80068ee <HAL_DMA_Abort+0xd6>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a71      	ldr	r2, [pc, #452]	; (8006a38 <HAL_DMA_Abort+0x220>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d03b      	beq.n	80068ee <HAL_DMA_Abort+0xd6>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a70      	ldr	r2, [pc, #448]	; (8006a3c <HAL_DMA_Abort+0x224>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d036      	beq.n	80068ee <HAL_DMA_Abort+0xd6>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a6e      	ldr	r2, [pc, #440]	; (8006a40 <HAL_DMA_Abort+0x228>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d031      	beq.n	80068ee <HAL_DMA_Abort+0xd6>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a6d      	ldr	r2, [pc, #436]	; (8006a44 <HAL_DMA_Abort+0x22c>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d02c      	beq.n	80068ee <HAL_DMA_Abort+0xd6>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a6b      	ldr	r2, [pc, #428]	; (8006a48 <HAL_DMA_Abort+0x230>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d027      	beq.n	80068ee <HAL_DMA_Abort+0xd6>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a6a      	ldr	r2, [pc, #424]	; (8006a4c <HAL_DMA_Abort+0x234>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d022      	beq.n	80068ee <HAL_DMA_Abort+0xd6>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a68      	ldr	r2, [pc, #416]	; (8006a50 <HAL_DMA_Abort+0x238>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d01d      	beq.n	80068ee <HAL_DMA_Abort+0xd6>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a67      	ldr	r2, [pc, #412]	; (8006a54 <HAL_DMA_Abort+0x23c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d018      	beq.n	80068ee <HAL_DMA_Abort+0xd6>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a65      	ldr	r2, [pc, #404]	; (8006a58 <HAL_DMA_Abort+0x240>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <HAL_DMA_Abort+0xd6>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a64      	ldr	r2, [pc, #400]	; (8006a5c <HAL_DMA_Abort+0x244>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_DMA_Abort+0xd6>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a62      	ldr	r2, [pc, #392]	; (8006a60 <HAL_DMA_Abort+0x248>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_DMA_Abort+0xd6>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a61      	ldr	r2, [pc, #388]	; (8006a64 <HAL_DMA_Abort+0x24c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_DMA_Abort+0xd6>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a5f      	ldr	r2, [pc, #380]	; (8006a68 <HAL_DMA_Abort+0x250>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d101      	bne.n	80068f2 <HAL_DMA_Abort+0xda>
 80068ee:	2301      	movs	r3, #1
 80068f0:	e000      	b.n	80068f4 <HAL_DMA_Abort+0xdc>
 80068f2:	2300      	movs	r3, #0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d013      	beq.n	8006920 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 021e 	bic.w	r2, r2, #30
 8006906:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	695a      	ldr	r2, [r3, #20]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006916:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	e00a      	b.n	8006936 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 020e 	bic.w	r2, r2, #14
 800692e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a3c      	ldr	r2, [pc, #240]	; (8006a2c <HAL_DMA_Abort+0x214>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d072      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a3a      	ldr	r2, [pc, #232]	; (8006a30 <HAL_DMA_Abort+0x218>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d06d      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a39      	ldr	r2, [pc, #228]	; (8006a34 <HAL_DMA_Abort+0x21c>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d068      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a37      	ldr	r2, [pc, #220]	; (8006a38 <HAL_DMA_Abort+0x220>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d063      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a36      	ldr	r2, [pc, #216]	; (8006a3c <HAL_DMA_Abort+0x224>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d05e      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a34      	ldr	r2, [pc, #208]	; (8006a40 <HAL_DMA_Abort+0x228>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d059      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a33      	ldr	r2, [pc, #204]	; (8006a44 <HAL_DMA_Abort+0x22c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d054      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a31      	ldr	r2, [pc, #196]	; (8006a48 <HAL_DMA_Abort+0x230>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d04f      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a30      	ldr	r2, [pc, #192]	; (8006a4c <HAL_DMA_Abort+0x234>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d04a      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a2e      	ldr	r2, [pc, #184]	; (8006a50 <HAL_DMA_Abort+0x238>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d045      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a2d      	ldr	r2, [pc, #180]	; (8006a54 <HAL_DMA_Abort+0x23c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d040      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a2b      	ldr	r2, [pc, #172]	; (8006a58 <HAL_DMA_Abort+0x240>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d03b      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a2a      	ldr	r2, [pc, #168]	; (8006a5c <HAL_DMA_Abort+0x244>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d036      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a28      	ldr	r2, [pc, #160]	; (8006a60 <HAL_DMA_Abort+0x248>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d031      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a27      	ldr	r2, [pc, #156]	; (8006a64 <HAL_DMA_Abort+0x24c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d02c      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a25      	ldr	r2, [pc, #148]	; (8006a68 <HAL_DMA_Abort+0x250>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d027      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a24      	ldr	r2, [pc, #144]	; (8006a6c <HAL_DMA_Abort+0x254>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d022      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a22      	ldr	r2, [pc, #136]	; (8006a70 <HAL_DMA_Abort+0x258>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d01d      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a21      	ldr	r2, [pc, #132]	; (8006a74 <HAL_DMA_Abort+0x25c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d018      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a1f      	ldr	r2, [pc, #124]	; (8006a78 <HAL_DMA_Abort+0x260>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d013      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a1e      	ldr	r2, [pc, #120]	; (8006a7c <HAL_DMA_Abort+0x264>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d00e      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a1c      	ldr	r2, [pc, #112]	; (8006a80 <HAL_DMA_Abort+0x268>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d009      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a1b      	ldr	r2, [pc, #108]	; (8006a84 <HAL_DMA_Abort+0x26c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d004      	beq.n	8006a26 <HAL_DMA_Abort+0x20e>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a19      	ldr	r2, [pc, #100]	; (8006a88 <HAL_DMA_Abort+0x270>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d132      	bne.n	8006a8c <HAL_DMA_Abort+0x274>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e031      	b.n	8006a8e <HAL_DMA_Abort+0x276>
 8006a2a:	bf00      	nop
 8006a2c:	40020010 	.word	0x40020010
 8006a30:	40020028 	.word	0x40020028
 8006a34:	40020040 	.word	0x40020040
 8006a38:	40020058 	.word	0x40020058
 8006a3c:	40020070 	.word	0x40020070
 8006a40:	40020088 	.word	0x40020088
 8006a44:	400200a0 	.word	0x400200a0
 8006a48:	400200b8 	.word	0x400200b8
 8006a4c:	40020410 	.word	0x40020410
 8006a50:	40020428 	.word	0x40020428
 8006a54:	40020440 	.word	0x40020440
 8006a58:	40020458 	.word	0x40020458
 8006a5c:	40020470 	.word	0x40020470
 8006a60:	40020488 	.word	0x40020488
 8006a64:	400204a0 	.word	0x400204a0
 8006a68:	400204b8 	.word	0x400204b8
 8006a6c:	58025408 	.word	0x58025408
 8006a70:	5802541c 	.word	0x5802541c
 8006a74:	58025430 	.word	0x58025430
 8006a78:	58025444 	.word	0x58025444
 8006a7c:	58025458 	.word	0x58025458
 8006a80:	5802546c 	.word	0x5802546c
 8006a84:	58025480 	.word	0x58025480
 8006a88:	58025494 	.word	0x58025494
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d007      	beq.n	8006aa2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006aa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a6d      	ldr	r2, [pc, #436]	; (8006c5c <HAL_DMA_Abort+0x444>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d04a      	beq.n	8006b42 <HAL_DMA_Abort+0x32a>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a6b      	ldr	r2, [pc, #428]	; (8006c60 <HAL_DMA_Abort+0x448>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d045      	beq.n	8006b42 <HAL_DMA_Abort+0x32a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a6a      	ldr	r2, [pc, #424]	; (8006c64 <HAL_DMA_Abort+0x44c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d040      	beq.n	8006b42 <HAL_DMA_Abort+0x32a>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a68      	ldr	r2, [pc, #416]	; (8006c68 <HAL_DMA_Abort+0x450>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d03b      	beq.n	8006b42 <HAL_DMA_Abort+0x32a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a67      	ldr	r2, [pc, #412]	; (8006c6c <HAL_DMA_Abort+0x454>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d036      	beq.n	8006b42 <HAL_DMA_Abort+0x32a>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a65      	ldr	r2, [pc, #404]	; (8006c70 <HAL_DMA_Abort+0x458>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d031      	beq.n	8006b42 <HAL_DMA_Abort+0x32a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a64      	ldr	r2, [pc, #400]	; (8006c74 <HAL_DMA_Abort+0x45c>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d02c      	beq.n	8006b42 <HAL_DMA_Abort+0x32a>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a62      	ldr	r2, [pc, #392]	; (8006c78 <HAL_DMA_Abort+0x460>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d027      	beq.n	8006b42 <HAL_DMA_Abort+0x32a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a61      	ldr	r2, [pc, #388]	; (8006c7c <HAL_DMA_Abort+0x464>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d022      	beq.n	8006b42 <HAL_DMA_Abort+0x32a>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a5f      	ldr	r2, [pc, #380]	; (8006c80 <HAL_DMA_Abort+0x468>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d01d      	beq.n	8006b42 <HAL_DMA_Abort+0x32a>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a5e      	ldr	r2, [pc, #376]	; (8006c84 <HAL_DMA_Abort+0x46c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d018      	beq.n	8006b42 <HAL_DMA_Abort+0x32a>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a5c      	ldr	r2, [pc, #368]	; (8006c88 <HAL_DMA_Abort+0x470>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d013      	beq.n	8006b42 <HAL_DMA_Abort+0x32a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a5b      	ldr	r2, [pc, #364]	; (8006c8c <HAL_DMA_Abort+0x474>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00e      	beq.n	8006b42 <HAL_DMA_Abort+0x32a>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a59      	ldr	r2, [pc, #356]	; (8006c90 <HAL_DMA_Abort+0x478>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d009      	beq.n	8006b42 <HAL_DMA_Abort+0x32a>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a58      	ldr	r2, [pc, #352]	; (8006c94 <HAL_DMA_Abort+0x47c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d004      	beq.n	8006b42 <HAL_DMA_Abort+0x32a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a56      	ldr	r2, [pc, #344]	; (8006c98 <HAL_DMA_Abort+0x480>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d108      	bne.n	8006b54 <HAL_DMA_Abort+0x33c>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0201 	bic.w	r2, r2, #1
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e007      	b.n	8006b64 <HAL_DMA_Abort+0x34c>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0201 	bic.w	r2, r2, #1
 8006b62:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006b64:	e013      	b.n	8006b8e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b66:	f7fc ff69 	bl	8003a3c <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b05      	cmp	r3, #5
 8006b72:	d90c      	bls.n	8006b8e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2203      	movs	r2, #3
 8006b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e12d      	b.n	8006dea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e5      	bne.n	8006b66 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a2f      	ldr	r2, [pc, #188]	; (8006c5c <HAL_DMA_Abort+0x444>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d04a      	beq.n	8006c3a <HAL_DMA_Abort+0x422>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a2d      	ldr	r2, [pc, #180]	; (8006c60 <HAL_DMA_Abort+0x448>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d045      	beq.n	8006c3a <HAL_DMA_Abort+0x422>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a2c      	ldr	r2, [pc, #176]	; (8006c64 <HAL_DMA_Abort+0x44c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d040      	beq.n	8006c3a <HAL_DMA_Abort+0x422>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a2a      	ldr	r2, [pc, #168]	; (8006c68 <HAL_DMA_Abort+0x450>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d03b      	beq.n	8006c3a <HAL_DMA_Abort+0x422>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a29      	ldr	r2, [pc, #164]	; (8006c6c <HAL_DMA_Abort+0x454>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d036      	beq.n	8006c3a <HAL_DMA_Abort+0x422>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a27      	ldr	r2, [pc, #156]	; (8006c70 <HAL_DMA_Abort+0x458>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d031      	beq.n	8006c3a <HAL_DMA_Abort+0x422>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a26      	ldr	r2, [pc, #152]	; (8006c74 <HAL_DMA_Abort+0x45c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d02c      	beq.n	8006c3a <HAL_DMA_Abort+0x422>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a24      	ldr	r2, [pc, #144]	; (8006c78 <HAL_DMA_Abort+0x460>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d027      	beq.n	8006c3a <HAL_DMA_Abort+0x422>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a23      	ldr	r2, [pc, #140]	; (8006c7c <HAL_DMA_Abort+0x464>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d022      	beq.n	8006c3a <HAL_DMA_Abort+0x422>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a21      	ldr	r2, [pc, #132]	; (8006c80 <HAL_DMA_Abort+0x468>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d01d      	beq.n	8006c3a <HAL_DMA_Abort+0x422>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a20      	ldr	r2, [pc, #128]	; (8006c84 <HAL_DMA_Abort+0x46c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d018      	beq.n	8006c3a <HAL_DMA_Abort+0x422>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a1e      	ldr	r2, [pc, #120]	; (8006c88 <HAL_DMA_Abort+0x470>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d013      	beq.n	8006c3a <HAL_DMA_Abort+0x422>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a1d      	ldr	r2, [pc, #116]	; (8006c8c <HAL_DMA_Abort+0x474>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00e      	beq.n	8006c3a <HAL_DMA_Abort+0x422>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a1b      	ldr	r2, [pc, #108]	; (8006c90 <HAL_DMA_Abort+0x478>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d009      	beq.n	8006c3a <HAL_DMA_Abort+0x422>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a1a      	ldr	r2, [pc, #104]	; (8006c94 <HAL_DMA_Abort+0x47c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d004      	beq.n	8006c3a <HAL_DMA_Abort+0x422>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a18      	ldr	r2, [pc, #96]	; (8006c98 <HAL_DMA_Abort+0x480>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d101      	bne.n	8006c3e <HAL_DMA_Abort+0x426>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e000      	b.n	8006c40 <HAL_DMA_Abort+0x428>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d02b      	beq.n	8006c9c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c48:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c4e:	f003 031f 	and.w	r3, r3, #31
 8006c52:	223f      	movs	r2, #63	; 0x3f
 8006c54:	409a      	lsls	r2, r3
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	609a      	str	r2, [r3, #8]
 8006c5a:	e02a      	b.n	8006cb2 <HAL_DMA_Abort+0x49a>
 8006c5c:	40020010 	.word	0x40020010
 8006c60:	40020028 	.word	0x40020028
 8006c64:	40020040 	.word	0x40020040
 8006c68:	40020058 	.word	0x40020058
 8006c6c:	40020070 	.word	0x40020070
 8006c70:	40020088 	.word	0x40020088
 8006c74:	400200a0 	.word	0x400200a0
 8006c78:	400200b8 	.word	0x400200b8
 8006c7c:	40020410 	.word	0x40020410
 8006c80:	40020428 	.word	0x40020428
 8006c84:	40020440 	.word	0x40020440
 8006c88:	40020458 	.word	0x40020458
 8006c8c:	40020470 	.word	0x40020470
 8006c90:	40020488 	.word	0x40020488
 8006c94:	400204a0 	.word	0x400204a0
 8006c98:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca6:	f003 031f 	and.w	r3, r3, #31
 8006caa:	2201      	movs	r2, #1
 8006cac:	409a      	lsls	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a4f      	ldr	r2, [pc, #316]	; (8006df4 <HAL_DMA_Abort+0x5dc>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d072      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a4d      	ldr	r2, [pc, #308]	; (8006df8 <HAL_DMA_Abort+0x5e0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d06d      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a4c      	ldr	r2, [pc, #304]	; (8006dfc <HAL_DMA_Abort+0x5e4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d068      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a4a      	ldr	r2, [pc, #296]	; (8006e00 <HAL_DMA_Abort+0x5e8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d063      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a49      	ldr	r2, [pc, #292]	; (8006e04 <HAL_DMA_Abort+0x5ec>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d05e      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a47      	ldr	r2, [pc, #284]	; (8006e08 <HAL_DMA_Abort+0x5f0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d059      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a46      	ldr	r2, [pc, #280]	; (8006e0c <HAL_DMA_Abort+0x5f4>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d054      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a44      	ldr	r2, [pc, #272]	; (8006e10 <HAL_DMA_Abort+0x5f8>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d04f      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a43      	ldr	r2, [pc, #268]	; (8006e14 <HAL_DMA_Abort+0x5fc>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d04a      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a41      	ldr	r2, [pc, #260]	; (8006e18 <HAL_DMA_Abort+0x600>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d045      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a40      	ldr	r2, [pc, #256]	; (8006e1c <HAL_DMA_Abort+0x604>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d040      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a3e      	ldr	r2, [pc, #248]	; (8006e20 <HAL_DMA_Abort+0x608>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d03b      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a3d      	ldr	r2, [pc, #244]	; (8006e24 <HAL_DMA_Abort+0x60c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d036      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a3b      	ldr	r2, [pc, #236]	; (8006e28 <HAL_DMA_Abort+0x610>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d031      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a3a      	ldr	r2, [pc, #232]	; (8006e2c <HAL_DMA_Abort+0x614>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d02c      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a38      	ldr	r2, [pc, #224]	; (8006e30 <HAL_DMA_Abort+0x618>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d027      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a37      	ldr	r2, [pc, #220]	; (8006e34 <HAL_DMA_Abort+0x61c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d022      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a35      	ldr	r2, [pc, #212]	; (8006e38 <HAL_DMA_Abort+0x620>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d01d      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a34      	ldr	r2, [pc, #208]	; (8006e3c <HAL_DMA_Abort+0x624>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d018      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a32      	ldr	r2, [pc, #200]	; (8006e40 <HAL_DMA_Abort+0x628>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d013      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a31      	ldr	r2, [pc, #196]	; (8006e44 <HAL_DMA_Abort+0x62c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d00e      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a2f      	ldr	r2, [pc, #188]	; (8006e48 <HAL_DMA_Abort+0x630>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d009      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a2e      	ldr	r2, [pc, #184]	; (8006e4c <HAL_DMA_Abort+0x634>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d004      	beq.n	8006da2 <HAL_DMA_Abort+0x58a>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a2c      	ldr	r2, [pc, #176]	; (8006e50 <HAL_DMA_Abort+0x638>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d101      	bne.n	8006da6 <HAL_DMA_Abort+0x58e>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <HAL_DMA_Abort+0x590>
 8006da6:	2300      	movs	r3, #0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d015      	beq.n	8006dd8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006db4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00c      	beq.n	8006dd8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dcc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006dd6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3718      	adds	r7, #24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	40020010 	.word	0x40020010
 8006df8:	40020028 	.word	0x40020028
 8006dfc:	40020040 	.word	0x40020040
 8006e00:	40020058 	.word	0x40020058
 8006e04:	40020070 	.word	0x40020070
 8006e08:	40020088 	.word	0x40020088
 8006e0c:	400200a0 	.word	0x400200a0
 8006e10:	400200b8 	.word	0x400200b8
 8006e14:	40020410 	.word	0x40020410
 8006e18:	40020428 	.word	0x40020428
 8006e1c:	40020440 	.word	0x40020440
 8006e20:	40020458 	.word	0x40020458
 8006e24:	40020470 	.word	0x40020470
 8006e28:	40020488 	.word	0x40020488
 8006e2c:	400204a0 	.word	0x400204a0
 8006e30:	400204b8 	.word	0x400204b8
 8006e34:	58025408 	.word	0x58025408
 8006e38:	5802541c 	.word	0x5802541c
 8006e3c:	58025430 	.word	0x58025430
 8006e40:	58025444 	.word	0x58025444
 8006e44:	58025458 	.word	0x58025458
 8006e48:	5802546c 	.word	0x5802546c
 8006e4c:	58025480 	.word	0x58025480
 8006e50:	58025494 	.word	0x58025494

08006e54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e237      	b.n	80072d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d004      	beq.n	8006e7c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2280      	movs	r2, #128	; 0x80
 8006e76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e22c      	b.n	80072d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a5c      	ldr	r2, [pc, #368]	; (8006ff4 <HAL_DMA_Abort_IT+0x1a0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d04a      	beq.n	8006f1c <HAL_DMA_Abort_IT+0xc8>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a5b      	ldr	r2, [pc, #364]	; (8006ff8 <HAL_DMA_Abort_IT+0x1a4>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d045      	beq.n	8006f1c <HAL_DMA_Abort_IT+0xc8>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a59      	ldr	r2, [pc, #356]	; (8006ffc <HAL_DMA_Abort_IT+0x1a8>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d040      	beq.n	8006f1c <HAL_DMA_Abort_IT+0xc8>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a58      	ldr	r2, [pc, #352]	; (8007000 <HAL_DMA_Abort_IT+0x1ac>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d03b      	beq.n	8006f1c <HAL_DMA_Abort_IT+0xc8>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a56      	ldr	r2, [pc, #344]	; (8007004 <HAL_DMA_Abort_IT+0x1b0>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d036      	beq.n	8006f1c <HAL_DMA_Abort_IT+0xc8>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a55      	ldr	r2, [pc, #340]	; (8007008 <HAL_DMA_Abort_IT+0x1b4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d031      	beq.n	8006f1c <HAL_DMA_Abort_IT+0xc8>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a53      	ldr	r2, [pc, #332]	; (800700c <HAL_DMA_Abort_IT+0x1b8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d02c      	beq.n	8006f1c <HAL_DMA_Abort_IT+0xc8>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a52      	ldr	r2, [pc, #328]	; (8007010 <HAL_DMA_Abort_IT+0x1bc>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d027      	beq.n	8006f1c <HAL_DMA_Abort_IT+0xc8>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a50      	ldr	r2, [pc, #320]	; (8007014 <HAL_DMA_Abort_IT+0x1c0>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d022      	beq.n	8006f1c <HAL_DMA_Abort_IT+0xc8>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a4f      	ldr	r2, [pc, #316]	; (8007018 <HAL_DMA_Abort_IT+0x1c4>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d01d      	beq.n	8006f1c <HAL_DMA_Abort_IT+0xc8>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a4d      	ldr	r2, [pc, #308]	; (800701c <HAL_DMA_Abort_IT+0x1c8>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d018      	beq.n	8006f1c <HAL_DMA_Abort_IT+0xc8>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a4c      	ldr	r2, [pc, #304]	; (8007020 <HAL_DMA_Abort_IT+0x1cc>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d013      	beq.n	8006f1c <HAL_DMA_Abort_IT+0xc8>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a4a      	ldr	r2, [pc, #296]	; (8007024 <HAL_DMA_Abort_IT+0x1d0>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d00e      	beq.n	8006f1c <HAL_DMA_Abort_IT+0xc8>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a49      	ldr	r2, [pc, #292]	; (8007028 <HAL_DMA_Abort_IT+0x1d4>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d009      	beq.n	8006f1c <HAL_DMA_Abort_IT+0xc8>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a47      	ldr	r2, [pc, #284]	; (800702c <HAL_DMA_Abort_IT+0x1d8>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d004      	beq.n	8006f1c <HAL_DMA_Abort_IT+0xc8>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a46      	ldr	r2, [pc, #280]	; (8007030 <HAL_DMA_Abort_IT+0x1dc>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d101      	bne.n	8006f20 <HAL_DMA_Abort_IT+0xcc>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e000      	b.n	8006f22 <HAL_DMA_Abort_IT+0xce>
 8006f20:	2300      	movs	r3, #0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 8086 	beq.w	8007034 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2204      	movs	r2, #4
 8006f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a2f      	ldr	r2, [pc, #188]	; (8006ff4 <HAL_DMA_Abort_IT+0x1a0>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d04a      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0x17c>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a2e      	ldr	r2, [pc, #184]	; (8006ff8 <HAL_DMA_Abort_IT+0x1a4>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d045      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0x17c>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a2c      	ldr	r2, [pc, #176]	; (8006ffc <HAL_DMA_Abort_IT+0x1a8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d040      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0x17c>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a2b      	ldr	r2, [pc, #172]	; (8007000 <HAL_DMA_Abort_IT+0x1ac>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d03b      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0x17c>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a29      	ldr	r2, [pc, #164]	; (8007004 <HAL_DMA_Abort_IT+0x1b0>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d036      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0x17c>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a28      	ldr	r2, [pc, #160]	; (8007008 <HAL_DMA_Abort_IT+0x1b4>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d031      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0x17c>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a26      	ldr	r2, [pc, #152]	; (800700c <HAL_DMA_Abort_IT+0x1b8>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d02c      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0x17c>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a25      	ldr	r2, [pc, #148]	; (8007010 <HAL_DMA_Abort_IT+0x1bc>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d027      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0x17c>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a23      	ldr	r2, [pc, #140]	; (8007014 <HAL_DMA_Abort_IT+0x1c0>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d022      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0x17c>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a22      	ldr	r2, [pc, #136]	; (8007018 <HAL_DMA_Abort_IT+0x1c4>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d01d      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0x17c>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a20      	ldr	r2, [pc, #128]	; (800701c <HAL_DMA_Abort_IT+0x1c8>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d018      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0x17c>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1f      	ldr	r2, [pc, #124]	; (8007020 <HAL_DMA_Abort_IT+0x1cc>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d013      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0x17c>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a1d      	ldr	r2, [pc, #116]	; (8007024 <HAL_DMA_Abort_IT+0x1d0>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00e      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0x17c>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a1c      	ldr	r2, [pc, #112]	; (8007028 <HAL_DMA_Abort_IT+0x1d4>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d009      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0x17c>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1a      	ldr	r2, [pc, #104]	; (800702c <HAL_DMA_Abort_IT+0x1d8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d004      	beq.n	8006fd0 <HAL_DMA_Abort_IT+0x17c>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a19      	ldr	r2, [pc, #100]	; (8007030 <HAL_DMA_Abort_IT+0x1dc>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d108      	bne.n	8006fe2 <HAL_DMA_Abort_IT+0x18e>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0201 	bic.w	r2, r2, #1
 8006fde:	601a      	str	r2, [r3, #0]
 8006fe0:	e178      	b.n	80072d4 <HAL_DMA_Abort_IT+0x480>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0201 	bic.w	r2, r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	e16f      	b.n	80072d4 <HAL_DMA_Abort_IT+0x480>
 8006ff4:	40020010 	.word	0x40020010
 8006ff8:	40020028 	.word	0x40020028
 8006ffc:	40020040 	.word	0x40020040
 8007000:	40020058 	.word	0x40020058
 8007004:	40020070 	.word	0x40020070
 8007008:	40020088 	.word	0x40020088
 800700c:	400200a0 	.word	0x400200a0
 8007010:	400200b8 	.word	0x400200b8
 8007014:	40020410 	.word	0x40020410
 8007018:	40020428 	.word	0x40020428
 800701c:	40020440 	.word	0x40020440
 8007020:	40020458 	.word	0x40020458
 8007024:	40020470 	.word	0x40020470
 8007028:	40020488 	.word	0x40020488
 800702c:	400204a0 	.word	0x400204a0
 8007030:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f022 020e 	bic.w	r2, r2, #14
 8007042:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a6c      	ldr	r2, [pc, #432]	; (80071fc <HAL_DMA_Abort_IT+0x3a8>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d04a      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x290>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a6b      	ldr	r2, [pc, #428]	; (8007200 <HAL_DMA_Abort_IT+0x3ac>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d045      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x290>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a69      	ldr	r2, [pc, #420]	; (8007204 <HAL_DMA_Abort_IT+0x3b0>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d040      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x290>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a68      	ldr	r2, [pc, #416]	; (8007208 <HAL_DMA_Abort_IT+0x3b4>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d03b      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x290>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a66      	ldr	r2, [pc, #408]	; (800720c <HAL_DMA_Abort_IT+0x3b8>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d036      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x290>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a65      	ldr	r2, [pc, #404]	; (8007210 <HAL_DMA_Abort_IT+0x3bc>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d031      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x290>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a63      	ldr	r2, [pc, #396]	; (8007214 <HAL_DMA_Abort_IT+0x3c0>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d02c      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x290>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a62      	ldr	r2, [pc, #392]	; (8007218 <HAL_DMA_Abort_IT+0x3c4>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d027      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x290>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a60      	ldr	r2, [pc, #384]	; (800721c <HAL_DMA_Abort_IT+0x3c8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d022      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x290>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a5f      	ldr	r2, [pc, #380]	; (8007220 <HAL_DMA_Abort_IT+0x3cc>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d01d      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x290>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a5d      	ldr	r2, [pc, #372]	; (8007224 <HAL_DMA_Abort_IT+0x3d0>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d018      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x290>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a5c      	ldr	r2, [pc, #368]	; (8007228 <HAL_DMA_Abort_IT+0x3d4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d013      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x290>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a5a      	ldr	r2, [pc, #360]	; (800722c <HAL_DMA_Abort_IT+0x3d8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00e      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x290>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a59      	ldr	r2, [pc, #356]	; (8007230 <HAL_DMA_Abort_IT+0x3dc>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d009      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x290>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a57      	ldr	r2, [pc, #348]	; (8007234 <HAL_DMA_Abort_IT+0x3e0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d004      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x290>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a56      	ldr	r2, [pc, #344]	; (8007238 <HAL_DMA_Abort_IT+0x3e4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d108      	bne.n	80070f6 <HAL_DMA_Abort_IT+0x2a2>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f022 0201 	bic.w	r2, r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	e007      	b.n	8007106 <HAL_DMA_Abort_IT+0x2b2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0201 	bic.w	r2, r2, #1
 8007104:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a3c      	ldr	r2, [pc, #240]	; (80071fc <HAL_DMA_Abort_IT+0x3a8>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d072      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a3a      	ldr	r2, [pc, #232]	; (8007200 <HAL_DMA_Abort_IT+0x3ac>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d06d      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a39      	ldr	r2, [pc, #228]	; (8007204 <HAL_DMA_Abort_IT+0x3b0>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d068      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a37      	ldr	r2, [pc, #220]	; (8007208 <HAL_DMA_Abort_IT+0x3b4>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d063      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a36      	ldr	r2, [pc, #216]	; (800720c <HAL_DMA_Abort_IT+0x3b8>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d05e      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a34      	ldr	r2, [pc, #208]	; (8007210 <HAL_DMA_Abort_IT+0x3bc>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d059      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a33      	ldr	r2, [pc, #204]	; (8007214 <HAL_DMA_Abort_IT+0x3c0>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d054      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a31      	ldr	r2, [pc, #196]	; (8007218 <HAL_DMA_Abort_IT+0x3c4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d04f      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a30      	ldr	r2, [pc, #192]	; (800721c <HAL_DMA_Abort_IT+0x3c8>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d04a      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a2e      	ldr	r2, [pc, #184]	; (8007220 <HAL_DMA_Abort_IT+0x3cc>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d045      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a2d      	ldr	r2, [pc, #180]	; (8007224 <HAL_DMA_Abort_IT+0x3d0>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d040      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a2b      	ldr	r2, [pc, #172]	; (8007228 <HAL_DMA_Abort_IT+0x3d4>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d03b      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a2a      	ldr	r2, [pc, #168]	; (800722c <HAL_DMA_Abort_IT+0x3d8>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d036      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a28      	ldr	r2, [pc, #160]	; (8007230 <HAL_DMA_Abort_IT+0x3dc>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d031      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a27      	ldr	r2, [pc, #156]	; (8007234 <HAL_DMA_Abort_IT+0x3e0>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d02c      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a25      	ldr	r2, [pc, #148]	; (8007238 <HAL_DMA_Abort_IT+0x3e4>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d027      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a24      	ldr	r2, [pc, #144]	; (800723c <HAL_DMA_Abort_IT+0x3e8>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d022      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a22      	ldr	r2, [pc, #136]	; (8007240 <HAL_DMA_Abort_IT+0x3ec>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d01d      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a21      	ldr	r2, [pc, #132]	; (8007244 <HAL_DMA_Abort_IT+0x3f0>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d018      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a1f      	ldr	r2, [pc, #124]	; (8007248 <HAL_DMA_Abort_IT+0x3f4>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d013      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a1e      	ldr	r2, [pc, #120]	; (800724c <HAL_DMA_Abort_IT+0x3f8>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00e      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a1c      	ldr	r2, [pc, #112]	; (8007250 <HAL_DMA_Abort_IT+0x3fc>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d009      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a1b      	ldr	r2, [pc, #108]	; (8007254 <HAL_DMA_Abort_IT+0x400>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d004      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x3a2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a19      	ldr	r2, [pc, #100]	; (8007258 <HAL_DMA_Abort_IT+0x404>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d132      	bne.n	800725c <HAL_DMA_Abort_IT+0x408>
 80071f6:	2301      	movs	r3, #1
 80071f8:	e031      	b.n	800725e <HAL_DMA_Abort_IT+0x40a>
 80071fa:	bf00      	nop
 80071fc:	40020010 	.word	0x40020010
 8007200:	40020028 	.word	0x40020028
 8007204:	40020040 	.word	0x40020040
 8007208:	40020058 	.word	0x40020058
 800720c:	40020070 	.word	0x40020070
 8007210:	40020088 	.word	0x40020088
 8007214:	400200a0 	.word	0x400200a0
 8007218:	400200b8 	.word	0x400200b8
 800721c:	40020410 	.word	0x40020410
 8007220:	40020428 	.word	0x40020428
 8007224:	40020440 	.word	0x40020440
 8007228:	40020458 	.word	0x40020458
 800722c:	40020470 	.word	0x40020470
 8007230:	40020488 	.word	0x40020488
 8007234:	400204a0 	.word	0x400204a0
 8007238:	400204b8 	.word	0x400204b8
 800723c:	58025408 	.word	0x58025408
 8007240:	5802541c 	.word	0x5802541c
 8007244:	58025430 	.word	0x58025430
 8007248:	58025444 	.word	0x58025444
 800724c:	58025458 	.word	0x58025458
 8007250:	5802546c 	.word	0x5802546c
 8007254:	58025480 	.word	0x58025480
 8007258:	58025494 	.word	0x58025494
 800725c:	2300      	movs	r3, #0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d028      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800726c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007270:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007276:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800727c:	f003 031f 	and.w	r3, r3, #31
 8007280:	2201      	movs	r2, #1
 8007282:	409a      	lsls	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007290:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00c      	beq.n	80072b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop

080072e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08a      	sub	sp, #40	; 0x28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80072ec:	4b67      	ldr	r3, [pc, #412]	; (800748c <HAL_DMA_IRQHandler+0x1ac>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a67      	ldr	r2, [pc, #412]	; (8007490 <HAL_DMA_IRQHandler+0x1b0>)
 80072f2:	fba2 2303 	umull	r2, r3, r2, r3
 80072f6:	0a9b      	lsrs	r3, r3, #10
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007304:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a5f      	ldr	r2, [pc, #380]	; (8007494 <HAL_DMA_IRQHandler+0x1b4>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d04a      	beq.n	80073b2 <HAL_DMA_IRQHandler+0xd2>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a5d      	ldr	r2, [pc, #372]	; (8007498 <HAL_DMA_IRQHandler+0x1b8>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d045      	beq.n	80073b2 <HAL_DMA_IRQHandler+0xd2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a5c      	ldr	r2, [pc, #368]	; (800749c <HAL_DMA_IRQHandler+0x1bc>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d040      	beq.n	80073b2 <HAL_DMA_IRQHandler+0xd2>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a5a      	ldr	r2, [pc, #360]	; (80074a0 <HAL_DMA_IRQHandler+0x1c0>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d03b      	beq.n	80073b2 <HAL_DMA_IRQHandler+0xd2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a59      	ldr	r2, [pc, #356]	; (80074a4 <HAL_DMA_IRQHandler+0x1c4>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d036      	beq.n	80073b2 <HAL_DMA_IRQHandler+0xd2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a57      	ldr	r2, [pc, #348]	; (80074a8 <HAL_DMA_IRQHandler+0x1c8>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d031      	beq.n	80073b2 <HAL_DMA_IRQHandler+0xd2>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a56      	ldr	r2, [pc, #344]	; (80074ac <HAL_DMA_IRQHandler+0x1cc>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d02c      	beq.n	80073b2 <HAL_DMA_IRQHandler+0xd2>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a54      	ldr	r2, [pc, #336]	; (80074b0 <HAL_DMA_IRQHandler+0x1d0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d027      	beq.n	80073b2 <HAL_DMA_IRQHandler+0xd2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a53      	ldr	r2, [pc, #332]	; (80074b4 <HAL_DMA_IRQHandler+0x1d4>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d022      	beq.n	80073b2 <HAL_DMA_IRQHandler+0xd2>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a51      	ldr	r2, [pc, #324]	; (80074b8 <HAL_DMA_IRQHandler+0x1d8>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d01d      	beq.n	80073b2 <HAL_DMA_IRQHandler+0xd2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a50      	ldr	r2, [pc, #320]	; (80074bc <HAL_DMA_IRQHandler+0x1dc>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d018      	beq.n	80073b2 <HAL_DMA_IRQHandler+0xd2>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a4e      	ldr	r2, [pc, #312]	; (80074c0 <HAL_DMA_IRQHandler+0x1e0>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d013      	beq.n	80073b2 <HAL_DMA_IRQHandler+0xd2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a4d      	ldr	r2, [pc, #308]	; (80074c4 <HAL_DMA_IRQHandler+0x1e4>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d00e      	beq.n	80073b2 <HAL_DMA_IRQHandler+0xd2>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a4b      	ldr	r2, [pc, #300]	; (80074c8 <HAL_DMA_IRQHandler+0x1e8>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d009      	beq.n	80073b2 <HAL_DMA_IRQHandler+0xd2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a4a      	ldr	r2, [pc, #296]	; (80074cc <HAL_DMA_IRQHandler+0x1ec>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d004      	beq.n	80073b2 <HAL_DMA_IRQHandler+0xd2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a48      	ldr	r2, [pc, #288]	; (80074d0 <HAL_DMA_IRQHandler+0x1f0>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d101      	bne.n	80073b6 <HAL_DMA_IRQHandler+0xd6>
 80073b2:	2301      	movs	r3, #1
 80073b4:	e000      	b.n	80073b8 <HAL_DMA_IRQHandler+0xd8>
 80073b6:	2300      	movs	r3, #0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 842b 	beq.w	8007c14 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073c2:	f003 031f 	and.w	r3, r3, #31
 80073c6:	2208      	movs	r2, #8
 80073c8:	409a      	lsls	r2, r3
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	4013      	ands	r3, r2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 80a2 	beq.w	8007518 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a2e      	ldr	r2, [pc, #184]	; (8007494 <HAL_DMA_IRQHandler+0x1b4>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d04a      	beq.n	8007474 <HAL_DMA_IRQHandler+0x194>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a2d      	ldr	r2, [pc, #180]	; (8007498 <HAL_DMA_IRQHandler+0x1b8>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d045      	beq.n	8007474 <HAL_DMA_IRQHandler+0x194>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a2b      	ldr	r2, [pc, #172]	; (800749c <HAL_DMA_IRQHandler+0x1bc>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d040      	beq.n	8007474 <HAL_DMA_IRQHandler+0x194>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a2a      	ldr	r2, [pc, #168]	; (80074a0 <HAL_DMA_IRQHandler+0x1c0>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d03b      	beq.n	8007474 <HAL_DMA_IRQHandler+0x194>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a28      	ldr	r2, [pc, #160]	; (80074a4 <HAL_DMA_IRQHandler+0x1c4>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d036      	beq.n	8007474 <HAL_DMA_IRQHandler+0x194>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a27      	ldr	r2, [pc, #156]	; (80074a8 <HAL_DMA_IRQHandler+0x1c8>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d031      	beq.n	8007474 <HAL_DMA_IRQHandler+0x194>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a25      	ldr	r2, [pc, #148]	; (80074ac <HAL_DMA_IRQHandler+0x1cc>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d02c      	beq.n	8007474 <HAL_DMA_IRQHandler+0x194>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a24      	ldr	r2, [pc, #144]	; (80074b0 <HAL_DMA_IRQHandler+0x1d0>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d027      	beq.n	8007474 <HAL_DMA_IRQHandler+0x194>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a22      	ldr	r2, [pc, #136]	; (80074b4 <HAL_DMA_IRQHandler+0x1d4>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d022      	beq.n	8007474 <HAL_DMA_IRQHandler+0x194>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a21      	ldr	r2, [pc, #132]	; (80074b8 <HAL_DMA_IRQHandler+0x1d8>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d01d      	beq.n	8007474 <HAL_DMA_IRQHandler+0x194>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a1f      	ldr	r2, [pc, #124]	; (80074bc <HAL_DMA_IRQHandler+0x1dc>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d018      	beq.n	8007474 <HAL_DMA_IRQHandler+0x194>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a1e      	ldr	r2, [pc, #120]	; (80074c0 <HAL_DMA_IRQHandler+0x1e0>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d013      	beq.n	8007474 <HAL_DMA_IRQHandler+0x194>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a1c      	ldr	r2, [pc, #112]	; (80074c4 <HAL_DMA_IRQHandler+0x1e4>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00e      	beq.n	8007474 <HAL_DMA_IRQHandler+0x194>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a1b      	ldr	r2, [pc, #108]	; (80074c8 <HAL_DMA_IRQHandler+0x1e8>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d009      	beq.n	8007474 <HAL_DMA_IRQHandler+0x194>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a19      	ldr	r2, [pc, #100]	; (80074cc <HAL_DMA_IRQHandler+0x1ec>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d004      	beq.n	8007474 <HAL_DMA_IRQHandler+0x194>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a18      	ldr	r2, [pc, #96]	; (80074d0 <HAL_DMA_IRQHandler+0x1f0>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d12f      	bne.n	80074d4 <HAL_DMA_IRQHandler+0x1f4>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0304 	and.w	r3, r3, #4
 800747e:	2b00      	cmp	r3, #0
 8007480:	bf14      	ite	ne
 8007482:	2301      	movne	r3, #1
 8007484:	2300      	moveq	r3, #0
 8007486:	b2db      	uxtb	r3, r3
 8007488:	e02e      	b.n	80074e8 <HAL_DMA_IRQHandler+0x208>
 800748a:	bf00      	nop
 800748c:	24000090 	.word	0x24000090
 8007490:	1b4e81b5 	.word	0x1b4e81b5
 8007494:	40020010 	.word	0x40020010
 8007498:	40020028 	.word	0x40020028
 800749c:	40020040 	.word	0x40020040
 80074a0:	40020058 	.word	0x40020058
 80074a4:	40020070 	.word	0x40020070
 80074a8:	40020088 	.word	0x40020088
 80074ac:	400200a0 	.word	0x400200a0
 80074b0:	400200b8 	.word	0x400200b8
 80074b4:	40020410 	.word	0x40020410
 80074b8:	40020428 	.word	0x40020428
 80074bc:	40020440 	.word	0x40020440
 80074c0:	40020458 	.word	0x40020458
 80074c4:	40020470 	.word	0x40020470
 80074c8:	40020488 	.word	0x40020488
 80074cc:	400204a0 	.word	0x400204a0
 80074d0:	400204b8 	.word	0x400204b8
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0308 	and.w	r3, r3, #8
 80074de:	2b00      	cmp	r3, #0
 80074e0:	bf14      	ite	ne
 80074e2:	2301      	movne	r3, #1
 80074e4:	2300      	moveq	r3, #0
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d015      	beq.n	8007518 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 0204 	bic.w	r2, r2, #4
 80074fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	2208      	movs	r2, #8
 8007506:	409a      	lsls	r2, r3
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007510:	f043 0201 	orr.w	r2, r3, #1
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800751c:	f003 031f 	and.w	r3, r3, #31
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	fa22 f303 	lsr.w	r3, r2, r3
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d06e      	beq.n	800760c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a69      	ldr	r2, [pc, #420]	; (80076d8 <HAL_DMA_IRQHandler+0x3f8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d04a      	beq.n	80075ce <HAL_DMA_IRQHandler+0x2ee>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a67      	ldr	r2, [pc, #412]	; (80076dc <HAL_DMA_IRQHandler+0x3fc>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d045      	beq.n	80075ce <HAL_DMA_IRQHandler+0x2ee>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a66      	ldr	r2, [pc, #408]	; (80076e0 <HAL_DMA_IRQHandler+0x400>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d040      	beq.n	80075ce <HAL_DMA_IRQHandler+0x2ee>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a64      	ldr	r2, [pc, #400]	; (80076e4 <HAL_DMA_IRQHandler+0x404>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d03b      	beq.n	80075ce <HAL_DMA_IRQHandler+0x2ee>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a63      	ldr	r2, [pc, #396]	; (80076e8 <HAL_DMA_IRQHandler+0x408>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d036      	beq.n	80075ce <HAL_DMA_IRQHandler+0x2ee>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a61      	ldr	r2, [pc, #388]	; (80076ec <HAL_DMA_IRQHandler+0x40c>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d031      	beq.n	80075ce <HAL_DMA_IRQHandler+0x2ee>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a60      	ldr	r2, [pc, #384]	; (80076f0 <HAL_DMA_IRQHandler+0x410>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d02c      	beq.n	80075ce <HAL_DMA_IRQHandler+0x2ee>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a5e      	ldr	r2, [pc, #376]	; (80076f4 <HAL_DMA_IRQHandler+0x414>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d027      	beq.n	80075ce <HAL_DMA_IRQHandler+0x2ee>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a5d      	ldr	r2, [pc, #372]	; (80076f8 <HAL_DMA_IRQHandler+0x418>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d022      	beq.n	80075ce <HAL_DMA_IRQHandler+0x2ee>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a5b      	ldr	r2, [pc, #364]	; (80076fc <HAL_DMA_IRQHandler+0x41c>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d01d      	beq.n	80075ce <HAL_DMA_IRQHandler+0x2ee>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a5a      	ldr	r2, [pc, #360]	; (8007700 <HAL_DMA_IRQHandler+0x420>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d018      	beq.n	80075ce <HAL_DMA_IRQHandler+0x2ee>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a58      	ldr	r2, [pc, #352]	; (8007704 <HAL_DMA_IRQHandler+0x424>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d013      	beq.n	80075ce <HAL_DMA_IRQHandler+0x2ee>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a57      	ldr	r2, [pc, #348]	; (8007708 <HAL_DMA_IRQHandler+0x428>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00e      	beq.n	80075ce <HAL_DMA_IRQHandler+0x2ee>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a55      	ldr	r2, [pc, #340]	; (800770c <HAL_DMA_IRQHandler+0x42c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d009      	beq.n	80075ce <HAL_DMA_IRQHandler+0x2ee>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a54      	ldr	r2, [pc, #336]	; (8007710 <HAL_DMA_IRQHandler+0x430>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d004      	beq.n	80075ce <HAL_DMA_IRQHandler+0x2ee>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a52      	ldr	r2, [pc, #328]	; (8007714 <HAL_DMA_IRQHandler+0x434>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d10a      	bne.n	80075e4 <HAL_DMA_IRQHandler+0x304>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bf14      	ite	ne
 80075dc:	2301      	movne	r3, #1
 80075de:	2300      	moveq	r3, #0
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	e003      	b.n	80075ec <HAL_DMA_IRQHandler+0x30c>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2300      	movs	r3, #0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00d      	beq.n	800760c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075f4:	f003 031f 	and.w	r3, r3, #31
 80075f8:	2201      	movs	r2, #1
 80075fa:	409a      	lsls	r2, r3
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007604:	f043 0202 	orr.w	r2, r3, #2
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007610:	f003 031f 	and.w	r3, r3, #31
 8007614:	2204      	movs	r2, #4
 8007616:	409a      	lsls	r2, r3
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	4013      	ands	r3, r2
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 808f 	beq.w	8007740 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a2c      	ldr	r2, [pc, #176]	; (80076d8 <HAL_DMA_IRQHandler+0x3f8>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d04a      	beq.n	80076c2 <HAL_DMA_IRQHandler+0x3e2>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a2a      	ldr	r2, [pc, #168]	; (80076dc <HAL_DMA_IRQHandler+0x3fc>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d045      	beq.n	80076c2 <HAL_DMA_IRQHandler+0x3e2>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a29      	ldr	r2, [pc, #164]	; (80076e0 <HAL_DMA_IRQHandler+0x400>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d040      	beq.n	80076c2 <HAL_DMA_IRQHandler+0x3e2>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a27      	ldr	r2, [pc, #156]	; (80076e4 <HAL_DMA_IRQHandler+0x404>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d03b      	beq.n	80076c2 <HAL_DMA_IRQHandler+0x3e2>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a26      	ldr	r2, [pc, #152]	; (80076e8 <HAL_DMA_IRQHandler+0x408>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d036      	beq.n	80076c2 <HAL_DMA_IRQHandler+0x3e2>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a24      	ldr	r2, [pc, #144]	; (80076ec <HAL_DMA_IRQHandler+0x40c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d031      	beq.n	80076c2 <HAL_DMA_IRQHandler+0x3e2>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a23      	ldr	r2, [pc, #140]	; (80076f0 <HAL_DMA_IRQHandler+0x410>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d02c      	beq.n	80076c2 <HAL_DMA_IRQHandler+0x3e2>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a21      	ldr	r2, [pc, #132]	; (80076f4 <HAL_DMA_IRQHandler+0x414>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d027      	beq.n	80076c2 <HAL_DMA_IRQHandler+0x3e2>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a20      	ldr	r2, [pc, #128]	; (80076f8 <HAL_DMA_IRQHandler+0x418>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d022      	beq.n	80076c2 <HAL_DMA_IRQHandler+0x3e2>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a1e      	ldr	r2, [pc, #120]	; (80076fc <HAL_DMA_IRQHandler+0x41c>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d01d      	beq.n	80076c2 <HAL_DMA_IRQHandler+0x3e2>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a1d      	ldr	r2, [pc, #116]	; (8007700 <HAL_DMA_IRQHandler+0x420>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d018      	beq.n	80076c2 <HAL_DMA_IRQHandler+0x3e2>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a1b      	ldr	r2, [pc, #108]	; (8007704 <HAL_DMA_IRQHandler+0x424>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d013      	beq.n	80076c2 <HAL_DMA_IRQHandler+0x3e2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a1a      	ldr	r2, [pc, #104]	; (8007708 <HAL_DMA_IRQHandler+0x428>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d00e      	beq.n	80076c2 <HAL_DMA_IRQHandler+0x3e2>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a18      	ldr	r2, [pc, #96]	; (800770c <HAL_DMA_IRQHandler+0x42c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d009      	beq.n	80076c2 <HAL_DMA_IRQHandler+0x3e2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a17      	ldr	r2, [pc, #92]	; (8007710 <HAL_DMA_IRQHandler+0x430>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d004      	beq.n	80076c2 <HAL_DMA_IRQHandler+0x3e2>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a15      	ldr	r2, [pc, #84]	; (8007714 <HAL_DMA_IRQHandler+0x434>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d12a      	bne.n	8007718 <HAL_DMA_IRQHandler+0x438>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	bf14      	ite	ne
 80076d0:	2301      	movne	r3, #1
 80076d2:	2300      	moveq	r3, #0
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	e023      	b.n	8007720 <HAL_DMA_IRQHandler+0x440>
 80076d8:	40020010 	.word	0x40020010
 80076dc:	40020028 	.word	0x40020028
 80076e0:	40020040 	.word	0x40020040
 80076e4:	40020058 	.word	0x40020058
 80076e8:	40020070 	.word	0x40020070
 80076ec:	40020088 	.word	0x40020088
 80076f0:	400200a0 	.word	0x400200a0
 80076f4:	400200b8 	.word	0x400200b8
 80076f8:	40020410 	.word	0x40020410
 80076fc:	40020428 	.word	0x40020428
 8007700:	40020440 	.word	0x40020440
 8007704:	40020458 	.word	0x40020458
 8007708:	40020470 	.word	0x40020470
 800770c:	40020488 	.word	0x40020488
 8007710:	400204a0 	.word	0x400204a0
 8007714:	400204b8 	.word	0x400204b8
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2300      	movs	r3, #0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00d      	beq.n	8007740 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007728:	f003 031f 	and.w	r3, r3, #31
 800772c:	2204      	movs	r2, #4
 800772e:	409a      	lsls	r2, r3
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007738:	f043 0204 	orr.w	r2, r3, #4
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007744:	f003 031f 	and.w	r3, r3, #31
 8007748:	2210      	movs	r2, #16
 800774a:	409a      	lsls	r2, r3
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	4013      	ands	r3, r2
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 80a6 	beq.w	80078a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a85      	ldr	r2, [pc, #532]	; (8007970 <HAL_DMA_IRQHandler+0x690>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d04a      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x516>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a83      	ldr	r2, [pc, #524]	; (8007974 <HAL_DMA_IRQHandler+0x694>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d045      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x516>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a82      	ldr	r2, [pc, #520]	; (8007978 <HAL_DMA_IRQHandler+0x698>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d040      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x516>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a80      	ldr	r2, [pc, #512]	; (800797c <HAL_DMA_IRQHandler+0x69c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d03b      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x516>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a7f      	ldr	r2, [pc, #508]	; (8007980 <HAL_DMA_IRQHandler+0x6a0>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d036      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x516>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a7d      	ldr	r2, [pc, #500]	; (8007984 <HAL_DMA_IRQHandler+0x6a4>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d031      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x516>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a7c      	ldr	r2, [pc, #496]	; (8007988 <HAL_DMA_IRQHandler+0x6a8>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d02c      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x516>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a7a      	ldr	r2, [pc, #488]	; (800798c <HAL_DMA_IRQHandler+0x6ac>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d027      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x516>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a79      	ldr	r2, [pc, #484]	; (8007990 <HAL_DMA_IRQHandler+0x6b0>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d022      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x516>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a77      	ldr	r2, [pc, #476]	; (8007994 <HAL_DMA_IRQHandler+0x6b4>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d01d      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x516>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a76      	ldr	r2, [pc, #472]	; (8007998 <HAL_DMA_IRQHandler+0x6b8>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d018      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x516>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a74      	ldr	r2, [pc, #464]	; (800799c <HAL_DMA_IRQHandler+0x6bc>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d013      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x516>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a73      	ldr	r2, [pc, #460]	; (80079a0 <HAL_DMA_IRQHandler+0x6c0>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d00e      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x516>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a71      	ldr	r2, [pc, #452]	; (80079a4 <HAL_DMA_IRQHandler+0x6c4>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d009      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x516>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a70      	ldr	r2, [pc, #448]	; (80079a8 <HAL_DMA_IRQHandler+0x6c8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d004      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x516>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a6e      	ldr	r2, [pc, #440]	; (80079ac <HAL_DMA_IRQHandler+0x6cc>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d10a      	bne.n	800780c <HAL_DMA_IRQHandler+0x52c>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0308 	and.w	r3, r3, #8
 8007800:	2b00      	cmp	r3, #0
 8007802:	bf14      	ite	ne
 8007804:	2301      	movne	r3, #1
 8007806:	2300      	moveq	r3, #0
 8007808:	b2db      	uxtb	r3, r3
 800780a:	e009      	b.n	8007820 <HAL_DMA_IRQHandler+0x540>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0304 	and.w	r3, r3, #4
 8007816:	2b00      	cmp	r3, #0
 8007818:	bf14      	ite	ne
 800781a:	2301      	movne	r3, #1
 800781c:	2300      	moveq	r3, #0
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b00      	cmp	r3, #0
 8007822:	d03e      	beq.n	80078a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007828:	f003 031f 	and.w	r3, r3, #31
 800782c:	2210      	movs	r2, #16
 800782e:	409a      	lsls	r2, r3
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d018      	beq.n	8007874 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d108      	bne.n	8007862 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007854:	2b00      	cmp	r3, #0
 8007856:	d024      	beq.n	80078a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	4798      	blx	r3
 8007860:	e01f      	b.n	80078a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007866:	2b00      	cmp	r3, #0
 8007868:	d01b      	beq.n	80078a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	4798      	blx	r3
 8007872:	e016      	b.n	80078a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787e:	2b00      	cmp	r3, #0
 8007880:	d107      	bne.n	8007892 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0208 	bic.w	r2, r2, #8
 8007890:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a6:	f003 031f 	and.w	r3, r3, #31
 80078aa:	2220      	movs	r2, #32
 80078ac:	409a      	lsls	r2, r3
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	4013      	ands	r3, r2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 8110 	beq.w	8007ad8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a2c      	ldr	r2, [pc, #176]	; (8007970 <HAL_DMA_IRQHandler+0x690>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d04a      	beq.n	8007958 <HAL_DMA_IRQHandler+0x678>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a2b      	ldr	r2, [pc, #172]	; (8007974 <HAL_DMA_IRQHandler+0x694>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d045      	beq.n	8007958 <HAL_DMA_IRQHandler+0x678>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a29      	ldr	r2, [pc, #164]	; (8007978 <HAL_DMA_IRQHandler+0x698>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d040      	beq.n	8007958 <HAL_DMA_IRQHandler+0x678>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a28      	ldr	r2, [pc, #160]	; (800797c <HAL_DMA_IRQHandler+0x69c>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d03b      	beq.n	8007958 <HAL_DMA_IRQHandler+0x678>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a26      	ldr	r2, [pc, #152]	; (8007980 <HAL_DMA_IRQHandler+0x6a0>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d036      	beq.n	8007958 <HAL_DMA_IRQHandler+0x678>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a25      	ldr	r2, [pc, #148]	; (8007984 <HAL_DMA_IRQHandler+0x6a4>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d031      	beq.n	8007958 <HAL_DMA_IRQHandler+0x678>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a23      	ldr	r2, [pc, #140]	; (8007988 <HAL_DMA_IRQHandler+0x6a8>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d02c      	beq.n	8007958 <HAL_DMA_IRQHandler+0x678>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a22      	ldr	r2, [pc, #136]	; (800798c <HAL_DMA_IRQHandler+0x6ac>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d027      	beq.n	8007958 <HAL_DMA_IRQHandler+0x678>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a20      	ldr	r2, [pc, #128]	; (8007990 <HAL_DMA_IRQHandler+0x6b0>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d022      	beq.n	8007958 <HAL_DMA_IRQHandler+0x678>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a1f      	ldr	r2, [pc, #124]	; (8007994 <HAL_DMA_IRQHandler+0x6b4>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d01d      	beq.n	8007958 <HAL_DMA_IRQHandler+0x678>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a1d      	ldr	r2, [pc, #116]	; (8007998 <HAL_DMA_IRQHandler+0x6b8>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d018      	beq.n	8007958 <HAL_DMA_IRQHandler+0x678>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a1c      	ldr	r2, [pc, #112]	; (800799c <HAL_DMA_IRQHandler+0x6bc>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d013      	beq.n	8007958 <HAL_DMA_IRQHandler+0x678>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a1a      	ldr	r2, [pc, #104]	; (80079a0 <HAL_DMA_IRQHandler+0x6c0>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00e      	beq.n	8007958 <HAL_DMA_IRQHandler+0x678>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a19      	ldr	r2, [pc, #100]	; (80079a4 <HAL_DMA_IRQHandler+0x6c4>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d009      	beq.n	8007958 <HAL_DMA_IRQHandler+0x678>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a17      	ldr	r2, [pc, #92]	; (80079a8 <HAL_DMA_IRQHandler+0x6c8>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d004      	beq.n	8007958 <HAL_DMA_IRQHandler+0x678>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a16      	ldr	r2, [pc, #88]	; (80079ac <HAL_DMA_IRQHandler+0x6cc>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d12b      	bne.n	80079b0 <HAL_DMA_IRQHandler+0x6d0>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0310 	and.w	r3, r3, #16
 8007962:	2b00      	cmp	r3, #0
 8007964:	bf14      	ite	ne
 8007966:	2301      	movne	r3, #1
 8007968:	2300      	moveq	r3, #0
 800796a:	b2db      	uxtb	r3, r3
 800796c:	e02a      	b.n	80079c4 <HAL_DMA_IRQHandler+0x6e4>
 800796e:	bf00      	nop
 8007970:	40020010 	.word	0x40020010
 8007974:	40020028 	.word	0x40020028
 8007978:	40020040 	.word	0x40020040
 800797c:	40020058 	.word	0x40020058
 8007980:	40020070 	.word	0x40020070
 8007984:	40020088 	.word	0x40020088
 8007988:	400200a0 	.word	0x400200a0
 800798c:	400200b8 	.word	0x400200b8
 8007990:	40020410 	.word	0x40020410
 8007994:	40020428 	.word	0x40020428
 8007998:	40020440 	.word	0x40020440
 800799c:	40020458 	.word	0x40020458
 80079a0:	40020470 	.word	0x40020470
 80079a4:	40020488 	.word	0x40020488
 80079a8:	400204a0 	.word	0x400204a0
 80079ac:	400204b8 	.word	0x400204b8
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0302 	and.w	r3, r3, #2
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	bf14      	ite	ne
 80079be:	2301      	movne	r3, #1
 80079c0:	2300      	moveq	r3, #0
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8087 	beq.w	8007ad8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ce:	f003 031f 	and.w	r3, r3, #31
 80079d2:	2220      	movs	r2, #32
 80079d4:	409a      	lsls	r2, r3
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d139      	bne.n	8007a5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0216 	bic.w	r2, r2, #22
 80079f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	695a      	ldr	r2, [r3, #20]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d103      	bne.n	8007a16 <HAL_DMA_IRQHandler+0x736>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d007      	beq.n	8007a26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 0208 	bic.w	r2, r2, #8
 8007a24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a2a:	f003 031f 	and.w	r3, r3, #31
 8007a2e:	223f      	movs	r2, #63	; 0x3f
 8007a30:	409a      	lsls	r2, r3
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 834a 	beq.w	80080e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	4798      	blx	r3
          }
          return;
 8007a58:	e344      	b.n	80080e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d018      	beq.n	8007a9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d108      	bne.n	8007a88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d02c      	beq.n	8007ad8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	4798      	blx	r3
 8007a86:	e027      	b.n	8007ad8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d023      	beq.n	8007ad8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	4798      	blx	r3
 8007a98:	e01e      	b.n	8007ad8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10f      	bne.n	8007ac8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 0210 	bic.w	r2, r2, #16
 8007ab6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d003      	beq.n	8007ad8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 8306 	beq.w	80080ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 8088 	beq.w	8007c00 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2204      	movs	r2, #4
 8007af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a7a      	ldr	r2, [pc, #488]	; (8007ce8 <HAL_DMA_IRQHandler+0xa08>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d04a      	beq.n	8007b98 <HAL_DMA_IRQHandler+0x8b8>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a79      	ldr	r2, [pc, #484]	; (8007cec <HAL_DMA_IRQHandler+0xa0c>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d045      	beq.n	8007b98 <HAL_DMA_IRQHandler+0x8b8>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a77      	ldr	r2, [pc, #476]	; (8007cf0 <HAL_DMA_IRQHandler+0xa10>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d040      	beq.n	8007b98 <HAL_DMA_IRQHandler+0x8b8>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a76      	ldr	r2, [pc, #472]	; (8007cf4 <HAL_DMA_IRQHandler+0xa14>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d03b      	beq.n	8007b98 <HAL_DMA_IRQHandler+0x8b8>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a74      	ldr	r2, [pc, #464]	; (8007cf8 <HAL_DMA_IRQHandler+0xa18>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d036      	beq.n	8007b98 <HAL_DMA_IRQHandler+0x8b8>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a73      	ldr	r2, [pc, #460]	; (8007cfc <HAL_DMA_IRQHandler+0xa1c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d031      	beq.n	8007b98 <HAL_DMA_IRQHandler+0x8b8>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a71      	ldr	r2, [pc, #452]	; (8007d00 <HAL_DMA_IRQHandler+0xa20>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d02c      	beq.n	8007b98 <HAL_DMA_IRQHandler+0x8b8>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a70      	ldr	r2, [pc, #448]	; (8007d04 <HAL_DMA_IRQHandler+0xa24>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d027      	beq.n	8007b98 <HAL_DMA_IRQHandler+0x8b8>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a6e      	ldr	r2, [pc, #440]	; (8007d08 <HAL_DMA_IRQHandler+0xa28>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d022      	beq.n	8007b98 <HAL_DMA_IRQHandler+0x8b8>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a6d      	ldr	r2, [pc, #436]	; (8007d0c <HAL_DMA_IRQHandler+0xa2c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d01d      	beq.n	8007b98 <HAL_DMA_IRQHandler+0x8b8>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a6b      	ldr	r2, [pc, #428]	; (8007d10 <HAL_DMA_IRQHandler+0xa30>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d018      	beq.n	8007b98 <HAL_DMA_IRQHandler+0x8b8>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a6a      	ldr	r2, [pc, #424]	; (8007d14 <HAL_DMA_IRQHandler+0xa34>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d013      	beq.n	8007b98 <HAL_DMA_IRQHandler+0x8b8>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a68      	ldr	r2, [pc, #416]	; (8007d18 <HAL_DMA_IRQHandler+0xa38>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d00e      	beq.n	8007b98 <HAL_DMA_IRQHandler+0x8b8>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a67      	ldr	r2, [pc, #412]	; (8007d1c <HAL_DMA_IRQHandler+0xa3c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d009      	beq.n	8007b98 <HAL_DMA_IRQHandler+0x8b8>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a65      	ldr	r2, [pc, #404]	; (8007d20 <HAL_DMA_IRQHandler+0xa40>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d004      	beq.n	8007b98 <HAL_DMA_IRQHandler+0x8b8>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a64      	ldr	r2, [pc, #400]	; (8007d24 <HAL_DMA_IRQHandler+0xa44>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d108      	bne.n	8007baa <HAL_DMA_IRQHandler+0x8ca>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0201 	bic.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	e007      	b.n	8007bba <HAL_DMA_IRQHandler+0x8da>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f022 0201 	bic.w	r2, r2, #1
 8007bb8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d307      	bcc.n	8007bd6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1f2      	bne.n	8007bba <HAL_DMA_IRQHandler+0x8da>
 8007bd4:	e000      	b.n	8007bd8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007bd6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2203      	movs	r2, #3
 8007bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007bee:	e003      	b.n	8007bf8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 8272 	beq.w	80080ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	4798      	blx	r3
 8007c12:	e26c      	b.n	80080ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a43      	ldr	r2, [pc, #268]	; (8007d28 <HAL_DMA_IRQHandler+0xa48>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d022      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x984>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a42      	ldr	r2, [pc, #264]	; (8007d2c <HAL_DMA_IRQHandler+0xa4c>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d01d      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x984>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a40      	ldr	r2, [pc, #256]	; (8007d30 <HAL_DMA_IRQHandler+0xa50>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d018      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x984>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a3f      	ldr	r2, [pc, #252]	; (8007d34 <HAL_DMA_IRQHandler+0xa54>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d013      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x984>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a3d      	ldr	r2, [pc, #244]	; (8007d38 <HAL_DMA_IRQHandler+0xa58>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d00e      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x984>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a3c      	ldr	r2, [pc, #240]	; (8007d3c <HAL_DMA_IRQHandler+0xa5c>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d009      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x984>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a3a      	ldr	r2, [pc, #232]	; (8007d40 <HAL_DMA_IRQHandler+0xa60>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d004      	beq.n	8007c64 <HAL_DMA_IRQHandler+0x984>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a39      	ldr	r2, [pc, #228]	; (8007d44 <HAL_DMA_IRQHandler+0xa64>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d101      	bne.n	8007c68 <HAL_DMA_IRQHandler+0x988>
 8007c64:	2301      	movs	r3, #1
 8007c66:	e000      	b.n	8007c6a <HAL_DMA_IRQHandler+0x98a>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f000 823f 	beq.w	80080ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c7c:	f003 031f 	and.w	r3, r3, #31
 8007c80:	2204      	movs	r2, #4
 8007c82:	409a      	lsls	r2, r3
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	4013      	ands	r3, r2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 80cd 	beq.w	8007e28 <HAL_DMA_IRQHandler+0xb48>
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	f000 80c7 	beq.w	8007e28 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c9e:	f003 031f 	and.w	r3, r3, #31
 8007ca2:	2204      	movs	r2, #4
 8007ca4:	409a      	lsls	r2, r3
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d049      	beq.n	8007d48 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d109      	bne.n	8007cd2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 8210 	beq.w	80080e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cd0:	e20a      	b.n	80080e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 8206 	beq.w	80080e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ce4:	e200      	b.n	80080e8 <HAL_DMA_IRQHandler+0xe08>
 8007ce6:	bf00      	nop
 8007ce8:	40020010 	.word	0x40020010
 8007cec:	40020028 	.word	0x40020028
 8007cf0:	40020040 	.word	0x40020040
 8007cf4:	40020058 	.word	0x40020058
 8007cf8:	40020070 	.word	0x40020070
 8007cfc:	40020088 	.word	0x40020088
 8007d00:	400200a0 	.word	0x400200a0
 8007d04:	400200b8 	.word	0x400200b8
 8007d08:	40020410 	.word	0x40020410
 8007d0c:	40020428 	.word	0x40020428
 8007d10:	40020440 	.word	0x40020440
 8007d14:	40020458 	.word	0x40020458
 8007d18:	40020470 	.word	0x40020470
 8007d1c:	40020488 	.word	0x40020488
 8007d20:	400204a0 	.word	0x400204a0
 8007d24:	400204b8 	.word	0x400204b8
 8007d28:	58025408 	.word	0x58025408
 8007d2c:	5802541c 	.word	0x5802541c
 8007d30:	58025430 	.word	0x58025430
 8007d34:	58025444 	.word	0x58025444
 8007d38:	58025458 	.word	0x58025458
 8007d3c:	5802546c 	.word	0x5802546c
 8007d40:	58025480 	.word	0x58025480
 8007d44:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d160      	bne.n	8007e14 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a7f      	ldr	r2, [pc, #508]	; (8007f54 <HAL_DMA_IRQHandler+0xc74>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d04a      	beq.n	8007df2 <HAL_DMA_IRQHandler+0xb12>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a7d      	ldr	r2, [pc, #500]	; (8007f58 <HAL_DMA_IRQHandler+0xc78>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d045      	beq.n	8007df2 <HAL_DMA_IRQHandler+0xb12>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a7c      	ldr	r2, [pc, #496]	; (8007f5c <HAL_DMA_IRQHandler+0xc7c>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d040      	beq.n	8007df2 <HAL_DMA_IRQHandler+0xb12>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a7a      	ldr	r2, [pc, #488]	; (8007f60 <HAL_DMA_IRQHandler+0xc80>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d03b      	beq.n	8007df2 <HAL_DMA_IRQHandler+0xb12>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a79      	ldr	r2, [pc, #484]	; (8007f64 <HAL_DMA_IRQHandler+0xc84>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d036      	beq.n	8007df2 <HAL_DMA_IRQHandler+0xb12>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a77      	ldr	r2, [pc, #476]	; (8007f68 <HAL_DMA_IRQHandler+0xc88>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d031      	beq.n	8007df2 <HAL_DMA_IRQHandler+0xb12>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a76      	ldr	r2, [pc, #472]	; (8007f6c <HAL_DMA_IRQHandler+0xc8c>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d02c      	beq.n	8007df2 <HAL_DMA_IRQHandler+0xb12>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a74      	ldr	r2, [pc, #464]	; (8007f70 <HAL_DMA_IRQHandler+0xc90>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d027      	beq.n	8007df2 <HAL_DMA_IRQHandler+0xb12>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a73      	ldr	r2, [pc, #460]	; (8007f74 <HAL_DMA_IRQHandler+0xc94>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d022      	beq.n	8007df2 <HAL_DMA_IRQHandler+0xb12>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a71      	ldr	r2, [pc, #452]	; (8007f78 <HAL_DMA_IRQHandler+0xc98>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d01d      	beq.n	8007df2 <HAL_DMA_IRQHandler+0xb12>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a70      	ldr	r2, [pc, #448]	; (8007f7c <HAL_DMA_IRQHandler+0xc9c>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d018      	beq.n	8007df2 <HAL_DMA_IRQHandler+0xb12>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a6e      	ldr	r2, [pc, #440]	; (8007f80 <HAL_DMA_IRQHandler+0xca0>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d013      	beq.n	8007df2 <HAL_DMA_IRQHandler+0xb12>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a6d      	ldr	r2, [pc, #436]	; (8007f84 <HAL_DMA_IRQHandler+0xca4>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d00e      	beq.n	8007df2 <HAL_DMA_IRQHandler+0xb12>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a6b      	ldr	r2, [pc, #428]	; (8007f88 <HAL_DMA_IRQHandler+0xca8>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d009      	beq.n	8007df2 <HAL_DMA_IRQHandler+0xb12>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a6a      	ldr	r2, [pc, #424]	; (8007f8c <HAL_DMA_IRQHandler+0xcac>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d004      	beq.n	8007df2 <HAL_DMA_IRQHandler+0xb12>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a68      	ldr	r2, [pc, #416]	; (8007f90 <HAL_DMA_IRQHandler+0xcb0>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d108      	bne.n	8007e04 <HAL_DMA_IRQHandler+0xb24>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f022 0208 	bic.w	r2, r2, #8
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	e007      	b.n	8007e14 <HAL_DMA_IRQHandler+0xb34>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f022 0204 	bic.w	r2, r2, #4
 8007e12:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 8165 	beq.w	80080e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e26:	e15f      	b.n	80080e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e2c:	f003 031f 	and.w	r3, r3, #31
 8007e30:	2202      	movs	r2, #2
 8007e32:	409a      	lsls	r2, r3
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	4013      	ands	r3, r2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 80c5 	beq.w	8007fc8 <HAL_DMA_IRQHandler+0xce8>
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	f003 0302 	and.w	r3, r3, #2
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f000 80bf 	beq.w	8007fc8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e4e:	f003 031f 	and.w	r3, r3, #31
 8007e52:	2202      	movs	r2, #2
 8007e54:	409a      	lsls	r2, r3
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d018      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d109      	bne.n	8007e82 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 813a 	beq.w	80080ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e80:	e134      	b.n	80080ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 8130 	beq.w	80080ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e94:	e12a      	b.n	80080ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f003 0320 	and.w	r3, r3, #32
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f040 8089 	bne.w	8007fb4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a2b      	ldr	r2, [pc, #172]	; (8007f54 <HAL_DMA_IRQHandler+0xc74>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d04a      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xc62>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a29      	ldr	r2, [pc, #164]	; (8007f58 <HAL_DMA_IRQHandler+0xc78>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d045      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xc62>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a28      	ldr	r2, [pc, #160]	; (8007f5c <HAL_DMA_IRQHandler+0xc7c>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d040      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xc62>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a26      	ldr	r2, [pc, #152]	; (8007f60 <HAL_DMA_IRQHandler+0xc80>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d03b      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xc62>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a25      	ldr	r2, [pc, #148]	; (8007f64 <HAL_DMA_IRQHandler+0xc84>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d036      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xc62>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a23      	ldr	r2, [pc, #140]	; (8007f68 <HAL_DMA_IRQHandler+0xc88>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d031      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xc62>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a22      	ldr	r2, [pc, #136]	; (8007f6c <HAL_DMA_IRQHandler+0xc8c>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d02c      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xc62>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a20      	ldr	r2, [pc, #128]	; (8007f70 <HAL_DMA_IRQHandler+0xc90>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d027      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xc62>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a1f      	ldr	r2, [pc, #124]	; (8007f74 <HAL_DMA_IRQHandler+0xc94>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d022      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xc62>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a1d      	ldr	r2, [pc, #116]	; (8007f78 <HAL_DMA_IRQHandler+0xc98>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d01d      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xc62>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a1c      	ldr	r2, [pc, #112]	; (8007f7c <HAL_DMA_IRQHandler+0xc9c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d018      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xc62>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a1a      	ldr	r2, [pc, #104]	; (8007f80 <HAL_DMA_IRQHandler+0xca0>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d013      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xc62>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a19      	ldr	r2, [pc, #100]	; (8007f84 <HAL_DMA_IRQHandler+0xca4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d00e      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xc62>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a17      	ldr	r2, [pc, #92]	; (8007f88 <HAL_DMA_IRQHandler+0xca8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d009      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xc62>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a16      	ldr	r2, [pc, #88]	; (8007f8c <HAL_DMA_IRQHandler+0xcac>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d004      	beq.n	8007f42 <HAL_DMA_IRQHandler+0xc62>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a14      	ldr	r2, [pc, #80]	; (8007f90 <HAL_DMA_IRQHandler+0xcb0>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d128      	bne.n	8007f94 <HAL_DMA_IRQHandler+0xcb4>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f022 0214 	bic.w	r2, r2, #20
 8007f50:	601a      	str	r2, [r3, #0]
 8007f52:	e027      	b.n	8007fa4 <HAL_DMA_IRQHandler+0xcc4>
 8007f54:	40020010 	.word	0x40020010
 8007f58:	40020028 	.word	0x40020028
 8007f5c:	40020040 	.word	0x40020040
 8007f60:	40020058 	.word	0x40020058
 8007f64:	40020070 	.word	0x40020070
 8007f68:	40020088 	.word	0x40020088
 8007f6c:	400200a0 	.word	0x400200a0
 8007f70:	400200b8 	.word	0x400200b8
 8007f74:	40020410 	.word	0x40020410
 8007f78:	40020428 	.word	0x40020428
 8007f7c:	40020440 	.word	0x40020440
 8007f80:	40020458 	.word	0x40020458
 8007f84:	40020470 	.word	0x40020470
 8007f88:	40020488 	.word	0x40020488
 8007f8c:	400204a0 	.word	0x400204a0
 8007f90:	400204b8 	.word	0x400204b8
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f022 020a 	bic.w	r2, r2, #10
 8007fa2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 8097 	beq.w	80080ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007fc6:	e091      	b.n	80080ec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fcc:	f003 031f 	and.w	r3, r3, #31
 8007fd0:	2208      	movs	r2, #8
 8007fd2:	409a      	lsls	r2, r3
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 8088 	beq.w	80080ee <HAL_DMA_IRQHandler+0xe0e>
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f003 0308 	and.w	r3, r3, #8
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 8082 	beq.w	80080ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a41      	ldr	r2, [pc, #260]	; (80080f4 <HAL_DMA_IRQHandler+0xe14>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d04a      	beq.n	800808a <HAL_DMA_IRQHandler+0xdaa>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a3f      	ldr	r2, [pc, #252]	; (80080f8 <HAL_DMA_IRQHandler+0xe18>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d045      	beq.n	800808a <HAL_DMA_IRQHandler+0xdaa>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a3e      	ldr	r2, [pc, #248]	; (80080fc <HAL_DMA_IRQHandler+0xe1c>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d040      	beq.n	800808a <HAL_DMA_IRQHandler+0xdaa>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a3c      	ldr	r2, [pc, #240]	; (8008100 <HAL_DMA_IRQHandler+0xe20>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d03b      	beq.n	800808a <HAL_DMA_IRQHandler+0xdaa>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a3b      	ldr	r2, [pc, #236]	; (8008104 <HAL_DMA_IRQHandler+0xe24>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d036      	beq.n	800808a <HAL_DMA_IRQHandler+0xdaa>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a39      	ldr	r2, [pc, #228]	; (8008108 <HAL_DMA_IRQHandler+0xe28>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d031      	beq.n	800808a <HAL_DMA_IRQHandler+0xdaa>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a38      	ldr	r2, [pc, #224]	; (800810c <HAL_DMA_IRQHandler+0xe2c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d02c      	beq.n	800808a <HAL_DMA_IRQHandler+0xdaa>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a36      	ldr	r2, [pc, #216]	; (8008110 <HAL_DMA_IRQHandler+0xe30>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d027      	beq.n	800808a <HAL_DMA_IRQHandler+0xdaa>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a35      	ldr	r2, [pc, #212]	; (8008114 <HAL_DMA_IRQHandler+0xe34>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d022      	beq.n	800808a <HAL_DMA_IRQHandler+0xdaa>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a33      	ldr	r2, [pc, #204]	; (8008118 <HAL_DMA_IRQHandler+0xe38>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d01d      	beq.n	800808a <HAL_DMA_IRQHandler+0xdaa>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a32      	ldr	r2, [pc, #200]	; (800811c <HAL_DMA_IRQHandler+0xe3c>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d018      	beq.n	800808a <HAL_DMA_IRQHandler+0xdaa>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a30      	ldr	r2, [pc, #192]	; (8008120 <HAL_DMA_IRQHandler+0xe40>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d013      	beq.n	800808a <HAL_DMA_IRQHandler+0xdaa>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a2f      	ldr	r2, [pc, #188]	; (8008124 <HAL_DMA_IRQHandler+0xe44>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d00e      	beq.n	800808a <HAL_DMA_IRQHandler+0xdaa>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a2d      	ldr	r2, [pc, #180]	; (8008128 <HAL_DMA_IRQHandler+0xe48>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d009      	beq.n	800808a <HAL_DMA_IRQHandler+0xdaa>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a2c      	ldr	r2, [pc, #176]	; (800812c <HAL_DMA_IRQHandler+0xe4c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d004      	beq.n	800808a <HAL_DMA_IRQHandler+0xdaa>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a2a      	ldr	r2, [pc, #168]	; (8008130 <HAL_DMA_IRQHandler+0xe50>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d108      	bne.n	800809c <HAL_DMA_IRQHandler+0xdbc>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f022 021c 	bic.w	r2, r2, #28
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	e007      	b.n	80080ac <HAL_DMA_IRQHandler+0xdcc>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f022 020e 	bic.w	r2, r2, #14
 80080aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b0:	f003 031f 	and.w	r3, r3, #31
 80080b4:	2201      	movs	r2, #1
 80080b6:	409a      	lsls	r2, r3
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d009      	beq.n	80080ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	4798      	blx	r3
 80080e2:	e004      	b.n	80080ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80080e4:	bf00      	nop
 80080e6:	e002      	b.n	80080ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080e8:	bf00      	nop
 80080ea:	e000      	b.n	80080ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80080ee:	3728      	adds	r7, #40	; 0x28
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	40020010 	.word	0x40020010
 80080f8:	40020028 	.word	0x40020028
 80080fc:	40020040 	.word	0x40020040
 8008100:	40020058 	.word	0x40020058
 8008104:	40020070 	.word	0x40020070
 8008108:	40020088 	.word	0x40020088
 800810c:	400200a0 	.word	0x400200a0
 8008110:	400200b8 	.word	0x400200b8
 8008114:	40020410 	.word	0x40020410
 8008118:	40020428 	.word	0x40020428
 800811c:	40020440 	.word	0x40020440
 8008120:	40020458 	.word	0x40020458
 8008124:	40020470 	.word	0x40020470
 8008128:	40020488 	.word	0x40020488
 800812c:	400204a0 	.word	0x400204a0
 8008130:	400204b8 	.word	0x400204b8

08008134 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008134:	b480      	push	{r7}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
 8008140:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008146:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a7f      	ldr	r2, [pc, #508]	; (8008350 <DMA_SetConfig+0x21c>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d072      	beq.n	800823e <DMA_SetConfig+0x10a>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a7d      	ldr	r2, [pc, #500]	; (8008354 <DMA_SetConfig+0x220>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d06d      	beq.n	800823e <DMA_SetConfig+0x10a>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a7c      	ldr	r2, [pc, #496]	; (8008358 <DMA_SetConfig+0x224>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d068      	beq.n	800823e <DMA_SetConfig+0x10a>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a7a      	ldr	r2, [pc, #488]	; (800835c <DMA_SetConfig+0x228>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d063      	beq.n	800823e <DMA_SetConfig+0x10a>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a79      	ldr	r2, [pc, #484]	; (8008360 <DMA_SetConfig+0x22c>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d05e      	beq.n	800823e <DMA_SetConfig+0x10a>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a77      	ldr	r2, [pc, #476]	; (8008364 <DMA_SetConfig+0x230>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d059      	beq.n	800823e <DMA_SetConfig+0x10a>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a76      	ldr	r2, [pc, #472]	; (8008368 <DMA_SetConfig+0x234>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d054      	beq.n	800823e <DMA_SetConfig+0x10a>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a74      	ldr	r2, [pc, #464]	; (800836c <DMA_SetConfig+0x238>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d04f      	beq.n	800823e <DMA_SetConfig+0x10a>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a73      	ldr	r2, [pc, #460]	; (8008370 <DMA_SetConfig+0x23c>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d04a      	beq.n	800823e <DMA_SetConfig+0x10a>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a71      	ldr	r2, [pc, #452]	; (8008374 <DMA_SetConfig+0x240>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d045      	beq.n	800823e <DMA_SetConfig+0x10a>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a70      	ldr	r2, [pc, #448]	; (8008378 <DMA_SetConfig+0x244>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d040      	beq.n	800823e <DMA_SetConfig+0x10a>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a6e      	ldr	r2, [pc, #440]	; (800837c <DMA_SetConfig+0x248>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d03b      	beq.n	800823e <DMA_SetConfig+0x10a>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a6d      	ldr	r2, [pc, #436]	; (8008380 <DMA_SetConfig+0x24c>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d036      	beq.n	800823e <DMA_SetConfig+0x10a>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a6b      	ldr	r2, [pc, #428]	; (8008384 <DMA_SetConfig+0x250>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d031      	beq.n	800823e <DMA_SetConfig+0x10a>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a6a      	ldr	r2, [pc, #424]	; (8008388 <DMA_SetConfig+0x254>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d02c      	beq.n	800823e <DMA_SetConfig+0x10a>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a68      	ldr	r2, [pc, #416]	; (800838c <DMA_SetConfig+0x258>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d027      	beq.n	800823e <DMA_SetConfig+0x10a>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a67      	ldr	r2, [pc, #412]	; (8008390 <DMA_SetConfig+0x25c>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d022      	beq.n	800823e <DMA_SetConfig+0x10a>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a65      	ldr	r2, [pc, #404]	; (8008394 <DMA_SetConfig+0x260>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d01d      	beq.n	800823e <DMA_SetConfig+0x10a>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a64      	ldr	r2, [pc, #400]	; (8008398 <DMA_SetConfig+0x264>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d018      	beq.n	800823e <DMA_SetConfig+0x10a>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a62      	ldr	r2, [pc, #392]	; (800839c <DMA_SetConfig+0x268>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d013      	beq.n	800823e <DMA_SetConfig+0x10a>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a61      	ldr	r2, [pc, #388]	; (80083a0 <DMA_SetConfig+0x26c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d00e      	beq.n	800823e <DMA_SetConfig+0x10a>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a5f      	ldr	r2, [pc, #380]	; (80083a4 <DMA_SetConfig+0x270>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d009      	beq.n	800823e <DMA_SetConfig+0x10a>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a5e      	ldr	r2, [pc, #376]	; (80083a8 <DMA_SetConfig+0x274>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d004      	beq.n	800823e <DMA_SetConfig+0x10a>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a5c      	ldr	r2, [pc, #368]	; (80083ac <DMA_SetConfig+0x278>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d101      	bne.n	8008242 <DMA_SetConfig+0x10e>
 800823e:	2301      	movs	r3, #1
 8008240:	e000      	b.n	8008244 <DMA_SetConfig+0x110>
 8008242:	2300      	movs	r3, #0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00d      	beq.n	8008264 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008250:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008256:	2b00      	cmp	r3, #0
 8008258:	d004      	beq.n	8008264 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008262:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a39      	ldr	r2, [pc, #228]	; (8008350 <DMA_SetConfig+0x21c>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d04a      	beq.n	8008304 <DMA_SetConfig+0x1d0>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a38      	ldr	r2, [pc, #224]	; (8008354 <DMA_SetConfig+0x220>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d045      	beq.n	8008304 <DMA_SetConfig+0x1d0>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a36      	ldr	r2, [pc, #216]	; (8008358 <DMA_SetConfig+0x224>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d040      	beq.n	8008304 <DMA_SetConfig+0x1d0>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a35      	ldr	r2, [pc, #212]	; (800835c <DMA_SetConfig+0x228>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d03b      	beq.n	8008304 <DMA_SetConfig+0x1d0>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a33      	ldr	r2, [pc, #204]	; (8008360 <DMA_SetConfig+0x22c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d036      	beq.n	8008304 <DMA_SetConfig+0x1d0>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a32      	ldr	r2, [pc, #200]	; (8008364 <DMA_SetConfig+0x230>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d031      	beq.n	8008304 <DMA_SetConfig+0x1d0>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a30      	ldr	r2, [pc, #192]	; (8008368 <DMA_SetConfig+0x234>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d02c      	beq.n	8008304 <DMA_SetConfig+0x1d0>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a2f      	ldr	r2, [pc, #188]	; (800836c <DMA_SetConfig+0x238>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d027      	beq.n	8008304 <DMA_SetConfig+0x1d0>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a2d      	ldr	r2, [pc, #180]	; (8008370 <DMA_SetConfig+0x23c>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d022      	beq.n	8008304 <DMA_SetConfig+0x1d0>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a2c      	ldr	r2, [pc, #176]	; (8008374 <DMA_SetConfig+0x240>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d01d      	beq.n	8008304 <DMA_SetConfig+0x1d0>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a2a      	ldr	r2, [pc, #168]	; (8008378 <DMA_SetConfig+0x244>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d018      	beq.n	8008304 <DMA_SetConfig+0x1d0>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a29      	ldr	r2, [pc, #164]	; (800837c <DMA_SetConfig+0x248>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d013      	beq.n	8008304 <DMA_SetConfig+0x1d0>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a27      	ldr	r2, [pc, #156]	; (8008380 <DMA_SetConfig+0x24c>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00e      	beq.n	8008304 <DMA_SetConfig+0x1d0>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a26      	ldr	r2, [pc, #152]	; (8008384 <DMA_SetConfig+0x250>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d009      	beq.n	8008304 <DMA_SetConfig+0x1d0>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a24      	ldr	r2, [pc, #144]	; (8008388 <DMA_SetConfig+0x254>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d004      	beq.n	8008304 <DMA_SetConfig+0x1d0>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a23      	ldr	r2, [pc, #140]	; (800838c <DMA_SetConfig+0x258>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d101      	bne.n	8008308 <DMA_SetConfig+0x1d4>
 8008304:	2301      	movs	r3, #1
 8008306:	e000      	b.n	800830a <DMA_SetConfig+0x1d6>
 8008308:	2300      	movs	r3, #0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d059      	beq.n	80083c2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008312:	f003 031f 	and.w	r3, r3, #31
 8008316:	223f      	movs	r2, #63	; 0x3f
 8008318:	409a      	lsls	r2, r3
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800832c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	2b40      	cmp	r3, #64	; 0x40
 800833c:	d138      	bne.n	80083b0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800834e:	e086      	b.n	800845e <DMA_SetConfig+0x32a>
 8008350:	40020010 	.word	0x40020010
 8008354:	40020028 	.word	0x40020028
 8008358:	40020040 	.word	0x40020040
 800835c:	40020058 	.word	0x40020058
 8008360:	40020070 	.word	0x40020070
 8008364:	40020088 	.word	0x40020088
 8008368:	400200a0 	.word	0x400200a0
 800836c:	400200b8 	.word	0x400200b8
 8008370:	40020410 	.word	0x40020410
 8008374:	40020428 	.word	0x40020428
 8008378:	40020440 	.word	0x40020440
 800837c:	40020458 	.word	0x40020458
 8008380:	40020470 	.word	0x40020470
 8008384:	40020488 	.word	0x40020488
 8008388:	400204a0 	.word	0x400204a0
 800838c:	400204b8 	.word	0x400204b8
 8008390:	58025408 	.word	0x58025408
 8008394:	5802541c 	.word	0x5802541c
 8008398:	58025430 	.word	0x58025430
 800839c:	58025444 	.word	0x58025444
 80083a0:	58025458 	.word	0x58025458
 80083a4:	5802546c 	.word	0x5802546c
 80083a8:	58025480 	.word	0x58025480
 80083ac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	60da      	str	r2, [r3, #12]
}
 80083c0:	e04d      	b.n	800845e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a29      	ldr	r2, [pc, #164]	; (800846c <DMA_SetConfig+0x338>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d022      	beq.n	8008412 <DMA_SetConfig+0x2de>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a27      	ldr	r2, [pc, #156]	; (8008470 <DMA_SetConfig+0x33c>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d01d      	beq.n	8008412 <DMA_SetConfig+0x2de>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a26      	ldr	r2, [pc, #152]	; (8008474 <DMA_SetConfig+0x340>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d018      	beq.n	8008412 <DMA_SetConfig+0x2de>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a24      	ldr	r2, [pc, #144]	; (8008478 <DMA_SetConfig+0x344>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d013      	beq.n	8008412 <DMA_SetConfig+0x2de>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a23      	ldr	r2, [pc, #140]	; (800847c <DMA_SetConfig+0x348>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d00e      	beq.n	8008412 <DMA_SetConfig+0x2de>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a21      	ldr	r2, [pc, #132]	; (8008480 <DMA_SetConfig+0x34c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d009      	beq.n	8008412 <DMA_SetConfig+0x2de>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a20      	ldr	r2, [pc, #128]	; (8008484 <DMA_SetConfig+0x350>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d004      	beq.n	8008412 <DMA_SetConfig+0x2de>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a1e      	ldr	r2, [pc, #120]	; (8008488 <DMA_SetConfig+0x354>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d101      	bne.n	8008416 <DMA_SetConfig+0x2e2>
 8008412:	2301      	movs	r3, #1
 8008414:	e000      	b.n	8008418 <DMA_SetConfig+0x2e4>
 8008416:	2300      	movs	r3, #0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d020      	beq.n	800845e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008420:	f003 031f 	and.w	r3, r3, #31
 8008424:	2201      	movs	r2, #1
 8008426:	409a      	lsls	r2, r3
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	2b40      	cmp	r3, #64	; 0x40
 800843a:	d108      	bne.n	800844e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68ba      	ldr	r2, [r7, #8]
 800844a:	60da      	str	r2, [r3, #12]
}
 800844c:	e007      	b.n	800845e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	60da      	str	r2, [r3, #12]
}
 800845e:	bf00      	nop
 8008460:	371c      	adds	r7, #28
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	58025408 	.word	0x58025408
 8008470:	5802541c 	.word	0x5802541c
 8008474:	58025430 	.word	0x58025430
 8008478:	58025444 	.word	0x58025444
 800847c:	58025458 	.word	0x58025458
 8008480:	5802546c 	.word	0x5802546c
 8008484:	58025480 	.word	0x58025480
 8008488:	58025494 	.word	0x58025494

0800848c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a42      	ldr	r2, [pc, #264]	; (80085a4 <DMA_CalcBaseAndBitshift+0x118>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d04a      	beq.n	8008534 <DMA_CalcBaseAndBitshift+0xa8>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a41      	ldr	r2, [pc, #260]	; (80085a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d045      	beq.n	8008534 <DMA_CalcBaseAndBitshift+0xa8>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a3f      	ldr	r2, [pc, #252]	; (80085ac <DMA_CalcBaseAndBitshift+0x120>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d040      	beq.n	8008534 <DMA_CalcBaseAndBitshift+0xa8>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a3e      	ldr	r2, [pc, #248]	; (80085b0 <DMA_CalcBaseAndBitshift+0x124>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d03b      	beq.n	8008534 <DMA_CalcBaseAndBitshift+0xa8>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a3c      	ldr	r2, [pc, #240]	; (80085b4 <DMA_CalcBaseAndBitshift+0x128>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d036      	beq.n	8008534 <DMA_CalcBaseAndBitshift+0xa8>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a3b      	ldr	r2, [pc, #236]	; (80085b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d031      	beq.n	8008534 <DMA_CalcBaseAndBitshift+0xa8>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a39      	ldr	r2, [pc, #228]	; (80085bc <DMA_CalcBaseAndBitshift+0x130>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d02c      	beq.n	8008534 <DMA_CalcBaseAndBitshift+0xa8>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a38      	ldr	r2, [pc, #224]	; (80085c0 <DMA_CalcBaseAndBitshift+0x134>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d027      	beq.n	8008534 <DMA_CalcBaseAndBitshift+0xa8>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a36      	ldr	r2, [pc, #216]	; (80085c4 <DMA_CalcBaseAndBitshift+0x138>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d022      	beq.n	8008534 <DMA_CalcBaseAndBitshift+0xa8>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a35      	ldr	r2, [pc, #212]	; (80085c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d01d      	beq.n	8008534 <DMA_CalcBaseAndBitshift+0xa8>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a33      	ldr	r2, [pc, #204]	; (80085cc <DMA_CalcBaseAndBitshift+0x140>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d018      	beq.n	8008534 <DMA_CalcBaseAndBitshift+0xa8>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a32      	ldr	r2, [pc, #200]	; (80085d0 <DMA_CalcBaseAndBitshift+0x144>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d013      	beq.n	8008534 <DMA_CalcBaseAndBitshift+0xa8>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a30      	ldr	r2, [pc, #192]	; (80085d4 <DMA_CalcBaseAndBitshift+0x148>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d00e      	beq.n	8008534 <DMA_CalcBaseAndBitshift+0xa8>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a2f      	ldr	r2, [pc, #188]	; (80085d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d009      	beq.n	8008534 <DMA_CalcBaseAndBitshift+0xa8>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a2d      	ldr	r2, [pc, #180]	; (80085dc <DMA_CalcBaseAndBitshift+0x150>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d004      	beq.n	8008534 <DMA_CalcBaseAndBitshift+0xa8>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a2c      	ldr	r2, [pc, #176]	; (80085e0 <DMA_CalcBaseAndBitshift+0x154>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d101      	bne.n	8008538 <DMA_CalcBaseAndBitshift+0xac>
 8008534:	2301      	movs	r3, #1
 8008536:	e000      	b.n	800853a <DMA_CalcBaseAndBitshift+0xae>
 8008538:	2300      	movs	r3, #0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d024      	beq.n	8008588 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	b2db      	uxtb	r3, r3
 8008544:	3b10      	subs	r3, #16
 8008546:	4a27      	ldr	r2, [pc, #156]	; (80085e4 <DMA_CalcBaseAndBitshift+0x158>)
 8008548:	fba2 2303 	umull	r2, r3, r2, r3
 800854c:	091b      	lsrs	r3, r3, #4
 800854e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f003 0307 	and.w	r3, r3, #7
 8008556:	4a24      	ldr	r2, [pc, #144]	; (80085e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8008558:	5cd3      	ldrb	r3, [r2, r3]
 800855a:	461a      	mov	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b03      	cmp	r3, #3
 8008564:	d908      	bls.n	8008578 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	4b1f      	ldr	r3, [pc, #124]	; (80085ec <DMA_CalcBaseAndBitshift+0x160>)
 800856e:	4013      	ands	r3, r2
 8008570:	1d1a      	adds	r2, r3, #4
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	659a      	str	r2, [r3, #88]	; 0x58
 8008576:	e00d      	b.n	8008594 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	461a      	mov	r2, r3
 800857e:	4b1b      	ldr	r3, [pc, #108]	; (80085ec <DMA_CalcBaseAndBitshift+0x160>)
 8008580:	4013      	ands	r3, r2
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	6593      	str	r3, [r2, #88]	; 0x58
 8008586:	e005      	b.n	8008594 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	40020010 	.word	0x40020010
 80085a8:	40020028 	.word	0x40020028
 80085ac:	40020040 	.word	0x40020040
 80085b0:	40020058 	.word	0x40020058
 80085b4:	40020070 	.word	0x40020070
 80085b8:	40020088 	.word	0x40020088
 80085bc:	400200a0 	.word	0x400200a0
 80085c0:	400200b8 	.word	0x400200b8
 80085c4:	40020410 	.word	0x40020410
 80085c8:	40020428 	.word	0x40020428
 80085cc:	40020440 	.word	0x40020440
 80085d0:	40020458 	.word	0x40020458
 80085d4:	40020470 	.word	0x40020470
 80085d8:	40020488 	.word	0x40020488
 80085dc:	400204a0 	.word	0x400204a0
 80085e0:	400204b8 	.word	0x400204b8
 80085e4:	aaaaaaab 	.word	0xaaaaaaab
 80085e8:	08016e90 	.word	0x08016e90
 80085ec:	fffffc00 	.word	0xfffffc00

080085f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d120      	bne.n	8008646 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008608:	2b03      	cmp	r3, #3
 800860a:	d858      	bhi.n	80086be <DMA_CheckFifoParam+0xce>
 800860c:	a201      	add	r2, pc, #4	; (adr r2, 8008614 <DMA_CheckFifoParam+0x24>)
 800860e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008612:	bf00      	nop
 8008614:	08008625 	.word	0x08008625
 8008618:	08008637 	.word	0x08008637
 800861c:	08008625 	.word	0x08008625
 8008620:	080086bf 	.word	0x080086bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d048      	beq.n	80086c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008634:	e045      	b.n	80086c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800863e:	d142      	bne.n	80086c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008644:	e03f      	b.n	80086c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800864e:	d123      	bne.n	8008698 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008654:	2b03      	cmp	r3, #3
 8008656:	d838      	bhi.n	80086ca <DMA_CheckFifoParam+0xda>
 8008658:	a201      	add	r2, pc, #4	; (adr r2, 8008660 <DMA_CheckFifoParam+0x70>)
 800865a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865e:	bf00      	nop
 8008660:	08008671 	.word	0x08008671
 8008664:	08008677 	.word	0x08008677
 8008668:	08008671 	.word	0x08008671
 800866c:	08008689 	.word	0x08008689
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	73fb      	strb	r3, [r7, #15]
        break;
 8008674:	e030      	b.n	80086d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d025      	beq.n	80086ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008686:	e022      	b.n	80086ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008690:	d11f      	bne.n	80086d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008696:	e01c      	b.n	80086d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869c:	2b02      	cmp	r3, #2
 800869e:	d902      	bls.n	80086a6 <DMA_CheckFifoParam+0xb6>
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d003      	beq.n	80086ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80086a4:	e018      	b.n	80086d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	73fb      	strb	r3, [r7, #15]
        break;
 80086aa:	e015      	b.n	80086d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00e      	beq.n	80086d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	73fb      	strb	r3, [r7, #15]
    break;
 80086bc:	e00b      	b.n	80086d6 <DMA_CheckFifoParam+0xe6>
        break;
 80086be:	bf00      	nop
 80086c0:	e00a      	b.n	80086d8 <DMA_CheckFifoParam+0xe8>
        break;
 80086c2:	bf00      	nop
 80086c4:	e008      	b.n	80086d8 <DMA_CheckFifoParam+0xe8>
        break;
 80086c6:	bf00      	nop
 80086c8:	e006      	b.n	80086d8 <DMA_CheckFifoParam+0xe8>
        break;
 80086ca:	bf00      	nop
 80086cc:	e004      	b.n	80086d8 <DMA_CheckFifoParam+0xe8>
        break;
 80086ce:	bf00      	nop
 80086d0:	e002      	b.n	80086d8 <DMA_CheckFifoParam+0xe8>
        break;
 80086d2:	bf00      	nop
 80086d4:	e000      	b.n	80086d8 <DMA_CheckFifoParam+0xe8>
    break;
 80086d6:	bf00      	nop
    }
  }

  return status;
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop

080086e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a38      	ldr	r2, [pc, #224]	; (80087dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d022      	beq.n	8008746 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a36      	ldr	r2, [pc, #216]	; (80087e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d01d      	beq.n	8008746 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a35      	ldr	r2, [pc, #212]	; (80087e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d018      	beq.n	8008746 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a33      	ldr	r2, [pc, #204]	; (80087e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d013      	beq.n	8008746 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a32      	ldr	r2, [pc, #200]	; (80087ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d00e      	beq.n	8008746 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a30      	ldr	r2, [pc, #192]	; (80087f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d009      	beq.n	8008746 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a2f      	ldr	r2, [pc, #188]	; (80087f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d004      	beq.n	8008746 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a2d      	ldr	r2, [pc, #180]	; (80087f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d101      	bne.n	800874a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008746:	2301      	movs	r3, #1
 8008748:	e000      	b.n	800874c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800874a:	2300      	movs	r3, #0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d01a      	beq.n	8008786 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	b2db      	uxtb	r3, r3
 8008756:	3b08      	subs	r3, #8
 8008758:	4a28      	ldr	r2, [pc, #160]	; (80087fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800875a:	fba2 2303 	umull	r2, r3, r2, r3
 800875e:	091b      	lsrs	r3, r3, #4
 8008760:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	4b26      	ldr	r3, [pc, #152]	; (8008800 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008766:	4413      	add	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	461a      	mov	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a24      	ldr	r2, [pc, #144]	; (8008804 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008774:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f003 031f 	and.w	r3, r3, #31
 800877c:	2201      	movs	r2, #1
 800877e:	409a      	lsls	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008784:	e024      	b.n	80087d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	b2db      	uxtb	r3, r3
 800878c:	3b10      	subs	r3, #16
 800878e:	4a1e      	ldr	r2, [pc, #120]	; (8008808 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008790:	fba2 2303 	umull	r2, r3, r2, r3
 8008794:	091b      	lsrs	r3, r3, #4
 8008796:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	4a1c      	ldr	r2, [pc, #112]	; (800880c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d806      	bhi.n	80087ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	4a1b      	ldr	r2, [pc, #108]	; (8008810 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d902      	bls.n	80087ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	3308      	adds	r3, #8
 80087ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	4b18      	ldr	r3, [pc, #96]	; (8008814 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	461a      	mov	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a16      	ldr	r2, [pc, #88]	; (8008818 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80087c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f003 031f 	and.w	r3, r3, #31
 80087c8:	2201      	movs	r2, #1
 80087ca:	409a      	lsls	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80087d0:	bf00      	nop
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	58025408 	.word	0x58025408
 80087e0:	5802541c 	.word	0x5802541c
 80087e4:	58025430 	.word	0x58025430
 80087e8:	58025444 	.word	0x58025444
 80087ec:	58025458 	.word	0x58025458
 80087f0:	5802546c 	.word	0x5802546c
 80087f4:	58025480 	.word	0x58025480
 80087f8:	58025494 	.word	0x58025494
 80087fc:	cccccccd 	.word	0xcccccccd
 8008800:	16009600 	.word	0x16009600
 8008804:	58025880 	.word	0x58025880
 8008808:	aaaaaaab 	.word	0xaaaaaaab
 800880c:	400204b8 	.word	0x400204b8
 8008810:	4002040f 	.word	0x4002040f
 8008814:	10008200 	.word	0x10008200
 8008818:	40020880 	.word	0x40020880

0800881c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	b2db      	uxtb	r3, r3
 800882a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d04a      	beq.n	80088c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b08      	cmp	r3, #8
 8008836:	d847      	bhi.n	80088c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a25      	ldr	r2, [pc, #148]	; (80088d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d022      	beq.n	8008888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a24      	ldr	r2, [pc, #144]	; (80088d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d01d      	beq.n	8008888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a22      	ldr	r2, [pc, #136]	; (80088dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d018      	beq.n	8008888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a21      	ldr	r2, [pc, #132]	; (80088e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d013      	beq.n	8008888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a1f      	ldr	r2, [pc, #124]	; (80088e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d00e      	beq.n	8008888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a1e      	ldr	r2, [pc, #120]	; (80088e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d009      	beq.n	8008888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a1c      	ldr	r2, [pc, #112]	; (80088ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d004      	beq.n	8008888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a1b      	ldr	r2, [pc, #108]	; (80088f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d101      	bne.n	800888c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008888:	2301      	movs	r3, #1
 800888a:	e000      	b.n	800888e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800888c:	2300      	movs	r3, #0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00a      	beq.n	80088a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	4b17      	ldr	r3, [pc, #92]	; (80088f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008896:	4413      	add	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	461a      	mov	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a15      	ldr	r2, [pc, #84]	; (80088f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80088a4:	671a      	str	r2, [r3, #112]	; 0x70
 80088a6:	e009      	b.n	80088bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	4b14      	ldr	r3, [pc, #80]	; (80088fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	461a      	mov	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a11      	ldr	r2, [pc, #68]	; (8008900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80088ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	3b01      	subs	r3, #1
 80088c0:	2201      	movs	r2, #1
 80088c2:	409a      	lsls	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80088c8:	bf00      	nop
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	58025408 	.word	0x58025408
 80088d8:	5802541c 	.word	0x5802541c
 80088dc:	58025430 	.word	0x58025430
 80088e0:	58025444 	.word	0x58025444
 80088e4:	58025458 	.word	0x58025458
 80088e8:	5802546c 	.word	0x5802546c
 80088ec:	58025480 	.word	0x58025480
 80088f0:	58025494 	.word	0x58025494
 80088f4:	1600963f 	.word	0x1600963f
 80088f8:	58025940 	.word	0x58025940
 80088fc:	1000823f 	.word	0x1000823f
 8008900:	40020940 	.word	0x40020940

08008904 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008904:	b480      	push	{r7}
 8008906:	b089      	sub	sp, #36	; 0x24
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800890e:	2300      	movs	r3, #0
 8008910:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008912:	4b89      	ldr	r3, [pc, #548]	; (8008b38 <HAL_GPIO_Init+0x234>)
 8008914:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008916:	e194      	b.n	8008c42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	2101      	movs	r1, #1
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	fa01 f303 	lsl.w	r3, r1, r3
 8008924:	4013      	ands	r3, r2
 8008926:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 8186 	beq.w	8008c3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f003 0303 	and.w	r3, r3, #3
 8008938:	2b01      	cmp	r3, #1
 800893a:	d005      	beq.n	8008948 <HAL_GPIO_Init+0x44>
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f003 0303 	and.w	r3, r3, #3
 8008944:	2b02      	cmp	r3, #2
 8008946:	d130      	bne.n	80089aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	005b      	lsls	r3, r3, #1
 8008952:	2203      	movs	r2, #3
 8008954:	fa02 f303 	lsl.w	r3, r2, r3
 8008958:	43db      	mvns	r3, r3
 800895a:	69ba      	ldr	r2, [r7, #24]
 800895c:	4013      	ands	r3, r2
 800895e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	68da      	ldr	r2, [r3, #12]
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	005b      	lsls	r3, r3, #1
 8008968:	fa02 f303 	lsl.w	r3, r2, r3
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	4313      	orrs	r3, r2
 8008970:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	69ba      	ldr	r2, [r7, #24]
 8008976:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800897e:	2201      	movs	r2, #1
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	fa02 f303 	lsl.w	r3, r2, r3
 8008986:	43db      	mvns	r3, r3
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	4013      	ands	r3, r2
 800898c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	091b      	lsrs	r3, r3, #4
 8008994:	f003 0201 	and.w	r2, r3, #1
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	fa02 f303 	lsl.w	r3, r2, r3
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	69ba      	ldr	r2, [r7, #24]
 80089a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f003 0303 	and.w	r3, r3, #3
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	d017      	beq.n	80089e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	2203      	movs	r2, #3
 80089c2:	fa02 f303 	lsl.w	r3, r2, r3
 80089c6:	43db      	mvns	r3, r3
 80089c8:	69ba      	ldr	r2, [r7, #24]
 80089ca:	4013      	ands	r3, r2
 80089cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	689a      	ldr	r2, [r3, #8]
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	fa02 f303 	lsl.w	r3, r2, r3
 80089da:	69ba      	ldr	r2, [r7, #24]
 80089dc:	4313      	orrs	r3, r2
 80089de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	f003 0303 	and.w	r3, r3, #3
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d123      	bne.n	8008a3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	08da      	lsrs	r2, r3, #3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	3208      	adds	r2, #8
 80089fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	f003 0307 	and.w	r3, r3, #7
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	220f      	movs	r2, #15
 8008a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0e:	43db      	mvns	r3, r3
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	4013      	ands	r3, r2
 8008a14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	691a      	ldr	r2, [r3, #16]
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	f003 0307 	and.w	r3, r3, #7
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	fa02 f303 	lsl.w	r3, r2, r3
 8008a26:	69ba      	ldr	r2, [r7, #24]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	08da      	lsrs	r2, r3, #3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	3208      	adds	r2, #8
 8008a34:	69b9      	ldr	r1, [r7, #24]
 8008a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	2203      	movs	r2, #3
 8008a46:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4a:	43db      	mvns	r3, r3
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	4013      	ands	r3, r2
 8008a50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f003 0203 	and.w	r2, r3, #3
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	005b      	lsls	r3, r3, #1
 8008a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a62:	69ba      	ldr	r2, [r7, #24]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 80e0 	beq.w	8008c3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a7c:	4b2f      	ldr	r3, [pc, #188]	; (8008b3c <HAL_GPIO_Init+0x238>)
 8008a7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a82:	4a2e      	ldr	r2, [pc, #184]	; (8008b3c <HAL_GPIO_Init+0x238>)
 8008a84:	f043 0302 	orr.w	r3, r3, #2
 8008a88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008a8c:	4b2b      	ldr	r3, [pc, #172]	; (8008b3c <HAL_GPIO_Init+0x238>)
 8008a8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a92:	f003 0302 	and.w	r3, r3, #2
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a9a:	4a29      	ldr	r2, [pc, #164]	; (8008b40 <HAL_GPIO_Init+0x23c>)
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	089b      	lsrs	r3, r3, #2
 8008aa0:	3302      	adds	r3, #2
 8008aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	f003 0303 	and.w	r3, r3, #3
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	220f      	movs	r2, #15
 8008ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab6:	43db      	mvns	r3, r3
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	4013      	ands	r3, r2
 8008abc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a20      	ldr	r2, [pc, #128]	; (8008b44 <HAL_GPIO_Init+0x240>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d052      	beq.n	8008b6c <HAL_GPIO_Init+0x268>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a1f      	ldr	r2, [pc, #124]	; (8008b48 <HAL_GPIO_Init+0x244>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d031      	beq.n	8008b32 <HAL_GPIO_Init+0x22e>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a1e      	ldr	r2, [pc, #120]	; (8008b4c <HAL_GPIO_Init+0x248>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d02b      	beq.n	8008b2e <HAL_GPIO_Init+0x22a>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a1d      	ldr	r2, [pc, #116]	; (8008b50 <HAL_GPIO_Init+0x24c>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d025      	beq.n	8008b2a <HAL_GPIO_Init+0x226>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a1c      	ldr	r2, [pc, #112]	; (8008b54 <HAL_GPIO_Init+0x250>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d01f      	beq.n	8008b26 <HAL_GPIO_Init+0x222>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a1b      	ldr	r2, [pc, #108]	; (8008b58 <HAL_GPIO_Init+0x254>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d019      	beq.n	8008b22 <HAL_GPIO_Init+0x21e>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a1a      	ldr	r2, [pc, #104]	; (8008b5c <HAL_GPIO_Init+0x258>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d013      	beq.n	8008b1e <HAL_GPIO_Init+0x21a>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a19      	ldr	r2, [pc, #100]	; (8008b60 <HAL_GPIO_Init+0x25c>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d00d      	beq.n	8008b1a <HAL_GPIO_Init+0x216>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a18      	ldr	r2, [pc, #96]	; (8008b64 <HAL_GPIO_Init+0x260>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d007      	beq.n	8008b16 <HAL_GPIO_Init+0x212>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a17      	ldr	r2, [pc, #92]	; (8008b68 <HAL_GPIO_Init+0x264>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d101      	bne.n	8008b12 <HAL_GPIO_Init+0x20e>
 8008b0e:	2309      	movs	r3, #9
 8008b10:	e02d      	b.n	8008b6e <HAL_GPIO_Init+0x26a>
 8008b12:	230a      	movs	r3, #10
 8008b14:	e02b      	b.n	8008b6e <HAL_GPIO_Init+0x26a>
 8008b16:	2308      	movs	r3, #8
 8008b18:	e029      	b.n	8008b6e <HAL_GPIO_Init+0x26a>
 8008b1a:	2307      	movs	r3, #7
 8008b1c:	e027      	b.n	8008b6e <HAL_GPIO_Init+0x26a>
 8008b1e:	2306      	movs	r3, #6
 8008b20:	e025      	b.n	8008b6e <HAL_GPIO_Init+0x26a>
 8008b22:	2305      	movs	r3, #5
 8008b24:	e023      	b.n	8008b6e <HAL_GPIO_Init+0x26a>
 8008b26:	2304      	movs	r3, #4
 8008b28:	e021      	b.n	8008b6e <HAL_GPIO_Init+0x26a>
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	e01f      	b.n	8008b6e <HAL_GPIO_Init+0x26a>
 8008b2e:	2302      	movs	r3, #2
 8008b30:	e01d      	b.n	8008b6e <HAL_GPIO_Init+0x26a>
 8008b32:	2301      	movs	r3, #1
 8008b34:	e01b      	b.n	8008b6e <HAL_GPIO_Init+0x26a>
 8008b36:	bf00      	nop
 8008b38:	58000080 	.word	0x58000080
 8008b3c:	58024400 	.word	0x58024400
 8008b40:	58000400 	.word	0x58000400
 8008b44:	58020000 	.word	0x58020000
 8008b48:	58020400 	.word	0x58020400
 8008b4c:	58020800 	.word	0x58020800
 8008b50:	58020c00 	.word	0x58020c00
 8008b54:	58021000 	.word	0x58021000
 8008b58:	58021400 	.word	0x58021400
 8008b5c:	58021800 	.word	0x58021800
 8008b60:	58021c00 	.word	0x58021c00
 8008b64:	58022000 	.word	0x58022000
 8008b68:	58022400 	.word	0x58022400
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	69fa      	ldr	r2, [r7, #28]
 8008b70:	f002 0203 	and.w	r2, r2, #3
 8008b74:	0092      	lsls	r2, r2, #2
 8008b76:	4093      	lsls	r3, r2
 8008b78:	69ba      	ldr	r2, [r7, #24]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008b7e:	4938      	ldr	r1, [pc, #224]	; (8008c60 <HAL_GPIO_Init+0x35c>)
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	089b      	lsrs	r3, r3, #2
 8008b84:	3302      	adds	r3, #2
 8008b86:	69ba      	ldr	r2, [r7, #24]
 8008b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	43db      	mvns	r3, r3
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d003      	beq.n	8008bb2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008baa:	69ba      	ldr	r2, [r7, #24]
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008bb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	43db      	mvns	r3, r3
 8008bc6:	69ba      	ldr	r2, [r7, #24]
 8008bc8:	4013      	ands	r3, r2
 8008bca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d003      	beq.n	8008be0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008bd8:	69ba      	ldr	r2, [r7, #24]
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008be0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	43db      	mvns	r3, r3
 8008bf2:	69ba      	ldr	r2, [r7, #24]
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d003      	beq.n	8008c0c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	43db      	mvns	r3, r3
 8008c1c:	69ba      	ldr	r2, [r7, #24]
 8008c1e:	4013      	ands	r3, r2
 8008c20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d003      	beq.n	8008c36 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	69ba      	ldr	r2, [r7, #24]
 8008c3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	fa22 f303 	lsr.w	r3, r2, r3
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f47f ae63 	bne.w	8008918 <HAL_GPIO_Init+0x14>
  }
}
 8008c52:	bf00      	nop
 8008c54:	bf00      	nop
 8008c56:	3724      	adds	r7, #36	; 0x24
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	58000400 	.word	0x58000400

08008c64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	691a      	ldr	r2, [r3, #16]
 8008c74:	887b      	ldrh	r3, [r7, #2]
 8008c76:	4013      	ands	r3, r2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	73fb      	strb	r3, [r7, #15]
 8008c80:	e001      	b.n	8008c86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008c82:	2300      	movs	r3, #0
 8008c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	807b      	strh	r3, [r7, #2]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ca4:	787b      	ldrb	r3, [r7, #1]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d003      	beq.n	8008cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008caa:	887a      	ldrh	r2, [r7, #2]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008cb0:	e003      	b.n	8008cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008cb2:	887b      	ldrh	r3, [r7, #2]
 8008cb4:	041a      	lsls	r2, r3, #16
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	619a      	str	r2, [r3, #24]
}
 8008cba:	bf00      	nop
 8008cbc:	370c      	adds	r7, #12
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
	...

08008cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e08b      	b.n	8008df2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d106      	bne.n	8008cf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7fa f8fc 	bl	8002eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2224      	movs	r2, #36	; 0x24
 8008cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f022 0201 	bic.w	r2, r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008d18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	689a      	ldr	r2, [r3, #8]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d107      	bne.n	8008d42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	689a      	ldr	r2, [r3, #8]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d3e:	609a      	str	r2, [r3, #8]
 8008d40:	e006      	b.n	8008d50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	689a      	ldr	r2, [r3, #8]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008d4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d108      	bne.n	8008d6a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d66:	605a      	str	r2, [r3, #4]
 8008d68:	e007      	b.n	8008d7a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	685a      	ldr	r2, [r3, #4]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6859      	ldr	r1, [r3, #4]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	4b1d      	ldr	r3, [pc, #116]	; (8008dfc <HAL_I2C_Init+0x134>)
 8008d86:	430b      	orrs	r3, r1
 8008d88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68da      	ldr	r2, [r3, #12]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	691a      	ldr	r2, [r3, #16]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	430a      	orrs	r2, r1
 8008db2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	69d9      	ldr	r1, [r3, #28]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a1a      	ldr	r2, [r3, #32]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f042 0201 	orr.w	r2, r2, #1
 8008dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2220      	movs	r2, #32
 8008dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	02008000 	.word	0x02008000

08008e00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b088      	sub	sp, #32
 8008e04:	af02      	add	r7, sp, #8
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	607a      	str	r2, [r7, #4]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	817b      	strh	r3, [r7, #10]
 8008e10:	4613      	mov	r3, r2
 8008e12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	2b20      	cmp	r3, #32
 8008e1e:	f040 80fd 	bne.w	800901c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d101      	bne.n	8008e30 <HAL_I2C_Master_Transmit+0x30>
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	e0f6      	b.n	800901e <HAL_I2C_Master_Transmit+0x21e>
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008e38:	f7fa fe00 	bl	8003a3c <HAL_GetTick>
 8008e3c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	2319      	movs	r3, #25
 8008e44:	2201      	movs	r2, #1
 8008e46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 fa0a 	bl	8009264 <I2C_WaitOnFlagUntilTimeout>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e0e1      	b.n	800901e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2221      	movs	r2, #33	; 0x21
 8008e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2210      	movs	r2, #16
 8008e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	893a      	ldrh	r2, [r7, #8]
 8008e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	2bff      	cmp	r3, #255	; 0xff
 8008e8a:	d906      	bls.n	8008e9a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	22ff      	movs	r2, #255	; 0xff
 8008e90:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008e92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e96:	617b      	str	r3, [r7, #20]
 8008e98:	e007      	b.n	8008eaa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ea8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d024      	beq.n	8008efc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb6:	781a      	ldrb	r2, [r3, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eda:	3b01      	subs	r3, #1
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	3301      	adds	r3, #1
 8008eea:	b2da      	uxtb	r2, r3
 8008eec:	8979      	ldrh	r1, [r7, #10]
 8008eee:	4b4e      	ldr	r3, [pc, #312]	; (8009028 <HAL_I2C_Master_Transmit+0x228>)
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f000 fc05 	bl	8009704 <I2C_TransferConfig>
 8008efa:	e066      	b.n	8008fca <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f00:	b2da      	uxtb	r2, r3
 8008f02:	8979      	ldrh	r1, [r7, #10]
 8008f04:	4b48      	ldr	r3, [pc, #288]	; (8009028 <HAL_I2C_Master_Transmit+0x228>)
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 fbfa 	bl	8009704 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008f10:	e05b      	b.n	8008fca <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	6a39      	ldr	r1, [r7, #32]
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f000 f9fd 	bl	8009316 <I2C_WaitOnTXISFlagUntilTimeout>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e07b      	b.n	800901e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2a:	781a      	ldrb	r2, [r3, #0]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f36:	1c5a      	adds	r2, r3, #1
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	3b01      	subs	r3, #1
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d034      	beq.n	8008fca <HAL_I2C_Master_Transmit+0x1ca>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d130      	bne.n	8008fca <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2180      	movs	r1, #128	; 0x80
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f000 f976 	bl	8009264 <I2C_WaitOnFlagUntilTimeout>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e04d      	b.n	800901e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	2bff      	cmp	r3, #255	; 0xff
 8008f8a:	d90e      	bls.n	8008faa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	22ff      	movs	r2, #255	; 0xff
 8008f90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	8979      	ldrh	r1, [r7, #10]
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f000 fbae 	bl	8009704 <I2C_TransferConfig>
 8008fa8:	e00f      	b.n	8008fca <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	8979      	ldrh	r1, [r7, #10]
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f000 fb9d 	bl	8009704 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d19e      	bne.n	8008f12 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	6a39      	ldr	r1, [r7, #32]
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 f9e3 	bl	80093a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d001      	beq.n	8008fe8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e01a      	b.n	800901e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2220      	movs	r2, #32
 8008fee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6859      	ldr	r1, [r3, #4]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	4b0c      	ldr	r3, [pc, #48]	; (800902c <HAL_I2C_Master_Transmit+0x22c>)
 8008ffc:	400b      	ands	r3, r1
 8008ffe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2220      	movs	r2, #32
 8009004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009018:	2300      	movs	r3, #0
 800901a:	e000      	b.n	800901e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800901c:	2302      	movs	r3, #2
  }
}
 800901e:	4618      	mov	r0, r3
 8009020:	3718      	adds	r7, #24
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	80002000 	.word	0x80002000
 800902c:	fe00e800 	.word	0xfe00e800

08009030 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b088      	sub	sp, #32
 8009034:	af02      	add	r7, sp, #8
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	607a      	str	r2, [r7, #4]
 800903a:	461a      	mov	r2, r3
 800903c:	460b      	mov	r3, r1
 800903e:	817b      	strh	r3, [r7, #10]
 8009040:	4613      	mov	r3, r2
 8009042:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b20      	cmp	r3, #32
 800904e:	f040 80db 	bne.w	8009208 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009058:	2b01      	cmp	r3, #1
 800905a:	d101      	bne.n	8009060 <HAL_I2C_Master_Receive+0x30>
 800905c:	2302      	movs	r3, #2
 800905e:	e0d4      	b.n	800920a <HAL_I2C_Master_Receive+0x1da>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009068:	f7fa fce8 	bl	8003a3c <HAL_GetTick>
 800906c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	2319      	movs	r3, #25
 8009074:	2201      	movs	r2, #1
 8009076:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f000 f8f2 	bl	8009264 <I2C_WaitOnFlagUntilTimeout>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e0bf      	b.n	800920a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2222      	movs	r2, #34	; 0x22
 800908e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2210      	movs	r2, #16
 8009096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	893a      	ldrh	r2, [r7, #8]
 80090aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	2bff      	cmp	r3, #255	; 0xff
 80090ba:	d90e      	bls.n	80090da <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	22ff      	movs	r2, #255	; 0xff
 80090c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	8979      	ldrh	r1, [r7, #10]
 80090ca:	4b52      	ldr	r3, [pc, #328]	; (8009214 <HAL_I2C_Master_Receive+0x1e4>)
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 fb16 	bl	8009704 <I2C_TransferConfig>
 80090d8:	e06d      	b.n	80091b6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090de:	b29a      	uxth	r2, r3
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	8979      	ldrh	r1, [r7, #10]
 80090ec:	4b49      	ldr	r3, [pc, #292]	; (8009214 <HAL_I2C_Master_Receive+0x1e4>)
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 fb05 	bl	8009704 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80090fa:	e05c      	b.n	80091b6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	6a39      	ldr	r1, [r7, #32]
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f000 f993 	bl	800942c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e07c      	b.n	800920a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911a:	b2d2      	uxtb	r2, r2
 800911c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009122:	1c5a      	adds	r2, r3, #1
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800912c:	3b01      	subs	r3, #1
 800912e:	b29a      	uxth	r2, r3
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009138:	b29b      	uxth	r3, r3
 800913a:	3b01      	subs	r3, #1
 800913c:	b29a      	uxth	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009146:	b29b      	uxth	r3, r3
 8009148:	2b00      	cmp	r3, #0
 800914a:	d034      	beq.n	80091b6 <HAL_I2C_Master_Receive+0x186>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009150:	2b00      	cmp	r3, #0
 8009152:	d130      	bne.n	80091b6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	2200      	movs	r2, #0
 800915c:	2180      	movs	r1, #128	; 0x80
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f000 f880 	bl	8009264 <I2C_WaitOnFlagUntilTimeout>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d001      	beq.n	800916e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e04d      	b.n	800920a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009172:	b29b      	uxth	r3, r3
 8009174:	2bff      	cmp	r3, #255	; 0xff
 8009176:	d90e      	bls.n	8009196 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	22ff      	movs	r2, #255	; 0xff
 800917c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009182:	b2da      	uxtb	r2, r3
 8009184:	8979      	ldrh	r1, [r7, #10]
 8009186:	2300      	movs	r3, #0
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f000 fab8 	bl	8009704 <I2C_TransferConfig>
 8009194:	e00f      	b.n	80091b6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800919a:	b29a      	uxth	r2, r3
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	8979      	ldrh	r1, [r7, #10]
 80091a8:	2300      	movs	r3, #0
 80091aa:	9300      	str	r3, [sp, #0]
 80091ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 faa7 	bl	8009704 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d19d      	bne.n	80090fc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	6a39      	ldr	r1, [r7, #32]
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 f8ed 	bl	80093a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e01a      	b.n	800920a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2220      	movs	r2, #32
 80091da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6859      	ldr	r1, [r3, #4]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	4b0c      	ldr	r3, [pc, #48]	; (8009218 <HAL_I2C_Master_Receive+0x1e8>)
 80091e8:	400b      	ands	r3, r1
 80091ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2220      	movs	r2, #32
 80091f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	e000      	b.n	800920a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009208:	2302      	movs	r3, #2
  }
}
 800920a:	4618      	mov	r0, r3
 800920c:	3718      	adds	r7, #24
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	80002400 	.word	0x80002400
 8009218:	fe00e800 	.word	0xfe00e800

0800921c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	f003 0302 	and.w	r3, r3, #2
 800922e:	2b02      	cmp	r3, #2
 8009230:	d103      	bne.n	800923a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2200      	movs	r2, #0
 8009238:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	2b01      	cmp	r3, #1
 8009246:	d007      	beq.n	8009258 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	699a      	ldr	r2, [r3, #24]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f042 0201 	orr.w	r2, r2, #1
 8009256:	619a      	str	r2, [r3, #24]
  }
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	603b      	str	r3, [r7, #0]
 8009270:	4613      	mov	r3, r2
 8009272:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009274:	e03b      	b.n	80092ee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009276:	69ba      	ldr	r2, [r7, #24]
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 f962 	bl	8009544 <I2C_IsErrorOccurred>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e041      	b.n	800930e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009290:	d02d      	beq.n	80092ee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009292:	f7fa fbd3 	bl	8003a3c <HAL_GetTick>
 8009296:	4602      	mov	r2, r0
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d302      	bcc.n	80092a8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d122      	bne.n	80092ee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	699a      	ldr	r2, [r3, #24]
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	4013      	ands	r3, r2
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	bf0c      	ite	eq
 80092b8:	2301      	moveq	r3, #1
 80092ba:	2300      	movne	r3, #0
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	461a      	mov	r2, r3
 80092c0:	79fb      	ldrb	r3, [r7, #7]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d113      	bne.n	80092ee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ca:	f043 0220 	orr.w	r2, r3, #32
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2220      	movs	r2, #32
 80092d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e00f      	b.n	800930e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	699a      	ldr	r2, [r3, #24]
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	4013      	ands	r3, r2
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	bf0c      	ite	eq
 80092fe:	2301      	moveq	r3, #1
 8009300:	2300      	movne	r3, #0
 8009302:	b2db      	uxtb	r3, r3
 8009304:	461a      	mov	r2, r3
 8009306:	79fb      	ldrb	r3, [r7, #7]
 8009308:	429a      	cmp	r2, r3
 800930a:	d0b4      	beq.n	8009276 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	60f8      	str	r0, [r7, #12]
 800931e:	60b9      	str	r1, [r7, #8]
 8009320:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009322:	e033      	b.n	800938c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	68b9      	ldr	r1, [r7, #8]
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 f90b 	bl	8009544 <I2C_IsErrorOccurred>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e031      	b.n	800939c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800933e:	d025      	beq.n	800938c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009340:	f7fa fb7c 	bl	8003a3c <HAL_GetTick>
 8009344:	4602      	mov	r2, r0
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	429a      	cmp	r2, r3
 800934e:	d302      	bcc.n	8009356 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d11a      	bne.n	800938c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	f003 0302 	and.w	r3, r3, #2
 8009360:	2b02      	cmp	r3, #2
 8009362:	d013      	beq.n	800938c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009368:	f043 0220 	orr.w	r2, r3, #32
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2220      	movs	r2, #32
 8009374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e007      	b.n	800939c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	699b      	ldr	r3, [r3, #24]
 8009392:	f003 0302 	and.w	r3, r3, #2
 8009396:	2b02      	cmp	r3, #2
 8009398:	d1c4      	bne.n	8009324 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093b0:	e02f      	b.n	8009412 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	68b9      	ldr	r1, [r7, #8]
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f000 f8c4 	bl	8009544 <I2C_IsErrorOccurred>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d001      	beq.n	80093c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e02d      	b.n	8009422 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093c6:	f7fa fb39 	bl	8003a3c <HAL_GetTick>
 80093ca:	4602      	mov	r2, r0
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d302      	bcc.n	80093dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d11a      	bne.n	8009412 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	f003 0320 	and.w	r3, r3, #32
 80093e6:	2b20      	cmp	r3, #32
 80093e8:	d013      	beq.n	8009412 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ee:	f043 0220 	orr.w	r2, r3, #32
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2220      	movs	r2, #32
 80093fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e007      	b.n	8009422 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	f003 0320 	and.w	r3, r3, #32
 800941c:	2b20      	cmp	r3, #32
 800941e:	d1c8      	bne.n	80093b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
	...

0800942c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800943c:	e071      	b.n	8009522 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	68b9      	ldr	r1, [r7, #8]
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f000 f87e 	bl	8009544 <I2C_IsErrorOccurred>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	699b      	ldr	r3, [r3, #24]
 8009458:	f003 0320 	and.w	r3, r3, #32
 800945c:	2b20      	cmp	r3, #32
 800945e:	d13b      	bne.n	80094d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009460:	7dfb      	ldrb	r3, [r7, #23]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d138      	bne.n	80094d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	f003 0304 	and.w	r3, r3, #4
 8009470:	2b04      	cmp	r3, #4
 8009472:	d105      	bne.n	8009480 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009478:	2b00      	cmp	r3, #0
 800947a:	d001      	beq.n	8009480 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	f003 0310 	and.w	r3, r3, #16
 800948a:	2b10      	cmp	r3, #16
 800948c:	d121      	bne.n	80094d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2210      	movs	r2, #16
 8009494:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2204      	movs	r2, #4
 800949a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2220      	movs	r2, #32
 80094a2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6859      	ldr	r1, [r3, #4]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	4b24      	ldr	r3, [pc, #144]	; (8009540 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80094b0:	400b      	ands	r3, r1
 80094b2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2220      	movs	r2, #32
 80094b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	75fb      	strb	r3, [r7, #23]
 80094d0:	e002      	b.n	80094d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80094d8:	f7fa fab0 	bl	8003a3c <HAL_GetTick>
 80094dc:	4602      	mov	r2, r0
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	1ad3      	subs	r3, r2, r3
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d302      	bcc.n	80094ee <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d119      	bne.n	8009522 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d116      	bne.n	8009522 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	f003 0304 	and.w	r3, r3, #4
 80094fe:	2b04      	cmp	r3, #4
 8009500:	d00f      	beq.n	8009522 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009506:	f043 0220 	orr.w	r2, r3, #32
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2220      	movs	r2, #32
 8009512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	f003 0304 	and.w	r3, r3, #4
 800952c:	2b04      	cmp	r3, #4
 800952e:	d002      	beq.n	8009536 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d083      	beq.n	800943e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009536:	7dfb      	ldrb	r3, [r7, #23]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3718      	adds	r7, #24
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	fe00e800 	.word	0xfe00e800

08009544 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b08a      	sub	sp, #40	; 0x28
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	f003 0310 	and.w	r3, r3, #16
 800956c:	2b00      	cmp	r3, #0
 800956e:	d068      	beq.n	8009642 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2210      	movs	r2, #16
 8009576:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009578:	e049      	b.n	800960e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009580:	d045      	beq.n	800960e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009582:	f7fa fa5b 	bl	8003a3c <HAL_GetTick>
 8009586:	4602      	mov	r2, r0
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	429a      	cmp	r2, r3
 8009590:	d302      	bcc.n	8009598 <I2C_IsErrorOccurred+0x54>
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d13a      	bne.n	800960e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095ba:	d121      	bne.n	8009600 <I2C_IsErrorOccurred+0xbc>
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095c2:	d01d      	beq.n	8009600 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80095c4:	7cfb      	ldrb	r3, [r7, #19]
 80095c6:	2b20      	cmp	r3, #32
 80095c8:	d01a      	beq.n	8009600 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80095da:	f7fa fa2f 	bl	8003a3c <HAL_GetTick>
 80095de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095e0:	e00e      	b.n	8009600 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80095e2:	f7fa fa2b 	bl	8003a3c <HAL_GetTick>
 80095e6:	4602      	mov	r2, r0
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	2b19      	cmp	r3, #25
 80095ee:	d907      	bls.n	8009600 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	f043 0320 	orr.w	r3, r3, #32
 80095f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80095fe:	e006      	b.n	800960e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	f003 0320 	and.w	r3, r3, #32
 800960a:	2b20      	cmp	r3, #32
 800960c:	d1e9      	bne.n	80095e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	f003 0320 	and.w	r3, r3, #32
 8009618:	2b20      	cmp	r3, #32
 800961a:	d003      	beq.n	8009624 <I2C_IsErrorOccurred+0xe0>
 800961c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009620:	2b00      	cmp	r3, #0
 8009622:	d0aa      	beq.n	800957a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009628:	2b00      	cmp	r3, #0
 800962a:	d103      	bne.n	8009634 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2220      	movs	r2, #32
 8009632:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	f043 0304 	orr.w	r3, r3, #4
 800963a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00b      	beq.n	800966c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	f043 0301 	orr.w	r3, r3, #1
 800965a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009664:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00b      	beq.n	800968e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009676:	6a3b      	ldr	r3, [r7, #32]
 8009678:	f043 0308 	orr.w	r3, r3, #8
 800967c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009686:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00b      	beq.n	80096b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009698:	6a3b      	ldr	r3, [r7, #32]
 800969a:	f043 0302 	orr.w	r3, r3, #2
 800969e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80096b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d01c      	beq.n	80096f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f7ff fdaf 	bl	800921c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	6859      	ldr	r1, [r3, #4]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	4b0d      	ldr	r3, [pc, #52]	; (8009700 <I2C_IsErrorOccurred+0x1bc>)
 80096ca:	400b      	ands	r3, r1
 80096cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096d2:	6a3b      	ldr	r3, [r7, #32]
 80096d4:	431a      	orrs	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2220      	movs	r2, #32
 80096de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80096f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3728      	adds	r7, #40	; 0x28
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	fe00e800 	.word	0xfe00e800

08009704 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009704:	b480      	push	{r7}
 8009706:	b087      	sub	sp, #28
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	607b      	str	r3, [r7, #4]
 800970e:	460b      	mov	r3, r1
 8009710:	817b      	strh	r3, [r7, #10]
 8009712:	4613      	mov	r3, r2
 8009714:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009716:	897b      	ldrh	r3, [r7, #10]
 8009718:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800971c:	7a7b      	ldrb	r3, [r7, #9]
 800971e:	041b      	lsls	r3, r3, #16
 8009720:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009724:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	4313      	orrs	r3, r2
 800972e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009732:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	0d5b      	lsrs	r3, r3, #21
 800973e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009742:	4b08      	ldr	r3, [pc, #32]	; (8009764 <I2C_TransferConfig+0x60>)
 8009744:	430b      	orrs	r3, r1
 8009746:	43db      	mvns	r3, r3
 8009748:	ea02 0103 	and.w	r1, r2, r3
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	697a      	ldr	r2, [r7, #20]
 8009752:	430a      	orrs	r2, r1
 8009754:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009756:	bf00      	nop
 8009758:	371c      	adds	r7, #28
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	03ff63ff 	.word	0x03ff63ff

08009768 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b20      	cmp	r3, #32
 800977c:	d138      	bne.n	80097f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009784:	2b01      	cmp	r3, #1
 8009786:	d101      	bne.n	800978c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009788:	2302      	movs	r3, #2
 800978a:	e032      	b.n	80097f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2224      	movs	r2, #36	; 0x24
 8009798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f022 0201 	bic.w	r2, r2, #1
 80097aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80097ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6819      	ldr	r1, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	683a      	ldr	r2, [r7, #0]
 80097c8:	430a      	orrs	r2, r1
 80097ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f042 0201 	orr.w	r2, r2, #1
 80097da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2220      	movs	r2, #32
 80097e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	e000      	b.n	80097f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80097f0:	2302      	movs	r3, #2
  }
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr

080097fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80097fe:	b480      	push	{r7}
 8009800:	b085      	sub	sp, #20
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2b20      	cmp	r3, #32
 8009812:	d139      	bne.n	8009888 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800981a:	2b01      	cmp	r3, #1
 800981c:	d101      	bne.n	8009822 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800981e:	2302      	movs	r3, #2
 8009820:	e033      	b.n	800988a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2224      	movs	r2, #36	; 0x24
 800982e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f022 0201 	bic.w	r2, r2, #1
 8009840:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009850:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	021b      	lsls	r3, r3, #8
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	4313      	orrs	r3, r2
 800985a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f042 0201 	orr.w	r2, r2, #1
 8009872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2220      	movs	r2, #32
 8009878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	e000      	b.n	800988a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009888:	2302      	movs	r3, #2
  }
}
 800988a:	4618      	mov	r0, r3
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
	...

08009898 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009898:	b480      	push	{r7}
 800989a:	b085      	sub	sp, #20
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098a0:	4b0d      	ldr	r3, [pc, #52]	; (80098d8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80098a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80098a6:	4a0c      	ldr	r2, [pc, #48]	; (80098d8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80098a8:	f043 0302 	orr.w	r3, r3, #2
 80098ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80098b0:	4b09      	ldr	r3, [pc, #36]	; (80098d8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80098b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80098b6:	f003 0302 	and.w	r3, r3, #2
 80098ba:	60fb      	str	r3, [r7, #12]
 80098bc:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80098be:	4b07      	ldr	r3, [pc, #28]	; (80098dc <HAL_I2CEx_EnableFastModePlus+0x44>)
 80098c0:	685a      	ldr	r2, [r3, #4]
 80098c2:	4906      	ldr	r1, [pc, #24]	; (80098dc <HAL_I2CEx_EnableFastModePlus+0x44>)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	604b      	str	r3, [r1, #4]
}
 80098ca:	bf00      	nop
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	58024400 	.word	0x58024400
 80098dc:	58000400 	.word	0x58000400

080098e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80098e8:	4b19      	ldr	r3, [pc, #100]	; (8009950 <HAL_PWREx_ConfigSupply+0x70>)
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	f003 0304 	and.w	r3, r3, #4
 80098f0:	2b04      	cmp	r3, #4
 80098f2:	d00a      	beq.n	800990a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80098f4:	4b16      	ldr	r3, [pc, #88]	; (8009950 <HAL_PWREx_ConfigSupply+0x70>)
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	f003 0307 	and.w	r3, r3, #7
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d001      	beq.n	8009906 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e01f      	b.n	8009946 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	e01d      	b.n	8009946 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800990a:	4b11      	ldr	r3, [pc, #68]	; (8009950 <HAL_PWREx_ConfigSupply+0x70>)
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	f023 0207 	bic.w	r2, r3, #7
 8009912:	490f      	ldr	r1, [pc, #60]	; (8009950 <HAL_PWREx_ConfigSupply+0x70>)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4313      	orrs	r3, r2
 8009918:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800991a:	f7fa f88f 	bl	8003a3c <HAL_GetTick>
 800991e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009920:	e009      	b.n	8009936 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009922:	f7fa f88b 	bl	8003a3c <HAL_GetTick>
 8009926:	4602      	mov	r2, r0
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009930:	d901      	bls.n	8009936 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e007      	b.n	8009946 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009936:	4b06      	ldr	r3, [pc, #24]	; (8009950 <HAL_PWREx_ConfigSupply+0x70>)
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800993e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009942:	d1ee      	bne.n	8009922 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	58024800 	.word	0x58024800

08009954 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b08c      	sub	sp, #48	; 0x30
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d102      	bne.n	8009968 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	f000 bc48 	b.w	800a1f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 0301 	and.w	r3, r3, #1
 8009970:	2b00      	cmp	r3, #0
 8009972:	f000 8088 	beq.w	8009a86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009976:	4b99      	ldr	r3, [pc, #612]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800997e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009980:	4b96      	ldr	r3, [pc, #600]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009984:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009988:	2b10      	cmp	r3, #16
 800998a:	d007      	beq.n	800999c <HAL_RCC_OscConfig+0x48>
 800998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998e:	2b18      	cmp	r3, #24
 8009990:	d111      	bne.n	80099b6 <HAL_RCC_OscConfig+0x62>
 8009992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009994:	f003 0303 	and.w	r3, r3, #3
 8009998:	2b02      	cmp	r3, #2
 800999a:	d10c      	bne.n	80099b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800999c:	4b8f      	ldr	r3, [pc, #572]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d06d      	beq.n	8009a84 <HAL_RCC_OscConfig+0x130>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d169      	bne.n	8009a84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	f000 bc21 	b.w	800a1f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099be:	d106      	bne.n	80099ce <HAL_RCC_OscConfig+0x7a>
 80099c0:	4b86      	ldr	r3, [pc, #536]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a85      	ldr	r2, [pc, #532]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 80099c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099ca:	6013      	str	r3, [r2, #0]
 80099cc:	e02e      	b.n	8009a2c <HAL_RCC_OscConfig+0xd8>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10c      	bne.n	80099f0 <HAL_RCC_OscConfig+0x9c>
 80099d6:	4b81      	ldr	r3, [pc, #516]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a80      	ldr	r2, [pc, #512]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 80099dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099e0:	6013      	str	r3, [r2, #0]
 80099e2:	4b7e      	ldr	r3, [pc, #504]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a7d      	ldr	r2, [pc, #500]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 80099e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099ec:	6013      	str	r3, [r2, #0]
 80099ee:	e01d      	b.n	8009a2c <HAL_RCC_OscConfig+0xd8>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099f8:	d10c      	bne.n	8009a14 <HAL_RCC_OscConfig+0xc0>
 80099fa:	4b78      	ldr	r3, [pc, #480]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a77      	ldr	r2, [pc, #476]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a04:	6013      	str	r3, [r2, #0]
 8009a06:	4b75      	ldr	r3, [pc, #468]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a74      	ldr	r2, [pc, #464]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a10:	6013      	str	r3, [r2, #0]
 8009a12:	e00b      	b.n	8009a2c <HAL_RCC_OscConfig+0xd8>
 8009a14:	4b71      	ldr	r3, [pc, #452]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a70      	ldr	r2, [pc, #448]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	4b6e      	ldr	r3, [pc, #440]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a6d      	ldr	r2, [pc, #436]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d013      	beq.n	8009a5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a34:	f7fa f802 	bl	8003a3c <HAL_GetTick>
 8009a38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a3a:	e008      	b.n	8009a4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a3c:	f7f9 fffe 	bl	8003a3c <HAL_GetTick>
 8009a40:	4602      	mov	r2, r0
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	2b64      	cmp	r3, #100	; 0x64
 8009a48:	d901      	bls.n	8009a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e3d4      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a4e:	4b63      	ldr	r3, [pc, #396]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0f0      	beq.n	8009a3c <HAL_RCC_OscConfig+0xe8>
 8009a5a:	e014      	b.n	8009a86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a5c:	f7f9 ffee 	bl	8003a3c <HAL_GetTick>
 8009a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a62:	e008      	b.n	8009a76 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a64:	f7f9 ffea 	bl	8003a3c <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	2b64      	cmp	r3, #100	; 0x64
 8009a70:	d901      	bls.n	8009a76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e3c0      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a76:	4b59      	ldr	r3, [pc, #356]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1f0      	bne.n	8009a64 <HAL_RCC_OscConfig+0x110>
 8009a82:	e000      	b.n	8009a86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0302 	and.w	r3, r3, #2
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f000 80ca 	beq.w	8009c28 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a94:	4b51      	ldr	r3, [pc, #324]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a9e:	4b4f      	ldr	r3, [pc, #316]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d007      	beq.n	8009aba <HAL_RCC_OscConfig+0x166>
 8009aaa:	6a3b      	ldr	r3, [r7, #32]
 8009aac:	2b18      	cmp	r3, #24
 8009aae:	d156      	bne.n	8009b5e <HAL_RCC_OscConfig+0x20a>
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	f003 0303 	and.w	r3, r3, #3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d151      	bne.n	8009b5e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009aba:	4b48      	ldr	r3, [pc, #288]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f003 0304 	and.w	r3, r3, #4
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d005      	beq.n	8009ad2 <HAL_RCC_OscConfig+0x17e>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d101      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e392      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ad2:	4b42      	ldr	r3, [pc, #264]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f023 0219 	bic.w	r2, r3, #25
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	493f      	ldr	r1, [pc, #252]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ae4:	f7f9 ffaa 	bl	8003a3c <HAL_GetTick>
 8009ae8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009aea:	e008      	b.n	8009afe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009aec:	f7f9 ffa6 	bl	8003a3c <HAL_GetTick>
 8009af0:	4602      	mov	r2, r0
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d901      	bls.n	8009afe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009afa:	2303      	movs	r3, #3
 8009afc:	e37c      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009afe:	4b37      	ldr	r3, [pc, #220]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f003 0304 	and.w	r3, r3, #4
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d0f0      	beq.n	8009aec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b0a:	f7f9 ffa3 	bl	8003a54 <HAL_GetREVID>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	f241 0203 	movw	r2, #4099	; 0x1003
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d817      	bhi.n	8009b48 <HAL_RCC_OscConfig+0x1f4>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	2b40      	cmp	r3, #64	; 0x40
 8009b1e:	d108      	bne.n	8009b32 <HAL_RCC_OscConfig+0x1de>
 8009b20:	4b2e      	ldr	r3, [pc, #184]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009b28:	4a2c      	ldr	r2, [pc, #176]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b2e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b30:	e07a      	b.n	8009c28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b32:	4b2a      	ldr	r3, [pc, #168]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	031b      	lsls	r3, r3, #12
 8009b40:	4926      	ldr	r1, [pc, #152]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009b42:	4313      	orrs	r3, r2
 8009b44:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b46:	e06f      	b.n	8009c28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b48:	4b24      	ldr	r3, [pc, #144]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	061b      	lsls	r3, r3, #24
 8009b56:	4921      	ldr	r1, [pc, #132]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b5c:	e064      	b.n	8009c28 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d047      	beq.n	8009bf6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009b66:	4b1d      	ldr	r3, [pc, #116]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f023 0219 	bic.w	r2, r3, #25
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	491a      	ldr	r1, [pc, #104]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009b74:	4313      	orrs	r3, r2
 8009b76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b78:	f7f9 ff60 	bl	8003a3c <HAL_GetTick>
 8009b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b7e:	e008      	b.n	8009b92 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b80:	f7f9 ff5c 	bl	8003a3c <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d901      	bls.n	8009b92 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e332      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b92:	4b12      	ldr	r3, [pc, #72]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 0304 	and.w	r3, r3, #4
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0f0      	beq.n	8009b80 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b9e:	f7f9 ff59 	bl	8003a54 <HAL_GetREVID>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	f241 0203 	movw	r2, #4099	; 0x1003
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d819      	bhi.n	8009be0 <HAL_RCC_OscConfig+0x28c>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	2b40      	cmp	r3, #64	; 0x40
 8009bb2:	d108      	bne.n	8009bc6 <HAL_RCC_OscConfig+0x272>
 8009bb4:	4b09      	ldr	r3, [pc, #36]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009bbc:	4a07      	ldr	r2, [pc, #28]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bc2:	6053      	str	r3, [r2, #4]
 8009bc4:	e030      	b.n	8009c28 <HAL_RCC_OscConfig+0x2d4>
 8009bc6:	4b05      	ldr	r3, [pc, #20]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	031b      	lsls	r3, r3, #12
 8009bd4:	4901      	ldr	r1, [pc, #4]	; (8009bdc <HAL_RCC_OscConfig+0x288>)
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	604b      	str	r3, [r1, #4]
 8009bda:	e025      	b.n	8009c28 <HAL_RCC_OscConfig+0x2d4>
 8009bdc:	58024400 	.word	0x58024400
 8009be0:	4b9a      	ldr	r3, [pc, #616]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	061b      	lsls	r3, r3, #24
 8009bee:	4997      	ldr	r1, [pc, #604]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	604b      	str	r3, [r1, #4]
 8009bf4:	e018      	b.n	8009c28 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009bf6:	4b95      	ldr	r3, [pc, #596]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a94      	ldr	r2, [pc, #592]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009bfc:	f023 0301 	bic.w	r3, r3, #1
 8009c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c02:	f7f9 ff1b 	bl	8003a3c <HAL_GetTick>
 8009c06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009c08:	e008      	b.n	8009c1c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c0a:	f7f9 ff17 	bl	8003a3c <HAL_GetTick>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	1ad3      	subs	r3, r2, r3
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d901      	bls.n	8009c1c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e2ed      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009c1c:	4b8b      	ldr	r3, [pc, #556]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 0304 	and.w	r3, r3, #4
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1f0      	bne.n	8009c0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0310 	and.w	r3, r3, #16
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 80a9 	beq.w	8009d88 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c36:	4b85      	ldr	r3, [pc, #532]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c3e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c40:	4b82      	ldr	r3, [pc, #520]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c44:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	2b08      	cmp	r3, #8
 8009c4a:	d007      	beq.n	8009c5c <HAL_RCC_OscConfig+0x308>
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	2b18      	cmp	r3, #24
 8009c50:	d13a      	bne.n	8009cc8 <HAL_RCC_OscConfig+0x374>
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f003 0303 	and.w	r3, r3, #3
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d135      	bne.n	8009cc8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c5c:	4b7b      	ldr	r3, [pc, #492]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d005      	beq.n	8009c74 <HAL_RCC_OscConfig+0x320>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	69db      	ldr	r3, [r3, #28]
 8009c6c:	2b80      	cmp	r3, #128	; 0x80
 8009c6e:	d001      	beq.n	8009c74 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e2c1      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c74:	f7f9 feee 	bl	8003a54 <HAL_GetREVID>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d817      	bhi.n	8009cb2 <HAL_RCC_OscConfig+0x35e>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	2b20      	cmp	r3, #32
 8009c88:	d108      	bne.n	8009c9c <HAL_RCC_OscConfig+0x348>
 8009c8a:	4b70      	ldr	r3, [pc, #448]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009c92:	4a6e      	ldr	r2, [pc, #440]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009c94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c98:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c9a:	e075      	b.n	8009d88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c9c:	4b6b      	ldr	r3, [pc, #428]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6a1b      	ldr	r3, [r3, #32]
 8009ca8:	069b      	lsls	r3, r3, #26
 8009caa:	4968      	ldr	r1, [pc, #416]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009cac:	4313      	orrs	r3, r2
 8009cae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009cb0:	e06a      	b.n	8009d88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009cb2:	4b66      	ldr	r3, [pc, #408]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009cb4:	68db      	ldr	r3, [r3, #12]
 8009cb6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	061b      	lsls	r3, r3, #24
 8009cc0:	4962      	ldr	r1, [pc, #392]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009cc6:	e05f      	b.n	8009d88 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	69db      	ldr	r3, [r3, #28]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d042      	beq.n	8009d56 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009cd0:	4b5e      	ldr	r3, [pc, #376]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a5d      	ldr	r2, [pc, #372]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cdc:	f7f9 feae 	bl	8003a3c <HAL_GetTick>
 8009ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ce2:	e008      	b.n	8009cf6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009ce4:	f7f9 feaa 	bl	8003a3c <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	d901      	bls.n	8009cf6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e280      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009cf6:	4b55      	ldr	r3, [pc, #340]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d0f0      	beq.n	8009ce4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d02:	f7f9 fea7 	bl	8003a54 <HAL_GetREVID>
 8009d06:	4603      	mov	r3, r0
 8009d08:	f241 0203 	movw	r2, #4099	; 0x1003
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d817      	bhi.n	8009d40 <HAL_RCC_OscConfig+0x3ec>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a1b      	ldr	r3, [r3, #32]
 8009d14:	2b20      	cmp	r3, #32
 8009d16:	d108      	bne.n	8009d2a <HAL_RCC_OscConfig+0x3d6>
 8009d18:	4b4c      	ldr	r3, [pc, #304]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009d20:	4a4a      	ldr	r2, [pc, #296]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009d22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d26:	6053      	str	r3, [r2, #4]
 8009d28:	e02e      	b.n	8009d88 <HAL_RCC_OscConfig+0x434>
 8009d2a:	4b48      	ldr	r3, [pc, #288]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a1b      	ldr	r3, [r3, #32]
 8009d36:	069b      	lsls	r3, r3, #26
 8009d38:	4944      	ldr	r1, [pc, #272]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	604b      	str	r3, [r1, #4]
 8009d3e:	e023      	b.n	8009d88 <HAL_RCC_OscConfig+0x434>
 8009d40:	4b42      	ldr	r3, [pc, #264]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6a1b      	ldr	r3, [r3, #32]
 8009d4c:	061b      	lsls	r3, r3, #24
 8009d4e:	493f      	ldr	r1, [pc, #252]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009d50:	4313      	orrs	r3, r2
 8009d52:	60cb      	str	r3, [r1, #12]
 8009d54:	e018      	b.n	8009d88 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009d56:	4b3d      	ldr	r3, [pc, #244]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a3c      	ldr	r2, [pc, #240]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d62:	f7f9 fe6b 	bl	8003a3c <HAL_GetTick>
 8009d66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009d68:	e008      	b.n	8009d7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009d6a:	f7f9 fe67 	bl	8003a3c <HAL_GetTick>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d901      	bls.n	8009d7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e23d      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009d7c:	4b33      	ldr	r3, [pc, #204]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1f0      	bne.n	8009d6a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 0308 	and.w	r3, r3, #8
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d036      	beq.n	8009e02 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	695b      	ldr	r3, [r3, #20]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d019      	beq.n	8009dd0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d9c:	4b2b      	ldr	r3, [pc, #172]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009da0:	4a2a      	ldr	r2, [pc, #168]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009da2:	f043 0301 	orr.w	r3, r3, #1
 8009da6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009da8:	f7f9 fe48 	bl	8003a3c <HAL_GetTick>
 8009dac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009dae:	e008      	b.n	8009dc2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009db0:	f7f9 fe44 	bl	8003a3c <HAL_GetTick>
 8009db4:	4602      	mov	r2, r0
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d901      	bls.n	8009dc2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	e21a      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009dc2:	4b22      	ldr	r3, [pc, #136]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dc6:	f003 0302 	and.w	r3, r3, #2
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0f0      	beq.n	8009db0 <HAL_RCC_OscConfig+0x45c>
 8009dce:	e018      	b.n	8009e02 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009dd0:	4b1e      	ldr	r3, [pc, #120]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dd4:	4a1d      	ldr	r2, [pc, #116]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009dd6:	f023 0301 	bic.w	r3, r3, #1
 8009dda:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ddc:	f7f9 fe2e 	bl	8003a3c <HAL_GetTick>
 8009de0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009de2:	e008      	b.n	8009df6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009de4:	f7f9 fe2a 	bl	8003a3c <HAL_GetTick>
 8009de8:	4602      	mov	r2, r0
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	1ad3      	subs	r3, r2, r3
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	d901      	bls.n	8009df6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009df2:	2303      	movs	r3, #3
 8009df4:	e200      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009df6:	4b15      	ldr	r3, [pc, #84]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dfa:	f003 0302 	and.w	r3, r3, #2
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1f0      	bne.n	8009de4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 0320 	and.w	r3, r3, #32
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d039      	beq.n	8009e82 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d01c      	beq.n	8009e50 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009e16:	4b0d      	ldr	r3, [pc, #52]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a0c      	ldr	r2, [pc, #48]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009e1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009e20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009e22:	f7f9 fe0b 	bl	8003a3c <HAL_GetTick>
 8009e26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e28:	e008      	b.n	8009e3c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e2a:	f7f9 fe07 	bl	8003a3c <HAL_GetTick>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	1ad3      	subs	r3, r2, r3
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d901      	bls.n	8009e3c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e1dd      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e3c:	4b03      	ldr	r3, [pc, #12]	; (8009e4c <HAL_RCC_OscConfig+0x4f8>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d0f0      	beq.n	8009e2a <HAL_RCC_OscConfig+0x4d6>
 8009e48:	e01b      	b.n	8009e82 <HAL_RCC_OscConfig+0x52e>
 8009e4a:	bf00      	nop
 8009e4c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009e50:	4b9b      	ldr	r3, [pc, #620]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a9a      	ldr	r2, [pc, #616]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009e56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009e5c:	f7f9 fdee 	bl	8003a3c <HAL_GetTick>
 8009e60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009e62:	e008      	b.n	8009e76 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e64:	f7f9 fdea 	bl	8003a3c <HAL_GetTick>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d901      	bls.n	8009e76 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e1c0      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009e76:	4b92      	ldr	r3, [pc, #584]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1f0      	bne.n	8009e64 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 0304 	and.w	r3, r3, #4
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 8081 	beq.w	8009f92 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009e90:	4b8c      	ldr	r3, [pc, #560]	; (800a0c4 <HAL_RCC_OscConfig+0x770>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a8b      	ldr	r2, [pc, #556]	; (800a0c4 <HAL_RCC_OscConfig+0x770>)
 8009e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e9c:	f7f9 fdce 	bl	8003a3c <HAL_GetTick>
 8009ea0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ea2:	e008      	b.n	8009eb6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ea4:	f7f9 fdca 	bl	8003a3c <HAL_GetTick>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	2b64      	cmp	r3, #100	; 0x64
 8009eb0:	d901      	bls.n	8009eb6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e1a0      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009eb6:	4b83      	ldr	r3, [pc, #524]	; (800a0c4 <HAL_RCC_OscConfig+0x770>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0f0      	beq.n	8009ea4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d106      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x584>
 8009eca:	4b7d      	ldr	r3, [pc, #500]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ece:	4a7c      	ldr	r2, [pc, #496]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009ed0:	f043 0301 	orr.w	r3, r3, #1
 8009ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ed6:	e02d      	b.n	8009f34 <HAL_RCC_OscConfig+0x5e0>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10c      	bne.n	8009efa <HAL_RCC_OscConfig+0x5a6>
 8009ee0:	4b77      	ldr	r3, [pc, #476]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee4:	4a76      	ldr	r2, [pc, #472]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009ee6:	f023 0301 	bic.w	r3, r3, #1
 8009eea:	6713      	str	r3, [r2, #112]	; 0x70
 8009eec:	4b74      	ldr	r3, [pc, #464]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef0:	4a73      	ldr	r2, [pc, #460]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009ef2:	f023 0304 	bic.w	r3, r3, #4
 8009ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8009ef8:	e01c      	b.n	8009f34 <HAL_RCC_OscConfig+0x5e0>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	2b05      	cmp	r3, #5
 8009f00:	d10c      	bne.n	8009f1c <HAL_RCC_OscConfig+0x5c8>
 8009f02:	4b6f      	ldr	r3, [pc, #444]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f06:	4a6e      	ldr	r2, [pc, #440]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009f08:	f043 0304 	orr.w	r3, r3, #4
 8009f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8009f0e:	4b6c      	ldr	r3, [pc, #432]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f12:	4a6b      	ldr	r2, [pc, #428]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009f14:	f043 0301 	orr.w	r3, r3, #1
 8009f18:	6713      	str	r3, [r2, #112]	; 0x70
 8009f1a:	e00b      	b.n	8009f34 <HAL_RCC_OscConfig+0x5e0>
 8009f1c:	4b68      	ldr	r3, [pc, #416]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f20:	4a67      	ldr	r2, [pc, #412]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009f22:	f023 0301 	bic.w	r3, r3, #1
 8009f26:	6713      	str	r3, [r2, #112]	; 0x70
 8009f28:	4b65      	ldr	r3, [pc, #404]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f2c:	4a64      	ldr	r2, [pc, #400]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009f2e:	f023 0304 	bic.w	r3, r3, #4
 8009f32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d015      	beq.n	8009f68 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f3c:	f7f9 fd7e 	bl	8003a3c <HAL_GetTick>
 8009f40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f42:	e00a      	b.n	8009f5a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f44:	f7f9 fd7a 	bl	8003a3c <HAL_GetTick>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d901      	bls.n	8009f5a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009f56:	2303      	movs	r3, #3
 8009f58:	e14e      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f5a:	4b59      	ldr	r3, [pc, #356]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f5e:	f003 0302 	and.w	r3, r3, #2
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d0ee      	beq.n	8009f44 <HAL_RCC_OscConfig+0x5f0>
 8009f66:	e014      	b.n	8009f92 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f68:	f7f9 fd68 	bl	8003a3c <HAL_GetTick>
 8009f6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f6e:	e00a      	b.n	8009f86 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f70:	f7f9 fd64 	bl	8003a3c <HAL_GetTick>
 8009f74:	4602      	mov	r2, r0
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d901      	bls.n	8009f86 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009f82:	2303      	movs	r3, #3
 8009f84:	e138      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f86:	4b4e      	ldr	r3, [pc, #312]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f8a:	f003 0302 	and.w	r3, r3, #2
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1ee      	bne.n	8009f70 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f000 812d 	beq.w	800a1f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009f9c:	4b48      	ldr	r3, [pc, #288]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fa4:	2b18      	cmp	r3, #24
 8009fa6:	f000 80bd 	beq.w	800a124 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	f040 809e 	bne.w	800a0f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fb4:	4b42      	ldr	r3, [pc, #264]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a41      	ldr	r2, [pc, #260]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fc0:	f7f9 fd3c 	bl	8003a3c <HAL_GetTick>
 8009fc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fc6:	e008      	b.n	8009fda <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fc8:	f7f9 fd38 	bl	8003a3c <HAL_GetTick>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d901      	bls.n	8009fda <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	e10e      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fda:	4b39      	ldr	r3, [pc, #228]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1f0      	bne.n	8009fc8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fe6:	4b36      	ldr	r3, [pc, #216]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fea:	4b37      	ldr	r3, [pc, #220]	; (800a0c8 <HAL_RCC_OscConfig+0x774>)
 8009fec:	4013      	ands	r3, r2
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009ff6:	0112      	lsls	r2, r2, #4
 8009ff8:	430a      	orrs	r2, r1
 8009ffa:	4931      	ldr	r1, [pc, #196]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	628b      	str	r3, [r1, #40]	; 0x28
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a004:	3b01      	subs	r3, #1
 800a006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a00e:	3b01      	subs	r3, #1
 800a010:	025b      	lsls	r3, r3, #9
 800a012:	b29b      	uxth	r3, r3
 800a014:	431a      	orrs	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01a:	3b01      	subs	r3, #1
 800a01c:	041b      	lsls	r3, r3, #16
 800a01e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a022:	431a      	orrs	r2, r3
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a028:	3b01      	subs	r3, #1
 800a02a:	061b      	lsls	r3, r3, #24
 800a02c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a030:	4923      	ldr	r1, [pc, #140]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a032:	4313      	orrs	r3, r2
 800a034:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a036:	4b22      	ldr	r3, [pc, #136]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03a:	4a21      	ldr	r2, [pc, #132]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a03c:	f023 0301 	bic.w	r3, r3, #1
 800a040:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a042:	4b1f      	ldr	r3, [pc, #124]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a046:	4b21      	ldr	r3, [pc, #132]	; (800a0cc <HAL_RCC_OscConfig+0x778>)
 800a048:	4013      	ands	r3, r2
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a04e:	00d2      	lsls	r2, r2, #3
 800a050:	491b      	ldr	r1, [pc, #108]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a052:	4313      	orrs	r3, r2
 800a054:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a056:	4b1a      	ldr	r3, [pc, #104]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05a:	f023 020c 	bic.w	r2, r3, #12
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a062:	4917      	ldr	r1, [pc, #92]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a064:	4313      	orrs	r3, r2
 800a066:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a068:	4b15      	ldr	r3, [pc, #84]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06c:	f023 0202 	bic.w	r2, r3, #2
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a074:	4912      	ldr	r1, [pc, #72]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a076:	4313      	orrs	r3, r2
 800a078:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a07a:	4b11      	ldr	r3, [pc, #68]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07e:	4a10      	ldr	r2, [pc, #64]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a084:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a086:	4b0e      	ldr	r3, [pc, #56]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08a:	4a0d      	ldr	r2, [pc, #52]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a08c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a090:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a092:	4b0b      	ldr	r3, [pc, #44]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a096:	4a0a      	ldr	r2, [pc, #40]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a09c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a09e:	4b08      	ldr	r3, [pc, #32]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a2:	4a07      	ldr	r2, [pc, #28]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a0a4:	f043 0301 	orr.w	r3, r3, #1
 800a0a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a0aa:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a04      	ldr	r2, [pc, #16]	; (800a0c0 <HAL_RCC_OscConfig+0x76c>)
 800a0b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0b6:	f7f9 fcc1 	bl	8003a3c <HAL_GetTick>
 800a0ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0bc:	e011      	b.n	800a0e2 <HAL_RCC_OscConfig+0x78e>
 800a0be:	bf00      	nop
 800a0c0:	58024400 	.word	0x58024400
 800a0c4:	58024800 	.word	0x58024800
 800a0c8:	fffffc0c 	.word	0xfffffc0c
 800a0cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0d0:	f7f9 fcb4 	bl	8003a3c <HAL_GetTick>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d901      	bls.n	800a0e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e08a      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0e2:	4b47      	ldr	r3, [pc, #284]	; (800a200 <HAL_RCC_OscConfig+0x8ac>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d0f0      	beq.n	800a0d0 <HAL_RCC_OscConfig+0x77c>
 800a0ee:	e082      	b.n	800a1f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0f0:	4b43      	ldr	r3, [pc, #268]	; (800a200 <HAL_RCC_OscConfig+0x8ac>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a42      	ldr	r2, [pc, #264]	; (800a200 <HAL_RCC_OscConfig+0x8ac>)
 800a0f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0fc:	f7f9 fc9e 	bl	8003a3c <HAL_GetTick>
 800a100:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a102:	e008      	b.n	800a116 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a104:	f7f9 fc9a 	bl	8003a3c <HAL_GetTick>
 800a108:	4602      	mov	r2, r0
 800a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10c:	1ad3      	subs	r3, r2, r3
 800a10e:	2b02      	cmp	r3, #2
 800a110:	d901      	bls.n	800a116 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a112:	2303      	movs	r3, #3
 800a114:	e070      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a116:	4b3a      	ldr	r3, [pc, #232]	; (800a200 <HAL_RCC_OscConfig+0x8ac>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1f0      	bne.n	800a104 <HAL_RCC_OscConfig+0x7b0>
 800a122:	e068      	b.n	800a1f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a124:	4b36      	ldr	r3, [pc, #216]	; (800a200 <HAL_RCC_OscConfig+0x8ac>)
 800a126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a128:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a12a:	4b35      	ldr	r3, [pc, #212]	; (800a200 <HAL_RCC_OscConfig+0x8ac>)
 800a12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a134:	2b01      	cmp	r3, #1
 800a136:	d031      	beq.n	800a19c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	f003 0203 	and.w	r2, r3, #3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a142:	429a      	cmp	r2, r3
 800a144:	d12a      	bne.n	800a19c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	091b      	lsrs	r3, r3, #4
 800a14a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a152:	429a      	cmp	r2, r3
 800a154:	d122      	bne.n	800a19c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a160:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a162:	429a      	cmp	r2, r3
 800a164:	d11a      	bne.n	800a19c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	0a5b      	lsrs	r3, r3, #9
 800a16a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a172:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a174:	429a      	cmp	r2, r3
 800a176:	d111      	bne.n	800a19c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	0c1b      	lsrs	r3, r3, #16
 800a17c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a184:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a186:	429a      	cmp	r2, r3
 800a188:	d108      	bne.n	800a19c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	0e1b      	lsrs	r3, r3, #24
 800a18e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a196:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a198:	429a      	cmp	r2, r3
 800a19a:	d001      	beq.n	800a1a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e02b      	b.n	800a1f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a1a0:	4b17      	ldr	r3, [pc, #92]	; (800a200 <HAL_RCC_OscConfig+0x8ac>)
 800a1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a4:	08db      	lsrs	r3, r3, #3
 800a1a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d01f      	beq.n	800a1f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a1b6:	4b12      	ldr	r3, [pc, #72]	; (800a200 <HAL_RCC_OscConfig+0x8ac>)
 800a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ba:	4a11      	ldr	r2, [pc, #68]	; (800a200 <HAL_RCC_OscConfig+0x8ac>)
 800a1bc:	f023 0301 	bic.w	r3, r3, #1
 800a1c0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a1c2:	f7f9 fc3b 	bl	8003a3c <HAL_GetTick>
 800a1c6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a1c8:	bf00      	nop
 800a1ca:	f7f9 fc37 	bl	8003a3c <HAL_GetTick>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d0f9      	beq.n	800a1ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a1d6:	4b0a      	ldr	r3, [pc, #40]	; (800a200 <HAL_RCC_OscConfig+0x8ac>)
 800a1d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1da:	4b0a      	ldr	r3, [pc, #40]	; (800a204 <HAL_RCC_OscConfig+0x8b0>)
 800a1dc:	4013      	ands	r3, r2
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a1e2:	00d2      	lsls	r2, r2, #3
 800a1e4:	4906      	ldr	r1, [pc, #24]	; (800a200 <HAL_RCC_OscConfig+0x8ac>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a1ea:	4b05      	ldr	r3, [pc, #20]	; (800a200 <HAL_RCC_OscConfig+0x8ac>)
 800a1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ee:	4a04      	ldr	r2, [pc, #16]	; (800a200 <HAL_RCC_OscConfig+0x8ac>)
 800a1f0:	f043 0301 	orr.w	r3, r3, #1
 800a1f4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3730      	adds	r7, #48	; 0x30
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	58024400 	.word	0x58024400
 800a204:	ffff0007 	.word	0xffff0007

0800a208 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d101      	bne.n	800a21c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	e19c      	b.n	800a556 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a21c:	4b8a      	ldr	r3, [pc, #552]	; (800a448 <HAL_RCC_ClockConfig+0x240>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 030f 	and.w	r3, r3, #15
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	429a      	cmp	r2, r3
 800a228:	d910      	bls.n	800a24c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a22a:	4b87      	ldr	r3, [pc, #540]	; (800a448 <HAL_RCC_ClockConfig+0x240>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f023 020f 	bic.w	r2, r3, #15
 800a232:	4985      	ldr	r1, [pc, #532]	; (800a448 <HAL_RCC_ClockConfig+0x240>)
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	4313      	orrs	r3, r2
 800a238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a23a:	4b83      	ldr	r3, [pc, #524]	; (800a448 <HAL_RCC_ClockConfig+0x240>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 030f 	and.w	r3, r3, #15
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	429a      	cmp	r2, r3
 800a246:	d001      	beq.n	800a24c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a248:	2301      	movs	r3, #1
 800a24a:	e184      	b.n	800a556 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 0304 	and.w	r3, r3, #4
 800a254:	2b00      	cmp	r3, #0
 800a256:	d010      	beq.n	800a27a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	691a      	ldr	r2, [r3, #16]
 800a25c:	4b7b      	ldr	r3, [pc, #492]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a25e:	699b      	ldr	r3, [r3, #24]
 800a260:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a264:	429a      	cmp	r2, r3
 800a266:	d908      	bls.n	800a27a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a268:	4b78      	ldr	r3, [pc, #480]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a26a:	699b      	ldr	r3, [r3, #24]
 800a26c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	4975      	ldr	r1, [pc, #468]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a276:	4313      	orrs	r3, r2
 800a278:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 0308 	and.w	r3, r3, #8
 800a282:	2b00      	cmp	r3, #0
 800a284:	d010      	beq.n	800a2a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	695a      	ldr	r2, [r3, #20]
 800a28a:	4b70      	ldr	r3, [pc, #448]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a28c:	69db      	ldr	r3, [r3, #28]
 800a28e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a292:	429a      	cmp	r2, r3
 800a294:	d908      	bls.n	800a2a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a296:	4b6d      	ldr	r3, [pc, #436]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a298:	69db      	ldr	r3, [r3, #28]
 800a29a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	695b      	ldr	r3, [r3, #20]
 800a2a2:	496a      	ldr	r1, [pc, #424]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 0310 	and.w	r3, r3, #16
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d010      	beq.n	800a2d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	699a      	ldr	r2, [r3, #24]
 800a2b8:	4b64      	ldr	r3, [pc, #400]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a2ba:	69db      	ldr	r3, [r3, #28]
 800a2bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d908      	bls.n	800a2d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a2c4:	4b61      	ldr	r3, [pc, #388]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a2c6:	69db      	ldr	r3, [r3, #28]
 800a2c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	699b      	ldr	r3, [r3, #24]
 800a2d0:	495e      	ldr	r1, [pc, #376]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f003 0320 	and.w	r3, r3, #32
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d010      	beq.n	800a304 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	69da      	ldr	r2, [r3, #28]
 800a2e6:	4b59      	ldr	r3, [pc, #356]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a2e8:	6a1b      	ldr	r3, [r3, #32]
 800a2ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d908      	bls.n	800a304 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a2f2:	4b56      	ldr	r3, [pc, #344]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	69db      	ldr	r3, [r3, #28]
 800a2fe:	4953      	ldr	r1, [pc, #332]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a300:	4313      	orrs	r3, r2
 800a302:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0302 	and.w	r3, r3, #2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d010      	beq.n	800a332 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	68da      	ldr	r2, [r3, #12]
 800a314:	4b4d      	ldr	r3, [pc, #308]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	f003 030f 	and.w	r3, r3, #15
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d908      	bls.n	800a332 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a320:	4b4a      	ldr	r3, [pc, #296]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a322:	699b      	ldr	r3, [r3, #24]
 800a324:	f023 020f 	bic.w	r2, r3, #15
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	4947      	ldr	r1, [pc, #284]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a32e:	4313      	orrs	r3, r2
 800a330:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f003 0301 	and.w	r3, r3, #1
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d055      	beq.n	800a3ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a33e:	4b43      	ldr	r3, [pc, #268]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	4940      	ldr	r1, [pc, #256]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a34c:	4313      	orrs	r3, r2
 800a34e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	2b02      	cmp	r3, #2
 800a356:	d107      	bne.n	800a368 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a358:	4b3c      	ldr	r3, [pc, #240]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d121      	bne.n	800a3a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	e0f6      	b.n	800a556 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d107      	bne.n	800a380 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a370:	4b36      	ldr	r3, [pc, #216]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d115      	bne.n	800a3a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e0ea      	b.n	800a556 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d107      	bne.n	800a398 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a388:	4b30      	ldr	r3, [pc, #192]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a390:	2b00      	cmp	r3, #0
 800a392:	d109      	bne.n	800a3a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	e0de      	b.n	800a556 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a398:	4b2c      	ldr	r3, [pc, #176]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 0304 	and.w	r3, r3, #4
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d101      	bne.n	800a3a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e0d6      	b.n	800a556 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a3a8:	4b28      	ldr	r3, [pc, #160]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	f023 0207 	bic.w	r2, r3, #7
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	4925      	ldr	r1, [pc, #148]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3ba:	f7f9 fb3f 	bl	8003a3c <HAL_GetTick>
 800a3be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3c0:	e00a      	b.n	800a3d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3c2:	f7f9 fb3b 	bl	8003a3c <HAL_GetTick>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d901      	bls.n	800a3d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e0be      	b.n	800a556 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3d8:	4b1c      	ldr	r3, [pc, #112]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	00db      	lsls	r3, r3, #3
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d1eb      	bne.n	800a3c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f003 0302 	and.w	r3, r3, #2
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d010      	beq.n	800a418 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	68da      	ldr	r2, [r3, #12]
 800a3fa:	4b14      	ldr	r3, [pc, #80]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a3fc:	699b      	ldr	r3, [r3, #24]
 800a3fe:	f003 030f 	and.w	r3, r3, #15
 800a402:	429a      	cmp	r2, r3
 800a404:	d208      	bcs.n	800a418 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a406:	4b11      	ldr	r3, [pc, #68]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	f023 020f 	bic.w	r2, r3, #15
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	490e      	ldr	r1, [pc, #56]	; (800a44c <HAL_RCC_ClockConfig+0x244>)
 800a414:	4313      	orrs	r3, r2
 800a416:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a418:	4b0b      	ldr	r3, [pc, #44]	; (800a448 <HAL_RCC_ClockConfig+0x240>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 030f 	and.w	r3, r3, #15
 800a420:	683a      	ldr	r2, [r7, #0]
 800a422:	429a      	cmp	r2, r3
 800a424:	d214      	bcs.n	800a450 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a426:	4b08      	ldr	r3, [pc, #32]	; (800a448 <HAL_RCC_ClockConfig+0x240>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f023 020f 	bic.w	r2, r3, #15
 800a42e:	4906      	ldr	r1, [pc, #24]	; (800a448 <HAL_RCC_ClockConfig+0x240>)
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	4313      	orrs	r3, r2
 800a434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a436:	4b04      	ldr	r3, [pc, #16]	; (800a448 <HAL_RCC_ClockConfig+0x240>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 030f 	and.w	r3, r3, #15
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	429a      	cmp	r2, r3
 800a442:	d005      	beq.n	800a450 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	e086      	b.n	800a556 <HAL_RCC_ClockConfig+0x34e>
 800a448:	52002000 	.word	0x52002000
 800a44c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f003 0304 	and.w	r3, r3, #4
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d010      	beq.n	800a47e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	691a      	ldr	r2, [r3, #16]
 800a460:	4b3f      	ldr	r3, [pc, #252]	; (800a560 <HAL_RCC_ClockConfig+0x358>)
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a468:	429a      	cmp	r2, r3
 800a46a:	d208      	bcs.n	800a47e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a46c:	4b3c      	ldr	r3, [pc, #240]	; (800a560 <HAL_RCC_ClockConfig+0x358>)
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	4939      	ldr	r1, [pc, #228]	; (800a560 <HAL_RCC_ClockConfig+0x358>)
 800a47a:	4313      	orrs	r3, r2
 800a47c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0308 	and.w	r3, r3, #8
 800a486:	2b00      	cmp	r3, #0
 800a488:	d010      	beq.n	800a4ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	695a      	ldr	r2, [r3, #20]
 800a48e:	4b34      	ldr	r3, [pc, #208]	; (800a560 <HAL_RCC_ClockConfig+0x358>)
 800a490:	69db      	ldr	r3, [r3, #28]
 800a492:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a496:	429a      	cmp	r2, r3
 800a498:	d208      	bcs.n	800a4ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a49a:	4b31      	ldr	r3, [pc, #196]	; (800a560 <HAL_RCC_ClockConfig+0x358>)
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	695b      	ldr	r3, [r3, #20]
 800a4a6:	492e      	ldr	r1, [pc, #184]	; (800a560 <HAL_RCC_ClockConfig+0x358>)
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 0310 	and.w	r3, r3, #16
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d010      	beq.n	800a4da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	699a      	ldr	r2, [r3, #24]
 800a4bc:	4b28      	ldr	r3, [pc, #160]	; (800a560 <HAL_RCC_ClockConfig+0x358>)
 800a4be:	69db      	ldr	r3, [r3, #28]
 800a4c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d208      	bcs.n	800a4da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a4c8:	4b25      	ldr	r3, [pc, #148]	; (800a560 <HAL_RCC_ClockConfig+0x358>)
 800a4ca:	69db      	ldr	r3, [r3, #28]
 800a4cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	699b      	ldr	r3, [r3, #24]
 800a4d4:	4922      	ldr	r1, [pc, #136]	; (800a560 <HAL_RCC_ClockConfig+0x358>)
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 0320 	and.w	r3, r3, #32
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d010      	beq.n	800a508 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	69da      	ldr	r2, [r3, #28]
 800a4ea:	4b1d      	ldr	r3, [pc, #116]	; (800a560 <HAL_RCC_ClockConfig+0x358>)
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d208      	bcs.n	800a508 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a4f6:	4b1a      	ldr	r3, [pc, #104]	; (800a560 <HAL_RCC_ClockConfig+0x358>)
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	69db      	ldr	r3, [r3, #28]
 800a502:	4917      	ldr	r1, [pc, #92]	; (800a560 <HAL_RCC_ClockConfig+0x358>)
 800a504:	4313      	orrs	r3, r2
 800a506:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a508:	f000 f834 	bl	800a574 <HAL_RCC_GetSysClockFreq>
 800a50c:	4602      	mov	r2, r0
 800a50e:	4b14      	ldr	r3, [pc, #80]	; (800a560 <HAL_RCC_ClockConfig+0x358>)
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	0a1b      	lsrs	r3, r3, #8
 800a514:	f003 030f 	and.w	r3, r3, #15
 800a518:	4912      	ldr	r1, [pc, #72]	; (800a564 <HAL_RCC_ClockConfig+0x35c>)
 800a51a:	5ccb      	ldrb	r3, [r1, r3]
 800a51c:	f003 031f 	and.w	r3, r3, #31
 800a520:	fa22 f303 	lsr.w	r3, r2, r3
 800a524:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a526:	4b0e      	ldr	r3, [pc, #56]	; (800a560 <HAL_RCC_ClockConfig+0x358>)
 800a528:	699b      	ldr	r3, [r3, #24]
 800a52a:	f003 030f 	and.w	r3, r3, #15
 800a52e:	4a0d      	ldr	r2, [pc, #52]	; (800a564 <HAL_RCC_ClockConfig+0x35c>)
 800a530:	5cd3      	ldrb	r3, [r2, r3]
 800a532:	f003 031f 	and.w	r3, r3, #31
 800a536:	693a      	ldr	r2, [r7, #16]
 800a538:	fa22 f303 	lsr.w	r3, r2, r3
 800a53c:	4a0a      	ldr	r2, [pc, #40]	; (800a568 <HAL_RCC_ClockConfig+0x360>)
 800a53e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a540:	4a0a      	ldr	r2, [pc, #40]	; (800a56c <HAL_RCC_ClockConfig+0x364>)
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a546:	4b0a      	ldr	r3, [pc, #40]	; (800a570 <HAL_RCC_ClockConfig+0x368>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7f8 ffa4 	bl	8003498 <HAL_InitTick>
 800a550:	4603      	mov	r3, r0
 800a552:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a554:	7bfb      	ldrb	r3, [r7, #15]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3718      	adds	r7, #24
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	58024400 	.word	0x58024400
 800a564:	08016e80 	.word	0x08016e80
 800a568:	24000094 	.word	0x24000094
 800a56c:	24000090 	.word	0x24000090
 800a570:	24000098 	.word	0x24000098

0800a574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a574:	b480      	push	{r7}
 800a576:	b089      	sub	sp, #36	; 0x24
 800a578:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a57a:	4bb3      	ldr	r3, [pc, #716]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a582:	2b18      	cmp	r3, #24
 800a584:	f200 8155 	bhi.w	800a832 <HAL_RCC_GetSysClockFreq+0x2be>
 800a588:	a201      	add	r2, pc, #4	; (adr r2, 800a590 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58e:	bf00      	nop
 800a590:	0800a5f5 	.word	0x0800a5f5
 800a594:	0800a833 	.word	0x0800a833
 800a598:	0800a833 	.word	0x0800a833
 800a59c:	0800a833 	.word	0x0800a833
 800a5a0:	0800a833 	.word	0x0800a833
 800a5a4:	0800a833 	.word	0x0800a833
 800a5a8:	0800a833 	.word	0x0800a833
 800a5ac:	0800a833 	.word	0x0800a833
 800a5b0:	0800a61b 	.word	0x0800a61b
 800a5b4:	0800a833 	.word	0x0800a833
 800a5b8:	0800a833 	.word	0x0800a833
 800a5bc:	0800a833 	.word	0x0800a833
 800a5c0:	0800a833 	.word	0x0800a833
 800a5c4:	0800a833 	.word	0x0800a833
 800a5c8:	0800a833 	.word	0x0800a833
 800a5cc:	0800a833 	.word	0x0800a833
 800a5d0:	0800a621 	.word	0x0800a621
 800a5d4:	0800a833 	.word	0x0800a833
 800a5d8:	0800a833 	.word	0x0800a833
 800a5dc:	0800a833 	.word	0x0800a833
 800a5e0:	0800a833 	.word	0x0800a833
 800a5e4:	0800a833 	.word	0x0800a833
 800a5e8:	0800a833 	.word	0x0800a833
 800a5ec:	0800a833 	.word	0x0800a833
 800a5f0:	0800a627 	.word	0x0800a627
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5f4:	4b94      	ldr	r3, [pc, #592]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 0320 	and.w	r3, r3, #32
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d009      	beq.n	800a614 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a600:	4b91      	ldr	r3, [pc, #580]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	08db      	lsrs	r3, r3, #3
 800a606:	f003 0303 	and.w	r3, r3, #3
 800a60a:	4a90      	ldr	r2, [pc, #576]	; (800a84c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a60c:	fa22 f303 	lsr.w	r3, r2, r3
 800a610:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a612:	e111      	b.n	800a838 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a614:	4b8d      	ldr	r3, [pc, #564]	; (800a84c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a616:	61bb      	str	r3, [r7, #24]
      break;
 800a618:	e10e      	b.n	800a838 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a61a:	4b8d      	ldr	r3, [pc, #564]	; (800a850 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a61c:	61bb      	str	r3, [r7, #24]
      break;
 800a61e:	e10b      	b.n	800a838 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a620:	4b8c      	ldr	r3, [pc, #560]	; (800a854 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a622:	61bb      	str	r3, [r7, #24]
      break;
 800a624:	e108      	b.n	800a838 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a626:	4b88      	ldr	r3, [pc, #544]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62a:	f003 0303 	and.w	r3, r3, #3
 800a62e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a630:	4b85      	ldr	r3, [pc, #532]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a634:	091b      	lsrs	r3, r3, #4
 800a636:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a63a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a63c:	4b82      	ldr	r3, [pc, #520]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a640:	f003 0301 	and.w	r3, r3, #1
 800a644:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a646:	4b80      	ldr	r3, [pc, #512]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a64a:	08db      	lsrs	r3, r3, #3
 800a64c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	fb02 f303 	mul.w	r3, r2, r3
 800a656:	ee07 3a90 	vmov	s15, r3
 800a65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a65e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	2b00      	cmp	r3, #0
 800a666:	f000 80e1 	beq.w	800a82c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	f000 8083 	beq.w	800a778 <HAL_RCC_GetSysClockFreq+0x204>
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	2b02      	cmp	r3, #2
 800a676:	f200 80a1 	bhi.w	800a7bc <HAL_RCC_GetSysClockFreq+0x248>
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d003      	beq.n	800a688 <HAL_RCC_GetSysClockFreq+0x114>
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d056      	beq.n	800a734 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a686:	e099      	b.n	800a7bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a688:	4b6f      	ldr	r3, [pc, #444]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 0320 	and.w	r3, r3, #32
 800a690:	2b00      	cmp	r3, #0
 800a692:	d02d      	beq.n	800a6f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a694:	4b6c      	ldr	r3, [pc, #432]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	08db      	lsrs	r3, r3, #3
 800a69a:	f003 0303 	and.w	r3, r3, #3
 800a69e:	4a6b      	ldr	r2, [pc, #428]	; (800a84c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a6a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	ee07 3a90 	vmov	s15, r3
 800a6ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	ee07 3a90 	vmov	s15, r3
 800a6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6be:	4b62      	ldr	r3, [pc, #392]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6c6:	ee07 3a90 	vmov	s15, r3
 800a6ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a858 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a6ee:	e087      	b.n	800a800 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	ee07 3a90 	vmov	s15, r3
 800a6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a85c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a6fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a702:	4b51      	ldr	r3, [pc, #324]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a70a:	ee07 3a90 	vmov	s15, r3
 800a70e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a712:	ed97 6a02 	vldr	s12, [r7, #8]
 800a716:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a858 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a71a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a71e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a72a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a72e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a732:	e065      	b.n	800a800 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	ee07 3a90 	vmov	s15, r3
 800a73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a73e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a860 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a746:	4b40      	ldr	r3, [pc, #256]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a74e:	ee07 3a90 	vmov	s15, r3
 800a752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a756:	ed97 6a02 	vldr	s12, [r7, #8]
 800a75a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a858 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a75e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a76a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a76e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a772:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a776:	e043      	b.n	800a800 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	ee07 3a90 	vmov	s15, r3
 800a77e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a782:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a864 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a78a:	4b2f      	ldr	r3, [pc, #188]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a792:	ee07 3a90 	vmov	s15, r3
 800a796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a79a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a79e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a858 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a7ba:	e021      	b.n	800a800 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	ee07 3a90 	vmov	s15, r3
 800a7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a860 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a7ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ce:	4b1e      	ldr	r3, [pc, #120]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7d6:	ee07 3a90 	vmov	s15, r3
 800a7da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7de:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a858 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a7fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a800:	4b11      	ldr	r3, [pc, #68]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a804:	0a5b      	lsrs	r3, r3, #9
 800a806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a80a:	3301      	adds	r3, #1
 800a80c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	ee07 3a90 	vmov	s15, r3
 800a814:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a818:	edd7 6a07 	vldr	s13, [r7, #28]
 800a81c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a824:	ee17 3a90 	vmov	r3, s15
 800a828:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a82a:	e005      	b.n	800a838 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a82c:	2300      	movs	r3, #0
 800a82e:	61bb      	str	r3, [r7, #24]
      break;
 800a830:	e002      	b.n	800a838 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a832:	4b07      	ldr	r3, [pc, #28]	; (800a850 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a834:	61bb      	str	r3, [r7, #24]
      break;
 800a836:	bf00      	nop
  }

  return sysclockfreq;
 800a838:	69bb      	ldr	r3, [r7, #24]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3724      	adds	r7, #36	; 0x24
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	58024400 	.word	0x58024400
 800a84c:	03d09000 	.word	0x03d09000
 800a850:	003d0900 	.word	0x003d0900
 800a854:	017d7840 	.word	0x017d7840
 800a858:	46000000 	.word	0x46000000
 800a85c:	4c742400 	.word	0x4c742400
 800a860:	4a742400 	.word	0x4a742400
 800a864:	4bbebc20 	.word	0x4bbebc20

0800a868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a86e:	f7ff fe81 	bl	800a574 <HAL_RCC_GetSysClockFreq>
 800a872:	4602      	mov	r2, r0
 800a874:	4b10      	ldr	r3, [pc, #64]	; (800a8b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	0a1b      	lsrs	r3, r3, #8
 800a87a:	f003 030f 	and.w	r3, r3, #15
 800a87e:	490f      	ldr	r1, [pc, #60]	; (800a8bc <HAL_RCC_GetHCLKFreq+0x54>)
 800a880:	5ccb      	ldrb	r3, [r1, r3]
 800a882:	f003 031f 	and.w	r3, r3, #31
 800a886:	fa22 f303 	lsr.w	r3, r2, r3
 800a88a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a88c:	4b0a      	ldr	r3, [pc, #40]	; (800a8b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	f003 030f 	and.w	r3, r3, #15
 800a894:	4a09      	ldr	r2, [pc, #36]	; (800a8bc <HAL_RCC_GetHCLKFreq+0x54>)
 800a896:	5cd3      	ldrb	r3, [r2, r3]
 800a898:	f003 031f 	and.w	r3, r3, #31
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a2:	4a07      	ldr	r2, [pc, #28]	; (800a8c0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a8a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a8a6:	4a07      	ldr	r2, [pc, #28]	; (800a8c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a8ac:	4b04      	ldr	r3, [pc, #16]	; (800a8c0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	58024400 	.word	0x58024400
 800a8bc:	08016e80 	.word	0x08016e80
 800a8c0:	24000094 	.word	0x24000094
 800a8c4:	24000090 	.word	0x24000090

0800a8c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a8cc:	f7ff ffcc 	bl	800a868 <HAL_RCC_GetHCLKFreq>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	4b06      	ldr	r3, [pc, #24]	; (800a8ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	091b      	lsrs	r3, r3, #4
 800a8d8:	f003 0307 	and.w	r3, r3, #7
 800a8dc:	4904      	ldr	r1, [pc, #16]	; (800a8f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a8de:	5ccb      	ldrb	r3, [r1, r3]
 800a8e0:	f003 031f 	and.w	r3, r3, #31
 800a8e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	58024400 	.word	0x58024400
 800a8f0:	08016e80 	.word	0x08016e80

0800a8f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a8f8:	f7ff ffb6 	bl	800a868 <HAL_RCC_GetHCLKFreq>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	4b06      	ldr	r3, [pc, #24]	; (800a918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a900:	69db      	ldr	r3, [r3, #28]
 800a902:	0a1b      	lsrs	r3, r3, #8
 800a904:	f003 0307 	and.w	r3, r3, #7
 800a908:	4904      	ldr	r1, [pc, #16]	; (800a91c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a90a:	5ccb      	ldrb	r3, [r1, r3]
 800a90c:	f003 031f 	and.w	r3, r3, #31
 800a910:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a914:	4618      	mov	r0, r3
 800a916:	bd80      	pop	{r7, pc}
 800a918:	58024400 	.word	0x58024400
 800a91c:	08016e80 	.word	0x08016e80

0800a920 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	223f      	movs	r2, #63	; 0x3f
 800a92e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a930:	4b1a      	ldr	r3, [pc, #104]	; (800a99c <HAL_RCC_GetClockConfig+0x7c>)
 800a932:	691b      	ldr	r3, [r3, #16]
 800a934:	f003 0207 	and.w	r2, r3, #7
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a93c:	4b17      	ldr	r3, [pc, #92]	; (800a99c <HAL_RCC_GetClockConfig+0x7c>)
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a948:	4b14      	ldr	r3, [pc, #80]	; (800a99c <HAL_RCC_GetClockConfig+0x7c>)
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	f003 020f 	and.w	r2, r3, #15
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a954:	4b11      	ldr	r3, [pc, #68]	; (800a99c <HAL_RCC_GetClockConfig+0x7c>)
 800a956:	699b      	ldr	r3, [r3, #24]
 800a958:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a960:	4b0e      	ldr	r3, [pc, #56]	; (800a99c <HAL_RCC_GetClockConfig+0x7c>)
 800a962:	69db      	ldr	r3, [r3, #28]
 800a964:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a96c:	4b0b      	ldr	r3, [pc, #44]	; (800a99c <HAL_RCC_GetClockConfig+0x7c>)
 800a96e:	69db      	ldr	r3, [r3, #28]
 800a970:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a978:	4b08      	ldr	r3, [pc, #32]	; (800a99c <HAL_RCC_GetClockConfig+0x7c>)
 800a97a:	6a1b      	ldr	r3, [r3, #32]
 800a97c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a984:	4b06      	ldr	r3, [pc, #24]	; (800a9a0 <HAL_RCC_GetClockConfig+0x80>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f003 020f 	and.w	r2, r3, #15
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	601a      	str	r2, [r3, #0]
}
 800a990:	bf00      	nop
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	58024400 	.word	0x58024400
 800a9a0:	52002000 	.word	0x52002000

0800a9a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a9a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9a8:	b0ca      	sub	sp, #296	; 0x128
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a9bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a9c8:	2500      	movs	r5, #0
 800a9ca:	ea54 0305 	orrs.w	r3, r4, r5
 800a9ce:	d049      	beq.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9da:	d02f      	beq.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a9dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9e0:	d828      	bhi.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a9e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9e6:	d01a      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a9e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9ec:	d822      	bhi.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d003      	beq.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a9f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9f6:	d007      	beq.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a9f8:	e01c      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9fa:	4bb8      	ldr	r3, [pc, #736]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fe:	4ab7      	ldr	r2, [pc, #732]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aa06:	e01a      	b.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa0c:	3308      	adds	r3, #8
 800aa0e:	2102      	movs	r1, #2
 800aa10:	4618      	mov	r0, r3
 800aa12:	f002 fb61 	bl	800d0d8 <RCCEx_PLL2_Config>
 800aa16:	4603      	mov	r3, r0
 800aa18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aa1c:	e00f      	b.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa22:	3328      	adds	r3, #40	; 0x28
 800aa24:	2102      	movs	r1, #2
 800aa26:	4618      	mov	r0, r3
 800aa28:	f002 fc08 	bl	800d23c <RCCEx_PLL3_Config>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aa32:	e004      	b.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa3a:	e000      	b.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800aa3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d10a      	bne.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aa46:	4ba5      	ldr	r3, [pc, #660]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa4a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aa4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa54:	4aa1      	ldr	r2, [pc, #644]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa56:	430b      	orrs	r3, r1
 800aa58:	6513      	str	r3, [r2, #80]	; 0x50
 800aa5a:	e003      	b.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aa64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800aa70:	f04f 0900 	mov.w	r9, #0
 800aa74:	ea58 0309 	orrs.w	r3, r8, r9
 800aa78:	d047      	beq.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800aa7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa80:	2b04      	cmp	r3, #4
 800aa82:	d82a      	bhi.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x136>
 800aa84:	a201      	add	r2, pc, #4	; (adr r2, 800aa8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800aa86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8a:	bf00      	nop
 800aa8c:	0800aaa1 	.word	0x0800aaa1
 800aa90:	0800aaaf 	.word	0x0800aaaf
 800aa94:	0800aac5 	.word	0x0800aac5
 800aa98:	0800aae3 	.word	0x0800aae3
 800aa9c:	0800aae3 	.word	0x0800aae3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaa0:	4b8e      	ldr	r3, [pc, #568]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aaa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa4:	4a8d      	ldr	r2, [pc, #564]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aaa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aaac:	e01a      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aaae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aab2:	3308      	adds	r3, #8
 800aab4:	2100      	movs	r1, #0
 800aab6:	4618      	mov	r0, r3
 800aab8:	f002 fb0e 	bl	800d0d8 <RCCEx_PLL2_Config>
 800aabc:	4603      	mov	r3, r0
 800aabe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aac2:	e00f      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aac8:	3328      	adds	r3, #40	; 0x28
 800aaca:	2100      	movs	r1, #0
 800aacc:	4618      	mov	r0, r3
 800aace:	f002 fbb5 	bl	800d23c <RCCEx_PLL3_Config>
 800aad2:	4603      	mov	r3, r0
 800aad4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aad8:	e004      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aae0:	e000      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800aae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aae4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10a      	bne.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aaec:	4b7b      	ldr	r3, [pc, #492]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aaee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaf0:	f023 0107 	bic.w	r1, r3, #7
 800aaf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aafa:	4a78      	ldr	r2, [pc, #480]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aafc:	430b      	orrs	r3, r1
 800aafe:	6513      	str	r3, [r2, #80]	; 0x50
 800ab00:	e003      	b.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ab0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab12:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ab16:	f04f 0b00 	mov.w	fp, #0
 800ab1a:	ea5a 030b 	orrs.w	r3, sl, fp
 800ab1e:	d04c      	beq.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ab20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab2a:	d030      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ab2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab30:	d829      	bhi.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ab32:	2bc0      	cmp	r3, #192	; 0xc0
 800ab34:	d02d      	beq.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ab36:	2bc0      	cmp	r3, #192	; 0xc0
 800ab38:	d825      	bhi.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ab3a:	2b80      	cmp	r3, #128	; 0x80
 800ab3c:	d018      	beq.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ab3e:	2b80      	cmp	r3, #128	; 0x80
 800ab40:	d821      	bhi.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d002      	beq.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ab46:	2b40      	cmp	r3, #64	; 0x40
 800ab48:	d007      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ab4a:	e01c      	b.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab4c:	4b63      	ldr	r3, [pc, #396]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab50:	4a62      	ldr	r2, [pc, #392]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ab58:	e01c      	b.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab5e:	3308      	adds	r3, #8
 800ab60:	2100      	movs	r1, #0
 800ab62:	4618      	mov	r0, r3
 800ab64:	f002 fab8 	bl	800d0d8 <RCCEx_PLL2_Config>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ab6e:	e011      	b.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab74:	3328      	adds	r3, #40	; 0x28
 800ab76:	2100      	movs	r1, #0
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f002 fb5f 	bl	800d23c <RCCEx_PLL3_Config>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ab84:	e006      	b.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab8c:	e002      	b.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ab8e:	bf00      	nop
 800ab90:	e000      	b.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ab92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10a      	bne.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ab9c:	4b4f      	ldr	r3, [pc, #316]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aba0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800aba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abaa:	4a4c      	ldr	r2, [pc, #304]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abac:	430b      	orrs	r3, r1
 800abae:	6513      	str	r3, [r2, #80]	; 0x50
 800abb0:	e003      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800abba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800abc6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800abca:	2300      	movs	r3, #0
 800abcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800abd0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800abd4:	460b      	mov	r3, r1
 800abd6:	4313      	orrs	r3, r2
 800abd8:	d053      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800abda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800abe2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abe6:	d035      	beq.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800abe8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abec:	d82e      	bhi.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800abee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800abf2:	d031      	beq.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800abf4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800abf8:	d828      	bhi.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800abfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abfe:	d01a      	beq.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ac00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac04:	d822      	bhi.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d003      	beq.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ac0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac0e:	d007      	beq.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ac10:	e01c      	b.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac12:	4b32      	ldr	r3, [pc, #200]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac16:	4a31      	ldr	r2, [pc, #196]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac1e:	e01c      	b.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac24:	3308      	adds	r3, #8
 800ac26:	2100      	movs	r1, #0
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f002 fa55 	bl	800d0d8 <RCCEx_PLL2_Config>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ac34:	e011      	b.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac3a:	3328      	adds	r3, #40	; 0x28
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f002 fafc 	bl	800d23c <RCCEx_PLL3_Config>
 800ac44:	4603      	mov	r3, r0
 800ac46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac4a:	e006      	b.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac52:	e002      	b.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ac54:	bf00      	nop
 800ac56:	e000      	b.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ac58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10b      	bne.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ac62:	4b1e      	ldr	r3, [pc, #120]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac66:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ac6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac72:	4a1a      	ldr	r2, [pc, #104]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac74:	430b      	orrs	r3, r1
 800ac76:	6593      	str	r3, [r2, #88]	; 0x58
 800ac78:	e003      	b.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ac82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ac8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ac92:	2300      	movs	r3, #0
 800ac94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ac98:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	d056      	beq.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aca6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800acaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800acae:	d038      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800acb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800acb4:	d831      	bhi.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800acb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800acba:	d034      	beq.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800acbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800acc0:	d82b      	bhi.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800acc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acc6:	d01d      	beq.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800acc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800accc:	d825      	bhi.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d006      	beq.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800acd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800acd6:	d00a      	beq.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800acd8:	e01f      	b.n	800ad1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800acda:	bf00      	nop
 800acdc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ace0:	4ba2      	ldr	r3, [pc, #648]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ace2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace4:	4aa1      	ldr	r2, [pc, #644]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ace6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acec:	e01c      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf2:	3308      	adds	r3, #8
 800acf4:	2100      	movs	r1, #0
 800acf6:	4618      	mov	r0, r3
 800acf8:	f002 f9ee 	bl	800d0d8 <RCCEx_PLL2_Config>
 800acfc:	4603      	mov	r3, r0
 800acfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ad02:	e011      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad08:	3328      	adds	r3, #40	; 0x28
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f002 fa95 	bl	800d23c <RCCEx_PLL3_Config>
 800ad12:	4603      	mov	r3, r0
 800ad14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad18:	e006      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad20:	e002      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ad22:	bf00      	nop
 800ad24:	e000      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ad26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d10b      	bne.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ad30:	4b8e      	ldr	r3, [pc, #568]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad34:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ad38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad40:	4a8a      	ldr	r2, [pc, #552]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad42:	430b      	orrs	r3, r1
 800ad44:	6593      	str	r3, [r2, #88]	; 0x58
 800ad46:	e003      	b.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ad50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad58:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ad5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ad60:	2300      	movs	r3, #0
 800ad62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ad66:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	d03a      	beq.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ad70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad76:	2b30      	cmp	r3, #48	; 0x30
 800ad78:	d01f      	beq.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ad7a:	2b30      	cmp	r3, #48	; 0x30
 800ad7c:	d819      	bhi.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ad7e:	2b20      	cmp	r3, #32
 800ad80:	d00c      	beq.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ad82:	2b20      	cmp	r3, #32
 800ad84:	d815      	bhi.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d019      	beq.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ad8a:	2b10      	cmp	r3, #16
 800ad8c:	d111      	bne.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad8e:	4b77      	ldr	r3, [pc, #476]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad92:	4a76      	ldr	r2, [pc, #472]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ad9a:	e011      	b.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ada0:	3308      	adds	r3, #8
 800ada2:	2102      	movs	r1, #2
 800ada4:	4618      	mov	r0, r3
 800ada6:	f002 f997 	bl	800d0d8 <RCCEx_PLL2_Config>
 800adaa:	4603      	mov	r3, r0
 800adac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800adb0:	e006      	b.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800adb8:	e002      	b.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800adba:	bf00      	nop
 800adbc:	e000      	b.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800adbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d10a      	bne.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800adc8:	4b68      	ldr	r3, [pc, #416]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adcc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800add0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800add4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800add6:	4a65      	ldr	r2, [pc, #404]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800add8:	430b      	orrs	r3, r1
 800adda:	64d3      	str	r3, [r2, #76]	; 0x4c
 800addc:	e003      	b.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ade2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ade6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800adf2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800adf6:	2300      	movs	r3, #0
 800adf8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800adfc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ae00:	460b      	mov	r3, r1
 800ae02:	4313      	orrs	r3, r2
 800ae04:	d051      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ae06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae10:	d035      	beq.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ae12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae16:	d82e      	bhi.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ae18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae1c:	d031      	beq.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ae1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae22:	d828      	bhi.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ae24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae28:	d01a      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ae2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae2e:	d822      	bhi.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d003      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ae34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae38:	d007      	beq.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ae3a:	e01c      	b.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae3c:	4b4b      	ldr	r3, [pc, #300]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae40:	4a4a      	ldr	r2, [pc, #296]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ae48:	e01c      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae4e:	3308      	adds	r3, #8
 800ae50:	2100      	movs	r1, #0
 800ae52:	4618      	mov	r0, r3
 800ae54:	f002 f940 	bl	800d0d8 <RCCEx_PLL2_Config>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ae5e:	e011      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae64:	3328      	adds	r3, #40	; 0x28
 800ae66:	2100      	movs	r1, #0
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f002 f9e7 	bl	800d23c <RCCEx_PLL3_Config>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ae74:	e006      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae7c:	e002      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ae7e:	bf00      	nop
 800ae80:	e000      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ae82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10a      	bne.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ae8c:	4b37      	ldr	r3, [pc, #220]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae90:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ae94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae9a:	4a34      	ldr	r2, [pc, #208]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae9c:	430b      	orrs	r3, r1
 800ae9e:	6513      	str	r3, [r2, #80]	; 0x50
 800aea0:	e003      	b.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aea6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aeaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800aeb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aeba:	2300      	movs	r3, #0
 800aebc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aec0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800aec4:	460b      	mov	r3, r1
 800aec6:	4313      	orrs	r3, r2
 800aec8:	d056      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800aeca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aed4:	d033      	beq.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800aed6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aeda:	d82c      	bhi.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800aedc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aee0:	d02f      	beq.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800aee2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aee6:	d826      	bhi.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800aee8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aeec:	d02b      	beq.n	800af46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800aeee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aef2:	d820      	bhi.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800aef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aef8:	d012      	beq.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800aefa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aefe:	d81a      	bhi.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800af00:	2b00      	cmp	r3, #0
 800af02:	d022      	beq.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800af04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af08:	d115      	bne.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af0e:	3308      	adds	r3, #8
 800af10:	2101      	movs	r1, #1
 800af12:	4618      	mov	r0, r3
 800af14:	f002 f8e0 	bl	800d0d8 <RCCEx_PLL2_Config>
 800af18:	4603      	mov	r3, r0
 800af1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800af1e:	e015      	b.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af24:	3328      	adds	r3, #40	; 0x28
 800af26:	2101      	movs	r1, #1
 800af28:	4618      	mov	r0, r3
 800af2a:	f002 f987 	bl	800d23c <RCCEx_PLL3_Config>
 800af2e:	4603      	mov	r3, r0
 800af30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800af34:	e00a      	b.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af3c:	e006      	b.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800af3e:	bf00      	nop
 800af40:	e004      	b.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800af42:	bf00      	nop
 800af44:	e002      	b.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800af46:	bf00      	nop
 800af48:	e000      	b.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800af4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10d      	bne.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800af54:	4b05      	ldr	r3, [pc, #20]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af58:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800af5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af62:	4a02      	ldr	r2, [pc, #8]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af64:	430b      	orrs	r3, r1
 800af66:	6513      	str	r3, [r2, #80]	; 0x50
 800af68:	e006      	b.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800af6a:	bf00      	nop
 800af6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800af78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af80:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800af84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af88:	2300      	movs	r3, #0
 800af8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af8e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800af92:	460b      	mov	r3, r1
 800af94:	4313      	orrs	r3, r2
 800af96:	d055      	beq.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800af98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800afa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afa4:	d033      	beq.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800afa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afaa:	d82c      	bhi.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800afac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afb0:	d02f      	beq.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800afb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afb6:	d826      	bhi.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800afb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afbc:	d02b      	beq.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800afbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afc2:	d820      	bhi.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800afc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afc8:	d012      	beq.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800afca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afce:	d81a      	bhi.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d022      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800afd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afd8:	d115      	bne.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afde:	3308      	adds	r3, #8
 800afe0:	2101      	movs	r1, #1
 800afe2:	4618      	mov	r0, r3
 800afe4:	f002 f878 	bl	800d0d8 <RCCEx_PLL2_Config>
 800afe8:	4603      	mov	r3, r0
 800afea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800afee:	e015      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aff4:	3328      	adds	r3, #40	; 0x28
 800aff6:	2101      	movs	r1, #1
 800aff8:	4618      	mov	r0, r3
 800affa:	f002 f91f 	bl	800d23c <RCCEx_PLL3_Config>
 800affe:	4603      	mov	r3, r0
 800b000:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b004:	e00a      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b00c:	e006      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b00e:	bf00      	nop
 800b010:	e004      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b012:	bf00      	nop
 800b014:	e002      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b016:	bf00      	nop
 800b018:	e000      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b01a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b01c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b020:	2b00      	cmp	r3, #0
 800b022:	d10b      	bne.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b024:	4ba3      	ldr	r3, [pc, #652]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b028:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b02c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b030:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b034:	4a9f      	ldr	r2, [pc, #636]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b036:	430b      	orrs	r3, r1
 800b038:	6593      	str	r3, [r2, #88]	; 0x58
 800b03a:	e003      	b.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b03c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b040:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b054:	2300      	movs	r3, #0
 800b056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b05a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b05e:	460b      	mov	r3, r1
 800b060:	4313      	orrs	r3, r2
 800b062:	d037      	beq.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b06a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b06e:	d00e      	beq.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b074:	d816      	bhi.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b076:	2b00      	cmp	r3, #0
 800b078:	d018      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b07a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b07e:	d111      	bne.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b080:	4b8c      	ldr	r3, [pc, #560]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b084:	4a8b      	ldr	r2, [pc, #556]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b08a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b08c:	e00f      	b.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b092:	3308      	adds	r3, #8
 800b094:	2101      	movs	r1, #1
 800b096:	4618      	mov	r0, r3
 800b098:	f002 f81e 	bl	800d0d8 <RCCEx_PLL2_Config>
 800b09c:	4603      	mov	r3, r0
 800b09e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b0a2:	e004      	b.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0aa:	e000      	b.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b0ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d10a      	bne.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b0b6:	4b7f      	ldr	r3, [pc, #508]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0c4:	4a7b      	ldr	r2, [pc, #492]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0c6:	430b      	orrs	r3, r1
 800b0c8:	6513      	str	r3, [r2, #80]	; 0x50
 800b0ca:	e003      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0dc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b0e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b0ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	d039      	beq.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b0f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0fa:	2b03      	cmp	r3, #3
 800b0fc:	d81c      	bhi.n	800b138 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b0fe:	a201      	add	r2, pc, #4	; (adr r2, 800b104 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b104:	0800b141 	.word	0x0800b141
 800b108:	0800b115 	.word	0x0800b115
 800b10c:	0800b123 	.word	0x0800b123
 800b110:	0800b141 	.word	0x0800b141
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b114:	4b67      	ldr	r3, [pc, #412]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b118:	4a66      	ldr	r2, [pc, #408]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b11a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b11e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b120:	e00f      	b.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b126:	3308      	adds	r3, #8
 800b128:	2102      	movs	r1, #2
 800b12a:	4618      	mov	r0, r3
 800b12c:	f001 ffd4 	bl	800d0d8 <RCCEx_PLL2_Config>
 800b130:	4603      	mov	r3, r0
 800b132:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b136:	e004      	b.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b13e:	e000      	b.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b140:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b142:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b146:	2b00      	cmp	r3, #0
 800b148:	d10a      	bne.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b14a:	4b5a      	ldr	r3, [pc, #360]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b14c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b14e:	f023 0103 	bic.w	r1, r3, #3
 800b152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b158:	4a56      	ldr	r2, [pc, #344]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b15a:	430b      	orrs	r3, r1
 800b15c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b15e:	e003      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b160:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b164:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b170:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b174:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b178:	2300      	movs	r3, #0
 800b17a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b17e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b182:	460b      	mov	r3, r1
 800b184:	4313      	orrs	r3, r2
 800b186:	f000 809f 	beq.w	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b18a:	4b4b      	ldr	r3, [pc, #300]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a4a      	ldr	r2, [pc, #296]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b194:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b196:	f7f8 fc51 	bl	8003a3c <HAL_GetTick>
 800b19a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b19e:	e00b      	b.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1a0:	f7f8 fc4c 	bl	8003a3c <HAL_GetTick>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b1aa:	1ad3      	subs	r3, r2, r3
 800b1ac:	2b64      	cmp	r3, #100	; 0x64
 800b1ae:	d903      	bls.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1b6:	e005      	b.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1b8:	4b3f      	ldr	r3, [pc, #252]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d0ed      	beq.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b1c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d179      	bne.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b1cc:	4b39      	ldr	r3, [pc, #228]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b1d8:	4053      	eors	r3, r2
 800b1da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d015      	beq.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b1e2:	4b34      	ldr	r3, [pc, #208]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b1ee:	4b31      	ldr	r3, [pc, #196]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1f2:	4a30      	ldr	r2, [pc, #192]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1f8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b1fa:	4b2e      	ldr	r3, [pc, #184]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1fe:	4a2d      	ldr	r2, [pc, #180]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b204:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b206:	4a2b      	ldr	r2, [pc, #172]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b208:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b20c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b20e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b212:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b21a:	d118      	bne.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b21c:	f7f8 fc0e 	bl	8003a3c <HAL_GetTick>
 800b220:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b224:	e00d      	b.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b226:	f7f8 fc09 	bl	8003a3c <HAL_GetTick>
 800b22a:	4602      	mov	r2, r0
 800b22c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b230:	1ad2      	subs	r2, r2, r3
 800b232:	f241 3388 	movw	r3, #5000	; 0x1388
 800b236:	429a      	cmp	r2, r3
 800b238:	d903      	bls.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b23a:	2303      	movs	r3, #3
 800b23c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b240:	e005      	b.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b242:	4b1c      	ldr	r3, [pc, #112]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b246:	f003 0302 	and.w	r3, r3, #2
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d0eb      	beq.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b24e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b252:	2b00      	cmp	r3, #0
 800b254:	d129      	bne.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b25a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b25e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b266:	d10e      	bne.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b268:	4b12      	ldr	r3, [pc, #72]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b26a:	691b      	ldr	r3, [r3, #16]
 800b26c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b274:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b278:	091a      	lsrs	r2, r3, #4
 800b27a:	4b10      	ldr	r3, [pc, #64]	; (800b2bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b27c:	4013      	ands	r3, r2
 800b27e:	4a0d      	ldr	r2, [pc, #52]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b280:	430b      	orrs	r3, r1
 800b282:	6113      	str	r3, [r2, #16]
 800b284:	e005      	b.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b286:	4b0b      	ldr	r3, [pc, #44]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b288:	691b      	ldr	r3, [r3, #16]
 800b28a:	4a0a      	ldr	r2, [pc, #40]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b28c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b290:	6113      	str	r3, [r2, #16]
 800b292:	4b08      	ldr	r3, [pc, #32]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b294:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b29a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b29e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2a2:	4a04      	ldr	r2, [pc, #16]	; (800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2a4:	430b      	orrs	r3, r1
 800b2a6:	6713      	str	r3, [r2, #112]	; 0x70
 800b2a8:	e00e      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b2aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b2b2:	e009      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b2b4:	58024400 	.word	0x58024400
 800b2b8:	58024800 	.word	0x58024800
 800b2bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b2c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d0:	f002 0301 	and.w	r3, r2, #1
 800b2d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2d8:	2300      	movs	r3, #0
 800b2da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b2de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b2e2:	460b      	mov	r3, r1
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	f000 8089 	beq.w	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2f0:	2b28      	cmp	r3, #40	; 0x28
 800b2f2:	d86b      	bhi.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b2f4:	a201      	add	r2, pc, #4	; (adr r2, 800b2fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fa:	bf00      	nop
 800b2fc:	0800b3d5 	.word	0x0800b3d5
 800b300:	0800b3cd 	.word	0x0800b3cd
 800b304:	0800b3cd 	.word	0x0800b3cd
 800b308:	0800b3cd 	.word	0x0800b3cd
 800b30c:	0800b3cd 	.word	0x0800b3cd
 800b310:	0800b3cd 	.word	0x0800b3cd
 800b314:	0800b3cd 	.word	0x0800b3cd
 800b318:	0800b3cd 	.word	0x0800b3cd
 800b31c:	0800b3a1 	.word	0x0800b3a1
 800b320:	0800b3cd 	.word	0x0800b3cd
 800b324:	0800b3cd 	.word	0x0800b3cd
 800b328:	0800b3cd 	.word	0x0800b3cd
 800b32c:	0800b3cd 	.word	0x0800b3cd
 800b330:	0800b3cd 	.word	0x0800b3cd
 800b334:	0800b3cd 	.word	0x0800b3cd
 800b338:	0800b3cd 	.word	0x0800b3cd
 800b33c:	0800b3b7 	.word	0x0800b3b7
 800b340:	0800b3cd 	.word	0x0800b3cd
 800b344:	0800b3cd 	.word	0x0800b3cd
 800b348:	0800b3cd 	.word	0x0800b3cd
 800b34c:	0800b3cd 	.word	0x0800b3cd
 800b350:	0800b3cd 	.word	0x0800b3cd
 800b354:	0800b3cd 	.word	0x0800b3cd
 800b358:	0800b3cd 	.word	0x0800b3cd
 800b35c:	0800b3d5 	.word	0x0800b3d5
 800b360:	0800b3cd 	.word	0x0800b3cd
 800b364:	0800b3cd 	.word	0x0800b3cd
 800b368:	0800b3cd 	.word	0x0800b3cd
 800b36c:	0800b3cd 	.word	0x0800b3cd
 800b370:	0800b3cd 	.word	0x0800b3cd
 800b374:	0800b3cd 	.word	0x0800b3cd
 800b378:	0800b3cd 	.word	0x0800b3cd
 800b37c:	0800b3d5 	.word	0x0800b3d5
 800b380:	0800b3cd 	.word	0x0800b3cd
 800b384:	0800b3cd 	.word	0x0800b3cd
 800b388:	0800b3cd 	.word	0x0800b3cd
 800b38c:	0800b3cd 	.word	0x0800b3cd
 800b390:	0800b3cd 	.word	0x0800b3cd
 800b394:	0800b3cd 	.word	0x0800b3cd
 800b398:	0800b3cd 	.word	0x0800b3cd
 800b39c:	0800b3d5 	.word	0x0800b3d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a4:	3308      	adds	r3, #8
 800b3a6:	2101      	movs	r1, #1
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f001 fe95 	bl	800d0d8 <RCCEx_PLL2_Config>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b3b4:	e00f      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ba:	3328      	adds	r3, #40	; 0x28
 800b3bc:	2101      	movs	r1, #1
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f001 ff3c 	bl	800d23c <RCCEx_PLL3_Config>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b3ca:	e004      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3d2:	e000      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b3d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10a      	bne.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b3de:	4bbf      	ldr	r3, [pc, #764]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3e2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3ec:	4abb      	ldr	r2, [pc, #748]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b3ee:	430b      	orrs	r3, r1
 800b3f0:	6553      	str	r3, [r2, #84]	; 0x54
 800b3f2:	e003      	b.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b3fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b404:	f002 0302 	and.w	r3, r2, #2
 800b408:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b40c:	2300      	movs	r3, #0
 800b40e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b412:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b416:	460b      	mov	r3, r1
 800b418:	4313      	orrs	r3, r2
 800b41a:	d041      	beq.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b41c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b422:	2b05      	cmp	r3, #5
 800b424:	d824      	bhi.n	800b470 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b426:	a201      	add	r2, pc, #4	; (adr r2, 800b42c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b42c:	0800b479 	.word	0x0800b479
 800b430:	0800b445 	.word	0x0800b445
 800b434:	0800b45b 	.word	0x0800b45b
 800b438:	0800b479 	.word	0x0800b479
 800b43c:	0800b479 	.word	0x0800b479
 800b440:	0800b479 	.word	0x0800b479
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b448:	3308      	adds	r3, #8
 800b44a:	2101      	movs	r1, #1
 800b44c:	4618      	mov	r0, r3
 800b44e:	f001 fe43 	bl	800d0d8 <RCCEx_PLL2_Config>
 800b452:	4603      	mov	r3, r0
 800b454:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b458:	e00f      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b45e:	3328      	adds	r3, #40	; 0x28
 800b460:	2101      	movs	r1, #1
 800b462:	4618      	mov	r0, r3
 800b464:	f001 feea 	bl	800d23c <RCCEx_PLL3_Config>
 800b468:	4603      	mov	r3, r0
 800b46a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b46e:	e004      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b476:	e000      	b.n	800b47a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b47a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d10a      	bne.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b482:	4b96      	ldr	r3, [pc, #600]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b486:	f023 0107 	bic.w	r1, r3, #7
 800b48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b48e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b490:	4a92      	ldr	r2, [pc, #584]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b492:	430b      	orrs	r3, r1
 800b494:	6553      	str	r3, [r2, #84]	; 0x54
 800b496:	e003      	b.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b498:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b49c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a8:	f002 0304 	and.w	r3, r2, #4
 800b4ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	d044      	beq.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b4c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b4c8:	2b05      	cmp	r3, #5
 800b4ca:	d825      	bhi.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b4cc:	a201      	add	r2, pc, #4	; (adr r2, 800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d2:	bf00      	nop
 800b4d4:	0800b521 	.word	0x0800b521
 800b4d8:	0800b4ed 	.word	0x0800b4ed
 800b4dc:	0800b503 	.word	0x0800b503
 800b4e0:	0800b521 	.word	0x0800b521
 800b4e4:	0800b521 	.word	0x0800b521
 800b4e8:	0800b521 	.word	0x0800b521
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4f0:	3308      	adds	r3, #8
 800b4f2:	2101      	movs	r1, #1
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f001 fdef 	bl	800d0d8 <RCCEx_PLL2_Config>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b500:	e00f      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b506:	3328      	adds	r3, #40	; 0x28
 800b508:	2101      	movs	r1, #1
 800b50a:	4618      	mov	r0, r3
 800b50c:	f001 fe96 	bl	800d23c <RCCEx_PLL3_Config>
 800b510:	4603      	mov	r3, r0
 800b512:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b516:	e004      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b51e:	e000      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b520:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b522:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b526:	2b00      	cmp	r3, #0
 800b528:	d10b      	bne.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b52a:	4b6c      	ldr	r3, [pc, #432]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b52c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b52e:	f023 0107 	bic.w	r1, r3, #7
 800b532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b53a:	4a68      	ldr	r2, [pc, #416]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b53c:	430b      	orrs	r3, r1
 800b53e:	6593      	str	r3, [r2, #88]	; 0x58
 800b540:	e003      	b.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b542:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b546:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b552:	f002 0320 	and.w	r3, r2, #32
 800b556:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b55a:	2300      	movs	r3, #0
 800b55c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b560:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b564:	460b      	mov	r3, r1
 800b566:	4313      	orrs	r3, r2
 800b568:	d055      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b56a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b56e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b572:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b576:	d033      	beq.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b578:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b57c:	d82c      	bhi.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b57e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b582:	d02f      	beq.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b588:	d826      	bhi.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b58a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b58e:	d02b      	beq.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b590:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b594:	d820      	bhi.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b59a:	d012      	beq.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b59c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5a0:	d81a      	bhi.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d022      	beq.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b5a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5aa:	d115      	bne.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b0:	3308      	adds	r3, #8
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f001 fd8f 	bl	800d0d8 <RCCEx_PLL2_Config>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b5c0:	e015      	b.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5c6:	3328      	adds	r3, #40	; 0x28
 800b5c8:	2102      	movs	r1, #2
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f001 fe36 	bl	800d23c <RCCEx_PLL3_Config>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b5d6:	e00a      	b.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5de:	e006      	b.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b5e0:	bf00      	nop
 800b5e2:	e004      	b.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b5e4:	bf00      	nop
 800b5e6:	e002      	b.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b5e8:	bf00      	nop
 800b5ea:	e000      	b.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b5ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d10b      	bne.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b5f6:	4b39      	ldr	r3, [pc, #228]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b5f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5fa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b5fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b606:	4a35      	ldr	r2, [pc, #212]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b608:	430b      	orrs	r3, r1
 800b60a:	6553      	str	r3, [r2, #84]	; 0x54
 800b60c:	e003      	b.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b60e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b612:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b626:	2300      	movs	r3, #0
 800b628:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b62c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b630:	460b      	mov	r3, r1
 800b632:	4313      	orrs	r3, r2
 800b634:	d058      	beq.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b63a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b63e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b642:	d033      	beq.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b644:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b648:	d82c      	bhi.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b64a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b64e:	d02f      	beq.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b654:	d826      	bhi.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b656:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b65a:	d02b      	beq.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b65c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b660:	d820      	bhi.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b666:	d012      	beq.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b66c:	d81a      	bhi.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d022      	beq.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b676:	d115      	bne.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b67c:	3308      	adds	r3, #8
 800b67e:	2100      	movs	r1, #0
 800b680:	4618      	mov	r0, r3
 800b682:	f001 fd29 	bl	800d0d8 <RCCEx_PLL2_Config>
 800b686:	4603      	mov	r3, r0
 800b688:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b68c:	e015      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b692:	3328      	adds	r3, #40	; 0x28
 800b694:	2102      	movs	r1, #2
 800b696:	4618      	mov	r0, r3
 800b698:	f001 fdd0 	bl	800d23c <RCCEx_PLL3_Config>
 800b69c:	4603      	mov	r3, r0
 800b69e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b6a2:	e00a      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6aa:	e006      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b6ac:	bf00      	nop
 800b6ae:	e004      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b6b0:	bf00      	nop
 800b6b2:	e002      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b6b4:	bf00      	nop
 800b6b6:	e000      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b6b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d10e      	bne.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b6c2:	4b06      	ldr	r3, [pc, #24]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b6c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6c6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b6d2:	4a02      	ldr	r2, [pc, #8]	; (800b6dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b6d4:	430b      	orrs	r3, r1
 800b6d6:	6593      	str	r3, [r2, #88]	; 0x58
 800b6d8:	e006      	b.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b6da:	bf00      	nop
 800b6dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b6e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b6f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b6fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b702:	460b      	mov	r3, r1
 800b704:	4313      	orrs	r3, r2
 800b706:	d055      	beq.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b70c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b710:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b714:	d033      	beq.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b716:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b71a:	d82c      	bhi.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b71c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b720:	d02f      	beq.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b726:	d826      	bhi.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b728:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b72c:	d02b      	beq.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b72e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b732:	d820      	bhi.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b738:	d012      	beq.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b73a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b73e:	d81a      	bhi.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b740:	2b00      	cmp	r3, #0
 800b742:	d022      	beq.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b748:	d115      	bne.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b74e:	3308      	adds	r3, #8
 800b750:	2100      	movs	r1, #0
 800b752:	4618      	mov	r0, r3
 800b754:	f001 fcc0 	bl	800d0d8 <RCCEx_PLL2_Config>
 800b758:	4603      	mov	r3, r0
 800b75a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b75e:	e015      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b764:	3328      	adds	r3, #40	; 0x28
 800b766:	2102      	movs	r1, #2
 800b768:	4618      	mov	r0, r3
 800b76a:	f001 fd67 	bl	800d23c <RCCEx_PLL3_Config>
 800b76e:	4603      	mov	r3, r0
 800b770:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b774:	e00a      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b776:	2301      	movs	r3, #1
 800b778:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b77c:	e006      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b77e:	bf00      	nop
 800b780:	e004      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b782:	bf00      	nop
 800b784:	e002      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b786:	bf00      	nop
 800b788:	e000      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b78a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b78c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b790:	2b00      	cmp	r3, #0
 800b792:	d10b      	bne.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b794:	4ba1      	ldr	r3, [pc, #644]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b798:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b7a4:	4a9d      	ldr	r2, [pc, #628]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7a6:	430b      	orrs	r3, r1
 800b7a8:	6593      	str	r3, [r2, #88]	; 0x58
 800b7aa:	e003      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b7b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	f002 0308 	and.w	r3, r2, #8
 800b7c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b7ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	d01e      	beq.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b7d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7e0:	d10c      	bne.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b7e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7e6:	3328      	adds	r3, #40	; 0x28
 800b7e8:	2102      	movs	r1, #2
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f001 fd26 	bl	800d23c <RCCEx_PLL3_Config>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d002      	beq.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b7fc:	4b87      	ldr	r3, [pc, #540]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b800:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b80c:	4a83      	ldr	r2, [pc, #524]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b80e:	430b      	orrs	r3, r1
 800b810:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81a:	f002 0310 	and.w	r3, r2, #16
 800b81e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b822:	2300      	movs	r3, #0
 800b824:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b828:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b82c:	460b      	mov	r3, r1
 800b82e:	4313      	orrs	r3, r2
 800b830:	d01e      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b836:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b83a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b83e:	d10c      	bne.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b844:	3328      	adds	r3, #40	; 0x28
 800b846:	2102      	movs	r1, #2
 800b848:	4618      	mov	r0, r3
 800b84a:	f001 fcf7 	bl	800d23c <RCCEx_PLL3_Config>
 800b84e:	4603      	mov	r3, r0
 800b850:	2b00      	cmp	r3, #0
 800b852:	d002      	beq.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b854:	2301      	movs	r3, #1
 800b856:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b85a:	4b70      	ldr	r3, [pc, #448]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b85c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b85e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b866:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b86a:	4a6c      	ldr	r2, [pc, #432]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b86c:	430b      	orrs	r3, r1
 800b86e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b878:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b87c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b880:	2300      	movs	r3, #0
 800b882:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b886:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b88a:	460b      	mov	r3, r1
 800b88c:	4313      	orrs	r3, r2
 800b88e:	d03e      	beq.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b894:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b898:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b89c:	d022      	beq.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b89e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8a2:	d81b      	bhi.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d003      	beq.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b8a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8ac:	d00b      	beq.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b8ae:	e015      	b.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8b4:	3308      	adds	r3, #8
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f001 fc0d 	bl	800d0d8 <RCCEx_PLL2_Config>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b8c4:	e00f      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ca:	3328      	adds	r3, #40	; 0x28
 800b8cc:	2102      	movs	r1, #2
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f001 fcb4 	bl	800d23c <RCCEx_PLL3_Config>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b8da:	e004      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8dc:	2301      	movs	r3, #1
 800b8de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8e2:	e000      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b8e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d10b      	bne.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b8ee:	4b4b      	ldr	r3, [pc, #300]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8f2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b8f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b8fe:	4a47      	ldr	r2, [pc, #284]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b900:	430b      	orrs	r3, r1
 800b902:	6593      	str	r3, [r2, #88]	; 0x58
 800b904:	e003      	b.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b906:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b90a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b90e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b91a:	67bb      	str	r3, [r7, #120]	; 0x78
 800b91c:	2300      	movs	r3, #0
 800b91e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b920:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b924:	460b      	mov	r3, r1
 800b926:	4313      	orrs	r3, r2
 800b928:	d03b      	beq.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b92e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b932:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b936:	d01f      	beq.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b938:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b93c:	d818      	bhi.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b93e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b942:	d003      	beq.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b944:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b948:	d007      	beq.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b94a:	e011      	b.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b94c:	4b33      	ldr	r3, [pc, #204]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b950:	4a32      	ldr	r2, [pc, #200]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b956:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b958:	e00f      	b.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b95a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b95e:	3328      	adds	r3, #40	; 0x28
 800b960:	2101      	movs	r1, #1
 800b962:	4618      	mov	r0, r3
 800b964:	f001 fc6a 	bl	800d23c <RCCEx_PLL3_Config>
 800b968:	4603      	mov	r3, r0
 800b96a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b96e:	e004      	b.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b970:	2301      	movs	r3, #1
 800b972:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b976:	e000      	b.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b97a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d10b      	bne.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b982:	4b26      	ldr	r3, [pc, #152]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b986:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b98a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b98e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b992:	4a22      	ldr	r2, [pc, #136]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b994:	430b      	orrs	r3, r1
 800b996:	6553      	str	r3, [r2, #84]	; 0x54
 800b998:	e003      	b.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b99a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b99e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b9a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9aa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b9ae:	673b      	str	r3, [r7, #112]	; 0x70
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	677b      	str	r3, [r7, #116]	; 0x74
 800b9b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	d034      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b9be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d003      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b9c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9cc:	d007      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b9ce:	e011      	b.n	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9d0:	4b12      	ldr	r3, [pc, #72]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d4:	4a11      	ldr	r2, [pc, #68]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b9dc:	e00e      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e2:	3308      	adds	r3, #8
 800b9e4:	2102      	movs	r1, #2
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f001 fb76 	bl	800d0d8 <RCCEx_PLL2_Config>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b9f2:	e003      	b.n	800b9fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d10d      	bne.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ba04:	4b05      	ldr	r3, [pc, #20]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba12:	4a02      	ldr	r2, [pc, #8]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba14:	430b      	orrs	r3, r1
 800ba16:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba18:	e006      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ba1a:	bf00      	nop
 800ba1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ba28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba30:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ba34:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba36:	2300      	movs	r3, #0
 800ba38:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba3a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ba3e:	460b      	mov	r3, r1
 800ba40:	4313      	orrs	r3, r2
 800ba42:	d00c      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba48:	3328      	adds	r3, #40	; 0x28
 800ba4a:	2102      	movs	r1, #2
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f001 fbf5 	bl	800d23c <RCCEx_PLL3_Config>
 800ba52:	4603      	mov	r3, r0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ba5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba66:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ba6a:	663b      	str	r3, [r7, #96]	; 0x60
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	667b      	str	r3, [r7, #100]	; 0x64
 800ba70:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ba74:	460b      	mov	r3, r1
 800ba76:	4313      	orrs	r3, r2
 800ba78:	d038      	beq.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ba7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba86:	d018      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ba88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba8c:	d811      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ba8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba92:	d014      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ba94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba98:	d80b      	bhi.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d011      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ba9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800baa2:	d106      	bne.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baa4:	4bc3      	ldr	r3, [pc, #780]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800baa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa8:	4ac2      	ldr	r2, [pc, #776]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800baaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800baae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bab0:	e008      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bab2:	2301      	movs	r3, #1
 800bab4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bab8:	e004      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800baba:	bf00      	nop
 800babc:	e002      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800babe:	bf00      	nop
 800bac0:	e000      	b.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d10b      	bne.n	800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bacc:	4bb9      	ldr	r3, [pc, #740]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bad0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800badc:	4ab5      	ldr	r2, [pc, #724]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bade:	430b      	orrs	r3, r1
 800bae0:	6553      	str	r3, [r2, #84]	; 0x54
 800bae2:	e003      	b.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bae8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800baec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800baf8:	65bb      	str	r3, [r7, #88]	; 0x58
 800bafa:	2300      	movs	r3, #0
 800bafc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bafe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bb02:	460b      	mov	r3, r1
 800bb04:	4313      	orrs	r3, r2
 800bb06:	d009      	beq.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bb08:	4baa      	ldr	r3, [pc, #680]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb16:	4aa7      	ldr	r2, [pc, #668]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb18:	430b      	orrs	r3, r1
 800bb1a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bb1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb24:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bb28:	653b      	str	r3, [r7, #80]	; 0x50
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	657b      	str	r3, [r7, #84]	; 0x54
 800bb2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bb32:	460b      	mov	r3, r1
 800bb34:	4313      	orrs	r3, r2
 800bb36:	d00a      	beq.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bb38:	4b9e      	ldr	r3, [pc, #632]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb3a:	691b      	ldr	r3, [r3, #16]
 800bb3c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bb40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bb48:	4a9a      	ldr	r2, [pc, #616]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb4a:	430b      	orrs	r3, r1
 800bb4c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bb4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb56:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bb5a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb60:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bb64:	460b      	mov	r3, r1
 800bb66:	4313      	orrs	r3, r2
 800bb68:	d009      	beq.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bb6a:	4b92      	ldr	r3, [pc, #584]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb6e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bb72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb78:	4a8e      	ldr	r2, [pc, #568]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb7a:	430b      	orrs	r3, r1
 800bb7c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bb7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb86:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bb8a:	643b      	str	r3, [r7, #64]	; 0x40
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	647b      	str	r3, [r7, #68]	; 0x44
 800bb90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bb94:	460b      	mov	r3, r1
 800bb96:	4313      	orrs	r3, r2
 800bb98:	d00e      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bb9a:	4b86      	ldr	r3, [pc, #536]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb9c:	691b      	ldr	r3, [r3, #16]
 800bb9e:	4a85      	ldr	r2, [pc, #532]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bba0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bba4:	6113      	str	r3, [r2, #16]
 800bba6:	4b83      	ldr	r3, [pc, #524]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bba8:	6919      	ldr	r1, [r3, #16]
 800bbaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bbb2:	4a80      	ldr	r2, [pc, #512]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbb4:	430b      	orrs	r3, r1
 800bbb6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bbb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bbc4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	d009      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bbd4:	4b77      	ldr	r3, [pc, #476]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbd8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bbdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbe2:	4a74      	ldr	r2, [pc, #464]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbe4:	430b      	orrs	r3, r1
 800bbe6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bbe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bbf4:	633b      	str	r3, [r7, #48]	; 0x30
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbfa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bbfe:	460b      	mov	r3, r1
 800bc00:	4313      	orrs	r3, r2
 800bc02:	d00a      	beq.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bc04:	4b6b      	ldr	r3, [pc, #428]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc08:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bc0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc14:	4a67      	ldr	r2, [pc, #412]	; (800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc16:	430b      	orrs	r3, r1
 800bc18:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bc1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc22:	2100      	movs	r1, #0
 800bc24:	62b9      	str	r1, [r7, #40]	; 0x28
 800bc26:	f003 0301 	and.w	r3, r3, #1
 800bc2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc2c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bc30:	460b      	mov	r3, r1
 800bc32:	4313      	orrs	r3, r2
 800bc34:	d011      	beq.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc3a:	3308      	adds	r3, #8
 800bc3c:	2100      	movs	r1, #0
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f001 fa4a 	bl	800d0d8 <RCCEx_PLL2_Config>
 800bc44:	4603      	mov	r3, r0
 800bc46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bc4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d003      	beq.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bc5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc62:	2100      	movs	r1, #0
 800bc64:	6239      	str	r1, [r7, #32]
 800bc66:	f003 0302 	and.w	r3, r3, #2
 800bc6a:	627b      	str	r3, [r7, #36]	; 0x24
 800bc6c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bc70:	460b      	mov	r3, r1
 800bc72:	4313      	orrs	r3, r2
 800bc74:	d011      	beq.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc7a:	3308      	adds	r3, #8
 800bc7c:	2101      	movs	r1, #1
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f001 fa2a 	bl	800d0d8 <RCCEx_PLL2_Config>
 800bc84:	4603      	mov	r3, r0
 800bc86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bc8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d003      	beq.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bc9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca2:	2100      	movs	r1, #0
 800bca4:	61b9      	str	r1, [r7, #24]
 800bca6:	f003 0304 	and.w	r3, r3, #4
 800bcaa:	61fb      	str	r3, [r7, #28]
 800bcac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	d011      	beq.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bcb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcba:	3308      	adds	r3, #8
 800bcbc:	2102      	movs	r1, #2
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f001 fa0a 	bl	800d0d8 <RCCEx_PLL2_Config>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bcca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d003      	beq.n	800bcda <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bcda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce2:	2100      	movs	r1, #0
 800bce4:	6139      	str	r1, [r7, #16]
 800bce6:	f003 0308 	and.w	r3, r3, #8
 800bcea:	617b      	str	r3, [r7, #20]
 800bcec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	d011      	beq.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bcf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcfa:	3328      	adds	r3, #40	; 0x28
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f001 fa9c 	bl	800d23c <RCCEx_PLL3_Config>
 800bd04:	4603      	mov	r3, r0
 800bd06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800bd0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d003      	beq.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bd1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd22:	2100      	movs	r1, #0
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	f003 0310 	and.w	r3, r3, #16
 800bd2a:	60fb      	str	r3, [r7, #12]
 800bd2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bd30:	460b      	mov	r3, r1
 800bd32:	4313      	orrs	r3, r2
 800bd34:	d011      	beq.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd3a:	3328      	adds	r3, #40	; 0x28
 800bd3c:	2101      	movs	r1, #1
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f001 fa7c 	bl	800d23c <RCCEx_PLL3_Config>
 800bd44:	4603      	mov	r3, r0
 800bd46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d003      	beq.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bd5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd62:	2100      	movs	r1, #0
 800bd64:	6039      	str	r1, [r7, #0]
 800bd66:	f003 0320 	and.w	r3, r3, #32
 800bd6a:	607b      	str	r3, [r7, #4]
 800bd6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bd70:	460b      	mov	r3, r1
 800bd72:	4313      	orrs	r3, r2
 800bd74:	d011      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd7a:	3328      	adds	r3, #40	; 0x28
 800bd7c:	2102      	movs	r1, #2
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f001 fa5c 	bl	800d23c <RCCEx_PLL3_Config>
 800bd84:	4603      	mov	r3, r0
 800bd86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d003      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800bd9a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d101      	bne.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800bda2:	2300      	movs	r3, #0
 800bda4:	e000      	b.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800bda6:	2301      	movs	r3, #1
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bdb4:	58024400 	.word	0x58024400

0800bdb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b090      	sub	sp, #64	; 0x40
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bdc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdc6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bdca:	430b      	orrs	r3, r1
 800bdcc:	f040 8094 	bne.w	800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bdd0:	4b9e      	ldr	r3, [pc, #632]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdd4:	f003 0307 	and.w	r3, r3, #7
 800bdd8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bddc:	2b04      	cmp	r3, #4
 800bdde:	f200 8087 	bhi.w	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bde2:	a201      	add	r2, pc, #4	; (adr r2, 800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde8:	0800bdfd 	.word	0x0800bdfd
 800bdec:	0800be25 	.word	0x0800be25
 800bdf0:	0800be4d 	.word	0x0800be4d
 800bdf4:	0800bee9 	.word	0x0800bee9
 800bdf8:	0800be75 	.word	0x0800be75
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bdfc:	4b93      	ldr	r3, [pc, #588]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be08:	d108      	bne.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be0e:	4618      	mov	r0, r3
 800be10:	f001 f810 	bl	800ce34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be18:	f000 bd45 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be1c:	2300      	movs	r3, #0
 800be1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be20:	f000 bd41 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be24:	4b89      	ldr	r3, [pc, #548]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be30:	d108      	bne.n	800be44 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be32:	f107 0318 	add.w	r3, r7, #24
 800be36:	4618      	mov	r0, r3
 800be38:	f000 fd54 	bl	800c8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be40:	f000 bd31 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be44:	2300      	movs	r3, #0
 800be46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be48:	f000 bd2d 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be4c:	4b7f      	ldr	r3, [pc, #508]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be58:	d108      	bne.n	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be5a:	f107 030c 	add.w	r3, r7, #12
 800be5e:	4618      	mov	r0, r3
 800be60:	f000 fe94 	bl	800cb8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be68:	f000 bd1d 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be6c:	2300      	movs	r3, #0
 800be6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be70:	f000 bd19 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be74:	4b75      	ldr	r3, [pc, #468]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be7c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be7e:	4b73      	ldr	r3, [pc, #460]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f003 0304 	and.w	r3, r3, #4
 800be86:	2b04      	cmp	r3, #4
 800be88:	d10c      	bne.n	800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800be8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d109      	bne.n	800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be90:	4b6e      	ldr	r3, [pc, #440]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	08db      	lsrs	r3, r3, #3
 800be96:	f003 0303 	and.w	r3, r3, #3
 800be9a:	4a6d      	ldr	r2, [pc, #436]	; (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800be9c:	fa22 f303 	lsr.w	r3, r2, r3
 800bea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bea2:	e01f      	b.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bea4:	4b69      	ldr	r3, [pc, #420]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beb0:	d106      	bne.n	800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800beb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800beb8:	d102      	bne.n	800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800beba:	4b66      	ldr	r3, [pc, #408]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bebe:	e011      	b.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bec0:	4b62      	ldr	r3, [pc, #392]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bec8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800becc:	d106      	bne.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bed4:	d102      	bne.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bed6:	4b60      	ldr	r3, [pc, #384]	; (800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beda:	e003      	b.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bedc:	2300      	movs	r3, #0
 800bede:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bee0:	f000 bce1 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bee4:	f000 bcdf 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bee8:	4b5c      	ldr	r3, [pc, #368]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800beea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beec:	f000 bcdb 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bef0:	2300      	movs	r3, #0
 800bef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bef4:	f000 bcd7 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800befc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800bf00:	430b      	orrs	r3, r1
 800bf02:	f040 80ad 	bne.w	800c060 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bf06:	4b51      	ldr	r3, [pc, #324]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf0a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bf0e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf16:	d056      	beq.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf1e:	f200 8090 	bhi.w	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf24:	2bc0      	cmp	r3, #192	; 0xc0
 800bf26:	f000 8088 	beq.w	800c03a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2c:	2bc0      	cmp	r3, #192	; 0xc0
 800bf2e:	f200 8088 	bhi.w	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf34:	2b80      	cmp	r3, #128	; 0x80
 800bf36:	d032      	beq.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3a:	2b80      	cmp	r3, #128	; 0x80
 800bf3c:	f200 8081 	bhi.w	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d003      	beq.n	800bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf48:	2b40      	cmp	r3, #64	; 0x40
 800bf4a:	d014      	beq.n	800bf76 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bf4c:	e079      	b.n	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf4e:	4b3f      	ldr	r3, [pc, #252]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf5a:	d108      	bne.n	800bf6e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf60:	4618      	mov	r0, r3
 800bf62:	f000 ff67 	bl	800ce34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf6a:	f000 bc9c 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf72:	f000 bc98 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf76:	4b35      	ldr	r3, [pc, #212]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf82:	d108      	bne.n	800bf96 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf84:	f107 0318 	add.w	r3, r7, #24
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f000 fcab 	bl	800c8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf92:	f000 bc88 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf96:	2300      	movs	r3, #0
 800bf98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf9a:	f000 bc84 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf9e:	4b2b      	ldr	r3, [pc, #172]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfaa:	d108      	bne.n	800bfbe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfac:	f107 030c 	add.w	r3, r7, #12
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f000 fdeb 	bl	800cb8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfba:	f000 bc74 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfc2:	f000 bc70 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bfc6:	4b21      	ldr	r3, [pc, #132]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bfce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bfd0:	4b1e      	ldr	r3, [pc, #120]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f003 0304 	and.w	r3, r3, #4
 800bfd8:	2b04      	cmp	r3, #4
 800bfda:	d10c      	bne.n	800bff6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800bfdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d109      	bne.n	800bff6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfe2:	4b1a      	ldr	r3, [pc, #104]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	08db      	lsrs	r3, r3, #3
 800bfe8:	f003 0303 	and.w	r3, r3, #3
 800bfec:	4a18      	ldr	r2, [pc, #96]	; (800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bfee:	fa22 f303 	lsr.w	r3, r2, r3
 800bff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bff4:	e01f      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bff6:	4b15      	ldr	r3, [pc, #84]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c002:	d106      	bne.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c00a:	d102      	bne.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c00c:	4b11      	ldr	r3, [pc, #68]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c00e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c010:	e011      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c012:	4b0e      	ldr	r3, [pc, #56]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c01a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c01e:	d106      	bne.n	800c02e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c026:	d102      	bne.n	800c02e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c028:	4b0b      	ldr	r3, [pc, #44]	; (800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c02a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c02c:	e003      	b.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c02e:	2300      	movs	r3, #0
 800c030:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c032:	f000 bc38 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c036:	f000 bc36 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c03a:	4b08      	ldr	r3, [pc, #32]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c03c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c03e:	f000 bc32 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c042:	2300      	movs	r3, #0
 800c044:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c046:	f000 bc2e 	b.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c04a:	bf00      	nop
 800c04c:	58024400 	.word	0x58024400
 800c050:	03d09000 	.word	0x03d09000
 800c054:	003d0900 	.word	0x003d0900
 800c058:	017d7840 	.word	0x017d7840
 800c05c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c060:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c064:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c068:	430b      	orrs	r3, r1
 800c06a:	f040 809c 	bne.w	800c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c06e:	4b9e      	ldr	r3, [pc, #632]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c072:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c076:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c07e:	d054      	beq.n	800c12a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c082:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c086:	f200 808b 	bhi.w	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c090:	f000 8083 	beq.w	800c19a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c096:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c09a:	f200 8081 	bhi.w	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c0a4:	d02f      	beq.n	800c106 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c0ac:	d878      	bhi.n	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d004      	beq.n	800c0be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c0ba:	d012      	beq.n	800c0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c0bc:	e070      	b.n	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c0be:	4b8a      	ldr	r3, [pc, #552]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0ca:	d107      	bne.n	800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f000 feaf 	bl	800ce34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0da:	e3e4      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0e0:	e3e1      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0e2:	4b81      	ldr	r3, [pc, #516]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0ee:	d107      	bne.n	800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0f0:	f107 0318 	add.w	r3, r7, #24
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f000 fbf5 	bl	800c8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0fe:	e3d2      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c100:	2300      	movs	r3, #0
 800c102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c104:	e3cf      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c106:	4b78      	ldr	r3, [pc, #480]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c10e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c112:	d107      	bne.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c114:	f107 030c 	add.w	r3, r7, #12
 800c118:	4618      	mov	r0, r3
 800c11a:	f000 fd37 	bl	800cb8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c122:	e3c0      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c124:	2300      	movs	r3, #0
 800c126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c128:	e3bd      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c12a:	4b6f      	ldr	r3, [pc, #444]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c12c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c12e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c132:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c134:	4b6c      	ldr	r3, [pc, #432]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f003 0304 	and.w	r3, r3, #4
 800c13c:	2b04      	cmp	r3, #4
 800c13e:	d10c      	bne.n	800c15a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c142:	2b00      	cmp	r3, #0
 800c144:	d109      	bne.n	800c15a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c146:	4b68      	ldr	r3, [pc, #416]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	08db      	lsrs	r3, r3, #3
 800c14c:	f003 0303 	and.w	r3, r3, #3
 800c150:	4a66      	ldr	r2, [pc, #408]	; (800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c152:	fa22 f303 	lsr.w	r3, r2, r3
 800c156:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c158:	e01e      	b.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c15a:	4b63      	ldr	r3, [pc, #396]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c166:	d106      	bne.n	800c176 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c16a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c16e:	d102      	bne.n	800c176 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c170:	4b5f      	ldr	r3, [pc, #380]	; (800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c172:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c174:	e010      	b.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c176:	4b5c      	ldr	r3, [pc, #368]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c17e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c182:	d106      	bne.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c18a:	d102      	bne.n	800c192 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c18c:	4b59      	ldr	r3, [pc, #356]	; (800c2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c18e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c190:	e002      	b.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c192:	2300      	movs	r3, #0
 800c194:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c196:	e386      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c198:	e385      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c19a:	4b57      	ldr	r3, [pc, #348]	; (800c2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c19c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c19e:	e382      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1a4:	e37f      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c1a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1aa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c1ae:	430b      	orrs	r3, r1
 800c1b0:	f040 80a7 	bne.w	800c302 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c1b4:	4b4c      	ldr	r3, [pc, #304]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1b8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c1bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c1c4:	d055      	beq.n	800c272 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c1cc:	f200 8096 	bhi.w	800c2fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c1d6:	f000 8084 	beq.w	800c2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c1e0:	f200 808c 	bhi.w	800c2fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1ea:	d030      	beq.n	800c24e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1f2:	f200 8083 	bhi.w	800c2fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d004      	beq.n	800c206 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c202:	d012      	beq.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c204:	e07a      	b.n	800c2fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c206:	4b38      	ldr	r3, [pc, #224]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c20e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c212:	d107      	bne.n	800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c218:	4618      	mov	r0, r3
 800c21a:	f000 fe0b 	bl	800ce34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c220:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c222:	e340      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c224:	2300      	movs	r3, #0
 800c226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c228:	e33d      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c22a:	4b2f      	ldr	r3, [pc, #188]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c232:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c236:	d107      	bne.n	800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c238:	f107 0318 	add.w	r3, r7, #24
 800c23c:	4618      	mov	r0, r3
 800c23e:	f000 fb51 	bl	800c8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c246:	e32e      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c248:	2300      	movs	r3, #0
 800c24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c24c:	e32b      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c24e:	4b26      	ldr	r3, [pc, #152]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c25a:	d107      	bne.n	800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c25c:	f107 030c 	add.w	r3, r7, #12
 800c260:	4618      	mov	r0, r3
 800c262:	f000 fc93 	bl	800cb8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c26a:	e31c      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c26c:	2300      	movs	r3, #0
 800c26e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c270:	e319      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c272:	4b1d      	ldr	r3, [pc, #116]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c276:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c27a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c27c:	4b1a      	ldr	r3, [pc, #104]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f003 0304 	and.w	r3, r3, #4
 800c284:	2b04      	cmp	r3, #4
 800c286:	d10c      	bne.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d109      	bne.n	800c2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c28e:	4b16      	ldr	r3, [pc, #88]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	08db      	lsrs	r3, r3, #3
 800c294:	f003 0303 	and.w	r3, r3, #3
 800c298:	4a14      	ldr	r2, [pc, #80]	; (800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c29a:	fa22 f303 	lsr.w	r3, r2, r3
 800c29e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2a0:	e01e      	b.n	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c2a2:	4b11      	ldr	r3, [pc, #68]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2ae:	d106      	bne.n	800c2be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2b6:	d102      	bne.n	800c2be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c2b8:	4b0d      	ldr	r3, [pc, #52]	; (800c2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2bc:	e010      	b.n	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c2be:	4b0a      	ldr	r3, [pc, #40]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2ca:	d106      	bne.n	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2d2:	d102      	bne.n	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c2d4:	4b07      	ldr	r3, [pc, #28]	; (800c2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2d8:	e002      	b.n	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c2de:	e2e2      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c2e0:	e2e1      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c2e2:	4b05      	ldr	r3, [pc, #20]	; (800c2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2e6:	e2de      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c2e8:	58024400 	.word	0x58024400
 800c2ec:	03d09000 	.word	0x03d09000
 800c2f0:	003d0900 	.word	0x003d0900
 800c2f4:	017d7840 	.word	0x017d7840
 800c2f8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c300:	e2d1      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c302:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c306:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c30a:	430b      	orrs	r3, r1
 800c30c:	f040 809c 	bne.w	800c448 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c310:	4b93      	ldr	r3, [pc, #588]	; (800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c314:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c318:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c320:	d054      	beq.n	800c3cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c328:	f200 808b 	bhi.w	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c332:	f000 8083 	beq.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c338:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c33c:	f200 8081 	bhi.w	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c346:	d02f      	beq.n	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c34e:	d878      	bhi.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c352:	2b00      	cmp	r3, #0
 800c354:	d004      	beq.n	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c35c:	d012      	beq.n	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c35e:	e070      	b.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c360:	4b7f      	ldr	r3, [pc, #508]	; (800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c36c:	d107      	bne.n	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c36e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c372:	4618      	mov	r0, r3
 800c374:	f000 fd5e 	bl	800ce34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c37c:	e293      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c37e:	2300      	movs	r3, #0
 800c380:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c382:	e290      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c384:	4b76      	ldr	r3, [pc, #472]	; (800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c38c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c390:	d107      	bne.n	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c392:	f107 0318 	add.w	r3, r7, #24
 800c396:	4618      	mov	r0, r3
 800c398:	f000 faa4 	bl	800c8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3a0:	e281      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a6:	e27e      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3a8:	4b6d      	ldr	r3, [pc, #436]	; (800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3b4:	d107      	bne.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3b6:	f107 030c 	add.w	r3, r7, #12
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f000 fbe6 	bl	800cb8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3c4:	e26f      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ca:	e26c      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c3cc:	4b64      	ldr	r3, [pc, #400]	; (800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3d4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3d6:	4b62      	ldr	r3, [pc, #392]	; (800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f003 0304 	and.w	r3, r3, #4
 800c3de:	2b04      	cmp	r3, #4
 800c3e0:	d10c      	bne.n	800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d109      	bne.n	800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3e8:	4b5d      	ldr	r3, [pc, #372]	; (800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	08db      	lsrs	r3, r3, #3
 800c3ee:	f003 0303 	and.w	r3, r3, #3
 800c3f2:	4a5c      	ldr	r2, [pc, #368]	; (800c564 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c3f4:	fa22 f303 	lsr.w	r3, r2, r3
 800c3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3fa:	e01e      	b.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3fc:	4b58      	ldr	r3, [pc, #352]	; (800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c408:	d106      	bne.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c40c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c410:	d102      	bne.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c412:	4b55      	ldr	r3, [pc, #340]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c414:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c416:	e010      	b.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c418:	4b51      	ldr	r3, [pc, #324]	; (800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c424:	d106      	bne.n	800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c42c:	d102      	bne.n	800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c42e:	4b4f      	ldr	r3, [pc, #316]	; (800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c430:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c432:	e002      	b.n	800c43a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c434:	2300      	movs	r3, #0
 800c436:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c438:	e235      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c43a:	e234      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c43c:	4b4c      	ldr	r3, [pc, #304]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c440:	e231      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c442:	2300      	movs	r3, #0
 800c444:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c446:	e22e      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c44c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c450:	430b      	orrs	r3, r1
 800c452:	f040 808f 	bne.w	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c456:	4b42      	ldr	r3, [pc, #264]	; (800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c45a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c45e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c462:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c466:	d06b      	beq.n	800c540 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c46e:	d874      	bhi.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c472:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c476:	d056      	beq.n	800c526 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c47e:	d86c      	bhi.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c482:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c486:	d03b      	beq.n	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c48e:	d864      	bhi.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c492:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c496:	d021      	beq.n	800c4dc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c49e:	d85c      	bhi.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d004      	beq.n	800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4ac:	d004      	beq.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c4ae:	e054      	b.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c4b0:	f7fe fa0a 	bl	800a8c8 <HAL_RCC_GetPCLK1Freq>
 800c4b4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c4b6:	e1f6      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4b8:	4b29      	ldr	r3, [pc, #164]	; (800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4c4:	d107      	bne.n	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4c6:	f107 0318 	add.w	r3, r7, #24
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f000 fa0a 	bl	800c8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4d4:	e1e7      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4da:	e1e4      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4dc:	4b20      	ldr	r3, [pc, #128]	; (800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4e8:	d107      	bne.n	800c4fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4ea:	f107 030c 	add.w	r3, r7, #12
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f000 fb4c 	bl	800cb8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4f8:	e1d5      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4fe:	e1d2      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c500:	4b17      	ldr	r3, [pc, #92]	; (800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f003 0304 	and.w	r3, r3, #4
 800c508:	2b04      	cmp	r3, #4
 800c50a:	d109      	bne.n	800c520 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c50c:	4b14      	ldr	r3, [pc, #80]	; (800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	08db      	lsrs	r3, r3, #3
 800c512:	f003 0303 	and.w	r3, r3, #3
 800c516:	4a13      	ldr	r2, [pc, #76]	; (800c564 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c518:	fa22 f303 	lsr.w	r3, r2, r3
 800c51c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c51e:	e1c2      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c520:	2300      	movs	r3, #0
 800c522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c524:	e1bf      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c526:	4b0e      	ldr	r3, [pc, #56]	; (800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c52e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c532:	d102      	bne.n	800c53a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c534:	4b0c      	ldr	r3, [pc, #48]	; (800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c536:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c538:	e1b5      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c53a:	2300      	movs	r3, #0
 800c53c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c53e:	e1b2      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c540:	4b07      	ldr	r3, [pc, #28]	; (800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c54c:	d102      	bne.n	800c554 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c54e:	4b07      	ldr	r3, [pc, #28]	; (800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c550:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c552:	e1a8      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c554:	2300      	movs	r3, #0
 800c556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c558:	e1a5      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c55e:	e1a2      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c560:	58024400 	.word	0x58024400
 800c564:	03d09000 	.word	0x03d09000
 800c568:	003d0900 	.word	0x003d0900
 800c56c:	017d7840 	.word	0x017d7840
 800c570:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c574:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c578:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c57c:	430b      	orrs	r3, r1
 800c57e:	d173      	bne.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c580:	4b9c      	ldr	r3, [pc, #624]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c588:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c590:	d02f      	beq.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c598:	d863      	bhi.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d004      	beq.n	800c5aa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5a6:	d012      	beq.n	800c5ce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c5a8:	e05b      	b.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5aa:	4b92      	ldr	r3, [pc, #584]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5b6:	d107      	bne.n	800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5b8:	f107 0318 	add.w	r3, r7, #24
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f000 f991 	bl	800c8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5c6:	e16e      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5cc:	e16b      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5ce:	4b89      	ldr	r3, [pc, #548]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5da:	d107      	bne.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5dc:	f107 030c 	add.w	r3, r7, #12
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f000 fad3 	bl	800cb8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ea:	e15c      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f0:	e159      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5f2:	4b80      	ldr	r3, [pc, #512]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5fc:	4b7d      	ldr	r3, [pc, #500]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f003 0304 	and.w	r3, r3, #4
 800c604:	2b04      	cmp	r3, #4
 800c606:	d10c      	bne.n	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d109      	bne.n	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c60e:	4b79      	ldr	r3, [pc, #484]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	08db      	lsrs	r3, r3, #3
 800c614:	f003 0303 	and.w	r3, r3, #3
 800c618:	4a77      	ldr	r2, [pc, #476]	; (800c7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c61a:	fa22 f303 	lsr.w	r3, r2, r3
 800c61e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c620:	e01e      	b.n	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c622:	4b74      	ldr	r3, [pc, #464]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c62a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c62e:	d106      	bne.n	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c636:	d102      	bne.n	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c638:	4b70      	ldr	r3, [pc, #448]	; (800c7fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c63a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c63c:	e010      	b.n	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c63e:	4b6d      	ldr	r3, [pc, #436]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c646:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c64a:	d106      	bne.n	800c65a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c64e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c652:	d102      	bne.n	800c65a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c654:	4b6a      	ldr	r3, [pc, #424]	; (800c800 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c656:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c658:	e002      	b.n	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c65e:	e122      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c660:	e121      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c662:	2300      	movs	r3, #0
 800c664:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c666:	e11e      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c66c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c670:	430b      	orrs	r3, r1
 800c672:	d133      	bne.n	800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c674:	4b5f      	ldr	r3, [pc, #380]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c67c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c680:	2b00      	cmp	r3, #0
 800c682:	d004      	beq.n	800c68e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c68a:	d012      	beq.n	800c6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c68c:	e023      	b.n	800c6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c68e:	4b59      	ldr	r3, [pc, #356]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c69a:	d107      	bne.n	800c6ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c69c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f000 fbc7 	bl	800ce34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6aa:	e0fc      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b0:	e0f9      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6b2:	4b50      	ldr	r3, [pc, #320]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6be:	d107      	bne.n	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6c0:	f107 0318 	add.w	r3, r7, #24
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f000 f90d 	bl	800c8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c6ca:	6a3b      	ldr	r3, [r7, #32]
 800c6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ce:	e0ea      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6d4:	e0e7      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6da:	e0e4      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c6dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6e0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c6e4:	430b      	orrs	r3, r1
 800c6e6:	f040 808d 	bne.w	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c6ea:	4b42      	ldr	r3, [pc, #264]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6ee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c6f2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6fa:	d06b      	beq.n	800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c702:	d874      	bhi.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c70a:	d056      	beq.n	800c7ba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c712:	d86c      	bhi.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c716:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c71a:	d03b      	beq.n	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c722:	d864      	bhi.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c72a:	d021      	beq.n	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c732:	d85c      	bhi.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c736:	2b00      	cmp	r3, #0
 800c738:	d004      	beq.n	800c744 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c740:	d004      	beq.n	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c742:	e054      	b.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c744:	f000 f8b8 	bl	800c8b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c748:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c74a:	e0ac      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c74c:	4b29      	ldr	r3, [pc, #164]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c754:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c758:	d107      	bne.n	800c76a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c75a:	f107 0318 	add.w	r3, r7, #24
 800c75e:	4618      	mov	r0, r3
 800c760:	f000 f8c0 	bl	800c8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c768:	e09d      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c76e:	e09a      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c770:	4b20      	ldr	r3, [pc, #128]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c77c:	d107      	bne.n	800c78e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c77e:	f107 030c 	add.w	r3, r7, #12
 800c782:	4618      	mov	r0, r3
 800c784:	f000 fa02 	bl	800cb8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c78c:	e08b      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c78e:	2300      	movs	r3, #0
 800c790:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c792:	e088      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c794:	4b17      	ldr	r3, [pc, #92]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f003 0304 	and.w	r3, r3, #4
 800c79c:	2b04      	cmp	r3, #4
 800c79e:	d109      	bne.n	800c7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7a0:	4b14      	ldr	r3, [pc, #80]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	08db      	lsrs	r3, r3, #3
 800c7a6:	f003 0303 	and.w	r3, r3, #3
 800c7aa:	4a13      	ldr	r2, [pc, #76]	; (800c7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c7ac:	fa22 f303 	lsr.w	r3, r2, r3
 800c7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7b2:	e078      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7b8:	e075      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c7ba:	4b0e      	ldr	r3, [pc, #56]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7c6:	d102      	bne.n	800c7ce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c7c8:	4b0c      	ldr	r3, [pc, #48]	; (800c7fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7cc:	e06b      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7d2:	e068      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c7d4:	4b07      	ldr	r3, [pc, #28]	; (800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7e0:	d102      	bne.n	800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c7e2:	4b07      	ldr	r3, [pc, #28]	; (800c800 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7e6:	e05e      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ec:	e05b      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7f2:	e058      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c7f4:	58024400 	.word	0x58024400
 800c7f8:	03d09000 	.word	0x03d09000
 800c7fc:	003d0900 	.word	0x003d0900
 800c800:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c804:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c808:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c80c:	430b      	orrs	r3, r1
 800c80e:	d148      	bne.n	800c8a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c810:	4b27      	ldr	r3, [pc, #156]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c814:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c818:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c820:	d02a      	beq.n	800c878 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c828:	d838      	bhi.n	800c89c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d004      	beq.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c832:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c836:	d00d      	beq.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c838:	e030      	b.n	800c89c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c83a:	4b1d      	ldr	r3, [pc, #116]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c842:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c846:	d102      	bne.n	800c84e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c848:	4b1a      	ldr	r3, [pc, #104]	; (800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c84c:	e02b      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c84e:	2300      	movs	r3, #0
 800c850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c852:	e028      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c854:	4b16      	ldr	r3, [pc, #88]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c85c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c860:	d107      	bne.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c866:	4618      	mov	r0, r3
 800c868:	f000 fae4 	bl	800ce34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c870:	e019      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c872:	2300      	movs	r3, #0
 800c874:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c876:	e016      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c878:	4b0d      	ldr	r3, [pc, #52]	; (800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c880:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c884:	d107      	bne.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c886:	f107 0318 	add.w	r3, r7, #24
 800c88a:	4618      	mov	r0, r3
 800c88c:	f000 f82a 	bl	800c8e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c894:	e007      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c896:	2300      	movs	r3, #0
 800c898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c89a:	e004      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c89c:	2300      	movs	r3, #0
 800c89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8a0:	e001      	b.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3740      	adds	r7, #64	; 0x40
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	58024400 	.word	0x58024400
 800c8b4:	017d7840 	.word	0x017d7840

0800c8b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c8bc:	f7fd ffd4 	bl	800a868 <HAL_RCC_GetHCLKFreq>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	4b06      	ldr	r3, [pc, #24]	; (800c8dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c8c4:	6a1b      	ldr	r3, [r3, #32]
 800c8c6:	091b      	lsrs	r3, r3, #4
 800c8c8:	f003 0307 	and.w	r3, r3, #7
 800c8cc:	4904      	ldr	r1, [pc, #16]	; (800c8e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c8ce:	5ccb      	ldrb	r3, [r1, r3]
 800c8d0:	f003 031f 	and.w	r3, r3, #31
 800c8d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	58024400 	.word	0x58024400
 800c8e0:	08016e80 	.word	0x08016e80

0800c8e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b089      	sub	sp, #36	; 0x24
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8ec:	4ba1      	ldr	r3, [pc, #644]	; (800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f0:	f003 0303 	and.w	r3, r3, #3
 800c8f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c8f6:	4b9f      	ldr	r3, [pc, #636]	; (800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8fa:	0b1b      	lsrs	r3, r3, #12
 800c8fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c900:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c902:	4b9c      	ldr	r3, [pc, #624]	; (800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c906:	091b      	lsrs	r3, r3, #4
 800c908:	f003 0301 	and.w	r3, r3, #1
 800c90c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c90e:	4b99      	ldr	r3, [pc, #612]	; (800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c912:	08db      	lsrs	r3, r3, #3
 800c914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c918:	693a      	ldr	r2, [r7, #16]
 800c91a:	fb02 f303 	mul.w	r3, r2, r3
 800c91e:	ee07 3a90 	vmov	s15, r3
 800c922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c926:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	f000 8111 	beq.w	800cb54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	2b02      	cmp	r3, #2
 800c936:	f000 8083 	beq.w	800ca40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c93a:	69bb      	ldr	r3, [r7, #24]
 800c93c:	2b02      	cmp	r3, #2
 800c93e:	f200 80a1 	bhi.w	800ca84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d003      	beq.n	800c950 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d056      	beq.n	800c9fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c94e:	e099      	b.n	800ca84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c950:	4b88      	ldr	r3, [pc, #544]	; (800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f003 0320 	and.w	r3, r3, #32
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d02d      	beq.n	800c9b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c95c:	4b85      	ldr	r3, [pc, #532]	; (800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	08db      	lsrs	r3, r3, #3
 800c962:	f003 0303 	and.w	r3, r3, #3
 800c966:	4a84      	ldr	r2, [pc, #528]	; (800cb78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c968:	fa22 f303 	lsr.w	r3, r2, r3
 800c96c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	ee07 3a90 	vmov	s15, r3
 800c974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	ee07 3a90 	vmov	s15, r3
 800c97e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c986:	4b7b      	ldr	r3, [pc, #492]	; (800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c98a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c98e:	ee07 3a90 	vmov	s15, r3
 800c992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c996:	ed97 6a03 	vldr	s12, [r7, #12]
 800c99a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cb7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c99e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c9b6:	e087      	b.n	800cac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	ee07 3a90 	vmov	s15, r3
 800c9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cb80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c9c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ca:	4b6a      	ldr	r3, [pc, #424]	; (800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9d2:	ee07 3a90 	vmov	s15, r3
 800c9d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9da:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cb7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9fa:	e065      	b.n	800cac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	ee07 3a90 	vmov	s15, r3
 800ca02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cb84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca0e:	4b59      	ldr	r3, [pc, #356]	; (800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca16:	ee07 3a90 	vmov	s15, r3
 800ca1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca22:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cb7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca3e:	e043      	b.n	800cac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	ee07 3a90 	vmov	s15, r3
 800ca46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cb88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ca4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca52:	4b48      	ldr	r3, [pc, #288]	; (800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca5a:	ee07 3a90 	vmov	s15, r3
 800ca5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca66:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cb7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca82:	e021      	b.n	800cac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	ee07 3a90 	vmov	s15, r3
 800ca8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cb84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca96:	4b37      	ldr	r3, [pc, #220]	; (800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca9e:	ee07 3a90 	vmov	s15, r3
 800caa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800caaa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cb7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800caae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cabe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cac6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cac8:	4b2a      	ldr	r3, [pc, #168]	; (800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cacc:	0a5b      	lsrs	r3, r3, #9
 800cace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cad2:	ee07 3a90 	vmov	s15, r3
 800cad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cada:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cade:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cae2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800caee:	ee17 2a90 	vmov	r2, s15
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800caf6:	4b1f      	ldr	r3, [pc, #124]	; (800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cafa:	0c1b      	lsrs	r3, r3, #16
 800cafc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb00:	ee07 3a90 	vmov	s15, r3
 800cb04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb10:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb1c:	ee17 2a90 	vmov	r2, s15
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cb24:	4b13      	ldr	r3, [pc, #76]	; (800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb28:	0e1b      	lsrs	r3, r3, #24
 800cb2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb2e:	ee07 3a90 	vmov	s15, r3
 800cb32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb4a:	ee17 2a90 	vmov	r2, s15
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cb52:	e008      	b.n	800cb66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2200      	movs	r2, #0
 800cb64:	609a      	str	r2, [r3, #8]
}
 800cb66:	bf00      	nop
 800cb68:	3724      	adds	r7, #36	; 0x24
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	58024400 	.word	0x58024400
 800cb78:	03d09000 	.word	0x03d09000
 800cb7c:	46000000 	.word	0x46000000
 800cb80:	4c742400 	.word	0x4c742400
 800cb84:	4a742400 	.word	0x4a742400
 800cb88:	4bbebc20 	.word	0x4bbebc20

0800cb8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b089      	sub	sp, #36	; 0x24
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb94:	4ba1      	ldr	r3, [pc, #644]	; (800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb98:	f003 0303 	and.w	r3, r3, #3
 800cb9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cb9e:	4b9f      	ldr	r3, [pc, #636]	; (800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cba2:	0d1b      	lsrs	r3, r3, #20
 800cba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cba8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cbaa:	4b9c      	ldr	r3, [pc, #624]	; (800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbae:	0a1b      	lsrs	r3, r3, #8
 800cbb0:	f003 0301 	and.w	r3, r3, #1
 800cbb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cbb6:	4b99      	ldr	r3, [pc, #612]	; (800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbba:	08db      	lsrs	r3, r3, #3
 800cbbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cbc0:	693a      	ldr	r2, [r7, #16]
 800cbc2:	fb02 f303 	mul.w	r3, r2, r3
 800cbc6:	ee07 3a90 	vmov	s15, r3
 800cbca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	f000 8111 	beq.w	800cdfc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	2b02      	cmp	r3, #2
 800cbde:	f000 8083 	beq.w	800cce8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	2b02      	cmp	r3, #2
 800cbe6:	f200 80a1 	bhi.w	800cd2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d003      	beq.n	800cbf8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cbf0:	69bb      	ldr	r3, [r7, #24]
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d056      	beq.n	800cca4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cbf6:	e099      	b.n	800cd2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbf8:	4b88      	ldr	r3, [pc, #544]	; (800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f003 0320 	and.w	r3, r3, #32
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d02d      	beq.n	800cc60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc04:	4b85      	ldr	r3, [pc, #532]	; (800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	08db      	lsrs	r3, r3, #3
 800cc0a:	f003 0303 	and.w	r3, r3, #3
 800cc0e:	4a84      	ldr	r2, [pc, #528]	; (800ce20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cc10:	fa22 f303 	lsr.w	r3, r2, r3
 800cc14:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	ee07 3a90 	vmov	s15, r3
 800cc1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	ee07 3a90 	vmov	s15, r3
 800cc26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc2e:	4b7b      	ldr	r3, [pc, #492]	; (800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc36:	ee07 3a90 	vmov	s15, r3
 800cc3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc42:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ce24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cc5e:	e087      	b.n	800cd70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	ee07 3a90 	vmov	s15, r3
 800cc66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ce28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cc6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc72:	4b6a      	ldr	r3, [pc, #424]	; (800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc7a:	ee07 3a90 	vmov	s15, r3
 800cc7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc82:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc86:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ce24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cca2:	e065      	b.n	800cd70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	ee07 3a90 	vmov	s15, r3
 800ccaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ce2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ccb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccb6:	4b59      	ldr	r3, [pc, #356]	; (800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccbe:	ee07 3a90 	vmov	s15, r3
 800ccc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ce24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cce6:	e043      	b.n	800cd70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	ee07 3a90 	vmov	s15, r3
 800ccee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccf2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ce30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ccf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccfa:	4b48      	ldr	r3, [pc, #288]	; (800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd02:	ee07 3a90 	vmov	s15, r3
 800cd06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ce24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd2a:	e021      	b.n	800cd70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	ee07 3a90 	vmov	s15, r3
 800cd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ce2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd3e:	4b37      	ldr	r3, [pc, #220]	; (800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd46:	ee07 3a90 	vmov	s15, r3
 800cd4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd52:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ce24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cd70:	4b2a      	ldr	r3, [pc, #168]	; (800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd74:	0a5b      	lsrs	r3, r3, #9
 800cd76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd7a:	ee07 3a90 	vmov	s15, r3
 800cd7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd96:	ee17 2a90 	vmov	r2, s15
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cd9e:	4b1f      	ldr	r3, [pc, #124]	; (800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cda0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cda2:	0c1b      	lsrs	r3, r3, #16
 800cda4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cda8:	ee07 3a90 	vmov	s15, r3
 800cdac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdc4:	ee17 2a90 	vmov	r2, s15
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cdcc:	4b13      	ldr	r3, [pc, #76]	; (800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd0:	0e1b      	lsrs	r3, r3, #24
 800cdd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdd6:	ee07 3a90 	vmov	s15, r3
 800cdda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cde2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cde6:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdf2:	ee17 2a90 	vmov	r2, s15
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cdfa:	e008      	b.n	800ce0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	609a      	str	r2, [r3, #8]
}
 800ce0e:	bf00      	nop
 800ce10:	3724      	adds	r7, #36	; 0x24
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	58024400 	.word	0x58024400
 800ce20:	03d09000 	.word	0x03d09000
 800ce24:	46000000 	.word	0x46000000
 800ce28:	4c742400 	.word	0x4c742400
 800ce2c:	4a742400 	.word	0x4a742400
 800ce30:	4bbebc20 	.word	0x4bbebc20

0800ce34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b089      	sub	sp, #36	; 0x24
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce3c:	4ba0      	ldr	r3, [pc, #640]	; (800d0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce40:	f003 0303 	and.w	r3, r3, #3
 800ce44:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ce46:	4b9e      	ldr	r3, [pc, #632]	; (800d0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce4a:	091b      	lsrs	r3, r3, #4
 800ce4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce50:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ce52:	4b9b      	ldr	r3, [pc, #620]	; (800d0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce56:	f003 0301 	and.w	r3, r3, #1
 800ce5a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ce5c:	4b98      	ldr	r3, [pc, #608]	; (800d0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce60:	08db      	lsrs	r3, r3, #3
 800ce62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce66:	693a      	ldr	r2, [r7, #16]
 800ce68:	fb02 f303 	mul.w	r3, r2, r3
 800ce6c:	ee07 3a90 	vmov	s15, r3
 800ce70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce74:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	f000 8111 	beq.w	800d0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	2b02      	cmp	r3, #2
 800ce84:	f000 8083 	beq.w	800cf8e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ce88:	69bb      	ldr	r3, [r7, #24]
 800ce8a:	2b02      	cmp	r3, #2
 800ce8c:	f200 80a1 	bhi.w	800cfd2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ce90:	69bb      	ldr	r3, [r7, #24]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d003      	beq.n	800ce9e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ce96:	69bb      	ldr	r3, [r7, #24]
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d056      	beq.n	800cf4a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ce9c:	e099      	b.n	800cfd2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce9e:	4b88      	ldr	r3, [pc, #544]	; (800d0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f003 0320 	and.w	r3, r3, #32
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d02d      	beq.n	800cf06 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ceaa:	4b85      	ldr	r3, [pc, #532]	; (800d0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	08db      	lsrs	r3, r3, #3
 800ceb0:	f003 0303 	and.w	r3, r3, #3
 800ceb4:	4a83      	ldr	r2, [pc, #524]	; (800d0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ceb6:	fa22 f303 	lsr.w	r3, r2, r3
 800ceba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	ee07 3a90 	vmov	s15, r3
 800cec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	ee07 3a90 	vmov	s15, r3
 800cecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ced0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ced4:	4b7a      	ldr	r3, [pc, #488]	; (800d0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ced6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ced8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cedc:	ee07 3a90 	vmov	s15, r3
 800cee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cee4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cee8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d0c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ceec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cef4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cefc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf00:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cf04:	e087      	b.n	800d016 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	ee07 3a90 	vmov	s15, r3
 800cf0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf10:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d0cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cf14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf18:	4b69      	ldr	r3, [pc, #420]	; (800d0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf20:	ee07 3a90 	vmov	s15, r3
 800cf24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf28:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf2c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d0c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf48:	e065      	b.n	800d016 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	ee07 3a90 	vmov	s15, r3
 800cf50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf54:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d0d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cf58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf5c:	4b58      	ldr	r3, [pc, #352]	; (800d0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf64:	ee07 3a90 	vmov	s15, r3
 800cf68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf70:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d0c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf8c:	e043      	b.n	800d016 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	ee07 3a90 	vmov	s15, r3
 800cf94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf98:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d0d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cf9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfa0:	4b47      	ldr	r3, [pc, #284]	; (800d0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfa8:	ee07 3a90 	vmov	s15, r3
 800cfac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfb4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d0c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfd0:	e021      	b.n	800d016 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	ee07 3a90 	vmov	s15, r3
 800cfd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfdc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d0cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cfe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfe4:	4b36      	ldr	r3, [pc, #216]	; (800d0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfec:	ee07 3a90 	vmov	s15, r3
 800cff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cff4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cff8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d0c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d00c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d010:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d014:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d016:	4b2a      	ldr	r3, [pc, #168]	; (800d0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d01a:	0a5b      	lsrs	r3, r3, #9
 800d01c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d020:	ee07 3a90 	vmov	s15, r3
 800d024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d02c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d030:	edd7 6a07 	vldr	s13, [r7, #28]
 800d034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d03c:	ee17 2a90 	vmov	r2, s15
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d044:	4b1e      	ldr	r3, [pc, #120]	; (800d0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d048:	0c1b      	lsrs	r3, r3, #16
 800d04a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d04e:	ee07 3a90 	vmov	s15, r3
 800d052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d05a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d05e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d066:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d06a:	ee17 2a90 	vmov	r2, s15
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d072:	4b13      	ldr	r3, [pc, #76]	; (800d0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d076:	0e1b      	lsrs	r3, r3, #24
 800d078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d07c:	ee07 3a90 	vmov	s15, r3
 800d080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d084:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d088:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d08c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d098:	ee17 2a90 	vmov	r2, s15
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d0a0:	e008      	b.n	800d0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	609a      	str	r2, [r3, #8]
}
 800d0b4:	bf00      	nop
 800d0b6:	3724      	adds	r7, #36	; 0x24
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr
 800d0c0:	58024400 	.word	0x58024400
 800d0c4:	03d09000 	.word	0x03d09000
 800d0c8:	46000000 	.word	0x46000000
 800d0cc:	4c742400 	.word	0x4c742400
 800d0d0:	4a742400 	.word	0x4a742400
 800d0d4:	4bbebc20 	.word	0x4bbebc20

0800d0d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d0e6:	4b53      	ldr	r3, [pc, #332]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0ea:	f003 0303 	and.w	r3, r3, #3
 800d0ee:	2b03      	cmp	r3, #3
 800d0f0:	d101      	bne.n	800d0f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e099      	b.n	800d22a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d0f6:	4b4f      	ldr	r3, [pc, #316]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	4a4e      	ldr	r2, [pc, #312]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d0fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d102:	f7f6 fc9b 	bl	8003a3c <HAL_GetTick>
 800d106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d108:	e008      	b.n	800d11c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d10a:	f7f6 fc97 	bl	8003a3c <HAL_GetTick>
 800d10e:	4602      	mov	r2, r0
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	1ad3      	subs	r3, r2, r3
 800d114:	2b02      	cmp	r3, #2
 800d116:	d901      	bls.n	800d11c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d118:	2303      	movs	r3, #3
 800d11a:	e086      	b.n	800d22a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d11c:	4b45      	ldr	r3, [pc, #276]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d124:	2b00      	cmp	r3, #0
 800d126:	d1f0      	bne.n	800d10a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d128:	4b42      	ldr	r3, [pc, #264]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d12c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	031b      	lsls	r3, r3, #12
 800d136:	493f      	ldr	r1, [pc, #252]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d138:	4313      	orrs	r3, r2
 800d13a:	628b      	str	r3, [r1, #40]	; 0x28
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	3b01      	subs	r3, #1
 800d142:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	3b01      	subs	r3, #1
 800d14c:	025b      	lsls	r3, r3, #9
 800d14e:	b29b      	uxth	r3, r3
 800d150:	431a      	orrs	r2, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	68db      	ldr	r3, [r3, #12]
 800d156:	3b01      	subs	r3, #1
 800d158:	041b      	lsls	r3, r3, #16
 800d15a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d15e:	431a      	orrs	r2, r3
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	691b      	ldr	r3, [r3, #16]
 800d164:	3b01      	subs	r3, #1
 800d166:	061b      	lsls	r3, r3, #24
 800d168:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d16c:	4931      	ldr	r1, [pc, #196]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d16e:	4313      	orrs	r3, r2
 800d170:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d172:	4b30      	ldr	r3, [pc, #192]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d176:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	695b      	ldr	r3, [r3, #20]
 800d17e:	492d      	ldr	r1, [pc, #180]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d180:	4313      	orrs	r3, r2
 800d182:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d184:	4b2b      	ldr	r3, [pc, #172]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d188:	f023 0220 	bic.w	r2, r3, #32
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	699b      	ldr	r3, [r3, #24]
 800d190:	4928      	ldr	r1, [pc, #160]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d192:	4313      	orrs	r3, r2
 800d194:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d196:	4b27      	ldr	r3, [pc, #156]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d19a:	4a26      	ldr	r2, [pc, #152]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d19c:	f023 0310 	bic.w	r3, r3, #16
 800d1a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d1a2:	4b24      	ldr	r3, [pc, #144]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d1a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1a6:	4b24      	ldr	r3, [pc, #144]	; (800d238 <RCCEx_PLL2_Config+0x160>)
 800d1a8:	4013      	ands	r3, r2
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	69d2      	ldr	r2, [r2, #28]
 800d1ae:	00d2      	lsls	r2, r2, #3
 800d1b0:	4920      	ldr	r1, [pc, #128]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d1b6:	4b1f      	ldr	r3, [pc, #124]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ba:	4a1e      	ldr	r2, [pc, #120]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d1bc:	f043 0310 	orr.w	r3, r3, #16
 800d1c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d106      	bne.n	800d1d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d1c8:	4b1a      	ldr	r3, [pc, #104]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1cc:	4a19      	ldr	r2, [pc, #100]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d1ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d1d4:	e00f      	b.n	800d1f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d106      	bne.n	800d1ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d1dc:	4b15      	ldr	r3, [pc, #84]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e0:	4a14      	ldr	r2, [pc, #80]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d1e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d1e8:	e005      	b.n	800d1f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d1ea:	4b12      	ldr	r3, [pc, #72]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ee:	4a11      	ldr	r2, [pc, #68]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d1f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d1f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d1f6:	4b0f      	ldr	r3, [pc, #60]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4a0e      	ldr	r2, [pc, #56]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d1fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d202:	f7f6 fc1b 	bl	8003a3c <HAL_GetTick>
 800d206:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d208:	e008      	b.n	800d21c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d20a:	f7f6 fc17 	bl	8003a3c <HAL_GetTick>
 800d20e:	4602      	mov	r2, r0
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	1ad3      	subs	r3, r2, r3
 800d214:	2b02      	cmp	r3, #2
 800d216:	d901      	bls.n	800d21c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d218:	2303      	movs	r3, #3
 800d21a:	e006      	b.n	800d22a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d21c:	4b05      	ldr	r3, [pc, #20]	; (800d234 <RCCEx_PLL2_Config+0x15c>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d224:	2b00      	cmp	r3, #0
 800d226:	d0f0      	beq.n	800d20a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d228:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
 800d232:	bf00      	nop
 800d234:	58024400 	.word	0x58024400
 800d238:	ffff0007 	.word	0xffff0007

0800d23c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d246:	2300      	movs	r3, #0
 800d248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d24a:	4b53      	ldr	r3, [pc, #332]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d24e:	f003 0303 	and.w	r3, r3, #3
 800d252:	2b03      	cmp	r3, #3
 800d254:	d101      	bne.n	800d25a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d256:	2301      	movs	r3, #1
 800d258:	e099      	b.n	800d38e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d25a:	4b4f      	ldr	r3, [pc, #316]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4a4e      	ldr	r2, [pc, #312]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d266:	f7f6 fbe9 	bl	8003a3c <HAL_GetTick>
 800d26a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d26c:	e008      	b.n	800d280 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d26e:	f7f6 fbe5 	bl	8003a3c <HAL_GetTick>
 800d272:	4602      	mov	r2, r0
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	1ad3      	subs	r3, r2, r3
 800d278:	2b02      	cmp	r3, #2
 800d27a:	d901      	bls.n	800d280 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d27c:	2303      	movs	r3, #3
 800d27e:	e086      	b.n	800d38e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d280:	4b45      	ldr	r3, [pc, #276]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1f0      	bne.n	800d26e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d28c:	4b42      	ldr	r3, [pc, #264]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d290:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	051b      	lsls	r3, r3, #20
 800d29a:	493f      	ldr	r1, [pc, #252]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d29c:	4313      	orrs	r3, r2
 800d29e:	628b      	str	r3, [r1, #40]	; 0x28
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	3b01      	subs	r3, #1
 800d2b0:	025b      	lsls	r3, r3, #9
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	431a      	orrs	r2, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	041b      	lsls	r3, r3, #16
 800d2be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d2c2:	431a      	orrs	r2, r3
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	691b      	ldr	r3, [r3, #16]
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	061b      	lsls	r3, r3, #24
 800d2cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d2d0:	4931      	ldr	r1, [pc, #196]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d2d6:	4b30      	ldr	r3, [pc, #192]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	695b      	ldr	r3, [r3, #20]
 800d2e2:	492d      	ldr	r1, [pc, #180]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d2e8:	4b2b      	ldr	r3, [pc, #172]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	699b      	ldr	r3, [r3, #24]
 800d2f4:	4928      	ldr	r1, [pc, #160]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d2fa:	4b27      	ldr	r3, [pc, #156]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fe:	4a26      	ldr	r2, [pc, #152]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d304:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d306:	4b24      	ldr	r3, [pc, #144]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d30a:	4b24      	ldr	r3, [pc, #144]	; (800d39c <RCCEx_PLL3_Config+0x160>)
 800d30c:	4013      	ands	r3, r2
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	69d2      	ldr	r2, [r2, #28]
 800d312:	00d2      	lsls	r2, r2, #3
 800d314:	4920      	ldr	r1, [pc, #128]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d316:	4313      	orrs	r3, r2
 800d318:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d31a:	4b1f      	ldr	r3, [pc, #124]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d31e:	4a1e      	ldr	r2, [pc, #120]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d324:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d106      	bne.n	800d33a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d32c:	4b1a      	ldr	r3, [pc, #104]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d330:	4a19      	ldr	r2, [pc, #100]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d332:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d336:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d338:	e00f      	b.n	800d35a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	d106      	bne.n	800d34e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d340:	4b15      	ldr	r3, [pc, #84]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d344:	4a14      	ldr	r2, [pc, #80]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d346:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d34a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d34c:	e005      	b.n	800d35a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d34e:	4b12      	ldr	r3, [pc, #72]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d352:	4a11      	ldr	r2, [pc, #68]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d354:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d358:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d35a:	4b0f      	ldr	r3, [pc, #60]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	4a0e      	ldr	r2, [pc, #56]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d366:	f7f6 fb69 	bl	8003a3c <HAL_GetTick>
 800d36a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d36c:	e008      	b.n	800d380 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d36e:	f7f6 fb65 	bl	8003a3c <HAL_GetTick>
 800d372:	4602      	mov	r2, r0
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	1ad3      	subs	r3, r2, r3
 800d378:	2b02      	cmp	r3, #2
 800d37a:	d901      	bls.n	800d380 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d37c:	2303      	movs	r3, #3
 800d37e:	e006      	b.n	800d38e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d380:	4b05      	ldr	r3, [pc, #20]	; (800d398 <RCCEx_PLL3_Config+0x15c>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d0f0      	beq.n	800d36e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3710      	adds	r7, #16
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}
 800d396:	bf00      	nop
 800d398:	58024400 	.word	0x58024400
 800d39c:	ffff0007 	.word	0xffff0007

0800d3a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d071      	beq.n	800d496 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d106      	bne.n	800d3cc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f7f5 fdfa 	bl	8002fc0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2202      	movs	r2, #2
 800d3d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	f003 0310 	and.w	r3, r3, #16
 800d3de:	2b10      	cmp	r3, #16
 800d3e0:	d050      	beq.n	800d484 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	22ca      	movs	r2, #202	; 0xca
 800d3e8:	625a      	str	r2, [r3, #36]	; 0x24
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	2253      	movs	r2, #83	; 0x53
 800d3f0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 fa4a 	bl	800d88c <RTC_EnterInitMode>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d3fc:	7bfb      	ldrb	r3, [r7, #15]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d124      	bne.n	800d44c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	6899      	ldr	r1, [r3, #8]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681a      	ldr	r2, [r3, #0]
 800d40c:	4b24      	ldr	r3, [pc, #144]	; (800d4a0 <HAL_RTC_Init+0x100>)
 800d40e:	400b      	ands	r3, r1
 800d410:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	6899      	ldr	r1, [r3, #8]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	685a      	ldr	r2, [r3, #4]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	691b      	ldr	r3, [r3, #16]
 800d420:	431a      	orrs	r2, r3
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	699b      	ldr	r3, [r3, #24]
 800d426:	431a      	orrs	r2, r3
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	430a      	orrs	r2, r1
 800d42e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	689b      	ldr	r3, [r3, #8]
 800d434:	0419      	lsls	r1, r3, #16
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	68da      	ldr	r2, [r3, #12]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	430a      	orrs	r2, r1
 800d440:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f000 fa56 	bl	800d8f4 <RTC_ExitInitMode>
 800d448:	4603      	mov	r3, r0
 800d44a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d44c:	7bfb      	ldrb	r3, [r7, #15]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d113      	bne.n	800d47a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f022 0203 	bic.w	r2, r2, #3
 800d460:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	69da      	ldr	r2, [r3, #28]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	695b      	ldr	r3, [r3, #20]
 800d470:	431a      	orrs	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	430a      	orrs	r2, r1
 800d478:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	22ff      	movs	r2, #255	; 0xff
 800d480:	625a      	str	r2, [r3, #36]	; 0x24
 800d482:	e001      	b.n	800d488 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d484:	2300      	movs	r3, #0
 800d486:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d488:	7bfb      	ldrb	r3, [r7, #15]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d103      	bne.n	800d496 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2201      	movs	r2, #1
 800d492:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d496:	7bfb      	ldrb	r3, [r7, #15]
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	ff8fffbf 	.word	0xff8fffbf

0800d4a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d4a4:	b590      	push	{r4, r7, lr}
 800d4a6:	b087      	sub	sp, #28
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d101      	bne.n	800d4be <HAL_RTC_SetTime+0x1a>
 800d4ba:	2302      	movs	r3, #2
 800d4bc:	e089      	b.n	800d5d2 <HAL_RTC_SetTime+0x12e>
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2202      	movs	r2, #2
 800d4ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	22ca      	movs	r2, #202	; 0xca
 800d4d4:	625a      	str	r2, [r3, #36]	; 0x24
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	2253      	movs	r2, #83	; 0x53
 800d4dc:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f000 f9d4 	bl	800d88c <RTC_EnterInitMode>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d4e8:	7cfb      	ldrb	r3, [r7, #19]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d161      	bne.n	800d5b2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d126      	bne.n	800d542 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	689b      	ldr	r3, [r3, #8]
 800d4fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d102      	bne.n	800d508 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	2200      	movs	r2, #0
 800d506:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	4618      	mov	r0, r3
 800d50e:	f000 fa2f 	bl	800d970 <RTC_ByteToBcd2>
 800d512:	4603      	mov	r3, r0
 800d514:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	785b      	ldrb	r3, [r3, #1]
 800d51a:	4618      	mov	r0, r3
 800d51c:	f000 fa28 	bl	800d970 <RTC_ByteToBcd2>
 800d520:	4603      	mov	r3, r0
 800d522:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d524:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	789b      	ldrb	r3, [r3, #2]
 800d52a:	4618      	mov	r0, r3
 800d52c:	f000 fa20 	bl	800d970 <RTC_ByteToBcd2>
 800d530:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d532:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	78db      	ldrb	r3, [r3, #3]
 800d53a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d53c:	4313      	orrs	r3, r2
 800d53e:	617b      	str	r3, [r7, #20]
 800d540:	e018      	b.n	800d574 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	689b      	ldr	r3, [r3, #8]
 800d548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d102      	bne.n	800d556 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	2200      	movs	r2, #0
 800d554:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	785b      	ldrb	r3, [r3, #1]
 800d560:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d562:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d564:	68ba      	ldr	r2, [r7, #8]
 800d566:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d568:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	78db      	ldrb	r3, [r3, #3]
 800d56e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d570:	4313      	orrs	r3, r2
 800d572:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681a      	ldr	r2, [r3, #0]
 800d578:	6979      	ldr	r1, [r7, #20]
 800d57a:	4b18      	ldr	r3, [pc, #96]	; (800d5dc <HAL_RTC_SetTime+0x138>)
 800d57c:	400b      	ands	r3, r1
 800d57e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	689a      	ldr	r2, [r3, #8]
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d58e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6899      	ldr	r1, [r3, #8]
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	68da      	ldr	r2, [r3, #12]
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	691b      	ldr	r3, [r3, #16]
 800d59e:	431a      	orrs	r2, r3
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	430a      	orrs	r2, r1
 800d5a6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d5a8:	68f8      	ldr	r0, [r7, #12]
 800d5aa:	f000 f9a3 	bl	800d8f4 <RTC_ExitInitMode>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	22ff      	movs	r2, #255	; 0xff
 800d5b8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d5ba:	7cfb      	ldrb	r3, [r7, #19]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d103      	bne.n	800d5c8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d5d0:	7cfb      	ldrb	r3, [r7, #19]
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	371c      	adds	r7, #28
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd90      	pop	{r4, r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	007f7f7f 	.word	0x007f7f7f

0800d5e0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b086      	sub	sp, #24
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	691b      	ldr	r3, [r3, #16]
 800d5fc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	4b22      	ldr	r3, [pc, #136]	; (800d694 <HAL_RTC_GetTime+0xb4>)
 800d60c:	4013      	ands	r3, r2
 800d60e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	0c1b      	lsrs	r3, r3, #16
 800d614:	b2db      	uxtb	r3, r3
 800d616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d61a:	b2da      	uxtb	r2, r3
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	0a1b      	lsrs	r3, r3, #8
 800d624:	b2db      	uxtb	r3, r3
 800d626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d62a:	b2da      	uxtb	r2, r3
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	b2db      	uxtb	r3, r3
 800d634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d638:	b2da      	uxtb	r2, r3
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	0d9b      	lsrs	r3, r3, #22
 800d642:	b2db      	uxtb	r3, r3
 800d644:	f003 0301 	and.w	r3, r3, #1
 800d648:	b2da      	uxtb	r2, r3
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d11a      	bne.n	800d68a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	4618      	mov	r0, r3
 800d65a:	f000 f9a9 	bl	800d9b0 <RTC_Bcd2ToByte>
 800d65e:	4603      	mov	r3, r0
 800d660:	461a      	mov	r2, r3
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	785b      	ldrb	r3, [r3, #1]
 800d66a:	4618      	mov	r0, r3
 800d66c:	f000 f9a0 	bl	800d9b0 <RTC_Bcd2ToByte>
 800d670:	4603      	mov	r3, r0
 800d672:	461a      	mov	r2, r3
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	789b      	ldrb	r3, [r3, #2]
 800d67c:	4618      	mov	r0, r3
 800d67e:	f000 f997 	bl	800d9b0 <RTC_Bcd2ToByte>
 800d682:	4603      	mov	r3, r0
 800d684:	461a      	mov	r2, r3
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d68a:	2300      	movs	r3, #0
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3718      	adds	r7, #24
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	007f7f7f 	.word	0x007f7f7f

0800d698 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d698:	b590      	push	{r4, r7, lr}
 800d69a:	b087      	sub	sp, #28
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	d101      	bne.n	800d6b2 <HAL_RTC_SetDate+0x1a>
 800d6ae:	2302      	movs	r3, #2
 800d6b0:	e073      	b.n	800d79a <HAL_RTC_SetDate+0x102>
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2201      	movs	r2, #1
 800d6b6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2202      	movs	r2, #2
 800d6be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d10e      	bne.n	800d6e6 <HAL_RTC_SetDate+0x4e>
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	785b      	ldrb	r3, [r3, #1]
 800d6cc:	f003 0310 	and.w	r3, r3, #16
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d008      	beq.n	800d6e6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	785b      	ldrb	r3, [r3, #1]
 800d6d8:	f023 0310 	bic.w	r3, r3, #16
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	330a      	adds	r3, #10
 800d6e0:	b2da      	uxtb	r2, r3
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d11c      	bne.n	800d726 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	78db      	ldrb	r3, [r3, #3]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f000 f93d 	bl	800d970 <RTC_ByteToBcd2>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	785b      	ldrb	r3, [r3, #1]
 800d6fe:	4618      	mov	r0, r3
 800d700:	f000 f936 	bl	800d970 <RTC_ByteToBcd2>
 800d704:	4603      	mov	r3, r0
 800d706:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d708:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	789b      	ldrb	r3, [r3, #2]
 800d70e:	4618      	mov	r0, r3
 800d710:	f000 f92e 	bl	800d970 <RTC_ByteToBcd2>
 800d714:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d716:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d720:	4313      	orrs	r3, r2
 800d722:	617b      	str	r3, [r7, #20]
 800d724:	e00e      	b.n	800d744 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	78db      	ldrb	r3, [r3, #3]
 800d72a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	785b      	ldrb	r3, [r3, #1]
 800d730:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d732:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d734:	68ba      	ldr	r2, [r7, #8]
 800d736:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d738:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d740:	4313      	orrs	r3, r2
 800d742:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	22ca      	movs	r2, #202	; 0xca
 800d74a:	625a      	str	r2, [r3, #36]	; 0x24
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	2253      	movs	r2, #83	; 0x53
 800d752:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d754:	68f8      	ldr	r0, [r7, #12]
 800d756:	f000 f899 	bl	800d88c <RTC_EnterInitMode>
 800d75a:	4603      	mov	r3, r0
 800d75c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d75e:	7cfb      	ldrb	r3, [r7, #19]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d10a      	bne.n	800d77a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681a      	ldr	r2, [r3, #0]
 800d768:	6979      	ldr	r1, [r7, #20]
 800d76a:	4b0e      	ldr	r3, [pc, #56]	; (800d7a4 <HAL_RTC_SetDate+0x10c>)
 800d76c:	400b      	ands	r3, r1
 800d76e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d770:	68f8      	ldr	r0, [r7, #12]
 800d772:	f000 f8bf 	bl	800d8f4 <RTC_ExitInitMode>
 800d776:	4603      	mov	r3, r0
 800d778:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	22ff      	movs	r2, #255	; 0xff
 800d780:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d782:	7cfb      	ldrb	r3, [r7, #19]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d103      	bne.n	800d790 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2201      	movs	r2, #1
 800d78c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2200      	movs	r2, #0
 800d794:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d798:	7cfb      	ldrb	r3, [r7, #19]


}
 800d79a:	4618      	mov	r0, r3
 800d79c:	371c      	adds	r7, #28
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd90      	pop	{r4, r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	00ffff3f 	.word	0x00ffff3f

0800d7a8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b086      	sub	sp, #24
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	60f8      	str	r0, [r7, #12]
 800d7b0:	60b9      	str	r1, [r7, #8]
 800d7b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	685a      	ldr	r2, [r3, #4]
 800d7ba:	4b21      	ldr	r3, [pc, #132]	; (800d840 <HAL_RTC_GetDate+0x98>)
 800d7bc:	4013      	ands	r3, r2
 800d7be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	0c1b      	lsrs	r3, r3, #16
 800d7c4:	b2da      	uxtb	r2, r3
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	0a1b      	lsrs	r3, r3, #8
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	f003 031f 	and.w	r3, r3, #31
 800d7d4:	b2da      	uxtb	r2, r3
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7e2:	b2da      	uxtb	r2, r3
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	0b5b      	lsrs	r3, r3, #13
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	f003 0307 	and.w	r3, r3, #7
 800d7f2:	b2da      	uxtb	r2, r3
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d11a      	bne.n	800d834 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	78db      	ldrb	r3, [r3, #3]
 800d802:	4618      	mov	r0, r3
 800d804:	f000 f8d4 	bl	800d9b0 <RTC_Bcd2ToByte>
 800d808:	4603      	mov	r3, r0
 800d80a:	461a      	mov	r2, r3
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	785b      	ldrb	r3, [r3, #1]
 800d814:	4618      	mov	r0, r3
 800d816:	f000 f8cb 	bl	800d9b0 <RTC_Bcd2ToByte>
 800d81a:	4603      	mov	r3, r0
 800d81c:	461a      	mov	r2, r3
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	789b      	ldrb	r3, [r3, #2]
 800d826:	4618      	mov	r0, r3
 800d828:	f000 f8c2 	bl	800d9b0 <RTC_Bcd2ToByte>
 800d82c:	4603      	mov	r3, r0
 800d82e:	461a      	mov	r2, r3
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d834:	2300      	movs	r3, #0
}
 800d836:	4618      	mov	r0, r3
 800d838:	3718      	adds	r7, #24
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	00ffff3f 	.word	0x00ffff3f

0800d844 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a0d      	ldr	r2, [pc, #52]	; (800d888 <HAL_RTC_WaitForSynchro+0x44>)
 800d852:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d854:	f7f6 f8f2 	bl	8003a3c <HAL_GetTick>
 800d858:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d85a:	e009      	b.n	800d870 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d85c:	f7f6 f8ee 	bl	8003a3c <HAL_GetTick>
 800d860:	4602      	mov	r2, r0
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	1ad3      	subs	r3, r2, r3
 800d866:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d86a:	d901      	bls.n	800d870 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d86c:	2303      	movs	r3, #3
 800d86e:	e007      	b.n	800d880 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	f003 0320 	and.w	r3, r3, #32
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d0ee      	beq.n	800d85c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d87e:	2300      	movs	r3, #0
}
 800d880:	4618      	mov	r0, r3
 800d882:	3710      	adds	r7, #16
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}
 800d888:	0003ff5f 	.word	0x0003ff5f

0800d88c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d894:	2300      	movs	r3, #0
 800d896:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	68db      	ldr	r3, [r3, #12]
 800d89e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d120      	bne.n	800d8e8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8ae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d8b0:	f7f6 f8c4 	bl	8003a3c <HAL_GetTick>
 800d8b4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d8b6:	e00d      	b.n	800d8d4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d8b8:	f7f6 f8c0 	bl	8003a3c <HAL_GetTick>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	1ad3      	subs	r3, r2, r3
 800d8c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d8c6:	d905      	bls.n	800d8d4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d8c8:	2303      	movs	r3, #3
 800d8ca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2203      	movs	r2, #3
 800d8d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	68db      	ldr	r3, [r3, #12]
 800d8da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d102      	bne.n	800d8e8 <RTC_EnterInitMode+0x5c>
 800d8e2:	7bfb      	ldrb	r3, [r7, #15]
 800d8e4:	2b03      	cmp	r3, #3
 800d8e6:	d1e7      	bne.n	800d8b8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800d8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3710      	adds	r7, #16
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
	...

0800d8f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d900:	4b1a      	ldr	r3, [pc, #104]	; (800d96c <RTC_ExitInitMode+0x78>)
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	4a19      	ldr	r2, [pc, #100]	; (800d96c <RTC_ExitInitMode+0x78>)
 800d906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d90a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d90c:	4b17      	ldr	r3, [pc, #92]	; (800d96c <RTC_ExitInitMode+0x78>)
 800d90e:	689b      	ldr	r3, [r3, #8]
 800d910:	f003 0320 	and.w	r3, r3, #32
 800d914:	2b00      	cmp	r3, #0
 800d916:	d10c      	bne.n	800d932 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7ff ff93 	bl	800d844 <HAL_RTC_WaitForSynchro>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d01e      	beq.n	800d962 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2203      	movs	r2, #3
 800d928:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d92c:	2303      	movs	r3, #3
 800d92e:	73fb      	strb	r3, [r7, #15]
 800d930:	e017      	b.n	800d962 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d932:	4b0e      	ldr	r3, [pc, #56]	; (800d96c <RTC_ExitInitMode+0x78>)
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	4a0d      	ldr	r2, [pc, #52]	; (800d96c <RTC_ExitInitMode+0x78>)
 800d938:	f023 0320 	bic.w	r3, r3, #32
 800d93c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f7ff ff80 	bl	800d844 <HAL_RTC_WaitForSynchro>
 800d944:	4603      	mov	r3, r0
 800d946:	2b00      	cmp	r3, #0
 800d948:	d005      	beq.n	800d956 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2203      	movs	r2, #3
 800d94e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d952:	2303      	movs	r3, #3
 800d954:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d956:	4b05      	ldr	r3, [pc, #20]	; (800d96c <RTC_ExitInitMode+0x78>)
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	4a04      	ldr	r2, [pc, #16]	; (800d96c <RTC_ExitInitMode+0x78>)
 800d95c:	f043 0320 	orr.w	r3, r3, #32
 800d960:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d962:	7bfb      	ldrb	r3, [r7, #15]
}
 800d964:	4618      	mov	r0, r3
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	58004000 	.word	0x58004000

0800d970 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d970:	b480      	push	{r7}
 800d972:	b085      	sub	sp, #20
 800d974:	af00      	add	r7, sp, #0
 800d976:	4603      	mov	r3, r0
 800d978:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d97a:	2300      	movs	r3, #0
 800d97c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800d97e:	79fb      	ldrb	r3, [r7, #7]
 800d980:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800d982:	e005      	b.n	800d990 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	3301      	adds	r3, #1
 800d988:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800d98a:	7afb      	ldrb	r3, [r7, #11]
 800d98c:	3b0a      	subs	r3, #10
 800d98e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800d990:	7afb      	ldrb	r3, [r7, #11]
 800d992:	2b09      	cmp	r3, #9
 800d994:	d8f6      	bhi.n	800d984 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	b2db      	uxtb	r3, r3
 800d99a:	011b      	lsls	r3, r3, #4
 800d99c:	b2da      	uxtb	r2, r3
 800d99e:	7afb      	ldrb	r3, [r7, #11]
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	b2db      	uxtb	r3, r3
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3714      	adds	r7, #20
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b085      	sub	sp, #20
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800d9ba:	79fb      	ldrb	r3, [r7, #7]
 800d9bc:	091b      	lsrs	r3, r3, #4
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	0092      	lsls	r2, r2, #2
 800d9c4:	4413      	add	r3, r2
 800d9c6:	005b      	lsls	r3, r3, #1
 800d9c8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800d9ca:	79fb      	ldrb	r3, [r7, #7]
 800d9cc:	f003 030f 	and.w	r3, r3, #15
 800d9d0:	b2da      	uxtb	r2, r3
 800d9d2:	7bfb      	ldrb	r3, [r7, #15]
 800d9d4:	4413      	add	r3, r2
 800d9d6:	b2db      	uxtb	r3, r3
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3714      	adds	r7, #20
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr

0800d9e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d101      	bne.n	800d9f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e10f      	b.n	800dc16 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a87      	ldr	r2, [pc, #540]	; (800dc20 <HAL_SPI_Init+0x23c>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d00f      	beq.n	800da26 <HAL_SPI_Init+0x42>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4a86      	ldr	r2, [pc, #536]	; (800dc24 <HAL_SPI_Init+0x240>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d00a      	beq.n	800da26 <HAL_SPI_Init+0x42>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a84      	ldr	r2, [pc, #528]	; (800dc28 <HAL_SPI_Init+0x244>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d005      	beq.n	800da26 <HAL_SPI_Init+0x42>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	2b0f      	cmp	r3, #15
 800da20:	d901      	bls.n	800da26 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800da22:	2301      	movs	r3, #1
 800da24:	e0f7      	b.n	800dc16 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	f000 fc12 	bl	800e250 <SPI_GetPacketSize>
 800da2c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a7b      	ldr	r2, [pc, #492]	; (800dc20 <HAL_SPI_Init+0x23c>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d00c      	beq.n	800da52 <HAL_SPI_Init+0x6e>
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4a79      	ldr	r2, [pc, #484]	; (800dc24 <HAL_SPI_Init+0x240>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d007      	beq.n	800da52 <HAL_SPI_Init+0x6e>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a78      	ldr	r2, [pc, #480]	; (800dc28 <HAL_SPI_Init+0x244>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d002      	beq.n	800da52 <HAL_SPI_Init+0x6e>
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2b08      	cmp	r3, #8
 800da50:	d811      	bhi.n	800da76 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800da56:	4a72      	ldr	r2, [pc, #456]	; (800dc20 <HAL_SPI_Init+0x23c>)
 800da58:	4293      	cmp	r3, r2
 800da5a:	d009      	beq.n	800da70 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a70      	ldr	r2, [pc, #448]	; (800dc24 <HAL_SPI_Init+0x240>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d004      	beq.n	800da70 <HAL_SPI_Init+0x8c>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4a6f      	ldr	r2, [pc, #444]	; (800dc28 <HAL_SPI_Init+0x244>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d104      	bne.n	800da7a <HAL_SPI_Init+0x96>
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2b10      	cmp	r3, #16
 800da74:	d901      	bls.n	800da7a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800da76:	2301      	movs	r3, #1
 800da78:	e0cd      	b.n	800dc16 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800da80:	b2db      	uxtb	r3, r3
 800da82:	2b00      	cmp	r3, #0
 800da84:	d106      	bne.n	800da94 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f7f5 faca 	bl	8003028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2202      	movs	r2, #2
 800da98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f022 0201 	bic.w	r2, r2, #1
 800daaa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	689b      	ldr	r3, [r3, #8]
 800dab2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800dab6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	699b      	ldr	r3, [r3, #24]
 800dabc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dac0:	d119      	bne.n	800daf6 <HAL_SPI_Init+0x112>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800daca:	d103      	bne.n	800dad4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d008      	beq.n	800dae6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d10c      	bne.n	800daf6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dae0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dae4:	d107      	bne.n	800daf6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800daf4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d00f      	beq.n	800db22 <HAL_SPI_Init+0x13e>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	2b06      	cmp	r3, #6
 800db08:	d90b      	bls.n	800db22 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	430a      	orrs	r2, r1
 800db1e:	601a      	str	r2, [r3, #0]
 800db20:	e007      	b.n	800db32 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800db30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	69da      	ldr	r2, [r3, #28]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db3a:	431a      	orrs	r2, r3
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	431a      	orrs	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db44:	ea42 0103 	orr.w	r1, r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	68da      	ldr	r2, [r3, #12]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	430a      	orrs	r2, r1
 800db52:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db5c:	431a      	orrs	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db62:	431a      	orrs	r2, r3
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	699b      	ldr	r3, [r3, #24]
 800db68:	431a      	orrs	r2, r3
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	691b      	ldr	r3, [r3, #16]
 800db6e:	431a      	orrs	r2, r3
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	695b      	ldr	r3, [r3, #20]
 800db74:	431a      	orrs	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6a1b      	ldr	r3, [r3, #32]
 800db7a:	431a      	orrs	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	431a      	orrs	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db86:	431a      	orrs	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	431a      	orrs	r2, r3
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db92:	ea42 0103 	orr.w	r1, r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	430a      	orrs	r2, r1
 800dba0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d113      	bne.n	800dbd2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dbbc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dbd0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f022 0201 	bic.w	r2, r2, #1
 800dbe0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d00a      	beq.n	800dc04 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	68db      	ldr	r3, [r3, #12]
 800dbf4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	430a      	orrs	r2, r1
 800dc02:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2200      	movs	r2, #0
 800dc08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2201      	movs	r2, #1
 800dc10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800dc14:	2300      	movs	r3, #0
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3710      	adds	r7, #16
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	40013000 	.word	0x40013000
 800dc24:	40003800 	.word	0x40003800
 800dc28:	40003c00 	.word	0x40003c00

0800dc2c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b088      	sub	sp, #32
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	60f8      	str	r0, [r7, #12]
 800dc34:	60b9      	str	r1, [r7, #8]
 800dc36:	603b      	str	r3, [r7, #0]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc40:	095b      	lsrs	r3, r3, #5
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	3301      	adds	r3, #1
 800dc46:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	3330      	adds	r3, #48	; 0x30
 800dc4e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc50:	f7f5 fef4 	bl	8003a3c <HAL_GetTick>
 800dc54:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d001      	beq.n	800dc66 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800dc62:	2302      	movs	r3, #2
 800dc64:	e250      	b.n	800e108 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d002      	beq.n	800dc72 <HAL_SPI_Receive+0x46>
 800dc6c:	88fb      	ldrh	r3, [r7, #6]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d101      	bne.n	800dc76 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800dc72:	2301      	movs	r3, #1
 800dc74:	e248      	b.n	800e108 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc7c:	2b01      	cmp	r3, #1
 800dc7e:	d101      	bne.n	800dc84 <HAL_SPI_Receive+0x58>
 800dc80:	2302      	movs	r3, #2
 800dc82:	e241      	b.n	800e108 <HAL_SPI_Receive+0x4dc>
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2201      	movs	r2, #1
 800dc88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2204      	movs	r2, #4
 800dc90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2200      	movs	r2, #0
 800dc98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	68ba      	ldr	r2, [r7, #8]
 800dca0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	88fa      	ldrh	r2, [r7, #6]
 800dca6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	88fa      	ldrh	r2, [r7, #6]
 800dcae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2200      	movs	r2, #0
 800dccc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dcdc:	d108      	bne.n	800dcf0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dcec:	601a      	str	r2, [r3, #0]
 800dcee:	e009      	b.n	800dd04 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	68db      	ldr	r3, [r3, #12]
 800dcf6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800dd02:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	685a      	ldr	r2, [r3, #4]
 800dd0a:	4b95      	ldr	r3, [pc, #596]	; (800df60 <HAL_SPI_Receive+0x334>)
 800dd0c:	4013      	ands	r3, r2
 800dd0e:	88f9      	ldrh	r1, [r7, #6]
 800dd10:	68fa      	ldr	r2, [r7, #12]
 800dd12:	6812      	ldr	r2, [r2, #0]
 800dd14:	430b      	orrs	r3, r1
 800dd16:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f042 0201 	orr.w	r2, r2, #1
 800dd26:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd30:	d107      	bne.n	800dd42 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	681a      	ldr	r2, [r3, #0]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd40:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	2b0f      	cmp	r3, #15
 800dd48:	d96c      	bls.n	800de24 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800dd4a:	e064      	b.n	800de16 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	695b      	ldr	r3, [r3, #20]
 800dd52:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	695b      	ldr	r3, [r3, #20]
 800dd5a:	f003 0301 	and.w	r3, r3, #1
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d114      	bne.n	800dd8c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dd6c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd72:	1d1a      	adds	r2, r3, #4
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	3b01      	subs	r3, #1
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dd8a:	e044      	b.n	800de16 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	8bfa      	ldrh	r2, [r7, #30]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d919      	bls.n	800ddce <HAL_SPI_Receive+0x1a2>
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d014      	beq.n	800ddce <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ddae:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddb4:	1d1a      	adds	r2, r3, #4
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	3b01      	subs	r3, #1
 800ddc4:	b29a      	uxth	r2, r3
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ddcc:	e023      	b.n	800de16 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ddce:	f7f5 fe35 	bl	8003a3c <HAL_GetTick>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	1ad3      	subs	r3, r2, r3
 800ddd8:	683a      	ldr	r2, [r7, #0]
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d803      	bhi.n	800dde6 <HAL_SPI_Receive+0x1ba>
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dde4:	d102      	bne.n	800ddec <HAL_SPI_Receive+0x1c0>
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d114      	bne.n	800de16 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	f000 f98f 	bl	800e110 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2201      	movs	r2, #1
 800de06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2200      	movs	r2, #0
 800de0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800de12:	2303      	movs	r3, #3
 800de14:	e178      	b.n	800e108 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d194      	bne.n	800dd4c <HAL_SPI_Receive+0x120>
 800de22:	e15e      	b.n	800e0e2 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	68db      	ldr	r3, [r3, #12]
 800de28:	2b07      	cmp	r3, #7
 800de2a:	f240 8153 	bls.w	800e0d4 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800de2e:	e08f      	b.n	800df50 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	695b      	ldr	r3, [r3, #20]
 800de36:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	695b      	ldr	r3, [r3, #20]
 800de3e:	f003 0301 	and.w	r3, r3, #1
 800de42:	2b01      	cmp	r3, #1
 800de44:	d114      	bne.n	800de70 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de4a:	69ba      	ldr	r2, [r7, #24]
 800de4c:	8812      	ldrh	r2, [r2, #0]
 800de4e:	b292      	uxth	r2, r2
 800de50:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de56:	1c9a      	adds	r2, r3, #2
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de62:	b29b      	uxth	r3, r3
 800de64:	3b01      	subs	r3, #1
 800de66:	b29a      	uxth	r2, r3
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800de6e:	e06f      	b.n	800df50 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de76:	b29b      	uxth	r3, r3
 800de78:	8bfa      	ldrh	r2, [r7, #30]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d924      	bls.n	800dec8 <HAL_SPI_Receive+0x29c>
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de84:	2b00      	cmp	r3, #0
 800de86:	d01f      	beq.n	800dec8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de8c:	69ba      	ldr	r2, [r7, #24]
 800de8e:	8812      	ldrh	r2, [r2, #0]
 800de90:	b292      	uxth	r2, r2
 800de92:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de98:	1c9a      	adds	r2, r3, #2
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dea2:	69ba      	ldr	r2, [r7, #24]
 800dea4:	8812      	ldrh	r2, [r2, #0]
 800dea6:	b292      	uxth	r2, r2
 800dea8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deae:	1c9a      	adds	r2, r3, #2
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800deba:	b29b      	uxth	r3, r3
 800debc:	3b02      	subs	r3, #2
 800debe:	b29a      	uxth	r2, r3
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dec6:	e043      	b.n	800df50 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dece:	b29b      	uxth	r3, r3
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	d119      	bne.n	800df08 <HAL_SPI_Receive+0x2dc>
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d014      	beq.n	800df08 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dee2:	69ba      	ldr	r2, [r7, #24]
 800dee4:	8812      	ldrh	r2, [r2, #0]
 800dee6:	b292      	uxth	r2, r2
 800dee8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deee:	1c9a      	adds	r2, r3, #2
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800defa:	b29b      	uxth	r3, r3
 800defc:	3b01      	subs	r3, #1
 800defe:	b29a      	uxth	r2, r3
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800df06:	e023      	b.n	800df50 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df08:	f7f5 fd98 	bl	8003a3c <HAL_GetTick>
 800df0c:	4602      	mov	r2, r0
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	1ad3      	subs	r3, r2, r3
 800df12:	683a      	ldr	r2, [r7, #0]
 800df14:	429a      	cmp	r2, r3
 800df16:	d803      	bhi.n	800df20 <HAL_SPI_Receive+0x2f4>
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df1e:	d102      	bne.n	800df26 <HAL_SPI_Receive+0x2fa>
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d114      	bne.n	800df50 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800df26:	68f8      	ldr	r0, [r7, #12]
 800df28:	f000 f8f2 	bl	800e110 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2201      	movs	r2, #1
 800df40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2200      	movs	r2, #0
 800df48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800df4c:	2303      	movs	r3, #3
 800df4e:	e0db      	b.n	800e108 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df56:	b29b      	uxth	r3, r3
 800df58:	2b00      	cmp	r3, #0
 800df5a:	f47f af69 	bne.w	800de30 <HAL_SPI_Receive+0x204>
 800df5e:	e0c0      	b.n	800e0e2 <HAL_SPI_Receive+0x4b6>
 800df60:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	695b      	ldr	r3, [r3, #20]
 800df6a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	695b      	ldr	r3, [r3, #20]
 800df72:	f003 0301 	and.w	r3, r3, #1
 800df76:	2b01      	cmp	r3, #1
 800df78:	d117      	bne.n	800dfaa <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df86:	7812      	ldrb	r2, [r2, #0]
 800df88:	b2d2      	uxtb	r2, r2
 800df8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df90:	1c5a      	adds	r2, r3, #1
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df9c:	b29b      	uxth	r3, r3
 800df9e:	3b01      	subs	r3, #1
 800dfa0:	b29a      	uxth	r2, r3
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dfa8:	e094      	b.n	800e0d4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	8bfa      	ldrh	r2, [r7, #30]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d946      	bls.n	800e046 <HAL_SPI_Receive+0x41a>
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d041      	beq.n	800e046 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfce:	7812      	ldrb	r2, [r2, #0]
 800dfd0:	b2d2      	uxtb	r2, r2
 800dfd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfd8:	1c5a      	adds	r2, r3, #1
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfea:	7812      	ldrb	r2, [r2, #0]
 800dfec:	b2d2      	uxtb	r2, r2
 800dfee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dff4:	1c5a      	adds	r2, r3, #1
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e006:	7812      	ldrb	r2, [r2, #0]
 800e008:	b2d2      	uxtb	r2, r2
 800e00a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e010:	1c5a      	adds	r2, r3, #1
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e022:	7812      	ldrb	r2, [r2, #0]
 800e024:	b2d2      	uxtb	r2, r2
 800e026:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e02c:	1c5a      	adds	r2, r3, #1
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e038:	b29b      	uxth	r3, r3
 800e03a:	3b04      	subs	r3, #4
 800e03c:	b29a      	uxth	r2, r3
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e044:	e046      	b.n	800e0d4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e04c:	b29b      	uxth	r3, r3
 800e04e:	2b03      	cmp	r3, #3
 800e050:	d81c      	bhi.n	800e08c <HAL_SPI_Receive+0x460>
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d017      	beq.n	800e08c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e068:	7812      	ldrb	r2, [r2, #0]
 800e06a:	b2d2      	uxtb	r2, r2
 800e06c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e072:	1c5a      	adds	r2, r3, #1
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e07e:	b29b      	uxth	r3, r3
 800e080:	3b01      	subs	r3, #1
 800e082:	b29a      	uxth	r2, r3
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e08a:	e023      	b.n	800e0d4 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e08c:	f7f5 fcd6 	bl	8003a3c <HAL_GetTick>
 800e090:	4602      	mov	r2, r0
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	1ad3      	subs	r3, r2, r3
 800e096:	683a      	ldr	r2, [r7, #0]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d803      	bhi.n	800e0a4 <HAL_SPI_Receive+0x478>
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0a2:	d102      	bne.n	800e0aa <HAL_SPI_Receive+0x47e>
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d114      	bne.n	800e0d4 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e0aa:	68f8      	ldr	r0, [r7, #12]
 800e0ac:	f000 f830 	bl	800e110 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e0d0:	2303      	movs	r3, #3
 800e0d2:	e019      	b.n	800e108 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	f47f af41 	bne.w	800df64 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e0e2:	68f8      	ldr	r0, [r7, #12]
 800e0e4:	f000 f814 	bl	800e110 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d001      	beq.n	800e106 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e102:	2301      	movs	r3, #1
 800e104:	e000      	b.n	800e108 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e106:	2300      	movs	r3, #0
  }
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3720      	adds	r7, #32
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}

0800e110 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e110:	b480      	push	{r7}
 800e112:	b085      	sub	sp, #20
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	695b      	ldr	r3, [r3, #20]
 800e11e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	699a      	ldr	r2, [r3, #24]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f042 0208 	orr.w	r2, r2, #8
 800e12e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	699a      	ldr	r2, [r3, #24]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f042 0210 	orr.w	r2, r2, #16
 800e13e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	681a      	ldr	r2, [r3, #0]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f022 0201 	bic.w	r2, r2, #1
 800e14e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	6919      	ldr	r1, [r3, #16]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681a      	ldr	r2, [r3, #0]
 800e15a:	4b3c      	ldr	r3, [pc, #240]	; (800e24c <SPI_CloseTransfer+0x13c>)
 800e15c:	400b      	ands	r3, r1
 800e15e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	689a      	ldr	r2, [r3, #8]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e16e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e176:	b2db      	uxtb	r3, r3
 800e178:	2b04      	cmp	r3, #4
 800e17a:	d014      	beq.n	800e1a6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f003 0320 	and.w	r3, r3, #32
 800e182:	2b00      	cmp	r3, #0
 800e184:	d00f      	beq.n	800e1a6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e18c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	699a      	ldr	r2, [r3, #24]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f042 0220 	orr.w	r2, r2, #32
 800e1a4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	2b03      	cmp	r3, #3
 800e1b0:	d014      	beq.n	800e1dc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d00f      	beq.n	800e1dc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1c2:	f043 0204 	orr.w	r2, r3, #4
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	699a      	ldr	r2, [r3, #24]
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e1da:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d00f      	beq.n	800e206 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1ec:	f043 0201 	orr.w	r2, r3, #1
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	699a      	ldr	r2, [r3, #24]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e204:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d00f      	beq.n	800e230 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e216:	f043 0208 	orr.w	r2, r3, #8
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	699a      	ldr	r2, [r3, #24]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e22e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2200      	movs	r2, #0
 800e234:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2200      	movs	r2, #0
 800e23c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e240:	bf00      	nop
 800e242:	3714      	adds	r7, #20
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr
 800e24c:	fffffc90 	.word	0xfffffc90

0800e250 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e250:	b480      	push	{r7}
 800e252:	b085      	sub	sp, #20
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e25c:	095b      	lsrs	r3, r3, #5
 800e25e:	3301      	adds	r3, #1
 800e260:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	3301      	adds	r3, #1
 800e268:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	3307      	adds	r3, #7
 800e26e:	08db      	lsrs	r3, r3, #3
 800e270:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	68fa      	ldr	r2, [r7, #12]
 800e276:	fb02 f303 	mul.w	r3, r2, r3
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3714      	adds	r7, #20
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr

0800e286 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e286:	b580      	push	{r7, lr}
 800e288:	b082      	sub	sp, #8
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d101      	bne.n	800e298 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e294:	2301      	movs	r3, #1
 800e296:	e049      	b.n	800e32c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d106      	bne.n	800e2b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f7f4 ff71 	bl	8003194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2202      	movs	r2, #2
 800e2b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	3304      	adds	r3, #4
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	4610      	mov	r0, r2
 800e2c6:	f000 fe7d 	bl	800efc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2201      	movs	r2, #1
 800e2de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2201      	movs	r2, #1
 800e306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2201      	movs	r2, #1
 800e30e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2201      	movs	r2, #1
 800e316:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2201      	movs	r2, #1
 800e31e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2201      	movs	r2, #1
 800e326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e32a:	2300      	movs	r3, #0
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3708      	adds	r7, #8
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e334:	b480      	push	{r7}
 800e336:	b085      	sub	sp, #20
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e342:	b2db      	uxtb	r3, r3
 800e344:	2b01      	cmp	r3, #1
 800e346:	d001      	beq.n	800e34c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e348:	2301      	movs	r3, #1
 800e34a:	e054      	b.n	800e3f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2202      	movs	r2, #2
 800e350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	68da      	ldr	r2, [r3, #12]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f042 0201 	orr.w	r2, r2, #1
 800e362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a26      	ldr	r2, [pc, #152]	; (800e404 <HAL_TIM_Base_Start_IT+0xd0>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d022      	beq.n	800e3b4 <HAL_TIM_Base_Start_IT+0x80>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e376:	d01d      	beq.n	800e3b4 <HAL_TIM_Base_Start_IT+0x80>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a22      	ldr	r2, [pc, #136]	; (800e408 <HAL_TIM_Base_Start_IT+0xd4>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d018      	beq.n	800e3b4 <HAL_TIM_Base_Start_IT+0x80>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4a21      	ldr	r2, [pc, #132]	; (800e40c <HAL_TIM_Base_Start_IT+0xd8>)
 800e388:	4293      	cmp	r3, r2
 800e38a:	d013      	beq.n	800e3b4 <HAL_TIM_Base_Start_IT+0x80>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a1f      	ldr	r2, [pc, #124]	; (800e410 <HAL_TIM_Base_Start_IT+0xdc>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d00e      	beq.n	800e3b4 <HAL_TIM_Base_Start_IT+0x80>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4a1e      	ldr	r2, [pc, #120]	; (800e414 <HAL_TIM_Base_Start_IT+0xe0>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d009      	beq.n	800e3b4 <HAL_TIM_Base_Start_IT+0x80>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4a1c      	ldr	r2, [pc, #112]	; (800e418 <HAL_TIM_Base_Start_IT+0xe4>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d004      	beq.n	800e3b4 <HAL_TIM_Base_Start_IT+0x80>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	4a1b      	ldr	r2, [pc, #108]	; (800e41c <HAL_TIM_Base_Start_IT+0xe8>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	d115      	bne.n	800e3e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	689a      	ldr	r2, [r3, #8]
 800e3ba:	4b19      	ldr	r3, [pc, #100]	; (800e420 <HAL_TIM_Base_Start_IT+0xec>)
 800e3bc:	4013      	ands	r3, r2
 800e3be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2b06      	cmp	r3, #6
 800e3c4:	d015      	beq.n	800e3f2 <HAL_TIM_Base_Start_IT+0xbe>
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3cc:	d011      	beq.n	800e3f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	681a      	ldr	r2, [r3, #0]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f042 0201 	orr.w	r2, r2, #1
 800e3dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3de:	e008      	b.n	800e3f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f042 0201 	orr.w	r2, r2, #1
 800e3ee:	601a      	str	r2, [r3, #0]
 800e3f0:	e000      	b.n	800e3f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e3f4:	2300      	movs	r3, #0
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3714      	adds	r7, #20
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop
 800e404:	40010000 	.word	0x40010000
 800e408:	40000400 	.word	0x40000400
 800e40c:	40000800 	.word	0x40000800
 800e410:	40000c00 	.word	0x40000c00
 800e414:	40010400 	.word	0x40010400
 800e418:	40001800 	.word	0x40001800
 800e41c:	40014000 	.word	0x40014000
 800e420:	00010007 	.word	0x00010007

0800e424 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e42e:	2300      	movs	r3, #0
 800e430:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d109      	bne.n	800e44c <HAL_TIM_OC_Start_IT+0x28>
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e43e:	b2db      	uxtb	r3, r3
 800e440:	2b01      	cmp	r3, #1
 800e442:	bf14      	ite	ne
 800e444:	2301      	movne	r3, #1
 800e446:	2300      	moveq	r3, #0
 800e448:	b2db      	uxtb	r3, r3
 800e44a:	e03c      	b.n	800e4c6 <HAL_TIM_OC_Start_IT+0xa2>
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	2b04      	cmp	r3, #4
 800e450:	d109      	bne.n	800e466 <HAL_TIM_OC_Start_IT+0x42>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e458:	b2db      	uxtb	r3, r3
 800e45a:	2b01      	cmp	r3, #1
 800e45c:	bf14      	ite	ne
 800e45e:	2301      	movne	r3, #1
 800e460:	2300      	moveq	r3, #0
 800e462:	b2db      	uxtb	r3, r3
 800e464:	e02f      	b.n	800e4c6 <HAL_TIM_OC_Start_IT+0xa2>
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	2b08      	cmp	r3, #8
 800e46a:	d109      	bne.n	800e480 <HAL_TIM_OC_Start_IT+0x5c>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e472:	b2db      	uxtb	r3, r3
 800e474:	2b01      	cmp	r3, #1
 800e476:	bf14      	ite	ne
 800e478:	2301      	movne	r3, #1
 800e47a:	2300      	moveq	r3, #0
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	e022      	b.n	800e4c6 <HAL_TIM_OC_Start_IT+0xa2>
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	2b0c      	cmp	r3, #12
 800e484:	d109      	bne.n	800e49a <HAL_TIM_OC_Start_IT+0x76>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	2b01      	cmp	r3, #1
 800e490:	bf14      	ite	ne
 800e492:	2301      	movne	r3, #1
 800e494:	2300      	moveq	r3, #0
 800e496:	b2db      	uxtb	r3, r3
 800e498:	e015      	b.n	800e4c6 <HAL_TIM_OC_Start_IT+0xa2>
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	2b10      	cmp	r3, #16
 800e49e:	d109      	bne.n	800e4b4 <HAL_TIM_OC_Start_IT+0x90>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4a6:	b2db      	uxtb	r3, r3
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	bf14      	ite	ne
 800e4ac:	2301      	movne	r3, #1
 800e4ae:	2300      	moveq	r3, #0
 800e4b0:	b2db      	uxtb	r3, r3
 800e4b2:	e008      	b.n	800e4c6 <HAL_TIM_OC_Start_IT+0xa2>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	bf14      	ite	ne
 800e4c0:	2301      	movne	r3, #1
 800e4c2:	2300      	moveq	r3, #0
 800e4c4:	b2db      	uxtb	r3, r3
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d001      	beq.n	800e4ce <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	e0ec      	b.n	800e6a8 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d104      	bne.n	800e4de <HAL_TIM_OC_Start_IT+0xba>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2202      	movs	r2, #2
 800e4d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e4dc:	e023      	b.n	800e526 <HAL_TIM_OC_Start_IT+0x102>
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	2b04      	cmp	r3, #4
 800e4e2:	d104      	bne.n	800e4ee <HAL_TIM_OC_Start_IT+0xca>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2202      	movs	r2, #2
 800e4e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e4ec:	e01b      	b.n	800e526 <HAL_TIM_OC_Start_IT+0x102>
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	2b08      	cmp	r3, #8
 800e4f2:	d104      	bne.n	800e4fe <HAL_TIM_OC_Start_IT+0xda>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2202      	movs	r2, #2
 800e4f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e4fc:	e013      	b.n	800e526 <HAL_TIM_OC_Start_IT+0x102>
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	2b0c      	cmp	r3, #12
 800e502:	d104      	bne.n	800e50e <HAL_TIM_OC_Start_IT+0xea>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2202      	movs	r2, #2
 800e508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e50c:	e00b      	b.n	800e526 <HAL_TIM_OC_Start_IT+0x102>
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	2b10      	cmp	r3, #16
 800e512:	d104      	bne.n	800e51e <HAL_TIM_OC_Start_IT+0xfa>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2202      	movs	r2, #2
 800e518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e51c:	e003      	b.n	800e526 <HAL_TIM_OC_Start_IT+0x102>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2202      	movs	r2, #2
 800e522:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	2b0c      	cmp	r3, #12
 800e52a:	d841      	bhi.n	800e5b0 <HAL_TIM_OC_Start_IT+0x18c>
 800e52c:	a201      	add	r2, pc, #4	; (adr r2, 800e534 <HAL_TIM_OC_Start_IT+0x110>)
 800e52e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e532:	bf00      	nop
 800e534:	0800e569 	.word	0x0800e569
 800e538:	0800e5b1 	.word	0x0800e5b1
 800e53c:	0800e5b1 	.word	0x0800e5b1
 800e540:	0800e5b1 	.word	0x0800e5b1
 800e544:	0800e57b 	.word	0x0800e57b
 800e548:	0800e5b1 	.word	0x0800e5b1
 800e54c:	0800e5b1 	.word	0x0800e5b1
 800e550:	0800e5b1 	.word	0x0800e5b1
 800e554:	0800e58d 	.word	0x0800e58d
 800e558:	0800e5b1 	.word	0x0800e5b1
 800e55c:	0800e5b1 	.word	0x0800e5b1
 800e560:	0800e5b1 	.word	0x0800e5b1
 800e564:	0800e59f 	.word	0x0800e59f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	68da      	ldr	r2, [r3, #12]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f042 0202 	orr.w	r2, r2, #2
 800e576:	60da      	str	r2, [r3, #12]
      break;
 800e578:	e01d      	b.n	800e5b6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	68da      	ldr	r2, [r3, #12]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	f042 0204 	orr.w	r2, r2, #4
 800e588:	60da      	str	r2, [r3, #12]
      break;
 800e58a:	e014      	b.n	800e5b6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	68da      	ldr	r2, [r3, #12]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f042 0208 	orr.w	r2, r2, #8
 800e59a:	60da      	str	r2, [r3, #12]
      break;
 800e59c:	e00b      	b.n	800e5b6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	68da      	ldr	r2, [r3, #12]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f042 0210 	orr.w	r2, r2, #16
 800e5ac:	60da      	str	r2, [r3, #12]
      break;
 800e5ae:	e002      	b.n	800e5b6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	73fb      	strb	r3, [r7, #15]
      break;
 800e5b4:	bf00      	nop
  }

  if (status == HAL_OK)
 800e5b6:	7bfb      	ldrb	r3, [r7, #15]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d174      	bne.n	800e6a6 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	6839      	ldr	r1, [r7, #0]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f001 f917 	bl	800f7f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	4a38      	ldr	r2, [pc, #224]	; (800e6b0 <HAL_TIM_OC_Start_IT+0x28c>)
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d013      	beq.n	800e5fc <HAL_TIM_OC_Start_IT+0x1d8>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4a36      	ldr	r2, [pc, #216]	; (800e6b4 <HAL_TIM_OC_Start_IT+0x290>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d00e      	beq.n	800e5fc <HAL_TIM_OC_Start_IT+0x1d8>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	4a35      	ldr	r2, [pc, #212]	; (800e6b8 <HAL_TIM_OC_Start_IT+0x294>)
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d009      	beq.n	800e5fc <HAL_TIM_OC_Start_IT+0x1d8>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4a33      	ldr	r2, [pc, #204]	; (800e6bc <HAL_TIM_OC_Start_IT+0x298>)
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d004      	beq.n	800e5fc <HAL_TIM_OC_Start_IT+0x1d8>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	4a32      	ldr	r2, [pc, #200]	; (800e6c0 <HAL_TIM_OC_Start_IT+0x29c>)
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	d101      	bne.n	800e600 <HAL_TIM_OC_Start_IT+0x1dc>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	e000      	b.n	800e602 <HAL_TIM_OC_Start_IT+0x1de>
 800e600:	2300      	movs	r3, #0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d007      	beq.n	800e616 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e614:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	4a25      	ldr	r2, [pc, #148]	; (800e6b0 <HAL_TIM_OC_Start_IT+0x28c>)
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d022      	beq.n	800e666 <HAL_TIM_OC_Start_IT+0x242>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e628:	d01d      	beq.n	800e666 <HAL_TIM_OC_Start_IT+0x242>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	4a25      	ldr	r2, [pc, #148]	; (800e6c4 <HAL_TIM_OC_Start_IT+0x2a0>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d018      	beq.n	800e666 <HAL_TIM_OC_Start_IT+0x242>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	4a23      	ldr	r2, [pc, #140]	; (800e6c8 <HAL_TIM_OC_Start_IT+0x2a4>)
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d013      	beq.n	800e666 <HAL_TIM_OC_Start_IT+0x242>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	4a22      	ldr	r2, [pc, #136]	; (800e6cc <HAL_TIM_OC_Start_IT+0x2a8>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d00e      	beq.n	800e666 <HAL_TIM_OC_Start_IT+0x242>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4a19      	ldr	r2, [pc, #100]	; (800e6b4 <HAL_TIM_OC_Start_IT+0x290>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d009      	beq.n	800e666 <HAL_TIM_OC_Start_IT+0x242>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	4a1e      	ldr	r2, [pc, #120]	; (800e6d0 <HAL_TIM_OC_Start_IT+0x2ac>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	d004      	beq.n	800e666 <HAL_TIM_OC_Start_IT+0x242>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4a15      	ldr	r2, [pc, #84]	; (800e6b8 <HAL_TIM_OC_Start_IT+0x294>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d115      	bne.n	800e692 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	689a      	ldr	r2, [r3, #8]
 800e66c:	4b19      	ldr	r3, [pc, #100]	; (800e6d4 <HAL_TIM_OC_Start_IT+0x2b0>)
 800e66e:	4013      	ands	r3, r2
 800e670:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	2b06      	cmp	r3, #6
 800e676:	d015      	beq.n	800e6a4 <HAL_TIM_OC_Start_IT+0x280>
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e67e:	d011      	beq.n	800e6a4 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f042 0201 	orr.w	r2, r2, #1
 800e68e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e690:	e008      	b.n	800e6a4 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	681a      	ldr	r2, [r3, #0]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f042 0201 	orr.w	r2, r2, #1
 800e6a0:	601a      	str	r2, [r3, #0]
 800e6a2:	e000      	b.n	800e6a6 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6a4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3710      	adds	r7, #16
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	40010000 	.word	0x40010000
 800e6b4:	40010400 	.word	0x40010400
 800e6b8:	40014000 	.word	0x40014000
 800e6bc:	40014400 	.word	0x40014400
 800e6c0:	40014800 	.word	0x40014800
 800e6c4:	40000400 	.word	0x40000400
 800e6c8:	40000800 	.word	0x40000800
 800e6cc:	40000c00 	.word	0x40000c00
 800e6d0:	40001800 	.word	0x40001800
 800e6d4:	00010007 	.word	0x00010007

0800e6d8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	2b0c      	cmp	r3, #12
 800e6ea:	d841      	bhi.n	800e770 <HAL_TIM_OC_Stop_IT+0x98>
 800e6ec:	a201      	add	r2, pc, #4	; (adr r2, 800e6f4 <HAL_TIM_OC_Stop_IT+0x1c>)
 800e6ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6f2:	bf00      	nop
 800e6f4:	0800e729 	.word	0x0800e729
 800e6f8:	0800e771 	.word	0x0800e771
 800e6fc:	0800e771 	.word	0x0800e771
 800e700:	0800e771 	.word	0x0800e771
 800e704:	0800e73b 	.word	0x0800e73b
 800e708:	0800e771 	.word	0x0800e771
 800e70c:	0800e771 	.word	0x0800e771
 800e710:	0800e771 	.word	0x0800e771
 800e714:	0800e74d 	.word	0x0800e74d
 800e718:	0800e771 	.word	0x0800e771
 800e71c:	0800e771 	.word	0x0800e771
 800e720:	0800e771 	.word	0x0800e771
 800e724:	0800e75f 	.word	0x0800e75f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	68da      	ldr	r2, [r3, #12]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f022 0202 	bic.w	r2, r2, #2
 800e736:	60da      	str	r2, [r3, #12]
      break;
 800e738:	e01d      	b.n	800e776 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	68da      	ldr	r2, [r3, #12]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f022 0204 	bic.w	r2, r2, #4
 800e748:	60da      	str	r2, [r3, #12]
      break;
 800e74a:	e014      	b.n	800e776 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	68da      	ldr	r2, [r3, #12]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f022 0208 	bic.w	r2, r2, #8
 800e75a:	60da      	str	r2, [r3, #12]
      break;
 800e75c:	e00b      	b.n	800e776 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	68da      	ldr	r2, [r3, #12]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f022 0210 	bic.w	r2, r2, #16
 800e76c:	60da      	str	r2, [r3, #12]
      break;
 800e76e:	e002      	b.n	800e776 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800e770:	2301      	movs	r3, #1
 800e772:	73fb      	strb	r3, [r7, #15]
      break;
 800e774:	bf00      	nop
  }

  if (status == HAL_OK)
 800e776:	7bfb      	ldrb	r3, [r7, #15]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	f040 8081 	bne.w	800e880 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2200      	movs	r2, #0
 800e784:	6839      	ldr	r1, [r7, #0]
 800e786:	4618      	mov	r0, r3
 800e788:	f001 f836 	bl	800f7f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4a3e      	ldr	r2, [pc, #248]	; (800e88c <HAL_TIM_OC_Stop_IT+0x1b4>)
 800e792:	4293      	cmp	r3, r2
 800e794:	d013      	beq.n	800e7be <HAL_TIM_OC_Stop_IT+0xe6>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	4a3d      	ldr	r2, [pc, #244]	; (800e890 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d00e      	beq.n	800e7be <HAL_TIM_OC_Stop_IT+0xe6>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	4a3b      	ldr	r2, [pc, #236]	; (800e894 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d009      	beq.n	800e7be <HAL_TIM_OC_Stop_IT+0xe6>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4a3a      	ldr	r2, [pc, #232]	; (800e898 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d004      	beq.n	800e7be <HAL_TIM_OC_Stop_IT+0xe6>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4a38      	ldr	r2, [pc, #224]	; (800e89c <HAL_TIM_OC_Stop_IT+0x1c4>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d101      	bne.n	800e7c2 <HAL_TIM_OC_Stop_IT+0xea>
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e000      	b.n	800e7c4 <HAL_TIM_OC_Stop_IT+0xec>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d017      	beq.n	800e7f8 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	6a1a      	ldr	r2, [r3, #32]
 800e7ce:	f241 1311 	movw	r3, #4369	; 0x1111
 800e7d2:	4013      	ands	r3, r2
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d10f      	bne.n	800e7f8 <HAL_TIM_OC_Stop_IT+0x120>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	6a1a      	ldr	r2, [r3, #32]
 800e7de:	f240 4344 	movw	r3, #1092	; 0x444
 800e7e2:	4013      	ands	r3, r2
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d107      	bne.n	800e7f8 <HAL_TIM_OC_Stop_IT+0x120>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e7f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	6a1a      	ldr	r2, [r3, #32]
 800e7fe:	f241 1311 	movw	r3, #4369	; 0x1111
 800e802:	4013      	ands	r3, r2
 800e804:	2b00      	cmp	r3, #0
 800e806:	d10f      	bne.n	800e828 <HAL_TIM_OC_Stop_IT+0x150>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	6a1a      	ldr	r2, [r3, #32]
 800e80e:	f240 4344 	movw	r3, #1092	; 0x444
 800e812:	4013      	ands	r3, r2
 800e814:	2b00      	cmp	r3, #0
 800e816:	d107      	bne.n	800e828 <HAL_TIM_OC_Stop_IT+0x150>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	681a      	ldr	r2, [r3, #0]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f022 0201 	bic.w	r2, r2, #1
 800e826:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d104      	bne.n	800e838 <HAL_TIM_OC_Stop_IT+0x160>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2201      	movs	r2, #1
 800e832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e836:	e023      	b.n	800e880 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	2b04      	cmp	r3, #4
 800e83c:	d104      	bne.n	800e848 <HAL_TIM_OC_Stop_IT+0x170>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2201      	movs	r2, #1
 800e842:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e846:	e01b      	b.n	800e880 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	2b08      	cmp	r3, #8
 800e84c:	d104      	bne.n	800e858 <HAL_TIM_OC_Stop_IT+0x180>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2201      	movs	r2, #1
 800e852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e856:	e013      	b.n	800e880 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	2b0c      	cmp	r3, #12
 800e85c:	d104      	bne.n	800e868 <HAL_TIM_OC_Stop_IT+0x190>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2201      	movs	r2, #1
 800e862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e866:	e00b      	b.n	800e880 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	2b10      	cmp	r3, #16
 800e86c:	d104      	bne.n	800e878 <HAL_TIM_OC_Stop_IT+0x1a0>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2201      	movs	r2, #1
 800e872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e876:	e003      	b.n	800e880 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2201      	movs	r2, #1
 800e87c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800e880:	7bfb      	ldrb	r3, [r7, #15]
}
 800e882:	4618      	mov	r0, r3
 800e884:	3710      	adds	r7, #16
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	40010000 	.word	0x40010000
 800e890:	40010400 	.word	0x40010400
 800e894:	40014000 	.word	0x40014000
 800e898:	40014400 	.word	0x40014400
 800e89c:	40014800 	.word	0x40014800

0800e8a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b082      	sub	sp, #8
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d101      	bne.n	800e8b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	e049      	b.n	800e946 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8b8:	b2db      	uxtb	r3, r3
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d106      	bne.n	800e8cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 f841 	bl	800e94e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2202      	movs	r2, #2
 800e8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681a      	ldr	r2, [r3, #0]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	3304      	adds	r3, #4
 800e8dc:	4619      	mov	r1, r3
 800e8de:	4610      	mov	r0, r2
 800e8e0:	f000 fb70 	bl	800efc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2201      	movs	r2, #1
 800e900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2201      	movs	r2, #1
 800e908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2201      	movs	r2, #1
 800e910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2201      	movs	r2, #1
 800e918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2201      	movs	r2, #1
 800e920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2201      	movs	r2, #1
 800e928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2201      	movs	r2, #1
 800e930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2201      	movs	r2, #1
 800e938:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2201      	movs	r2, #1
 800e940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	3708      	adds	r7, #8
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e94e:	b480      	push	{r7}
 800e950:	b083      	sub	sp, #12
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e956:	bf00      	nop
 800e958:	370c      	adds	r7, #12
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr

0800e962 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e962:	b580      	push	{r7, lr}
 800e964:	b084      	sub	sp, #16
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	68db      	ldr	r3, [r3, #12]
 800e970:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	691b      	ldr	r3, [r3, #16]
 800e978:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	f003 0302 	and.w	r3, r3, #2
 800e980:	2b00      	cmp	r3, #0
 800e982:	d020      	beq.n	800e9c6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f003 0302 	and.w	r3, r3, #2
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d01b      	beq.n	800e9c6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	f06f 0202 	mvn.w	r2, #2
 800e996:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2201      	movs	r2, #1
 800e99c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	699b      	ldr	r3, [r3, #24]
 800e9a4:	f003 0303 	and.w	r3, r3, #3
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d003      	beq.n	800e9b4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f000 faeb 	bl	800ef88 <HAL_TIM_IC_CaptureCallback>
 800e9b2:	e005      	b.n	800e9c0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f7f1 fe1d 	bl	80005f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 faee 	bl	800ef9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	f003 0304 	and.w	r3, r3, #4
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d020      	beq.n	800ea12 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f003 0304 	and.w	r3, r3, #4
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d01b      	beq.n	800ea12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f06f 0204 	mvn.w	r2, #4
 800e9e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2202      	movs	r2, #2
 800e9e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	699b      	ldr	r3, [r3, #24]
 800e9f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d003      	beq.n	800ea00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f000 fac5 	bl	800ef88 <HAL_TIM_IC_CaptureCallback>
 800e9fe:	e005      	b.n	800ea0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f7f1 fdf7 	bl	80005f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f000 fac8 	bl	800ef9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	f003 0308 	and.w	r3, r3, #8
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d020      	beq.n	800ea5e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	f003 0308 	and.w	r3, r3, #8
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d01b      	beq.n	800ea5e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f06f 0208 	mvn.w	r2, #8
 800ea2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2204      	movs	r2, #4
 800ea34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	69db      	ldr	r3, [r3, #28]
 800ea3c:	f003 0303 	and.w	r3, r3, #3
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d003      	beq.n	800ea4c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f000 fa9f 	bl	800ef88 <HAL_TIM_IC_CaptureCallback>
 800ea4a:	e005      	b.n	800ea58 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f7f1 fdd1 	bl	80005f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f000 faa2 	bl	800ef9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	f003 0310 	and.w	r3, r3, #16
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d020      	beq.n	800eaaa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	f003 0310 	and.w	r3, r3, #16
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d01b      	beq.n	800eaaa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f06f 0210 	mvn.w	r2, #16
 800ea7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2208      	movs	r2, #8
 800ea80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	69db      	ldr	r3, [r3, #28]
 800ea88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d003      	beq.n	800ea98 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f000 fa79 	bl	800ef88 <HAL_TIM_IC_CaptureCallback>
 800ea96:	e005      	b.n	800eaa4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f7f1 fdab 	bl	80005f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f000 fa7c 	bl	800ef9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	f003 0301 	and.w	r3, r3, #1
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d00c      	beq.n	800eace <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f003 0301 	and.w	r3, r3, #1
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d007      	beq.n	800eace <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f06f 0201 	mvn.w	r2, #1
 800eac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f7f4 f83d 	bl	8002b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d104      	bne.n	800eae2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d00c      	beq.n	800eafc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d007      	beq.n	800eafc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800eaf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f000 ffba 	bl	800fa70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d00c      	beq.n	800eb20 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d007      	beq.n	800eb20 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800eb18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f000 ffb2 	bl	800fa84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d00c      	beq.n	800eb44 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d007      	beq.n	800eb44 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eb3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f000 fa36 	bl	800efb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	f003 0320 	and.w	r3, r3, #32
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d00c      	beq.n	800eb68 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	f003 0320 	and.w	r3, r3, #32
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d007      	beq.n	800eb68 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f06f 0220 	mvn.w	r2, #32
 800eb60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f000 ff7a 	bl	800fa5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eb68:	bf00      	nop
 800eb6a:	3710      	adds	r7, #16
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b086      	sub	sp, #24
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	60f8      	str	r0, [r7, #12]
 800eb78:	60b9      	str	r1, [r7, #8]
 800eb7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb86:	2b01      	cmp	r3, #1
 800eb88:	d101      	bne.n	800eb8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eb8a:	2302      	movs	r3, #2
 800eb8c:	e0ff      	b.n	800ed8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2201      	movs	r2, #1
 800eb92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2b14      	cmp	r3, #20
 800eb9a:	f200 80f0 	bhi.w	800ed7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800eb9e:	a201      	add	r2, pc, #4	; (adr r2, 800eba4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800eba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba4:	0800ebf9 	.word	0x0800ebf9
 800eba8:	0800ed7f 	.word	0x0800ed7f
 800ebac:	0800ed7f 	.word	0x0800ed7f
 800ebb0:	0800ed7f 	.word	0x0800ed7f
 800ebb4:	0800ec39 	.word	0x0800ec39
 800ebb8:	0800ed7f 	.word	0x0800ed7f
 800ebbc:	0800ed7f 	.word	0x0800ed7f
 800ebc0:	0800ed7f 	.word	0x0800ed7f
 800ebc4:	0800ec7b 	.word	0x0800ec7b
 800ebc8:	0800ed7f 	.word	0x0800ed7f
 800ebcc:	0800ed7f 	.word	0x0800ed7f
 800ebd0:	0800ed7f 	.word	0x0800ed7f
 800ebd4:	0800ecbb 	.word	0x0800ecbb
 800ebd8:	0800ed7f 	.word	0x0800ed7f
 800ebdc:	0800ed7f 	.word	0x0800ed7f
 800ebe0:	0800ed7f 	.word	0x0800ed7f
 800ebe4:	0800ecfd 	.word	0x0800ecfd
 800ebe8:	0800ed7f 	.word	0x0800ed7f
 800ebec:	0800ed7f 	.word	0x0800ed7f
 800ebf0:	0800ed7f 	.word	0x0800ed7f
 800ebf4:	0800ed3d 	.word	0x0800ed3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	68b9      	ldr	r1, [r7, #8]
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f000 fa86 	bl	800f110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	699a      	ldr	r2, [r3, #24]
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f042 0208 	orr.w	r2, r2, #8
 800ec12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	699a      	ldr	r2, [r3, #24]
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f022 0204 	bic.w	r2, r2, #4
 800ec22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	6999      	ldr	r1, [r3, #24]
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	691a      	ldr	r2, [r3, #16]
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	430a      	orrs	r2, r1
 800ec34:	619a      	str	r2, [r3, #24]
      break;
 800ec36:	e0a5      	b.n	800ed84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	68b9      	ldr	r1, [r7, #8]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f000 faf6 	bl	800f230 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	699a      	ldr	r2, [r3, #24]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	699a      	ldr	r2, [r3, #24]
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	6999      	ldr	r1, [r3, #24]
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	691b      	ldr	r3, [r3, #16]
 800ec6e:	021a      	lsls	r2, r3, #8
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	430a      	orrs	r2, r1
 800ec76:	619a      	str	r2, [r3, #24]
      break;
 800ec78:	e084      	b.n	800ed84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	68b9      	ldr	r1, [r7, #8]
 800ec80:	4618      	mov	r0, r3
 800ec82:	f000 fb5f 	bl	800f344 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	69da      	ldr	r2, [r3, #28]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f042 0208 	orr.w	r2, r2, #8
 800ec94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	69da      	ldr	r2, [r3, #28]
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f022 0204 	bic.w	r2, r2, #4
 800eca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	69d9      	ldr	r1, [r3, #28]
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	691a      	ldr	r2, [r3, #16]
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	430a      	orrs	r2, r1
 800ecb6:	61da      	str	r2, [r3, #28]
      break;
 800ecb8:	e064      	b.n	800ed84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	68b9      	ldr	r1, [r7, #8]
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f000 fbc7 	bl	800f454 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	69da      	ldr	r2, [r3, #28]
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ecd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	69da      	ldr	r2, [r3, #28]
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ece4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	69d9      	ldr	r1, [r3, #28]
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	691b      	ldr	r3, [r3, #16]
 800ecf0:	021a      	lsls	r2, r3, #8
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	430a      	orrs	r2, r1
 800ecf8:	61da      	str	r2, [r3, #28]
      break;
 800ecfa:	e043      	b.n	800ed84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	68b9      	ldr	r1, [r7, #8]
 800ed02:	4618      	mov	r0, r3
 800ed04:	f000 fc10 	bl	800f528 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f042 0208 	orr.w	r2, r2, #8
 800ed16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f022 0204 	bic.w	r2, r2, #4
 800ed26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	691a      	ldr	r2, [r3, #16]
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	430a      	orrs	r2, r1
 800ed38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ed3a:	e023      	b.n	800ed84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	68b9      	ldr	r1, [r7, #8]
 800ed42:	4618      	mov	r0, r3
 800ed44:	f000 fc54 	bl	800f5f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	691b      	ldr	r3, [r3, #16]
 800ed72:	021a      	lsls	r2, r3, #8
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	430a      	orrs	r2, r1
 800ed7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ed7c:	e002      	b.n	800ed84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ed7e:	2301      	movs	r3, #1
 800ed80:	75fb      	strb	r3, [r7, #23]
      break;
 800ed82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2200      	movs	r2, #0
 800ed88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ed8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3718      	adds	r7, #24
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop

0800ed98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eda2:	2300      	movs	r3, #0
 800eda4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800edac:	2b01      	cmp	r3, #1
 800edae:	d101      	bne.n	800edb4 <HAL_TIM_ConfigClockSource+0x1c>
 800edb0:	2302      	movs	r3, #2
 800edb2:	e0dc      	b.n	800ef6e <HAL_TIM_ConfigClockSource+0x1d6>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2201      	movs	r2, #1
 800edb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2202      	movs	r2, #2
 800edc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800edcc:	68ba      	ldr	r2, [r7, #8]
 800edce:	4b6a      	ldr	r3, [pc, #424]	; (800ef78 <HAL_TIM_ConfigClockSource+0x1e0>)
 800edd0:	4013      	ands	r3, r2
 800edd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800edd4:	68bb      	ldr	r3, [r7, #8]
 800edd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800edda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	68ba      	ldr	r2, [r7, #8]
 800ede2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	4a64      	ldr	r2, [pc, #400]	; (800ef7c <HAL_TIM_ConfigClockSource+0x1e4>)
 800edea:	4293      	cmp	r3, r2
 800edec:	f000 80a9 	beq.w	800ef42 <HAL_TIM_ConfigClockSource+0x1aa>
 800edf0:	4a62      	ldr	r2, [pc, #392]	; (800ef7c <HAL_TIM_ConfigClockSource+0x1e4>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	f200 80ae 	bhi.w	800ef54 <HAL_TIM_ConfigClockSource+0x1bc>
 800edf8:	4a61      	ldr	r2, [pc, #388]	; (800ef80 <HAL_TIM_ConfigClockSource+0x1e8>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	f000 80a1 	beq.w	800ef42 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee00:	4a5f      	ldr	r2, [pc, #380]	; (800ef80 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	f200 80a6 	bhi.w	800ef54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee08:	4a5e      	ldr	r2, [pc, #376]	; (800ef84 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	f000 8099 	beq.w	800ef42 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee10:	4a5c      	ldr	r2, [pc, #368]	; (800ef84 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	f200 809e 	bhi.w	800ef54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ee1c:	f000 8091 	beq.w	800ef42 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ee24:	f200 8096 	bhi.w	800ef54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee2c:	f000 8089 	beq.w	800ef42 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee34:	f200 808e 	bhi.w	800ef54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee3c:	d03e      	beq.n	800eebc <HAL_TIM_ConfigClockSource+0x124>
 800ee3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee42:	f200 8087 	bhi.w	800ef54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee4a:	f000 8086 	beq.w	800ef5a <HAL_TIM_ConfigClockSource+0x1c2>
 800ee4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee52:	d87f      	bhi.n	800ef54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee54:	2b70      	cmp	r3, #112	; 0x70
 800ee56:	d01a      	beq.n	800ee8e <HAL_TIM_ConfigClockSource+0xf6>
 800ee58:	2b70      	cmp	r3, #112	; 0x70
 800ee5a:	d87b      	bhi.n	800ef54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee5c:	2b60      	cmp	r3, #96	; 0x60
 800ee5e:	d050      	beq.n	800ef02 <HAL_TIM_ConfigClockSource+0x16a>
 800ee60:	2b60      	cmp	r3, #96	; 0x60
 800ee62:	d877      	bhi.n	800ef54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee64:	2b50      	cmp	r3, #80	; 0x50
 800ee66:	d03c      	beq.n	800eee2 <HAL_TIM_ConfigClockSource+0x14a>
 800ee68:	2b50      	cmp	r3, #80	; 0x50
 800ee6a:	d873      	bhi.n	800ef54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee6c:	2b40      	cmp	r3, #64	; 0x40
 800ee6e:	d058      	beq.n	800ef22 <HAL_TIM_ConfigClockSource+0x18a>
 800ee70:	2b40      	cmp	r3, #64	; 0x40
 800ee72:	d86f      	bhi.n	800ef54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee74:	2b30      	cmp	r3, #48	; 0x30
 800ee76:	d064      	beq.n	800ef42 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee78:	2b30      	cmp	r3, #48	; 0x30
 800ee7a:	d86b      	bhi.n	800ef54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee7c:	2b20      	cmp	r3, #32
 800ee7e:	d060      	beq.n	800ef42 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee80:	2b20      	cmp	r3, #32
 800ee82:	d867      	bhi.n	800ef54 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d05c      	beq.n	800ef42 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee88:	2b10      	cmp	r3, #16
 800ee8a:	d05a      	beq.n	800ef42 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee8c:	e062      	b.n	800ef54 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6818      	ldr	r0, [r3, #0]
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	6899      	ldr	r1, [r3, #8]
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	685a      	ldr	r2, [r3, #4]
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	68db      	ldr	r3, [r3, #12]
 800ee9e:	f000 fc8b 	bl	800f7b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800eeb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	68ba      	ldr	r2, [r7, #8]
 800eeb8:	609a      	str	r2, [r3, #8]
      break;
 800eeba:	e04f      	b.n	800ef5c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6818      	ldr	r0, [r3, #0]
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	6899      	ldr	r1, [r3, #8]
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	685a      	ldr	r2, [r3, #4]
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	68db      	ldr	r3, [r3, #12]
 800eecc:	f000 fc74 	bl	800f7b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	689a      	ldr	r2, [r3, #8]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800eede:	609a      	str	r2, [r3, #8]
      break;
 800eee0:	e03c      	b.n	800ef5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6818      	ldr	r0, [r3, #0]
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	6859      	ldr	r1, [r3, #4]
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	461a      	mov	r2, r3
 800eef0:	f000 fbe4 	bl	800f6bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2150      	movs	r1, #80	; 0x50
 800eefa:	4618      	mov	r0, r3
 800eefc:	f000 fc3e 	bl	800f77c <TIM_ITRx_SetConfig>
      break;
 800ef00:	e02c      	b.n	800ef5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6818      	ldr	r0, [r3, #0]
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	6859      	ldr	r1, [r3, #4]
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	68db      	ldr	r3, [r3, #12]
 800ef0e:	461a      	mov	r2, r3
 800ef10:	f000 fc03 	bl	800f71a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	2160      	movs	r1, #96	; 0x60
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f000 fc2e 	bl	800f77c <TIM_ITRx_SetConfig>
      break;
 800ef20:	e01c      	b.n	800ef5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6818      	ldr	r0, [r3, #0]
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	6859      	ldr	r1, [r3, #4]
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	68db      	ldr	r3, [r3, #12]
 800ef2e:	461a      	mov	r2, r3
 800ef30:	f000 fbc4 	bl	800f6bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	2140      	movs	r1, #64	; 0x40
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f000 fc1e 	bl	800f77c <TIM_ITRx_SetConfig>
      break;
 800ef40:	e00c      	b.n	800ef5c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4619      	mov	r1, r3
 800ef4c:	4610      	mov	r0, r2
 800ef4e:	f000 fc15 	bl	800f77c <TIM_ITRx_SetConfig>
      break;
 800ef52:	e003      	b.n	800ef5c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ef54:	2301      	movs	r3, #1
 800ef56:	73fb      	strb	r3, [r7, #15]
      break;
 800ef58:	e000      	b.n	800ef5c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ef5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2201      	movs	r2, #1
 800ef60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2200      	movs	r2, #0
 800ef68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ef6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3710      	adds	r7, #16
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	ffceff88 	.word	0xffceff88
 800ef7c:	00100040 	.word	0x00100040
 800ef80:	00100030 	.word	0x00100030
 800ef84:	00100020 	.word	0x00100020

0800ef88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ef90:	bf00      	nop
 800ef92:	370c      	adds	r7, #12
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr

0800ef9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b083      	sub	sp, #12
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800efa4:	bf00      	nop
 800efa6:	370c      	adds	r7, #12
 800efa8:	46bd      	mov	sp, r7
 800efaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efae:	4770      	bx	lr

0800efb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b083      	sub	sp, #12
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800efb8:	bf00      	nop
 800efba:	370c      	adds	r7, #12
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr

0800efc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b085      	sub	sp, #20
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4a46      	ldr	r2, [pc, #280]	; (800f0f0 <TIM_Base_SetConfig+0x12c>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d013      	beq.n	800f004 <TIM_Base_SetConfig+0x40>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efe2:	d00f      	beq.n	800f004 <TIM_Base_SetConfig+0x40>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	4a43      	ldr	r2, [pc, #268]	; (800f0f4 <TIM_Base_SetConfig+0x130>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d00b      	beq.n	800f004 <TIM_Base_SetConfig+0x40>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	4a42      	ldr	r2, [pc, #264]	; (800f0f8 <TIM_Base_SetConfig+0x134>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d007      	beq.n	800f004 <TIM_Base_SetConfig+0x40>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	4a41      	ldr	r2, [pc, #260]	; (800f0fc <TIM_Base_SetConfig+0x138>)
 800eff8:	4293      	cmp	r3, r2
 800effa:	d003      	beq.n	800f004 <TIM_Base_SetConfig+0x40>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	4a40      	ldr	r2, [pc, #256]	; (800f100 <TIM_Base_SetConfig+0x13c>)
 800f000:	4293      	cmp	r3, r2
 800f002:	d108      	bne.n	800f016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f00a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	68fa      	ldr	r2, [r7, #12]
 800f012:	4313      	orrs	r3, r2
 800f014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4a35      	ldr	r2, [pc, #212]	; (800f0f0 <TIM_Base_SetConfig+0x12c>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d01f      	beq.n	800f05e <TIM_Base_SetConfig+0x9a>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f024:	d01b      	beq.n	800f05e <TIM_Base_SetConfig+0x9a>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	4a32      	ldr	r2, [pc, #200]	; (800f0f4 <TIM_Base_SetConfig+0x130>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d017      	beq.n	800f05e <TIM_Base_SetConfig+0x9a>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	4a31      	ldr	r2, [pc, #196]	; (800f0f8 <TIM_Base_SetConfig+0x134>)
 800f032:	4293      	cmp	r3, r2
 800f034:	d013      	beq.n	800f05e <TIM_Base_SetConfig+0x9a>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	4a30      	ldr	r2, [pc, #192]	; (800f0fc <TIM_Base_SetConfig+0x138>)
 800f03a:	4293      	cmp	r3, r2
 800f03c:	d00f      	beq.n	800f05e <TIM_Base_SetConfig+0x9a>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	4a2f      	ldr	r2, [pc, #188]	; (800f100 <TIM_Base_SetConfig+0x13c>)
 800f042:	4293      	cmp	r3, r2
 800f044:	d00b      	beq.n	800f05e <TIM_Base_SetConfig+0x9a>
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	4a2e      	ldr	r2, [pc, #184]	; (800f104 <TIM_Base_SetConfig+0x140>)
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d007      	beq.n	800f05e <TIM_Base_SetConfig+0x9a>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	4a2d      	ldr	r2, [pc, #180]	; (800f108 <TIM_Base_SetConfig+0x144>)
 800f052:	4293      	cmp	r3, r2
 800f054:	d003      	beq.n	800f05e <TIM_Base_SetConfig+0x9a>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	4a2c      	ldr	r2, [pc, #176]	; (800f10c <TIM_Base_SetConfig+0x148>)
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d108      	bne.n	800f070 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	68db      	ldr	r3, [r3, #12]
 800f06a:	68fa      	ldr	r2, [r7, #12]
 800f06c:	4313      	orrs	r3, r2
 800f06e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	695b      	ldr	r3, [r3, #20]
 800f07a:	4313      	orrs	r3, r2
 800f07c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	68fa      	ldr	r2, [r7, #12]
 800f082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	689a      	ldr	r2, [r3, #8]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	681a      	ldr	r2, [r3, #0]
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	4a16      	ldr	r2, [pc, #88]	; (800f0f0 <TIM_Base_SetConfig+0x12c>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d00f      	beq.n	800f0bc <TIM_Base_SetConfig+0xf8>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4a18      	ldr	r2, [pc, #96]	; (800f100 <TIM_Base_SetConfig+0x13c>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d00b      	beq.n	800f0bc <TIM_Base_SetConfig+0xf8>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	4a17      	ldr	r2, [pc, #92]	; (800f104 <TIM_Base_SetConfig+0x140>)
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	d007      	beq.n	800f0bc <TIM_Base_SetConfig+0xf8>
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	4a16      	ldr	r2, [pc, #88]	; (800f108 <TIM_Base_SetConfig+0x144>)
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d003      	beq.n	800f0bc <TIM_Base_SetConfig+0xf8>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	4a15      	ldr	r2, [pc, #84]	; (800f10c <TIM_Base_SetConfig+0x148>)
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d103      	bne.n	800f0c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	691a      	ldr	r2, [r3, #16]
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	691b      	ldr	r3, [r3, #16]
 800f0ce:	f003 0301 	and.w	r3, r3, #1
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d105      	bne.n	800f0e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	691b      	ldr	r3, [r3, #16]
 800f0da:	f023 0201 	bic.w	r2, r3, #1
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	611a      	str	r2, [r3, #16]
  }
}
 800f0e2:	bf00      	nop
 800f0e4:	3714      	adds	r7, #20
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ec:	4770      	bx	lr
 800f0ee:	bf00      	nop
 800f0f0:	40010000 	.word	0x40010000
 800f0f4:	40000400 	.word	0x40000400
 800f0f8:	40000800 	.word	0x40000800
 800f0fc:	40000c00 	.word	0x40000c00
 800f100:	40010400 	.word	0x40010400
 800f104:	40014000 	.word	0x40014000
 800f108:	40014400 	.word	0x40014400
 800f10c:	40014800 	.word	0x40014800

0800f110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f110:	b480      	push	{r7}
 800f112:	b087      	sub	sp, #28
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6a1b      	ldr	r3, [r3, #32]
 800f11e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6a1b      	ldr	r3, [r3, #32]
 800f124:	f023 0201 	bic.w	r2, r3, #1
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	699b      	ldr	r3, [r3, #24]
 800f136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f138:	68fa      	ldr	r2, [r7, #12]
 800f13a:	4b37      	ldr	r3, [pc, #220]	; (800f218 <TIM_OC1_SetConfig+0x108>)
 800f13c:	4013      	ands	r3, r2
 800f13e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	f023 0303 	bic.w	r3, r3, #3
 800f146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	68fa      	ldr	r2, [r7, #12]
 800f14e:	4313      	orrs	r3, r2
 800f150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	f023 0302 	bic.w	r3, r3, #2
 800f158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	689b      	ldr	r3, [r3, #8]
 800f15e:	697a      	ldr	r2, [r7, #20]
 800f160:	4313      	orrs	r3, r2
 800f162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	4a2d      	ldr	r2, [pc, #180]	; (800f21c <TIM_OC1_SetConfig+0x10c>)
 800f168:	4293      	cmp	r3, r2
 800f16a:	d00f      	beq.n	800f18c <TIM_OC1_SetConfig+0x7c>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	4a2c      	ldr	r2, [pc, #176]	; (800f220 <TIM_OC1_SetConfig+0x110>)
 800f170:	4293      	cmp	r3, r2
 800f172:	d00b      	beq.n	800f18c <TIM_OC1_SetConfig+0x7c>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	4a2b      	ldr	r2, [pc, #172]	; (800f224 <TIM_OC1_SetConfig+0x114>)
 800f178:	4293      	cmp	r3, r2
 800f17a:	d007      	beq.n	800f18c <TIM_OC1_SetConfig+0x7c>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	4a2a      	ldr	r2, [pc, #168]	; (800f228 <TIM_OC1_SetConfig+0x118>)
 800f180:	4293      	cmp	r3, r2
 800f182:	d003      	beq.n	800f18c <TIM_OC1_SetConfig+0x7c>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	4a29      	ldr	r2, [pc, #164]	; (800f22c <TIM_OC1_SetConfig+0x11c>)
 800f188:	4293      	cmp	r3, r2
 800f18a:	d10c      	bne.n	800f1a6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	f023 0308 	bic.w	r3, r3, #8
 800f192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	68db      	ldr	r3, [r3, #12]
 800f198:	697a      	ldr	r2, [r7, #20]
 800f19a:	4313      	orrs	r3, r2
 800f19c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	f023 0304 	bic.w	r3, r3, #4
 800f1a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	4a1c      	ldr	r2, [pc, #112]	; (800f21c <TIM_OC1_SetConfig+0x10c>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d00f      	beq.n	800f1ce <TIM_OC1_SetConfig+0xbe>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	4a1b      	ldr	r2, [pc, #108]	; (800f220 <TIM_OC1_SetConfig+0x110>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d00b      	beq.n	800f1ce <TIM_OC1_SetConfig+0xbe>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4a1a      	ldr	r2, [pc, #104]	; (800f224 <TIM_OC1_SetConfig+0x114>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d007      	beq.n	800f1ce <TIM_OC1_SetConfig+0xbe>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	4a19      	ldr	r2, [pc, #100]	; (800f228 <TIM_OC1_SetConfig+0x118>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d003      	beq.n	800f1ce <TIM_OC1_SetConfig+0xbe>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	4a18      	ldr	r2, [pc, #96]	; (800f22c <TIM_OC1_SetConfig+0x11c>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d111      	bne.n	800f1f2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f1d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f1dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	695b      	ldr	r3, [r3, #20]
 800f1e2:	693a      	ldr	r2, [r7, #16]
 800f1e4:	4313      	orrs	r3, r2
 800f1e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	699b      	ldr	r3, [r3, #24]
 800f1ec:	693a      	ldr	r2, [r7, #16]
 800f1ee:	4313      	orrs	r3, r2
 800f1f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	693a      	ldr	r2, [r7, #16]
 800f1f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	68fa      	ldr	r2, [r7, #12]
 800f1fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	685a      	ldr	r2, [r3, #4]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	697a      	ldr	r2, [r7, #20]
 800f20a:	621a      	str	r2, [r3, #32]
}
 800f20c:	bf00      	nop
 800f20e:	371c      	adds	r7, #28
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr
 800f218:	fffeff8f 	.word	0xfffeff8f
 800f21c:	40010000 	.word	0x40010000
 800f220:	40010400 	.word	0x40010400
 800f224:	40014000 	.word	0x40014000
 800f228:	40014400 	.word	0x40014400
 800f22c:	40014800 	.word	0x40014800

0800f230 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f230:	b480      	push	{r7}
 800f232:	b087      	sub	sp, #28
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6a1b      	ldr	r3, [r3, #32]
 800f23e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6a1b      	ldr	r3, [r3, #32]
 800f244:	f023 0210 	bic.w	r2, r3, #16
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	699b      	ldr	r3, [r3, #24]
 800f256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f258:	68fa      	ldr	r2, [r7, #12]
 800f25a:	4b34      	ldr	r3, [pc, #208]	; (800f32c <TIM_OC2_SetConfig+0xfc>)
 800f25c:	4013      	ands	r3, r2
 800f25e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	021b      	lsls	r3, r3, #8
 800f26e:	68fa      	ldr	r2, [r7, #12]
 800f270:	4313      	orrs	r3, r2
 800f272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	f023 0320 	bic.w	r3, r3, #32
 800f27a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	689b      	ldr	r3, [r3, #8]
 800f280:	011b      	lsls	r3, r3, #4
 800f282:	697a      	ldr	r2, [r7, #20]
 800f284:	4313      	orrs	r3, r2
 800f286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	4a29      	ldr	r2, [pc, #164]	; (800f330 <TIM_OC2_SetConfig+0x100>)
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d003      	beq.n	800f298 <TIM_OC2_SetConfig+0x68>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	4a28      	ldr	r2, [pc, #160]	; (800f334 <TIM_OC2_SetConfig+0x104>)
 800f294:	4293      	cmp	r3, r2
 800f296:	d10d      	bne.n	800f2b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f29e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	68db      	ldr	r3, [r3, #12]
 800f2a4:	011b      	lsls	r3, r3, #4
 800f2a6:	697a      	ldr	r2, [r7, #20]
 800f2a8:	4313      	orrs	r3, r2
 800f2aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	4a1e      	ldr	r2, [pc, #120]	; (800f330 <TIM_OC2_SetConfig+0x100>)
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d00f      	beq.n	800f2dc <TIM_OC2_SetConfig+0xac>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	4a1d      	ldr	r2, [pc, #116]	; (800f334 <TIM_OC2_SetConfig+0x104>)
 800f2c0:	4293      	cmp	r3, r2
 800f2c2:	d00b      	beq.n	800f2dc <TIM_OC2_SetConfig+0xac>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4a1c      	ldr	r2, [pc, #112]	; (800f338 <TIM_OC2_SetConfig+0x108>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d007      	beq.n	800f2dc <TIM_OC2_SetConfig+0xac>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	4a1b      	ldr	r2, [pc, #108]	; (800f33c <TIM_OC2_SetConfig+0x10c>)
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d003      	beq.n	800f2dc <TIM_OC2_SetConfig+0xac>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4a1a      	ldr	r2, [pc, #104]	; (800f340 <TIM_OC2_SetConfig+0x110>)
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d113      	bne.n	800f304 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f2e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f2ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	695b      	ldr	r3, [r3, #20]
 800f2f0:	009b      	lsls	r3, r3, #2
 800f2f2:	693a      	ldr	r2, [r7, #16]
 800f2f4:	4313      	orrs	r3, r2
 800f2f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	699b      	ldr	r3, [r3, #24]
 800f2fc:	009b      	lsls	r3, r3, #2
 800f2fe:	693a      	ldr	r2, [r7, #16]
 800f300:	4313      	orrs	r3, r2
 800f302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	693a      	ldr	r2, [r7, #16]
 800f308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	68fa      	ldr	r2, [r7, #12]
 800f30e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	685a      	ldr	r2, [r3, #4]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	697a      	ldr	r2, [r7, #20]
 800f31c:	621a      	str	r2, [r3, #32]
}
 800f31e:	bf00      	nop
 800f320:	371c      	adds	r7, #28
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr
 800f32a:	bf00      	nop
 800f32c:	feff8fff 	.word	0xfeff8fff
 800f330:	40010000 	.word	0x40010000
 800f334:	40010400 	.word	0x40010400
 800f338:	40014000 	.word	0x40014000
 800f33c:	40014400 	.word	0x40014400
 800f340:	40014800 	.word	0x40014800

0800f344 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f344:	b480      	push	{r7}
 800f346:	b087      	sub	sp, #28
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6a1b      	ldr	r3, [r3, #32]
 800f352:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6a1b      	ldr	r3, [r3, #32]
 800f358:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	69db      	ldr	r3, [r3, #28]
 800f36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f36c:	68fa      	ldr	r2, [r7, #12]
 800f36e:	4b33      	ldr	r3, [pc, #204]	; (800f43c <TIM_OC3_SetConfig+0xf8>)
 800f370:	4013      	ands	r3, r2
 800f372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f023 0303 	bic.w	r3, r3, #3
 800f37a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	68fa      	ldr	r2, [r7, #12]
 800f382:	4313      	orrs	r3, r2
 800f384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f38c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	689b      	ldr	r3, [r3, #8]
 800f392:	021b      	lsls	r3, r3, #8
 800f394:	697a      	ldr	r2, [r7, #20]
 800f396:	4313      	orrs	r3, r2
 800f398:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	4a28      	ldr	r2, [pc, #160]	; (800f440 <TIM_OC3_SetConfig+0xfc>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d003      	beq.n	800f3aa <TIM_OC3_SetConfig+0x66>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	4a27      	ldr	r2, [pc, #156]	; (800f444 <TIM_OC3_SetConfig+0x100>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d10d      	bne.n	800f3c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f3b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	68db      	ldr	r3, [r3, #12]
 800f3b6:	021b      	lsls	r3, r3, #8
 800f3b8:	697a      	ldr	r2, [r7, #20]
 800f3ba:	4313      	orrs	r3, r2
 800f3bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f3c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	4a1d      	ldr	r2, [pc, #116]	; (800f440 <TIM_OC3_SetConfig+0xfc>)
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d00f      	beq.n	800f3ee <TIM_OC3_SetConfig+0xaa>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	4a1c      	ldr	r2, [pc, #112]	; (800f444 <TIM_OC3_SetConfig+0x100>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d00b      	beq.n	800f3ee <TIM_OC3_SetConfig+0xaa>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4a1b      	ldr	r2, [pc, #108]	; (800f448 <TIM_OC3_SetConfig+0x104>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d007      	beq.n	800f3ee <TIM_OC3_SetConfig+0xaa>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	4a1a      	ldr	r2, [pc, #104]	; (800f44c <TIM_OC3_SetConfig+0x108>)
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d003      	beq.n	800f3ee <TIM_OC3_SetConfig+0xaa>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	4a19      	ldr	r2, [pc, #100]	; (800f450 <TIM_OC3_SetConfig+0x10c>)
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d113      	bne.n	800f416 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f3f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f3fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	695b      	ldr	r3, [r3, #20]
 800f402:	011b      	lsls	r3, r3, #4
 800f404:	693a      	ldr	r2, [r7, #16]
 800f406:	4313      	orrs	r3, r2
 800f408:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	699b      	ldr	r3, [r3, #24]
 800f40e:	011b      	lsls	r3, r3, #4
 800f410:	693a      	ldr	r2, [r7, #16]
 800f412:	4313      	orrs	r3, r2
 800f414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	693a      	ldr	r2, [r7, #16]
 800f41a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	68fa      	ldr	r2, [r7, #12]
 800f420:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	685a      	ldr	r2, [r3, #4]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	697a      	ldr	r2, [r7, #20]
 800f42e:	621a      	str	r2, [r3, #32]
}
 800f430:	bf00      	nop
 800f432:	371c      	adds	r7, #28
 800f434:	46bd      	mov	sp, r7
 800f436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43a:	4770      	bx	lr
 800f43c:	fffeff8f 	.word	0xfffeff8f
 800f440:	40010000 	.word	0x40010000
 800f444:	40010400 	.word	0x40010400
 800f448:	40014000 	.word	0x40014000
 800f44c:	40014400 	.word	0x40014400
 800f450:	40014800 	.word	0x40014800

0800f454 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f454:	b480      	push	{r7}
 800f456:	b087      	sub	sp, #28
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6a1b      	ldr	r3, [r3, #32]
 800f462:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6a1b      	ldr	r3, [r3, #32]
 800f468:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	685b      	ldr	r3, [r3, #4]
 800f474:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	69db      	ldr	r3, [r3, #28]
 800f47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f47c:	68fa      	ldr	r2, [r7, #12]
 800f47e:	4b24      	ldr	r3, [pc, #144]	; (800f510 <TIM_OC4_SetConfig+0xbc>)
 800f480:	4013      	ands	r3, r2
 800f482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f48a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	021b      	lsls	r3, r3, #8
 800f492:	68fa      	ldr	r2, [r7, #12]
 800f494:	4313      	orrs	r3, r2
 800f496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f49e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	689b      	ldr	r3, [r3, #8]
 800f4a4:	031b      	lsls	r3, r3, #12
 800f4a6:	693a      	ldr	r2, [r7, #16]
 800f4a8:	4313      	orrs	r3, r2
 800f4aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	4a19      	ldr	r2, [pc, #100]	; (800f514 <TIM_OC4_SetConfig+0xc0>)
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d00f      	beq.n	800f4d4 <TIM_OC4_SetConfig+0x80>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	4a18      	ldr	r2, [pc, #96]	; (800f518 <TIM_OC4_SetConfig+0xc4>)
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d00b      	beq.n	800f4d4 <TIM_OC4_SetConfig+0x80>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	4a17      	ldr	r2, [pc, #92]	; (800f51c <TIM_OC4_SetConfig+0xc8>)
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d007      	beq.n	800f4d4 <TIM_OC4_SetConfig+0x80>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	4a16      	ldr	r2, [pc, #88]	; (800f520 <TIM_OC4_SetConfig+0xcc>)
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d003      	beq.n	800f4d4 <TIM_OC4_SetConfig+0x80>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	4a15      	ldr	r2, [pc, #84]	; (800f524 <TIM_OC4_SetConfig+0xd0>)
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	d109      	bne.n	800f4e8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f4da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	695b      	ldr	r3, [r3, #20]
 800f4e0:	019b      	lsls	r3, r3, #6
 800f4e2:	697a      	ldr	r2, [r7, #20]
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	697a      	ldr	r2, [r7, #20]
 800f4ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	68fa      	ldr	r2, [r7, #12]
 800f4f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	685a      	ldr	r2, [r3, #4]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	693a      	ldr	r2, [r7, #16]
 800f500:	621a      	str	r2, [r3, #32]
}
 800f502:	bf00      	nop
 800f504:	371c      	adds	r7, #28
 800f506:	46bd      	mov	sp, r7
 800f508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50c:	4770      	bx	lr
 800f50e:	bf00      	nop
 800f510:	feff8fff 	.word	0xfeff8fff
 800f514:	40010000 	.word	0x40010000
 800f518:	40010400 	.word	0x40010400
 800f51c:	40014000 	.word	0x40014000
 800f520:	40014400 	.word	0x40014400
 800f524:	40014800 	.word	0x40014800

0800f528 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f528:	b480      	push	{r7}
 800f52a:	b087      	sub	sp, #28
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6a1b      	ldr	r3, [r3, #32]
 800f536:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6a1b      	ldr	r3, [r3, #32]
 800f53c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	685b      	ldr	r3, [r3, #4]
 800f548:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f54e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f550:	68fa      	ldr	r2, [r7, #12]
 800f552:	4b21      	ldr	r3, [pc, #132]	; (800f5d8 <TIM_OC5_SetConfig+0xb0>)
 800f554:	4013      	ands	r3, r2
 800f556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	68fa      	ldr	r2, [r7, #12]
 800f55e:	4313      	orrs	r3, r2
 800f560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f568:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	689b      	ldr	r3, [r3, #8]
 800f56e:	041b      	lsls	r3, r3, #16
 800f570:	693a      	ldr	r2, [r7, #16]
 800f572:	4313      	orrs	r3, r2
 800f574:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	4a18      	ldr	r2, [pc, #96]	; (800f5dc <TIM_OC5_SetConfig+0xb4>)
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d00f      	beq.n	800f59e <TIM_OC5_SetConfig+0x76>
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	4a17      	ldr	r2, [pc, #92]	; (800f5e0 <TIM_OC5_SetConfig+0xb8>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d00b      	beq.n	800f59e <TIM_OC5_SetConfig+0x76>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	4a16      	ldr	r2, [pc, #88]	; (800f5e4 <TIM_OC5_SetConfig+0xbc>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d007      	beq.n	800f59e <TIM_OC5_SetConfig+0x76>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	4a15      	ldr	r2, [pc, #84]	; (800f5e8 <TIM_OC5_SetConfig+0xc0>)
 800f592:	4293      	cmp	r3, r2
 800f594:	d003      	beq.n	800f59e <TIM_OC5_SetConfig+0x76>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	4a14      	ldr	r2, [pc, #80]	; (800f5ec <TIM_OC5_SetConfig+0xc4>)
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d109      	bne.n	800f5b2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f5a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	695b      	ldr	r3, [r3, #20]
 800f5aa:	021b      	lsls	r3, r3, #8
 800f5ac:	697a      	ldr	r2, [r7, #20]
 800f5ae:	4313      	orrs	r3, r2
 800f5b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	697a      	ldr	r2, [r7, #20]
 800f5b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	68fa      	ldr	r2, [r7, #12]
 800f5bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	685a      	ldr	r2, [r3, #4]
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	693a      	ldr	r2, [r7, #16]
 800f5ca:	621a      	str	r2, [r3, #32]
}
 800f5cc:	bf00      	nop
 800f5ce:	371c      	adds	r7, #28
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d6:	4770      	bx	lr
 800f5d8:	fffeff8f 	.word	0xfffeff8f
 800f5dc:	40010000 	.word	0x40010000
 800f5e0:	40010400 	.word	0x40010400
 800f5e4:	40014000 	.word	0x40014000
 800f5e8:	40014400 	.word	0x40014400
 800f5ec:	40014800 	.word	0x40014800

0800f5f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b087      	sub	sp, #28
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6a1b      	ldr	r3, [r3, #32]
 800f5fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	6a1b      	ldr	r3, [r3, #32]
 800f604:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	685b      	ldr	r3, [r3, #4]
 800f610:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f618:	68fa      	ldr	r2, [r7, #12]
 800f61a:	4b22      	ldr	r3, [pc, #136]	; (800f6a4 <TIM_OC6_SetConfig+0xb4>)
 800f61c:	4013      	ands	r3, r2
 800f61e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	021b      	lsls	r3, r3, #8
 800f626:	68fa      	ldr	r2, [r7, #12]
 800f628:	4313      	orrs	r3, r2
 800f62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f62c:	693b      	ldr	r3, [r7, #16]
 800f62e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	689b      	ldr	r3, [r3, #8]
 800f638:	051b      	lsls	r3, r3, #20
 800f63a:	693a      	ldr	r2, [r7, #16]
 800f63c:	4313      	orrs	r3, r2
 800f63e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	4a19      	ldr	r2, [pc, #100]	; (800f6a8 <TIM_OC6_SetConfig+0xb8>)
 800f644:	4293      	cmp	r3, r2
 800f646:	d00f      	beq.n	800f668 <TIM_OC6_SetConfig+0x78>
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	4a18      	ldr	r2, [pc, #96]	; (800f6ac <TIM_OC6_SetConfig+0xbc>)
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d00b      	beq.n	800f668 <TIM_OC6_SetConfig+0x78>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	4a17      	ldr	r2, [pc, #92]	; (800f6b0 <TIM_OC6_SetConfig+0xc0>)
 800f654:	4293      	cmp	r3, r2
 800f656:	d007      	beq.n	800f668 <TIM_OC6_SetConfig+0x78>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	4a16      	ldr	r2, [pc, #88]	; (800f6b4 <TIM_OC6_SetConfig+0xc4>)
 800f65c:	4293      	cmp	r3, r2
 800f65e:	d003      	beq.n	800f668 <TIM_OC6_SetConfig+0x78>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	4a15      	ldr	r2, [pc, #84]	; (800f6b8 <TIM_OC6_SetConfig+0xc8>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d109      	bne.n	800f67c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f66e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	695b      	ldr	r3, [r3, #20]
 800f674:	029b      	lsls	r3, r3, #10
 800f676:	697a      	ldr	r2, [r7, #20]
 800f678:	4313      	orrs	r3, r2
 800f67a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	697a      	ldr	r2, [r7, #20]
 800f680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	68fa      	ldr	r2, [r7, #12]
 800f686:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	685a      	ldr	r2, [r3, #4]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	693a      	ldr	r2, [r7, #16]
 800f694:	621a      	str	r2, [r3, #32]
}
 800f696:	bf00      	nop
 800f698:	371c      	adds	r7, #28
 800f69a:	46bd      	mov	sp, r7
 800f69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a0:	4770      	bx	lr
 800f6a2:	bf00      	nop
 800f6a4:	feff8fff 	.word	0xfeff8fff
 800f6a8:	40010000 	.word	0x40010000
 800f6ac:	40010400 	.word	0x40010400
 800f6b0:	40014000 	.word	0x40014000
 800f6b4:	40014400 	.word	0x40014400
 800f6b8:	40014800 	.word	0x40014800

0800f6bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b087      	sub	sp, #28
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	60b9      	str	r1, [r7, #8]
 800f6c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	6a1b      	ldr	r3, [r3, #32]
 800f6cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	6a1b      	ldr	r3, [r3, #32]
 800f6d2:	f023 0201 	bic.w	r2, r3, #1
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	699b      	ldr	r3, [r3, #24]
 800f6de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f6e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	011b      	lsls	r3, r3, #4
 800f6ec:	693a      	ldr	r2, [r7, #16]
 800f6ee:	4313      	orrs	r3, r2
 800f6f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	f023 030a 	bic.w	r3, r3, #10
 800f6f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f6fa:	697a      	ldr	r2, [r7, #20]
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	4313      	orrs	r3, r2
 800f700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	693a      	ldr	r2, [r7, #16]
 800f706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	697a      	ldr	r2, [r7, #20]
 800f70c:	621a      	str	r2, [r3, #32]
}
 800f70e:	bf00      	nop
 800f710:	371c      	adds	r7, #28
 800f712:	46bd      	mov	sp, r7
 800f714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f718:	4770      	bx	lr

0800f71a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f71a:	b480      	push	{r7}
 800f71c:	b087      	sub	sp, #28
 800f71e:	af00      	add	r7, sp, #0
 800f720:	60f8      	str	r0, [r7, #12]
 800f722:	60b9      	str	r1, [r7, #8]
 800f724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	6a1b      	ldr	r3, [r3, #32]
 800f72a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	6a1b      	ldr	r3, [r3, #32]
 800f730:	f023 0210 	bic.w	r2, r3, #16
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	699b      	ldr	r3, [r3, #24]
 800f73c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f73e:	693b      	ldr	r3, [r7, #16]
 800f740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f744:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	031b      	lsls	r3, r3, #12
 800f74a:	693a      	ldr	r2, [r7, #16]
 800f74c:	4313      	orrs	r3, r2
 800f74e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f756:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	011b      	lsls	r3, r3, #4
 800f75c:	697a      	ldr	r2, [r7, #20]
 800f75e:	4313      	orrs	r3, r2
 800f760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	693a      	ldr	r2, [r7, #16]
 800f766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	697a      	ldr	r2, [r7, #20]
 800f76c:	621a      	str	r2, [r3, #32]
}
 800f76e:	bf00      	nop
 800f770:	371c      	adds	r7, #28
 800f772:	46bd      	mov	sp, r7
 800f774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f778:	4770      	bx	lr
	...

0800f77c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b085      	sub	sp, #20
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	689b      	ldr	r3, [r3, #8]
 800f78a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f78c:	68fa      	ldr	r2, [r7, #12]
 800f78e:	4b09      	ldr	r3, [pc, #36]	; (800f7b4 <TIM_ITRx_SetConfig+0x38>)
 800f790:	4013      	ands	r3, r2
 800f792:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f794:	683a      	ldr	r2, [r7, #0]
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	4313      	orrs	r3, r2
 800f79a:	f043 0307 	orr.w	r3, r3, #7
 800f79e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	68fa      	ldr	r2, [r7, #12]
 800f7a4:	609a      	str	r2, [r3, #8]
}
 800f7a6:	bf00      	nop
 800f7a8:	3714      	adds	r7, #20
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr
 800f7b2:	bf00      	nop
 800f7b4:	ffcfff8f 	.word	0xffcfff8f

0800f7b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	b087      	sub	sp, #28
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	60b9      	str	r1, [r7, #8]
 800f7c2:	607a      	str	r2, [r7, #4]
 800f7c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	689b      	ldr	r3, [r3, #8]
 800f7ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f7d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	021a      	lsls	r2, r3, #8
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	431a      	orrs	r2, r3
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	4313      	orrs	r3, r2
 800f7e0:	697a      	ldr	r2, [r7, #20]
 800f7e2:	4313      	orrs	r3, r2
 800f7e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	697a      	ldr	r2, [r7, #20]
 800f7ea:	609a      	str	r2, [r3, #8]
}
 800f7ec:	bf00      	nop
 800f7ee:	371c      	adds	r7, #28
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr

0800f7f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f7f8:	b480      	push	{r7}
 800f7fa:	b087      	sub	sp, #28
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	60f8      	str	r0, [r7, #12]
 800f800:	60b9      	str	r1, [r7, #8]
 800f802:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	f003 031f 	and.w	r3, r3, #31
 800f80a:	2201      	movs	r2, #1
 800f80c:	fa02 f303 	lsl.w	r3, r2, r3
 800f810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	6a1a      	ldr	r2, [r3, #32]
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	43db      	mvns	r3, r3
 800f81a:	401a      	ands	r2, r3
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	6a1a      	ldr	r2, [r3, #32]
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	f003 031f 	and.w	r3, r3, #31
 800f82a:	6879      	ldr	r1, [r7, #4]
 800f82c:	fa01 f303 	lsl.w	r3, r1, r3
 800f830:	431a      	orrs	r2, r3
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	621a      	str	r2, [r3, #32]
}
 800f836:	bf00      	nop
 800f838:	371c      	adds	r7, #28
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr
	...

0800f844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f844:	b480      	push	{r7}
 800f846:	b085      	sub	sp, #20
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f854:	2b01      	cmp	r3, #1
 800f856:	d101      	bne.n	800f85c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f858:	2302      	movs	r3, #2
 800f85a:	e06d      	b.n	800f938 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2201      	movs	r2, #1
 800f860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2202      	movs	r2, #2
 800f868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	689b      	ldr	r3, [r3, #8]
 800f87a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	4a30      	ldr	r2, [pc, #192]	; (800f944 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f882:	4293      	cmp	r3, r2
 800f884:	d004      	beq.n	800f890 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	4a2f      	ldr	r2, [pc, #188]	; (800f948 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d108      	bne.n	800f8a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f896:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	68fa      	ldr	r2, [r7, #12]
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	68fa      	ldr	r2, [r7, #12]
 800f8b0:	4313      	orrs	r3, r2
 800f8b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	68fa      	ldr	r2, [r7, #12]
 800f8ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4a20      	ldr	r2, [pc, #128]	; (800f944 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d022      	beq.n	800f90c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8ce:	d01d      	beq.n	800f90c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	4a1d      	ldr	r2, [pc, #116]	; (800f94c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d018      	beq.n	800f90c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	4a1c      	ldr	r2, [pc, #112]	; (800f950 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d013      	beq.n	800f90c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	4a1a      	ldr	r2, [pc, #104]	; (800f954 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d00e      	beq.n	800f90c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	4a15      	ldr	r2, [pc, #84]	; (800f948 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f8f4:	4293      	cmp	r3, r2
 800f8f6:	d009      	beq.n	800f90c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	4a16      	ldr	r2, [pc, #88]	; (800f958 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f8fe:	4293      	cmp	r3, r2
 800f900:	d004      	beq.n	800f90c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	4a15      	ldr	r2, [pc, #84]	; (800f95c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f908:	4293      	cmp	r3, r2
 800f90a:	d10c      	bne.n	800f926 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f912:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	689b      	ldr	r3, [r3, #8]
 800f918:	68ba      	ldr	r2, [r7, #8]
 800f91a:	4313      	orrs	r3, r2
 800f91c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	68ba      	ldr	r2, [r7, #8]
 800f924:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2201      	movs	r2, #1
 800f92a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2200      	movs	r2, #0
 800f932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f936:	2300      	movs	r3, #0
}
 800f938:	4618      	mov	r0, r3
 800f93a:	3714      	adds	r7, #20
 800f93c:	46bd      	mov	sp, r7
 800f93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f942:	4770      	bx	lr
 800f944:	40010000 	.word	0x40010000
 800f948:	40010400 	.word	0x40010400
 800f94c:	40000400 	.word	0x40000400
 800f950:	40000800 	.word	0x40000800
 800f954:	40000c00 	.word	0x40000c00
 800f958:	40001800 	.word	0x40001800
 800f95c:	40014000 	.word	0x40014000

0800f960 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f960:	b480      	push	{r7}
 800f962:	b085      	sub	sp, #20
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f96a:	2300      	movs	r3, #0
 800f96c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f974:	2b01      	cmp	r3, #1
 800f976:	d101      	bne.n	800f97c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f978:	2302      	movs	r3, #2
 800f97a:	e065      	b.n	800fa48 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2201      	movs	r2, #1
 800f980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	68db      	ldr	r3, [r3, #12]
 800f98e:	4313      	orrs	r3, r2
 800f990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	689b      	ldr	r3, [r3, #8]
 800f99c:	4313      	orrs	r3, r2
 800f99e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	685b      	ldr	r3, [r3, #4]
 800f9aa:	4313      	orrs	r3, r2
 800f9ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4313      	orrs	r3, r2
 800f9ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	691b      	ldr	r3, [r3, #16]
 800f9c6:	4313      	orrs	r3, r2
 800f9c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	695b      	ldr	r3, [r3, #20]
 800f9d4:	4313      	orrs	r3, r2
 800f9d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	699b      	ldr	r3, [r3, #24]
 800f9f0:	041b      	lsls	r3, r3, #16
 800f9f2:	4313      	orrs	r3, r2
 800f9f4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	4a16      	ldr	r2, [pc, #88]	; (800fa54 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	d004      	beq.n	800fa0a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4a14      	ldr	r2, [pc, #80]	; (800fa58 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d115      	bne.n	800fa36 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa14:	051b      	lsls	r3, r3, #20
 800fa16:	4313      	orrs	r3, r2
 800fa18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	69db      	ldr	r3, [r3, #28]
 800fa24:	4313      	orrs	r3, r2
 800fa26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	6a1b      	ldr	r3, [r3, #32]
 800fa32:	4313      	orrs	r3, r2
 800fa34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	68fa      	ldr	r2, [r7, #12]
 800fa3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2200      	movs	r2, #0
 800fa42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fa46:	2300      	movs	r3, #0
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3714      	adds	r7, #20
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr
 800fa54:	40010000 	.word	0x40010000
 800fa58:	40010400 	.word	0x40010400

0800fa5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b083      	sub	sp, #12
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fa64:	bf00      	nop
 800fa66:	370c      	adds	r7, #12
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr

0800fa70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b083      	sub	sp, #12
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fa78:	bf00      	nop
 800fa7a:	370c      	adds	r7, #12
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr

0800fa84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b083      	sub	sp, #12
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fa8c:	bf00      	nop
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d101      	bne.n	800faaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800faa6:	2301      	movs	r3, #1
 800faa8:	e042      	b.n	800fb30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d106      	bne.n	800fac2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2200      	movs	r2, #0
 800fab8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f7f3 fc49 	bl	8003354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2224      	movs	r2, #36	; 0x24
 800fac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	681a      	ldr	r2, [r3, #0]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f022 0201 	bic.w	r2, r2, #1
 800fad8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d002      	beq.n	800fae8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f001 fb8c 	bl	8011200 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f000 fe21 	bl	8010730 <UART_SetConfig>
 800faee:	4603      	mov	r3, r0
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	d101      	bne.n	800faf8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800faf4:	2301      	movs	r3, #1
 800faf6:	e01b      	b.n	800fb30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	685a      	ldr	r2, [r3, #4]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fb06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	689a      	ldr	r2, [r3, #8]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fb16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	f042 0201 	orr.w	r2, r2, #1
 800fb26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f001 fc0b 	bl	8011344 <UART_CheckIdleState>
 800fb2e:	4603      	mov	r3, r0
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b08a      	sub	sp, #40	; 0x28
 800fb3c:	af02      	add	r7, sp, #8
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	60b9      	str	r1, [r7, #8]
 800fb42:	603b      	str	r3, [r7, #0]
 800fb44:	4613      	mov	r3, r2
 800fb46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb4e:	2b20      	cmp	r3, #32
 800fb50:	d17b      	bne.n	800fc4a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d002      	beq.n	800fb5e <HAL_UART_Transmit+0x26>
 800fb58:	88fb      	ldrh	r3, [r7, #6]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d101      	bne.n	800fb62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fb5e:	2301      	movs	r3, #1
 800fb60:	e074      	b.n	800fc4c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	2200      	movs	r2, #0
 800fb66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2221      	movs	r2, #33	; 0x21
 800fb6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fb72:	f7f3 ff63 	bl	8003a3c <HAL_GetTick>
 800fb76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	88fa      	ldrh	r2, [r7, #6]
 800fb7c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	88fa      	ldrh	r2, [r7, #6]
 800fb84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	689b      	ldr	r3, [r3, #8]
 800fb8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb90:	d108      	bne.n	800fba4 <HAL_UART_Transmit+0x6c>
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	691b      	ldr	r3, [r3, #16]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d104      	bne.n	800fba4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	61bb      	str	r3, [r7, #24]
 800fba2:	e003      	b.n	800fbac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fbac:	e030      	b.n	800fc10 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	9300      	str	r3, [sp, #0]
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	2180      	movs	r1, #128	; 0x80
 800fbb8:	68f8      	ldr	r0, [r7, #12]
 800fbba:	f001 fc6d 	bl	8011498 <UART_WaitOnFlagUntilTimeout>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d005      	beq.n	800fbd0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	2220      	movs	r2, #32
 800fbc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800fbcc:	2303      	movs	r3, #3
 800fbce:	e03d      	b.n	800fc4c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800fbd0:	69fb      	ldr	r3, [r7, #28]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d10b      	bne.n	800fbee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	881b      	ldrh	r3, [r3, #0]
 800fbda:	461a      	mov	r2, r3
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fbe4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fbe6:	69bb      	ldr	r3, [r7, #24]
 800fbe8:	3302      	adds	r3, #2
 800fbea:	61bb      	str	r3, [r7, #24]
 800fbec:	e007      	b.n	800fbfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fbee:	69fb      	ldr	r3, [r7, #28]
 800fbf0:	781a      	ldrb	r2, [r3, #0]
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fbf8:	69fb      	ldr	r3, [r7, #28]
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	3b01      	subs	r3, #1
 800fc08:	b29a      	uxth	r2, r3
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d1c8      	bne.n	800fbae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	9300      	str	r3, [sp, #0]
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	2200      	movs	r2, #0
 800fc24:	2140      	movs	r1, #64	; 0x40
 800fc26:	68f8      	ldr	r0, [r7, #12]
 800fc28:	f001 fc36 	bl	8011498 <UART_WaitOnFlagUntilTimeout>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d005      	beq.n	800fc3e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	2220      	movs	r2, #32
 800fc36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800fc3a:	2303      	movs	r3, #3
 800fc3c:	e006      	b.n	800fc4c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2220      	movs	r2, #32
 800fc42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fc46:	2300      	movs	r3, #0
 800fc48:	e000      	b.n	800fc4c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800fc4a:	2302      	movs	r3, #2
  }
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	3720      	adds	r7, #32
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}

0800fc54 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b08a      	sub	sp, #40	; 0x28
 800fc58:	af02      	add	r7, sp, #8
 800fc5a:	60f8      	str	r0, [r7, #12]
 800fc5c:	60b9      	str	r1, [r7, #8]
 800fc5e:	603b      	str	r3, [r7, #0]
 800fc60:	4613      	mov	r3, r2
 800fc62:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc6a:	2b20      	cmp	r3, #32
 800fc6c:	f040 80b5 	bne.w	800fdda <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d002      	beq.n	800fc7c <HAL_UART_Receive+0x28>
 800fc76:	88fb      	ldrh	r3, [r7, #6]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d101      	bne.n	800fc80 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	e0ad      	b.n	800fddc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	2200      	movs	r2, #0
 800fc84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2222      	movs	r2, #34	; 0x22
 800fc8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	2200      	movs	r2, #0
 800fc94:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fc96:	f7f3 fed1 	bl	8003a3c <HAL_GetTick>
 800fc9a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	88fa      	ldrh	r2, [r7, #6]
 800fca0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	88fa      	ldrh	r2, [r7, #6]
 800fca8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	689b      	ldr	r3, [r3, #8]
 800fcb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fcb4:	d10e      	bne.n	800fcd4 <HAL_UART_Receive+0x80>
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	691b      	ldr	r3, [r3, #16]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d105      	bne.n	800fcca <HAL_UART_Receive+0x76>
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fcc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcc8:	e02d      	b.n	800fd26 <HAL_UART_Receive+0xd2>
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	22ff      	movs	r2, #255	; 0xff
 800fcce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcd2:	e028      	b.n	800fd26 <HAL_UART_Receive+0xd2>
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	689b      	ldr	r3, [r3, #8]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d10d      	bne.n	800fcf8 <HAL_UART_Receive+0xa4>
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	691b      	ldr	r3, [r3, #16]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d104      	bne.n	800fcee <HAL_UART_Receive+0x9a>
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	22ff      	movs	r2, #255	; 0xff
 800fce8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcec:	e01b      	b.n	800fd26 <HAL_UART_Receive+0xd2>
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	227f      	movs	r2, #127	; 0x7f
 800fcf2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcf6:	e016      	b.n	800fd26 <HAL_UART_Receive+0xd2>
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	689b      	ldr	r3, [r3, #8]
 800fcfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fd00:	d10d      	bne.n	800fd1e <HAL_UART_Receive+0xca>
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	691b      	ldr	r3, [r3, #16]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d104      	bne.n	800fd14 <HAL_UART_Receive+0xc0>
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	227f      	movs	r2, #127	; 0x7f
 800fd0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd12:	e008      	b.n	800fd26 <HAL_UART_Receive+0xd2>
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	223f      	movs	r2, #63	; 0x3f
 800fd18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd1c:	e003      	b.n	800fd26 <HAL_UART_Receive+0xd2>
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	2200      	movs	r2, #0
 800fd22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd2c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	689b      	ldr	r3, [r3, #8]
 800fd32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd36:	d108      	bne.n	800fd4a <HAL_UART_Receive+0xf6>
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	691b      	ldr	r3, [r3, #16]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d104      	bne.n	800fd4a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800fd40:	2300      	movs	r3, #0
 800fd42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	61bb      	str	r3, [r7, #24]
 800fd48:	e003      	b.n	800fd52 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800fd52:	e036      	b.n	800fdc2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	9300      	str	r3, [sp, #0]
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	2120      	movs	r1, #32
 800fd5e:	68f8      	ldr	r0, [r7, #12]
 800fd60:	f001 fb9a 	bl	8011498 <UART_WaitOnFlagUntilTimeout>
 800fd64:	4603      	mov	r3, r0
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d005      	beq.n	800fd76 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2220      	movs	r2, #32
 800fd6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800fd72:	2303      	movs	r3, #3
 800fd74:	e032      	b.n	800fddc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d10c      	bne.n	800fd96 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd82:	b29a      	uxth	r2, r3
 800fd84:	8a7b      	ldrh	r3, [r7, #18]
 800fd86:	4013      	ands	r3, r2
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	69bb      	ldr	r3, [r7, #24]
 800fd8c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fd8e:	69bb      	ldr	r3, [r7, #24]
 800fd90:	3302      	adds	r3, #2
 800fd92:	61bb      	str	r3, [r7, #24]
 800fd94:	e00c      	b.n	800fdb0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd9c:	b2da      	uxtb	r2, r3
 800fd9e:	8a7b      	ldrh	r3, [r7, #18]
 800fda0:	b2db      	uxtb	r3, r3
 800fda2:	4013      	ands	r3, r2
 800fda4:	b2da      	uxtb	r2, r3
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800fdaa:	69fb      	ldr	r3, [r7, #28]
 800fdac:	3301      	adds	r3, #1
 800fdae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	3b01      	subs	r3, #1
 800fdba:	b29a      	uxth	r2, r3
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdc8:	b29b      	uxth	r3, r3
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d1c2      	bne.n	800fd54 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	2220      	movs	r2, #32
 800fdd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	e000      	b.n	800fddc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800fdda:	2302      	movs	r3, #2
  }
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3720      	adds	r7, #32
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b08a      	sub	sp, #40	; 0x28
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	4613      	mov	r3, r2
 800fdf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdf8:	2b20      	cmp	r3, #32
 800fdfa:	d137      	bne.n	800fe6c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d002      	beq.n	800fe08 <HAL_UART_Receive_IT+0x24>
 800fe02:	88fb      	ldrh	r3, [r7, #6]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d101      	bne.n	800fe0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	e030      	b.n	800fe6e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	4a18      	ldr	r2, [pc, #96]	; (800fe78 <HAL_UART_Receive_IT+0x94>)
 800fe18:	4293      	cmp	r3, r2
 800fe1a:	d01f      	beq.n	800fe5c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d018      	beq.n	800fe5c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	e853 3f00 	ldrex	r3, [r3]
 800fe36:	613b      	str	r3, [r7, #16]
   return(result);
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fe3e:	627b      	str	r3, [r7, #36]	; 0x24
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	461a      	mov	r2, r3
 800fe46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe48:	623b      	str	r3, [r7, #32]
 800fe4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe4c:	69f9      	ldr	r1, [r7, #28]
 800fe4e:	6a3a      	ldr	r2, [r7, #32]
 800fe50:	e841 2300 	strex	r3, r2, [r1]
 800fe54:	61bb      	str	r3, [r7, #24]
   return(result);
 800fe56:	69bb      	ldr	r3, [r7, #24]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d1e6      	bne.n	800fe2a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800fe5c:	88fb      	ldrh	r3, [r7, #6]
 800fe5e:	461a      	mov	r2, r3
 800fe60:	68b9      	ldr	r1, [r7, #8]
 800fe62:	68f8      	ldr	r0, [r7, #12]
 800fe64:	f001 fb86 	bl	8011574 <UART_Start_Receive_IT>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	e000      	b.n	800fe6e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fe6c:	2302      	movs	r3, #2
  }
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3728      	adds	r7, #40	; 0x28
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	58000c00 	.word	0x58000c00

0800fe7c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b08a      	sub	sp, #40	; 0x28
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	60f8      	str	r0, [r7, #12]
 800fe84:	60b9      	str	r1, [r7, #8]
 800fe86:	4613      	mov	r3, r2
 800fe88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe90:	2b20      	cmp	r3, #32
 800fe92:	d167      	bne.n	800ff64 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d002      	beq.n	800fea0 <HAL_UART_Transmit_DMA+0x24>
 800fe9a:	88fb      	ldrh	r3, [r7, #6]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d101      	bne.n	800fea4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800fea0:	2301      	movs	r3, #1
 800fea2:	e060      	b.n	800ff66 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	68ba      	ldr	r2, [r7, #8]
 800fea8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	88fa      	ldrh	r2, [r7, #6]
 800feae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	88fa      	ldrh	r2, [r7, #6]
 800feb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	2200      	movs	r2, #0
 800febe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2221      	movs	r2, #33	; 0x21
 800fec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d028      	beq.n	800ff24 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fed6:	4a26      	ldr	r2, [pc, #152]	; (800ff70 <HAL_UART_Transmit_DMA+0xf4>)
 800fed8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fede:	4a25      	ldr	r2, [pc, #148]	; (800ff74 <HAL_UART_Transmit_DMA+0xf8>)
 800fee0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fee6:	4a24      	ldr	r2, [pc, #144]	; (800ff78 <HAL_UART_Transmit_DMA+0xfc>)
 800fee8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800feee:	2200      	movs	r2, #0
 800fef0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fefa:	4619      	mov	r1, r3
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	3328      	adds	r3, #40	; 0x28
 800ff02:	461a      	mov	r2, r3
 800ff04:	88fb      	ldrh	r3, [r7, #6]
 800ff06:	f7f6 fa1d 	bl	8006344 <HAL_DMA_Start_IT>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d009      	beq.n	800ff24 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	2210      	movs	r2, #16
 800ff14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	2220      	movs	r2, #32
 800ff1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800ff20:	2301      	movs	r3, #1
 800ff22:	e020      	b.n	800ff66 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	2240      	movs	r2, #64	; 0x40
 800ff2a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	3308      	adds	r3, #8
 800ff32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	e853 3f00 	ldrex	r3, [r3]
 800ff3a:	613b      	str	r3, [r7, #16]
   return(result);
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff42:	627b      	str	r3, [r7, #36]	; 0x24
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	3308      	adds	r3, #8
 800ff4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff4c:	623a      	str	r2, [r7, #32]
 800ff4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff50:	69f9      	ldr	r1, [r7, #28]
 800ff52:	6a3a      	ldr	r2, [r7, #32]
 800ff54:	e841 2300 	strex	r3, r2, [r1]
 800ff58:	61bb      	str	r3, [r7, #24]
   return(result);
 800ff5a:	69bb      	ldr	r3, [r7, #24]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d1e5      	bne.n	800ff2c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ff60:	2300      	movs	r3, #0
 800ff62:	e000      	b.n	800ff66 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ff64:	2302      	movs	r3, #2
  }
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3728      	adds	r7, #40	; 0x28
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	08011909 	.word	0x08011909
 800ff74:	0801199f 	.word	0x0801199f
 800ff78:	080119bb 	.word	0x080119bb

0800ff7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b0ba      	sub	sp, #232	; 0xe8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	69db      	ldr	r3, [r3, #28]
 800ff8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	689b      	ldr	r3, [r3, #8]
 800ff9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ffa2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ffa6:	f640 030f 	movw	r3, #2063	; 0x80f
 800ffaa:	4013      	ands	r3, r2
 800ffac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ffb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d11b      	bne.n	800fff0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ffb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffbc:	f003 0320 	and.w	r3, r3, #32
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d015      	beq.n	800fff0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ffc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ffc8:	f003 0320 	and.w	r3, r3, #32
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d105      	bne.n	800ffdc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ffd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ffd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d009      	beq.n	800fff0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	f000 8377 	beq.w	80106d4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	4798      	blx	r3
      }
      return;
 800ffee:	e371      	b.n	80106d4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	f000 8123 	beq.w	8010240 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fffa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800fffe:	4b8d      	ldr	r3, [pc, #564]	; (8010234 <HAL_UART_IRQHandler+0x2b8>)
 8010000:	4013      	ands	r3, r2
 8010002:	2b00      	cmp	r3, #0
 8010004:	d106      	bne.n	8010014 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010006:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801000a:	4b8b      	ldr	r3, [pc, #556]	; (8010238 <HAL_UART_IRQHandler+0x2bc>)
 801000c:	4013      	ands	r3, r2
 801000e:	2b00      	cmp	r3, #0
 8010010:	f000 8116 	beq.w	8010240 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010018:	f003 0301 	and.w	r3, r3, #1
 801001c:	2b00      	cmp	r3, #0
 801001e:	d011      	beq.n	8010044 <HAL_UART_IRQHandler+0xc8>
 8010020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010028:	2b00      	cmp	r3, #0
 801002a:	d00b      	beq.n	8010044 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	2201      	movs	r2, #1
 8010032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801003a:	f043 0201 	orr.w	r2, r3, #1
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010048:	f003 0302 	and.w	r3, r3, #2
 801004c:	2b00      	cmp	r3, #0
 801004e:	d011      	beq.n	8010074 <HAL_UART_IRQHandler+0xf8>
 8010050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010054:	f003 0301 	and.w	r3, r3, #1
 8010058:	2b00      	cmp	r3, #0
 801005a:	d00b      	beq.n	8010074 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	2202      	movs	r2, #2
 8010062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801006a:	f043 0204 	orr.w	r2, r3, #4
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010078:	f003 0304 	and.w	r3, r3, #4
 801007c:	2b00      	cmp	r3, #0
 801007e:	d011      	beq.n	80100a4 <HAL_UART_IRQHandler+0x128>
 8010080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010084:	f003 0301 	and.w	r3, r3, #1
 8010088:	2b00      	cmp	r3, #0
 801008a:	d00b      	beq.n	80100a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	2204      	movs	r2, #4
 8010092:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801009a:	f043 0202 	orr.w	r2, r3, #2
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80100a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100a8:	f003 0308 	and.w	r3, r3, #8
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d017      	beq.n	80100e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80100b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100b4:	f003 0320 	and.w	r3, r3, #32
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d105      	bne.n	80100c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80100bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80100c0:	4b5c      	ldr	r3, [pc, #368]	; (8010234 <HAL_UART_IRQHandler+0x2b8>)
 80100c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d00b      	beq.n	80100e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	2208      	movs	r2, #8
 80100ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100d6:	f043 0208 	orr.w	r2, r3, #8
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80100e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d012      	beq.n	8010112 <HAL_UART_IRQHandler+0x196>
 80100ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d00c      	beq.n	8010112 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010100:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010108:	f043 0220 	orr.w	r2, r3, #32
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010118:	2b00      	cmp	r3, #0
 801011a:	f000 82dd 	beq.w	80106d8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801011e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010122:	f003 0320 	and.w	r3, r3, #32
 8010126:	2b00      	cmp	r3, #0
 8010128:	d013      	beq.n	8010152 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801012a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801012e:	f003 0320 	and.w	r3, r3, #32
 8010132:	2b00      	cmp	r3, #0
 8010134:	d105      	bne.n	8010142 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801013a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801013e:	2b00      	cmp	r3, #0
 8010140:	d007      	beq.n	8010152 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010146:	2b00      	cmp	r3, #0
 8010148:	d003      	beq.n	8010152 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010158:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	689b      	ldr	r3, [r3, #8]
 8010162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010166:	2b40      	cmp	r3, #64	; 0x40
 8010168:	d005      	beq.n	8010176 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801016a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801016e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010172:	2b00      	cmp	r3, #0
 8010174:	d054      	beq.n	8010220 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f001 fb60 	bl	801183c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	689b      	ldr	r3, [r3, #8]
 8010182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010186:	2b40      	cmp	r3, #64	; 0x40
 8010188:	d146      	bne.n	8010218 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	3308      	adds	r3, #8
 8010190:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010194:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010198:	e853 3f00 	ldrex	r3, [r3]
 801019c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80101a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80101a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	3308      	adds	r3, #8
 80101b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80101b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80101ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80101c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80101c6:	e841 2300 	strex	r3, r2, [r1]
 80101ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80101ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d1d9      	bne.n	801018a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d017      	beq.n	8010210 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101e6:	4a15      	ldr	r2, [pc, #84]	; (801023c <HAL_UART_IRQHandler+0x2c0>)
 80101e8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7f6 fe2f 	bl	8006e54 <HAL_DMA_Abort_IT>
 80101f6:	4603      	mov	r3, r0
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d019      	beq.n	8010230 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010204:	687a      	ldr	r2, [r7, #4]
 8010206:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801020a:	4610      	mov	r0, r2
 801020c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801020e:	e00f      	b.n	8010230 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f000 fa77 	bl	8010704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010216:	e00b      	b.n	8010230 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f000 fa73 	bl	8010704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801021e:	e007      	b.n	8010230 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f000 fa6f 	bl	8010704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2200      	movs	r2, #0
 801022a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801022e:	e253      	b.n	80106d8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010230:	bf00      	nop
    return;
 8010232:	e251      	b.n	80106d8 <HAL_UART_IRQHandler+0x75c>
 8010234:	10000001 	.word	0x10000001
 8010238:	04000120 	.word	0x04000120
 801023c:	08011a3b 	.word	0x08011a3b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010244:	2b01      	cmp	r3, #1
 8010246:	f040 81e7 	bne.w	8010618 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801024a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801024e:	f003 0310 	and.w	r3, r3, #16
 8010252:	2b00      	cmp	r3, #0
 8010254:	f000 81e0 	beq.w	8010618 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801025c:	f003 0310 	and.w	r3, r3, #16
 8010260:	2b00      	cmp	r3, #0
 8010262:	f000 81d9 	beq.w	8010618 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	2210      	movs	r2, #16
 801026c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	689b      	ldr	r3, [r3, #8]
 8010274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010278:	2b40      	cmp	r3, #64	; 0x40
 801027a:	f040 8151 	bne.w	8010520 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	4a96      	ldr	r2, [pc, #600]	; (80104e0 <HAL_UART_IRQHandler+0x564>)
 8010288:	4293      	cmp	r3, r2
 801028a:	d068      	beq.n	801035e <HAL_UART_IRQHandler+0x3e2>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4a93      	ldr	r2, [pc, #588]	; (80104e4 <HAL_UART_IRQHandler+0x568>)
 8010296:	4293      	cmp	r3, r2
 8010298:	d061      	beq.n	801035e <HAL_UART_IRQHandler+0x3e2>
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	4a91      	ldr	r2, [pc, #580]	; (80104e8 <HAL_UART_IRQHandler+0x56c>)
 80102a4:	4293      	cmp	r3, r2
 80102a6:	d05a      	beq.n	801035e <HAL_UART_IRQHandler+0x3e2>
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	4a8e      	ldr	r2, [pc, #568]	; (80104ec <HAL_UART_IRQHandler+0x570>)
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d053      	beq.n	801035e <HAL_UART_IRQHandler+0x3e2>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	4a8c      	ldr	r2, [pc, #560]	; (80104f0 <HAL_UART_IRQHandler+0x574>)
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d04c      	beq.n	801035e <HAL_UART_IRQHandler+0x3e2>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	4a89      	ldr	r2, [pc, #548]	; (80104f4 <HAL_UART_IRQHandler+0x578>)
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d045      	beq.n	801035e <HAL_UART_IRQHandler+0x3e2>
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4a87      	ldr	r2, [pc, #540]	; (80104f8 <HAL_UART_IRQHandler+0x57c>)
 80102dc:	4293      	cmp	r3, r2
 80102de:	d03e      	beq.n	801035e <HAL_UART_IRQHandler+0x3e2>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	4a84      	ldr	r2, [pc, #528]	; (80104fc <HAL_UART_IRQHandler+0x580>)
 80102ea:	4293      	cmp	r3, r2
 80102ec:	d037      	beq.n	801035e <HAL_UART_IRQHandler+0x3e2>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	4a82      	ldr	r2, [pc, #520]	; (8010500 <HAL_UART_IRQHandler+0x584>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d030      	beq.n	801035e <HAL_UART_IRQHandler+0x3e2>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	4a7f      	ldr	r2, [pc, #508]	; (8010504 <HAL_UART_IRQHandler+0x588>)
 8010306:	4293      	cmp	r3, r2
 8010308:	d029      	beq.n	801035e <HAL_UART_IRQHandler+0x3e2>
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	4a7d      	ldr	r2, [pc, #500]	; (8010508 <HAL_UART_IRQHandler+0x58c>)
 8010314:	4293      	cmp	r3, r2
 8010316:	d022      	beq.n	801035e <HAL_UART_IRQHandler+0x3e2>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	4a7a      	ldr	r2, [pc, #488]	; (801050c <HAL_UART_IRQHandler+0x590>)
 8010322:	4293      	cmp	r3, r2
 8010324:	d01b      	beq.n	801035e <HAL_UART_IRQHandler+0x3e2>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	4a78      	ldr	r2, [pc, #480]	; (8010510 <HAL_UART_IRQHandler+0x594>)
 8010330:	4293      	cmp	r3, r2
 8010332:	d014      	beq.n	801035e <HAL_UART_IRQHandler+0x3e2>
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	4a75      	ldr	r2, [pc, #468]	; (8010514 <HAL_UART_IRQHandler+0x598>)
 801033e:	4293      	cmp	r3, r2
 8010340:	d00d      	beq.n	801035e <HAL_UART_IRQHandler+0x3e2>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	4a73      	ldr	r2, [pc, #460]	; (8010518 <HAL_UART_IRQHandler+0x59c>)
 801034c:	4293      	cmp	r3, r2
 801034e:	d006      	beq.n	801035e <HAL_UART_IRQHandler+0x3e2>
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	4a70      	ldr	r2, [pc, #448]	; (801051c <HAL_UART_IRQHandler+0x5a0>)
 801035a:	4293      	cmp	r3, r2
 801035c:	d106      	bne.n	801036c <HAL_UART_IRQHandler+0x3f0>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	685b      	ldr	r3, [r3, #4]
 8010368:	b29b      	uxth	r3, r3
 801036a:	e005      	b.n	8010378 <HAL_UART_IRQHandler+0x3fc>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	b29b      	uxth	r3, r3
 8010378:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801037c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010380:	2b00      	cmp	r3, #0
 8010382:	f000 81ab 	beq.w	80106dc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801038c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010390:	429a      	cmp	r2, r3
 8010392:	f080 81a3 	bcs.w	80106dc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801039c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103a6:	69db      	ldr	r3, [r3, #28]
 80103a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103ac:	f000 8087 	beq.w	80104be <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80103bc:	e853 3f00 	ldrex	r3, [r3]
 80103c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80103c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80103c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80103cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	461a      	mov	r2, r3
 80103d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80103da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80103de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80103e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80103ea:	e841 2300 	strex	r3, r2, [r1]
 80103ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80103f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d1da      	bne.n	80103b0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	3308      	adds	r3, #8
 8010400:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010402:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010404:	e853 3f00 	ldrex	r3, [r3]
 8010408:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801040a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801040c:	f023 0301 	bic.w	r3, r3, #1
 8010410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	3308      	adds	r3, #8
 801041a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801041e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010422:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010424:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010426:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801042a:	e841 2300 	strex	r3, r2, [r1]
 801042e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010432:	2b00      	cmp	r3, #0
 8010434:	d1e1      	bne.n	80103fa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	3308      	adds	r3, #8
 801043c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801043e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010440:	e853 3f00 	ldrex	r3, [r3]
 8010444:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801044c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	3308      	adds	r3, #8
 8010456:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801045a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801045c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801045e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010460:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010462:	e841 2300 	strex	r3, r2, [r1]
 8010466:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010468:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801046a:	2b00      	cmp	r3, #0
 801046c:	d1e3      	bne.n	8010436 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2220      	movs	r2, #32
 8010472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2200      	movs	r2, #0
 801047a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010484:	e853 3f00 	ldrex	r3, [r3]
 8010488:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801048a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801048c:	f023 0310 	bic.w	r3, r3, #16
 8010490:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	461a      	mov	r2, r3
 801049a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801049e:	65bb      	str	r3, [r7, #88]	; 0x58
 80104a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80104a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80104a6:	e841 2300 	strex	r3, r2, [r1]
 80104aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80104ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d1e4      	bne.n	801047c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7f6 f9ad 	bl	8006818 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2202      	movs	r2, #2
 80104c2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104d0:	b29b      	uxth	r3, r3
 80104d2:	1ad3      	subs	r3, r2, r3
 80104d4:	b29b      	uxth	r3, r3
 80104d6:	4619      	mov	r1, r3
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f000 f91d 	bl	8010718 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80104de:	e0fd      	b.n	80106dc <HAL_UART_IRQHandler+0x760>
 80104e0:	40020010 	.word	0x40020010
 80104e4:	40020028 	.word	0x40020028
 80104e8:	40020040 	.word	0x40020040
 80104ec:	40020058 	.word	0x40020058
 80104f0:	40020070 	.word	0x40020070
 80104f4:	40020088 	.word	0x40020088
 80104f8:	400200a0 	.word	0x400200a0
 80104fc:	400200b8 	.word	0x400200b8
 8010500:	40020410 	.word	0x40020410
 8010504:	40020428 	.word	0x40020428
 8010508:	40020440 	.word	0x40020440
 801050c:	40020458 	.word	0x40020458
 8010510:	40020470 	.word	0x40020470
 8010514:	40020488 	.word	0x40020488
 8010518:	400204a0 	.word	0x400204a0
 801051c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801052c:	b29b      	uxth	r3, r3
 801052e:	1ad3      	subs	r3, r2, r3
 8010530:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801053a:	b29b      	uxth	r3, r3
 801053c:	2b00      	cmp	r3, #0
 801053e:	f000 80cf 	beq.w	80106e0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010542:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010546:	2b00      	cmp	r3, #0
 8010548:	f000 80ca 	beq.w	80106e0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010554:	e853 3f00 	ldrex	r3, [r3]
 8010558:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801055a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801055c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010560:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	461a      	mov	r2, r3
 801056a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801056e:	647b      	str	r3, [r7, #68]	; 0x44
 8010570:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010572:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010574:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010576:	e841 2300 	strex	r3, r2, [r1]
 801057a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801057c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1e4      	bne.n	801054c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	3308      	adds	r3, #8
 8010588:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801058a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058c:	e853 3f00 	ldrex	r3, [r3]
 8010590:	623b      	str	r3, [r7, #32]
   return(result);
 8010592:	6a3a      	ldr	r2, [r7, #32]
 8010594:	4b55      	ldr	r3, [pc, #340]	; (80106ec <HAL_UART_IRQHandler+0x770>)
 8010596:	4013      	ands	r3, r2
 8010598:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	3308      	adds	r3, #8
 80105a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80105a6:	633a      	str	r2, [r7, #48]	; 0x30
 80105a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105ae:	e841 2300 	strex	r3, r2, [r1]
 80105b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80105b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d1e3      	bne.n	8010582 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2220      	movs	r2, #32
 80105be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2200      	movs	r2, #0
 80105c6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2200      	movs	r2, #0
 80105cc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105d4:	693b      	ldr	r3, [r7, #16]
 80105d6:	e853 3f00 	ldrex	r3, [r3]
 80105da:	60fb      	str	r3, [r7, #12]
   return(result);
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	f023 0310 	bic.w	r3, r3, #16
 80105e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	461a      	mov	r2, r3
 80105ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80105f0:	61fb      	str	r3, [r7, #28]
 80105f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105f4:	69b9      	ldr	r1, [r7, #24]
 80105f6:	69fa      	ldr	r2, [r7, #28]
 80105f8:	e841 2300 	strex	r3, r2, [r1]
 80105fc:	617b      	str	r3, [r7, #20]
   return(result);
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d1e4      	bne.n	80105ce <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2202      	movs	r2, #2
 8010608:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801060a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801060e:	4619      	mov	r1, r3
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f000 f881 	bl	8010718 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010616:	e063      	b.n	80106e0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801061c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010620:	2b00      	cmp	r3, #0
 8010622:	d00e      	beq.n	8010642 <HAL_UART_IRQHandler+0x6c6>
 8010624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801062c:	2b00      	cmp	r3, #0
 801062e:	d008      	beq.n	8010642 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010638:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f001 ff5a 	bl	80124f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010640:	e051      	b.n	80106e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801064a:	2b00      	cmp	r3, #0
 801064c:	d014      	beq.n	8010678 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801064e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010656:	2b00      	cmp	r3, #0
 8010658:	d105      	bne.n	8010666 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801065a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801065e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010662:	2b00      	cmp	r3, #0
 8010664:	d008      	beq.n	8010678 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801066a:	2b00      	cmp	r3, #0
 801066c:	d03a      	beq.n	80106e4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	4798      	blx	r3
    }
    return;
 8010676:	e035      	b.n	80106e4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801067c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010680:	2b00      	cmp	r3, #0
 8010682:	d009      	beq.n	8010698 <HAL_UART_IRQHandler+0x71c>
 8010684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801068c:	2b00      	cmp	r3, #0
 801068e:	d003      	beq.n	8010698 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f001 f9e8 	bl	8011a66 <UART_EndTransmit_IT>
    return;
 8010696:	e026      	b.n	80106e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801069c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d009      	beq.n	80106b8 <HAL_UART_IRQHandler+0x73c>
 80106a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d003      	beq.n	80106b8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f001 ff33 	bl	801251c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80106b6:	e016      	b.n	80106e6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80106b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d010      	beq.n	80106e6 <HAL_UART_IRQHandler+0x76a>
 80106c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	da0c      	bge.n	80106e6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f001 ff1b 	bl	8012508 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80106d2:	e008      	b.n	80106e6 <HAL_UART_IRQHandler+0x76a>
      return;
 80106d4:	bf00      	nop
 80106d6:	e006      	b.n	80106e6 <HAL_UART_IRQHandler+0x76a>
    return;
 80106d8:	bf00      	nop
 80106da:	e004      	b.n	80106e6 <HAL_UART_IRQHandler+0x76a>
      return;
 80106dc:	bf00      	nop
 80106de:	e002      	b.n	80106e6 <HAL_UART_IRQHandler+0x76a>
      return;
 80106e0:	bf00      	nop
 80106e2:	e000      	b.n	80106e6 <HAL_UART_IRQHandler+0x76a>
    return;
 80106e4:	bf00      	nop
  }
}
 80106e6:	37e8      	adds	r7, #232	; 0xe8
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}
 80106ec:	effffffe 	.word	0xeffffffe

080106f0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80106f0:	b480      	push	{r7}
 80106f2:	b083      	sub	sp, #12
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80106f8:	bf00      	nop
 80106fa:	370c      	adds	r7, #12
 80106fc:	46bd      	mov	sp, r7
 80106fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010702:	4770      	bx	lr

08010704 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010704:	b480      	push	{r7}
 8010706:	b083      	sub	sp, #12
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801070c:	bf00      	nop
 801070e:	370c      	adds	r7, #12
 8010710:	46bd      	mov	sp, r7
 8010712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010716:	4770      	bx	lr

08010718 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010718:	b480      	push	{r7}
 801071a:	b083      	sub	sp, #12
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	460b      	mov	r3, r1
 8010722:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010724:	bf00      	nop
 8010726:	370c      	adds	r7, #12
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr

08010730 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010734:	b092      	sub	sp, #72	; 0x48
 8010736:	af00      	add	r7, sp, #0
 8010738:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801073a:	2300      	movs	r3, #0
 801073c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	689a      	ldr	r2, [r3, #8]
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	691b      	ldr	r3, [r3, #16]
 8010748:	431a      	orrs	r2, r3
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	695b      	ldr	r3, [r3, #20]
 801074e:	431a      	orrs	r2, r3
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	69db      	ldr	r3, [r3, #28]
 8010754:	4313      	orrs	r3, r2
 8010756:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	681a      	ldr	r2, [r3, #0]
 801075e:	4bbe      	ldr	r3, [pc, #760]	; (8010a58 <UART_SetConfig+0x328>)
 8010760:	4013      	ands	r3, r2
 8010762:	697a      	ldr	r2, [r7, #20]
 8010764:	6812      	ldr	r2, [r2, #0]
 8010766:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010768:	430b      	orrs	r3, r1
 801076a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801076c:	697b      	ldr	r3, [r7, #20]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	685b      	ldr	r3, [r3, #4]
 8010772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	68da      	ldr	r2, [r3, #12]
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	430a      	orrs	r2, r1
 8010780:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	699b      	ldr	r3, [r3, #24]
 8010786:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	4ab3      	ldr	r2, [pc, #716]	; (8010a5c <UART_SetConfig+0x32c>)
 801078e:	4293      	cmp	r3, r2
 8010790:	d004      	beq.n	801079c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	6a1b      	ldr	r3, [r3, #32]
 8010796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010798:	4313      	orrs	r3, r2
 801079a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	689a      	ldr	r2, [r3, #8]
 80107a2:	4baf      	ldr	r3, [pc, #700]	; (8010a60 <UART_SetConfig+0x330>)
 80107a4:	4013      	ands	r3, r2
 80107a6:	697a      	ldr	r2, [r7, #20]
 80107a8:	6812      	ldr	r2, [r2, #0]
 80107aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80107ac:	430b      	orrs	r3, r1
 80107ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b6:	f023 010f 	bic.w	r1, r3, #15
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	430a      	orrs	r2, r1
 80107c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	4aa6      	ldr	r2, [pc, #664]	; (8010a64 <UART_SetConfig+0x334>)
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d177      	bne.n	80108c0 <UART_SetConfig+0x190>
 80107d0:	4ba5      	ldr	r3, [pc, #660]	; (8010a68 <UART_SetConfig+0x338>)
 80107d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80107d8:	2b28      	cmp	r3, #40	; 0x28
 80107da:	d86d      	bhi.n	80108b8 <UART_SetConfig+0x188>
 80107dc:	a201      	add	r2, pc, #4	; (adr r2, 80107e4 <UART_SetConfig+0xb4>)
 80107de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107e2:	bf00      	nop
 80107e4:	08010889 	.word	0x08010889
 80107e8:	080108b9 	.word	0x080108b9
 80107ec:	080108b9 	.word	0x080108b9
 80107f0:	080108b9 	.word	0x080108b9
 80107f4:	080108b9 	.word	0x080108b9
 80107f8:	080108b9 	.word	0x080108b9
 80107fc:	080108b9 	.word	0x080108b9
 8010800:	080108b9 	.word	0x080108b9
 8010804:	08010891 	.word	0x08010891
 8010808:	080108b9 	.word	0x080108b9
 801080c:	080108b9 	.word	0x080108b9
 8010810:	080108b9 	.word	0x080108b9
 8010814:	080108b9 	.word	0x080108b9
 8010818:	080108b9 	.word	0x080108b9
 801081c:	080108b9 	.word	0x080108b9
 8010820:	080108b9 	.word	0x080108b9
 8010824:	08010899 	.word	0x08010899
 8010828:	080108b9 	.word	0x080108b9
 801082c:	080108b9 	.word	0x080108b9
 8010830:	080108b9 	.word	0x080108b9
 8010834:	080108b9 	.word	0x080108b9
 8010838:	080108b9 	.word	0x080108b9
 801083c:	080108b9 	.word	0x080108b9
 8010840:	080108b9 	.word	0x080108b9
 8010844:	080108a1 	.word	0x080108a1
 8010848:	080108b9 	.word	0x080108b9
 801084c:	080108b9 	.word	0x080108b9
 8010850:	080108b9 	.word	0x080108b9
 8010854:	080108b9 	.word	0x080108b9
 8010858:	080108b9 	.word	0x080108b9
 801085c:	080108b9 	.word	0x080108b9
 8010860:	080108b9 	.word	0x080108b9
 8010864:	080108a9 	.word	0x080108a9
 8010868:	080108b9 	.word	0x080108b9
 801086c:	080108b9 	.word	0x080108b9
 8010870:	080108b9 	.word	0x080108b9
 8010874:	080108b9 	.word	0x080108b9
 8010878:	080108b9 	.word	0x080108b9
 801087c:	080108b9 	.word	0x080108b9
 8010880:	080108b9 	.word	0x080108b9
 8010884:	080108b1 	.word	0x080108b1
 8010888:	2301      	movs	r3, #1
 801088a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801088e:	e222      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010890:	2304      	movs	r3, #4
 8010892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010896:	e21e      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010898:	2308      	movs	r3, #8
 801089a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801089e:	e21a      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 80108a0:	2310      	movs	r3, #16
 80108a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108a6:	e216      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 80108a8:	2320      	movs	r3, #32
 80108aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ae:	e212      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 80108b0:	2340      	movs	r3, #64	; 0x40
 80108b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108b6:	e20e      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 80108b8:	2380      	movs	r3, #128	; 0x80
 80108ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108be:	e20a      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4a69      	ldr	r2, [pc, #420]	; (8010a6c <UART_SetConfig+0x33c>)
 80108c6:	4293      	cmp	r3, r2
 80108c8:	d130      	bne.n	801092c <UART_SetConfig+0x1fc>
 80108ca:	4b67      	ldr	r3, [pc, #412]	; (8010a68 <UART_SetConfig+0x338>)
 80108cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108ce:	f003 0307 	and.w	r3, r3, #7
 80108d2:	2b05      	cmp	r3, #5
 80108d4:	d826      	bhi.n	8010924 <UART_SetConfig+0x1f4>
 80108d6:	a201      	add	r2, pc, #4	; (adr r2, 80108dc <UART_SetConfig+0x1ac>)
 80108d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108dc:	080108f5 	.word	0x080108f5
 80108e0:	080108fd 	.word	0x080108fd
 80108e4:	08010905 	.word	0x08010905
 80108e8:	0801090d 	.word	0x0801090d
 80108ec:	08010915 	.word	0x08010915
 80108f0:	0801091d 	.word	0x0801091d
 80108f4:	2300      	movs	r3, #0
 80108f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108fa:	e1ec      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 80108fc:	2304      	movs	r3, #4
 80108fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010902:	e1e8      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010904:	2308      	movs	r3, #8
 8010906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801090a:	e1e4      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 801090c:	2310      	movs	r3, #16
 801090e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010912:	e1e0      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010914:	2320      	movs	r3, #32
 8010916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801091a:	e1dc      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 801091c:	2340      	movs	r3, #64	; 0x40
 801091e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010922:	e1d8      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010924:	2380      	movs	r3, #128	; 0x80
 8010926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801092a:	e1d4      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	4a4f      	ldr	r2, [pc, #316]	; (8010a70 <UART_SetConfig+0x340>)
 8010932:	4293      	cmp	r3, r2
 8010934:	d130      	bne.n	8010998 <UART_SetConfig+0x268>
 8010936:	4b4c      	ldr	r3, [pc, #304]	; (8010a68 <UART_SetConfig+0x338>)
 8010938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801093a:	f003 0307 	and.w	r3, r3, #7
 801093e:	2b05      	cmp	r3, #5
 8010940:	d826      	bhi.n	8010990 <UART_SetConfig+0x260>
 8010942:	a201      	add	r2, pc, #4	; (adr r2, 8010948 <UART_SetConfig+0x218>)
 8010944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010948:	08010961 	.word	0x08010961
 801094c:	08010969 	.word	0x08010969
 8010950:	08010971 	.word	0x08010971
 8010954:	08010979 	.word	0x08010979
 8010958:	08010981 	.word	0x08010981
 801095c:	08010989 	.word	0x08010989
 8010960:	2300      	movs	r3, #0
 8010962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010966:	e1b6      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010968:	2304      	movs	r3, #4
 801096a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801096e:	e1b2      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010970:	2308      	movs	r3, #8
 8010972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010976:	e1ae      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010978:	2310      	movs	r3, #16
 801097a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801097e:	e1aa      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010980:	2320      	movs	r3, #32
 8010982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010986:	e1a6      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010988:	2340      	movs	r3, #64	; 0x40
 801098a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801098e:	e1a2      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010990:	2380      	movs	r3, #128	; 0x80
 8010992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010996:	e19e      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	4a35      	ldr	r2, [pc, #212]	; (8010a74 <UART_SetConfig+0x344>)
 801099e:	4293      	cmp	r3, r2
 80109a0:	d130      	bne.n	8010a04 <UART_SetConfig+0x2d4>
 80109a2:	4b31      	ldr	r3, [pc, #196]	; (8010a68 <UART_SetConfig+0x338>)
 80109a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109a6:	f003 0307 	and.w	r3, r3, #7
 80109aa:	2b05      	cmp	r3, #5
 80109ac:	d826      	bhi.n	80109fc <UART_SetConfig+0x2cc>
 80109ae:	a201      	add	r2, pc, #4	; (adr r2, 80109b4 <UART_SetConfig+0x284>)
 80109b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109b4:	080109cd 	.word	0x080109cd
 80109b8:	080109d5 	.word	0x080109d5
 80109bc:	080109dd 	.word	0x080109dd
 80109c0:	080109e5 	.word	0x080109e5
 80109c4:	080109ed 	.word	0x080109ed
 80109c8:	080109f5 	.word	0x080109f5
 80109cc:	2300      	movs	r3, #0
 80109ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109d2:	e180      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 80109d4:	2304      	movs	r3, #4
 80109d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109da:	e17c      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 80109dc:	2308      	movs	r3, #8
 80109de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109e2:	e178      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 80109e4:	2310      	movs	r3, #16
 80109e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ea:	e174      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 80109ec:	2320      	movs	r3, #32
 80109ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109f2:	e170      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 80109f4:	2340      	movs	r3, #64	; 0x40
 80109f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109fa:	e16c      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 80109fc:	2380      	movs	r3, #128	; 0x80
 80109fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a02:	e168      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	4a1b      	ldr	r2, [pc, #108]	; (8010a78 <UART_SetConfig+0x348>)
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d142      	bne.n	8010a94 <UART_SetConfig+0x364>
 8010a0e:	4b16      	ldr	r3, [pc, #88]	; (8010a68 <UART_SetConfig+0x338>)
 8010a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a12:	f003 0307 	and.w	r3, r3, #7
 8010a16:	2b05      	cmp	r3, #5
 8010a18:	d838      	bhi.n	8010a8c <UART_SetConfig+0x35c>
 8010a1a:	a201      	add	r2, pc, #4	; (adr r2, 8010a20 <UART_SetConfig+0x2f0>)
 8010a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a20:	08010a39 	.word	0x08010a39
 8010a24:	08010a41 	.word	0x08010a41
 8010a28:	08010a49 	.word	0x08010a49
 8010a2c:	08010a51 	.word	0x08010a51
 8010a30:	08010a7d 	.word	0x08010a7d
 8010a34:	08010a85 	.word	0x08010a85
 8010a38:	2300      	movs	r3, #0
 8010a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a3e:	e14a      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010a40:	2304      	movs	r3, #4
 8010a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a46:	e146      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010a48:	2308      	movs	r3, #8
 8010a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a4e:	e142      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010a50:	2310      	movs	r3, #16
 8010a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a56:	e13e      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010a58:	cfff69f3 	.word	0xcfff69f3
 8010a5c:	58000c00 	.word	0x58000c00
 8010a60:	11fff4ff 	.word	0x11fff4ff
 8010a64:	40011000 	.word	0x40011000
 8010a68:	58024400 	.word	0x58024400
 8010a6c:	40004400 	.word	0x40004400
 8010a70:	40004800 	.word	0x40004800
 8010a74:	40004c00 	.word	0x40004c00
 8010a78:	40005000 	.word	0x40005000
 8010a7c:	2320      	movs	r3, #32
 8010a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a82:	e128      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010a84:	2340      	movs	r3, #64	; 0x40
 8010a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a8a:	e124      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010a8c:	2380      	movs	r3, #128	; 0x80
 8010a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a92:	e120      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010a94:	697b      	ldr	r3, [r7, #20]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	4acb      	ldr	r2, [pc, #812]	; (8010dc8 <UART_SetConfig+0x698>)
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	d176      	bne.n	8010b8c <UART_SetConfig+0x45c>
 8010a9e:	4bcb      	ldr	r3, [pc, #812]	; (8010dcc <UART_SetConfig+0x69c>)
 8010aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010aa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010aa6:	2b28      	cmp	r3, #40	; 0x28
 8010aa8:	d86c      	bhi.n	8010b84 <UART_SetConfig+0x454>
 8010aaa:	a201      	add	r2, pc, #4	; (adr r2, 8010ab0 <UART_SetConfig+0x380>)
 8010aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ab0:	08010b55 	.word	0x08010b55
 8010ab4:	08010b85 	.word	0x08010b85
 8010ab8:	08010b85 	.word	0x08010b85
 8010abc:	08010b85 	.word	0x08010b85
 8010ac0:	08010b85 	.word	0x08010b85
 8010ac4:	08010b85 	.word	0x08010b85
 8010ac8:	08010b85 	.word	0x08010b85
 8010acc:	08010b85 	.word	0x08010b85
 8010ad0:	08010b5d 	.word	0x08010b5d
 8010ad4:	08010b85 	.word	0x08010b85
 8010ad8:	08010b85 	.word	0x08010b85
 8010adc:	08010b85 	.word	0x08010b85
 8010ae0:	08010b85 	.word	0x08010b85
 8010ae4:	08010b85 	.word	0x08010b85
 8010ae8:	08010b85 	.word	0x08010b85
 8010aec:	08010b85 	.word	0x08010b85
 8010af0:	08010b65 	.word	0x08010b65
 8010af4:	08010b85 	.word	0x08010b85
 8010af8:	08010b85 	.word	0x08010b85
 8010afc:	08010b85 	.word	0x08010b85
 8010b00:	08010b85 	.word	0x08010b85
 8010b04:	08010b85 	.word	0x08010b85
 8010b08:	08010b85 	.word	0x08010b85
 8010b0c:	08010b85 	.word	0x08010b85
 8010b10:	08010b6d 	.word	0x08010b6d
 8010b14:	08010b85 	.word	0x08010b85
 8010b18:	08010b85 	.word	0x08010b85
 8010b1c:	08010b85 	.word	0x08010b85
 8010b20:	08010b85 	.word	0x08010b85
 8010b24:	08010b85 	.word	0x08010b85
 8010b28:	08010b85 	.word	0x08010b85
 8010b2c:	08010b85 	.word	0x08010b85
 8010b30:	08010b75 	.word	0x08010b75
 8010b34:	08010b85 	.word	0x08010b85
 8010b38:	08010b85 	.word	0x08010b85
 8010b3c:	08010b85 	.word	0x08010b85
 8010b40:	08010b85 	.word	0x08010b85
 8010b44:	08010b85 	.word	0x08010b85
 8010b48:	08010b85 	.word	0x08010b85
 8010b4c:	08010b85 	.word	0x08010b85
 8010b50:	08010b7d 	.word	0x08010b7d
 8010b54:	2301      	movs	r3, #1
 8010b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b5a:	e0bc      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010b5c:	2304      	movs	r3, #4
 8010b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b62:	e0b8      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010b64:	2308      	movs	r3, #8
 8010b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b6a:	e0b4      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010b6c:	2310      	movs	r3, #16
 8010b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b72:	e0b0      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010b74:	2320      	movs	r3, #32
 8010b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b7a:	e0ac      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010b7c:	2340      	movs	r3, #64	; 0x40
 8010b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b82:	e0a8      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010b84:	2380      	movs	r3, #128	; 0x80
 8010b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b8a:	e0a4      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	4a8f      	ldr	r2, [pc, #572]	; (8010dd0 <UART_SetConfig+0x6a0>)
 8010b92:	4293      	cmp	r3, r2
 8010b94:	d130      	bne.n	8010bf8 <UART_SetConfig+0x4c8>
 8010b96:	4b8d      	ldr	r3, [pc, #564]	; (8010dcc <UART_SetConfig+0x69c>)
 8010b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b9a:	f003 0307 	and.w	r3, r3, #7
 8010b9e:	2b05      	cmp	r3, #5
 8010ba0:	d826      	bhi.n	8010bf0 <UART_SetConfig+0x4c0>
 8010ba2:	a201      	add	r2, pc, #4	; (adr r2, 8010ba8 <UART_SetConfig+0x478>)
 8010ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ba8:	08010bc1 	.word	0x08010bc1
 8010bac:	08010bc9 	.word	0x08010bc9
 8010bb0:	08010bd1 	.word	0x08010bd1
 8010bb4:	08010bd9 	.word	0x08010bd9
 8010bb8:	08010be1 	.word	0x08010be1
 8010bbc:	08010be9 	.word	0x08010be9
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bc6:	e086      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010bc8:	2304      	movs	r3, #4
 8010bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bce:	e082      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010bd0:	2308      	movs	r3, #8
 8010bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bd6:	e07e      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010bd8:	2310      	movs	r3, #16
 8010bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bde:	e07a      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010be0:	2320      	movs	r3, #32
 8010be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010be6:	e076      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010be8:	2340      	movs	r3, #64	; 0x40
 8010bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bee:	e072      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010bf0:	2380      	movs	r3, #128	; 0x80
 8010bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bf6:	e06e      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	4a75      	ldr	r2, [pc, #468]	; (8010dd4 <UART_SetConfig+0x6a4>)
 8010bfe:	4293      	cmp	r3, r2
 8010c00:	d130      	bne.n	8010c64 <UART_SetConfig+0x534>
 8010c02:	4b72      	ldr	r3, [pc, #456]	; (8010dcc <UART_SetConfig+0x69c>)
 8010c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c06:	f003 0307 	and.w	r3, r3, #7
 8010c0a:	2b05      	cmp	r3, #5
 8010c0c:	d826      	bhi.n	8010c5c <UART_SetConfig+0x52c>
 8010c0e:	a201      	add	r2, pc, #4	; (adr r2, 8010c14 <UART_SetConfig+0x4e4>)
 8010c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c14:	08010c2d 	.word	0x08010c2d
 8010c18:	08010c35 	.word	0x08010c35
 8010c1c:	08010c3d 	.word	0x08010c3d
 8010c20:	08010c45 	.word	0x08010c45
 8010c24:	08010c4d 	.word	0x08010c4d
 8010c28:	08010c55 	.word	0x08010c55
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c32:	e050      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010c34:	2304      	movs	r3, #4
 8010c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c3a:	e04c      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010c3c:	2308      	movs	r3, #8
 8010c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c42:	e048      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010c44:	2310      	movs	r3, #16
 8010c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c4a:	e044      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010c4c:	2320      	movs	r3, #32
 8010c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c52:	e040      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010c54:	2340      	movs	r3, #64	; 0x40
 8010c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c5a:	e03c      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010c5c:	2380      	movs	r3, #128	; 0x80
 8010c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c62:	e038      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	4a5b      	ldr	r2, [pc, #364]	; (8010dd8 <UART_SetConfig+0x6a8>)
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	d130      	bne.n	8010cd0 <UART_SetConfig+0x5a0>
 8010c6e:	4b57      	ldr	r3, [pc, #348]	; (8010dcc <UART_SetConfig+0x69c>)
 8010c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c72:	f003 0307 	and.w	r3, r3, #7
 8010c76:	2b05      	cmp	r3, #5
 8010c78:	d826      	bhi.n	8010cc8 <UART_SetConfig+0x598>
 8010c7a:	a201      	add	r2, pc, #4	; (adr r2, 8010c80 <UART_SetConfig+0x550>)
 8010c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c80:	08010c99 	.word	0x08010c99
 8010c84:	08010ca1 	.word	0x08010ca1
 8010c88:	08010ca9 	.word	0x08010ca9
 8010c8c:	08010cb1 	.word	0x08010cb1
 8010c90:	08010cb9 	.word	0x08010cb9
 8010c94:	08010cc1 	.word	0x08010cc1
 8010c98:	2302      	movs	r3, #2
 8010c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c9e:	e01a      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010ca0:	2304      	movs	r3, #4
 8010ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ca6:	e016      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010ca8:	2308      	movs	r3, #8
 8010caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cae:	e012      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010cb0:	2310      	movs	r3, #16
 8010cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cb6:	e00e      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010cb8:	2320      	movs	r3, #32
 8010cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cbe:	e00a      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010cc0:	2340      	movs	r3, #64	; 0x40
 8010cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cc6:	e006      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010cc8:	2380      	movs	r3, #128	; 0x80
 8010cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cce:	e002      	b.n	8010cd6 <UART_SetConfig+0x5a6>
 8010cd0:	2380      	movs	r3, #128	; 0x80
 8010cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	4a3f      	ldr	r2, [pc, #252]	; (8010dd8 <UART_SetConfig+0x6a8>)
 8010cdc:	4293      	cmp	r3, r2
 8010cde:	f040 80f8 	bne.w	8010ed2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010ce2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010ce6:	2b20      	cmp	r3, #32
 8010ce8:	dc46      	bgt.n	8010d78 <UART_SetConfig+0x648>
 8010cea:	2b02      	cmp	r3, #2
 8010cec:	f2c0 8082 	blt.w	8010df4 <UART_SetConfig+0x6c4>
 8010cf0:	3b02      	subs	r3, #2
 8010cf2:	2b1e      	cmp	r3, #30
 8010cf4:	d87e      	bhi.n	8010df4 <UART_SetConfig+0x6c4>
 8010cf6:	a201      	add	r2, pc, #4	; (adr r2, 8010cfc <UART_SetConfig+0x5cc>)
 8010cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cfc:	08010d7f 	.word	0x08010d7f
 8010d00:	08010df5 	.word	0x08010df5
 8010d04:	08010d87 	.word	0x08010d87
 8010d08:	08010df5 	.word	0x08010df5
 8010d0c:	08010df5 	.word	0x08010df5
 8010d10:	08010df5 	.word	0x08010df5
 8010d14:	08010d97 	.word	0x08010d97
 8010d18:	08010df5 	.word	0x08010df5
 8010d1c:	08010df5 	.word	0x08010df5
 8010d20:	08010df5 	.word	0x08010df5
 8010d24:	08010df5 	.word	0x08010df5
 8010d28:	08010df5 	.word	0x08010df5
 8010d2c:	08010df5 	.word	0x08010df5
 8010d30:	08010df5 	.word	0x08010df5
 8010d34:	08010da7 	.word	0x08010da7
 8010d38:	08010df5 	.word	0x08010df5
 8010d3c:	08010df5 	.word	0x08010df5
 8010d40:	08010df5 	.word	0x08010df5
 8010d44:	08010df5 	.word	0x08010df5
 8010d48:	08010df5 	.word	0x08010df5
 8010d4c:	08010df5 	.word	0x08010df5
 8010d50:	08010df5 	.word	0x08010df5
 8010d54:	08010df5 	.word	0x08010df5
 8010d58:	08010df5 	.word	0x08010df5
 8010d5c:	08010df5 	.word	0x08010df5
 8010d60:	08010df5 	.word	0x08010df5
 8010d64:	08010df5 	.word	0x08010df5
 8010d68:	08010df5 	.word	0x08010df5
 8010d6c:	08010df5 	.word	0x08010df5
 8010d70:	08010df5 	.word	0x08010df5
 8010d74:	08010de7 	.word	0x08010de7
 8010d78:	2b40      	cmp	r3, #64	; 0x40
 8010d7a:	d037      	beq.n	8010dec <UART_SetConfig+0x6bc>
 8010d7c:	e03a      	b.n	8010df4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010d7e:	f7fb fd9b 	bl	800c8b8 <HAL_RCCEx_GetD3PCLK1Freq>
 8010d82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010d84:	e03c      	b.n	8010e00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7fb fdaa 	bl	800c8e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d94:	e034      	b.n	8010e00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d96:	f107 0318 	add.w	r3, r7, #24
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f7fb fef6 	bl	800cb8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010da4:	e02c      	b.n	8010e00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010da6:	4b09      	ldr	r3, [pc, #36]	; (8010dcc <UART_SetConfig+0x69c>)
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	f003 0320 	and.w	r3, r3, #32
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d016      	beq.n	8010de0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010db2:	4b06      	ldr	r3, [pc, #24]	; (8010dcc <UART_SetConfig+0x69c>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	08db      	lsrs	r3, r3, #3
 8010db8:	f003 0303 	and.w	r3, r3, #3
 8010dbc:	4a07      	ldr	r2, [pc, #28]	; (8010ddc <UART_SetConfig+0x6ac>)
 8010dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8010dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010dc4:	e01c      	b.n	8010e00 <UART_SetConfig+0x6d0>
 8010dc6:	bf00      	nop
 8010dc8:	40011400 	.word	0x40011400
 8010dcc:	58024400 	.word	0x58024400
 8010dd0:	40007800 	.word	0x40007800
 8010dd4:	40007c00 	.word	0x40007c00
 8010dd8:	58000c00 	.word	0x58000c00
 8010ddc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010de0:	4b9d      	ldr	r3, [pc, #628]	; (8011058 <UART_SetConfig+0x928>)
 8010de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010de4:	e00c      	b.n	8010e00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010de6:	4b9d      	ldr	r3, [pc, #628]	; (801105c <UART_SetConfig+0x92c>)
 8010de8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dea:	e009      	b.n	8010e00 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010dec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010df2:	e005      	b.n	8010e00 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010df4:	2300      	movs	r3, #0
 8010df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010df8:	2301      	movs	r3, #1
 8010dfa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010dfe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f000 81de 	beq.w	80111c4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010e08:	697b      	ldr	r3, [r7, #20]
 8010e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e0c:	4a94      	ldr	r2, [pc, #592]	; (8011060 <UART_SetConfig+0x930>)
 8010e0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e12:	461a      	mov	r2, r3
 8010e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e16:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e1a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	685a      	ldr	r2, [r3, #4]
 8010e20:	4613      	mov	r3, r2
 8010e22:	005b      	lsls	r3, r3, #1
 8010e24:	4413      	add	r3, r2
 8010e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	d305      	bcc.n	8010e38 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010e2c:	697b      	ldr	r3, [r7, #20]
 8010e2e:	685b      	ldr	r3, [r3, #4]
 8010e30:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d903      	bls.n	8010e40 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010e38:	2301      	movs	r3, #1
 8010e3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010e3e:	e1c1      	b.n	80111c4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e42:	2200      	movs	r2, #0
 8010e44:	60bb      	str	r3, [r7, #8]
 8010e46:	60fa      	str	r2, [r7, #12]
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e4c:	4a84      	ldr	r2, [pc, #528]	; (8011060 <UART_SetConfig+0x930>)
 8010e4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e52:	b29b      	uxth	r3, r3
 8010e54:	2200      	movs	r2, #0
 8010e56:	603b      	str	r3, [r7, #0]
 8010e58:	607a      	str	r2, [r7, #4]
 8010e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010e62:	f7ef fa3d 	bl	80002e0 <__aeabi_uldivmod>
 8010e66:	4602      	mov	r2, r0
 8010e68:	460b      	mov	r3, r1
 8010e6a:	4610      	mov	r0, r2
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	f04f 0200 	mov.w	r2, #0
 8010e72:	f04f 0300 	mov.w	r3, #0
 8010e76:	020b      	lsls	r3, r1, #8
 8010e78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010e7c:	0202      	lsls	r2, r0, #8
 8010e7e:	6979      	ldr	r1, [r7, #20]
 8010e80:	6849      	ldr	r1, [r1, #4]
 8010e82:	0849      	lsrs	r1, r1, #1
 8010e84:	2000      	movs	r0, #0
 8010e86:	460c      	mov	r4, r1
 8010e88:	4605      	mov	r5, r0
 8010e8a:	eb12 0804 	adds.w	r8, r2, r4
 8010e8e:	eb43 0905 	adc.w	r9, r3, r5
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	685b      	ldr	r3, [r3, #4]
 8010e96:	2200      	movs	r2, #0
 8010e98:	469a      	mov	sl, r3
 8010e9a:	4693      	mov	fp, r2
 8010e9c:	4652      	mov	r2, sl
 8010e9e:	465b      	mov	r3, fp
 8010ea0:	4640      	mov	r0, r8
 8010ea2:	4649      	mov	r1, r9
 8010ea4:	f7ef fa1c 	bl	80002e0 <__aeabi_uldivmod>
 8010ea8:	4602      	mov	r2, r0
 8010eaa:	460b      	mov	r3, r1
 8010eac:	4613      	mov	r3, r2
 8010eae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010eb6:	d308      	bcc.n	8010eca <UART_SetConfig+0x79a>
 8010eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ebe:	d204      	bcs.n	8010eca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ec6:	60da      	str	r2, [r3, #12]
 8010ec8:	e17c      	b.n	80111c4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010eca:	2301      	movs	r3, #1
 8010ecc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010ed0:	e178      	b.n	80111c4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	69db      	ldr	r3, [r3, #28]
 8010ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010eda:	f040 80c5 	bne.w	8011068 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010ede:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010ee2:	2b20      	cmp	r3, #32
 8010ee4:	dc48      	bgt.n	8010f78 <UART_SetConfig+0x848>
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	db7b      	blt.n	8010fe2 <UART_SetConfig+0x8b2>
 8010eea:	2b20      	cmp	r3, #32
 8010eec:	d879      	bhi.n	8010fe2 <UART_SetConfig+0x8b2>
 8010eee:	a201      	add	r2, pc, #4	; (adr r2, 8010ef4 <UART_SetConfig+0x7c4>)
 8010ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ef4:	08010f7f 	.word	0x08010f7f
 8010ef8:	08010f87 	.word	0x08010f87
 8010efc:	08010fe3 	.word	0x08010fe3
 8010f00:	08010fe3 	.word	0x08010fe3
 8010f04:	08010f8f 	.word	0x08010f8f
 8010f08:	08010fe3 	.word	0x08010fe3
 8010f0c:	08010fe3 	.word	0x08010fe3
 8010f10:	08010fe3 	.word	0x08010fe3
 8010f14:	08010f9f 	.word	0x08010f9f
 8010f18:	08010fe3 	.word	0x08010fe3
 8010f1c:	08010fe3 	.word	0x08010fe3
 8010f20:	08010fe3 	.word	0x08010fe3
 8010f24:	08010fe3 	.word	0x08010fe3
 8010f28:	08010fe3 	.word	0x08010fe3
 8010f2c:	08010fe3 	.word	0x08010fe3
 8010f30:	08010fe3 	.word	0x08010fe3
 8010f34:	08010faf 	.word	0x08010faf
 8010f38:	08010fe3 	.word	0x08010fe3
 8010f3c:	08010fe3 	.word	0x08010fe3
 8010f40:	08010fe3 	.word	0x08010fe3
 8010f44:	08010fe3 	.word	0x08010fe3
 8010f48:	08010fe3 	.word	0x08010fe3
 8010f4c:	08010fe3 	.word	0x08010fe3
 8010f50:	08010fe3 	.word	0x08010fe3
 8010f54:	08010fe3 	.word	0x08010fe3
 8010f58:	08010fe3 	.word	0x08010fe3
 8010f5c:	08010fe3 	.word	0x08010fe3
 8010f60:	08010fe3 	.word	0x08010fe3
 8010f64:	08010fe3 	.word	0x08010fe3
 8010f68:	08010fe3 	.word	0x08010fe3
 8010f6c:	08010fe3 	.word	0x08010fe3
 8010f70:	08010fe3 	.word	0x08010fe3
 8010f74:	08010fd5 	.word	0x08010fd5
 8010f78:	2b40      	cmp	r3, #64	; 0x40
 8010f7a:	d02e      	beq.n	8010fda <UART_SetConfig+0x8aa>
 8010f7c:	e031      	b.n	8010fe2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010f7e:	f7f9 fca3 	bl	800a8c8 <HAL_RCC_GetPCLK1Freq>
 8010f82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010f84:	e033      	b.n	8010fee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010f86:	f7f9 fcb5 	bl	800a8f4 <HAL_RCC_GetPCLK2Freq>
 8010f8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010f8c:	e02f      	b.n	8010fee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7fb fca6 	bl	800c8e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f9c:	e027      	b.n	8010fee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010f9e:	f107 0318 	add.w	r3, r7, #24
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7fb fdf2 	bl	800cb8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010fa8:	69fb      	ldr	r3, [r7, #28]
 8010faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fac:	e01f      	b.n	8010fee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010fae:	4b2d      	ldr	r3, [pc, #180]	; (8011064 <UART_SetConfig+0x934>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	f003 0320 	and.w	r3, r3, #32
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d009      	beq.n	8010fce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010fba:	4b2a      	ldr	r3, [pc, #168]	; (8011064 <UART_SetConfig+0x934>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	08db      	lsrs	r3, r3, #3
 8010fc0:	f003 0303 	and.w	r3, r3, #3
 8010fc4:	4a24      	ldr	r2, [pc, #144]	; (8011058 <UART_SetConfig+0x928>)
 8010fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8010fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010fcc:	e00f      	b.n	8010fee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010fce:	4b22      	ldr	r3, [pc, #136]	; (8011058 <UART_SetConfig+0x928>)
 8010fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fd2:	e00c      	b.n	8010fee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010fd4:	4b21      	ldr	r3, [pc, #132]	; (801105c <UART_SetConfig+0x92c>)
 8010fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fd8:	e009      	b.n	8010fee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fe0:	e005      	b.n	8010fee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010fec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	f000 80e7 	beq.w	80111c4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ffa:	4a19      	ldr	r2, [pc, #100]	; (8011060 <UART_SetConfig+0x930>)
 8010ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011000:	461a      	mov	r2, r3
 8011002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011004:	fbb3 f3f2 	udiv	r3, r3, r2
 8011008:	005a      	lsls	r2, r3, #1
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	085b      	lsrs	r3, r3, #1
 8011010:	441a      	add	r2, r3
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	fbb2 f3f3 	udiv	r3, r2, r3
 801101a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801101c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801101e:	2b0f      	cmp	r3, #15
 8011020:	d916      	bls.n	8011050 <UART_SetConfig+0x920>
 8011022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011028:	d212      	bcs.n	8011050 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801102a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801102c:	b29b      	uxth	r3, r3
 801102e:	f023 030f 	bic.w	r3, r3, #15
 8011032:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011036:	085b      	lsrs	r3, r3, #1
 8011038:	b29b      	uxth	r3, r3
 801103a:	f003 0307 	and.w	r3, r3, #7
 801103e:	b29a      	uxth	r2, r3
 8011040:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011042:	4313      	orrs	r3, r2
 8011044:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801104c:	60da      	str	r2, [r3, #12]
 801104e:	e0b9      	b.n	80111c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011050:	2301      	movs	r3, #1
 8011052:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011056:	e0b5      	b.n	80111c4 <UART_SetConfig+0xa94>
 8011058:	03d09000 	.word	0x03d09000
 801105c:	003d0900 	.word	0x003d0900
 8011060:	08016e98 	.word	0x08016e98
 8011064:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011068:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801106c:	2b20      	cmp	r3, #32
 801106e:	dc49      	bgt.n	8011104 <UART_SetConfig+0x9d4>
 8011070:	2b00      	cmp	r3, #0
 8011072:	db7c      	blt.n	801116e <UART_SetConfig+0xa3e>
 8011074:	2b20      	cmp	r3, #32
 8011076:	d87a      	bhi.n	801116e <UART_SetConfig+0xa3e>
 8011078:	a201      	add	r2, pc, #4	; (adr r2, 8011080 <UART_SetConfig+0x950>)
 801107a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801107e:	bf00      	nop
 8011080:	0801110b 	.word	0x0801110b
 8011084:	08011113 	.word	0x08011113
 8011088:	0801116f 	.word	0x0801116f
 801108c:	0801116f 	.word	0x0801116f
 8011090:	0801111b 	.word	0x0801111b
 8011094:	0801116f 	.word	0x0801116f
 8011098:	0801116f 	.word	0x0801116f
 801109c:	0801116f 	.word	0x0801116f
 80110a0:	0801112b 	.word	0x0801112b
 80110a4:	0801116f 	.word	0x0801116f
 80110a8:	0801116f 	.word	0x0801116f
 80110ac:	0801116f 	.word	0x0801116f
 80110b0:	0801116f 	.word	0x0801116f
 80110b4:	0801116f 	.word	0x0801116f
 80110b8:	0801116f 	.word	0x0801116f
 80110bc:	0801116f 	.word	0x0801116f
 80110c0:	0801113b 	.word	0x0801113b
 80110c4:	0801116f 	.word	0x0801116f
 80110c8:	0801116f 	.word	0x0801116f
 80110cc:	0801116f 	.word	0x0801116f
 80110d0:	0801116f 	.word	0x0801116f
 80110d4:	0801116f 	.word	0x0801116f
 80110d8:	0801116f 	.word	0x0801116f
 80110dc:	0801116f 	.word	0x0801116f
 80110e0:	0801116f 	.word	0x0801116f
 80110e4:	0801116f 	.word	0x0801116f
 80110e8:	0801116f 	.word	0x0801116f
 80110ec:	0801116f 	.word	0x0801116f
 80110f0:	0801116f 	.word	0x0801116f
 80110f4:	0801116f 	.word	0x0801116f
 80110f8:	0801116f 	.word	0x0801116f
 80110fc:	0801116f 	.word	0x0801116f
 8011100:	08011161 	.word	0x08011161
 8011104:	2b40      	cmp	r3, #64	; 0x40
 8011106:	d02e      	beq.n	8011166 <UART_SetConfig+0xa36>
 8011108:	e031      	b.n	801116e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801110a:	f7f9 fbdd 	bl	800a8c8 <HAL_RCC_GetPCLK1Freq>
 801110e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011110:	e033      	b.n	801117a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011112:	f7f9 fbef 	bl	800a8f4 <HAL_RCC_GetPCLK2Freq>
 8011116:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011118:	e02f      	b.n	801117a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801111a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801111e:	4618      	mov	r0, r3
 8011120:	f7fb fbe0 	bl	800c8e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011128:	e027      	b.n	801117a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801112a:	f107 0318 	add.w	r3, r7, #24
 801112e:	4618      	mov	r0, r3
 8011130:	f7fb fd2c 	bl	800cb8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011134:	69fb      	ldr	r3, [r7, #28]
 8011136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011138:	e01f      	b.n	801117a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801113a:	4b2d      	ldr	r3, [pc, #180]	; (80111f0 <UART_SetConfig+0xac0>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	f003 0320 	and.w	r3, r3, #32
 8011142:	2b00      	cmp	r3, #0
 8011144:	d009      	beq.n	801115a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011146:	4b2a      	ldr	r3, [pc, #168]	; (80111f0 <UART_SetConfig+0xac0>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	08db      	lsrs	r3, r3, #3
 801114c:	f003 0303 	and.w	r3, r3, #3
 8011150:	4a28      	ldr	r2, [pc, #160]	; (80111f4 <UART_SetConfig+0xac4>)
 8011152:	fa22 f303 	lsr.w	r3, r2, r3
 8011156:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011158:	e00f      	b.n	801117a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801115a:	4b26      	ldr	r3, [pc, #152]	; (80111f4 <UART_SetConfig+0xac4>)
 801115c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801115e:	e00c      	b.n	801117a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011160:	4b25      	ldr	r3, [pc, #148]	; (80111f8 <UART_SetConfig+0xac8>)
 8011162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011164:	e009      	b.n	801117a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801116a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801116c:	e005      	b.n	801117a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801116e:	2300      	movs	r3, #0
 8011170:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011172:	2301      	movs	r3, #1
 8011174:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011178:	bf00      	nop
    }

    if (pclk != 0U)
 801117a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801117c:	2b00      	cmp	r3, #0
 801117e:	d021      	beq.n	80111c4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011184:	4a1d      	ldr	r2, [pc, #116]	; (80111fc <UART_SetConfig+0xacc>)
 8011186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801118a:	461a      	mov	r2, r3
 801118c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801118e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	085b      	lsrs	r3, r3, #1
 8011198:	441a      	add	r2, r3
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80111a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80111a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a6:	2b0f      	cmp	r3, #15
 80111a8:	d909      	bls.n	80111be <UART_SetConfig+0xa8e>
 80111aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111b0:	d205      	bcs.n	80111be <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80111b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b4:	b29a      	uxth	r2, r3
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	60da      	str	r2, [r3, #12]
 80111bc:	e002      	b.n	80111c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80111be:	2301      	movs	r3, #1
 80111c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80111c4:	697b      	ldr	r3, [r7, #20]
 80111c6:	2201      	movs	r2, #1
 80111c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	2201      	movs	r2, #1
 80111d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80111d4:	697b      	ldr	r3, [r7, #20]
 80111d6:	2200      	movs	r2, #0
 80111d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	2200      	movs	r2, #0
 80111de:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80111e0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3748      	adds	r7, #72	; 0x48
 80111e8:	46bd      	mov	sp, r7
 80111ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80111ee:	bf00      	nop
 80111f0:	58024400 	.word	0x58024400
 80111f4:	03d09000 	.word	0x03d09000
 80111f8:	003d0900 	.word	0x003d0900
 80111fc:	08016e98 	.word	0x08016e98

08011200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011200:	b480      	push	{r7}
 8011202:	b083      	sub	sp, #12
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801120c:	f003 0308 	and.w	r3, r3, #8
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00a      	beq.n	801122a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	685b      	ldr	r3, [r3, #4]
 801121a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	430a      	orrs	r2, r1
 8011228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801122e:	f003 0301 	and.w	r3, r3, #1
 8011232:	2b00      	cmp	r3, #0
 8011234:	d00a      	beq.n	801124c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	685b      	ldr	r3, [r3, #4]
 801123c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	430a      	orrs	r2, r1
 801124a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011250:	f003 0302 	and.w	r3, r3, #2
 8011254:	2b00      	cmp	r3, #0
 8011256:	d00a      	beq.n	801126e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	430a      	orrs	r2, r1
 801126c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011272:	f003 0304 	and.w	r3, r3, #4
 8011276:	2b00      	cmp	r3, #0
 8011278:	d00a      	beq.n	8011290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	685b      	ldr	r3, [r3, #4]
 8011280:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	430a      	orrs	r2, r1
 801128e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011294:	f003 0310 	and.w	r3, r3, #16
 8011298:	2b00      	cmp	r3, #0
 801129a:	d00a      	beq.n	80112b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	689b      	ldr	r3, [r3, #8]
 80112a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	430a      	orrs	r2, r1
 80112b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112b6:	f003 0320 	and.w	r3, r3, #32
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d00a      	beq.n	80112d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	689b      	ldr	r3, [r3, #8]
 80112c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	430a      	orrs	r2, r1
 80112d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d01a      	beq.n	8011316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	685b      	ldr	r3, [r3, #4]
 80112e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	430a      	orrs	r2, r1
 80112f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80112fe:	d10a      	bne.n	8011316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	685b      	ldr	r3, [r3, #4]
 8011306:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	430a      	orrs	r2, r1
 8011314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801131a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801131e:	2b00      	cmp	r3, #0
 8011320:	d00a      	beq.n	8011338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	430a      	orrs	r2, r1
 8011336:	605a      	str	r2, [r3, #4]
  }
}
 8011338:	bf00      	nop
 801133a:	370c      	adds	r7, #12
 801133c:	46bd      	mov	sp, r7
 801133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011342:	4770      	bx	lr

08011344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b098      	sub	sp, #96	; 0x60
 8011348:	af02      	add	r7, sp, #8
 801134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2200      	movs	r2, #0
 8011350:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011354:	f7f2 fb72 	bl	8003a3c <HAL_GetTick>
 8011358:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	f003 0308 	and.w	r3, r3, #8
 8011364:	2b08      	cmp	r3, #8
 8011366:	d12f      	bne.n	80113c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801136c:	9300      	str	r3, [sp, #0]
 801136e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011370:	2200      	movs	r2, #0
 8011372:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f000 f88e 	bl	8011498 <UART_WaitOnFlagUntilTimeout>
 801137c:	4603      	mov	r3, r0
 801137e:	2b00      	cmp	r3, #0
 8011380:	d022      	beq.n	80113c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801138a:	e853 3f00 	ldrex	r3, [r3]
 801138e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011396:	653b      	str	r3, [r7, #80]	; 0x50
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	461a      	mov	r2, r3
 801139e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113a0:	647b      	str	r3, [r7, #68]	; 0x44
 80113a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80113a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80113a8:	e841 2300 	strex	r3, r2, [r1]
 80113ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80113ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d1e6      	bne.n	8011382 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2220      	movs	r2, #32
 80113b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2200      	movs	r2, #0
 80113c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80113c4:	2303      	movs	r3, #3
 80113c6:	e063      	b.n	8011490 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	f003 0304 	and.w	r3, r3, #4
 80113d2:	2b04      	cmp	r3, #4
 80113d4:	d149      	bne.n	801146a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80113d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80113da:	9300      	str	r3, [sp, #0]
 80113dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113de:	2200      	movs	r2, #0
 80113e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f000 f857 	bl	8011498 <UART_WaitOnFlagUntilTimeout>
 80113ea:	4603      	mov	r3, r0
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d03c      	beq.n	801146a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f8:	e853 3f00 	ldrex	r3, [r3]
 80113fc:	623b      	str	r3, [r7, #32]
   return(result);
 80113fe:	6a3b      	ldr	r3, [r7, #32]
 8011400:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011404:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	461a      	mov	r2, r3
 801140c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801140e:	633b      	str	r3, [r7, #48]	; 0x30
 8011410:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011412:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011416:	e841 2300 	strex	r3, r2, [r1]
 801141a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141e:	2b00      	cmp	r3, #0
 8011420:	d1e6      	bne.n	80113f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	3308      	adds	r3, #8
 8011428:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	e853 3f00 	ldrex	r3, [r3]
 8011430:	60fb      	str	r3, [r7, #12]
   return(result);
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	f023 0301 	bic.w	r3, r3, #1
 8011438:	64bb      	str	r3, [r7, #72]	; 0x48
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	3308      	adds	r3, #8
 8011440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011442:	61fa      	str	r2, [r7, #28]
 8011444:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011446:	69b9      	ldr	r1, [r7, #24]
 8011448:	69fa      	ldr	r2, [r7, #28]
 801144a:	e841 2300 	strex	r3, r2, [r1]
 801144e:	617b      	str	r3, [r7, #20]
   return(result);
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d1e5      	bne.n	8011422 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	2220      	movs	r2, #32
 801145a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2200      	movs	r2, #0
 8011462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011466:	2303      	movs	r3, #3
 8011468:	e012      	b.n	8011490 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2220      	movs	r2, #32
 801146e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2220      	movs	r2, #32
 8011476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	2200      	movs	r2, #0
 801147e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2200      	movs	r2, #0
 8011484:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2200      	movs	r2, #0
 801148a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801148e:	2300      	movs	r3, #0
}
 8011490:	4618      	mov	r0, r3
 8011492:	3758      	adds	r7, #88	; 0x58
 8011494:	46bd      	mov	sp, r7
 8011496:	bd80      	pop	{r7, pc}

08011498 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b084      	sub	sp, #16
 801149c:	af00      	add	r7, sp, #0
 801149e:	60f8      	str	r0, [r7, #12]
 80114a0:	60b9      	str	r1, [r7, #8]
 80114a2:	603b      	str	r3, [r7, #0]
 80114a4:	4613      	mov	r3, r2
 80114a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80114a8:	e04f      	b.n	801154a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80114aa:	69bb      	ldr	r3, [r7, #24]
 80114ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114b0:	d04b      	beq.n	801154a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80114b2:	f7f2 fac3 	bl	8003a3c <HAL_GetTick>
 80114b6:	4602      	mov	r2, r0
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	1ad3      	subs	r3, r2, r3
 80114bc:	69ba      	ldr	r2, [r7, #24]
 80114be:	429a      	cmp	r2, r3
 80114c0:	d302      	bcc.n	80114c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80114c2:	69bb      	ldr	r3, [r7, #24]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d101      	bne.n	80114cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80114c8:	2303      	movs	r3, #3
 80114ca:	e04e      	b.n	801156a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	f003 0304 	and.w	r3, r3, #4
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d037      	beq.n	801154a <UART_WaitOnFlagUntilTimeout+0xb2>
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	2b80      	cmp	r3, #128	; 0x80
 80114de:	d034      	beq.n	801154a <UART_WaitOnFlagUntilTimeout+0xb2>
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	2b40      	cmp	r3, #64	; 0x40
 80114e4:	d031      	beq.n	801154a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	69db      	ldr	r3, [r3, #28]
 80114ec:	f003 0308 	and.w	r3, r3, #8
 80114f0:	2b08      	cmp	r3, #8
 80114f2:	d110      	bne.n	8011516 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	2208      	movs	r2, #8
 80114fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80114fc:	68f8      	ldr	r0, [r7, #12]
 80114fe:	f000 f99d 	bl	801183c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	2208      	movs	r2, #8
 8011506:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	2200      	movs	r2, #0
 801150e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011512:	2301      	movs	r3, #1
 8011514:	e029      	b.n	801156a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	69db      	ldr	r3, [r3, #28]
 801151c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011524:	d111      	bne.n	801154a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801152e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011530:	68f8      	ldr	r0, [r7, #12]
 8011532:	f000 f983 	bl	801183c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	2220      	movs	r2, #32
 801153a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	2200      	movs	r2, #0
 8011542:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011546:	2303      	movs	r3, #3
 8011548:	e00f      	b.n	801156a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	69da      	ldr	r2, [r3, #28]
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	4013      	ands	r3, r2
 8011554:	68ba      	ldr	r2, [r7, #8]
 8011556:	429a      	cmp	r2, r3
 8011558:	bf0c      	ite	eq
 801155a:	2301      	moveq	r3, #1
 801155c:	2300      	movne	r3, #0
 801155e:	b2db      	uxtb	r3, r3
 8011560:	461a      	mov	r2, r3
 8011562:	79fb      	ldrb	r3, [r7, #7]
 8011564:	429a      	cmp	r2, r3
 8011566:	d0a0      	beq.n	80114aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011568:	2300      	movs	r3, #0
}
 801156a:	4618      	mov	r0, r3
 801156c:	3710      	adds	r7, #16
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}
	...

08011574 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011574:	b480      	push	{r7}
 8011576:	b0a3      	sub	sp, #140	; 0x8c
 8011578:	af00      	add	r7, sp, #0
 801157a:	60f8      	str	r0, [r7, #12]
 801157c:	60b9      	str	r1, [r7, #8]
 801157e:	4613      	mov	r3, r2
 8011580:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	68ba      	ldr	r2, [r7, #8]
 8011586:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	88fa      	ldrh	r2, [r7, #6]
 801158c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	88fa      	ldrh	r2, [r7, #6]
 8011594:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	2200      	movs	r2, #0
 801159c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	689b      	ldr	r3, [r3, #8]
 80115a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115a6:	d10e      	bne.n	80115c6 <UART_Start_Receive_IT+0x52>
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	691b      	ldr	r3, [r3, #16]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d105      	bne.n	80115bc <UART_Start_Receive_IT+0x48>
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80115b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80115ba:	e02d      	b.n	8011618 <UART_Start_Receive_IT+0xa4>
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	22ff      	movs	r2, #255	; 0xff
 80115c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80115c4:	e028      	b.n	8011618 <UART_Start_Receive_IT+0xa4>
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	689b      	ldr	r3, [r3, #8]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d10d      	bne.n	80115ea <UART_Start_Receive_IT+0x76>
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	691b      	ldr	r3, [r3, #16]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d104      	bne.n	80115e0 <UART_Start_Receive_IT+0x6c>
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	22ff      	movs	r2, #255	; 0xff
 80115da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80115de:	e01b      	b.n	8011618 <UART_Start_Receive_IT+0xa4>
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	227f      	movs	r2, #127	; 0x7f
 80115e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80115e8:	e016      	b.n	8011618 <UART_Start_Receive_IT+0xa4>
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	689b      	ldr	r3, [r3, #8]
 80115ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80115f2:	d10d      	bne.n	8011610 <UART_Start_Receive_IT+0x9c>
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	691b      	ldr	r3, [r3, #16]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d104      	bne.n	8011606 <UART_Start_Receive_IT+0x92>
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	227f      	movs	r2, #127	; 0x7f
 8011600:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011604:	e008      	b.n	8011618 <UART_Start_Receive_IT+0xa4>
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	223f      	movs	r2, #63	; 0x3f
 801160a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801160e:	e003      	b.n	8011618 <UART_Start_Receive_IT+0xa4>
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	2200      	movs	r2, #0
 8011614:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	2200      	movs	r2, #0
 801161c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	2222      	movs	r2, #34	; 0x22
 8011624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	3308      	adds	r3, #8
 801162e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011632:	e853 3f00 	ldrex	r3, [r3]
 8011636:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011638:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801163a:	f043 0301 	orr.w	r3, r3, #1
 801163e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	3308      	adds	r3, #8
 8011648:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801164c:	673a      	str	r2, [r7, #112]	; 0x70
 801164e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011650:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011652:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011654:	e841 2300 	strex	r3, r2, [r1]
 8011658:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801165a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801165c:	2b00      	cmp	r3, #0
 801165e:	d1e3      	bne.n	8011628 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011668:	d14f      	bne.n	801170a <UART_Start_Receive_IT+0x196>
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011670:	88fa      	ldrh	r2, [r7, #6]
 8011672:	429a      	cmp	r2, r3
 8011674:	d349      	bcc.n	801170a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	689b      	ldr	r3, [r3, #8]
 801167a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801167e:	d107      	bne.n	8011690 <UART_Start_Receive_IT+0x11c>
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	691b      	ldr	r3, [r3, #16]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d103      	bne.n	8011690 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	4a47      	ldr	r2, [pc, #284]	; (80117a8 <UART_Start_Receive_IT+0x234>)
 801168c:	675a      	str	r2, [r3, #116]	; 0x74
 801168e:	e002      	b.n	8011696 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	4a46      	ldr	r2, [pc, #280]	; (80117ac <UART_Start_Receive_IT+0x238>)
 8011694:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	691b      	ldr	r3, [r3, #16]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d01a      	beq.n	80116d4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116a6:	e853 3f00 	ldrex	r3, [r3]
 80116aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80116ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80116b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	461a      	mov	r2, r3
 80116bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80116c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80116c2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80116c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80116c8:	e841 2300 	strex	r3, r2, [r1]
 80116cc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80116ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d1e4      	bne.n	801169e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	3308      	adds	r3, #8
 80116da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116de:	e853 3f00 	ldrex	r3, [r3]
 80116e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80116e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80116ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	3308      	adds	r3, #8
 80116f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80116f4:	64ba      	str	r2, [r7, #72]	; 0x48
 80116f6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80116fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80116fc:	e841 2300 	strex	r3, r2, [r1]
 8011700:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011704:	2b00      	cmp	r3, #0
 8011706:	d1e5      	bne.n	80116d4 <UART_Start_Receive_IT+0x160>
 8011708:	e046      	b.n	8011798 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	689b      	ldr	r3, [r3, #8]
 801170e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011712:	d107      	bne.n	8011724 <UART_Start_Receive_IT+0x1b0>
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	691b      	ldr	r3, [r3, #16]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d103      	bne.n	8011724 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	4a24      	ldr	r2, [pc, #144]	; (80117b0 <UART_Start_Receive_IT+0x23c>)
 8011720:	675a      	str	r2, [r3, #116]	; 0x74
 8011722:	e002      	b.n	801172a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	4a23      	ldr	r2, [pc, #140]	; (80117b4 <UART_Start_Receive_IT+0x240>)
 8011728:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	691b      	ldr	r3, [r3, #16]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d019      	beq.n	8011766 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801173a:	e853 3f00 	ldrex	r3, [r3]
 801173e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011742:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011746:	677b      	str	r3, [r7, #116]	; 0x74
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	461a      	mov	r2, r3
 801174e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011750:	637b      	str	r3, [r7, #52]	; 0x34
 8011752:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011754:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011758:	e841 2300 	strex	r3, r2, [r1]
 801175c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011760:	2b00      	cmp	r3, #0
 8011762:	d1e6      	bne.n	8011732 <UART_Start_Receive_IT+0x1be>
 8011764:	e018      	b.n	8011798 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	e853 3f00 	ldrex	r3, [r3]
 8011772:	613b      	str	r3, [r7, #16]
   return(result);
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	f043 0320 	orr.w	r3, r3, #32
 801177a:	67bb      	str	r3, [r7, #120]	; 0x78
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	461a      	mov	r2, r3
 8011782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011784:	623b      	str	r3, [r7, #32]
 8011786:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011788:	69f9      	ldr	r1, [r7, #28]
 801178a:	6a3a      	ldr	r2, [r7, #32]
 801178c:	e841 2300 	strex	r3, r2, [r1]
 8011790:	61bb      	str	r3, [r7, #24]
   return(result);
 8011792:	69bb      	ldr	r3, [r7, #24]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d1e6      	bne.n	8011766 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011798:	2300      	movs	r3, #0
}
 801179a:	4618      	mov	r0, r3
 801179c:	378c      	adds	r7, #140	; 0x8c
 801179e:	46bd      	mov	sp, r7
 80117a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a4:	4770      	bx	lr
 80117a6:	bf00      	nop
 80117a8:	0801218d 	.word	0x0801218d
 80117ac:	08011e2d 	.word	0x08011e2d
 80117b0:	08011c75 	.word	0x08011c75
 80117b4:	08011abd 	.word	0x08011abd

080117b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b08f      	sub	sp, #60	; 0x3c
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117c6:	6a3b      	ldr	r3, [r7, #32]
 80117c8:	e853 3f00 	ldrex	r3, [r3]
 80117cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80117d4:	637b      	str	r3, [r7, #52]	; 0x34
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	461a      	mov	r2, r3
 80117dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80117e0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80117e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117e6:	e841 2300 	strex	r3, r2, [r1]
 80117ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80117ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d1e6      	bne.n	80117c0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	3308      	adds	r3, #8
 80117f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	e853 3f00 	ldrex	r3, [r3]
 8011800:	60bb      	str	r3, [r7, #8]
   return(result);
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011808:	633b      	str	r3, [r7, #48]	; 0x30
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	3308      	adds	r3, #8
 8011810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011812:	61ba      	str	r2, [r7, #24]
 8011814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011816:	6979      	ldr	r1, [r7, #20]
 8011818:	69ba      	ldr	r2, [r7, #24]
 801181a:	e841 2300 	strex	r3, r2, [r1]
 801181e:	613b      	str	r3, [r7, #16]
   return(result);
 8011820:	693b      	ldr	r3, [r7, #16]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d1e5      	bne.n	80117f2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2220      	movs	r2, #32
 801182a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801182e:	bf00      	nop
 8011830:	373c      	adds	r7, #60	; 0x3c
 8011832:	46bd      	mov	sp, r7
 8011834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011838:	4770      	bx	lr
	...

0801183c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801183c:	b480      	push	{r7}
 801183e:	b095      	sub	sp, #84	; 0x54
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801184a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801184c:	e853 3f00 	ldrex	r3, [r3]
 8011850:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011854:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011858:	64fb      	str	r3, [r7, #76]	; 0x4c
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	461a      	mov	r2, r3
 8011860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011862:	643b      	str	r3, [r7, #64]	; 0x40
 8011864:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011866:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011868:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801186a:	e841 2300 	strex	r3, r2, [r1]
 801186e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011872:	2b00      	cmp	r3, #0
 8011874:	d1e6      	bne.n	8011844 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	3308      	adds	r3, #8
 801187c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801187e:	6a3b      	ldr	r3, [r7, #32]
 8011880:	e853 3f00 	ldrex	r3, [r3]
 8011884:	61fb      	str	r3, [r7, #28]
   return(result);
 8011886:	69fa      	ldr	r2, [r7, #28]
 8011888:	4b1e      	ldr	r3, [pc, #120]	; (8011904 <UART_EndRxTransfer+0xc8>)
 801188a:	4013      	ands	r3, r2
 801188c:	64bb      	str	r3, [r7, #72]	; 0x48
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	3308      	adds	r3, #8
 8011894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011898:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801189a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801189c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801189e:	e841 2300 	strex	r3, r2, [r1]
 80118a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80118a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d1e5      	bne.n	8011876 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118ae:	2b01      	cmp	r3, #1
 80118b0:	d118      	bne.n	80118e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	e853 3f00 	ldrex	r3, [r3]
 80118be:	60bb      	str	r3, [r7, #8]
   return(result);
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	f023 0310 	bic.w	r3, r3, #16
 80118c6:	647b      	str	r3, [r7, #68]	; 0x44
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	461a      	mov	r2, r3
 80118ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118d0:	61bb      	str	r3, [r7, #24]
 80118d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118d4:	6979      	ldr	r1, [r7, #20]
 80118d6:	69ba      	ldr	r2, [r7, #24]
 80118d8:	e841 2300 	strex	r3, r2, [r1]
 80118dc:	613b      	str	r3, [r7, #16]
   return(result);
 80118de:	693b      	ldr	r3, [r7, #16]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d1e6      	bne.n	80118b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	2220      	movs	r2, #32
 80118e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	2200      	movs	r2, #0
 80118f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	2200      	movs	r2, #0
 80118f6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80118f8:	bf00      	nop
 80118fa:	3754      	adds	r7, #84	; 0x54
 80118fc:	46bd      	mov	sp, r7
 80118fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011902:	4770      	bx	lr
 8011904:	effffffe 	.word	0xeffffffe

08011908 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b090      	sub	sp, #64	; 0x40
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011914:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	69db      	ldr	r3, [r3, #28]
 801191a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801191e:	d037      	beq.n	8011990 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011922:	2200      	movs	r2, #0
 8011924:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	3308      	adds	r3, #8
 801192e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011932:	e853 3f00 	ldrex	r3, [r3]
 8011936:	623b      	str	r3, [r7, #32]
   return(result);
 8011938:	6a3b      	ldr	r3, [r7, #32]
 801193a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801193e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	3308      	adds	r3, #8
 8011946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011948:	633a      	str	r2, [r7, #48]	; 0x30
 801194a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801194c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801194e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011950:	e841 2300 	strex	r3, r2, [r1]
 8011954:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011958:	2b00      	cmp	r3, #0
 801195a:	d1e5      	bne.n	8011928 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801195c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	e853 3f00 	ldrex	r3, [r3]
 8011968:	60fb      	str	r3, [r7, #12]
   return(result);
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011970:	637b      	str	r3, [r7, #52]	; 0x34
 8011972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	461a      	mov	r2, r3
 8011978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801197a:	61fb      	str	r3, [r7, #28]
 801197c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801197e:	69b9      	ldr	r1, [r7, #24]
 8011980:	69fa      	ldr	r2, [r7, #28]
 8011982:	e841 2300 	strex	r3, r2, [r1]
 8011986:	617b      	str	r3, [r7, #20]
   return(result);
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d1e6      	bne.n	801195c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801198e:	e002      	b.n	8011996 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011990:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011992:	f7f0 fac5 	bl	8001f20 <HAL_UART_TxCpltCallback>
}
 8011996:	bf00      	nop
 8011998:	3740      	adds	r7, #64	; 0x40
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}

0801199e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801199e:	b580      	push	{r7, lr}
 80119a0:	b084      	sub	sp, #16
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80119ac:	68f8      	ldr	r0, [r7, #12]
 80119ae:	f7fe fe9f 	bl	80106f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80119b2:	bf00      	nop
 80119b4:	3710      	adds	r7, #16
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}

080119ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80119ba:	b580      	push	{r7, lr}
 80119bc:	b086      	sub	sp, #24
 80119be:	af00      	add	r7, sp, #0
 80119c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80119c8:	697b      	ldr	r3, [r7, #20]
 80119ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80119d6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	689b      	ldr	r3, [r3, #8]
 80119de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119e2:	2b80      	cmp	r3, #128	; 0x80
 80119e4:	d109      	bne.n	80119fa <UART_DMAError+0x40>
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	2b21      	cmp	r3, #33	; 0x21
 80119ea:	d106      	bne.n	80119fa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	2200      	movs	r2, #0
 80119f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80119f4:	6978      	ldr	r0, [r7, #20]
 80119f6:	f7ff fedf 	bl	80117b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	689b      	ldr	r3, [r3, #8]
 8011a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a04:	2b40      	cmp	r3, #64	; 0x40
 8011a06:	d109      	bne.n	8011a1c <UART_DMAError+0x62>
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	2b22      	cmp	r3, #34	; 0x22
 8011a0c:	d106      	bne.n	8011a1c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011a0e:	697b      	ldr	r3, [r7, #20]
 8011a10:	2200      	movs	r2, #0
 8011a12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011a16:	6978      	ldr	r0, [r7, #20]
 8011a18:	f7ff ff10 	bl	801183c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011a1c:	697b      	ldr	r3, [r7, #20]
 8011a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a22:	f043 0210 	orr.w	r2, r3, #16
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011a2c:	6978      	ldr	r0, [r7, #20]
 8011a2e:	f7fe fe69 	bl	8010704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a32:	bf00      	nop
 8011a34:	3718      	adds	r7, #24
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}

08011a3a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011a3a:	b580      	push	{r7, lr}
 8011a3c:	b084      	sub	sp, #16
 8011a3e:	af00      	add	r7, sp, #0
 8011a40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	2200      	movs	r2, #0
 8011a54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011a58:	68f8      	ldr	r0, [r7, #12]
 8011a5a:	f7fe fe53 	bl	8010704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a5e:	bf00      	nop
 8011a60:	3710      	adds	r7, #16
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}

08011a66 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011a66:	b580      	push	{r7, lr}
 8011a68:	b088      	sub	sp, #32
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	e853 3f00 	ldrex	r3, [r3]
 8011a7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a82:	61fb      	str	r3, [r7, #28]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	461a      	mov	r2, r3
 8011a8a:	69fb      	ldr	r3, [r7, #28]
 8011a8c:	61bb      	str	r3, [r7, #24]
 8011a8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a90:	6979      	ldr	r1, [r7, #20]
 8011a92:	69ba      	ldr	r2, [r7, #24]
 8011a94:	e841 2300 	strex	r3, r2, [r1]
 8011a98:	613b      	str	r3, [r7, #16]
   return(result);
 8011a9a:	693b      	ldr	r3, [r7, #16]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d1e6      	bne.n	8011a6e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2220      	movs	r2, #32
 8011aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2200      	movs	r2, #0
 8011aac:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011aae:	6878      	ldr	r0, [r7, #4]
 8011ab0:	f7f0 fa36 	bl	8001f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011ab4:	bf00      	nop
 8011ab6:	3720      	adds	r7, #32
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	bd80      	pop	{r7, pc}

08011abc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b09c      	sub	sp, #112	; 0x70
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011aca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ad4:	2b22      	cmp	r3, #34	; 0x22
 8011ad6:	f040 80be 	bne.w	8011c56 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ae0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011ae4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011ae8:	b2d9      	uxtb	r1, r3
 8011aea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011aee:	b2da      	uxtb	r2, r3
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011af4:	400a      	ands	r2, r1
 8011af6:	b2d2      	uxtb	r2, r2
 8011af8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011afe:	1c5a      	adds	r2, r3, #1
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	3b01      	subs	r3, #1
 8011b0e:	b29a      	uxth	r2, r3
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011b1c:	b29b      	uxth	r3, r3
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	f040 80a1 	bne.w	8011c66 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b2c:	e853 3f00 	ldrex	r3, [r3]
 8011b30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	461a      	mov	r2, r3
 8011b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b42:	65bb      	str	r3, [r7, #88]	; 0x58
 8011b44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011b48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011b4a:	e841 2300 	strex	r3, r2, [r1]
 8011b4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d1e6      	bne.n	8011b24 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	3308      	adds	r3, #8
 8011b5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b60:	e853 3f00 	ldrex	r3, [r3]
 8011b64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b68:	f023 0301 	bic.w	r3, r3, #1
 8011b6c:	667b      	str	r3, [r7, #100]	; 0x64
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	3308      	adds	r3, #8
 8011b74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011b76:	647a      	str	r2, [r7, #68]	; 0x44
 8011b78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011b7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b7e:	e841 2300 	strex	r3, r2, [r1]
 8011b82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d1e5      	bne.n	8011b56 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2220      	movs	r2, #32
 8011b8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2200      	movs	r2, #0
 8011b96:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	4a33      	ldr	r2, [pc, #204]	; (8011c70 <UART_RxISR_8BIT+0x1b4>)
 8011ba4:	4293      	cmp	r3, r2
 8011ba6:	d01f      	beq.n	8011be8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	685b      	ldr	r3, [r3, #4]
 8011bae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d018      	beq.n	8011be8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bbe:	e853 3f00 	ldrex	r3, [r3]
 8011bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8011bc4:	6a3b      	ldr	r3, [r7, #32]
 8011bc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011bca:	663b      	str	r3, [r7, #96]	; 0x60
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	461a      	mov	r2, r3
 8011bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8011bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bdc:	e841 2300 	strex	r3, r2, [r1]
 8011be0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d1e6      	bne.n	8011bb6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bec:	2b01      	cmp	r3, #1
 8011bee:	d12e      	bne.n	8011c4e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bfc:	693b      	ldr	r3, [r7, #16]
 8011bfe:	e853 3f00 	ldrex	r3, [r3]
 8011c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	f023 0310 	bic.w	r3, r3, #16
 8011c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	461a      	mov	r2, r3
 8011c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c14:	61fb      	str	r3, [r7, #28]
 8011c16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c18:	69b9      	ldr	r1, [r7, #24]
 8011c1a:	69fa      	ldr	r2, [r7, #28]
 8011c1c:	e841 2300 	strex	r3, r2, [r1]
 8011c20:	617b      	str	r3, [r7, #20]
   return(result);
 8011c22:	697b      	ldr	r3, [r7, #20]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d1e6      	bne.n	8011bf6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	69db      	ldr	r3, [r3, #28]
 8011c2e:	f003 0310 	and.w	r3, r3, #16
 8011c32:	2b10      	cmp	r3, #16
 8011c34:	d103      	bne.n	8011c3e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	2210      	movs	r2, #16
 8011c3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011c44:	4619      	mov	r1, r3
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f7fe fd66 	bl	8010718 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011c4c:	e00b      	b.n	8011c66 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	f7ee fd06 	bl	8000660 <HAL_UART_RxCpltCallback>
}
 8011c54:	e007      	b.n	8011c66 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	699a      	ldr	r2, [r3, #24]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f042 0208 	orr.w	r2, r2, #8
 8011c64:	619a      	str	r2, [r3, #24]
}
 8011c66:	bf00      	nop
 8011c68:	3770      	adds	r7, #112	; 0x70
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}
 8011c6e:	bf00      	nop
 8011c70:	58000c00 	.word	0x58000c00

08011c74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b09c      	sub	sp, #112	; 0x70
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011c82:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c8c:	2b22      	cmp	r3, #34	; 0x22
 8011c8e:	f040 80be 	bne.w	8011e0e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c98:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ca0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011ca2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011ca6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011caa:	4013      	ands	r3, r2
 8011cac:	b29a      	uxth	r2, r3
 8011cae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011cb0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011cb6:	1c9a      	adds	r2, r3, #2
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	3b01      	subs	r3, #1
 8011cc6:	b29a      	uxth	r2, r3
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011cd4:	b29b      	uxth	r3, r3
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	f040 80a1 	bne.w	8011e1e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ce4:	e853 3f00 	ldrex	r3, [r3]
 8011ce8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011cf0:	667b      	str	r3, [r7, #100]	; 0x64
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011cfa:	657b      	str	r3, [r7, #84]	; 0x54
 8011cfc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011d00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011d02:	e841 2300 	strex	r3, r2, [r1]
 8011d06:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d1e6      	bne.n	8011cdc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	3308      	adds	r3, #8
 8011d14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d18:	e853 3f00 	ldrex	r3, [r3]
 8011d1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d20:	f023 0301 	bic.w	r3, r3, #1
 8011d24:	663b      	str	r3, [r7, #96]	; 0x60
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	3308      	adds	r3, #8
 8011d2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011d2e:	643a      	str	r2, [r7, #64]	; 0x40
 8011d30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011d34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011d36:	e841 2300 	strex	r3, r2, [r1]
 8011d3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d1e5      	bne.n	8011d0e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2220      	movs	r2, #32
 8011d46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2200      	movs	r2, #0
 8011d54:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	4a33      	ldr	r2, [pc, #204]	; (8011e28 <UART_RxISR_16BIT+0x1b4>)
 8011d5c:	4293      	cmp	r3, r2
 8011d5e:	d01f      	beq.n	8011da0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d018      	beq.n	8011da0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d74:	6a3b      	ldr	r3, [r7, #32]
 8011d76:	e853 3f00 	ldrex	r3, [r3]
 8011d7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d7c:	69fb      	ldr	r3, [r7, #28]
 8011d7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	461a      	mov	r2, r3
 8011d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d8e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d94:	e841 2300 	strex	r3, r2, [r1]
 8011d98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d1e6      	bne.n	8011d6e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011da4:	2b01      	cmp	r3, #1
 8011da6:	d12e      	bne.n	8011e06 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2200      	movs	r2, #0
 8011dac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	e853 3f00 	ldrex	r3, [r3]
 8011dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	f023 0310 	bic.w	r3, r3, #16
 8011dc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	461a      	mov	r2, r3
 8011dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011dcc:	61bb      	str	r3, [r7, #24]
 8011dce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dd0:	6979      	ldr	r1, [r7, #20]
 8011dd2:	69ba      	ldr	r2, [r7, #24]
 8011dd4:	e841 2300 	strex	r3, r2, [r1]
 8011dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d1e6      	bne.n	8011dae <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	69db      	ldr	r3, [r3, #28]
 8011de6:	f003 0310 	and.w	r3, r3, #16
 8011dea:	2b10      	cmp	r3, #16
 8011dec:	d103      	bne.n	8011df6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	2210      	movs	r2, #16
 8011df4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011dfc:	4619      	mov	r1, r3
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f7fe fc8a 	bl	8010718 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011e04:	e00b      	b.n	8011e1e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f7ee fc2a 	bl	8000660 <HAL_UART_RxCpltCallback>
}
 8011e0c:	e007      	b.n	8011e1e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	699a      	ldr	r2, [r3, #24]
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	f042 0208 	orr.w	r2, r2, #8
 8011e1c:	619a      	str	r2, [r3, #24]
}
 8011e1e:	bf00      	nop
 8011e20:	3770      	adds	r7, #112	; 0x70
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}
 8011e26:	bf00      	nop
 8011e28:	58000c00 	.word	0x58000c00

08011e2c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b0ac      	sub	sp, #176	; 0xb0
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e3a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	69db      	ldr	r3, [r3, #28]
 8011e44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	689b      	ldr	r3, [r3, #8]
 8011e58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e62:	2b22      	cmp	r3, #34	; 0x22
 8011e64:	f040 8180 	bne.w	8012168 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011e6e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011e72:	e123      	b.n	80120bc <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e7a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011e7e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011e82:	b2d9      	uxtb	r1, r3
 8011e84:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8011e88:	b2da      	uxtb	r2, r3
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e8e:	400a      	ands	r2, r1
 8011e90:	b2d2      	uxtb	r2, r2
 8011e92:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e98:	1c5a      	adds	r2, r3, #1
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011ea4:	b29b      	uxth	r3, r3
 8011ea6:	3b01      	subs	r3, #1
 8011ea8:	b29a      	uxth	r2, r3
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	69db      	ldr	r3, [r3, #28]
 8011eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ebe:	f003 0307 	and.w	r3, r3, #7
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d053      	beq.n	8011f6e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011ec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011eca:	f003 0301 	and.w	r3, r3, #1
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d011      	beq.n	8011ef6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8011ed2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d00b      	beq.n	8011ef6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	2201      	movs	r2, #1
 8011ee4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011eec:	f043 0201 	orr.w	r2, r3, #1
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011efa:	f003 0302 	and.w	r3, r3, #2
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d011      	beq.n	8011f26 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011f06:	f003 0301 	and.w	r3, r3, #1
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d00b      	beq.n	8011f26 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	2202      	movs	r2, #2
 8011f14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f1c:	f043 0204 	orr.w	r2, r3, #4
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011f2a:	f003 0304 	and.w	r3, r3, #4
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d011      	beq.n	8011f56 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011f36:	f003 0301 	and.w	r3, r3, #1
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d00b      	beq.n	8011f56 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	2204      	movs	r2, #4
 8011f44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f4c:	f043 0202 	orr.w	r2, r3, #2
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d006      	beq.n	8011f6e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f7fe fbcf 	bl	8010704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2200      	movs	r2, #0
 8011f6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011f74:	b29b      	uxth	r3, r3
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	f040 80a0 	bne.w	80120bc <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f84:	e853 3f00 	ldrex	r3, [r3]
 8011f88:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8011f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011f90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	461a      	mov	r2, r3
 8011f9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011fa0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fa2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011fa4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011fa6:	e841 2300 	strex	r3, r2, [r1]
 8011faa:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8011fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d1e4      	bne.n	8011f7c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	3308      	adds	r3, #8
 8011fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011fbc:	e853 3f00 	ldrex	r3, [r3]
 8011fc0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8011fc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011fc4:	4b6e      	ldr	r3, [pc, #440]	; (8012180 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8011fc6:	4013      	ands	r3, r2
 8011fc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	3308      	adds	r3, #8
 8011fd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011fd6:	66ba      	str	r2, [r7, #104]	; 0x68
 8011fd8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fda:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011fdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011fde:	e841 2300 	strex	r3, r2, [r1]
 8011fe2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011fe4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d1e3      	bne.n	8011fb2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	2220      	movs	r2, #32
 8011fee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	4a60      	ldr	r2, [pc, #384]	; (8012184 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012004:	4293      	cmp	r3, r2
 8012006:	d021      	beq.n	801204c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	685b      	ldr	r3, [r3, #4]
 801200e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012012:	2b00      	cmp	r3, #0
 8012014:	d01a      	beq.n	801204c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801201c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801201e:	e853 3f00 	ldrex	r3, [r3]
 8012022:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012026:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801202a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	461a      	mov	r2, r3
 8012034:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012038:	657b      	str	r3, [r7, #84]	; 0x54
 801203a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801203c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801203e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012040:	e841 2300 	strex	r3, r2, [r1]
 8012044:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012048:	2b00      	cmp	r3, #0
 801204a:	d1e4      	bne.n	8012016 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012050:	2b01      	cmp	r3, #1
 8012052:	d130      	bne.n	80120b6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2200      	movs	r2, #0
 8012058:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012062:	e853 3f00 	ldrex	r3, [r3]
 8012066:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801206a:	f023 0310 	bic.w	r3, r3, #16
 801206e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	461a      	mov	r2, r3
 8012078:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801207c:	643b      	str	r3, [r7, #64]	; 0x40
 801207e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012080:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012082:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012084:	e841 2300 	strex	r3, r2, [r1]
 8012088:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801208a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801208c:	2b00      	cmp	r3, #0
 801208e:	d1e4      	bne.n	801205a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	69db      	ldr	r3, [r3, #28]
 8012096:	f003 0310 	and.w	r3, r3, #16
 801209a:	2b10      	cmp	r3, #16
 801209c:	d103      	bne.n	80120a6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	2210      	movs	r2, #16
 80120a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80120ac:	4619      	mov	r1, r3
 80120ae:	6878      	ldr	r0, [r7, #4]
 80120b0:	f7fe fb32 	bl	8010718 <HAL_UARTEx_RxEventCallback>
 80120b4:	e002      	b.n	80120bc <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f7ee fad2 	bl	8000660 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80120bc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d006      	beq.n	80120d2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80120c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80120c8:	f003 0320 	and.w	r3, r3, #32
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	f47f aed1 	bne.w	8011e74 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80120d8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80120dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d049      	beq.n	8012178 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80120ea:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80120ee:	429a      	cmp	r2, r3
 80120f0:	d242      	bcs.n	8012178 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	3308      	adds	r3, #8
 80120f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120fa:	6a3b      	ldr	r3, [r7, #32]
 80120fc:	e853 3f00 	ldrex	r3, [r3]
 8012100:	61fb      	str	r3, [r7, #28]
   return(result);
 8012102:	69fb      	ldr	r3, [r7, #28]
 8012104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	3308      	adds	r3, #8
 8012112:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012116:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012118:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801211a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801211c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801211e:	e841 2300 	strex	r3, r2, [r1]
 8012122:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012126:	2b00      	cmp	r3, #0
 8012128:	d1e3      	bne.n	80120f2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	4a16      	ldr	r2, [pc, #88]	; (8012188 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801212e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	e853 3f00 	ldrex	r3, [r3]
 801213c:	60bb      	str	r3, [r7, #8]
   return(result);
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	f043 0320 	orr.w	r3, r3, #32
 8012144:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	461a      	mov	r2, r3
 801214e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012152:	61bb      	str	r3, [r7, #24]
 8012154:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012156:	6979      	ldr	r1, [r7, #20]
 8012158:	69ba      	ldr	r2, [r7, #24]
 801215a:	e841 2300 	strex	r3, r2, [r1]
 801215e:	613b      	str	r3, [r7, #16]
   return(result);
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d1e4      	bne.n	8012130 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012166:	e007      	b.n	8012178 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	699a      	ldr	r2, [r3, #24]
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	f042 0208 	orr.w	r2, r2, #8
 8012176:	619a      	str	r2, [r3, #24]
}
 8012178:	bf00      	nop
 801217a:	37b0      	adds	r7, #176	; 0xb0
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}
 8012180:	effffffe 	.word	0xeffffffe
 8012184:	58000c00 	.word	0x58000c00
 8012188:	08011abd 	.word	0x08011abd

0801218c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b0ae      	sub	sp, #184	; 0xb8
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801219a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	69db      	ldr	r3, [r3, #28]
 80121a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	689b      	ldr	r3, [r3, #8]
 80121b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80121c2:	2b22      	cmp	r3, #34	; 0x22
 80121c4:	f040 8184 	bne.w	80124d0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80121ce:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80121d2:	e127      	b.n	8012424 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121da:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80121e6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80121ea:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80121ee:	4013      	ands	r3, r2
 80121f0:	b29a      	uxth	r2, r3
 80121f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80121f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121fc:	1c9a      	adds	r2, r3, #2
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012208:	b29b      	uxth	r3, r3
 801220a:	3b01      	subs	r3, #1
 801220c:	b29a      	uxth	r2, r3
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	69db      	ldr	r3, [r3, #28]
 801221a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801221e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012222:	f003 0307 	and.w	r3, r3, #7
 8012226:	2b00      	cmp	r3, #0
 8012228:	d053      	beq.n	80122d2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801222a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801222e:	f003 0301 	and.w	r3, r3, #1
 8012232:	2b00      	cmp	r3, #0
 8012234:	d011      	beq.n	801225a <UART_RxISR_16BIT_FIFOEN+0xce>
 8012236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801223e:	2b00      	cmp	r3, #0
 8012240:	d00b      	beq.n	801225a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	2201      	movs	r2, #1
 8012248:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012250:	f043 0201 	orr.w	r2, r3, #1
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801225a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801225e:	f003 0302 	and.w	r3, r3, #2
 8012262:	2b00      	cmp	r3, #0
 8012264:	d011      	beq.n	801228a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801226a:	f003 0301 	and.w	r3, r3, #1
 801226e:	2b00      	cmp	r3, #0
 8012270:	d00b      	beq.n	801228a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	2202      	movs	r2, #2
 8012278:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012280:	f043 0204 	orr.w	r2, r3, #4
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801228a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801228e:	f003 0304 	and.w	r3, r3, #4
 8012292:	2b00      	cmp	r3, #0
 8012294:	d011      	beq.n	80122ba <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012296:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801229a:	f003 0301 	and.w	r3, r3, #1
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d00b      	beq.n	80122ba <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	2204      	movs	r2, #4
 80122a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122b0:	f043 0202 	orr.w	r2, r3, #2
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d006      	beq.n	80122d2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80122c4:	6878      	ldr	r0, [r7, #4]
 80122c6:	f7fe fa1d 	bl	8010704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2200      	movs	r2, #0
 80122ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122d8:	b29b      	uxth	r3, r3
 80122da:	2b00      	cmp	r3, #0
 80122dc:	f040 80a2 	bne.w	8012424 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80122e8:	e853 3f00 	ldrex	r3, [r3]
 80122ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80122ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80122f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80122f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	461a      	mov	r2, r3
 80122fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012302:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012306:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012308:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801230a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801230e:	e841 2300 	strex	r3, r2, [r1]
 8012312:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012314:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012316:	2b00      	cmp	r3, #0
 8012318:	d1e2      	bne.n	80122e0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	3308      	adds	r3, #8
 8012320:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012324:	e853 3f00 	ldrex	r3, [r3]
 8012328:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801232a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801232c:	4b6e      	ldr	r3, [pc, #440]	; (80124e8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801232e:	4013      	ands	r3, r2
 8012330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	3308      	adds	r3, #8
 801233a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801233e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012340:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012342:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012344:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012346:	e841 2300 	strex	r3, r2, [r1]
 801234a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801234c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801234e:	2b00      	cmp	r3, #0
 8012350:	d1e3      	bne.n	801231a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2220      	movs	r2, #32
 8012356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	2200      	movs	r2, #0
 801235e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2200      	movs	r2, #0
 8012364:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	4a60      	ldr	r2, [pc, #384]	; (80124ec <UART_RxISR_16BIT_FIFOEN+0x360>)
 801236c:	4293      	cmp	r3, r2
 801236e:	d021      	beq.n	80123b4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	685b      	ldr	r3, [r3, #4]
 8012376:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801237a:	2b00      	cmp	r3, #0
 801237c:	d01a      	beq.n	80123b4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012386:	e853 3f00 	ldrex	r3, [r3]
 801238a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801238c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801238e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012392:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	461a      	mov	r2, r3
 801239c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80123a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80123a2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80123a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80123a8:	e841 2300 	strex	r3, r2, [r1]
 80123ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80123ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d1e4      	bne.n	801237e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123b8:	2b01      	cmp	r3, #1
 80123ba:	d130      	bne.n	801241e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2200      	movs	r2, #0
 80123c0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ca:	e853 3f00 	ldrex	r3, [r3]
 80123ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80123d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123d2:	f023 0310 	bic.w	r3, r3, #16
 80123d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	461a      	mov	r2, r3
 80123e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80123e4:	647b      	str	r3, [r7, #68]	; 0x44
 80123e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80123ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80123ec:	e841 2300 	strex	r3, r2, [r1]
 80123f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80123f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d1e4      	bne.n	80123c2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	69db      	ldr	r3, [r3, #28]
 80123fe:	f003 0310 	and.w	r3, r3, #16
 8012402:	2b10      	cmp	r3, #16
 8012404:	d103      	bne.n	801240e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	2210      	movs	r2, #16
 801240c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012414:	4619      	mov	r1, r3
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f7fe f97e 	bl	8010718 <HAL_UARTEx_RxEventCallback>
 801241c:	e002      	b.n	8012424 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801241e:	6878      	ldr	r0, [r7, #4]
 8012420:	f7ee f91e 	bl	8000660 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012424:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012428:	2b00      	cmp	r3, #0
 801242a:	d006      	beq.n	801243a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 801242c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012430:	f003 0320 	and.w	r3, r3, #32
 8012434:	2b00      	cmp	r3, #0
 8012436:	f47f aecd 	bne.w	80121d4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012440:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012444:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012448:	2b00      	cmp	r3, #0
 801244a:	d049      	beq.n	80124e0 <UART_RxISR_16BIT_FIFOEN+0x354>
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012452:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012456:	429a      	cmp	r2, r3
 8012458:	d242      	bcs.n	80124e0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	3308      	adds	r3, #8
 8012460:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012464:	e853 3f00 	ldrex	r3, [r3]
 8012468:	623b      	str	r3, [r7, #32]
   return(result);
 801246a:	6a3b      	ldr	r3, [r7, #32]
 801246c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	3308      	adds	r3, #8
 801247a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801247e:	633a      	str	r2, [r7, #48]	; 0x30
 8012480:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012486:	e841 2300 	strex	r3, r2, [r1]
 801248a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801248c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801248e:	2b00      	cmp	r3, #0
 8012490:	d1e3      	bne.n	801245a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	4a16      	ldr	r2, [pc, #88]	; (80124f0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012496:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	e853 3f00 	ldrex	r3, [r3]
 80124a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	f043 0320 	orr.w	r3, r3, #32
 80124ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	461a      	mov	r2, r3
 80124b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80124ba:	61fb      	str	r3, [r7, #28]
 80124bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124be:	69b9      	ldr	r1, [r7, #24]
 80124c0:	69fa      	ldr	r2, [r7, #28]
 80124c2:	e841 2300 	strex	r3, r2, [r1]
 80124c6:	617b      	str	r3, [r7, #20]
   return(result);
 80124c8:	697b      	ldr	r3, [r7, #20]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d1e4      	bne.n	8012498 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80124ce:	e007      	b.n	80124e0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	699a      	ldr	r2, [r3, #24]
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	f042 0208 	orr.w	r2, r2, #8
 80124de:	619a      	str	r2, [r3, #24]
}
 80124e0:	bf00      	nop
 80124e2:	37b8      	adds	r7, #184	; 0xb8
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}
 80124e8:	effffffe 	.word	0xeffffffe
 80124ec:	58000c00 	.word	0x58000c00
 80124f0:	08011c75 	.word	0x08011c75

080124f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80124f4:	b480      	push	{r7}
 80124f6:	b083      	sub	sp, #12
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80124fc:	bf00      	nop
 80124fe:	370c      	adds	r7, #12
 8012500:	46bd      	mov	sp, r7
 8012502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012506:	4770      	bx	lr

08012508 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012508:	b480      	push	{r7}
 801250a:	b083      	sub	sp, #12
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012510:	bf00      	nop
 8012512:	370c      	adds	r7, #12
 8012514:	46bd      	mov	sp, r7
 8012516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251a:	4770      	bx	lr

0801251c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801251c:	b480      	push	{r7}
 801251e:	b083      	sub	sp, #12
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012524:	bf00      	nop
 8012526:	370c      	adds	r7, #12
 8012528:	46bd      	mov	sp, r7
 801252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252e:	4770      	bx	lr

08012530 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012530:	b480      	push	{r7}
 8012532:	b085      	sub	sp, #20
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801253e:	2b01      	cmp	r3, #1
 8012540:	d101      	bne.n	8012546 <HAL_UARTEx_DisableFifoMode+0x16>
 8012542:	2302      	movs	r3, #2
 8012544:	e027      	b.n	8012596 <HAL_UARTEx_DisableFifoMode+0x66>
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2201      	movs	r2, #1
 801254a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2224      	movs	r2, #36	; 0x24
 8012552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	681a      	ldr	r2, [r3, #0]
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	f022 0201 	bic.w	r2, r2, #1
 801256c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012574:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	2200      	movs	r2, #0
 801257a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	68fa      	ldr	r2, [r7, #12]
 8012582:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2220      	movs	r2, #32
 8012588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	2200      	movs	r2, #0
 8012590:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012594:	2300      	movs	r3, #0
}
 8012596:	4618      	mov	r0, r3
 8012598:	3714      	adds	r7, #20
 801259a:	46bd      	mov	sp, r7
 801259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a0:	4770      	bx	lr

080125a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80125a2:	b580      	push	{r7, lr}
 80125a4:	b084      	sub	sp, #16
 80125a6:	af00      	add	r7, sp, #0
 80125a8:	6078      	str	r0, [r7, #4]
 80125aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80125b2:	2b01      	cmp	r3, #1
 80125b4:	d101      	bne.n	80125ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80125b6:	2302      	movs	r3, #2
 80125b8:	e02d      	b.n	8012616 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2201      	movs	r2, #1
 80125be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	2224      	movs	r2, #36	; 0x24
 80125c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	681a      	ldr	r2, [r3, #0]
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	f022 0201 	bic.w	r2, r2, #1
 80125e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	689b      	ldr	r3, [r3, #8]
 80125e8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	683a      	ldr	r2, [r7, #0]
 80125f2:	430a      	orrs	r2, r1
 80125f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f000 f850 	bl	801269c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	68fa      	ldr	r2, [r7, #12]
 8012602:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	2220      	movs	r2, #32
 8012608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2200      	movs	r2, #0
 8012610:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012614:	2300      	movs	r3, #0
}
 8012616:	4618      	mov	r0, r3
 8012618:	3710      	adds	r7, #16
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}

0801261e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801261e:	b580      	push	{r7, lr}
 8012620:	b084      	sub	sp, #16
 8012622:	af00      	add	r7, sp, #0
 8012624:	6078      	str	r0, [r7, #4]
 8012626:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801262e:	2b01      	cmp	r3, #1
 8012630:	d101      	bne.n	8012636 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012632:	2302      	movs	r3, #2
 8012634:	e02d      	b.n	8012692 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	2201      	movs	r2, #1
 801263a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2224      	movs	r2, #36	; 0x24
 8012642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	681a      	ldr	r2, [r3, #0]
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	f022 0201 	bic.w	r2, r2, #1
 801265c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	689b      	ldr	r3, [r3, #8]
 8012664:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	683a      	ldr	r2, [r7, #0]
 801266e:	430a      	orrs	r2, r1
 8012670:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f000 f812 	bl	801269c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	68fa      	ldr	r2, [r7, #12]
 801267e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2220      	movs	r2, #32
 8012684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2200      	movs	r2, #0
 801268c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012690:	2300      	movs	r3, #0
}
 8012692:	4618      	mov	r0, r3
 8012694:	3710      	adds	r7, #16
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}
	...

0801269c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801269c:	b480      	push	{r7}
 801269e:	b085      	sub	sp, #20
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d108      	bne.n	80126be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	2201      	movs	r2, #1
 80126b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2201      	movs	r2, #1
 80126b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80126bc:	e031      	b.n	8012722 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80126be:	2310      	movs	r3, #16
 80126c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80126c2:	2310      	movs	r3, #16
 80126c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	689b      	ldr	r3, [r3, #8]
 80126cc:	0e5b      	lsrs	r3, r3, #25
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	f003 0307 	and.w	r3, r3, #7
 80126d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	689b      	ldr	r3, [r3, #8]
 80126dc:	0f5b      	lsrs	r3, r3, #29
 80126de:	b2db      	uxtb	r3, r3
 80126e0:	f003 0307 	and.w	r3, r3, #7
 80126e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80126e6:	7bbb      	ldrb	r3, [r7, #14]
 80126e8:	7b3a      	ldrb	r2, [r7, #12]
 80126ea:	4911      	ldr	r1, [pc, #68]	; (8012730 <UARTEx_SetNbDataToProcess+0x94>)
 80126ec:	5c8a      	ldrb	r2, [r1, r2]
 80126ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80126f2:	7b3a      	ldrb	r2, [r7, #12]
 80126f4:	490f      	ldr	r1, [pc, #60]	; (8012734 <UARTEx_SetNbDataToProcess+0x98>)
 80126f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80126f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80126fc:	b29a      	uxth	r2, r3
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012704:	7bfb      	ldrb	r3, [r7, #15]
 8012706:	7b7a      	ldrb	r2, [r7, #13]
 8012708:	4909      	ldr	r1, [pc, #36]	; (8012730 <UARTEx_SetNbDataToProcess+0x94>)
 801270a:	5c8a      	ldrb	r2, [r1, r2]
 801270c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012710:	7b7a      	ldrb	r2, [r7, #13]
 8012712:	4908      	ldr	r1, [pc, #32]	; (8012734 <UARTEx_SetNbDataToProcess+0x98>)
 8012714:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012716:	fb93 f3f2 	sdiv	r3, r3, r2
 801271a:	b29a      	uxth	r2, r3
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012722:	bf00      	nop
 8012724:	3714      	adds	r7, #20
 8012726:	46bd      	mov	sp, r7
 8012728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272c:	4770      	bx	lr
 801272e:	bf00      	nop
 8012730:	08016eb0 	.word	0x08016eb0
 8012734:	08016eb8 	.word	0x08016eb8

08012738 <__NVIC_SetPriority>:
{
 8012738:	b480      	push	{r7}
 801273a:	b083      	sub	sp, #12
 801273c:	af00      	add	r7, sp, #0
 801273e:	4603      	mov	r3, r0
 8012740:	6039      	str	r1, [r7, #0]
 8012742:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012744:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012748:	2b00      	cmp	r3, #0
 801274a:	db0a      	blt.n	8012762 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	b2da      	uxtb	r2, r3
 8012750:	490c      	ldr	r1, [pc, #48]	; (8012784 <__NVIC_SetPriority+0x4c>)
 8012752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012756:	0112      	lsls	r2, r2, #4
 8012758:	b2d2      	uxtb	r2, r2
 801275a:	440b      	add	r3, r1
 801275c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012760:	e00a      	b.n	8012778 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	b2da      	uxtb	r2, r3
 8012766:	4908      	ldr	r1, [pc, #32]	; (8012788 <__NVIC_SetPriority+0x50>)
 8012768:	88fb      	ldrh	r3, [r7, #6]
 801276a:	f003 030f 	and.w	r3, r3, #15
 801276e:	3b04      	subs	r3, #4
 8012770:	0112      	lsls	r2, r2, #4
 8012772:	b2d2      	uxtb	r2, r2
 8012774:	440b      	add	r3, r1
 8012776:	761a      	strb	r2, [r3, #24]
}
 8012778:	bf00      	nop
 801277a:	370c      	adds	r7, #12
 801277c:	46bd      	mov	sp, r7
 801277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012782:	4770      	bx	lr
 8012784:	e000e100 	.word	0xe000e100
 8012788:	e000ed00 	.word	0xe000ed00

0801278c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801278c:	b580      	push	{r7, lr}
 801278e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012790:	4b05      	ldr	r3, [pc, #20]	; (80127a8 <SysTick_Handler+0x1c>)
 8012792:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012794:	f002 fbc2 	bl	8014f1c <xTaskGetSchedulerState>
 8012798:	4603      	mov	r3, r0
 801279a:	2b01      	cmp	r3, #1
 801279c:	d001      	beq.n	80127a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801279e:	f003 f9e3 	bl	8015b68 <xPortSysTickHandler>
  }
}
 80127a2:	bf00      	nop
 80127a4:	bd80      	pop	{r7, pc}
 80127a6:	bf00      	nop
 80127a8:	e000e010 	.word	0xe000e010

080127ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80127ac:	b580      	push	{r7, lr}
 80127ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80127b0:	2100      	movs	r1, #0
 80127b2:	f06f 0004 	mvn.w	r0, #4
 80127b6:	f7ff ffbf 	bl	8012738 <__NVIC_SetPriority>
#endif
}
 80127ba:	bf00      	nop
 80127bc:	bd80      	pop	{r7, pc}
	...

080127c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80127c0:	b480      	push	{r7}
 80127c2:	b083      	sub	sp, #12
 80127c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80127c6:	f3ef 8305 	mrs	r3, IPSR
 80127ca:	603b      	str	r3, [r7, #0]
  return(result);
 80127cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d003      	beq.n	80127da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80127d2:	f06f 0305 	mvn.w	r3, #5
 80127d6:	607b      	str	r3, [r7, #4]
 80127d8:	e00c      	b.n	80127f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80127da:	4b0a      	ldr	r3, [pc, #40]	; (8012804 <osKernelInitialize+0x44>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d105      	bne.n	80127ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80127e2:	4b08      	ldr	r3, [pc, #32]	; (8012804 <osKernelInitialize+0x44>)
 80127e4:	2201      	movs	r2, #1
 80127e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80127e8:	2300      	movs	r3, #0
 80127ea:	607b      	str	r3, [r7, #4]
 80127ec:	e002      	b.n	80127f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80127ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80127f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80127f4:	687b      	ldr	r3, [r7, #4]
}
 80127f6:	4618      	mov	r0, r3
 80127f8:	370c      	adds	r7, #12
 80127fa:	46bd      	mov	sp, r7
 80127fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012800:	4770      	bx	lr
 8012802:	bf00      	nop
 8012804:	240010cc 	.word	0x240010cc

08012808 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012808:	b580      	push	{r7, lr}
 801280a:	b082      	sub	sp, #8
 801280c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801280e:	f3ef 8305 	mrs	r3, IPSR
 8012812:	603b      	str	r3, [r7, #0]
  return(result);
 8012814:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012816:	2b00      	cmp	r3, #0
 8012818:	d003      	beq.n	8012822 <osKernelStart+0x1a>
    stat = osErrorISR;
 801281a:	f06f 0305 	mvn.w	r3, #5
 801281e:	607b      	str	r3, [r7, #4]
 8012820:	e010      	b.n	8012844 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012822:	4b0b      	ldr	r3, [pc, #44]	; (8012850 <osKernelStart+0x48>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	2b01      	cmp	r3, #1
 8012828:	d109      	bne.n	801283e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801282a:	f7ff ffbf 	bl	80127ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801282e:	4b08      	ldr	r3, [pc, #32]	; (8012850 <osKernelStart+0x48>)
 8012830:	2202      	movs	r2, #2
 8012832:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012834:	f001 fe84 	bl	8014540 <vTaskStartScheduler>
      stat = osOK;
 8012838:	2300      	movs	r3, #0
 801283a:	607b      	str	r3, [r7, #4]
 801283c:	e002      	b.n	8012844 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801283e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012842:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012844:	687b      	ldr	r3, [r7, #4]
}
 8012846:	4618      	mov	r0, r3
 8012848:	3708      	adds	r7, #8
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}
 801284e:	bf00      	nop
 8012850:	240010cc 	.word	0x240010cc

08012854 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012854:	b580      	push	{r7, lr}
 8012856:	b08e      	sub	sp, #56	; 0x38
 8012858:	af04      	add	r7, sp, #16
 801285a:	60f8      	str	r0, [r7, #12]
 801285c:	60b9      	str	r1, [r7, #8]
 801285e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012860:	2300      	movs	r3, #0
 8012862:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012864:	f3ef 8305 	mrs	r3, IPSR
 8012868:	617b      	str	r3, [r7, #20]
  return(result);
 801286a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801286c:	2b00      	cmp	r3, #0
 801286e:	d17e      	bne.n	801296e <osThreadNew+0x11a>
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	2b00      	cmp	r3, #0
 8012874:	d07b      	beq.n	801296e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012876:	2380      	movs	r3, #128	; 0x80
 8012878:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801287a:	2318      	movs	r3, #24
 801287c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801287e:	2300      	movs	r3, #0
 8012880:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012886:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d045      	beq.n	801291a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d002      	beq.n	801289c <osThreadNew+0x48>
        name = attr->name;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	699b      	ldr	r3, [r3, #24]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d002      	beq.n	80128aa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	699b      	ldr	r3, [r3, #24]
 80128a8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80128aa:	69fb      	ldr	r3, [r7, #28]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d008      	beq.n	80128c2 <osThreadNew+0x6e>
 80128b0:	69fb      	ldr	r3, [r7, #28]
 80128b2:	2b38      	cmp	r3, #56	; 0x38
 80128b4:	d805      	bhi.n	80128c2 <osThreadNew+0x6e>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	685b      	ldr	r3, [r3, #4]
 80128ba:	f003 0301 	and.w	r3, r3, #1
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d001      	beq.n	80128c6 <osThreadNew+0x72>
        return (NULL);
 80128c2:	2300      	movs	r3, #0
 80128c4:	e054      	b.n	8012970 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	695b      	ldr	r3, [r3, #20]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d003      	beq.n	80128d6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	695b      	ldr	r3, [r3, #20]
 80128d2:	089b      	lsrs	r3, r3, #2
 80128d4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	689b      	ldr	r3, [r3, #8]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d00e      	beq.n	80128fc <osThreadNew+0xa8>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	68db      	ldr	r3, [r3, #12]
 80128e2:	2b5b      	cmp	r3, #91	; 0x5b
 80128e4:	d90a      	bls.n	80128fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d006      	beq.n	80128fc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	695b      	ldr	r3, [r3, #20]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d002      	beq.n	80128fc <osThreadNew+0xa8>
        mem = 1;
 80128f6:	2301      	movs	r3, #1
 80128f8:	61bb      	str	r3, [r7, #24]
 80128fa:	e010      	b.n	801291e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	689b      	ldr	r3, [r3, #8]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d10c      	bne.n	801291e <osThreadNew+0xca>
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	68db      	ldr	r3, [r3, #12]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d108      	bne.n	801291e <osThreadNew+0xca>
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	691b      	ldr	r3, [r3, #16]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d104      	bne.n	801291e <osThreadNew+0xca>
          mem = 0;
 8012914:	2300      	movs	r3, #0
 8012916:	61bb      	str	r3, [r7, #24]
 8012918:	e001      	b.n	801291e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801291a:	2300      	movs	r3, #0
 801291c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801291e:	69bb      	ldr	r3, [r7, #24]
 8012920:	2b01      	cmp	r3, #1
 8012922:	d110      	bne.n	8012946 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012928:	687a      	ldr	r2, [r7, #4]
 801292a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801292c:	9202      	str	r2, [sp, #8]
 801292e:	9301      	str	r3, [sp, #4]
 8012930:	69fb      	ldr	r3, [r7, #28]
 8012932:	9300      	str	r3, [sp, #0]
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	6a3a      	ldr	r2, [r7, #32]
 8012938:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801293a:	68f8      	ldr	r0, [r7, #12]
 801293c:	f001 fb10 	bl	8013f60 <xTaskCreateStatic>
 8012940:	4603      	mov	r3, r0
 8012942:	613b      	str	r3, [r7, #16]
 8012944:	e013      	b.n	801296e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012946:	69bb      	ldr	r3, [r7, #24]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d110      	bne.n	801296e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801294c:	6a3b      	ldr	r3, [r7, #32]
 801294e:	b29a      	uxth	r2, r3
 8012950:	f107 0310 	add.w	r3, r7, #16
 8012954:	9301      	str	r3, [sp, #4]
 8012956:	69fb      	ldr	r3, [r7, #28]
 8012958:	9300      	str	r3, [sp, #0]
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801295e:	68f8      	ldr	r0, [r7, #12]
 8012960:	f001 fb5b 	bl	801401a <xTaskCreate>
 8012964:	4603      	mov	r3, r0
 8012966:	2b01      	cmp	r3, #1
 8012968:	d001      	beq.n	801296e <osThreadNew+0x11a>
            hTask = NULL;
 801296a:	2300      	movs	r3, #0
 801296c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801296e:	693b      	ldr	r3, [r7, #16]
}
 8012970:	4618      	mov	r0, r3
 8012972:	3728      	adds	r7, #40	; 0x28
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}

08012978 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8012978:	b480      	push	{r7}
 801297a:	b083      	sub	sp, #12
 801297c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801297e:	f3ef 8305 	mrs	r3, IPSR
 8012982:	603b      	str	r3, [r7, #0]
  return(result);
 8012984:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012986:	2b00      	cmp	r3, #0
 8012988:	d003      	beq.n	8012992 <osThreadYield+0x1a>
    stat = osErrorISR;
 801298a:	f06f 0305 	mvn.w	r3, #5
 801298e:	607b      	str	r3, [r7, #4]
 8012990:	e009      	b.n	80129a6 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8012992:	2300      	movs	r3, #0
 8012994:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8012996:	4b07      	ldr	r3, [pc, #28]	; (80129b4 <osThreadYield+0x3c>)
 8012998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801299c:	601a      	str	r2, [r3, #0]
 801299e:	f3bf 8f4f 	dsb	sy
 80129a2:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80129a6:	687b      	ldr	r3, [r7, #4]
}
 80129a8:	4618      	mov	r0, r3
 80129aa:	370c      	adds	r7, #12
 80129ac:	46bd      	mov	sp, r7
 80129ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b2:	4770      	bx	lr
 80129b4:	e000ed04 	.word	0xe000ed04

080129b8 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b086      	sub	sp, #24
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129c4:	f3ef 8305 	mrs	r3, IPSR
 80129c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80129ca:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d003      	beq.n	80129d8 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80129d0:	f06f 0305 	mvn.w	r3, #5
 80129d4:	617b      	str	r3, [r7, #20]
 80129d6:	e00b      	b.n	80129f0 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80129d8:	693b      	ldr	r3, [r7, #16]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d103      	bne.n	80129e6 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80129de:	f06f 0303 	mvn.w	r3, #3
 80129e2:	617b      	str	r3, [r7, #20]
 80129e4:	e004      	b.n	80129f0 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80129e6:	2300      	movs	r3, #0
 80129e8:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80129ea:	6938      	ldr	r0, [r7, #16]
 80129ec:	f001 fc8e 	bl	801430c <vTaskSuspend>
  }

  return (stat);
 80129f0:	697b      	ldr	r3, [r7, #20]
}
 80129f2:	4618      	mov	r0, r3
 80129f4:	3718      	adds	r7, #24
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bd80      	pop	{r7, pc}

080129fa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80129fa:	b580      	push	{r7, lr}
 80129fc:	b084      	sub	sp, #16
 80129fe:	af00      	add	r7, sp, #0
 8012a00:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a02:	f3ef 8305 	mrs	r3, IPSR
 8012a06:	60bb      	str	r3, [r7, #8]
  return(result);
 8012a08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d003      	beq.n	8012a16 <osDelay+0x1c>
    stat = osErrorISR;
 8012a0e:	f06f 0305 	mvn.w	r3, #5
 8012a12:	60fb      	str	r3, [r7, #12]
 8012a14:	e007      	b.n	8012a26 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012a16:	2300      	movs	r3, #0
 8012a18:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d002      	beq.n	8012a26 <osDelay+0x2c>
      vTaskDelay(ticks);
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f001 fc3f 	bl	80142a4 <vTaskDelay>
    }
  }

  return (stat);
 8012a26:	68fb      	ldr	r3, [r7, #12]
}
 8012a28:	4618      	mov	r0, r3
 8012a2a:	3710      	adds	r7, #16
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	bd80      	pop	{r7, pc}

08012a30 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b086      	sub	sp, #24
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a3c:	f3ef 8305 	mrs	r3, IPSR
 8012a40:	60fb      	str	r3, [r7, #12]
  return(result);
 8012a42:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d12d      	bne.n	8012aa4 <osEventFlagsNew+0x74>
    mem = -1;
 8012a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a4c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d015      	beq.n	8012a80 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	689b      	ldr	r3, [r3, #8]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d006      	beq.n	8012a6a <osEventFlagsNew+0x3a>
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	2b1f      	cmp	r3, #31
 8012a62:	d902      	bls.n	8012a6a <osEventFlagsNew+0x3a>
        mem = 1;
 8012a64:	2301      	movs	r3, #1
 8012a66:	613b      	str	r3, [r7, #16]
 8012a68:	e00c      	b.n	8012a84 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	689b      	ldr	r3, [r3, #8]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d108      	bne.n	8012a84 <osEventFlagsNew+0x54>
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	68db      	ldr	r3, [r3, #12]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d104      	bne.n	8012a84 <osEventFlagsNew+0x54>
          mem = 0;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	613b      	str	r3, [r7, #16]
 8012a7e:	e001      	b.n	8012a84 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8012a80:	2300      	movs	r3, #0
 8012a82:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	2b01      	cmp	r3, #1
 8012a88:	d106      	bne.n	8012a98 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	689b      	ldr	r3, [r3, #8]
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f000 fa1e 	bl	8012ed0 <xEventGroupCreateStatic>
 8012a94:	6178      	str	r0, [r7, #20]
 8012a96:	e005      	b.n	8012aa4 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d102      	bne.n	8012aa4 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8012a9e:	f000 fa4e 	bl	8012f3e <xEventGroupCreate>
 8012aa2:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8012aa4:	697b      	ldr	r3, [r7, #20]
}
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	3718      	adds	r7, #24
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	bd80      	pop	{r7, pc}
	...

08012ab0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b086      	sub	sp, #24
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
 8012ab8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012abe:	693b      	ldr	r3, [r7, #16]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d004      	beq.n	8012ace <osEventFlagsSet+0x1e>
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d003      	beq.n	8012ad6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8012ace:	f06f 0303 	mvn.w	r3, #3
 8012ad2:	617b      	str	r3, [r7, #20]
 8012ad4:	e028      	b.n	8012b28 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ad6:	f3ef 8305 	mrs	r3, IPSR
 8012ada:	60fb      	str	r3, [r7, #12]
  return(result);
 8012adc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d01d      	beq.n	8012b1e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8012ae6:	f107 0308 	add.w	r3, r7, #8
 8012aea:	461a      	mov	r2, r3
 8012aec:	6839      	ldr	r1, [r7, #0]
 8012aee:	6938      	ldr	r0, [r7, #16]
 8012af0:	f000 fbc8 	bl	8013284 <xEventGroupSetBitsFromISR>
 8012af4:	4603      	mov	r3, r0
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d103      	bne.n	8012b02 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8012afa:	f06f 0302 	mvn.w	r3, #2
 8012afe:	617b      	str	r3, [r7, #20]
 8012b00:	e012      	b.n	8012b28 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8012b02:	683b      	ldr	r3, [r7, #0]
 8012b04:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d00d      	beq.n	8012b28 <osEventFlagsSet+0x78>
 8012b0c:	4b09      	ldr	r3, [pc, #36]	; (8012b34 <osEventFlagsSet+0x84>)
 8012b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b12:	601a      	str	r2, [r3, #0]
 8012b14:	f3bf 8f4f 	dsb	sy
 8012b18:	f3bf 8f6f 	isb	sy
 8012b1c:	e004      	b.n	8012b28 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8012b1e:	6839      	ldr	r1, [r7, #0]
 8012b20:	6938      	ldr	r0, [r7, #16]
 8012b22:	f000 faf5 	bl	8013110 <xEventGroupSetBits>
 8012b26:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012b28:	697b      	ldr	r3, [r7, #20]
}
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	3718      	adds	r7, #24
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	bd80      	pop	{r7, pc}
 8012b32:	bf00      	nop
 8012b34:	e000ed04 	.word	0xe000ed04

08012b38 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b08c      	sub	sp, #48	; 0x30
 8012b3c:	af02      	add	r7, sp, #8
 8012b3e:	60f8      	str	r0, [r7, #12]
 8012b40:	60b9      	str	r1, [r7, #8]
 8012b42:	607a      	str	r2, [r7, #4]
 8012b44:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012b4a:	69bb      	ldr	r3, [r7, #24]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d004      	beq.n	8012b5a <osEventFlagsWait+0x22>
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d003      	beq.n	8012b62 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8012b5a:	f06f 0303 	mvn.w	r3, #3
 8012b5e:	61fb      	str	r3, [r7, #28]
 8012b60:	e04b      	b.n	8012bfa <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b62:	f3ef 8305 	mrs	r3, IPSR
 8012b66:	617b      	str	r3, [r7, #20]
  return(result);
 8012b68:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d003      	beq.n	8012b76 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8012b6e:	f06f 0305 	mvn.w	r3, #5
 8012b72:	61fb      	str	r3, [r7, #28]
 8012b74:	e041      	b.n	8012bfa <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	f003 0301 	and.w	r3, r3, #1
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d002      	beq.n	8012b86 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8012b80:	2301      	movs	r3, #1
 8012b82:	627b      	str	r3, [r7, #36]	; 0x24
 8012b84:	e001      	b.n	8012b8a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8012b86:	2300      	movs	r3, #0
 8012b88:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f003 0302 	and.w	r3, r3, #2
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d002      	beq.n	8012b9a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8012b94:	2300      	movs	r3, #0
 8012b96:	623b      	str	r3, [r7, #32]
 8012b98:	e001      	b.n	8012b9e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8012b9a:	2301      	movs	r3, #1
 8012b9c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8012b9e:	683b      	ldr	r3, [r7, #0]
 8012ba0:	9300      	str	r3, [sp, #0]
 8012ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba4:	6a3a      	ldr	r2, [r7, #32]
 8012ba6:	68b9      	ldr	r1, [r7, #8]
 8012ba8:	69b8      	ldr	r0, [r7, #24]
 8012baa:	f000 f9e3 	bl	8012f74 <xEventGroupWaitBits>
 8012bae:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	f003 0301 	and.w	r3, r3, #1
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d010      	beq.n	8012bdc <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8012bba:	68ba      	ldr	r2, [r7, #8]
 8012bbc:	69fb      	ldr	r3, [r7, #28]
 8012bbe:	4013      	ands	r3, r2
 8012bc0:	68ba      	ldr	r2, [r7, #8]
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	d019      	beq.n	8012bfa <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d003      	beq.n	8012bd4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8012bcc:	f06f 0301 	mvn.w	r3, #1
 8012bd0:	61fb      	str	r3, [r7, #28]
 8012bd2:	e012      	b.n	8012bfa <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012bd4:	f06f 0302 	mvn.w	r3, #2
 8012bd8:	61fb      	str	r3, [r7, #28]
 8012bda:	e00e      	b.n	8012bfa <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8012bdc:	68ba      	ldr	r2, [r7, #8]
 8012bde:	69fb      	ldr	r3, [r7, #28]
 8012be0:	4013      	ands	r3, r2
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d109      	bne.n	8012bfa <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012be6:	683b      	ldr	r3, [r7, #0]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d003      	beq.n	8012bf4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8012bec:	f06f 0301 	mvn.w	r3, #1
 8012bf0:	61fb      	str	r3, [r7, #28]
 8012bf2:	e002      	b.n	8012bfa <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012bf4:	f06f 0302 	mvn.w	r3, #2
 8012bf8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8012bfa:	69fb      	ldr	r3, [r7, #28]
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	3728      	adds	r7, #40	; 0x28
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}

08012c04 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b08a      	sub	sp, #40	; 0x28
 8012c08:	af02      	add	r7, sp, #8
 8012c0a:	60f8      	str	r0, [r7, #12]
 8012c0c:	60b9      	str	r1, [r7, #8]
 8012c0e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012c10:	2300      	movs	r3, #0
 8012c12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c14:	f3ef 8305 	mrs	r3, IPSR
 8012c18:	613b      	str	r3, [r7, #16]
  return(result);
 8012c1a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d15f      	bne.n	8012ce0 <osMessageQueueNew+0xdc>
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d05c      	beq.n	8012ce0 <osMessageQueueNew+0xdc>
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d059      	beq.n	8012ce0 <osMessageQueueNew+0xdc>
    mem = -1;
 8012c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c30:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d029      	beq.n	8012c8c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	689b      	ldr	r3, [r3, #8]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d012      	beq.n	8012c66 <osMessageQueueNew+0x62>
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	68db      	ldr	r3, [r3, #12]
 8012c44:	2b4f      	cmp	r3, #79	; 0x4f
 8012c46:	d90e      	bls.n	8012c66 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d00a      	beq.n	8012c66 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	695a      	ldr	r2, [r3, #20]
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	68b9      	ldr	r1, [r7, #8]
 8012c58:	fb01 f303 	mul.w	r3, r1, r3
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	d302      	bcc.n	8012c66 <osMessageQueueNew+0x62>
        mem = 1;
 8012c60:	2301      	movs	r3, #1
 8012c62:	61bb      	str	r3, [r7, #24]
 8012c64:	e014      	b.n	8012c90 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	689b      	ldr	r3, [r3, #8]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d110      	bne.n	8012c90 <osMessageQueueNew+0x8c>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	68db      	ldr	r3, [r3, #12]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d10c      	bne.n	8012c90 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d108      	bne.n	8012c90 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	695b      	ldr	r3, [r3, #20]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d104      	bne.n	8012c90 <osMessageQueueNew+0x8c>
          mem = 0;
 8012c86:	2300      	movs	r3, #0
 8012c88:	61bb      	str	r3, [r7, #24]
 8012c8a:	e001      	b.n	8012c90 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012c90:	69bb      	ldr	r3, [r7, #24]
 8012c92:	2b01      	cmp	r3, #1
 8012c94:	d10b      	bne.n	8012cae <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	691a      	ldr	r2, [r3, #16]
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	689b      	ldr	r3, [r3, #8]
 8012c9e:	2100      	movs	r1, #0
 8012ca0:	9100      	str	r1, [sp, #0]
 8012ca2:	68b9      	ldr	r1, [r7, #8]
 8012ca4:	68f8      	ldr	r0, [r7, #12]
 8012ca6:	f000 fc1d 	bl	80134e4 <xQueueGenericCreateStatic>
 8012caa:	61f8      	str	r0, [r7, #28]
 8012cac:	e008      	b.n	8012cc0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8012cae:	69bb      	ldr	r3, [r7, #24]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d105      	bne.n	8012cc0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	68b9      	ldr	r1, [r7, #8]
 8012cb8:	68f8      	ldr	r0, [r7, #12]
 8012cba:	f000 fc8b 	bl	80135d4 <xQueueGenericCreate>
 8012cbe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012cc0:	69fb      	ldr	r3, [r7, #28]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d00c      	beq.n	8012ce0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d003      	beq.n	8012cd4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	617b      	str	r3, [r7, #20]
 8012cd2:	e001      	b.n	8012cd8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012cd8:	6979      	ldr	r1, [r7, #20]
 8012cda:	69f8      	ldr	r0, [r7, #28]
 8012cdc:	f001 f8e2 	bl	8013ea4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012ce0:	69fb      	ldr	r3, [r7, #28]
}
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	3720      	adds	r7, #32
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bd80      	pop	{r7, pc}
	...

08012cec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b088      	sub	sp, #32
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	60f8      	str	r0, [r7, #12]
 8012cf4:	60b9      	str	r1, [r7, #8]
 8012cf6:	603b      	str	r3, [r7, #0]
 8012cf8:	4613      	mov	r3, r2
 8012cfa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012d00:	2300      	movs	r3, #0
 8012d02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d04:	f3ef 8305 	mrs	r3, IPSR
 8012d08:	617b      	str	r3, [r7, #20]
  return(result);
 8012d0a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d028      	beq.n	8012d62 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012d10:	69bb      	ldr	r3, [r7, #24]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d005      	beq.n	8012d22 <osMessageQueuePut+0x36>
 8012d16:	68bb      	ldr	r3, [r7, #8]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d002      	beq.n	8012d22 <osMessageQueuePut+0x36>
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d003      	beq.n	8012d2a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8012d22:	f06f 0303 	mvn.w	r3, #3
 8012d26:	61fb      	str	r3, [r7, #28]
 8012d28:	e038      	b.n	8012d9c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012d2e:	f107 0210 	add.w	r2, r7, #16
 8012d32:	2300      	movs	r3, #0
 8012d34:	68b9      	ldr	r1, [r7, #8]
 8012d36:	69b8      	ldr	r0, [r7, #24]
 8012d38:	f000 fda8 	bl	801388c <xQueueGenericSendFromISR>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	2b01      	cmp	r3, #1
 8012d40:	d003      	beq.n	8012d4a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8012d42:	f06f 0302 	mvn.w	r3, #2
 8012d46:	61fb      	str	r3, [r7, #28]
 8012d48:	e028      	b.n	8012d9c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012d4a:	693b      	ldr	r3, [r7, #16]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d025      	beq.n	8012d9c <osMessageQueuePut+0xb0>
 8012d50:	4b15      	ldr	r3, [pc, #84]	; (8012da8 <osMessageQueuePut+0xbc>)
 8012d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d56:	601a      	str	r2, [r3, #0]
 8012d58:	f3bf 8f4f 	dsb	sy
 8012d5c:	f3bf 8f6f 	isb	sy
 8012d60:	e01c      	b.n	8012d9c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012d62:	69bb      	ldr	r3, [r7, #24]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d002      	beq.n	8012d6e <osMessageQueuePut+0x82>
 8012d68:	68bb      	ldr	r3, [r7, #8]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d103      	bne.n	8012d76 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012d6e:	f06f 0303 	mvn.w	r3, #3
 8012d72:	61fb      	str	r3, [r7, #28]
 8012d74:	e012      	b.n	8012d9c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012d76:	2300      	movs	r3, #0
 8012d78:	683a      	ldr	r2, [r7, #0]
 8012d7a:	68b9      	ldr	r1, [r7, #8]
 8012d7c:	69b8      	ldr	r0, [r7, #24]
 8012d7e:	f000 fc87 	bl	8013690 <xQueueGenericSend>
 8012d82:	4603      	mov	r3, r0
 8012d84:	2b01      	cmp	r3, #1
 8012d86:	d009      	beq.n	8012d9c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d003      	beq.n	8012d96 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8012d8e:	f06f 0301 	mvn.w	r3, #1
 8012d92:	61fb      	str	r3, [r7, #28]
 8012d94:	e002      	b.n	8012d9c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8012d96:	f06f 0302 	mvn.w	r3, #2
 8012d9a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012d9c:	69fb      	ldr	r3, [r7, #28]
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	3720      	adds	r7, #32
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}
 8012da6:	bf00      	nop
 8012da8:	e000ed04 	.word	0xe000ed04

08012dac <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b088      	sub	sp, #32
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	60f8      	str	r0, [r7, #12]
 8012db4:	60b9      	str	r1, [r7, #8]
 8012db6:	607a      	str	r2, [r7, #4]
 8012db8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012dc2:	f3ef 8305 	mrs	r3, IPSR
 8012dc6:	617b      	str	r3, [r7, #20]
  return(result);
 8012dc8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d028      	beq.n	8012e20 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012dce:	69bb      	ldr	r3, [r7, #24]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d005      	beq.n	8012de0 <osMessageQueueGet+0x34>
 8012dd4:	68bb      	ldr	r3, [r7, #8]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d002      	beq.n	8012de0 <osMessageQueueGet+0x34>
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d003      	beq.n	8012de8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8012de0:	f06f 0303 	mvn.w	r3, #3
 8012de4:	61fb      	str	r3, [r7, #28]
 8012de6:	e037      	b.n	8012e58 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012de8:	2300      	movs	r3, #0
 8012dea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012dec:	f107 0310 	add.w	r3, r7, #16
 8012df0:	461a      	mov	r2, r3
 8012df2:	68b9      	ldr	r1, [r7, #8]
 8012df4:	69b8      	ldr	r0, [r7, #24]
 8012df6:	f000 fec5 	bl	8013b84 <xQueueReceiveFromISR>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	2b01      	cmp	r3, #1
 8012dfe:	d003      	beq.n	8012e08 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8012e00:	f06f 0302 	mvn.w	r3, #2
 8012e04:	61fb      	str	r3, [r7, #28]
 8012e06:	e027      	b.n	8012e58 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012e08:	693b      	ldr	r3, [r7, #16]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d024      	beq.n	8012e58 <osMessageQueueGet+0xac>
 8012e0e:	4b15      	ldr	r3, [pc, #84]	; (8012e64 <osMessageQueueGet+0xb8>)
 8012e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e14:	601a      	str	r2, [r3, #0]
 8012e16:	f3bf 8f4f 	dsb	sy
 8012e1a:	f3bf 8f6f 	isb	sy
 8012e1e:	e01b      	b.n	8012e58 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012e20:	69bb      	ldr	r3, [r7, #24]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d002      	beq.n	8012e2c <osMessageQueueGet+0x80>
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d103      	bne.n	8012e34 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012e2c:	f06f 0303 	mvn.w	r3, #3
 8012e30:	61fb      	str	r3, [r7, #28]
 8012e32:	e011      	b.n	8012e58 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012e34:	683a      	ldr	r2, [r7, #0]
 8012e36:	68b9      	ldr	r1, [r7, #8]
 8012e38:	69b8      	ldr	r0, [r7, #24]
 8012e3a:	f000 fdc3 	bl	80139c4 <xQueueReceive>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	2b01      	cmp	r3, #1
 8012e42:	d009      	beq.n	8012e58 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d003      	beq.n	8012e52 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012e4a:	f06f 0301 	mvn.w	r3, #1
 8012e4e:	61fb      	str	r3, [r7, #28]
 8012e50:	e002      	b.n	8012e58 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8012e52:	f06f 0302 	mvn.w	r3, #2
 8012e56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012e58:	69fb      	ldr	r3, [r7, #28]
}
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	3720      	adds	r7, #32
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd80      	pop	{r7, pc}
 8012e62:	bf00      	nop
 8012e64:	e000ed04 	.word	0xe000ed04

08012e68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012e68:	b480      	push	{r7}
 8012e6a:	b085      	sub	sp, #20
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	60f8      	str	r0, [r7, #12]
 8012e70:	60b9      	str	r1, [r7, #8]
 8012e72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	4a07      	ldr	r2, [pc, #28]	; (8012e94 <vApplicationGetIdleTaskMemory+0x2c>)
 8012e78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	4a06      	ldr	r2, [pc, #24]	; (8012e98 <vApplicationGetIdleTaskMemory+0x30>)
 8012e7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2280      	movs	r2, #128	; 0x80
 8012e84:	601a      	str	r2, [r3, #0]
}
 8012e86:	bf00      	nop
 8012e88:	3714      	adds	r7, #20
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e90:	4770      	bx	lr
 8012e92:	bf00      	nop
 8012e94:	240010d0 	.word	0x240010d0
 8012e98:	2400112c 	.word	0x2400112c

08012e9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012e9c:	b480      	push	{r7}
 8012e9e:	b085      	sub	sp, #20
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	60f8      	str	r0, [r7, #12]
 8012ea4:	60b9      	str	r1, [r7, #8]
 8012ea6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	4a07      	ldr	r2, [pc, #28]	; (8012ec8 <vApplicationGetTimerTaskMemory+0x2c>)
 8012eac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	4a06      	ldr	r2, [pc, #24]	; (8012ecc <vApplicationGetTimerTaskMemory+0x30>)
 8012eb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012eba:	601a      	str	r2, [r3, #0]
}
 8012ebc:	bf00      	nop
 8012ebe:	3714      	adds	r7, #20
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec6:	4770      	bx	lr
 8012ec8:	2400132c 	.word	0x2400132c
 8012ecc:	24001388 	.word	0x24001388

08012ed0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b086      	sub	sp, #24
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d10a      	bne.n	8012ef4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ee2:	f383 8811 	msr	BASEPRI, r3
 8012ee6:	f3bf 8f6f 	isb	sy
 8012eea:	f3bf 8f4f 	dsb	sy
 8012eee:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012ef0:	bf00      	nop
 8012ef2:	e7fe      	b.n	8012ef2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8012ef4:	2320      	movs	r3, #32
 8012ef6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	2b20      	cmp	r3, #32
 8012efc:	d00a      	beq.n	8012f14 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8012efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f02:	f383 8811 	msr	BASEPRI, r3
 8012f06:	f3bf 8f6f 	isb	sy
 8012f0a:	f3bf 8f4f 	dsb	sy
 8012f0e:	60fb      	str	r3, [r7, #12]
}
 8012f10:	bf00      	nop
 8012f12:	e7fe      	b.n	8012f12 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d00a      	beq.n	8012f34 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	2200      	movs	r2, #0
 8012f22:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012f24:	697b      	ldr	r3, [r7, #20]
 8012f26:	3304      	adds	r3, #4
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f000 f9bf 	bl	80132ac <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	2201      	movs	r2, #1
 8012f32:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8012f34:	697b      	ldr	r3, [r7, #20]
	}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3718      	adds	r7, #24
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}

08012f3e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8012f3e:	b580      	push	{r7, lr}
 8012f40:	b082      	sub	sp, #8
 8012f42:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8012f44:	2020      	movs	r0, #32
 8012f46:	f002 fe9f 	bl	8015c88 <pvPortMalloc>
 8012f4a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d00a      	beq.n	8012f68 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2200      	movs	r2, #0
 8012f56:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	3304      	adds	r3, #4
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f000 f9a5 	bl	80132ac <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	2200      	movs	r2, #0
 8012f66:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8012f68:	687b      	ldr	r3, [r7, #4]
	}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3708      	adds	r7, #8
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}
	...

08012f74 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b090      	sub	sp, #64	; 0x40
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	60f8      	str	r0, [r7, #12]
 8012f7c:	60b9      	str	r1, [r7, #8]
 8012f7e:	607a      	str	r2, [r7, #4]
 8012f80:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8012f86:	2300      	movs	r3, #0
 8012f88:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d10a      	bne.n	8012faa <xEventGroupWaitBits+0x36>
	__asm volatile
 8012f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f98:	f383 8811 	msr	BASEPRI, r3
 8012f9c:	f3bf 8f6f 	isb	sy
 8012fa0:	f3bf 8f4f 	dsb	sy
 8012fa4:	623b      	str	r3, [r7, #32]
}
 8012fa6:	bf00      	nop
 8012fa8:	e7fe      	b.n	8012fa8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d00a      	beq.n	8012fca <xEventGroupWaitBits+0x56>
	__asm volatile
 8012fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb8:	f383 8811 	msr	BASEPRI, r3
 8012fbc:	f3bf 8f6f 	isb	sy
 8012fc0:	f3bf 8f4f 	dsb	sy
 8012fc4:	61fb      	str	r3, [r7, #28]
}
 8012fc6:	bf00      	nop
 8012fc8:	e7fe      	b.n	8012fc8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d10a      	bne.n	8012fe6 <xEventGroupWaitBits+0x72>
	__asm volatile
 8012fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fd4:	f383 8811 	msr	BASEPRI, r3
 8012fd8:	f3bf 8f6f 	isb	sy
 8012fdc:	f3bf 8f4f 	dsb	sy
 8012fe0:	61bb      	str	r3, [r7, #24]
}
 8012fe2:	bf00      	nop
 8012fe4:	e7fe      	b.n	8012fe4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012fe6:	f001 ff99 	bl	8014f1c <xTaskGetSchedulerState>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d102      	bne.n	8012ff6 <xEventGroupWaitBits+0x82>
 8012ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d101      	bne.n	8012ffa <xEventGroupWaitBits+0x86>
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	e000      	b.n	8012ffc <xEventGroupWaitBits+0x88>
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d10a      	bne.n	8013016 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013004:	f383 8811 	msr	BASEPRI, r3
 8013008:	f3bf 8f6f 	isb	sy
 801300c:	f3bf 8f4f 	dsb	sy
 8013010:	617b      	str	r3, [r7, #20]
}
 8013012:	bf00      	nop
 8013014:	e7fe      	b.n	8013014 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013016:	f001 faf9 	bl	801460c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013020:	683a      	ldr	r2, [r7, #0]
 8013022:	68b9      	ldr	r1, [r7, #8]
 8013024:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013026:	f000 f90b 	bl	8013240 <prvTestWaitCondition>
 801302a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 801302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801302e:	2b00      	cmp	r3, #0
 8013030:	d00e      	beq.n	8013050 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013034:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013036:	2300      	movs	r3, #0
 8013038:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d028      	beq.n	8013092 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013042:	681a      	ldr	r2, [r3, #0]
 8013044:	68bb      	ldr	r3, [r7, #8]
 8013046:	43db      	mvns	r3, r3
 8013048:	401a      	ands	r2, r3
 801304a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801304c:	601a      	str	r2, [r3, #0]
 801304e:	e020      	b.n	8013092 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013052:	2b00      	cmp	r3, #0
 8013054:	d104      	bne.n	8013060 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013058:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801305a:	2301      	movs	r3, #1
 801305c:	633b      	str	r3, [r7, #48]	; 0x30
 801305e:	e018      	b.n	8013092 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d003      	beq.n	801306e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013068:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801306c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801306e:	683b      	ldr	r3, [r7, #0]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d003      	beq.n	801307c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013076:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801307a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801307c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801307e:	1d18      	adds	r0, r3, #4
 8013080:	68ba      	ldr	r2, [r7, #8]
 8013082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013084:	4313      	orrs	r3, r2
 8013086:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013088:	4619      	mov	r1, r3
 801308a:	f001 fcbf 	bl	8014a0c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801308e:	2300      	movs	r3, #0
 8013090:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013092:	f001 fac9 	bl	8014628 <xTaskResumeAll>
 8013096:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801309a:	2b00      	cmp	r3, #0
 801309c:	d031      	beq.n	8013102 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d107      	bne.n	80130b4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80130a4:	4b19      	ldr	r3, [pc, #100]	; (801310c <xEventGroupWaitBits+0x198>)
 80130a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130aa:	601a      	str	r2, [r3, #0]
 80130ac:	f3bf 8f4f 	dsb	sy
 80130b0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80130b4:	f001 ffbe 	bl	8015034 <uxTaskResetEventItemValue>
 80130b8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80130ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d11a      	bne.n	80130fa <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80130c4:	f002 fcbe 	bl	8015a44 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80130c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80130ce:	683a      	ldr	r2, [r7, #0]
 80130d0:	68b9      	ldr	r1, [r7, #8]
 80130d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80130d4:	f000 f8b4 	bl	8013240 <prvTestWaitCondition>
 80130d8:	4603      	mov	r3, r0
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d009      	beq.n	80130f2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d006      	beq.n	80130f2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80130e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130e6:	681a      	ldr	r2, [r3, #0]
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	43db      	mvns	r3, r3
 80130ec:	401a      	ands	r2, r3
 80130ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130f0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80130f2:	2301      	movs	r3, #1
 80130f4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80130f6:	f002 fcd5 	bl	8015aa4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80130fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013100:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013104:	4618      	mov	r0, r3
 8013106:	3740      	adds	r7, #64	; 0x40
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}
 801310c:	e000ed04 	.word	0xe000ed04

08013110 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b08e      	sub	sp, #56	; 0x38
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
 8013118:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801311a:	2300      	movs	r3, #0
 801311c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013122:	2300      	movs	r3, #0
 8013124:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d10a      	bne.n	8013142 <xEventGroupSetBits+0x32>
	__asm volatile
 801312c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013130:	f383 8811 	msr	BASEPRI, r3
 8013134:	f3bf 8f6f 	isb	sy
 8013138:	f3bf 8f4f 	dsb	sy
 801313c:	613b      	str	r3, [r7, #16]
}
 801313e:	bf00      	nop
 8013140:	e7fe      	b.n	8013140 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013148:	2b00      	cmp	r3, #0
 801314a:	d00a      	beq.n	8013162 <xEventGroupSetBits+0x52>
	__asm volatile
 801314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013150:	f383 8811 	msr	BASEPRI, r3
 8013154:	f3bf 8f6f 	isb	sy
 8013158:	f3bf 8f4f 	dsb	sy
 801315c:	60fb      	str	r3, [r7, #12]
}
 801315e:	bf00      	nop
 8013160:	e7fe      	b.n	8013160 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013164:	3304      	adds	r3, #4
 8013166:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801316a:	3308      	adds	r3, #8
 801316c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801316e:	f001 fa4d 	bl	801460c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013174:	68db      	ldr	r3, [r3, #12]
 8013176:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801317a:	681a      	ldr	r2, [r3, #0]
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	431a      	orrs	r2, r3
 8013180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013182:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013184:	e03c      	b.n	8013200 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013188:	685b      	ldr	r3, [r3, #4]
 801318a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801318c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013192:	2300      	movs	r3, #0
 8013194:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013196:	69bb      	ldr	r3, [r7, #24]
 8013198:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801319c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801319e:	69bb      	ldr	r3, [r7, #24]
 80131a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80131a4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d108      	bne.n	80131c2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80131b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b2:	681a      	ldr	r2, [r3, #0]
 80131b4:	69bb      	ldr	r3, [r7, #24]
 80131b6:	4013      	ands	r3, r2
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d00b      	beq.n	80131d4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80131bc:	2301      	movs	r3, #1
 80131be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80131c0:	e008      	b.n	80131d4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80131c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c4:	681a      	ldr	r2, [r3, #0]
 80131c6:	69bb      	ldr	r3, [r7, #24]
 80131c8:	4013      	ands	r3, r2
 80131ca:	69ba      	ldr	r2, [r7, #24]
 80131cc:	429a      	cmp	r2, r3
 80131ce:	d101      	bne.n	80131d4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80131d0:	2301      	movs	r3, #1
 80131d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80131d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d010      	beq.n	80131fc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d003      	beq.n	80131ec <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80131e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131e6:	69bb      	ldr	r3, [r7, #24]
 80131e8:	4313      	orrs	r3, r2
 80131ea:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80131ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80131f4:	4619      	mov	r1, r3
 80131f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80131f8:	f001 fcd4 	bl	8014ba4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80131fc:	69fb      	ldr	r3, [r7, #28]
 80131fe:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013202:	6a3b      	ldr	r3, [r7, #32]
 8013204:	429a      	cmp	r2, r3
 8013206:	d1be      	bne.n	8013186 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801320a:	681a      	ldr	r2, [r3, #0]
 801320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801320e:	43db      	mvns	r3, r3
 8013210:	401a      	ands	r2, r3
 8013212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013214:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013216:	f001 fa07 	bl	8014628 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801321c:	681b      	ldr	r3, [r3, #0]
}
 801321e:	4618      	mov	r0, r3
 8013220:	3738      	adds	r7, #56	; 0x38
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}

08013226 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013226:	b580      	push	{r7, lr}
 8013228:	b082      	sub	sp, #8
 801322a:	af00      	add	r7, sp, #0
 801322c:	6078      	str	r0, [r7, #4]
 801322e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013230:	6839      	ldr	r1, [r7, #0]
 8013232:	6878      	ldr	r0, [r7, #4]
 8013234:	f7ff ff6c 	bl	8013110 <xEventGroupSetBits>
}
 8013238:	bf00      	nop
 801323a:	3708      	adds	r7, #8
 801323c:	46bd      	mov	sp, r7
 801323e:	bd80      	pop	{r7, pc}

08013240 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013240:	b480      	push	{r7}
 8013242:	b087      	sub	sp, #28
 8013244:	af00      	add	r7, sp, #0
 8013246:	60f8      	str	r0, [r7, #12]
 8013248:	60b9      	str	r1, [r7, #8]
 801324a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801324c:	2300      	movs	r3, #0
 801324e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d107      	bne.n	8013266 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013256:	68fa      	ldr	r2, [r7, #12]
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	4013      	ands	r3, r2
 801325c:	2b00      	cmp	r3, #0
 801325e:	d00a      	beq.n	8013276 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013260:	2301      	movs	r3, #1
 8013262:	617b      	str	r3, [r7, #20]
 8013264:	e007      	b.n	8013276 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013266:	68fa      	ldr	r2, [r7, #12]
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	4013      	ands	r3, r2
 801326c:	68ba      	ldr	r2, [r7, #8]
 801326e:	429a      	cmp	r2, r3
 8013270:	d101      	bne.n	8013276 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013272:	2301      	movs	r3, #1
 8013274:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013276:	697b      	ldr	r3, [r7, #20]
}
 8013278:	4618      	mov	r0, r3
 801327a:	371c      	adds	r7, #28
 801327c:	46bd      	mov	sp, r7
 801327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013282:	4770      	bx	lr

08013284 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013284:	b580      	push	{r7, lr}
 8013286:	b086      	sub	sp, #24
 8013288:	af00      	add	r7, sp, #0
 801328a:	60f8      	str	r0, [r7, #12]
 801328c:	60b9      	str	r1, [r7, #8]
 801328e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	68ba      	ldr	r2, [r7, #8]
 8013294:	68f9      	ldr	r1, [r7, #12]
 8013296:	4804      	ldr	r0, [pc, #16]	; (80132a8 <xEventGroupSetBitsFromISR+0x24>)
 8013298:	f002 fa86 	bl	80157a8 <xTimerPendFunctionCallFromISR>
 801329c:	6178      	str	r0, [r7, #20]

		return xReturn;
 801329e:	697b      	ldr	r3, [r7, #20]
	}
 80132a0:	4618      	mov	r0, r3
 80132a2:	3718      	adds	r7, #24
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}
 80132a8:	08013227 	.word	0x08013227

080132ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80132ac:	b480      	push	{r7}
 80132ae:	b083      	sub	sp, #12
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	f103 0208 	add.w	r2, r3, #8
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80132c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	f103 0208 	add.w	r2, r3, #8
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f103 0208 	add.w	r2, r3, #8
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	2200      	movs	r2, #0
 80132de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80132e0:	bf00      	nop
 80132e2:	370c      	adds	r7, #12
 80132e4:	46bd      	mov	sp, r7
 80132e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ea:	4770      	bx	lr

080132ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80132ec:	b480      	push	{r7}
 80132ee:	b083      	sub	sp, #12
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2200      	movs	r2, #0
 80132f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80132fa:	bf00      	nop
 80132fc:	370c      	adds	r7, #12
 80132fe:	46bd      	mov	sp, r7
 8013300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013304:	4770      	bx	lr

08013306 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013306:	b480      	push	{r7}
 8013308:	b085      	sub	sp, #20
 801330a:	af00      	add	r7, sp, #0
 801330c:	6078      	str	r0, [r7, #4]
 801330e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	685b      	ldr	r3, [r3, #4]
 8013314:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	68fa      	ldr	r2, [r7, #12]
 801331a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	689a      	ldr	r2, [r3, #8]
 8013320:	683b      	ldr	r3, [r7, #0]
 8013322:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	689b      	ldr	r3, [r3, #8]
 8013328:	683a      	ldr	r2, [r7, #0]
 801332a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	683a      	ldr	r2, [r7, #0]
 8013330:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	687a      	ldr	r2, [r7, #4]
 8013336:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	1c5a      	adds	r2, r3, #1
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	601a      	str	r2, [r3, #0]
}
 8013342:	bf00      	nop
 8013344:	3714      	adds	r7, #20
 8013346:	46bd      	mov	sp, r7
 8013348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334c:	4770      	bx	lr

0801334e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801334e:	b480      	push	{r7}
 8013350:	b085      	sub	sp, #20
 8013352:	af00      	add	r7, sp, #0
 8013354:	6078      	str	r0, [r7, #4]
 8013356:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801335e:	68bb      	ldr	r3, [r7, #8]
 8013360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013364:	d103      	bne.n	801336e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	691b      	ldr	r3, [r3, #16]
 801336a:	60fb      	str	r3, [r7, #12]
 801336c:	e00c      	b.n	8013388 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	3308      	adds	r3, #8
 8013372:	60fb      	str	r3, [r7, #12]
 8013374:	e002      	b.n	801337c <vListInsert+0x2e>
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	685b      	ldr	r3, [r3, #4]
 801337a:	60fb      	str	r3, [r7, #12]
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	685b      	ldr	r3, [r3, #4]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	68ba      	ldr	r2, [r7, #8]
 8013384:	429a      	cmp	r2, r3
 8013386:	d2f6      	bcs.n	8013376 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	685a      	ldr	r2, [r3, #4]
 801338c:	683b      	ldr	r3, [r7, #0]
 801338e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013390:	683b      	ldr	r3, [r7, #0]
 8013392:	685b      	ldr	r3, [r3, #4]
 8013394:	683a      	ldr	r2, [r7, #0]
 8013396:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	68fa      	ldr	r2, [r7, #12]
 801339c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	683a      	ldr	r2, [r7, #0]
 80133a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	687a      	ldr	r2, [r7, #4]
 80133a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	1c5a      	adds	r2, r3, #1
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	601a      	str	r2, [r3, #0]
}
 80133b4:	bf00      	nop
 80133b6:	3714      	adds	r7, #20
 80133b8:	46bd      	mov	sp, r7
 80133ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133be:	4770      	bx	lr

080133c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80133c0:	b480      	push	{r7}
 80133c2:	b085      	sub	sp, #20
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	691b      	ldr	r3, [r3, #16]
 80133cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	685b      	ldr	r3, [r3, #4]
 80133d2:	687a      	ldr	r2, [r7, #4]
 80133d4:	6892      	ldr	r2, [r2, #8]
 80133d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	689b      	ldr	r3, [r3, #8]
 80133dc:	687a      	ldr	r2, [r7, #4]
 80133de:	6852      	ldr	r2, [r2, #4]
 80133e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	685b      	ldr	r3, [r3, #4]
 80133e6:	687a      	ldr	r2, [r7, #4]
 80133e8:	429a      	cmp	r2, r3
 80133ea:	d103      	bne.n	80133f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	689a      	ldr	r2, [r3, #8]
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2200      	movs	r2, #0
 80133f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	1e5a      	subs	r2, r3, #1
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	681b      	ldr	r3, [r3, #0]
}
 8013408:	4618      	mov	r0, r3
 801340a:	3714      	adds	r7, #20
 801340c:	46bd      	mov	sp, r7
 801340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013412:	4770      	bx	lr

08013414 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b084      	sub	sp, #16
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
 801341c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d10a      	bne.n	801343e <xQueueGenericReset+0x2a>
	__asm volatile
 8013428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801342c:	f383 8811 	msr	BASEPRI, r3
 8013430:	f3bf 8f6f 	isb	sy
 8013434:	f3bf 8f4f 	dsb	sy
 8013438:	60bb      	str	r3, [r7, #8]
}
 801343a:	bf00      	nop
 801343c:	e7fe      	b.n	801343c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801343e:	f002 fb01 	bl	8015a44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	681a      	ldr	r2, [r3, #0]
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801344a:	68f9      	ldr	r1, [r7, #12]
 801344c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801344e:	fb01 f303 	mul.w	r3, r1, r3
 8013452:	441a      	add	r2, r3
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	2200      	movs	r2, #0
 801345c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	681a      	ldr	r2, [r3, #0]
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	681a      	ldr	r2, [r3, #0]
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801346e:	3b01      	subs	r3, #1
 8013470:	68f9      	ldr	r1, [r7, #12]
 8013472:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013474:	fb01 f303 	mul.w	r3, r1, r3
 8013478:	441a      	add	r2, r3
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	22ff      	movs	r2, #255	; 0xff
 8013482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	22ff      	movs	r2, #255	; 0xff
 801348a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801348e:	683b      	ldr	r3, [r7, #0]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d114      	bne.n	80134be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	691b      	ldr	r3, [r3, #16]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d01a      	beq.n	80134d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	3310      	adds	r3, #16
 80134a0:	4618      	mov	r0, r3
 80134a2:	f001 fb1b 	bl	8014adc <xTaskRemoveFromEventList>
 80134a6:	4603      	mov	r3, r0
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d012      	beq.n	80134d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80134ac:	4b0c      	ldr	r3, [pc, #48]	; (80134e0 <xQueueGenericReset+0xcc>)
 80134ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134b2:	601a      	str	r2, [r3, #0]
 80134b4:	f3bf 8f4f 	dsb	sy
 80134b8:	f3bf 8f6f 	isb	sy
 80134bc:	e009      	b.n	80134d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	3310      	adds	r3, #16
 80134c2:	4618      	mov	r0, r3
 80134c4:	f7ff fef2 	bl	80132ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	3324      	adds	r3, #36	; 0x24
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7ff feed 	bl	80132ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80134d2:	f002 fae7 	bl	8015aa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80134d6:	2301      	movs	r3, #1
}
 80134d8:	4618      	mov	r0, r3
 80134da:	3710      	adds	r7, #16
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}
 80134e0:	e000ed04 	.word	0xe000ed04

080134e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b08e      	sub	sp, #56	; 0x38
 80134e8:	af02      	add	r7, sp, #8
 80134ea:	60f8      	str	r0, [r7, #12]
 80134ec:	60b9      	str	r1, [r7, #8]
 80134ee:	607a      	str	r2, [r7, #4]
 80134f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d10a      	bne.n	801350e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80134f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134fc:	f383 8811 	msr	BASEPRI, r3
 8013500:	f3bf 8f6f 	isb	sy
 8013504:	f3bf 8f4f 	dsb	sy
 8013508:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801350a:	bf00      	nop
 801350c:	e7fe      	b.n	801350c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801350e:	683b      	ldr	r3, [r7, #0]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d10a      	bne.n	801352a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013518:	f383 8811 	msr	BASEPRI, r3
 801351c:	f3bf 8f6f 	isb	sy
 8013520:	f3bf 8f4f 	dsb	sy
 8013524:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013526:	bf00      	nop
 8013528:	e7fe      	b.n	8013528 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d002      	beq.n	8013536 <xQueueGenericCreateStatic+0x52>
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d001      	beq.n	801353a <xQueueGenericCreateStatic+0x56>
 8013536:	2301      	movs	r3, #1
 8013538:	e000      	b.n	801353c <xQueueGenericCreateStatic+0x58>
 801353a:	2300      	movs	r3, #0
 801353c:	2b00      	cmp	r3, #0
 801353e:	d10a      	bne.n	8013556 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013544:	f383 8811 	msr	BASEPRI, r3
 8013548:	f3bf 8f6f 	isb	sy
 801354c:	f3bf 8f4f 	dsb	sy
 8013550:	623b      	str	r3, [r7, #32]
}
 8013552:	bf00      	nop
 8013554:	e7fe      	b.n	8013554 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d102      	bne.n	8013562 <xQueueGenericCreateStatic+0x7e>
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d101      	bne.n	8013566 <xQueueGenericCreateStatic+0x82>
 8013562:	2301      	movs	r3, #1
 8013564:	e000      	b.n	8013568 <xQueueGenericCreateStatic+0x84>
 8013566:	2300      	movs	r3, #0
 8013568:	2b00      	cmp	r3, #0
 801356a:	d10a      	bne.n	8013582 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013570:	f383 8811 	msr	BASEPRI, r3
 8013574:	f3bf 8f6f 	isb	sy
 8013578:	f3bf 8f4f 	dsb	sy
 801357c:	61fb      	str	r3, [r7, #28]
}
 801357e:	bf00      	nop
 8013580:	e7fe      	b.n	8013580 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013582:	2350      	movs	r3, #80	; 0x50
 8013584:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013586:	697b      	ldr	r3, [r7, #20]
 8013588:	2b50      	cmp	r3, #80	; 0x50
 801358a:	d00a      	beq.n	80135a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801358c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013590:	f383 8811 	msr	BASEPRI, r3
 8013594:	f3bf 8f6f 	isb	sy
 8013598:	f3bf 8f4f 	dsb	sy
 801359c:	61bb      	str	r3, [r7, #24]
}
 801359e:	bf00      	nop
 80135a0:	e7fe      	b.n	80135a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80135a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80135a4:	683b      	ldr	r3, [r7, #0]
 80135a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80135a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d00d      	beq.n	80135ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80135ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135b0:	2201      	movs	r2, #1
 80135b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80135b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80135ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135bc:	9300      	str	r3, [sp, #0]
 80135be:	4613      	mov	r3, r2
 80135c0:	687a      	ldr	r2, [r7, #4]
 80135c2:	68b9      	ldr	r1, [r7, #8]
 80135c4:	68f8      	ldr	r0, [r7, #12]
 80135c6:	f000 f83f 	bl	8013648 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80135ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80135cc:	4618      	mov	r0, r3
 80135ce:	3730      	adds	r7, #48	; 0x30
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}

080135d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b08a      	sub	sp, #40	; 0x28
 80135d8:	af02      	add	r7, sp, #8
 80135da:	60f8      	str	r0, [r7, #12]
 80135dc:	60b9      	str	r1, [r7, #8]
 80135de:	4613      	mov	r3, r2
 80135e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d10a      	bne.n	80135fe <xQueueGenericCreate+0x2a>
	__asm volatile
 80135e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ec:	f383 8811 	msr	BASEPRI, r3
 80135f0:	f3bf 8f6f 	isb	sy
 80135f4:	f3bf 8f4f 	dsb	sy
 80135f8:	613b      	str	r3, [r7, #16]
}
 80135fa:	bf00      	nop
 80135fc:	e7fe      	b.n	80135fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	68ba      	ldr	r2, [r7, #8]
 8013602:	fb02 f303 	mul.w	r3, r2, r3
 8013606:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013608:	69fb      	ldr	r3, [r7, #28]
 801360a:	3350      	adds	r3, #80	; 0x50
 801360c:	4618      	mov	r0, r3
 801360e:	f002 fb3b 	bl	8015c88 <pvPortMalloc>
 8013612:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013614:	69bb      	ldr	r3, [r7, #24]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d011      	beq.n	801363e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801361a:	69bb      	ldr	r3, [r7, #24]
 801361c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801361e:	697b      	ldr	r3, [r7, #20]
 8013620:	3350      	adds	r3, #80	; 0x50
 8013622:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013624:	69bb      	ldr	r3, [r7, #24]
 8013626:	2200      	movs	r2, #0
 8013628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801362c:	79fa      	ldrb	r2, [r7, #7]
 801362e:	69bb      	ldr	r3, [r7, #24]
 8013630:	9300      	str	r3, [sp, #0]
 8013632:	4613      	mov	r3, r2
 8013634:	697a      	ldr	r2, [r7, #20]
 8013636:	68b9      	ldr	r1, [r7, #8]
 8013638:	68f8      	ldr	r0, [r7, #12]
 801363a:	f000 f805 	bl	8013648 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801363e:	69bb      	ldr	r3, [r7, #24]
	}
 8013640:	4618      	mov	r0, r3
 8013642:	3720      	adds	r7, #32
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}

08013648 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b084      	sub	sp, #16
 801364c:	af00      	add	r7, sp, #0
 801364e:	60f8      	str	r0, [r7, #12]
 8013650:	60b9      	str	r1, [r7, #8]
 8013652:	607a      	str	r2, [r7, #4]
 8013654:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013656:	68bb      	ldr	r3, [r7, #8]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d103      	bne.n	8013664 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801365c:	69bb      	ldr	r3, [r7, #24]
 801365e:	69ba      	ldr	r2, [r7, #24]
 8013660:	601a      	str	r2, [r3, #0]
 8013662:	e002      	b.n	801366a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013664:	69bb      	ldr	r3, [r7, #24]
 8013666:	687a      	ldr	r2, [r7, #4]
 8013668:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801366a:	69bb      	ldr	r3, [r7, #24]
 801366c:	68fa      	ldr	r2, [r7, #12]
 801366e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013670:	69bb      	ldr	r3, [r7, #24]
 8013672:	68ba      	ldr	r2, [r7, #8]
 8013674:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013676:	2101      	movs	r1, #1
 8013678:	69b8      	ldr	r0, [r7, #24]
 801367a:	f7ff fecb 	bl	8013414 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801367e:	69bb      	ldr	r3, [r7, #24]
 8013680:	78fa      	ldrb	r2, [r7, #3]
 8013682:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013686:	bf00      	nop
 8013688:	3710      	adds	r7, #16
 801368a:	46bd      	mov	sp, r7
 801368c:	bd80      	pop	{r7, pc}
	...

08013690 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b08e      	sub	sp, #56	; 0x38
 8013694:	af00      	add	r7, sp, #0
 8013696:	60f8      	str	r0, [r7, #12]
 8013698:	60b9      	str	r1, [r7, #8]
 801369a:	607a      	str	r2, [r7, #4]
 801369c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801369e:	2300      	movs	r3, #0
 80136a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80136a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d10a      	bne.n	80136c2 <xQueueGenericSend+0x32>
	__asm volatile
 80136ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136b0:	f383 8811 	msr	BASEPRI, r3
 80136b4:	f3bf 8f6f 	isb	sy
 80136b8:	f3bf 8f4f 	dsb	sy
 80136bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80136be:	bf00      	nop
 80136c0:	e7fe      	b.n	80136c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80136c2:	68bb      	ldr	r3, [r7, #8]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d103      	bne.n	80136d0 <xQueueGenericSend+0x40>
 80136c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d101      	bne.n	80136d4 <xQueueGenericSend+0x44>
 80136d0:	2301      	movs	r3, #1
 80136d2:	e000      	b.n	80136d6 <xQueueGenericSend+0x46>
 80136d4:	2300      	movs	r3, #0
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d10a      	bne.n	80136f0 <xQueueGenericSend+0x60>
	__asm volatile
 80136da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136de:	f383 8811 	msr	BASEPRI, r3
 80136e2:	f3bf 8f6f 	isb	sy
 80136e6:	f3bf 8f4f 	dsb	sy
 80136ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80136ec:	bf00      	nop
 80136ee:	e7fe      	b.n	80136ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80136f0:	683b      	ldr	r3, [r7, #0]
 80136f2:	2b02      	cmp	r3, #2
 80136f4:	d103      	bne.n	80136fe <xQueueGenericSend+0x6e>
 80136f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136fa:	2b01      	cmp	r3, #1
 80136fc:	d101      	bne.n	8013702 <xQueueGenericSend+0x72>
 80136fe:	2301      	movs	r3, #1
 8013700:	e000      	b.n	8013704 <xQueueGenericSend+0x74>
 8013702:	2300      	movs	r3, #0
 8013704:	2b00      	cmp	r3, #0
 8013706:	d10a      	bne.n	801371e <xQueueGenericSend+0x8e>
	__asm volatile
 8013708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801370c:	f383 8811 	msr	BASEPRI, r3
 8013710:	f3bf 8f6f 	isb	sy
 8013714:	f3bf 8f4f 	dsb	sy
 8013718:	623b      	str	r3, [r7, #32]
}
 801371a:	bf00      	nop
 801371c:	e7fe      	b.n	801371c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801371e:	f001 fbfd 	bl	8014f1c <xTaskGetSchedulerState>
 8013722:	4603      	mov	r3, r0
 8013724:	2b00      	cmp	r3, #0
 8013726:	d102      	bne.n	801372e <xQueueGenericSend+0x9e>
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d101      	bne.n	8013732 <xQueueGenericSend+0xa2>
 801372e:	2301      	movs	r3, #1
 8013730:	e000      	b.n	8013734 <xQueueGenericSend+0xa4>
 8013732:	2300      	movs	r3, #0
 8013734:	2b00      	cmp	r3, #0
 8013736:	d10a      	bne.n	801374e <xQueueGenericSend+0xbe>
	__asm volatile
 8013738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801373c:	f383 8811 	msr	BASEPRI, r3
 8013740:	f3bf 8f6f 	isb	sy
 8013744:	f3bf 8f4f 	dsb	sy
 8013748:	61fb      	str	r3, [r7, #28]
}
 801374a:	bf00      	nop
 801374c:	e7fe      	b.n	801374c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801374e:	f002 f979 	bl	8015a44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801375a:	429a      	cmp	r2, r3
 801375c:	d302      	bcc.n	8013764 <xQueueGenericSend+0xd4>
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	2b02      	cmp	r3, #2
 8013762:	d129      	bne.n	80137b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013764:	683a      	ldr	r2, [r7, #0]
 8013766:	68b9      	ldr	r1, [r7, #8]
 8013768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801376a:	f000 fa8b 	bl	8013c84 <prvCopyDataToQueue>
 801376e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013774:	2b00      	cmp	r3, #0
 8013776:	d010      	beq.n	801379a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801377a:	3324      	adds	r3, #36	; 0x24
 801377c:	4618      	mov	r0, r3
 801377e:	f001 f9ad 	bl	8014adc <xTaskRemoveFromEventList>
 8013782:	4603      	mov	r3, r0
 8013784:	2b00      	cmp	r3, #0
 8013786:	d013      	beq.n	80137b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013788:	4b3f      	ldr	r3, [pc, #252]	; (8013888 <xQueueGenericSend+0x1f8>)
 801378a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801378e:	601a      	str	r2, [r3, #0]
 8013790:	f3bf 8f4f 	dsb	sy
 8013794:	f3bf 8f6f 	isb	sy
 8013798:	e00a      	b.n	80137b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801379c:	2b00      	cmp	r3, #0
 801379e:	d007      	beq.n	80137b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80137a0:	4b39      	ldr	r3, [pc, #228]	; (8013888 <xQueueGenericSend+0x1f8>)
 80137a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137a6:	601a      	str	r2, [r3, #0]
 80137a8:	f3bf 8f4f 	dsb	sy
 80137ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80137b0:	f002 f978 	bl	8015aa4 <vPortExitCritical>
				return pdPASS;
 80137b4:	2301      	movs	r3, #1
 80137b6:	e063      	b.n	8013880 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d103      	bne.n	80137c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80137be:	f002 f971 	bl	8015aa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80137c2:	2300      	movs	r3, #0
 80137c4:	e05c      	b.n	8013880 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80137c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d106      	bne.n	80137da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80137cc:	f107 0314 	add.w	r3, r7, #20
 80137d0:	4618      	mov	r0, r3
 80137d2:	f001 fa49 	bl	8014c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80137d6:	2301      	movs	r3, #1
 80137d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80137da:	f002 f963 	bl	8015aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80137de:	f000 ff15 	bl	801460c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80137e2:	f002 f92f 	bl	8015a44 <vPortEnterCritical>
 80137e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80137ec:	b25b      	sxtb	r3, r3
 80137ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80137f2:	d103      	bne.n	80137fc <xQueueGenericSend+0x16c>
 80137f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f6:	2200      	movs	r2, #0
 80137f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80137fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013802:	b25b      	sxtb	r3, r3
 8013804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013808:	d103      	bne.n	8013812 <xQueueGenericSend+0x182>
 801380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380c:	2200      	movs	r2, #0
 801380e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013812:	f002 f947 	bl	8015aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013816:	1d3a      	adds	r2, r7, #4
 8013818:	f107 0314 	add.w	r3, r7, #20
 801381c:	4611      	mov	r1, r2
 801381e:	4618      	mov	r0, r3
 8013820:	f001 fa38 	bl	8014c94 <xTaskCheckForTimeOut>
 8013824:	4603      	mov	r3, r0
 8013826:	2b00      	cmp	r3, #0
 8013828:	d124      	bne.n	8013874 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801382a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801382c:	f000 fb22 	bl	8013e74 <prvIsQueueFull>
 8013830:	4603      	mov	r3, r0
 8013832:	2b00      	cmp	r3, #0
 8013834:	d018      	beq.n	8013868 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013838:	3310      	adds	r3, #16
 801383a:	687a      	ldr	r2, [r7, #4]
 801383c:	4611      	mov	r1, r2
 801383e:	4618      	mov	r0, r3
 8013840:	f001 f8c0 	bl	80149c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013846:	f000 faad 	bl	8013da4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801384a:	f000 feed 	bl	8014628 <xTaskResumeAll>
 801384e:	4603      	mov	r3, r0
 8013850:	2b00      	cmp	r3, #0
 8013852:	f47f af7c 	bne.w	801374e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013856:	4b0c      	ldr	r3, [pc, #48]	; (8013888 <xQueueGenericSend+0x1f8>)
 8013858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801385c:	601a      	str	r2, [r3, #0]
 801385e:	f3bf 8f4f 	dsb	sy
 8013862:	f3bf 8f6f 	isb	sy
 8013866:	e772      	b.n	801374e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801386a:	f000 fa9b 	bl	8013da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801386e:	f000 fedb 	bl	8014628 <xTaskResumeAll>
 8013872:	e76c      	b.n	801374e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013876:	f000 fa95 	bl	8013da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801387a:	f000 fed5 	bl	8014628 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801387e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013880:	4618      	mov	r0, r3
 8013882:	3738      	adds	r7, #56	; 0x38
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}
 8013888:	e000ed04 	.word	0xe000ed04

0801388c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b090      	sub	sp, #64	; 0x40
 8013890:	af00      	add	r7, sp, #0
 8013892:	60f8      	str	r0, [r7, #12]
 8013894:	60b9      	str	r1, [r7, #8]
 8013896:	607a      	str	r2, [r7, #4]
 8013898:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801389e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d10a      	bne.n	80138ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80138a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138a8:	f383 8811 	msr	BASEPRI, r3
 80138ac:	f3bf 8f6f 	isb	sy
 80138b0:	f3bf 8f4f 	dsb	sy
 80138b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80138b6:	bf00      	nop
 80138b8:	e7fe      	b.n	80138b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138ba:	68bb      	ldr	r3, [r7, #8]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d103      	bne.n	80138c8 <xQueueGenericSendFromISR+0x3c>
 80138c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d101      	bne.n	80138cc <xQueueGenericSendFromISR+0x40>
 80138c8:	2301      	movs	r3, #1
 80138ca:	e000      	b.n	80138ce <xQueueGenericSendFromISR+0x42>
 80138cc:	2300      	movs	r3, #0
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d10a      	bne.n	80138e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80138d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138d6:	f383 8811 	msr	BASEPRI, r3
 80138da:	f3bf 8f6f 	isb	sy
 80138de:	f3bf 8f4f 	dsb	sy
 80138e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80138e4:	bf00      	nop
 80138e6:	e7fe      	b.n	80138e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	2b02      	cmp	r3, #2
 80138ec:	d103      	bne.n	80138f6 <xQueueGenericSendFromISR+0x6a>
 80138ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138f2:	2b01      	cmp	r3, #1
 80138f4:	d101      	bne.n	80138fa <xQueueGenericSendFromISR+0x6e>
 80138f6:	2301      	movs	r3, #1
 80138f8:	e000      	b.n	80138fc <xQueueGenericSendFromISR+0x70>
 80138fa:	2300      	movs	r3, #0
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d10a      	bne.n	8013916 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013904:	f383 8811 	msr	BASEPRI, r3
 8013908:	f3bf 8f6f 	isb	sy
 801390c:	f3bf 8f4f 	dsb	sy
 8013910:	623b      	str	r3, [r7, #32]
}
 8013912:	bf00      	nop
 8013914:	e7fe      	b.n	8013914 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013916:	f002 f977 	bl	8015c08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801391a:	f3ef 8211 	mrs	r2, BASEPRI
 801391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013922:	f383 8811 	msr	BASEPRI, r3
 8013926:	f3bf 8f6f 	isb	sy
 801392a:	f3bf 8f4f 	dsb	sy
 801392e:	61fa      	str	r2, [r7, #28]
 8013930:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013932:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013934:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801393a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801393c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801393e:	429a      	cmp	r2, r3
 8013940:	d302      	bcc.n	8013948 <xQueueGenericSendFromISR+0xbc>
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	2b02      	cmp	r3, #2
 8013946:	d12f      	bne.n	80139a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801394a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801394e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013956:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013958:	683a      	ldr	r2, [r7, #0]
 801395a:	68b9      	ldr	r1, [r7, #8]
 801395c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801395e:	f000 f991 	bl	8013c84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013962:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801396a:	d112      	bne.n	8013992 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013970:	2b00      	cmp	r3, #0
 8013972:	d016      	beq.n	80139a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013976:	3324      	adds	r3, #36	; 0x24
 8013978:	4618      	mov	r0, r3
 801397a:	f001 f8af 	bl	8014adc <xTaskRemoveFromEventList>
 801397e:	4603      	mov	r3, r0
 8013980:	2b00      	cmp	r3, #0
 8013982:	d00e      	beq.n	80139a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d00b      	beq.n	80139a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	2201      	movs	r2, #1
 801398e:	601a      	str	r2, [r3, #0]
 8013990:	e007      	b.n	80139a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013992:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013996:	3301      	adds	r3, #1
 8013998:	b2db      	uxtb	r3, r3
 801399a:	b25a      	sxtb	r2, r3
 801399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801399e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80139a2:	2301      	movs	r3, #1
 80139a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80139a6:	e001      	b.n	80139ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80139a8:	2300      	movs	r3, #0
 80139aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80139ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80139b0:	697b      	ldr	r3, [r7, #20]
 80139b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80139b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80139b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80139ba:	4618      	mov	r0, r3
 80139bc:	3740      	adds	r7, #64	; 0x40
 80139be:	46bd      	mov	sp, r7
 80139c0:	bd80      	pop	{r7, pc}
	...

080139c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b08c      	sub	sp, #48	; 0x30
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	60f8      	str	r0, [r7, #12]
 80139cc:	60b9      	str	r1, [r7, #8]
 80139ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80139d0:	2300      	movs	r3, #0
 80139d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80139d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d10a      	bne.n	80139f4 <xQueueReceive+0x30>
	__asm volatile
 80139de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e2:	f383 8811 	msr	BASEPRI, r3
 80139e6:	f3bf 8f6f 	isb	sy
 80139ea:	f3bf 8f4f 	dsb	sy
 80139ee:	623b      	str	r3, [r7, #32]
}
 80139f0:	bf00      	nop
 80139f2:	e7fe      	b.n	80139f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d103      	bne.n	8013a02 <xQueueReceive+0x3e>
 80139fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d101      	bne.n	8013a06 <xQueueReceive+0x42>
 8013a02:	2301      	movs	r3, #1
 8013a04:	e000      	b.n	8013a08 <xQueueReceive+0x44>
 8013a06:	2300      	movs	r3, #0
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d10a      	bne.n	8013a22 <xQueueReceive+0x5e>
	__asm volatile
 8013a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a10:	f383 8811 	msr	BASEPRI, r3
 8013a14:	f3bf 8f6f 	isb	sy
 8013a18:	f3bf 8f4f 	dsb	sy
 8013a1c:	61fb      	str	r3, [r7, #28]
}
 8013a1e:	bf00      	nop
 8013a20:	e7fe      	b.n	8013a20 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013a22:	f001 fa7b 	bl	8014f1c <xTaskGetSchedulerState>
 8013a26:	4603      	mov	r3, r0
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d102      	bne.n	8013a32 <xQueueReceive+0x6e>
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d101      	bne.n	8013a36 <xQueueReceive+0x72>
 8013a32:	2301      	movs	r3, #1
 8013a34:	e000      	b.n	8013a38 <xQueueReceive+0x74>
 8013a36:	2300      	movs	r3, #0
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d10a      	bne.n	8013a52 <xQueueReceive+0x8e>
	__asm volatile
 8013a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a40:	f383 8811 	msr	BASEPRI, r3
 8013a44:	f3bf 8f6f 	isb	sy
 8013a48:	f3bf 8f4f 	dsb	sy
 8013a4c:	61bb      	str	r3, [r7, #24]
}
 8013a4e:	bf00      	nop
 8013a50:	e7fe      	b.n	8013a50 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013a52:	f001 fff7 	bl	8015a44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d01f      	beq.n	8013aa2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013a62:	68b9      	ldr	r1, [r7, #8]
 8013a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a66:	f000 f977 	bl	8013d58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a6c:	1e5a      	subs	r2, r3, #1
 8013a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a74:	691b      	ldr	r3, [r3, #16]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d00f      	beq.n	8013a9a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7c:	3310      	adds	r3, #16
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f001 f82c 	bl	8014adc <xTaskRemoveFromEventList>
 8013a84:	4603      	mov	r3, r0
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d007      	beq.n	8013a9a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013a8a:	4b3d      	ldr	r3, [pc, #244]	; (8013b80 <xQueueReceive+0x1bc>)
 8013a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a90:	601a      	str	r2, [r3, #0]
 8013a92:	f3bf 8f4f 	dsb	sy
 8013a96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013a9a:	f002 f803 	bl	8015aa4 <vPortExitCritical>
				return pdPASS;
 8013a9e:	2301      	movs	r3, #1
 8013aa0:	e069      	b.n	8013b76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d103      	bne.n	8013ab0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013aa8:	f001 fffc 	bl	8015aa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013aac:	2300      	movs	r3, #0
 8013aae:	e062      	b.n	8013b76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d106      	bne.n	8013ac4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013ab6:	f107 0310 	add.w	r3, r7, #16
 8013aba:	4618      	mov	r0, r3
 8013abc:	f001 f8d4 	bl	8014c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013ac0:	2301      	movs	r3, #1
 8013ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013ac4:	f001 ffee 	bl	8015aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013ac8:	f000 fda0 	bl	801460c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013acc:	f001 ffba 	bl	8015a44 <vPortEnterCritical>
 8013ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013ad6:	b25b      	sxtb	r3, r3
 8013ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013adc:	d103      	bne.n	8013ae6 <xQueueReceive+0x122>
 8013ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013aec:	b25b      	sxtb	r3, r3
 8013aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013af2:	d103      	bne.n	8013afc <xQueueReceive+0x138>
 8013af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af6:	2200      	movs	r2, #0
 8013af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013afc:	f001 ffd2 	bl	8015aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013b00:	1d3a      	adds	r2, r7, #4
 8013b02:	f107 0310 	add.w	r3, r7, #16
 8013b06:	4611      	mov	r1, r2
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f001 f8c3 	bl	8014c94 <xTaskCheckForTimeOut>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d123      	bne.n	8013b5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b16:	f000 f997 	bl	8013e48 <prvIsQueueEmpty>
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d017      	beq.n	8013b50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b22:	3324      	adds	r3, #36	; 0x24
 8013b24:	687a      	ldr	r2, [r7, #4]
 8013b26:	4611      	mov	r1, r2
 8013b28:	4618      	mov	r0, r3
 8013b2a:	f000 ff4b 	bl	80149c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b30:	f000 f938 	bl	8013da4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013b34:	f000 fd78 	bl	8014628 <xTaskResumeAll>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d189      	bne.n	8013a52 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013b3e:	4b10      	ldr	r3, [pc, #64]	; (8013b80 <xQueueReceive+0x1bc>)
 8013b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b44:	601a      	str	r2, [r3, #0]
 8013b46:	f3bf 8f4f 	dsb	sy
 8013b4a:	f3bf 8f6f 	isb	sy
 8013b4e:	e780      	b.n	8013a52 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b52:	f000 f927 	bl	8013da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013b56:	f000 fd67 	bl	8014628 <xTaskResumeAll>
 8013b5a:	e77a      	b.n	8013a52 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b5e:	f000 f921 	bl	8013da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013b62:	f000 fd61 	bl	8014628 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b68:	f000 f96e 	bl	8013e48 <prvIsQueueEmpty>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	f43f af6f 	beq.w	8013a52 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013b74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013b76:	4618      	mov	r0, r3
 8013b78:	3730      	adds	r7, #48	; 0x30
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}
 8013b7e:	bf00      	nop
 8013b80:	e000ed04 	.word	0xe000ed04

08013b84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b08e      	sub	sp, #56	; 0x38
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	60f8      	str	r0, [r7, #12]
 8013b8c:	60b9      	str	r1, [r7, #8]
 8013b8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d10a      	bne.n	8013bb0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b9e:	f383 8811 	msr	BASEPRI, r3
 8013ba2:	f3bf 8f6f 	isb	sy
 8013ba6:	f3bf 8f4f 	dsb	sy
 8013baa:	623b      	str	r3, [r7, #32]
}
 8013bac:	bf00      	nop
 8013bae:	e7fe      	b.n	8013bae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013bb0:	68bb      	ldr	r3, [r7, #8]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d103      	bne.n	8013bbe <xQueueReceiveFromISR+0x3a>
 8013bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d101      	bne.n	8013bc2 <xQueueReceiveFromISR+0x3e>
 8013bbe:	2301      	movs	r3, #1
 8013bc0:	e000      	b.n	8013bc4 <xQueueReceiveFromISR+0x40>
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d10a      	bne.n	8013bde <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bcc:	f383 8811 	msr	BASEPRI, r3
 8013bd0:	f3bf 8f6f 	isb	sy
 8013bd4:	f3bf 8f4f 	dsb	sy
 8013bd8:	61fb      	str	r3, [r7, #28]
}
 8013bda:	bf00      	nop
 8013bdc:	e7fe      	b.n	8013bdc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013bde:	f002 f813 	bl	8015c08 <vPortValidateInterruptPriority>
	__asm volatile
 8013be2:	f3ef 8211 	mrs	r2, BASEPRI
 8013be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bea:	f383 8811 	msr	BASEPRI, r3
 8013bee:	f3bf 8f6f 	isb	sy
 8013bf2:	f3bf 8f4f 	dsb	sy
 8013bf6:	61ba      	str	r2, [r7, #24]
 8013bf8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013bfa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d02f      	beq.n	8013c6a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013c14:	68b9      	ldr	r1, [r7, #8]
 8013c16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c18:	f000 f89e 	bl	8013d58 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c1e:	1e5a      	subs	r2, r3, #1
 8013c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c22:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013c24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c2c:	d112      	bne.n	8013c54 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c30:	691b      	ldr	r3, [r3, #16]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d016      	beq.n	8013c64 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c38:	3310      	adds	r3, #16
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f000 ff4e 	bl	8014adc <xTaskRemoveFromEventList>
 8013c40:	4603      	mov	r3, r0
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d00e      	beq.n	8013c64 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d00b      	beq.n	8013c64 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2201      	movs	r2, #1
 8013c50:	601a      	str	r2, [r3, #0]
 8013c52:	e007      	b.n	8013c64 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c58:	3301      	adds	r3, #1
 8013c5a:	b2db      	uxtb	r3, r3
 8013c5c:	b25a      	sxtb	r2, r3
 8013c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013c64:	2301      	movs	r3, #1
 8013c66:	637b      	str	r3, [r7, #52]	; 0x34
 8013c68:	e001      	b.n	8013c6e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8013c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c70:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013c72:	693b      	ldr	r3, [r7, #16]
 8013c74:	f383 8811 	msr	BASEPRI, r3
}
 8013c78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3738      	adds	r7, #56	; 0x38
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}

08013c84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b086      	sub	sp, #24
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	60f8      	str	r0, [r7, #12]
 8013c8c:	60b9      	str	r1, [r7, #8]
 8013c8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013c90:	2300      	movs	r3, #0
 8013c92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d10d      	bne.n	8013cbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d14d      	bne.n	8013d46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	689b      	ldr	r3, [r3, #8]
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f001 f952 	bl	8014f58 <xTaskPriorityDisinherit>
 8013cb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	2200      	movs	r2, #0
 8013cba:	609a      	str	r2, [r3, #8]
 8013cbc:	e043      	b.n	8013d46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d119      	bne.n	8013cf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	6858      	ldr	r0, [r3, #4]
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ccc:	461a      	mov	r2, r3
 8013cce:	68b9      	ldr	r1, [r7, #8]
 8013cd0:	f002 f9fe 	bl	80160d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	685a      	ldr	r2, [r3, #4]
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cdc:	441a      	add	r2, r3
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	685a      	ldr	r2, [r3, #4]
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	689b      	ldr	r3, [r3, #8]
 8013cea:	429a      	cmp	r2, r3
 8013cec:	d32b      	bcc.n	8013d46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	681a      	ldr	r2, [r3, #0]
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	605a      	str	r2, [r3, #4]
 8013cf6:	e026      	b.n	8013d46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	68d8      	ldr	r0, [r3, #12]
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d00:	461a      	mov	r2, r3
 8013d02:	68b9      	ldr	r1, [r7, #8]
 8013d04:	f002 f9e4 	bl	80160d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	68da      	ldr	r2, [r3, #12]
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d10:	425b      	negs	r3, r3
 8013d12:	441a      	add	r2, r3
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	68da      	ldr	r2, [r3, #12]
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	429a      	cmp	r2, r3
 8013d22:	d207      	bcs.n	8013d34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	689a      	ldr	r2, [r3, #8]
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d2c:	425b      	negs	r3, r3
 8013d2e:	441a      	add	r2, r3
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2b02      	cmp	r3, #2
 8013d38:	d105      	bne.n	8013d46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013d3a:	693b      	ldr	r3, [r7, #16]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d002      	beq.n	8013d46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013d40:	693b      	ldr	r3, [r7, #16]
 8013d42:	3b01      	subs	r3, #1
 8013d44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013d46:	693b      	ldr	r3, [r7, #16]
 8013d48:	1c5a      	adds	r2, r3, #1
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013d4e:	697b      	ldr	r3, [r7, #20]
}
 8013d50:	4618      	mov	r0, r3
 8013d52:	3718      	adds	r7, #24
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bd80      	pop	{r7, pc}

08013d58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b082      	sub	sp, #8
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
 8013d60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d018      	beq.n	8013d9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	68da      	ldr	r2, [r3, #12]
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d72:	441a      	add	r2, r3
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	68da      	ldr	r2, [r3, #12]
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	689b      	ldr	r3, [r3, #8]
 8013d80:	429a      	cmp	r2, r3
 8013d82:	d303      	bcc.n	8013d8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	681a      	ldr	r2, [r3, #0]
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	68d9      	ldr	r1, [r3, #12]
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d94:	461a      	mov	r2, r3
 8013d96:	6838      	ldr	r0, [r7, #0]
 8013d98:	f002 f99a 	bl	80160d0 <memcpy>
	}
}
 8013d9c:	bf00      	nop
 8013d9e:	3708      	adds	r7, #8
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}

08013da4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b084      	sub	sp, #16
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013dac:	f001 fe4a 	bl	8015a44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013db6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013db8:	e011      	b.n	8013dde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d012      	beq.n	8013de8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	3324      	adds	r3, #36	; 0x24
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f000 fe88 	bl	8014adc <xTaskRemoveFromEventList>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d001      	beq.n	8013dd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013dd2:	f000 ffc1 	bl	8014d58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013dd6:	7bfb      	ldrb	r3, [r7, #15]
 8013dd8:	3b01      	subs	r3, #1
 8013dda:	b2db      	uxtb	r3, r3
 8013ddc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	dce9      	bgt.n	8013dba <prvUnlockQueue+0x16>
 8013de6:	e000      	b.n	8013dea <prvUnlockQueue+0x46>
					break;
 8013de8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	22ff      	movs	r2, #255	; 0xff
 8013dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013df2:	f001 fe57 	bl	8015aa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013df6:	f001 fe25 	bl	8015a44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013e00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013e02:	e011      	b.n	8013e28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	691b      	ldr	r3, [r3, #16]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d012      	beq.n	8013e32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	3310      	adds	r3, #16
 8013e10:	4618      	mov	r0, r3
 8013e12:	f000 fe63 	bl	8014adc <xTaskRemoveFromEventList>
 8013e16:	4603      	mov	r3, r0
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d001      	beq.n	8013e20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013e1c:	f000 ff9c 	bl	8014d58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013e20:	7bbb      	ldrb	r3, [r7, #14]
 8013e22:	3b01      	subs	r3, #1
 8013e24:	b2db      	uxtb	r3, r3
 8013e26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	dce9      	bgt.n	8013e04 <prvUnlockQueue+0x60>
 8013e30:	e000      	b.n	8013e34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013e32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	22ff      	movs	r2, #255	; 0xff
 8013e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013e3c:	f001 fe32 	bl	8015aa4 <vPortExitCritical>
}
 8013e40:	bf00      	nop
 8013e42:	3710      	adds	r7, #16
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}

08013e48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b084      	sub	sp, #16
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013e50:	f001 fdf8 	bl	8015a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d102      	bne.n	8013e62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	60fb      	str	r3, [r7, #12]
 8013e60:	e001      	b.n	8013e66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013e62:	2300      	movs	r3, #0
 8013e64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013e66:	f001 fe1d 	bl	8015aa4 <vPortExitCritical>

	return xReturn;
 8013e6a:	68fb      	ldr	r3, [r7, #12]
}
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	3710      	adds	r7, #16
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}

08013e74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013e7c:	f001 fde2 	bl	8015a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	d102      	bne.n	8013e92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	60fb      	str	r3, [r7, #12]
 8013e90:	e001      	b.n	8013e96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013e92:	2300      	movs	r3, #0
 8013e94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013e96:	f001 fe05 	bl	8015aa4 <vPortExitCritical>

	return xReturn;
 8013e9a:	68fb      	ldr	r3, [r7, #12]
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	3710      	adds	r7, #16
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	bd80      	pop	{r7, pc}

08013ea4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013ea4:	b480      	push	{r7}
 8013ea6:	b085      	sub	sp, #20
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
 8013eac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013eae:	2300      	movs	r3, #0
 8013eb0:	60fb      	str	r3, [r7, #12]
 8013eb2:	e014      	b.n	8013ede <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013eb4:	4a0f      	ldr	r2, [pc, #60]	; (8013ef4 <vQueueAddToRegistry+0x50>)
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d10b      	bne.n	8013ed8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013ec0:	490c      	ldr	r1, [pc, #48]	; (8013ef4 <vQueueAddToRegistry+0x50>)
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	683a      	ldr	r2, [r7, #0]
 8013ec6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013eca:	4a0a      	ldr	r2, [pc, #40]	; (8013ef4 <vQueueAddToRegistry+0x50>)
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	00db      	lsls	r3, r3, #3
 8013ed0:	4413      	add	r3, r2
 8013ed2:	687a      	ldr	r2, [r7, #4]
 8013ed4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013ed6:	e006      	b.n	8013ee6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	3301      	adds	r3, #1
 8013edc:	60fb      	str	r3, [r7, #12]
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	2b07      	cmp	r3, #7
 8013ee2:	d9e7      	bls.n	8013eb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013ee4:	bf00      	nop
 8013ee6:	bf00      	nop
 8013ee8:	3714      	adds	r7, #20
 8013eea:	46bd      	mov	sp, r7
 8013eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef0:	4770      	bx	lr
 8013ef2:	bf00      	nop
 8013ef4:	24001788 	.word	0x24001788

08013ef8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b086      	sub	sp, #24
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	60f8      	str	r0, [r7, #12]
 8013f00:	60b9      	str	r1, [r7, #8]
 8013f02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013f08:	f001 fd9c 	bl	8015a44 <vPortEnterCritical>
 8013f0c:	697b      	ldr	r3, [r7, #20]
 8013f0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f12:	b25b      	sxtb	r3, r3
 8013f14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f18:	d103      	bne.n	8013f22 <vQueueWaitForMessageRestricted+0x2a>
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013f22:	697b      	ldr	r3, [r7, #20]
 8013f24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f28:	b25b      	sxtb	r3, r3
 8013f2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f2e:	d103      	bne.n	8013f38 <vQueueWaitForMessageRestricted+0x40>
 8013f30:	697b      	ldr	r3, [r7, #20]
 8013f32:	2200      	movs	r2, #0
 8013f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013f38:	f001 fdb4 	bl	8015aa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013f3c:	697b      	ldr	r3, [r7, #20]
 8013f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d106      	bne.n	8013f52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013f44:	697b      	ldr	r3, [r7, #20]
 8013f46:	3324      	adds	r3, #36	; 0x24
 8013f48:	687a      	ldr	r2, [r7, #4]
 8013f4a:	68b9      	ldr	r1, [r7, #8]
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	f000 fd99 	bl	8014a84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013f52:	6978      	ldr	r0, [r7, #20]
 8013f54:	f7ff ff26 	bl	8013da4 <prvUnlockQueue>
	}
 8013f58:	bf00      	nop
 8013f5a:	3718      	adds	r7, #24
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bd80      	pop	{r7, pc}

08013f60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b08e      	sub	sp, #56	; 0x38
 8013f64:	af04      	add	r7, sp, #16
 8013f66:	60f8      	str	r0, [r7, #12]
 8013f68:	60b9      	str	r1, [r7, #8]
 8013f6a:	607a      	str	r2, [r7, #4]
 8013f6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d10a      	bne.n	8013f8a <xTaskCreateStatic+0x2a>
	__asm volatile
 8013f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f78:	f383 8811 	msr	BASEPRI, r3
 8013f7c:	f3bf 8f6f 	isb	sy
 8013f80:	f3bf 8f4f 	dsb	sy
 8013f84:	623b      	str	r3, [r7, #32]
}
 8013f86:	bf00      	nop
 8013f88:	e7fe      	b.n	8013f88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d10a      	bne.n	8013fa6 <xTaskCreateStatic+0x46>
	__asm volatile
 8013f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f94:	f383 8811 	msr	BASEPRI, r3
 8013f98:	f3bf 8f6f 	isb	sy
 8013f9c:	f3bf 8f4f 	dsb	sy
 8013fa0:	61fb      	str	r3, [r7, #28]
}
 8013fa2:	bf00      	nop
 8013fa4:	e7fe      	b.n	8013fa4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013fa6:	235c      	movs	r3, #92	; 0x5c
 8013fa8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013faa:	693b      	ldr	r3, [r7, #16]
 8013fac:	2b5c      	cmp	r3, #92	; 0x5c
 8013fae:	d00a      	beq.n	8013fc6 <xTaskCreateStatic+0x66>
	__asm volatile
 8013fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fb4:	f383 8811 	msr	BASEPRI, r3
 8013fb8:	f3bf 8f6f 	isb	sy
 8013fbc:	f3bf 8f4f 	dsb	sy
 8013fc0:	61bb      	str	r3, [r7, #24]
}
 8013fc2:	bf00      	nop
 8013fc4:	e7fe      	b.n	8013fc4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013fc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d01e      	beq.n	801400c <xTaskCreateStatic+0xac>
 8013fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d01b      	beq.n	801400c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fdc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fe0:	2202      	movs	r2, #2
 8013fe2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	9303      	str	r3, [sp, #12]
 8013fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fec:	9302      	str	r3, [sp, #8]
 8013fee:	f107 0314 	add.w	r3, r7, #20
 8013ff2:	9301      	str	r3, [sp, #4]
 8013ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ff6:	9300      	str	r3, [sp, #0]
 8013ff8:	683b      	ldr	r3, [r7, #0]
 8013ffa:	687a      	ldr	r2, [r7, #4]
 8013ffc:	68b9      	ldr	r1, [r7, #8]
 8013ffe:	68f8      	ldr	r0, [r7, #12]
 8014000:	f000 f850 	bl	80140a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014004:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014006:	f000 f8dd 	bl	80141c4 <prvAddNewTaskToReadyList>
 801400a:	e001      	b.n	8014010 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801400c:	2300      	movs	r3, #0
 801400e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014010:	697b      	ldr	r3, [r7, #20]
	}
 8014012:	4618      	mov	r0, r3
 8014014:	3728      	adds	r7, #40	; 0x28
 8014016:	46bd      	mov	sp, r7
 8014018:	bd80      	pop	{r7, pc}

0801401a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801401a:	b580      	push	{r7, lr}
 801401c:	b08c      	sub	sp, #48	; 0x30
 801401e:	af04      	add	r7, sp, #16
 8014020:	60f8      	str	r0, [r7, #12]
 8014022:	60b9      	str	r1, [r7, #8]
 8014024:	603b      	str	r3, [r7, #0]
 8014026:	4613      	mov	r3, r2
 8014028:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801402a:	88fb      	ldrh	r3, [r7, #6]
 801402c:	009b      	lsls	r3, r3, #2
 801402e:	4618      	mov	r0, r3
 8014030:	f001 fe2a 	bl	8015c88 <pvPortMalloc>
 8014034:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014036:	697b      	ldr	r3, [r7, #20]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d00e      	beq.n	801405a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801403c:	205c      	movs	r0, #92	; 0x5c
 801403e:	f001 fe23 	bl	8015c88 <pvPortMalloc>
 8014042:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014044:	69fb      	ldr	r3, [r7, #28]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d003      	beq.n	8014052 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801404a:	69fb      	ldr	r3, [r7, #28]
 801404c:	697a      	ldr	r2, [r7, #20]
 801404e:	631a      	str	r2, [r3, #48]	; 0x30
 8014050:	e005      	b.n	801405e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014052:	6978      	ldr	r0, [r7, #20]
 8014054:	f001 fee4 	bl	8015e20 <vPortFree>
 8014058:	e001      	b.n	801405e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801405a:	2300      	movs	r3, #0
 801405c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801405e:	69fb      	ldr	r3, [r7, #28]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d017      	beq.n	8014094 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014064:	69fb      	ldr	r3, [r7, #28]
 8014066:	2200      	movs	r2, #0
 8014068:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801406c:	88fa      	ldrh	r2, [r7, #6]
 801406e:	2300      	movs	r3, #0
 8014070:	9303      	str	r3, [sp, #12]
 8014072:	69fb      	ldr	r3, [r7, #28]
 8014074:	9302      	str	r3, [sp, #8]
 8014076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014078:	9301      	str	r3, [sp, #4]
 801407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801407c:	9300      	str	r3, [sp, #0]
 801407e:	683b      	ldr	r3, [r7, #0]
 8014080:	68b9      	ldr	r1, [r7, #8]
 8014082:	68f8      	ldr	r0, [r7, #12]
 8014084:	f000 f80e 	bl	80140a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014088:	69f8      	ldr	r0, [r7, #28]
 801408a:	f000 f89b 	bl	80141c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801408e:	2301      	movs	r3, #1
 8014090:	61bb      	str	r3, [r7, #24]
 8014092:	e002      	b.n	801409a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014098:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801409a:	69bb      	ldr	r3, [r7, #24]
	}
 801409c:	4618      	mov	r0, r3
 801409e:	3720      	adds	r7, #32
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bd80      	pop	{r7, pc}

080140a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b088      	sub	sp, #32
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	60f8      	str	r0, [r7, #12]
 80140ac:	60b9      	str	r1, [r7, #8]
 80140ae:	607a      	str	r2, [r7, #4]
 80140b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80140b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	009b      	lsls	r3, r3, #2
 80140ba:	461a      	mov	r2, r3
 80140bc:	21a5      	movs	r1, #165	; 0xa5
 80140be:	f002 f815 	bl	80160ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80140c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80140c6:	6879      	ldr	r1, [r7, #4]
 80140c8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80140cc:	440b      	add	r3, r1
 80140ce:	009b      	lsls	r3, r3, #2
 80140d0:	4413      	add	r3, r2
 80140d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80140d4:	69bb      	ldr	r3, [r7, #24]
 80140d6:	f023 0307 	bic.w	r3, r3, #7
 80140da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80140dc:	69bb      	ldr	r3, [r7, #24]
 80140de:	f003 0307 	and.w	r3, r3, #7
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d00a      	beq.n	80140fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80140e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ea:	f383 8811 	msr	BASEPRI, r3
 80140ee:	f3bf 8f6f 	isb	sy
 80140f2:	f3bf 8f4f 	dsb	sy
 80140f6:	617b      	str	r3, [r7, #20]
}
 80140f8:	bf00      	nop
 80140fa:	e7fe      	b.n	80140fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d01f      	beq.n	8014142 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014102:	2300      	movs	r3, #0
 8014104:	61fb      	str	r3, [r7, #28]
 8014106:	e012      	b.n	801412e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014108:	68ba      	ldr	r2, [r7, #8]
 801410a:	69fb      	ldr	r3, [r7, #28]
 801410c:	4413      	add	r3, r2
 801410e:	7819      	ldrb	r1, [r3, #0]
 8014110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014112:	69fb      	ldr	r3, [r7, #28]
 8014114:	4413      	add	r3, r2
 8014116:	3334      	adds	r3, #52	; 0x34
 8014118:	460a      	mov	r2, r1
 801411a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801411c:	68ba      	ldr	r2, [r7, #8]
 801411e:	69fb      	ldr	r3, [r7, #28]
 8014120:	4413      	add	r3, r2
 8014122:	781b      	ldrb	r3, [r3, #0]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d006      	beq.n	8014136 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014128:	69fb      	ldr	r3, [r7, #28]
 801412a:	3301      	adds	r3, #1
 801412c:	61fb      	str	r3, [r7, #28]
 801412e:	69fb      	ldr	r3, [r7, #28]
 8014130:	2b0f      	cmp	r3, #15
 8014132:	d9e9      	bls.n	8014108 <prvInitialiseNewTask+0x64>
 8014134:	e000      	b.n	8014138 <prvInitialiseNewTask+0x94>
			{
				break;
 8014136:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801413a:	2200      	movs	r2, #0
 801413c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014140:	e003      	b.n	801414a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014144:	2200      	movs	r2, #0
 8014146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801414a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801414c:	2b37      	cmp	r3, #55	; 0x37
 801414e:	d901      	bls.n	8014154 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014150:	2337      	movs	r3, #55	; 0x37
 8014152:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014158:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801415c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801415e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014162:	2200      	movs	r2, #0
 8014164:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014168:	3304      	adds	r3, #4
 801416a:	4618      	mov	r0, r3
 801416c:	f7ff f8be 	bl	80132ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014172:	3318      	adds	r3, #24
 8014174:	4618      	mov	r0, r3
 8014176:	f7ff f8b9 	bl	80132ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801417c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801417e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014182:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014188:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801418c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801418e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014192:	2200      	movs	r2, #0
 8014194:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014198:	2200      	movs	r2, #0
 801419a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801419e:	683a      	ldr	r2, [r7, #0]
 80141a0:	68f9      	ldr	r1, [r7, #12]
 80141a2:	69b8      	ldr	r0, [r7, #24]
 80141a4:	f001 fb20 	bl	80157e8 <pxPortInitialiseStack>
 80141a8:	4602      	mov	r2, r0
 80141aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80141ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d002      	beq.n	80141ba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80141b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80141ba:	bf00      	nop
 80141bc:	3720      	adds	r7, #32
 80141be:	46bd      	mov	sp, r7
 80141c0:	bd80      	pop	{r7, pc}
	...

080141c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b082      	sub	sp, #8
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80141cc:	f001 fc3a 	bl	8015a44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80141d0:	4b2d      	ldr	r3, [pc, #180]	; (8014288 <prvAddNewTaskToReadyList+0xc4>)
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	3301      	adds	r3, #1
 80141d6:	4a2c      	ldr	r2, [pc, #176]	; (8014288 <prvAddNewTaskToReadyList+0xc4>)
 80141d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80141da:	4b2c      	ldr	r3, [pc, #176]	; (801428c <prvAddNewTaskToReadyList+0xc8>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d109      	bne.n	80141f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80141e2:	4a2a      	ldr	r2, [pc, #168]	; (801428c <prvAddNewTaskToReadyList+0xc8>)
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80141e8:	4b27      	ldr	r3, [pc, #156]	; (8014288 <prvAddNewTaskToReadyList+0xc4>)
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	2b01      	cmp	r3, #1
 80141ee:	d110      	bne.n	8014212 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80141f0:	f000 fdd6 	bl	8014da0 <prvInitialiseTaskLists>
 80141f4:	e00d      	b.n	8014212 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80141f6:	4b26      	ldr	r3, [pc, #152]	; (8014290 <prvAddNewTaskToReadyList+0xcc>)
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d109      	bne.n	8014212 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80141fe:	4b23      	ldr	r3, [pc, #140]	; (801428c <prvAddNewTaskToReadyList+0xc8>)
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014208:	429a      	cmp	r2, r3
 801420a:	d802      	bhi.n	8014212 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801420c:	4a1f      	ldr	r2, [pc, #124]	; (801428c <prvAddNewTaskToReadyList+0xc8>)
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014212:	4b20      	ldr	r3, [pc, #128]	; (8014294 <prvAddNewTaskToReadyList+0xd0>)
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	3301      	adds	r3, #1
 8014218:	4a1e      	ldr	r2, [pc, #120]	; (8014294 <prvAddNewTaskToReadyList+0xd0>)
 801421a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801421c:	4b1d      	ldr	r3, [pc, #116]	; (8014294 <prvAddNewTaskToReadyList+0xd0>)
 801421e:	681a      	ldr	r2, [r3, #0]
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014228:	4b1b      	ldr	r3, [pc, #108]	; (8014298 <prvAddNewTaskToReadyList+0xd4>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	429a      	cmp	r2, r3
 801422e:	d903      	bls.n	8014238 <prvAddNewTaskToReadyList+0x74>
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014234:	4a18      	ldr	r2, [pc, #96]	; (8014298 <prvAddNewTaskToReadyList+0xd4>)
 8014236:	6013      	str	r3, [r2, #0]
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801423c:	4613      	mov	r3, r2
 801423e:	009b      	lsls	r3, r3, #2
 8014240:	4413      	add	r3, r2
 8014242:	009b      	lsls	r3, r3, #2
 8014244:	4a15      	ldr	r2, [pc, #84]	; (801429c <prvAddNewTaskToReadyList+0xd8>)
 8014246:	441a      	add	r2, r3
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	3304      	adds	r3, #4
 801424c:	4619      	mov	r1, r3
 801424e:	4610      	mov	r0, r2
 8014250:	f7ff f859 	bl	8013306 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014254:	f001 fc26 	bl	8015aa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014258:	4b0d      	ldr	r3, [pc, #52]	; (8014290 <prvAddNewTaskToReadyList+0xcc>)
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d00e      	beq.n	801427e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014260:	4b0a      	ldr	r3, [pc, #40]	; (801428c <prvAddNewTaskToReadyList+0xc8>)
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801426a:	429a      	cmp	r2, r3
 801426c:	d207      	bcs.n	801427e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801426e:	4b0c      	ldr	r3, [pc, #48]	; (80142a0 <prvAddNewTaskToReadyList+0xdc>)
 8014270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014274:	601a      	str	r2, [r3, #0]
 8014276:	f3bf 8f4f 	dsb	sy
 801427a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801427e:	bf00      	nop
 8014280:	3708      	adds	r7, #8
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}
 8014286:	bf00      	nop
 8014288:	24001c9c 	.word	0x24001c9c
 801428c:	240017c8 	.word	0x240017c8
 8014290:	24001ca8 	.word	0x24001ca8
 8014294:	24001cb8 	.word	0x24001cb8
 8014298:	24001ca4 	.word	0x24001ca4
 801429c:	240017cc 	.word	0x240017cc
 80142a0:	e000ed04 	.word	0xe000ed04

080142a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b084      	sub	sp, #16
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80142ac:	2300      	movs	r3, #0
 80142ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d017      	beq.n	80142e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80142b6:	4b13      	ldr	r3, [pc, #76]	; (8014304 <vTaskDelay+0x60>)
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d00a      	beq.n	80142d4 <vTaskDelay+0x30>
	__asm volatile
 80142be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142c2:	f383 8811 	msr	BASEPRI, r3
 80142c6:	f3bf 8f6f 	isb	sy
 80142ca:	f3bf 8f4f 	dsb	sy
 80142ce:	60bb      	str	r3, [r7, #8]
}
 80142d0:	bf00      	nop
 80142d2:	e7fe      	b.n	80142d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80142d4:	f000 f99a 	bl	801460c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80142d8:	2100      	movs	r1, #0
 80142da:	6878      	ldr	r0, [r7, #4]
 80142dc:	f000 fec2 	bl	8015064 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80142e0:	f000 f9a2 	bl	8014628 <xTaskResumeAll>
 80142e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d107      	bne.n	80142fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80142ec:	4b06      	ldr	r3, [pc, #24]	; (8014308 <vTaskDelay+0x64>)
 80142ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142f2:	601a      	str	r2, [r3, #0]
 80142f4:	f3bf 8f4f 	dsb	sy
 80142f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80142fc:	bf00      	nop
 80142fe:	3710      	adds	r7, #16
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}
 8014304:	24001cc4 	.word	0x24001cc4
 8014308:	e000ed04 	.word	0xe000ed04

0801430c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801430c:	b580      	push	{r7, lr}
 801430e:	b084      	sub	sp, #16
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014314:	f001 fb96 	bl	8015a44 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d102      	bne.n	8014324 <vTaskSuspend+0x18>
 801431e:	4b30      	ldr	r3, [pc, #192]	; (80143e0 <vTaskSuspend+0xd4>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	e000      	b.n	8014326 <vTaskSuspend+0x1a>
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	3304      	adds	r3, #4
 801432c:	4618      	mov	r0, r3
 801432e:	f7ff f847 	bl	80133c0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014336:	2b00      	cmp	r3, #0
 8014338:	d004      	beq.n	8014344 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	3318      	adds	r3, #24
 801433e:	4618      	mov	r0, r3
 8014340:	f7ff f83e 	bl	80133c0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	3304      	adds	r3, #4
 8014348:	4619      	mov	r1, r3
 801434a:	4826      	ldr	r0, [pc, #152]	; (80143e4 <vTaskSuspend+0xd8>)
 801434c:	f7fe ffdb 	bl	8013306 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014356:	b2db      	uxtb	r3, r3
 8014358:	2b01      	cmp	r3, #1
 801435a:	d103      	bne.n	8014364 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	2200      	movs	r2, #0
 8014360:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014364:	f001 fb9e 	bl	8015aa4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014368:	4b1f      	ldr	r3, [pc, #124]	; (80143e8 <vTaskSuspend+0xdc>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d005      	beq.n	801437c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014370:	f001 fb68 	bl	8015a44 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014374:	f000 fdb2 	bl	8014edc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014378:	f001 fb94 	bl	8015aa4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801437c:	4b18      	ldr	r3, [pc, #96]	; (80143e0 <vTaskSuspend+0xd4>)
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	68fa      	ldr	r2, [r7, #12]
 8014382:	429a      	cmp	r2, r3
 8014384:	d127      	bne.n	80143d6 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8014386:	4b18      	ldr	r3, [pc, #96]	; (80143e8 <vTaskSuspend+0xdc>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d017      	beq.n	80143be <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801438e:	4b17      	ldr	r3, [pc, #92]	; (80143ec <vTaskSuspend+0xe0>)
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d00a      	beq.n	80143ac <vTaskSuspend+0xa0>
	__asm volatile
 8014396:	f04f 0350 	mov.w	r3, #80	; 0x50
 801439a:	f383 8811 	msr	BASEPRI, r3
 801439e:	f3bf 8f6f 	isb	sy
 80143a2:	f3bf 8f4f 	dsb	sy
 80143a6:	60bb      	str	r3, [r7, #8]
}
 80143a8:	bf00      	nop
 80143aa:	e7fe      	b.n	80143aa <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80143ac:	4b10      	ldr	r3, [pc, #64]	; (80143f0 <vTaskSuspend+0xe4>)
 80143ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143b2:	601a      	str	r2, [r3, #0]
 80143b4:	f3bf 8f4f 	dsb	sy
 80143b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80143bc:	e00b      	b.n	80143d6 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80143be:	4b09      	ldr	r3, [pc, #36]	; (80143e4 <vTaskSuspend+0xd8>)
 80143c0:	681a      	ldr	r2, [r3, #0]
 80143c2:	4b0c      	ldr	r3, [pc, #48]	; (80143f4 <vTaskSuspend+0xe8>)
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	429a      	cmp	r2, r3
 80143c8:	d103      	bne.n	80143d2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80143ca:	4b05      	ldr	r3, [pc, #20]	; (80143e0 <vTaskSuspend+0xd4>)
 80143cc:	2200      	movs	r2, #0
 80143ce:	601a      	str	r2, [r3, #0]
	}
 80143d0:	e001      	b.n	80143d6 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80143d2:	f000 fa99 	bl	8014908 <vTaskSwitchContext>
	}
 80143d6:	bf00      	nop
 80143d8:	3710      	adds	r7, #16
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}
 80143de:	bf00      	nop
 80143e0:	240017c8 	.word	0x240017c8
 80143e4:	24001c88 	.word	0x24001c88
 80143e8:	24001ca8 	.word	0x24001ca8
 80143ec:	24001cc4 	.word	0x24001cc4
 80143f0:	e000ed04 	.word	0xe000ed04
 80143f4:	24001c9c 	.word	0x24001c9c

080143f8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80143f8:	b480      	push	{r7}
 80143fa:	b087      	sub	sp, #28
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014400:	2300      	movs	r3, #0
 8014402:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d10a      	bne.n	8014424 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014412:	f383 8811 	msr	BASEPRI, r3
 8014416:	f3bf 8f6f 	isb	sy
 801441a:	f3bf 8f4f 	dsb	sy
 801441e:	60fb      	str	r3, [r7, #12]
}
 8014420:	bf00      	nop
 8014422:	e7fe      	b.n	8014422 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014424:	693b      	ldr	r3, [r7, #16]
 8014426:	695b      	ldr	r3, [r3, #20]
 8014428:	4a0a      	ldr	r2, [pc, #40]	; (8014454 <prvTaskIsTaskSuspended+0x5c>)
 801442a:	4293      	cmp	r3, r2
 801442c:	d10a      	bne.n	8014444 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801442e:	693b      	ldr	r3, [r7, #16]
 8014430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014432:	4a09      	ldr	r2, [pc, #36]	; (8014458 <prvTaskIsTaskSuspended+0x60>)
 8014434:	4293      	cmp	r3, r2
 8014436:	d005      	beq.n	8014444 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014438:	693b      	ldr	r3, [r7, #16]
 801443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801443c:	2b00      	cmp	r3, #0
 801443e:	d101      	bne.n	8014444 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8014440:	2301      	movs	r3, #1
 8014442:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014444:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014446:	4618      	mov	r0, r3
 8014448:	371c      	adds	r7, #28
 801444a:	46bd      	mov	sp, r7
 801444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014450:	4770      	bx	lr
 8014452:	bf00      	nop
 8014454:	24001c88 	.word	0x24001c88
 8014458:	24001c5c 	.word	0x24001c5c

0801445c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 801445c:	b580      	push	{r7, lr}
 801445e:	b08a      	sub	sp, #40	; 0x28
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014464:	2300      	movs	r3, #0
 8014466:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d10a      	bne.n	8014488 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8014472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014476:	f383 8811 	msr	BASEPRI, r3
 801447a:	f3bf 8f6f 	isb	sy
 801447e:	f3bf 8f4f 	dsb	sy
 8014482:	61bb      	str	r3, [r7, #24]
}
 8014484:	bf00      	nop
 8014486:	e7fe      	b.n	8014486 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014488:	f001 fbbe 	bl	8015c08 <vPortValidateInterruptPriority>
	__asm volatile
 801448c:	f3ef 8211 	mrs	r2, BASEPRI
 8014490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014494:	f383 8811 	msr	BASEPRI, r3
 8014498:	f3bf 8f6f 	isb	sy
 801449c:	f3bf 8f4f 	dsb	sy
 80144a0:	617a      	str	r2, [r7, #20]
 80144a2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80144a4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80144a6:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80144a8:	6a38      	ldr	r0, [r7, #32]
 80144aa:	f7ff ffa5 	bl	80143f8 <prvTaskIsTaskSuspended>
 80144ae:	4603      	mov	r3, r0
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d030      	beq.n	8014516 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144b4:	4b1d      	ldr	r3, [pc, #116]	; (801452c <xTaskResumeFromISR+0xd0>)
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d126      	bne.n	801450a <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80144bc:	6a3b      	ldr	r3, [r7, #32]
 80144be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144c0:	4b1b      	ldr	r3, [pc, #108]	; (8014530 <xTaskResumeFromISR+0xd4>)
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144c6:	429a      	cmp	r2, r3
 80144c8:	d301      	bcc.n	80144ce <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80144ca:	2301      	movs	r3, #1
 80144cc:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80144ce:	6a3b      	ldr	r3, [r7, #32]
 80144d0:	3304      	adds	r3, #4
 80144d2:	4618      	mov	r0, r3
 80144d4:	f7fe ff74 	bl	80133c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80144d8:	6a3b      	ldr	r3, [r7, #32]
 80144da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144dc:	4b15      	ldr	r3, [pc, #84]	; (8014534 <xTaskResumeFromISR+0xd8>)
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	429a      	cmp	r2, r3
 80144e2:	d903      	bls.n	80144ec <xTaskResumeFromISR+0x90>
 80144e4:	6a3b      	ldr	r3, [r7, #32]
 80144e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144e8:	4a12      	ldr	r2, [pc, #72]	; (8014534 <xTaskResumeFromISR+0xd8>)
 80144ea:	6013      	str	r3, [r2, #0]
 80144ec:	6a3b      	ldr	r3, [r7, #32]
 80144ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144f0:	4613      	mov	r3, r2
 80144f2:	009b      	lsls	r3, r3, #2
 80144f4:	4413      	add	r3, r2
 80144f6:	009b      	lsls	r3, r3, #2
 80144f8:	4a0f      	ldr	r2, [pc, #60]	; (8014538 <xTaskResumeFromISR+0xdc>)
 80144fa:	441a      	add	r2, r3
 80144fc:	6a3b      	ldr	r3, [r7, #32]
 80144fe:	3304      	adds	r3, #4
 8014500:	4619      	mov	r1, r3
 8014502:	4610      	mov	r0, r2
 8014504:	f7fe feff 	bl	8013306 <vListInsertEnd>
 8014508:	e005      	b.n	8014516 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801450a:	6a3b      	ldr	r3, [r7, #32]
 801450c:	3318      	adds	r3, #24
 801450e:	4619      	mov	r1, r3
 8014510:	480a      	ldr	r0, [pc, #40]	; (801453c <xTaskResumeFromISR+0xe0>)
 8014512:	f7fe fef8 	bl	8013306 <vListInsertEnd>
 8014516:	69fb      	ldr	r3, [r7, #28]
 8014518:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	f383 8811 	msr	BASEPRI, r3
}
 8014520:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8014522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014524:	4618      	mov	r0, r3
 8014526:	3728      	adds	r7, #40	; 0x28
 8014528:	46bd      	mov	sp, r7
 801452a:	bd80      	pop	{r7, pc}
 801452c:	24001cc4 	.word	0x24001cc4
 8014530:	240017c8 	.word	0x240017c8
 8014534:	24001ca4 	.word	0x24001ca4
 8014538:	240017cc 	.word	0x240017cc
 801453c:	24001c5c 	.word	0x24001c5c

08014540 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b08a      	sub	sp, #40	; 0x28
 8014544:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014546:	2300      	movs	r3, #0
 8014548:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801454a:	2300      	movs	r3, #0
 801454c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801454e:	463a      	mov	r2, r7
 8014550:	1d39      	adds	r1, r7, #4
 8014552:	f107 0308 	add.w	r3, r7, #8
 8014556:	4618      	mov	r0, r3
 8014558:	f7fe fc86 	bl	8012e68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801455c:	6839      	ldr	r1, [r7, #0]
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	68ba      	ldr	r2, [r7, #8]
 8014562:	9202      	str	r2, [sp, #8]
 8014564:	9301      	str	r3, [sp, #4]
 8014566:	2300      	movs	r3, #0
 8014568:	9300      	str	r3, [sp, #0]
 801456a:	2300      	movs	r3, #0
 801456c:	460a      	mov	r2, r1
 801456e:	4921      	ldr	r1, [pc, #132]	; (80145f4 <vTaskStartScheduler+0xb4>)
 8014570:	4821      	ldr	r0, [pc, #132]	; (80145f8 <vTaskStartScheduler+0xb8>)
 8014572:	f7ff fcf5 	bl	8013f60 <xTaskCreateStatic>
 8014576:	4603      	mov	r3, r0
 8014578:	4a20      	ldr	r2, [pc, #128]	; (80145fc <vTaskStartScheduler+0xbc>)
 801457a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801457c:	4b1f      	ldr	r3, [pc, #124]	; (80145fc <vTaskStartScheduler+0xbc>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d002      	beq.n	801458a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014584:	2301      	movs	r3, #1
 8014586:	617b      	str	r3, [r7, #20]
 8014588:	e001      	b.n	801458e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801458a:	2300      	movs	r3, #0
 801458c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801458e:	697b      	ldr	r3, [r7, #20]
 8014590:	2b01      	cmp	r3, #1
 8014592:	d102      	bne.n	801459a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014594:	f000 fdba 	bl	801510c <xTimerCreateTimerTask>
 8014598:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801459a:	697b      	ldr	r3, [r7, #20]
 801459c:	2b01      	cmp	r3, #1
 801459e:	d116      	bne.n	80145ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80145a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145a4:	f383 8811 	msr	BASEPRI, r3
 80145a8:	f3bf 8f6f 	isb	sy
 80145ac:	f3bf 8f4f 	dsb	sy
 80145b0:	613b      	str	r3, [r7, #16]
}
 80145b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80145b4:	4b12      	ldr	r3, [pc, #72]	; (8014600 <vTaskStartScheduler+0xc0>)
 80145b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80145ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80145bc:	4b11      	ldr	r3, [pc, #68]	; (8014604 <vTaskStartScheduler+0xc4>)
 80145be:	2201      	movs	r2, #1
 80145c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80145c2:	4b11      	ldr	r3, [pc, #68]	; (8014608 <vTaskStartScheduler+0xc8>)
 80145c4:	2200      	movs	r2, #0
 80145c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80145c8:	f001 f99a 	bl	8015900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80145cc:	e00e      	b.n	80145ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80145ce:	697b      	ldr	r3, [r7, #20]
 80145d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145d4:	d10a      	bne.n	80145ec <vTaskStartScheduler+0xac>
	__asm volatile
 80145d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145da:	f383 8811 	msr	BASEPRI, r3
 80145de:	f3bf 8f6f 	isb	sy
 80145e2:	f3bf 8f4f 	dsb	sy
 80145e6:	60fb      	str	r3, [r7, #12]
}
 80145e8:	bf00      	nop
 80145ea:	e7fe      	b.n	80145ea <vTaskStartScheduler+0xaa>
}
 80145ec:	bf00      	nop
 80145ee:	3718      	adds	r7, #24
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}
 80145f4:	08016d6c 	.word	0x08016d6c
 80145f8:	08014d71 	.word	0x08014d71
 80145fc:	24001cc0 	.word	0x24001cc0
 8014600:	24001cbc 	.word	0x24001cbc
 8014604:	24001ca8 	.word	0x24001ca8
 8014608:	24001ca0 	.word	0x24001ca0

0801460c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801460c:	b480      	push	{r7}
 801460e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014610:	4b04      	ldr	r3, [pc, #16]	; (8014624 <vTaskSuspendAll+0x18>)
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	3301      	adds	r3, #1
 8014616:	4a03      	ldr	r2, [pc, #12]	; (8014624 <vTaskSuspendAll+0x18>)
 8014618:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801461a:	bf00      	nop
 801461c:	46bd      	mov	sp, r7
 801461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014622:	4770      	bx	lr
 8014624:	24001cc4 	.word	0x24001cc4

08014628 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b084      	sub	sp, #16
 801462c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801462e:	2300      	movs	r3, #0
 8014630:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014632:	2300      	movs	r3, #0
 8014634:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014636:	4b42      	ldr	r3, [pc, #264]	; (8014740 <xTaskResumeAll+0x118>)
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d10a      	bne.n	8014654 <xTaskResumeAll+0x2c>
	__asm volatile
 801463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014642:	f383 8811 	msr	BASEPRI, r3
 8014646:	f3bf 8f6f 	isb	sy
 801464a:	f3bf 8f4f 	dsb	sy
 801464e:	603b      	str	r3, [r7, #0]
}
 8014650:	bf00      	nop
 8014652:	e7fe      	b.n	8014652 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014654:	f001 f9f6 	bl	8015a44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014658:	4b39      	ldr	r3, [pc, #228]	; (8014740 <xTaskResumeAll+0x118>)
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	3b01      	subs	r3, #1
 801465e:	4a38      	ldr	r2, [pc, #224]	; (8014740 <xTaskResumeAll+0x118>)
 8014660:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014662:	4b37      	ldr	r3, [pc, #220]	; (8014740 <xTaskResumeAll+0x118>)
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d162      	bne.n	8014730 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801466a:	4b36      	ldr	r3, [pc, #216]	; (8014744 <xTaskResumeAll+0x11c>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d05e      	beq.n	8014730 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014672:	e02f      	b.n	80146d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014674:	4b34      	ldr	r3, [pc, #208]	; (8014748 <xTaskResumeAll+0x120>)
 8014676:	68db      	ldr	r3, [r3, #12]
 8014678:	68db      	ldr	r3, [r3, #12]
 801467a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	3318      	adds	r3, #24
 8014680:	4618      	mov	r0, r3
 8014682:	f7fe fe9d 	bl	80133c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	3304      	adds	r3, #4
 801468a:	4618      	mov	r0, r3
 801468c:	f7fe fe98 	bl	80133c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014694:	4b2d      	ldr	r3, [pc, #180]	; (801474c <xTaskResumeAll+0x124>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	429a      	cmp	r2, r3
 801469a:	d903      	bls.n	80146a4 <xTaskResumeAll+0x7c>
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146a0:	4a2a      	ldr	r2, [pc, #168]	; (801474c <xTaskResumeAll+0x124>)
 80146a2:	6013      	str	r3, [r2, #0]
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146a8:	4613      	mov	r3, r2
 80146aa:	009b      	lsls	r3, r3, #2
 80146ac:	4413      	add	r3, r2
 80146ae:	009b      	lsls	r3, r3, #2
 80146b0:	4a27      	ldr	r2, [pc, #156]	; (8014750 <xTaskResumeAll+0x128>)
 80146b2:	441a      	add	r2, r3
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	3304      	adds	r3, #4
 80146b8:	4619      	mov	r1, r3
 80146ba:	4610      	mov	r0, r2
 80146bc:	f7fe fe23 	bl	8013306 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146c4:	4b23      	ldr	r3, [pc, #140]	; (8014754 <xTaskResumeAll+0x12c>)
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146ca:	429a      	cmp	r2, r3
 80146cc:	d302      	bcc.n	80146d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80146ce:	4b22      	ldr	r3, [pc, #136]	; (8014758 <xTaskResumeAll+0x130>)
 80146d0:	2201      	movs	r2, #1
 80146d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80146d4:	4b1c      	ldr	r3, [pc, #112]	; (8014748 <xTaskResumeAll+0x120>)
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d1cb      	bne.n	8014674 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d001      	beq.n	80146e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80146e2:	f000 fbfb 	bl	8014edc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80146e6:	4b1d      	ldr	r3, [pc, #116]	; (801475c <xTaskResumeAll+0x134>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d010      	beq.n	8014714 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80146f2:	f000 f847 	bl	8014784 <xTaskIncrementTick>
 80146f6:	4603      	mov	r3, r0
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d002      	beq.n	8014702 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80146fc:	4b16      	ldr	r3, [pc, #88]	; (8014758 <xTaskResumeAll+0x130>)
 80146fe:	2201      	movs	r2, #1
 8014700:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	3b01      	subs	r3, #1
 8014706:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d1f1      	bne.n	80146f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801470e:	4b13      	ldr	r3, [pc, #76]	; (801475c <xTaskResumeAll+0x134>)
 8014710:	2200      	movs	r2, #0
 8014712:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014714:	4b10      	ldr	r3, [pc, #64]	; (8014758 <xTaskResumeAll+0x130>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d009      	beq.n	8014730 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801471c:	2301      	movs	r3, #1
 801471e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014720:	4b0f      	ldr	r3, [pc, #60]	; (8014760 <xTaskResumeAll+0x138>)
 8014722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014726:	601a      	str	r2, [r3, #0]
 8014728:	f3bf 8f4f 	dsb	sy
 801472c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014730:	f001 f9b8 	bl	8015aa4 <vPortExitCritical>

	return xAlreadyYielded;
 8014734:	68bb      	ldr	r3, [r7, #8]
}
 8014736:	4618      	mov	r0, r3
 8014738:	3710      	adds	r7, #16
 801473a:	46bd      	mov	sp, r7
 801473c:	bd80      	pop	{r7, pc}
 801473e:	bf00      	nop
 8014740:	24001cc4 	.word	0x24001cc4
 8014744:	24001c9c 	.word	0x24001c9c
 8014748:	24001c5c 	.word	0x24001c5c
 801474c:	24001ca4 	.word	0x24001ca4
 8014750:	240017cc 	.word	0x240017cc
 8014754:	240017c8 	.word	0x240017c8
 8014758:	24001cb0 	.word	0x24001cb0
 801475c:	24001cac 	.word	0x24001cac
 8014760:	e000ed04 	.word	0xe000ed04

08014764 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014764:	b480      	push	{r7}
 8014766:	b083      	sub	sp, #12
 8014768:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801476a:	4b05      	ldr	r3, [pc, #20]	; (8014780 <xTaskGetTickCount+0x1c>)
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014770:	687b      	ldr	r3, [r7, #4]
}
 8014772:	4618      	mov	r0, r3
 8014774:	370c      	adds	r7, #12
 8014776:	46bd      	mov	sp, r7
 8014778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477c:	4770      	bx	lr
 801477e:	bf00      	nop
 8014780:	24001ca0 	.word	0x24001ca0

08014784 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b086      	sub	sp, #24
 8014788:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801478a:	2300      	movs	r3, #0
 801478c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801478e:	4b53      	ldr	r3, [pc, #332]	; (80148dc <xTaskIncrementTick+0x158>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	2b00      	cmp	r3, #0
 8014794:	f040 8095 	bne.w	80148c2 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014798:	4b51      	ldr	r3, [pc, #324]	; (80148e0 <xTaskIncrementTick+0x15c>)
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	3301      	adds	r3, #1
 801479e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80147a0:	4a4f      	ldr	r2, [pc, #316]	; (80148e0 <xTaskIncrementTick+0x15c>)
 80147a2:	693b      	ldr	r3, [r7, #16]
 80147a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d120      	bne.n	80147ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80147ac:	4b4d      	ldr	r3, [pc, #308]	; (80148e4 <xTaskIncrementTick+0x160>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d00a      	beq.n	80147cc <xTaskIncrementTick+0x48>
	__asm volatile
 80147b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ba:	f383 8811 	msr	BASEPRI, r3
 80147be:	f3bf 8f6f 	isb	sy
 80147c2:	f3bf 8f4f 	dsb	sy
 80147c6:	603b      	str	r3, [r7, #0]
}
 80147c8:	bf00      	nop
 80147ca:	e7fe      	b.n	80147ca <xTaskIncrementTick+0x46>
 80147cc:	4b45      	ldr	r3, [pc, #276]	; (80148e4 <xTaskIncrementTick+0x160>)
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	60fb      	str	r3, [r7, #12]
 80147d2:	4b45      	ldr	r3, [pc, #276]	; (80148e8 <xTaskIncrementTick+0x164>)
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	4a43      	ldr	r2, [pc, #268]	; (80148e4 <xTaskIncrementTick+0x160>)
 80147d8:	6013      	str	r3, [r2, #0]
 80147da:	4a43      	ldr	r2, [pc, #268]	; (80148e8 <xTaskIncrementTick+0x164>)
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	6013      	str	r3, [r2, #0]
 80147e0:	4b42      	ldr	r3, [pc, #264]	; (80148ec <xTaskIncrementTick+0x168>)
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	3301      	adds	r3, #1
 80147e6:	4a41      	ldr	r2, [pc, #260]	; (80148ec <xTaskIncrementTick+0x168>)
 80147e8:	6013      	str	r3, [r2, #0]
 80147ea:	f000 fb77 	bl	8014edc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80147ee:	4b40      	ldr	r3, [pc, #256]	; (80148f0 <xTaskIncrementTick+0x16c>)
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	693a      	ldr	r2, [r7, #16]
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d349      	bcc.n	801488c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80147f8:	4b3a      	ldr	r3, [pc, #232]	; (80148e4 <xTaskIncrementTick+0x160>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d104      	bne.n	801480c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014802:	4b3b      	ldr	r3, [pc, #236]	; (80148f0 <xTaskIncrementTick+0x16c>)
 8014804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014808:	601a      	str	r2, [r3, #0]
					break;
 801480a:	e03f      	b.n	801488c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801480c:	4b35      	ldr	r3, [pc, #212]	; (80148e4 <xTaskIncrementTick+0x160>)
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	68db      	ldr	r3, [r3, #12]
 8014812:	68db      	ldr	r3, [r3, #12]
 8014814:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	685b      	ldr	r3, [r3, #4]
 801481a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801481c:	693a      	ldr	r2, [r7, #16]
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	429a      	cmp	r2, r3
 8014822:	d203      	bcs.n	801482c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014824:	4a32      	ldr	r2, [pc, #200]	; (80148f0 <xTaskIncrementTick+0x16c>)
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801482a:	e02f      	b.n	801488c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	3304      	adds	r3, #4
 8014830:	4618      	mov	r0, r3
 8014832:	f7fe fdc5 	bl	80133c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014836:	68bb      	ldr	r3, [r7, #8]
 8014838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801483a:	2b00      	cmp	r3, #0
 801483c:	d004      	beq.n	8014848 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801483e:	68bb      	ldr	r3, [r7, #8]
 8014840:	3318      	adds	r3, #24
 8014842:	4618      	mov	r0, r3
 8014844:	f7fe fdbc 	bl	80133c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801484c:	4b29      	ldr	r3, [pc, #164]	; (80148f4 <xTaskIncrementTick+0x170>)
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	429a      	cmp	r2, r3
 8014852:	d903      	bls.n	801485c <xTaskIncrementTick+0xd8>
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014858:	4a26      	ldr	r2, [pc, #152]	; (80148f4 <xTaskIncrementTick+0x170>)
 801485a:	6013      	str	r3, [r2, #0]
 801485c:	68bb      	ldr	r3, [r7, #8]
 801485e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014860:	4613      	mov	r3, r2
 8014862:	009b      	lsls	r3, r3, #2
 8014864:	4413      	add	r3, r2
 8014866:	009b      	lsls	r3, r3, #2
 8014868:	4a23      	ldr	r2, [pc, #140]	; (80148f8 <xTaskIncrementTick+0x174>)
 801486a:	441a      	add	r2, r3
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	3304      	adds	r3, #4
 8014870:	4619      	mov	r1, r3
 8014872:	4610      	mov	r0, r2
 8014874:	f7fe fd47 	bl	8013306 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014878:	68bb      	ldr	r3, [r7, #8]
 801487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801487c:	4b1f      	ldr	r3, [pc, #124]	; (80148fc <xTaskIncrementTick+0x178>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014882:	429a      	cmp	r2, r3
 8014884:	d3b8      	bcc.n	80147f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014886:	2301      	movs	r3, #1
 8014888:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801488a:	e7b5      	b.n	80147f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801488c:	4b1b      	ldr	r3, [pc, #108]	; (80148fc <xTaskIncrementTick+0x178>)
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014892:	4919      	ldr	r1, [pc, #100]	; (80148f8 <xTaskIncrementTick+0x174>)
 8014894:	4613      	mov	r3, r2
 8014896:	009b      	lsls	r3, r3, #2
 8014898:	4413      	add	r3, r2
 801489a:	009b      	lsls	r3, r3, #2
 801489c:	440b      	add	r3, r1
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	2b01      	cmp	r3, #1
 80148a2:	d901      	bls.n	80148a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80148a4:	2301      	movs	r3, #1
 80148a6:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80148a8:	4b15      	ldr	r3, [pc, #84]	; (8014900 <xTaskIncrementTick+0x17c>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d101      	bne.n	80148b4 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 80148b0:	f7eb fe98 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80148b4:	4b13      	ldr	r3, [pc, #76]	; (8014904 <xTaskIncrementTick+0x180>)
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d009      	beq.n	80148d0 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80148bc:	2301      	movs	r3, #1
 80148be:	617b      	str	r3, [r7, #20]
 80148c0:	e006      	b.n	80148d0 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80148c2:	4b0f      	ldr	r3, [pc, #60]	; (8014900 <xTaskIncrementTick+0x17c>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	3301      	adds	r3, #1
 80148c8:	4a0d      	ldr	r2, [pc, #52]	; (8014900 <xTaskIncrementTick+0x17c>)
 80148ca:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80148cc:	f7eb fe8a 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80148d0:	697b      	ldr	r3, [r7, #20]
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	3718      	adds	r7, #24
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
 80148da:	bf00      	nop
 80148dc:	24001cc4 	.word	0x24001cc4
 80148e0:	24001ca0 	.word	0x24001ca0
 80148e4:	24001c54 	.word	0x24001c54
 80148e8:	24001c58 	.word	0x24001c58
 80148ec:	24001cb4 	.word	0x24001cb4
 80148f0:	24001cbc 	.word	0x24001cbc
 80148f4:	24001ca4 	.word	0x24001ca4
 80148f8:	240017cc 	.word	0x240017cc
 80148fc:	240017c8 	.word	0x240017c8
 8014900:	24001cac 	.word	0x24001cac
 8014904:	24001cb0 	.word	0x24001cb0

08014908 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014908:	b480      	push	{r7}
 801490a:	b085      	sub	sp, #20
 801490c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801490e:	4b28      	ldr	r3, [pc, #160]	; (80149b0 <vTaskSwitchContext+0xa8>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d003      	beq.n	801491e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014916:	4b27      	ldr	r3, [pc, #156]	; (80149b4 <vTaskSwitchContext+0xac>)
 8014918:	2201      	movs	r2, #1
 801491a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801491c:	e041      	b.n	80149a2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 801491e:	4b25      	ldr	r3, [pc, #148]	; (80149b4 <vTaskSwitchContext+0xac>)
 8014920:	2200      	movs	r2, #0
 8014922:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014924:	4b24      	ldr	r3, [pc, #144]	; (80149b8 <vTaskSwitchContext+0xb0>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	60fb      	str	r3, [r7, #12]
 801492a:	e010      	b.n	801494e <vTaskSwitchContext+0x46>
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d10a      	bne.n	8014948 <vTaskSwitchContext+0x40>
	__asm volatile
 8014932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014936:	f383 8811 	msr	BASEPRI, r3
 801493a:	f3bf 8f6f 	isb	sy
 801493e:	f3bf 8f4f 	dsb	sy
 8014942:	607b      	str	r3, [r7, #4]
}
 8014944:	bf00      	nop
 8014946:	e7fe      	b.n	8014946 <vTaskSwitchContext+0x3e>
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	3b01      	subs	r3, #1
 801494c:	60fb      	str	r3, [r7, #12]
 801494e:	491b      	ldr	r1, [pc, #108]	; (80149bc <vTaskSwitchContext+0xb4>)
 8014950:	68fa      	ldr	r2, [r7, #12]
 8014952:	4613      	mov	r3, r2
 8014954:	009b      	lsls	r3, r3, #2
 8014956:	4413      	add	r3, r2
 8014958:	009b      	lsls	r3, r3, #2
 801495a:	440b      	add	r3, r1
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d0e4      	beq.n	801492c <vTaskSwitchContext+0x24>
 8014962:	68fa      	ldr	r2, [r7, #12]
 8014964:	4613      	mov	r3, r2
 8014966:	009b      	lsls	r3, r3, #2
 8014968:	4413      	add	r3, r2
 801496a:	009b      	lsls	r3, r3, #2
 801496c:	4a13      	ldr	r2, [pc, #76]	; (80149bc <vTaskSwitchContext+0xb4>)
 801496e:	4413      	add	r3, r2
 8014970:	60bb      	str	r3, [r7, #8]
 8014972:	68bb      	ldr	r3, [r7, #8]
 8014974:	685b      	ldr	r3, [r3, #4]
 8014976:	685a      	ldr	r2, [r3, #4]
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	605a      	str	r2, [r3, #4]
 801497c:	68bb      	ldr	r3, [r7, #8]
 801497e:	685a      	ldr	r2, [r3, #4]
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	3308      	adds	r3, #8
 8014984:	429a      	cmp	r2, r3
 8014986:	d104      	bne.n	8014992 <vTaskSwitchContext+0x8a>
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	685b      	ldr	r3, [r3, #4]
 801498c:	685a      	ldr	r2, [r3, #4]
 801498e:	68bb      	ldr	r3, [r7, #8]
 8014990:	605a      	str	r2, [r3, #4]
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	685b      	ldr	r3, [r3, #4]
 8014996:	68db      	ldr	r3, [r3, #12]
 8014998:	4a09      	ldr	r2, [pc, #36]	; (80149c0 <vTaskSwitchContext+0xb8>)
 801499a:	6013      	str	r3, [r2, #0]
 801499c:	4a06      	ldr	r2, [pc, #24]	; (80149b8 <vTaskSwitchContext+0xb0>)
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	6013      	str	r3, [r2, #0]
}
 80149a2:	bf00      	nop
 80149a4:	3714      	adds	r7, #20
 80149a6:	46bd      	mov	sp, r7
 80149a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ac:	4770      	bx	lr
 80149ae:	bf00      	nop
 80149b0:	24001cc4 	.word	0x24001cc4
 80149b4:	24001cb0 	.word	0x24001cb0
 80149b8:	24001ca4 	.word	0x24001ca4
 80149bc:	240017cc 	.word	0x240017cc
 80149c0:	240017c8 	.word	0x240017c8

080149c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b084      	sub	sp, #16
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
 80149cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d10a      	bne.n	80149ea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80149d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149d8:	f383 8811 	msr	BASEPRI, r3
 80149dc:	f3bf 8f6f 	isb	sy
 80149e0:	f3bf 8f4f 	dsb	sy
 80149e4:	60fb      	str	r3, [r7, #12]
}
 80149e6:	bf00      	nop
 80149e8:	e7fe      	b.n	80149e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80149ea:	4b07      	ldr	r3, [pc, #28]	; (8014a08 <vTaskPlaceOnEventList+0x44>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	3318      	adds	r3, #24
 80149f0:	4619      	mov	r1, r3
 80149f2:	6878      	ldr	r0, [r7, #4]
 80149f4:	f7fe fcab 	bl	801334e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80149f8:	2101      	movs	r1, #1
 80149fa:	6838      	ldr	r0, [r7, #0]
 80149fc:	f000 fb32 	bl	8015064 <prvAddCurrentTaskToDelayedList>
}
 8014a00:	bf00      	nop
 8014a02:	3710      	adds	r7, #16
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}
 8014a08:	240017c8 	.word	0x240017c8

08014a0c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b086      	sub	sp, #24
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	60f8      	str	r0, [r7, #12]
 8014a14:	60b9      	str	r1, [r7, #8]
 8014a16:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d10a      	bne.n	8014a34 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8014a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a22:	f383 8811 	msr	BASEPRI, r3
 8014a26:	f3bf 8f6f 	isb	sy
 8014a2a:	f3bf 8f4f 	dsb	sy
 8014a2e:	617b      	str	r3, [r7, #20]
}
 8014a30:	bf00      	nop
 8014a32:	e7fe      	b.n	8014a32 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014a34:	4b11      	ldr	r3, [pc, #68]	; (8014a7c <vTaskPlaceOnUnorderedEventList+0x70>)
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d10a      	bne.n	8014a52 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a40:	f383 8811 	msr	BASEPRI, r3
 8014a44:	f3bf 8f6f 	isb	sy
 8014a48:	f3bf 8f4f 	dsb	sy
 8014a4c:	613b      	str	r3, [r7, #16]
}
 8014a4e:	bf00      	nop
 8014a50:	e7fe      	b.n	8014a50 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014a52:	4b0b      	ldr	r3, [pc, #44]	; (8014a80 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	68ba      	ldr	r2, [r7, #8]
 8014a58:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014a5c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014a5e:	4b08      	ldr	r3, [pc, #32]	; (8014a80 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	3318      	adds	r3, #24
 8014a64:	4619      	mov	r1, r3
 8014a66:	68f8      	ldr	r0, [r7, #12]
 8014a68:	f7fe fc4d 	bl	8013306 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014a6c:	2101      	movs	r1, #1
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f000 faf8 	bl	8015064 <prvAddCurrentTaskToDelayedList>
}
 8014a74:	bf00      	nop
 8014a76:	3718      	adds	r7, #24
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd80      	pop	{r7, pc}
 8014a7c:	24001cc4 	.word	0x24001cc4
 8014a80:	240017c8 	.word	0x240017c8

08014a84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b086      	sub	sp, #24
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	60f8      	str	r0, [r7, #12]
 8014a8c:	60b9      	str	r1, [r7, #8]
 8014a8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d10a      	bne.n	8014aac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a9a:	f383 8811 	msr	BASEPRI, r3
 8014a9e:	f3bf 8f6f 	isb	sy
 8014aa2:	f3bf 8f4f 	dsb	sy
 8014aa6:	617b      	str	r3, [r7, #20]
}
 8014aa8:	bf00      	nop
 8014aaa:	e7fe      	b.n	8014aaa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014aac:	4b0a      	ldr	r3, [pc, #40]	; (8014ad8 <vTaskPlaceOnEventListRestricted+0x54>)
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	3318      	adds	r3, #24
 8014ab2:	4619      	mov	r1, r3
 8014ab4:	68f8      	ldr	r0, [r7, #12]
 8014ab6:	f7fe fc26 	bl	8013306 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d002      	beq.n	8014ac6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ac4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014ac6:	6879      	ldr	r1, [r7, #4]
 8014ac8:	68b8      	ldr	r0, [r7, #8]
 8014aca:	f000 facb 	bl	8015064 <prvAddCurrentTaskToDelayedList>
	}
 8014ace:	bf00      	nop
 8014ad0:	3718      	adds	r7, #24
 8014ad2:	46bd      	mov	sp, r7
 8014ad4:	bd80      	pop	{r7, pc}
 8014ad6:	bf00      	nop
 8014ad8:	240017c8 	.word	0x240017c8

08014adc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b086      	sub	sp, #24
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	68db      	ldr	r3, [r3, #12]
 8014ae8:	68db      	ldr	r3, [r3, #12]
 8014aea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014aec:	693b      	ldr	r3, [r7, #16]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d10a      	bne.n	8014b08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014af6:	f383 8811 	msr	BASEPRI, r3
 8014afa:	f3bf 8f6f 	isb	sy
 8014afe:	f3bf 8f4f 	dsb	sy
 8014b02:	60fb      	str	r3, [r7, #12]
}
 8014b04:	bf00      	nop
 8014b06:	e7fe      	b.n	8014b06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014b08:	693b      	ldr	r3, [r7, #16]
 8014b0a:	3318      	adds	r3, #24
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	f7fe fc57 	bl	80133c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014b12:	4b1e      	ldr	r3, [pc, #120]	; (8014b8c <xTaskRemoveFromEventList+0xb0>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d11d      	bne.n	8014b56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014b1a:	693b      	ldr	r3, [r7, #16]
 8014b1c:	3304      	adds	r3, #4
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7fe fc4e 	bl	80133c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014b24:	693b      	ldr	r3, [r7, #16]
 8014b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b28:	4b19      	ldr	r3, [pc, #100]	; (8014b90 <xTaskRemoveFromEventList+0xb4>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	429a      	cmp	r2, r3
 8014b2e:	d903      	bls.n	8014b38 <xTaskRemoveFromEventList+0x5c>
 8014b30:	693b      	ldr	r3, [r7, #16]
 8014b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b34:	4a16      	ldr	r2, [pc, #88]	; (8014b90 <xTaskRemoveFromEventList+0xb4>)
 8014b36:	6013      	str	r3, [r2, #0]
 8014b38:	693b      	ldr	r3, [r7, #16]
 8014b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b3c:	4613      	mov	r3, r2
 8014b3e:	009b      	lsls	r3, r3, #2
 8014b40:	4413      	add	r3, r2
 8014b42:	009b      	lsls	r3, r3, #2
 8014b44:	4a13      	ldr	r2, [pc, #76]	; (8014b94 <xTaskRemoveFromEventList+0xb8>)
 8014b46:	441a      	add	r2, r3
 8014b48:	693b      	ldr	r3, [r7, #16]
 8014b4a:	3304      	adds	r3, #4
 8014b4c:	4619      	mov	r1, r3
 8014b4e:	4610      	mov	r0, r2
 8014b50:	f7fe fbd9 	bl	8013306 <vListInsertEnd>
 8014b54:	e005      	b.n	8014b62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014b56:	693b      	ldr	r3, [r7, #16]
 8014b58:	3318      	adds	r3, #24
 8014b5a:	4619      	mov	r1, r3
 8014b5c:	480e      	ldr	r0, [pc, #56]	; (8014b98 <xTaskRemoveFromEventList+0xbc>)
 8014b5e:	f7fe fbd2 	bl	8013306 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014b62:	693b      	ldr	r3, [r7, #16]
 8014b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b66:	4b0d      	ldr	r3, [pc, #52]	; (8014b9c <xTaskRemoveFromEventList+0xc0>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	d905      	bls.n	8014b7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014b70:	2301      	movs	r3, #1
 8014b72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014b74:	4b0a      	ldr	r3, [pc, #40]	; (8014ba0 <xTaskRemoveFromEventList+0xc4>)
 8014b76:	2201      	movs	r2, #1
 8014b78:	601a      	str	r2, [r3, #0]
 8014b7a:	e001      	b.n	8014b80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014b80:	697b      	ldr	r3, [r7, #20]
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3718      	adds	r7, #24
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}
 8014b8a:	bf00      	nop
 8014b8c:	24001cc4 	.word	0x24001cc4
 8014b90:	24001ca4 	.word	0x24001ca4
 8014b94:	240017cc 	.word	0x240017cc
 8014b98:	24001c5c 	.word	0x24001c5c
 8014b9c:	240017c8 	.word	0x240017c8
 8014ba0:	24001cb0 	.word	0x24001cb0

08014ba4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b086      	sub	sp, #24
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
 8014bac:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014bae:	4b29      	ldr	r3, [pc, #164]	; (8014c54 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d10a      	bne.n	8014bcc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bba:	f383 8811 	msr	BASEPRI, r3
 8014bbe:	f3bf 8f6f 	isb	sy
 8014bc2:	f3bf 8f4f 	dsb	sy
 8014bc6:	613b      	str	r3, [r7, #16]
}
 8014bc8:	bf00      	nop
 8014bca:	e7fe      	b.n	8014bca <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	68db      	ldr	r3, [r3, #12]
 8014bda:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d10a      	bne.n	8014bf8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014be6:	f383 8811 	msr	BASEPRI, r3
 8014bea:	f3bf 8f6f 	isb	sy
 8014bee:	f3bf 8f4f 	dsb	sy
 8014bf2:	60fb      	str	r3, [r7, #12]
}
 8014bf4:	bf00      	nop
 8014bf6:	e7fe      	b.n	8014bf6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014bf8:	6878      	ldr	r0, [r7, #4]
 8014bfa:	f7fe fbe1 	bl	80133c0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014bfe:	697b      	ldr	r3, [r7, #20]
 8014c00:	3304      	adds	r3, #4
 8014c02:	4618      	mov	r0, r3
 8014c04:	f7fe fbdc 	bl	80133c0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014c08:	697b      	ldr	r3, [r7, #20]
 8014c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c0c:	4b12      	ldr	r3, [pc, #72]	; (8014c58 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	429a      	cmp	r2, r3
 8014c12:	d903      	bls.n	8014c1c <vTaskRemoveFromUnorderedEventList+0x78>
 8014c14:	697b      	ldr	r3, [r7, #20]
 8014c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c18:	4a0f      	ldr	r2, [pc, #60]	; (8014c58 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014c1a:	6013      	str	r3, [r2, #0]
 8014c1c:	697b      	ldr	r3, [r7, #20]
 8014c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c20:	4613      	mov	r3, r2
 8014c22:	009b      	lsls	r3, r3, #2
 8014c24:	4413      	add	r3, r2
 8014c26:	009b      	lsls	r3, r3, #2
 8014c28:	4a0c      	ldr	r2, [pc, #48]	; (8014c5c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014c2a:	441a      	add	r2, r3
 8014c2c:	697b      	ldr	r3, [r7, #20]
 8014c2e:	3304      	adds	r3, #4
 8014c30:	4619      	mov	r1, r3
 8014c32:	4610      	mov	r0, r2
 8014c34:	f7fe fb67 	bl	8013306 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014c38:	697b      	ldr	r3, [r7, #20]
 8014c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c3c:	4b08      	ldr	r3, [pc, #32]	; (8014c60 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c42:	429a      	cmp	r2, r3
 8014c44:	d902      	bls.n	8014c4c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014c46:	4b07      	ldr	r3, [pc, #28]	; (8014c64 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014c48:	2201      	movs	r2, #1
 8014c4a:	601a      	str	r2, [r3, #0]
	}
}
 8014c4c:	bf00      	nop
 8014c4e:	3718      	adds	r7, #24
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}
 8014c54:	24001cc4 	.word	0x24001cc4
 8014c58:	24001ca4 	.word	0x24001ca4
 8014c5c:	240017cc 	.word	0x240017cc
 8014c60:	240017c8 	.word	0x240017c8
 8014c64:	24001cb0 	.word	0x24001cb0

08014c68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014c68:	b480      	push	{r7}
 8014c6a:	b083      	sub	sp, #12
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014c70:	4b06      	ldr	r3, [pc, #24]	; (8014c8c <vTaskInternalSetTimeOutState+0x24>)
 8014c72:	681a      	ldr	r2, [r3, #0]
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014c78:	4b05      	ldr	r3, [pc, #20]	; (8014c90 <vTaskInternalSetTimeOutState+0x28>)
 8014c7a:	681a      	ldr	r2, [r3, #0]
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	605a      	str	r2, [r3, #4]
}
 8014c80:	bf00      	nop
 8014c82:	370c      	adds	r7, #12
 8014c84:	46bd      	mov	sp, r7
 8014c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8a:	4770      	bx	lr
 8014c8c:	24001cb4 	.word	0x24001cb4
 8014c90:	24001ca0 	.word	0x24001ca0

08014c94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b088      	sub	sp, #32
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
 8014c9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d10a      	bne.n	8014cba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ca8:	f383 8811 	msr	BASEPRI, r3
 8014cac:	f3bf 8f6f 	isb	sy
 8014cb0:	f3bf 8f4f 	dsb	sy
 8014cb4:	613b      	str	r3, [r7, #16]
}
 8014cb6:	bf00      	nop
 8014cb8:	e7fe      	b.n	8014cb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014cba:	683b      	ldr	r3, [r7, #0]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d10a      	bne.n	8014cd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cc4:	f383 8811 	msr	BASEPRI, r3
 8014cc8:	f3bf 8f6f 	isb	sy
 8014ccc:	f3bf 8f4f 	dsb	sy
 8014cd0:	60fb      	str	r3, [r7, #12]
}
 8014cd2:	bf00      	nop
 8014cd4:	e7fe      	b.n	8014cd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014cd6:	f000 feb5 	bl	8015a44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014cda:	4b1d      	ldr	r3, [pc, #116]	; (8014d50 <xTaskCheckForTimeOut+0xbc>)
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	685b      	ldr	r3, [r3, #4]
 8014ce4:	69ba      	ldr	r2, [r7, #24]
 8014ce6:	1ad3      	subs	r3, r2, r3
 8014ce8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014cea:	683b      	ldr	r3, [r7, #0]
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014cf2:	d102      	bne.n	8014cfa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	61fb      	str	r3, [r7, #28]
 8014cf8:	e023      	b.n	8014d42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	681a      	ldr	r2, [r3, #0]
 8014cfe:	4b15      	ldr	r3, [pc, #84]	; (8014d54 <xTaskCheckForTimeOut+0xc0>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	429a      	cmp	r2, r3
 8014d04:	d007      	beq.n	8014d16 <xTaskCheckForTimeOut+0x82>
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	685b      	ldr	r3, [r3, #4]
 8014d0a:	69ba      	ldr	r2, [r7, #24]
 8014d0c:	429a      	cmp	r2, r3
 8014d0e:	d302      	bcc.n	8014d16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014d10:	2301      	movs	r3, #1
 8014d12:	61fb      	str	r3, [r7, #28]
 8014d14:	e015      	b.n	8014d42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	697a      	ldr	r2, [r7, #20]
 8014d1c:	429a      	cmp	r2, r3
 8014d1e:	d20b      	bcs.n	8014d38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014d20:	683b      	ldr	r3, [r7, #0]
 8014d22:	681a      	ldr	r2, [r3, #0]
 8014d24:	697b      	ldr	r3, [r7, #20]
 8014d26:	1ad2      	subs	r2, r2, r3
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014d2c:	6878      	ldr	r0, [r7, #4]
 8014d2e:	f7ff ff9b 	bl	8014c68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014d32:	2300      	movs	r3, #0
 8014d34:	61fb      	str	r3, [r7, #28]
 8014d36:	e004      	b.n	8014d42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014d38:	683b      	ldr	r3, [r7, #0]
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014d3e:	2301      	movs	r3, #1
 8014d40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014d42:	f000 feaf 	bl	8015aa4 <vPortExitCritical>

	return xReturn;
 8014d46:	69fb      	ldr	r3, [r7, #28]
}
 8014d48:	4618      	mov	r0, r3
 8014d4a:	3720      	adds	r7, #32
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}
 8014d50:	24001ca0 	.word	0x24001ca0
 8014d54:	24001cb4 	.word	0x24001cb4

08014d58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014d58:	b480      	push	{r7}
 8014d5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014d5c:	4b03      	ldr	r3, [pc, #12]	; (8014d6c <vTaskMissedYield+0x14>)
 8014d5e:	2201      	movs	r2, #1
 8014d60:	601a      	str	r2, [r3, #0]
}
 8014d62:	bf00      	nop
 8014d64:	46bd      	mov	sp, r7
 8014d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6a:	4770      	bx	lr
 8014d6c:	24001cb0 	.word	0x24001cb0

08014d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b082      	sub	sp, #8
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014d78:	f000 f852 	bl	8014e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014d7c:	4b06      	ldr	r3, [pc, #24]	; (8014d98 <prvIdleTask+0x28>)
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	2b01      	cmp	r3, #1
 8014d82:	d9f9      	bls.n	8014d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014d84:	4b05      	ldr	r3, [pc, #20]	; (8014d9c <prvIdleTask+0x2c>)
 8014d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d8a:	601a      	str	r2, [r3, #0]
 8014d8c:	f3bf 8f4f 	dsb	sy
 8014d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014d94:	e7f0      	b.n	8014d78 <prvIdleTask+0x8>
 8014d96:	bf00      	nop
 8014d98:	240017cc 	.word	0x240017cc
 8014d9c:	e000ed04 	.word	0xe000ed04

08014da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b082      	sub	sp, #8
 8014da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014da6:	2300      	movs	r3, #0
 8014da8:	607b      	str	r3, [r7, #4]
 8014daa:	e00c      	b.n	8014dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014dac:	687a      	ldr	r2, [r7, #4]
 8014dae:	4613      	mov	r3, r2
 8014db0:	009b      	lsls	r3, r3, #2
 8014db2:	4413      	add	r3, r2
 8014db4:	009b      	lsls	r3, r3, #2
 8014db6:	4a12      	ldr	r2, [pc, #72]	; (8014e00 <prvInitialiseTaskLists+0x60>)
 8014db8:	4413      	add	r3, r2
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f7fe fa76 	bl	80132ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	3301      	adds	r3, #1
 8014dc4:	607b      	str	r3, [r7, #4]
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	2b37      	cmp	r3, #55	; 0x37
 8014dca:	d9ef      	bls.n	8014dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014dcc:	480d      	ldr	r0, [pc, #52]	; (8014e04 <prvInitialiseTaskLists+0x64>)
 8014dce:	f7fe fa6d 	bl	80132ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014dd2:	480d      	ldr	r0, [pc, #52]	; (8014e08 <prvInitialiseTaskLists+0x68>)
 8014dd4:	f7fe fa6a 	bl	80132ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014dd8:	480c      	ldr	r0, [pc, #48]	; (8014e0c <prvInitialiseTaskLists+0x6c>)
 8014dda:	f7fe fa67 	bl	80132ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014dde:	480c      	ldr	r0, [pc, #48]	; (8014e10 <prvInitialiseTaskLists+0x70>)
 8014de0:	f7fe fa64 	bl	80132ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014de4:	480b      	ldr	r0, [pc, #44]	; (8014e14 <prvInitialiseTaskLists+0x74>)
 8014de6:	f7fe fa61 	bl	80132ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014dea:	4b0b      	ldr	r3, [pc, #44]	; (8014e18 <prvInitialiseTaskLists+0x78>)
 8014dec:	4a05      	ldr	r2, [pc, #20]	; (8014e04 <prvInitialiseTaskLists+0x64>)
 8014dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014df0:	4b0a      	ldr	r3, [pc, #40]	; (8014e1c <prvInitialiseTaskLists+0x7c>)
 8014df2:	4a05      	ldr	r2, [pc, #20]	; (8014e08 <prvInitialiseTaskLists+0x68>)
 8014df4:	601a      	str	r2, [r3, #0]
}
 8014df6:	bf00      	nop
 8014df8:	3708      	adds	r7, #8
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd80      	pop	{r7, pc}
 8014dfe:	bf00      	nop
 8014e00:	240017cc 	.word	0x240017cc
 8014e04:	24001c2c 	.word	0x24001c2c
 8014e08:	24001c40 	.word	0x24001c40
 8014e0c:	24001c5c 	.word	0x24001c5c
 8014e10:	24001c70 	.word	0x24001c70
 8014e14:	24001c88 	.word	0x24001c88
 8014e18:	24001c54 	.word	0x24001c54
 8014e1c:	24001c58 	.word	0x24001c58

08014e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b082      	sub	sp, #8
 8014e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014e26:	e019      	b.n	8014e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014e28:	f000 fe0c 	bl	8015a44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e2c:	4b10      	ldr	r3, [pc, #64]	; (8014e70 <prvCheckTasksWaitingTermination+0x50>)
 8014e2e:	68db      	ldr	r3, [r3, #12]
 8014e30:	68db      	ldr	r3, [r3, #12]
 8014e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	3304      	adds	r3, #4
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f7fe fac1 	bl	80133c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014e3e:	4b0d      	ldr	r3, [pc, #52]	; (8014e74 <prvCheckTasksWaitingTermination+0x54>)
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	3b01      	subs	r3, #1
 8014e44:	4a0b      	ldr	r2, [pc, #44]	; (8014e74 <prvCheckTasksWaitingTermination+0x54>)
 8014e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014e48:	4b0b      	ldr	r3, [pc, #44]	; (8014e78 <prvCheckTasksWaitingTermination+0x58>)
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	3b01      	subs	r3, #1
 8014e4e:	4a0a      	ldr	r2, [pc, #40]	; (8014e78 <prvCheckTasksWaitingTermination+0x58>)
 8014e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014e52:	f000 fe27 	bl	8015aa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f000 f810 	bl	8014e7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014e5c:	4b06      	ldr	r3, [pc, #24]	; (8014e78 <prvCheckTasksWaitingTermination+0x58>)
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d1e1      	bne.n	8014e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014e64:	bf00      	nop
 8014e66:	bf00      	nop
 8014e68:	3708      	adds	r7, #8
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd80      	pop	{r7, pc}
 8014e6e:	bf00      	nop
 8014e70:	24001c70 	.word	0x24001c70
 8014e74:	24001c9c 	.word	0x24001c9c
 8014e78:	24001c84 	.word	0x24001c84

08014e7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b084      	sub	sp, #16
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d108      	bne.n	8014ea0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e92:	4618      	mov	r0, r3
 8014e94:	f000 ffc4 	bl	8015e20 <vPortFree>
				vPortFree( pxTCB );
 8014e98:	6878      	ldr	r0, [r7, #4]
 8014e9a:	f000 ffc1 	bl	8015e20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014e9e:	e018      	b.n	8014ed2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014ea6:	2b01      	cmp	r3, #1
 8014ea8:	d103      	bne.n	8014eb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f000 ffb8 	bl	8015e20 <vPortFree>
	}
 8014eb0:	e00f      	b.n	8014ed2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014eb8:	2b02      	cmp	r3, #2
 8014eba:	d00a      	beq.n	8014ed2 <prvDeleteTCB+0x56>
	__asm volatile
 8014ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ec0:	f383 8811 	msr	BASEPRI, r3
 8014ec4:	f3bf 8f6f 	isb	sy
 8014ec8:	f3bf 8f4f 	dsb	sy
 8014ecc:	60fb      	str	r3, [r7, #12]
}
 8014ece:	bf00      	nop
 8014ed0:	e7fe      	b.n	8014ed0 <prvDeleteTCB+0x54>
	}
 8014ed2:	bf00      	nop
 8014ed4:	3710      	adds	r7, #16
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	bd80      	pop	{r7, pc}
	...

08014edc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014edc:	b480      	push	{r7}
 8014ede:	b083      	sub	sp, #12
 8014ee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014ee2:	4b0c      	ldr	r3, [pc, #48]	; (8014f14 <prvResetNextTaskUnblockTime+0x38>)
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d104      	bne.n	8014ef6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014eec:	4b0a      	ldr	r3, [pc, #40]	; (8014f18 <prvResetNextTaskUnblockTime+0x3c>)
 8014eee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ef2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014ef4:	e008      	b.n	8014f08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ef6:	4b07      	ldr	r3, [pc, #28]	; (8014f14 <prvResetNextTaskUnblockTime+0x38>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	68db      	ldr	r3, [r3, #12]
 8014efc:	68db      	ldr	r3, [r3, #12]
 8014efe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	685b      	ldr	r3, [r3, #4]
 8014f04:	4a04      	ldr	r2, [pc, #16]	; (8014f18 <prvResetNextTaskUnblockTime+0x3c>)
 8014f06:	6013      	str	r3, [r2, #0]
}
 8014f08:	bf00      	nop
 8014f0a:	370c      	adds	r7, #12
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f12:	4770      	bx	lr
 8014f14:	24001c54 	.word	0x24001c54
 8014f18:	24001cbc 	.word	0x24001cbc

08014f1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014f1c:	b480      	push	{r7}
 8014f1e:	b083      	sub	sp, #12
 8014f20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014f22:	4b0b      	ldr	r3, [pc, #44]	; (8014f50 <xTaskGetSchedulerState+0x34>)
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d102      	bne.n	8014f30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014f2a:	2301      	movs	r3, #1
 8014f2c:	607b      	str	r3, [r7, #4]
 8014f2e:	e008      	b.n	8014f42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014f30:	4b08      	ldr	r3, [pc, #32]	; (8014f54 <xTaskGetSchedulerState+0x38>)
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d102      	bne.n	8014f3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014f38:	2302      	movs	r3, #2
 8014f3a:	607b      	str	r3, [r7, #4]
 8014f3c:	e001      	b.n	8014f42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014f42:	687b      	ldr	r3, [r7, #4]
	}
 8014f44:	4618      	mov	r0, r3
 8014f46:	370c      	adds	r7, #12
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4e:	4770      	bx	lr
 8014f50:	24001ca8 	.word	0x24001ca8
 8014f54:	24001cc4 	.word	0x24001cc4

08014f58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b086      	sub	sp, #24
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014f64:	2300      	movs	r3, #0
 8014f66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d056      	beq.n	801501c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014f6e:	4b2e      	ldr	r3, [pc, #184]	; (8015028 <xTaskPriorityDisinherit+0xd0>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	693a      	ldr	r2, [r7, #16]
 8014f74:	429a      	cmp	r2, r3
 8014f76:	d00a      	beq.n	8014f8e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f7c:	f383 8811 	msr	BASEPRI, r3
 8014f80:	f3bf 8f6f 	isb	sy
 8014f84:	f3bf 8f4f 	dsb	sy
 8014f88:	60fb      	str	r3, [r7, #12]
}
 8014f8a:	bf00      	nop
 8014f8c:	e7fe      	b.n	8014f8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014f8e:	693b      	ldr	r3, [r7, #16]
 8014f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d10a      	bne.n	8014fac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f9a:	f383 8811 	msr	BASEPRI, r3
 8014f9e:	f3bf 8f6f 	isb	sy
 8014fa2:	f3bf 8f4f 	dsb	sy
 8014fa6:	60bb      	str	r3, [r7, #8]
}
 8014fa8:	bf00      	nop
 8014faa:	e7fe      	b.n	8014faa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014fb0:	1e5a      	subs	r2, r3, #1
 8014fb2:	693b      	ldr	r3, [r7, #16]
 8014fb4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014fb6:	693b      	ldr	r3, [r7, #16]
 8014fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fba:	693b      	ldr	r3, [r7, #16]
 8014fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014fbe:	429a      	cmp	r2, r3
 8014fc0:	d02c      	beq.n	801501c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014fc2:	693b      	ldr	r3, [r7, #16]
 8014fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d128      	bne.n	801501c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014fca:	693b      	ldr	r3, [r7, #16]
 8014fcc:	3304      	adds	r3, #4
 8014fce:	4618      	mov	r0, r3
 8014fd0:	f7fe f9f6 	bl	80133c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014fd4:	693b      	ldr	r3, [r7, #16]
 8014fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014fd8:	693b      	ldr	r3, [r7, #16]
 8014fda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014fdc:	693b      	ldr	r3, [r7, #16]
 8014fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fe0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014fe4:	693b      	ldr	r3, [r7, #16]
 8014fe6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014fe8:	693b      	ldr	r3, [r7, #16]
 8014fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fec:	4b0f      	ldr	r3, [pc, #60]	; (801502c <xTaskPriorityDisinherit+0xd4>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	d903      	bls.n	8014ffc <xTaskPriorityDisinherit+0xa4>
 8014ff4:	693b      	ldr	r3, [r7, #16]
 8014ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ff8:	4a0c      	ldr	r2, [pc, #48]	; (801502c <xTaskPriorityDisinherit+0xd4>)
 8014ffa:	6013      	str	r3, [r2, #0]
 8014ffc:	693b      	ldr	r3, [r7, #16]
 8014ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015000:	4613      	mov	r3, r2
 8015002:	009b      	lsls	r3, r3, #2
 8015004:	4413      	add	r3, r2
 8015006:	009b      	lsls	r3, r3, #2
 8015008:	4a09      	ldr	r2, [pc, #36]	; (8015030 <xTaskPriorityDisinherit+0xd8>)
 801500a:	441a      	add	r2, r3
 801500c:	693b      	ldr	r3, [r7, #16]
 801500e:	3304      	adds	r3, #4
 8015010:	4619      	mov	r1, r3
 8015012:	4610      	mov	r0, r2
 8015014:	f7fe f977 	bl	8013306 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015018:	2301      	movs	r3, #1
 801501a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801501c:	697b      	ldr	r3, [r7, #20]
	}
 801501e:	4618      	mov	r0, r3
 8015020:	3718      	adds	r7, #24
 8015022:	46bd      	mov	sp, r7
 8015024:	bd80      	pop	{r7, pc}
 8015026:	bf00      	nop
 8015028:	240017c8 	.word	0x240017c8
 801502c:	24001ca4 	.word	0x24001ca4
 8015030:	240017cc 	.word	0x240017cc

08015034 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015034:	b480      	push	{r7}
 8015036:	b083      	sub	sp, #12
 8015038:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801503a:	4b09      	ldr	r3, [pc, #36]	; (8015060 <uxTaskResetEventItemValue+0x2c>)
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	699b      	ldr	r3, [r3, #24]
 8015040:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015042:	4b07      	ldr	r3, [pc, #28]	; (8015060 <uxTaskResetEventItemValue+0x2c>)
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015048:	4b05      	ldr	r3, [pc, #20]	; (8015060 <uxTaskResetEventItemValue+0x2c>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015050:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015052:	687b      	ldr	r3, [r7, #4]
}
 8015054:	4618      	mov	r0, r3
 8015056:	370c      	adds	r7, #12
 8015058:	46bd      	mov	sp, r7
 801505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505e:	4770      	bx	lr
 8015060:	240017c8 	.word	0x240017c8

08015064 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b084      	sub	sp, #16
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
 801506c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801506e:	4b21      	ldr	r3, [pc, #132]	; (80150f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015074:	4b20      	ldr	r3, [pc, #128]	; (80150f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	3304      	adds	r3, #4
 801507a:	4618      	mov	r0, r3
 801507c:	f7fe f9a0 	bl	80133c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015086:	d10a      	bne.n	801509e <prvAddCurrentTaskToDelayedList+0x3a>
 8015088:	683b      	ldr	r3, [r7, #0]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d007      	beq.n	801509e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801508e:	4b1a      	ldr	r3, [pc, #104]	; (80150f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	3304      	adds	r3, #4
 8015094:	4619      	mov	r1, r3
 8015096:	4819      	ldr	r0, [pc, #100]	; (80150fc <prvAddCurrentTaskToDelayedList+0x98>)
 8015098:	f7fe f935 	bl	8013306 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801509c:	e026      	b.n	80150ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801509e:	68fa      	ldr	r2, [r7, #12]
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	4413      	add	r3, r2
 80150a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80150a6:	4b14      	ldr	r3, [pc, #80]	; (80150f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	68ba      	ldr	r2, [r7, #8]
 80150ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80150ae:	68ba      	ldr	r2, [r7, #8]
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	429a      	cmp	r2, r3
 80150b4:	d209      	bcs.n	80150ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80150b6:	4b12      	ldr	r3, [pc, #72]	; (8015100 <prvAddCurrentTaskToDelayedList+0x9c>)
 80150b8:	681a      	ldr	r2, [r3, #0]
 80150ba:	4b0f      	ldr	r3, [pc, #60]	; (80150f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	3304      	adds	r3, #4
 80150c0:	4619      	mov	r1, r3
 80150c2:	4610      	mov	r0, r2
 80150c4:	f7fe f943 	bl	801334e <vListInsert>
}
 80150c8:	e010      	b.n	80150ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80150ca:	4b0e      	ldr	r3, [pc, #56]	; (8015104 <prvAddCurrentTaskToDelayedList+0xa0>)
 80150cc:	681a      	ldr	r2, [r3, #0]
 80150ce:	4b0a      	ldr	r3, [pc, #40]	; (80150f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	3304      	adds	r3, #4
 80150d4:	4619      	mov	r1, r3
 80150d6:	4610      	mov	r0, r2
 80150d8:	f7fe f939 	bl	801334e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80150dc:	4b0a      	ldr	r3, [pc, #40]	; (8015108 <prvAddCurrentTaskToDelayedList+0xa4>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	68ba      	ldr	r2, [r7, #8]
 80150e2:	429a      	cmp	r2, r3
 80150e4:	d202      	bcs.n	80150ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80150e6:	4a08      	ldr	r2, [pc, #32]	; (8015108 <prvAddCurrentTaskToDelayedList+0xa4>)
 80150e8:	68bb      	ldr	r3, [r7, #8]
 80150ea:	6013      	str	r3, [r2, #0]
}
 80150ec:	bf00      	nop
 80150ee:	3710      	adds	r7, #16
 80150f0:	46bd      	mov	sp, r7
 80150f2:	bd80      	pop	{r7, pc}
 80150f4:	24001ca0 	.word	0x24001ca0
 80150f8:	240017c8 	.word	0x240017c8
 80150fc:	24001c88 	.word	0x24001c88
 8015100:	24001c58 	.word	0x24001c58
 8015104:	24001c54 	.word	0x24001c54
 8015108:	24001cbc 	.word	0x24001cbc

0801510c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b08a      	sub	sp, #40	; 0x28
 8015110:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015112:	2300      	movs	r3, #0
 8015114:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015116:	f000 fb07 	bl	8015728 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801511a:	4b1c      	ldr	r3, [pc, #112]	; (801518c <xTimerCreateTimerTask+0x80>)
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d021      	beq.n	8015166 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015122:	2300      	movs	r3, #0
 8015124:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015126:	2300      	movs	r3, #0
 8015128:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801512a:	1d3a      	adds	r2, r7, #4
 801512c:	f107 0108 	add.w	r1, r7, #8
 8015130:	f107 030c 	add.w	r3, r7, #12
 8015134:	4618      	mov	r0, r3
 8015136:	f7fd feb1 	bl	8012e9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801513a:	6879      	ldr	r1, [r7, #4]
 801513c:	68bb      	ldr	r3, [r7, #8]
 801513e:	68fa      	ldr	r2, [r7, #12]
 8015140:	9202      	str	r2, [sp, #8]
 8015142:	9301      	str	r3, [sp, #4]
 8015144:	2302      	movs	r3, #2
 8015146:	9300      	str	r3, [sp, #0]
 8015148:	2300      	movs	r3, #0
 801514a:	460a      	mov	r2, r1
 801514c:	4910      	ldr	r1, [pc, #64]	; (8015190 <xTimerCreateTimerTask+0x84>)
 801514e:	4811      	ldr	r0, [pc, #68]	; (8015194 <xTimerCreateTimerTask+0x88>)
 8015150:	f7fe ff06 	bl	8013f60 <xTaskCreateStatic>
 8015154:	4603      	mov	r3, r0
 8015156:	4a10      	ldr	r2, [pc, #64]	; (8015198 <xTimerCreateTimerTask+0x8c>)
 8015158:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801515a:	4b0f      	ldr	r3, [pc, #60]	; (8015198 <xTimerCreateTimerTask+0x8c>)
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d001      	beq.n	8015166 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015162:	2301      	movs	r3, #1
 8015164:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015166:	697b      	ldr	r3, [r7, #20]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d10a      	bne.n	8015182 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015170:	f383 8811 	msr	BASEPRI, r3
 8015174:	f3bf 8f6f 	isb	sy
 8015178:	f3bf 8f4f 	dsb	sy
 801517c:	613b      	str	r3, [r7, #16]
}
 801517e:	bf00      	nop
 8015180:	e7fe      	b.n	8015180 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015182:	697b      	ldr	r3, [r7, #20]
}
 8015184:	4618      	mov	r0, r3
 8015186:	3718      	adds	r7, #24
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}
 801518c:	24001cf8 	.word	0x24001cf8
 8015190:	08016d74 	.word	0x08016d74
 8015194:	080152d1 	.word	0x080152d1
 8015198:	24001cfc 	.word	0x24001cfc

0801519c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801519c:	b580      	push	{r7, lr}
 801519e:	b08a      	sub	sp, #40	; 0x28
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	60f8      	str	r0, [r7, #12]
 80151a4:	60b9      	str	r1, [r7, #8]
 80151a6:	607a      	str	r2, [r7, #4]
 80151a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80151aa:	2300      	movs	r3, #0
 80151ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d10a      	bne.n	80151ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80151b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151b8:	f383 8811 	msr	BASEPRI, r3
 80151bc:	f3bf 8f6f 	isb	sy
 80151c0:	f3bf 8f4f 	dsb	sy
 80151c4:	623b      	str	r3, [r7, #32]
}
 80151c6:	bf00      	nop
 80151c8:	e7fe      	b.n	80151c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80151ca:	4b1a      	ldr	r3, [pc, #104]	; (8015234 <xTimerGenericCommand+0x98>)
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d02a      	beq.n	8015228 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80151d2:	68bb      	ldr	r3, [r7, #8]
 80151d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80151de:	68bb      	ldr	r3, [r7, #8]
 80151e0:	2b05      	cmp	r3, #5
 80151e2:	dc18      	bgt.n	8015216 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80151e4:	f7ff fe9a 	bl	8014f1c <xTaskGetSchedulerState>
 80151e8:	4603      	mov	r3, r0
 80151ea:	2b02      	cmp	r3, #2
 80151ec:	d109      	bne.n	8015202 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80151ee:	4b11      	ldr	r3, [pc, #68]	; (8015234 <xTimerGenericCommand+0x98>)
 80151f0:	6818      	ldr	r0, [r3, #0]
 80151f2:	f107 0110 	add.w	r1, r7, #16
 80151f6:	2300      	movs	r3, #0
 80151f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80151fa:	f7fe fa49 	bl	8013690 <xQueueGenericSend>
 80151fe:	6278      	str	r0, [r7, #36]	; 0x24
 8015200:	e012      	b.n	8015228 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015202:	4b0c      	ldr	r3, [pc, #48]	; (8015234 <xTimerGenericCommand+0x98>)
 8015204:	6818      	ldr	r0, [r3, #0]
 8015206:	f107 0110 	add.w	r1, r7, #16
 801520a:	2300      	movs	r3, #0
 801520c:	2200      	movs	r2, #0
 801520e:	f7fe fa3f 	bl	8013690 <xQueueGenericSend>
 8015212:	6278      	str	r0, [r7, #36]	; 0x24
 8015214:	e008      	b.n	8015228 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015216:	4b07      	ldr	r3, [pc, #28]	; (8015234 <xTimerGenericCommand+0x98>)
 8015218:	6818      	ldr	r0, [r3, #0]
 801521a:	f107 0110 	add.w	r1, r7, #16
 801521e:	2300      	movs	r3, #0
 8015220:	683a      	ldr	r2, [r7, #0]
 8015222:	f7fe fb33 	bl	801388c <xQueueGenericSendFromISR>
 8015226:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801522a:	4618      	mov	r0, r3
 801522c:	3728      	adds	r7, #40	; 0x28
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}
 8015232:	bf00      	nop
 8015234:	24001cf8 	.word	0x24001cf8

08015238 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b088      	sub	sp, #32
 801523c:	af02      	add	r7, sp, #8
 801523e:	6078      	str	r0, [r7, #4]
 8015240:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015242:	4b22      	ldr	r3, [pc, #136]	; (80152cc <prvProcessExpiredTimer+0x94>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	68db      	ldr	r3, [r3, #12]
 8015248:	68db      	ldr	r3, [r3, #12]
 801524a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801524c:	697b      	ldr	r3, [r7, #20]
 801524e:	3304      	adds	r3, #4
 8015250:	4618      	mov	r0, r3
 8015252:	f7fe f8b5 	bl	80133c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015256:	697b      	ldr	r3, [r7, #20]
 8015258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801525c:	f003 0304 	and.w	r3, r3, #4
 8015260:	2b00      	cmp	r3, #0
 8015262:	d022      	beq.n	80152aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015264:	697b      	ldr	r3, [r7, #20]
 8015266:	699a      	ldr	r2, [r3, #24]
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	18d1      	adds	r1, r2, r3
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	683a      	ldr	r2, [r7, #0]
 8015270:	6978      	ldr	r0, [r7, #20]
 8015272:	f000 f8d1 	bl	8015418 <prvInsertTimerInActiveList>
 8015276:	4603      	mov	r3, r0
 8015278:	2b00      	cmp	r3, #0
 801527a:	d01f      	beq.n	80152bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801527c:	2300      	movs	r3, #0
 801527e:	9300      	str	r3, [sp, #0]
 8015280:	2300      	movs	r3, #0
 8015282:	687a      	ldr	r2, [r7, #4]
 8015284:	2100      	movs	r1, #0
 8015286:	6978      	ldr	r0, [r7, #20]
 8015288:	f7ff ff88 	bl	801519c <xTimerGenericCommand>
 801528c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801528e:	693b      	ldr	r3, [r7, #16]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d113      	bne.n	80152bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015298:	f383 8811 	msr	BASEPRI, r3
 801529c:	f3bf 8f6f 	isb	sy
 80152a0:	f3bf 8f4f 	dsb	sy
 80152a4:	60fb      	str	r3, [r7, #12]
}
 80152a6:	bf00      	nop
 80152a8:	e7fe      	b.n	80152a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80152aa:	697b      	ldr	r3, [r7, #20]
 80152ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152b0:	f023 0301 	bic.w	r3, r3, #1
 80152b4:	b2da      	uxtb	r2, r3
 80152b6:	697b      	ldr	r3, [r7, #20]
 80152b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80152bc:	697b      	ldr	r3, [r7, #20]
 80152be:	6a1b      	ldr	r3, [r3, #32]
 80152c0:	6978      	ldr	r0, [r7, #20]
 80152c2:	4798      	blx	r3
}
 80152c4:	bf00      	nop
 80152c6:	3718      	adds	r7, #24
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}
 80152cc:	24001cf0 	.word	0x24001cf0

080152d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b084      	sub	sp, #16
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80152d8:	f107 0308 	add.w	r3, r7, #8
 80152dc:	4618      	mov	r0, r3
 80152de:	f000 f857 	bl	8015390 <prvGetNextExpireTime>
 80152e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80152e4:	68bb      	ldr	r3, [r7, #8]
 80152e6:	4619      	mov	r1, r3
 80152e8:	68f8      	ldr	r0, [r7, #12]
 80152ea:	f000 f803 	bl	80152f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80152ee:	f000 f8d5 	bl	801549c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80152f2:	e7f1      	b.n	80152d8 <prvTimerTask+0x8>

080152f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b084      	sub	sp, #16
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80152fe:	f7ff f985 	bl	801460c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015302:	f107 0308 	add.w	r3, r7, #8
 8015306:	4618      	mov	r0, r3
 8015308:	f000 f866 	bl	80153d8 <prvSampleTimeNow>
 801530c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801530e:	68bb      	ldr	r3, [r7, #8]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d130      	bne.n	8015376 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015314:	683b      	ldr	r3, [r7, #0]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d10a      	bne.n	8015330 <prvProcessTimerOrBlockTask+0x3c>
 801531a:	687a      	ldr	r2, [r7, #4]
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	429a      	cmp	r2, r3
 8015320:	d806      	bhi.n	8015330 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015322:	f7ff f981 	bl	8014628 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015326:	68f9      	ldr	r1, [r7, #12]
 8015328:	6878      	ldr	r0, [r7, #4]
 801532a:	f7ff ff85 	bl	8015238 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801532e:	e024      	b.n	801537a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d008      	beq.n	8015348 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015336:	4b13      	ldr	r3, [pc, #76]	; (8015384 <prvProcessTimerOrBlockTask+0x90>)
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d101      	bne.n	8015344 <prvProcessTimerOrBlockTask+0x50>
 8015340:	2301      	movs	r3, #1
 8015342:	e000      	b.n	8015346 <prvProcessTimerOrBlockTask+0x52>
 8015344:	2300      	movs	r3, #0
 8015346:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015348:	4b0f      	ldr	r3, [pc, #60]	; (8015388 <prvProcessTimerOrBlockTask+0x94>)
 801534a:	6818      	ldr	r0, [r3, #0]
 801534c:	687a      	ldr	r2, [r7, #4]
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	1ad3      	subs	r3, r2, r3
 8015352:	683a      	ldr	r2, [r7, #0]
 8015354:	4619      	mov	r1, r3
 8015356:	f7fe fdcf 	bl	8013ef8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801535a:	f7ff f965 	bl	8014628 <xTaskResumeAll>
 801535e:	4603      	mov	r3, r0
 8015360:	2b00      	cmp	r3, #0
 8015362:	d10a      	bne.n	801537a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015364:	4b09      	ldr	r3, [pc, #36]	; (801538c <prvProcessTimerOrBlockTask+0x98>)
 8015366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801536a:	601a      	str	r2, [r3, #0]
 801536c:	f3bf 8f4f 	dsb	sy
 8015370:	f3bf 8f6f 	isb	sy
}
 8015374:	e001      	b.n	801537a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015376:	f7ff f957 	bl	8014628 <xTaskResumeAll>
}
 801537a:	bf00      	nop
 801537c:	3710      	adds	r7, #16
 801537e:	46bd      	mov	sp, r7
 8015380:	bd80      	pop	{r7, pc}
 8015382:	bf00      	nop
 8015384:	24001cf4 	.word	0x24001cf4
 8015388:	24001cf8 	.word	0x24001cf8
 801538c:	e000ed04 	.word	0xe000ed04

08015390 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015390:	b480      	push	{r7}
 8015392:	b085      	sub	sp, #20
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015398:	4b0e      	ldr	r3, [pc, #56]	; (80153d4 <prvGetNextExpireTime+0x44>)
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d101      	bne.n	80153a6 <prvGetNextExpireTime+0x16>
 80153a2:	2201      	movs	r2, #1
 80153a4:	e000      	b.n	80153a8 <prvGetNextExpireTime+0x18>
 80153a6:	2200      	movs	r2, #0
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d105      	bne.n	80153c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80153b4:	4b07      	ldr	r3, [pc, #28]	; (80153d4 <prvGetNextExpireTime+0x44>)
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	68db      	ldr	r3, [r3, #12]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	60fb      	str	r3, [r7, #12]
 80153be:	e001      	b.n	80153c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80153c0:	2300      	movs	r3, #0
 80153c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80153c4:	68fb      	ldr	r3, [r7, #12]
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	3714      	adds	r7, #20
 80153ca:	46bd      	mov	sp, r7
 80153cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d0:	4770      	bx	lr
 80153d2:	bf00      	nop
 80153d4:	24001cf0 	.word	0x24001cf0

080153d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b084      	sub	sp, #16
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80153e0:	f7ff f9c0 	bl	8014764 <xTaskGetTickCount>
 80153e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80153e6:	4b0b      	ldr	r3, [pc, #44]	; (8015414 <prvSampleTimeNow+0x3c>)
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	68fa      	ldr	r2, [r7, #12]
 80153ec:	429a      	cmp	r2, r3
 80153ee:	d205      	bcs.n	80153fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80153f0:	f000 f936 	bl	8015660 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2201      	movs	r2, #1
 80153f8:	601a      	str	r2, [r3, #0]
 80153fa:	e002      	b.n	8015402 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2200      	movs	r2, #0
 8015400:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015402:	4a04      	ldr	r2, [pc, #16]	; (8015414 <prvSampleTimeNow+0x3c>)
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015408:	68fb      	ldr	r3, [r7, #12]
}
 801540a:	4618      	mov	r0, r3
 801540c:	3710      	adds	r7, #16
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}
 8015412:	bf00      	nop
 8015414:	24001d00 	.word	0x24001d00

08015418 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b086      	sub	sp, #24
 801541c:	af00      	add	r7, sp, #0
 801541e:	60f8      	str	r0, [r7, #12]
 8015420:	60b9      	str	r1, [r7, #8]
 8015422:	607a      	str	r2, [r7, #4]
 8015424:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015426:	2300      	movs	r3, #0
 8015428:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	68ba      	ldr	r2, [r7, #8]
 801542e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	68fa      	ldr	r2, [r7, #12]
 8015434:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015436:	68ba      	ldr	r2, [r7, #8]
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	429a      	cmp	r2, r3
 801543c:	d812      	bhi.n	8015464 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801543e:	687a      	ldr	r2, [r7, #4]
 8015440:	683b      	ldr	r3, [r7, #0]
 8015442:	1ad2      	subs	r2, r2, r3
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	699b      	ldr	r3, [r3, #24]
 8015448:	429a      	cmp	r2, r3
 801544a:	d302      	bcc.n	8015452 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801544c:	2301      	movs	r3, #1
 801544e:	617b      	str	r3, [r7, #20]
 8015450:	e01b      	b.n	801548a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015452:	4b10      	ldr	r3, [pc, #64]	; (8015494 <prvInsertTimerInActiveList+0x7c>)
 8015454:	681a      	ldr	r2, [r3, #0]
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	3304      	adds	r3, #4
 801545a:	4619      	mov	r1, r3
 801545c:	4610      	mov	r0, r2
 801545e:	f7fd ff76 	bl	801334e <vListInsert>
 8015462:	e012      	b.n	801548a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015464:	687a      	ldr	r2, [r7, #4]
 8015466:	683b      	ldr	r3, [r7, #0]
 8015468:	429a      	cmp	r2, r3
 801546a:	d206      	bcs.n	801547a <prvInsertTimerInActiveList+0x62>
 801546c:	68ba      	ldr	r2, [r7, #8]
 801546e:	683b      	ldr	r3, [r7, #0]
 8015470:	429a      	cmp	r2, r3
 8015472:	d302      	bcc.n	801547a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015474:	2301      	movs	r3, #1
 8015476:	617b      	str	r3, [r7, #20]
 8015478:	e007      	b.n	801548a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801547a:	4b07      	ldr	r3, [pc, #28]	; (8015498 <prvInsertTimerInActiveList+0x80>)
 801547c:	681a      	ldr	r2, [r3, #0]
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	3304      	adds	r3, #4
 8015482:	4619      	mov	r1, r3
 8015484:	4610      	mov	r0, r2
 8015486:	f7fd ff62 	bl	801334e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801548a:	697b      	ldr	r3, [r7, #20]
}
 801548c:	4618      	mov	r0, r3
 801548e:	3718      	adds	r7, #24
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}
 8015494:	24001cf4 	.word	0x24001cf4
 8015498:	24001cf0 	.word	0x24001cf0

0801549c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b08e      	sub	sp, #56	; 0x38
 80154a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80154a2:	e0ca      	b.n	801563a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	da18      	bge.n	80154dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80154aa:	1d3b      	adds	r3, r7, #4
 80154ac:	3304      	adds	r3, #4
 80154ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80154b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d10a      	bne.n	80154cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80154b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154ba:	f383 8811 	msr	BASEPRI, r3
 80154be:	f3bf 8f6f 	isb	sy
 80154c2:	f3bf 8f4f 	dsb	sy
 80154c6:	61fb      	str	r3, [r7, #28]
}
 80154c8:	bf00      	nop
 80154ca:	e7fe      	b.n	80154ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80154cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80154d2:	6850      	ldr	r0, [r2, #4]
 80154d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80154d6:	6892      	ldr	r2, [r2, #8]
 80154d8:	4611      	mov	r1, r2
 80154da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	f2c0 80aa 	blt.w	8015638 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80154e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154ea:	695b      	ldr	r3, [r3, #20]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d004      	beq.n	80154fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80154f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154f2:	3304      	adds	r3, #4
 80154f4:	4618      	mov	r0, r3
 80154f6:	f7fd ff63 	bl	80133c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80154fa:	463b      	mov	r3, r7
 80154fc:	4618      	mov	r0, r3
 80154fe:	f7ff ff6b 	bl	80153d8 <prvSampleTimeNow>
 8015502:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	2b09      	cmp	r3, #9
 8015508:	f200 8097 	bhi.w	801563a <prvProcessReceivedCommands+0x19e>
 801550c:	a201      	add	r2, pc, #4	; (adr r2, 8015514 <prvProcessReceivedCommands+0x78>)
 801550e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015512:	bf00      	nop
 8015514:	0801553d 	.word	0x0801553d
 8015518:	0801553d 	.word	0x0801553d
 801551c:	0801553d 	.word	0x0801553d
 8015520:	080155b1 	.word	0x080155b1
 8015524:	080155c5 	.word	0x080155c5
 8015528:	0801560f 	.word	0x0801560f
 801552c:	0801553d 	.word	0x0801553d
 8015530:	0801553d 	.word	0x0801553d
 8015534:	080155b1 	.word	0x080155b1
 8015538:	080155c5 	.word	0x080155c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801553c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801553e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015542:	f043 0301 	orr.w	r3, r3, #1
 8015546:	b2da      	uxtb	r2, r3
 8015548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801554a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801554e:	68ba      	ldr	r2, [r7, #8]
 8015550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015552:	699b      	ldr	r3, [r3, #24]
 8015554:	18d1      	adds	r1, r2, r3
 8015556:	68bb      	ldr	r3, [r7, #8]
 8015558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801555a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801555c:	f7ff ff5c 	bl	8015418 <prvInsertTimerInActiveList>
 8015560:	4603      	mov	r3, r0
 8015562:	2b00      	cmp	r3, #0
 8015564:	d069      	beq.n	801563a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015568:	6a1b      	ldr	r3, [r3, #32]
 801556a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801556c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015574:	f003 0304 	and.w	r3, r3, #4
 8015578:	2b00      	cmp	r3, #0
 801557a:	d05e      	beq.n	801563a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801557c:	68ba      	ldr	r2, [r7, #8]
 801557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015580:	699b      	ldr	r3, [r3, #24]
 8015582:	441a      	add	r2, r3
 8015584:	2300      	movs	r3, #0
 8015586:	9300      	str	r3, [sp, #0]
 8015588:	2300      	movs	r3, #0
 801558a:	2100      	movs	r1, #0
 801558c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801558e:	f7ff fe05 	bl	801519c <xTimerGenericCommand>
 8015592:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015594:	6a3b      	ldr	r3, [r7, #32]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d14f      	bne.n	801563a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801559e:	f383 8811 	msr	BASEPRI, r3
 80155a2:	f3bf 8f6f 	isb	sy
 80155a6:	f3bf 8f4f 	dsb	sy
 80155aa:	61bb      	str	r3, [r7, #24]
}
 80155ac:	bf00      	nop
 80155ae:	e7fe      	b.n	80155ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80155b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80155b6:	f023 0301 	bic.w	r3, r3, #1
 80155ba:	b2da      	uxtb	r2, r3
 80155bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80155c2:	e03a      	b.n	801563a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80155c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80155ca:	f043 0301 	orr.w	r3, r3, #1
 80155ce:	b2da      	uxtb	r2, r3
 80155d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80155d6:	68ba      	ldr	r2, [r7, #8]
 80155d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80155dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155de:	699b      	ldr	r3, [r3, #24]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d10a      	bne.n	80155fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80155e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155e8:	f383 8811 	msr	BASEPRI, r3
 80155ec:	f3bf 8f6f 	isb	sy
 80155f0:	f3bf 8f4f 	dsb	sy
 80155f4:	617b      	str	r3, [r7, #20]
}
 80155f6:	bf00      	nop
 80155f8:	e7fe      	b.n	80155f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80155fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155fc:	699a      	ldr	r2, [r3, #24]
 80155fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015600:	18d1      	adds	r1, r2, r3
 8015602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015608:	f7ff ff06 	bl	8015418 <prvInsertTimerInActiveList>
					break;
 801560c:	e015      	b.n	801563a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015614:	f003 0302 	and.w	r3, r3, #2
 8015618:	2b00      	cmp	r3, #0
 801561a:	d103      	bne.n	8015624 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801561c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801561e:	f000 fbff 	bl	8015e20 <vPortFree>
 8015622:	e00a      	b.n	801563a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801562a:	f023 0301 	bic.w	r3, r3, #1
 801562e:	b2da      	uxtb	r2, r3
 8015630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015636:	e000      	b.n	801563a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015638:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801563a:	4b08      	ldr	r3, [pc, #32]	; (801565c <prvProcessReceivedCommands+0x1c0>)
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	1d39      	adds	r1, r7, #4
 8015640:	2200      	movs	r2, #0
 8015642:	4618      	mov	r0, r3
 8015644:	f7fe f9be 	bl	80139c4 <xQueueReceive>
 8015648:	4603      	mov	r3, r0
 801564a:	2b00      	cmp	r3, #0
 801564c:	f47f af2a 	bne.w	80154a4 <prvProcessReceivedCommands+0x8>
	}
}
 8015650:	bf00      	nop
 8015652:	bf00      	nop
 8015654:	3730      	adds	r7, #48	; 0x30
 8015656:	46bd      	mov	sp, r7
 8015658:	bd80      	pop	{r7, pc}
 801565a:	bf00      	nop
 801565c:	24001cf8 	.word	0x24001cf8

08015660 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b088      	sub	sp, #32
 8015664:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015666:	e048      	b.n	80156fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015668:	4b2d      	ldr	r3, [pc, #180]	; (8015720 <prvSwitchTimerLists+0xc0>)
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	68db      	ldr	r3, [r3, #12]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015672:	4b2b      	ldr	r3, [pc, #172]	; (8015720 <prvSwitchTimerLists+0xc0>)
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	68db      	ldr	r3, [r3, #12]
 8015678:	68db      	ldr	r3, [r3, #12]
 801567a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	3304      	adds	r3, #4
 8015680:	4618      	mov	r0, r3
 8015682:	f7fd fe9d 	bl	80133c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	6a1b      	ldr	r3, [r3, #32]
 801568a:	68f8      	ldr	r0, [r7, #12]
 801568c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015694:	f003 0304 	and.w	r3, r3, #4
 8015698:	2b00      	cmp	r3, #0
 801569a:	d02e      	beq.n	80156fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	699b      	ldr	r3, [r3, #24]
 80156a0:	693a      	ldr	r2, [r7, #16]
 80156a2:	4413      	add	r3, r2
 80156a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80156a6:	68ba      	ldr	r2, [r7, #8]
 80156a8:	693b      	ldr	r3, [r7, #16]
 80156aa:	429a      	cmp	r2, r3
 80156ac:	d90e      	bls.n	80156cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	68ba      	ldr	r2, [r7, #8]
 80156b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	68fa      	ldr	r2, [r7, #12]
 80156b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80156ba:	4b19      	ldr	r3, [pc, #100]	; (8015720 <prvSwitchTimerLists+0xc0>)
 80156bc:	681a      	ldr	r2, [r3, #0]
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	3304      	adds	r3, #4
 80156c2:	4619      	mov	r1, r3
 80156c4:	4610      	mov	r0, r2
 80156c6:	f7fd fe42 	bl	801334e <vListInsert>
 80156ca:	e016      	b.n	80156fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80156cc:	2300      	movs	r3, #0
 80156ce:	9300      	str	r3, [sp, #0]
 80156d0:	2300      	movs	r3, #0
 80156d2:	693a      	ldr	r2, [r7, #16]
 80156d4:	2100      	movs	r1, #0
 80156d6:	68f8      	ldr	r0, [r7, #12]
 80156d8:	f7ff fd60 	bl	801519c <xTimerGenericCommand>
 80156dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d10a      	bne.n	80156fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80156e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156e8:	f383 8811 	msr	BASEPRI, r3
 80156ec:	f3bf 8f6f 	isb	sy
 80156f0:	f3bf 8f4f 	dsb	sy
 80156f4:	603b      	str	r3, [r7, #0]
}
 80156f6:	bf00      	nop
 80156f8:	e7fe      	b.n	80156f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80156fa:	4b09      	ldr	r3, [pc, #36]	; (8015720 <prvSwitchTimerLists+0xc0>)
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d1b1      	bne.n	8015668 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015704:	4b06      	ldr	r3, [pc, #24]	; (8015720 <prvSwitchTimerLists+0xc0>)
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801570a:	4b06      	ldr	r3, [pc, #24]	; (8015724 <prvSwitchTimerLists+0xc4>)
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	4a04      	ldr	r2, [pc, #16]	; (8015720 <prvSwitchTimerLists+0xc0>)
 8015710:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015712:	4a04      	ldr	r2, [pc, #16]	; (8015724 <prvSwitchTimerLists+0xc4>)
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	6013      	str	r3, [r2, #0]
}
 8015718:	bf00      	nop
 801571a:	3718      	adds	r7, #24
 801571c:	46bd      	mov	sp, r7
 801571e:	bd80      	pop	{r7, pc}
 8015720:	24001cf0 	.word	0x24001cf0
 8015724:	24001cf4 	.word	0x24001cf4

08015728 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b082      	sub	sp, #8
 801572c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801572e:	f000 f989 	bl	8015a44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015732:	4b15      	ldr	r3, [pc, #84]	; (8015788 <prvCheckForValidListAndQueue+0x60>)
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d120      	bne.n	801577c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801573a:	4814      	ldr	r0, [pc, #80]	; (801578c <prvCheckForValidListAndQueue+0x64>)
 801573c:	f7fd fdb6 	bl	80132ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015740:	4813      	ldr	r0, [pc, #76]	; (8015790 <prvCheckForValidListAndQueue+0x68>)
 8015742:	f7fd fdb3 	bl	80132ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015746:	4b13      	ldr	r3, [pc, #76]	; (8015794 <prvCheckForValidListAndQueue+0x6c>)
 8015748:	4a10      	ldr	r2, [pc, #64]	; (801578c <prvCheckForValidListAndQueue+0x64>)
 801574a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801574c:	4b12      	ldr	r3, [pc, #72]	; (8015798 <prvCheckForValidListAndQueue+0x70>)
 801574e:	4a10      	ldr	r2, [pc, #64]	; (8015790 <prvCheckForValidListAndQueue+0x68>)
 8015750:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015752:	2300      	movs	r3, #0
 8015754:	9300      	str	r3, [sp, #0]
 8015756:	4b11      	ldr	r3, [pc, #68]	; (801579c <prvCheckForValidListAndQueue+0x74>)
 8015758:	4a11      	ldr	r2, [pc, #68]	; (80157a0 <prvCheckForValidListAndQueue+0x78>)
 801575a:	2110      	movs	r1, #16
 801575c:	200a      	movs	r0, #10
 801575e:	f7fd fec1 	bl	80134e4 <xQueueGenericCreateStatic>
 8015762:	4603      	mov	r3, r0
 8015764:	4a08      	ldr	r2, [pc, #32]	; (8015788 <prvCheckForValidListAndQueue+0x60>)
 8015766:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015768:	4b07      	ldr	r3, [pc, #28]	; (8015788 <prvCheckForValidListAndQueue+0x60>)
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d005      	beq.n	801577c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015770:	4b05      	ldr	r3, [pc, #20]	; (8015788 <prvCheckForValidListAndQueue+0x60>)
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	490b      	ldr	r1, [pc, #44]	; (80157a4 <prvCheckForValidListAndQueue+0x7c>)
 8015776:	4618      	mov	r0, r3
 8015778:	f7fe fb94 	bl	8013ea4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801577c:	f000 f992 	bl	8015aa4 <vPortExitCritical>
}
 8015780:	bf00      	nop
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}
 8015786:	bf00      	nop
 8015788:	24001cf8 	.word	0x24001cf8
 801578c:	24001cc8 	.word	0x24001cc8
 8015790:	24001cdc 	.word	0x24001cdc
 8015794:	24001cf0 	.word	0x24001cf0
 8015798:	24001cf4 	.word	0x24001cf4
 801579c:	24001da4 	.word	0x24001da4
 80157a0:	24001d04 	.word	0x24001d04
 80157a4:	08016d7c 	.word	0x08016d7c

080157a8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b08a      	sub	sp, #40	; 0x28
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	60f8      	str	r0, [r7, #12]
 80157b0:	60b9      	str	r1, [r7, #8]
 80157b2:	607a      	str	r2, [r7, #4]
 80157b4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80157b6:	f06f 0301 	mvn.w	r3, #1
 80157ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80157c8:	4b06      	ldr	r3, [pc, #24]	; (80157e4 <xTimerPendFunctionCallFromISR+0x3c>)
 80157ca:	6818      	ldr	r0, [r3, #0]
 80157cc:	f107 0114 	add.w	r1, r7, #20
 80157d0:	2300      	movs	r3, #0
 80157d2:	683a      	ldr	r2, [r7, #0]
 80157d4:	f7fe f85a 	bl	801388c <xQueueGenericSendFromISR>
 80157d8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80157da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80157dc:	4618      	mov	r0, r3
 80157de:	3728      	adds	r7, #40	; 0x28
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}
 80157e4:	24001cf8 	.word	0x24001cf8

080157e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80157e8:	b480      	push	{r7}
 80157ea:	b085      	sub	sp, #20
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	60f8      	str	r0, [r7, #12]
 80157f0:	60b9      	str	r1, [r7, #8]
 80157f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	3b04      	subs	r3, #4
 80157f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	3b04      	subs	r3, #4
 8015806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	f023 0201 	bic.w	r2, r3, #1
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	3b04      	subs	r3, #4
 8015816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015818:	4a0c      	ldr	r2, [pc, #48]	; (801584c <pxPortInitialiseStack+0x64>)
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	3b14      	subs	r3, #20
 8015822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015824:	687a      	ldr	r2, [r7, #4]
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	3b04      	subs	r3, #4
 801582e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	f06f 0202 	mvn.w	r2, #2
 8015836:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	3b20      	subs	r3, #32
 801583c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801583e:	68fb      	ldr	r3, [r7, #12]
}
 8015840:	4618      	mov	r0, r3
 8015842:	3714      	adds	r7, #20
 8015844:	46bd      	mov	sp, r7
 8015846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584a:	4770      	bx	lr
 801584c:	08015851 	.word	0x08015851

08015850 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015850:	b480      	push	{r7}
 8015852:	b085      	sub	sp, #20
 8015854:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015856:	2300      	movs	r3, #0
 8015858:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801585a:	4b12      	ldr	r3, [pc, #72]	; (80158a4 <prvTaskExitError+0x54>)
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015862:	d00a      	beq.n	801587a <prvTaskExitError+0x2a>
	__asm volatile
 8015864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015868:	f383 8811 	msr	BASEPRI, r3
 801586c:	f3bf 8f6f 	isb	sy
 8015870:	f3bf 8f4f 	dsb	sy
 8015874:	60fb      	str	r3, [r7, #12]
}
 8015876:	bf00      	nop
 8015878:	e7fe      	b.n	8015878 <prvTaskExitError+0x28>
	__asm volatile
 801587a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801587e:	f383 8811 	msr	BASEPRI, r3
 8015882:	f3bf 8f6f 	isb	sy
 8015886:	f3bf 8f4f 	dsb	sy
 801588a:	60bb      	str	r3, [r7, #8]
}
 801588c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801588e:	bf00      	nop
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d0fc      	beq.n	8015890 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015896:	bf00      	nop
 8015898:	bf00      	nop
 801589a:	3714      	adds	r7, #20
 801589c:	46bd      	mov	sp, r7
 801589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a2:	4770      	bx	lr
 80158a4:	240000a0 	.word	0x240000a0
	...

080158b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80158b0:	4b07      	ldr	r3, [pc, #28]	; (80158d0 <pxCurrentTCBConst2>)
 80158b2:	6819      	ldr	r1, [r3, #0]
 80158b4:	6808      	ldr	r0, [r1, #0]
 80158b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158ba:	f380 8809 	msr	PSP, r0
 80158be:	f3bf 8f6f 	isb	sy
 80158c2:	f04f 0000 	mov.w	r0, #0
 80158c6:	f380 8811 	msr	BASEPRI, r0
 80158ca:	4770      	bx	lr
 80158cc:	f3af 8000 	nop.w

080158d0 <pxCurrentTCBConst2>:
 80158d0:	240017c8 	.word	0x240017c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80158d4:	bf00      	nop
 80158d6:	bf00      	nop

080158d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80158d8:	4808      	ldr	r0, [pc, #32]	; (80158fc <prvPortStartFirstTask+0x24>)
 80158da:	6800      	ldr	r0, [r0, #0]
 80158dc:	6800      	ldr	r0, [r0, #0]
 80158de:	f380 8808 	msr	MSP, r0
 80158e2:	f04f 0000 	mov.w	r0, #0
 80158e6:	f380 8814 	msr	CONTROL, r0
 80158ea:	b662      	cpsie	i
 80158ec:	b661      	cpsie	f
 80158ee:	f3bf 8f4f 	dsb	sy
 80158f2:	f3bf 8f6f 	isb	sy
 80158f6:	df00      	svc	0
 80158f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80158fa:	bf00      	nop
 80158fc:	e000ed08 	.word	0xe000ed08

08015900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b086      	sub	sp, #24
 8015904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015906:	4b46      	ldr	r3, [pc, #280]	; (8015a20 <xPortStartScheduler+0x120>)
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	4a46      	ldr	r2, [pc, #280]	; (8015a24 <xPortStartScheduler+0x124>)
 801590c:	4293      	cmp	r3, r2
 801590e:	d10a      	bne.n	8015926 <xPortStartScheduler+0x26>
	__asm volatile
 8015910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015914:	f383 8811 	msr	BASEPRI, r3
 8015918:	f3bf 8f6f 	isb	sy
 801591c:	f3bf 8f4f 	dsb	sy
 8015920:	613b      	str	r3, [r7, #16]
}
 8015922:	bf00      	nop
 8015924:	e7fe      	b.n	8015924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015926:	4b3e      	ldr	r3, [pc, #248]	; (8015a20 <xPortStartScheduler+0x120>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	4a3f      	ldr	r2, [pc, #252]	; (8015a28 <xPortStartScheduler+0x128>)
 801592c:	4293      	cmp	r3, r2
 801592e:	d10a      	bne.n	8015946 <xPortStartScheduler+0x46>
	__asm volatile
 8015930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015934:	f383 8811 	msr	BASEPRI, r3
 8015938:	f3bf 8f6f 	isb	sy
 801593c:	f3bf 8f4f 	dsb	sy
 8015940:	60fb      	str	r3, [r7, #12]
}
 8015942:	bf00      	nop
 8015944:	e7fe      	b.n	8015944 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015946:	4b39      	ldr	r3, [pc, #228]	; (8015a2c <xPortStartScheduler+0x12c>)
 8015948:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801594a:	697b      	ldr	r3, [r7, #20]
 801594c:	781b      	ldrb	r3, [r3, #0]
 801594e:	b2db      	uxtb	r3, r3
 8015950:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	22ff      	movs	r2, #255	; 0xff
 8015956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015958:	697b      	ldr	r3, [r7, #20]
 801595a:	781b      	ldrb	r3, [r3, #0]
 801595c:	b2db      	uxtb	r3, r3
 801595e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015960:	78fb      	ldrb	r3, [r7, #3]
 8015962:	b2db      	uxtb	r3, r3
 8015964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015968:	b2da      	uxtb	r2, r3
 801596a:	4b31      	ldr	r3, [pc, #196]	; (8015a30 <xPortStartScheduler+0x130>)
 801596c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801596e:	4b31      	ldr	r3, [pc, #196]	; (8015a34 <xPortStartScheduler+0x134>)
 8015970:	2207      	movs	r2, #7
 8015972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015974:	e009      	b.n	801598a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015976:	4b2f      	ldr	r3, [pc, #188]	; (8015a34 <xPortStartScheduler+0x134>)
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	3b01      	subs	r3, #1
 801597c:	4a2d      	ldr	r2, [pc, #180]	; (8015a34 <xPortStartScheduler+0x134>)
 801597e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015980:	78fb      	ldrb	r3, [r7, #3]
 8015982:	b2db      	uxtb	r3, r3
 8015984:	005b      	lsls	r3, r3, #1
 8015986:	b2db      	uxtb	r3, r3
 8015988:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801598a:	78fb      	ldrb	r3, [r7, #3]
 801598c:	b2db      	uxtb	r3, r3
 801598e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015992:	2b80      	cmp	r3, #128	; 0x80
 8015994:	d0ef      	beq.n	8015976 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015996:	4b27      	ldr	r3, [pc, #156]	; (8015a34 <xPortStartScheduler+0x134>)
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	f1c3 0307 	rsb	r3, r3, #7
 801599e:	2b04      	cmp	r3, #4
 80159a0:	d00a      	beq.n	80159b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80159a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159a6:	f383 8811 	msr	BASEPRI, r3
 80159aa:	f3bf 8f6f 	isb	sy
 80159ae:	f3bf 8f4f 	dsb	sy
 80159b2:	60bb      	str	r3, [r7, #8]
}
 80159b4:	bf00      	nop
 80159b6:	e7fe      	b.n	80159b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80159b8:	4b1e      	ldr	r3, [pc, #120]	; (8015a34 <xPortStartScheduler+0x134>)
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	021b      	lsls	r3, r3, #8
 80159be:	4a1d      	ldr	r2, [pc, #116]	; (8015a34 <xPortStartScheduler+0x134>)
 80159c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80159c2:	4b1c      	ldr	r3, [pc, #112]	; (8015a34 <xPortStartScheduler+0x134>)
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80159ca:	4a1a      	ldr	r2, [pc, #104]	; (8015a34 <xPortStartScheduler+0x134>)
 80159cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	b2da      	uxtb	r2, r3
 80159d2:	697b      	ldr	r3, [r7, #20]
 80159d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80159d6:	4b18      	ldr	r3, [pc, #96]	; (8015a38 <xPortStartScheduler+0x138>)
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	4a17      	ldr	r2, [pc, #92]	; (8015a38 <xPortStartScheduler+0x138>)
 80159dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80159e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80159e2:	4b15      	ldr	r3, [pc, #84]	; (8015a38 <xPortStartScheduler+0x138>)
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	4a14      	ldr	r2, [pc, #80]	; (8015a38 <xPortStartScheduler+0x138>)
 80159e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80159ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80159ee:	f000 f8dd 	bl	8015bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80159f2:	4b12      	ldr	r3, [pc, #72]	; (8015a3c <xPortStartScheduler+0x13c>)
 80159f4:	2200      	movs	r2, #0
 80159f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80159f8:	f000 f8fc 	bl	8015bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80159fc:	4b10      	ldr	r3, [pc, #64]	; (8015a40 <xPortStartScheduler+0x140>)
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	4a0f      	ldr	r2, [pc, #60]	; (8015a40 <xPortStartScheduler+0x140>)
 8015a02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015a06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015a08:	f7ff ff66 	bl	80158d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015a0c:	f7fe ff7c 	bl	8014908 <vTaskSwitchContext>
	prvTaskExitError();
 8015a10:	f7ff ff1e 	bl	8015850 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015a14:	2300      	movs	r3, #0
}
 8015a16:	4618      	mov	r0, r3
 8015a18:	3718      	adds	r7, #24
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bd80      	pop	{r7, pc}
 8015a1e:	bf00      	nop
 8015a20:	e000ed00 	.word	0xe000ed00
 8015a24:	410fc271 	.word	0x410fc271
 8015a28:	410fc270 	.word	0x410fc270
 8015a2c:	e000e400 	.word	0xe000e400
 8015a30:	24001df4 	.word	0x24001df4
 8015a34:	24001df8 	.word	0x24001df8
 8015a38:	e000ed20 	.word	0xe000ed20
 8015a3c:	240000a0 	.word	0x240000a0
 8015a40:	e000ef34 	.word	0xe000ef34

08015a44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015a44:	b480      	push	{r7}
 8015a46:	b083      	sub	sp, #12
 8015a48:	af00      	add	r7, sp, #0
	__asm volatile
 8015a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a4e:	f383 8811 	msr	BASEPRI, r3
 8015a52:	f3bf 8f6f 	isb	sy
 8015a56:	f3bf 8f4f 	dsb	sy
 8015a5a:	607b      	str	r3, [r7, #4]
}
 8015a5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015a5e:	4b0f      	ldr	r3, [pc, #60]	; (8015a9c <vPortEnterCritical+0x58>)
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	3301      	adds	r3, #1
 8015a64:	4a0d      	ldr	r2, [pc, #52]	; (8015a9c <vPortEnterCritical+0x58>)
 8015a66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015a68:	4b0c      	ldr	r3, [pc, #48]	; (8015a9c <vPortEnterCritical+0x58>)
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	2b01      	cmp	r3, #1
 8015a6e:	d10f      	bne.n	8015a90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015a70:	4b0b      	ldr	r3, [pc, #44]	; (8015aa0 <vPortEnterCritical+0x5c>)
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	b2db      	uxtb	r3, r3
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d00a      	beq.n	8015a90 <vPortEnterCritical+0x4c>
	__asm volatile
 8015a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a7e:	f383 8811 	msr	BASEPRI, r3
 8015a82:	f3bf 8f6f 	isb	sy
 8015a86:	f3bf 8f4f 	dsb	sy
 8015a8a:	603b      	str	r3, [r7, #0]
}
 8015a8c:	bf00      	nop
 8015a8e:	e7fe      	b.n	8015a8e <vPortEnterCritical+0x4a>
	}
}
 8015a90:	bf00      	nop
 8015a92:	370c      	adds	r7, #12
 8015a94:	46bd      	mov	sp, r7
 8015a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9a:	4770      	bx	lr
 8015a9c:	240000a0 	.word	0x240000a0
 8015aa0:	e000ed04 	.word	0xe000ed04

08015aa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015aa4:	b480      	push	{r7}
 8015aa6:	b083      	sub	sp, #12
 8015aa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015aaa:	4b12      	ldr	r3, [pc, #72]	; (8015af4 <vPortExitCritical+0x50>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d10a      	bne.n	8015ac8 <vPortExitCritical+0x24>
	__asm volatile
 8015ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ab6:	f383 8811 	msr	BASEPRI, r3
 8015aba:	f3bf 8f6f 	isb	sy
 8015abe:	f3bf 8f4f 	dsb	sy
 8015ac2:	607b      	str	r3, [r7, #4]
}
 8015ac4:	bf00      	nop
 8015ac6:	e7fe      	b.n	8015ac6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015ac8:	4b0a      	ldr	r3, [pc, #40]	; (8015af4 <vPortExitCritical+0x50>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	3b01      	subs	r3, #1
 8015ace:	4a09      	ldr	r2, [pc, #36]	; (8015af4 <vPortExitCritical+0x50>)
 8015ad0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015ad2:	4b08      	ldr	r3, [pc, #32]	; (8015af4 <vPortExitCritical+0x50>)
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d105      	bne.n	8015ae6 <vPortExitCritical+0x42>
 8015ada:	2300      	movs	r3, #0
 8015adc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015ade:	683b      	ldr	r3, [r7, #0]
 8015ae0:	f383 8811 	msr	BASEPRI, r3
}
 8015ae4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015ae6:	bf00      	nop
 8015ae8:	370c      	adds	r7, #12
 8015aea:	46bd      	mov	sp, r7
 8015aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af0:	4770      	bx	lr
 8015af2:	bf00      	nop
 8015af4:	240000a0 	.word	0x240000a0
	...

08015b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015b00:	f3ef 8009 	mrs	r0, PSP
 8015b04:	f3bf 8f6f 	isb	sy
 8015b08:	4b15      	ldr	r3, [pc, #84]	; (8015b60 <pxCurrentTCBConst>)
 8015b0a:	681a      	ldr	r2, [r3, #0]
 8015b0c:	f01e 0f10 	tst.w	lr, #16
 8015b10:	bf08      	it	eq
 8015b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b1a:	6010      	str	r0, [r2, #0]
 8015b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015b24:	f380 8811 	msr	BASEPRI, r0
 8015b28:	f3bf 8f4f 	dsb	sy
 8015b2c:	f3bf 8f6f 	isb	sy
 8015b30:	f7fe feea 	bl	8014908 <vTaskSwitchContext>
 8015b34:	f04f 0000 	mov.w	r0, #0
 8015b38:	f380 8811 	msr	BASEPRI, r0
 8015b3c:	bc09      	pop	{r0, r3}
 8015b3e:	6819      	ldr	r1, [r3, #0]
 8015b40:	6808      	ldr	r0, [r1, #0]
 8015b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b46:	f01e 0f10 	tst.w	lr, #16
 8015b4a:	bf08      	it	eq
 8015b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015b50:	f380 8809 	msr	PSP, r0
 8015b54:	f3bf 8f6f 	isb	sy
 8015b58:	4770      	bx	lr
 8015b5a:	bf00      	nop
 8015b5c:	f3af 8000 	nop.w

08015b60 <pxCurrentTCBConst>:
 8015b60:	240017c8 	.word	0x240017c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015b64:	bf00      	nop
 8015b66:	bf00      	nop

08015b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b082      	sub	sp, #8
 8015b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8015b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b72:	f383 8811 	msr	BASEPRI, r3
 8015b76:	f3bf 8f6f 	isb	sy
 8015b7a:	f3bf 8f4f 	dsb	sy
 8015b7e:	607b      	str	r3, [r7, #4]
}
 8015b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015b82:	f7fe fdff 	bl	8014784 <xTaskIncrementTick>
 8015b86:	4603      	mov	r3, r0
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d003      	beq.n	8015b94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015b8c:	4b06      	ldr	r3, [pc, #24]	; (8015ba8 <xPortSysTickHandler+0x40>)
 8015b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b92:	601a      	str	r2, [r3, #0]
 8015b94:	2300      	movs	r3, #0
 8015b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015b98:	683b      	ldr	r3, [r7, #0]
 8015b9a:	f383 8811 	msr	BASEPRI, r3
}
 8015b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015ba0:	bf00      	nop
 8015ba2:	3708      	adds	r7, #8
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd80      	pop	{r7, pc}
 8015ba8:	e000ed04 	.word	0xe000ed04

08015bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015bac:	b480      	push	{r7}
 8015bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015bb0:	4b0b      	ldr	r3, [pc, #44]	; (8015be0 <vPortSetupTimerInterrupt+0x34>)
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015bb6:	4b0b      	ldr	r3, [pc, #44]	; (8015be4 <vPortSetupTimerInterrupt+0x38>)
 8015bb8:	2200      	movs	r2, #0
 8015bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015bbc:	4b0a      	ldr	r3, [pc, #40]	; (8015be8 <vPortSetupTimerInterrupt+0x3c>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	4a0a      	ldr	r2, [pc, #40]	; (8015bec <vPortSetupTimerInterrupt+0x40>)
 8015bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8015bc6:	099b      	lsrs	r3, r3, #6
 8015bc8:	4a09      	ldr	r2, [pc, #36]	; (8015bf0 <vPortSetupTimerInterrupt+0x44>)
 8015bca:	3b01      	subs	r3, #1
 8015bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015bce:	4b04      	ldr	r3, [pc, #16]	; (8015be0 <vPortSetupTimerInterrupt+0x34>)
 8015bd0:	2207      	movs	r2, #7
 8015bd2:	601a      	str	r2, [r3, #0]
}
 8015bd4:	bf00      	nop
 8015bd6:	46bd      	mov	sp, r7
 8015bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bdc:	4770      	bx	lr
 8015bde:	bf00      	nop
 8015be0:	e000e010 	.word	0xe000e010
 8015be4:	e000e018 	.word	0xe000e018
 8015be8:	24000090 	.word	0x24000090
 8015bec:	10624dd3 	.word	0x10624dd3
 8015bf0:	e000e014 	.word	0xe000e014

08015bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015c04 <vPortEnableVFP+0x10>
 8015bf8:	6801      	ldr	r1, [r0, #0]
 8015bfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015bfe:	6001      	str	r1, [r0, #0]
 8015c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015c02:	bf00      	nop
 8015c04:	e000ed88 	.word	0xe000ed88

08015c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015c08:	b480      	push	{r7}
 8015c0a:	b085      	sub	sp, #20
 8015c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015c0e:	f3ef 8305 	mrs	r3, IPSR
 8015c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	2b0f      	cmp	r3, #15
 8015c18:	d914      	bls.n	8015c44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015c1a:	4a17      	ldr	r2, [pc, #92]	; (8015c78 <vPortValidateInterruptPriority+0x70>)
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	4413      	add	r3, r2
 8015c20:	781b      	ldrb	r3, [r3, #0]
 8015c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015c24:	4b15      	ldr	r3, [pc, #84]	; (8015c7c <vPortValidateInterruptPriority+0x74>)
 8015c26:	781b      	ldrb	r3, [r3, #0]
 8015c28:	7afa      	ldrb	r2, [r7, #11]
 8015c2a:	429a      	cmp	r2, r3
 8015c2c:	d20a      	bcs.n	8015c44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c32:	f383 8811 	msr	BASEPRI, r3
 8015c36:	f3bf 8f6f 	isb	sy
 8015c3a:	f3bf 8f4f 	dsb	sy
 8015c3e:	607b      	str	r3, [r7, #4]
}
 8015c40:	bf00      	nop
 8015c42:	e7fe      	b.n	8015c42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015c44:	4b0e      	ldr	r3, [pc, #56]	; (8015c80 <vPortValidateInterruptPriority+0x78>)
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015c4c:	4b0d      	ldr	r3, [pc, #52]	; (8015c84 <vPortValidateInterruptPriority+0x7c>)
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	429a      	cmp	r2, r3
 8015c52:	d90a      	bls.n	8015c6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c58:	f383 8811 	msr	BASEPRI, r3
 8015c5c:	f3bf 8f6f 	isb	sy
 8015c60:	f3bf 8f4f 	dsb	sy
 8015c64:	603b      	str	r3, [r7, #0]
}
 8015c66:	bf00      	nop
 8015c68:	e7fe      	b.n	8015c68 <vPortValidateInterruptPriority+0x60>
	}
 8015c6a:	bf00      	nop
 8015c6c:	3714      	adds	r7, #20
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c74:	4770      	bx	lr
 8015c76:	bf00      	nop
 8015c78:	e000e3f0 	.word	0xe000e3f0
 8015c7c:	24001df4 	.word	0x24001df4
 8015c80:	e000ed0c 	.word	0xe000ed0c
 8015c84:	24001df8 	.word	0x24001df8

08015c88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b08a      	sub	sp, #40	; 0x28
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015c90:	2300      	movs	r3, #0
 8015c92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015c94:	f7fe fcba 	bl	801460c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015c98:	4b5b      	ldr	r3, [pc, #364]	; (8015e08 <pvPortMalloc+0x180>)
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d101      	bne.n	8015ca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015ca0:	f000 f920 	bl	8015ee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015ca4:	4b59      	ldr	r3, [pc, #356]	; (8015e0c <pvPortMalloc+0x184>)
 8015ca6:	681a      	ldr	r2, [r3, #0]
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	4013      	ands	r3, r2
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	f040 8093 	bne.w	8015dd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d01d      	beq.n	8015cf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015cb8:	2208      	movs	r2, #8
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	4413      	add	r3, r2
 8015cbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	f003 0307 	and.w	r3, r3, #7
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d014      	beq.n	8015cf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f023 0307 	bic.w	r3, r3, #7
 8015cd0:	3308      	adds	r3, #8
 8015cd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	f003 0307 	and.w	r3, r3, #7
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d00a      	beq.n	8015cf4 <pvPortMalloc+0x6c>
	__asm volatile
 8015cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ce2:	f383 8811 	msr	BASEPRI, r3
 8015ce6:	f3bf 8f6f 	isb	sy
 8015cea:	f3bf 8f4f 	dsb	sy
 8015cee:	617b      	str	r3, [r7, #20]
}
 8015cf0:	bf00      	nop
 8015cf2:	e7fe      	b.n	8015cf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d06e      	beq.n	8015dd8 <pvPortMalloc+0x150>
 8015cfa:	4b45      	ldr	r3, [pc, #276]	; (8015e10 <pvPortMalloc+0x188>)
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	687a      	ldr	r2, [r7, #4]
 8015d00:	429a      	cmp	r2, r3
 8015d02:	d869      	bhi.n	8015dd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015d04:	4b43      	ldr	r3, [pc, #268]	; (8015e14 <pvPortMalloc+0x18c>)
 8015d06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015d08:	4b42      	ldr	r3, [pc, #264]	; (8015e14 <pvPortMalloc+0x18c>)
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015d0e:	e004      	b.n	8015d1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d1c:	685b      	ldr	r3, [r3, #4]
 8015d1e:	687a      	ldr	r2, [r7, #4]
 8015d20:	429a      	cmp	r2, r3
 8015d22:	d903      	bls.n	8015d2c <pvPortMalloc+0xa4>
 8015d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d1f1      	bne.n	8015d10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015d2c:	4b36      	ldr	r3, [pc, #216]	; (8015e08 <pvPortMalloc+0x180>)
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d32:	429a      	cmp	r2, r3
 8015d34:	d050      	beq.n	8015dd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015d36:	6a3b      	ldr	r3, [r7, #32]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	2208      	movs	r2, #8
 8015d3c:	4413      	add	r3, r2
 8015d3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d42:	681a      	ldr	r2, [r3, #0]
 8015d44:	6a3b      	ldr	r3, [r7, #32]
 8015d46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d4a:	685a      	ldr	r2, [r3, #4]
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	1ad2      	subs	r2, r2, r3
 8015d50:	2308      	movs	r3, #8
 8015d52:	005b      	lsls	r3, r3, #1
 8015d54:	429a      	cmp	r2, r3
 8015d56:	d91f      	bls.n	8015d98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	4413      	add	r3, r2
 8015d5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015d60:	69bb      	ldr	r3, [r7, #24]
 8015d62:	f003 0307 	and.w	r3, r3, #7
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d00a      	beq.n	8015d80 <pvPortMalloc+0xf8>
	__asm volatile
 8015d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d6e:	f383 8811 	msr	BASEPRI, r3
 8015d72:	f3bf 8f6f 	isb	sy
 8015d76:	f3bf 8f4f 	dsb	sy
 8015d7a:	613b      	str	r3, [r7, #16]
}
 8015d7c:	bf00      	nop
 8015d7e:	e7fe      	b.n	8015d7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d82:	685a      	ldr	r2, [r3, #4]
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	1ad2      	subs	r2, r2, r3
 8015d88:	69bb      	ldr	r3, [r7, #24]
 8015d8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d8e:	687a      	ldr	r2, [r7, #4]
 8015d90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015d92:	69b8      	ldr	r0, [r7, #24]
 8015d94:	f000 f908 	bl	8015fa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015d98:	4b1d      	ldr	r3, [pc, #116]	; (8015e10 <pvPortMalloc+0x188>)
 8015d9a:	681a      	ldr	r2, [r3, #0]
 8015d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d9e:	685b      	ldr	r3, [r3, #4]
 8015da0:	1ad3      	subs	r3, r2, r3
 8015da2:	4a1b      	ldr	r2, [pc, #108]	; (8015e10 <pvPortMalloc+0x188>)
 8015da4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015da6:	4b1a      	ldr	r3, [pc, #104]	; (8015e10 <pvPortMalloc+0x188>)
 8015da8:	681a      	ldr	r2, [r3, #0]
 8015daa:	4b1b      	ldr	r3, [pc, #108]	; (8015e18 <pvPortMalloc+0x190>)
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	429a      	cmp	r2, r3
 8015db0:	d203      	bcs.n	8015dba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015db2:	4b17      	ldr	r3, [pc, #92]	; (8015e10 <pvPortMalloc+0x188>)
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	4a18      	ldr	r2, [pc, #96]	; (8015e18 <pvPortMalloc+0x190>)
 8015db8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dbc:	685a      	ldr	r2, [r3, #4]
 8015dbe:	4b13      	ldr	r3, [pc, #76]	; (8015e0c <pvPortMalloc+0x184>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	431a      	orrs	r2, r3
 8015dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dca:	2200      	movs	r2, #0
 8015dcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015dce:	4b13      	ldr	r3, [pc, #76]	; (8015e1c <pvPortMalloc+0x194>)
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	3301      	adds	r3, #1
 8015dd4:	4a11      	ldr	r2, [pc, #68]	; (8015e1c <pvPortMalloc+0x194>)
 8015dd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015dd8:	f7fe fc26 	bl	8014628 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015ddc:	69fb      	ldr	r3, [r7, #28]
 8015dde:	f003 0307 	and.w	r3, r3, #7
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d00a      	beq.n	8015dfc <pvPortMalloc+0x174>
	__asm volatile
 8015de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dea:	f383 8811 	msr	BASEPRI, r3
 8015dee:	f3bf 8f6f 	isb	sy
 8015df2:	f3bf 8f4f 	dsb	sy
 8015df6:	60fb      	str	r3, [r7, #12]
}
 8015df8:	bf00      	nop
 8015dfa:	e7fe      	b.n	8015dfa <pvPortMalloc+0x172>
	return pvReturn;
 8015dfc:	69fb      	ldr	r3, [r7, #28]
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	3728      	adds	r7, #40	; 0x28
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}
 8015e06:	bf00      	nop
 8015e08:	24005a04 	.word	0x24005a04
 8015e0c:	24005a18 	.word	0x24005a18
 8015e10:	24005a08 	.word	0x24005a08
 8015e14:	240059fc 	.word	0x240059fc
 8015e18:	24005a0c 	.word	0x24005a0c
 8015e1c:	24005a10 	.word	0x24005a10

08015e20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b086      	sub	sp, #24
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d04d      	beq.n	8015ece <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015e32:	2308      	movs	r3, #8
 8015e34:	425b      	negs	r3, r3
 8015e36:	697a      	ldr	r2, [r7, #20]
 8015e38:	4413      	add	r3, r2
 8015e3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015e3c:	697b      	ldr	r3, [r7, #20]
 8015e3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015e40:	693b      	ldr	r3, [r7, #16]
 8015e42:	685a      	ldr	r2, [r3, #4]
 8015e44:	4b24      	ldr	r3, [pc, #144]	; (8015ed8 <vPortFree+0xb8>)
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	4013      	ands	r3, r2
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d10a      	bne.n	8015e64 <vPortFree+0x44>
	__asm volatile
 8015e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e52:	f383 8811 	msr	BASEPRI, r3
 8015e56:	f3bf 8f6f 	isb	sy
 8015e5a:	f3bf 8f4f 	dsb	sy
 8015e5e:	60fb      	str	r3, [r7, #12]
}
 8015e60:	bf00      	nop
 8015e62:	e7fe      	b.n	8015e62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015e64:	693b      	ldr	r3, [r7, #16]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d00a      	beq.n	8015e82 <vPortFree+0x62>
	__asm volatile
 8015e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e70:	f383 8811 	msr	BASEPRI, r3
 8015e74:	f3bf 8f6f 	isb	sy
 8015e78:	f3bf 8f4f 	dsb	sy
 8015e7c:	60bb      	str	r3, [r7, #8]
}
 8015e7e:	bf00      	nop
 8015e80:	e7fe      	b.n	8015e80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015e82:	693b      	ldr	r3, [r7, #16]
 8015e84:	685a      	ldr	r2, [r3, #4]
 8015e86:	4b14      	ldr	r3, [pc, #80]	; (8015ed8 <vPortFree+0xb8>)
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	4013      	ands	r3, r2
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d01e      	beq.n	8015ece <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015e90:	693b      	ldr	r3, [r7, #16]
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d11a      	bne.n	8015ece <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015e98:	693b      	ldr	r3, [r7, #16]
 8015e9a:	685a      	ldr	r2, [r3, #4]
 8015e9c:	4b0e      	ldr	r3, [pc, #56]	; (8015ed8 <vPortFree+0xb8>)
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	43db      	mvns	r3, r3
 8015ea2:	401a      	ands	r2, r3
 8015ea4:	693b      	ldr	r3, [r7, #16]
 8015ea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015ea8:	f7fe fbb0 	bl	801460c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015eac:	693b      	ldr	r3, [r7, #16]
 8015eae:	685a      	ldr	r2, [r3, #4]
 8015eb0:	4b0a      	ldr	r3, [pc, #40]	; (8015edc <vPortFree+0xbc>)
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	4413      	add	r3, r2
 8015eb6:	4a09      	ldr	r2, [pc, #36]	; (8015edc <vPortFree+0xbc>)
 8015eb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015eba:	6938      	ldr	r0, [r7, #16]
 8015ebc:	f000 f874 	bl	8015fa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015ec0:	4b07      	ldr	r3, [pc, #28]	; (8015ee0 <vPortFree+0xc0>)
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	3301      	adds	r3, #1
 8015ec6:	4a06      	ldr	r2, [pc, #24]	; (8015ee0 <vPortFree+0xc0>)
 8015ec8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015eca:	f7fe fbad 	bl	8014628 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015ece:	bf00      	nop
 8015ed0:	3718      	adds	r7, #24
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bd80      	pop	{r7, pc}
 8015ed6:	bf00      	nop
 8015ed8:	24005a18 	.word	0x24005a18
 8015edc:	24005a08 	.word	0x24005a08
 8015ee0:	24005a14 	.word	0x24005a14

08015ee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015ee4:	b480      	push	{r7}
 8015ee6:	b085      	sub	sp, #20
 8015ee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015eea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8015eee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015ef0:	4b27      	ldr	r3, [pc, #156]	; (8015f90 <prvHeapInit+0xac>)
 8015ef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	f003 0307 	and.w	r3, r3, #7
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d00c      	beq.n	8015f18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	3307      	adds	r3, #7
 8015f02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	f023 0307 	bic.w	r3, r3, #7
 8015f0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015f0c:	68ba      	ldr	r2, [r7, #8]
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	1ad3      	subs	r3, r2, r3
 8015f12:	4a1f      	ldr	r2, [pc, #124]	; (8015f90 <prvHeapInit+0xac>)
 8015f14:	4413      	add	r3, r2
 8015f16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015f1c:	4a1d      	ldr	r2, [pc, #116]	; (8015f94 <prvHeapInit+0xb0>)
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015f22:	4b1c      	ldr	r3, [pc, #112]	; (8015f94 <prvHeapInit+0xb0>)
 8015f24:	2200      	movs	r2, #0
 8015f26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	68ba      	ldr	r2, [r7, #8]
 8015f2c:	4413      	add	r3, r2
 8015f2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015f30:	2208      	movs	r2, #8
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	1a9b      	subs	r3, r3, r2
 8015f36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	f023 0307 	bic.w	r3, r3, #7
 8015f3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	4a15      	ldr	r2, [pc, #84]	; (8015f98 <prvHeapInit+0xb4>)
 8015f44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015f46:	4b14      	ldr	r3, [pc, #80]	; (8015f98 <prvHeapInit+0xb4>)
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	2200      	movs	r2, #0
 8015f4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015f4e:	4b12      	ldr	r3, [pc, #72]	; (8015f98 <prvHeapInit+0xb4>)
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	2200      	movs	r2, #0
 8015f54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015f5a:	683b      	ldr	r3, [r7, #0]
 8015f5c:	68fa      	ldr	r2, [r7, #12]
 8015f5e:	1ad2      	subs	r2, r2, r3
 8015f60:	683b      	ldr	r3, [r7, #0]
 8015f62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015f64:	4b0c      	ldr	r3, [pc, #48]	; (8015f98 <prvHeapInit+0xb4>)
 8015f66:	681a      	ldr	r2, [r3, #0]
 8015f68:	683b      	ldr	r3, [r7, #0]
 8015f6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015f6c:	683b      	ldr	r3, [r7, #0]
 8015f6e:	685b      	ldr	r3, [r3, #4]
 8015f70:	4a0a      	ldr	r2, [pc, #40]	; (8015f9c <prvHeapInit+0xb8>)
 8015f72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015f74:	683b      	ldr	r3, [r7, #0]
 8015f76:	685b      	ldr	r3, [r3, #4]
 8015f78:	4a09      	ldr	r2, [pc, #36]	; (8015fa0 <prvHeapInit+0xbc>)
 8015f7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015f7c:	4b09      	ldr	r3, [pc, #36]	; (8015fa4 <prvHeapInit+0xc0>)
 8015f7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015f82:	601a      	str	r2, [r3, #0]
}
 8015f84:	bf00      	nop
 8015f86:	3714      	adds	r7, #20
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8e:	4770      	bx	lr
 8015f90:	24001dfc 	.word	0x24001dfc
 8015f94:	240059fc 	.word	0x240059fc
 8015f98:	24005a04 	.word	0x24005a04
 8015f9c:	24005a0c 	.word	0x24005a0c
 8015fa0:	24005a08 	.word	0x24005a08
 8015fa4:	24005a18 	.word	0x24005a18

08015fa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015fa8:	b480      	push	{r7}
 8015faa:	b085      	sub	sp, #20
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015fb0:	4b28      	ldr	r3, [pc, #160]	; (8016054 <prvInsertBlockIntoFreeList+0xac>)
 8015fb2:	60fb      	str	r3, [r7, #12]
 8015fb4:	e002      	b.n	8015fbc <prvInsertBlockIntoFreeList+0x14>
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	60fb      	str	r3, [r7, #12]
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	687a      	ldr	r2, [r7, #4]
 8015fc2:	429a      	cmp	r2, r3
 8015fc4:	d8f7      	bhi.n	8015fb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	685b      	ldr	r3, [r3, #4]
 8015fce:	68ba      	ldr	r2, [r7, #8]
 8015fd0:	4413      	add	r3, r2
 8015fd2:	687a      	ldr	r2, [r7, #4]
 8015fd4:	429a      	cmp	r2, r3
 8015fd6:	d108      	bne.n	8015fea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	685a      	ldr	r2, [r3, #4]
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	685b      	ldr	r3, [r3, #4]
 8015fe0:	441a      	add	r2, r3
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	685b      	ldr	r3, [r3, #4]
 8015ff2:	68ba      	ldr	r2, [r7, #8]
 8015ff4:	441a      	add	r2, r3
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	429a      	cmp	r2, r3
 8015ffc:	d118      	bne.n	8016030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	681a      	ldr	r2, [r3, #0]
 8016002:	4b15      	ldr	r3, [pc, #84]	; (8016058 <prvInsertBlockIntoFreeList+0xb0>)
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	429a      	cmp	r2, r3
 8016008:	d00d      	beq.n	8016026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	685a      	ldr	r2, [r3, #4]
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	685b      	ldr	r3, [r3, #4]
 8016014:	441a      	add	r2, r3
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	681a      	ldr	r2, [r3, #0]
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	601a      	str	r2, [r3, #0]
 8016024:	e008      	b.n	8016038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016026:	4b0c      	ldr	r3, [pc, #48]	; (8016058 <prvInsertBlockIntoFreeList+0xb0>)
 8016028:	681a      	ldr	r2, [r3, #0]
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	601a      	str	r2, [r3, #0]
 801602e:	e003      	b.n	8016038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	681a      	ldr	r2, [r3, #0]
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016038:	68fa      	ldr	r2, [r7, #12]
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	429a      	cmp	r2, r3
 801603e:	d002      	beq.n	8016046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	687a      	ldr	r2, [r7, #4]
 8016044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016046:	bf00      	nop
 8016048:	3714      	adds	r7, #20
 801604a:	46bd      	mov	sp, r7
 801604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016050:	4770      	bx	lr
 8016052:	bf00      	nop
 8016054:	240059fc 	.word	0x240059fc
 8016058:	24005a04 	.word	0x24005a04

0801605c <__errno>:
 801605c:	4b01      	ldr	r3, [pc, #4]	; (8016064 <__errno+0x8>)
 801605e:	6818      	ldr	r0, [r3, #0]
 8016060:	4770      	bx	lr
 8016062:	bf00      	nop
 8016064:	240000a4 	.word	0x240000a4

08016068 <__libc_init_array>:
 8016068:	b570      	push	{r4, r5, r6, lr}
 801606a:	4d0d      	ldr	r5, [pc, #52]	; (80160a0 <__libc_init_array+0x38>)
 801606c:	4c0d      	ldr	r4, [pc, #52]	; (80160a4 <__libc_init_array+0x3c>)
 801606e:	1b64      	subs	r4, r4, r5
 8016070:	10a4      	asrs	r4, r4, #2
 8016072:	2600      	movs	r6, #0
 8016074:	42a6      	cmp	r6, r4
 8016076:	d109      	bne.n	801608c <__libc_init_array+0x24>
 8016078:	4d0b      	ldr	r5, [pc, #44]	; (80160a8 <__libc_init_array+0x40>)
 801607a:	4c0c      	ldr	r4, [pc, #48]	; (80160ac <__libc_init_array+0x44>)
 801607c:	f000 fd3c 	bl	8016af8 <_init>
 8016080:	1b64      	subs	r4, r4, r5
 8016082:	10a4      	asrs	r4, r4, #2
 8016084:	2600      	movs	r6, #0
 8016086:	42a6      	cmp	r6, r4
 8016088:	d105      	bne.n	8016096 <__libc_init_array+0x2e>
 801608a:	bd70      	pop	{r4, r5, r6, pc}
 801608c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016090:	4798      	blx	r3
 8016092:	3601      	adds	r6, #1
 8016094:	e7ee      	b.n	8016074 <__libc_init_array+0xc>
 8016096:	f855 3b04 	ldr.w	r3, [r5], #4
 801609a:	4798      	blx	r3
 801609c:	3601      	adds	r6, #1
 801609e:	e7f2      	b.n	8016086 <__libc_init_array+0x1e>
 80160a0:	08016f2c 	.word	0x08016f2c
 80160a4:	08016f2c 	.word	0x08016f2c
 80160a8:	08016f2c 	.word	0x08016f2c
 80160ac:	08016f30 	.word	0x08016f30

080160b0 <malloc>:
 80160b0:	4b02      	ldr	r3, [pc, #8]	; (80160bc <malloc+0xc>)
 80160b2:	4601      	mov	r1, r0
 80160b4:	6818      	ldr	r0, [r3, #0]
 80160b6:	f000 b88d 	b.w	80161d4 <_malloc_r>
 80160ba:	bf00      	nop
 80160bc:	240000a4 	.word	0x240000a4

080160c0 <free>:
 80160c0:	4b02      	ldr	r3, [pc, #8]	; (80160cc <free+0xc>)
 80160c2:	4601      	mov	r1, r0
 80160c4:	6818      	ldr	r0, [r3, #0]
 80160c6:	f000 b819 	b.w	80160fc <_free_r>
 80160ca:	bf00      	nop
 80160cc:	240000a4 	.word	0x240000a4

080160d0 <memcpy>:
 80160d0:	440a      	add	r2, r1
 80160d2:	4291      	cmp	r1, r2
 80160d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80160d8:	d100      	bne.n	80160dc <memcpy+0xc>
 80160da:	4770      	bx	lr
 80160dc:	b510      	push	{r4, lr}
 80160de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80160e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80160e6:	4291      	cmp	r1, r2
 80160e8:	d1f9      	bne.n	80160de <memcpy+0xe>
 80160ea:	bd10      	pop	{r4, pc}

080160ec <memset>:
 80160ec:	4402      	add	r2, r0
 80160ee:	4603      	mov	r3, r0
 80160f0:	4293      	cmp	r3, r2
 80160f2:	d100      	bne.n	80160f6 <memset+0xa>
 80160f4:	4770      	bx	lr
 80160f6:	f803 1b01 	strb.w	r1, [r3], #1
 80160fa:	e7f9      	b.n	80160f0 <memset+0x4>

080160fc <_free_r>:
 80160fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80160fe:	2900      	cmp	r1, #0
 8016100:	d044      	beq.n	801618c <_free_r+0x90>
 8016102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016106:	9001      	str	r0, [sp, #4]
 8016108:	2b00      	cmp	r3, #0
 801610a:	f1a1 0404 	sub.w	r4, r1, #4
 801610e:	bfb8      	it	lt
 8016110:	18e4      	addlt	r4, r4, r3
 8016112:	f000 fc39 	bl	8016988 <__malloc_lock>
 8016116:	4a1e      	ldr	r2, [pc, #120]	; (8016190 <_free_r+0x94>)
 8016118:	9801      	ldr	r0, [sp, #4]
 801611a:	6813      	ldr	r3, [r2, #0]
 801611c:	b933      	cbnz	r3, 801612c <_free_r+0x30>
 801611e:	6063      	str	r3, [r4, #4]
 8016120:	6014      	str	r4, [r2, #0]
 8016122:	b003      	add	sp, #12
 8016124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016128:	f000 bc34 	b.w	8016994 <__malloc_unlock>
 801612c:	42a3      	cmp	r3, r4
 801612e:	d908      	bls.n	8016142 <_free_r+0x46>
 8016130:	6825      	ldr	r5, [r4, #0]
 8016132:	1961      	adds	r1, r4, r5
 8016134:	428b      	cmp	r3, r1
 8016136:	bf01      	itttt	eq
 8016138:	6819      	ldreq	r1, [r3, #0]
 801613a:	685b      	ldreq	r3, [r3, #4]
 801613c:	1949      	addeq	r1, r1, r5
 801613e:	6021      	streq	r1, [r4, #0]
 8016140:	e7ed      	b.n	801611e <_free_r+0x22>
 8016142:	461a      	mov	r2, r3
 8016144:	685b      	ldr	r3, [r3, #4]
 8016146:	b10b      	cbz	r3, 801614c <_free_r+0x50>
 8016148:	42a3      	cmp	r3, r4
 801614a:	d9fa      	bls.n	8016142 <_free_r+0x46>
 801614c:	6811      	ldr	r1, [r2, #0]
 801614e:	1855      	adds	r5, r2, r1
 8016150:	42a5      	cmp	r5, r4
 8016152:	d10b      	bne.n	801616c <_free_r+0x70>
 8016154:	6824      	ldr	r4, [r4, #0]
 8016156:	4421      	add	r1, r4
 8016158:	1854      	adds	r4, r2, r1
 801615a:	42a3      	cmp	r3, r4
 801615c:	6011      	str	r1, [r2, #0]
 801615e:	d1e0      	bne.n	8016122 <_free_r+0x26>
 8016160:	681c      	ldr	r4, [r3, #0]
 8016162:	685b      	ldr	r3, [r3, #4]
 8016164:	6053      	str	r3, [r2, #4]
 8016166:	4421      	add	r1, r4
 8016168:	6011      	str	r1, [r2, #0]
 801616a:	e7da      	b.n	8016122 <_free_r+0x26>
 801616c:	d902      	bls.n	8016174 <_free_r+0x78>
 801616e:	230c      	movs	r3, #12
 8016170:	6003      	str	r3, [r0, #0]
 8016172:	e7d6      	b.n	8016122 <_free_r+0x26>
 8016174:	6825      	ldr	r5, [r4, #0]
 8016176:	1961      	adds	r1, r4, r5
 8016178:	428b      	cmp	r3, r1
 801617a:	bf04      	itt	eq
 801617c:	6819      	ldreq	r1, [r3, #0]
 801617e:	685b      	ldreq	r3, [r3, #4]
 8016180:	6063      	str	r3, [r4, #4]
 8016182:	bf04      	itt	eq
 8016184:	1949      	addeq	r1, r1, r5
 8016186:	6021      	streq	r1, [r4, #0]
 8016188:	6054      	str	r4, [r2, #4]
 801618a:	e7ca      	b.n	8016122 <_free_r+0x26>
 801618c:	b003      	add	sp, #12
 801618e:	bd30      	pop	{r4, r5, pc}
 8016190:	24005a1c 	.word	0x24005a1c

08016194 <sbrk_aligned>:
 8016194:	b570      	push	{r4, r5, r6, lr}
 8016196:	4e0e      	ldr	r6, [pc, #56]	; (80161d0 <sbrk_aligned+0x3c>)
 8016198:	460c      	mov	r4, r1
 801619a:	6831      	ldr	r1, [r6, #0]
 801619c:	4605      	mov	r5, r0
 801619e:	b911      	cbnz	r1, 80161a6 <sbrk_aligned+0x12>
 80161a0:	f000 f902 	bl	80163a8 <_sbrk_r>
 80161a4:	6030      	str	r0, [r6, #0]
 80161a6:	4621      	mov	r1, r4
 80161a8:	4628      	mov	r0, r5
 80161aa:	f000 f8fd 	bl	80163a8 <_sbrk_r>
 80161ae:	1c43      	adds	r3, r0, #1
 80161b0:	d00a      	beq.n	80161c8 <sbrk_aligned+0x34>
 80161b2:	1cc4      	adds	r4, r0, #3
 80161b4:	f024 0403 	bic.w	r4, r4, #3
 80161b8:	42a0      	cmp	r0, r4
 80161ba:	d007      	beq.n	80161cc <sbrk_aligned+0x38>
 80161bc:	1a21      	subs	r1, r4, r0
 80161be:	4628      	mov	r0, r5
 80161c0:	f000 f8f2 	bl	80163a8 <_sbrk_r>
 80161c4:	3001      	adds	r0, #1
 80161c6:	d101      	bne.n	80161cc <sbrk_aligned+0x38>
 80161c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80161cc:	4620      	mov	r0, r4
 80161ce:	bd70      	pop	{r4, r5, r6, pc}
 80161d0:	24005a20 	.word	0x24005a20

080161d4 <_malloc_r>:
 80161d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161d8:	1ccd      	adds	r5, r1, #3
 80161da:	f025 0503 	bic.w	r5, r5, #3
 80161de:	3508      	adds	r5, #8
 80161e0:	2d0c      	cmp	r5, #12
 80161e2:	bf38      	it	cc
 80161e4:	250c      	movcc	r5, #12
 80161e6:	2d00      	cmp	r5, #0
 80161e8:	4607      	mov	r7, r0
 80161ea:	db01      	blt.n	80161f0 <_malloc_r+0x1c>
 80161ec:	42a9      	cmp	r1, r5
 80161ee:	d905      	bls.n	80161fc <_malloc_r+0x28>
 80161f0:	230c      	movs	r3, #12
 80161f2:	603b      	str	r3, [r7, #0]
 80161f4:	2600      	movs	r6, #0
 80161f6:	4630      	mov	r0, r6
 80161f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161fc:	4e2e      	ldr	r6, [pc, #184]	; (80162b8 <_malloc_r+0xe4>)
 80161fe:	f000 fbc3 	bl	8016988 <__malloc_lock>
 8016202:	6833      	ldr	r3, [r6, #0]
 8016204:	461c      	mov	r4, r3
 8016206:	bb34      	cbnz	r4, 8016256 <_malloc_r+0x82>
 8016208:	4629      	mov	r1, r5
 801620a:	4638      	mov	r0, r7
 801620c:	f7ff ffc2 	bl	8016194 <sbrk_aligned>
 8016210:	1c43      	adds	r3, r0, #1
 8016212:	4604      	mov	r4, r0
 8016214:	d14d      	bne.n	80162b2 <_malloc_r+0xde>
 8016216:	6834      	ldr	r4, [r6, #0]
 8016218:	4626      	mov	r6, r4
 801621a:	2e00      	cmp	r6, #0
 801621c:	d140      	bne.n	80162a0 <_malloc_r+0xcc>
 801621e:	6823      	ldr	r3, [r4, #0]
 8016220:	4631      	mov	r1, r6
 8016222:	4638      	mov	r0, r7
 8016224:	eb04 0803 	add.w	r8, r4, r3
 8016228:	f000 f8be 	bl	80163a8 <_sbrk_r>
 801622c:	4580      	cmp	r8, r0
 801622e:	d13a      	bne.n	80162a6 <_malloc_r+0xd2>
 8016230:	6821      	ldr	r1, [r4, #0]
 8016232:	3503      	adds	r5, #3
 8016234:	1a6d      	subs	r5, r5, r1
 8016236:	f025 0503 	bic.w	r5, r5, #3
 801623a:	3508      	adds	r5, #8
 801623c:	2d0c      	cmp	r5, #12
 801623e:	bf38      	it	cc
 8016240:	250c      	movcc	r5, #12
 8016242:	4629      	mov	r1, r5
 8016244:	4638      	mov	r0, r7
 8016246:	f7ff ffa5 	bl	8016194 <sbrk_aligned>
 801624a:	3001      	adds	r0, #1
 801624c:	d02b      	beq.n	80162a6 <_malloc_r+0xd2>
 801624e:	6823      	ldr	r3, [r4, #0]
 8016250:	442b      	add	r3, r5
 8016252:	6023      	str	r3, [r4, #0]
 8016254:	e00e      	b.n	8016274 <_malloc_r+0xa0>
 8016256:	6822      	ldr	r2, [r4, #0]
 8016258:	1b52      	subs	r2, r2, r5
 801625a:	d41e      	bmi.n	801629a <_malloc_r+0xc6>
 801625c:	2a0b      	cmp	r2, #11
 801625e:	d916      	bls.n	801628e <_malloc_r+0xba>
 8016260:	1961      	adds	r1, r4, r5
 8016262:	42a3      	cmp	r3, r4
 8016264:	6025      	str	r5, [r4, #0]
 8016266:	bf18      	it	ne
 8016268:	6059      	strne	r1, [r3, #4]
 801626a:	6863      	ldr	r3, [r4, #4]
 801626c:	bf08      	it	eq
 801626e:	6031      	streq	r1, [r6, #0]
 8016270:	5162      	str	r2, [r4, r5]
 8016272:	604b      	str	r3, [r1, #4]
 8016274:	4638      	mov	r0, r7
 8016276:	f104 060b 	add.w	r6, r4, #11
 801627a:	f000 fb8b 	bl	8016994 <__malloc_unlock>
 801627e:	f026 0607 	bic.w	r6, r6, #7
 8016282:	1d23      	adds	r3, r4, #4
 8016284:	1af2      	subs	r2, r6, r3
 8016286:	d0b6      	beq.n	80161f6 <_malloc_r+0x22>
 8016288:	1b9b      	subs	r3, r3, r6
 801628a:	50a3      	str	r3, [r4, r2]
 801628c:	e7b3      	b.n	80161f6 <_malloc_r+0x22>
 801628e:	6862      	ldr	r2, [r4, #4]
 8016290:	42a3      	cmp	r3, r4
 8016292:	bf0c      	ite	eq
 8016294:	6032      	streq	r2, [r6, #0]
 8016296:	605a      	strne	r2, [r3, #4]
 8016298:	e7ec      	b.n	8016274 <_malloc_r+0xa0>
 801629a:	4623      	mov	r3, r4
 801629c:	6864      	ldr	r4, [r4, #4]
 801629e:	e7b2      	b.n	8016206 <_malloc_r+0x32>
 80162a0:	4634      	mov	r4, r6
 80162a2:	6876      	ldr	r6, [r6, #4]
 80162a4:	e7b9      	b.n	801621a <_malloc_r+0x46>
 80162a6:	230c      	movs	r3, #12
 80162a8:	603b      	str	r3, [r7, #0]
 80162aa:	4638      	mov	r0, r7
 80162ac:	f000 fb72 	bl	8016994 <__malloc_unlock>
 80162b0:	e7a1      	b.n	80161f6 <_malloc_r+0x22>
 80162b2:	6025      	str	r5, [r4, #0]
 80162b4:	e7de      	b.n	8016274 <_malloc_r+0xa0>
 80162b6:	bf00      	nop
 80162b8:	24005a1c 	.word	0x24005a1c

080162bc <_puts_r>:
 80162bc:	b570      	push	{r4, r5, r6, lr}
 80162be:	460e      	mov	r6, r1
 80162c0:	4605      	mov	r5, r0
 80162c2:	b118      	cbz	r0, 80162cc <_puts_r+0x10>
 80162c4:	6983      	ldr	r3, [r0, #24]
 80162c6:	b90b      	cbnz	r3, 80162cc <_puts_r+0x10>
 80162c8:	f000 fa58 	bl	801677c <__sinit>
 80162cc:	69ab      	ldr	r3, [r5, #24]
 80162ce:	68ac      	ldr	r4, [r5, #8]
 80162d0:	b913      	cbnz	r3, 80162d8 <_puts_r+0x1c>
 80162d2:	4628      	mov	r0, r5
 80162d4:	f000 fa52 	bl	801677c <__sinit>
 80162d8:	4b2c      	ldr	r3, [pc, #176]	; (801638c <_puts_r+0xd0>)
 80162da:	429c      	cmp	r4, r3
 80162dc:	d120      	bne.n	8016320 <_puts_r+0x64>
 80162de:	686c      	ldr	r4, [r5, #4]
 80162e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80162e2:	07db      	lsls	r3, r3, #31
 80162e4:	d405      	bmi.n	80162f2 <_puts_r+0x36>
 80162e6:	89a3      	ldrh	r3, [r4, #12]
 80162e8:	0598      	lsls	r0, r3, #22
 80162ea:	d402      	bmi.n	80162f2 <_puts_r+0x36>
 80162ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80162ee:	f000 fae3 	bl	80168b8 <__retarget_lock_acquire_recursive>
 80162f2:	89a3      	ldrh	r3, [r4, #12]
 80162f4:	0719      	lsls	r1, r3, #28
 80162f6:	d51d      	bpl.n	8016334 <_puts_r+0x78>
 80162f8:	6923      	ldr	r3, [r4, #16]
 80162fa:	b1db      	cbz	r3, 8016334 <_puts_r+0x78>
 80162fc:	3e01      	subs	r6, #1
 80162fe:	68a3      	ldr	r3, [r4, #8]
 8016300:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016304:	3b01      	subs	r3, #1
 8016306:	60a3      	str	r3, [r4, #8]
 8016308:	bb39      	cbnz	r1, 801635a <_puts_r+0x9e>
 801630a:	2b00      	cmp	r3, #0
 801630c:	da38      	bge.n	8016380 <_puts_r+0xc4>
 801630e:	4622      	mov	r2, r4
 8016310:	210a      	movs	r1, #10
 8016312:	4628      	mov	r0, r5
 8016314:	f000 f858 	bl	80163c8 <__swbuf_r>
 8016318:	3001      	adds	r0, #1
 801631a:	d011      	beq.n	8016340 <_puts_r+0x84>
 801631c:	250a      	movs	r5, #10
 801631e:	e011      	b.n	8016344 <_puts_r+0x88>
 8016320:	4b1b      	ldr	r3, [pc, #108]	; (8016390 <_puts_r+0xd4>)
 8016322:	429c      	cmp	r4, r3
 8016324:	d101      	bne.n	801632a <_puts_r+0x6e>
 8016326:	68ac      	ldr	r4, [r5, #8]
 8016328:	e7da      	b.n	80162e0 <_puts_r+0x24>
 801632a:	4b1a      	ldr	r3, [pc, #104]	; (8016394 <_puts_r+0xd8>)
 801632c:	429c      	cmp	r4, r3
 801632e:	bf08      	it	eq
 8016330:	68ec      	ldreq	r4, [r5, #12]
 8016332:	e7d5      	b.n	80162e0 <_puts_r+0x24>
 8016334:	4621      	mov	r1, r4
 8016336:	4628      	mov	r0, r5
 8016338:	f000 f898 	bl	801646c <__swsetup_r>
 801633c:	2800      	cmp	r0, #0
 801633e:	d0dd      	beq.n	80162fc <_puts_r+0x40>
 8016340:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016344:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016346:	07da      	lsls	r2, r3, #31
 8016348:	d405      	bmi.n	8016356 <_puts_r+0x9a>
 801634a:	89a3      	ldrh	r3, [r4, #12]
 801634c:	059b      	lsls	r3, r3, #22
 801634e:	d402      	bmi.n	8016356 <_puts_r+0x9a>
 8016350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016352:	f000 fab2 	bl	80168ba <__retarget_lock_release_recursive>
 8016356:	4628      	mov	r0, r5
 8016358:	bd70      	pop	{r4, r5, r6, pc}
 801635a:	2b00      	cmp	r3, #0
 801635c:	da04      	bge.n	8016368 <_puts_r+0xac>
 801635e:	69a2      	ldr	r2, [r4, #24]
 8016360:	429a      	cmp	r2, r3
 8016362:	dc06      	bgt.n	8016372 <_puts_r+0xb6>
 8016364:	290a      	cmp	r1, #10
 8016366:	d004      	beq.n	8016372 <_puts_r+0xb6>
 8016368:	6823      	ldr	r3, [r4, #0]
 801636a:	1c5a      	adds	r2, r3, #1
 801636c:	6022      	str	r2, [r4, #0]
 801636e:	7019      	strb	r1, [r3, #0]
 8016370:	e7c5      	b.n	80162fe <_puts_r+0x42>
 8016372:	4622      	mov	r2, r4
 8016374:	4628      	mov	r0, r5
 8016376:	f000 f827 	bl	80163c8 <__swbuf_r>
 801637a:	3001      	adds	r0, #1
 801637c:	d1bf      	bne.n	80162fe <_puts_r+0x42>
 801637e:	e7df      	b.n	8016340 <_puts_r+0x84>
 8016380:	6823      	ldr	r3, [r4, #0]
 8016382:	250a      	movs	r5, #10
 8016384:	1c5a      	adds	r2, r3, #1
 8016386:	6022      	str	r2, [r4, #0]
 8016388:	701d      	strb	r5, [r3, #0]
 801638a:	e7db      	b.n	8016344 <_puts_r+0x88>
 801638c:	08016ee4 	.word	0x08016ee4
 8016390:	08016f04 	.word	0x08016f04
 8016394:	08016ec4 	.word	0x08016ec4

08016398 <puts>:
 8016398:	4b02      	ldr	r3, [pc, #8]	; (80163a4 <puts+0xc>)
 801639a:	4601      	mov	r1, r0
 801639c:	6818      	ldr	r0, [r3, #0]
 801639e:	f7ff bf8d 	b.w	80162bc <_puts_r>
 80163a2:	bf00      	nop
 80163a4:	240000a4 	.word	0x240000a4

080163a8 <_sbrk_r>:
 80163a8:	b538      	push	{r3, r4, r5, lr}
 80163aa:	4d06      	ldr	r5, [pc, #24]	; (80163c4 <_sbrk_r+0x1c>)
 80163ac:	2300      	movs	r3, #0
 80163ae:	4604      	mov	r4, r0
 80163b0:	4608      	mov	r0, r1
 80163b2:	602b      	str	r3, [r5, #0]
 80163b4:	f7ed fa0a 	bl	80037cc <_sbrk>
 80163b8:	1c43      	adds	r3, r0, #1
 80163ba:	d102      	bne.n	80163c2 <_sbrk_r+0x1a>
 80163bc:	682b      	ldr	r3, [r5, #0]
 80163be:	b103      	cbz	r3, 80163c2 <_sbrk_r+0x1a>
 80163c0:	6023      	str	r3, [r4, #0]
 80163c2:	bd38      	pop	{r3, r4, r5, pc}
 80163c4:	24005a28 	.word	0x24005a28

080163c8 <__swbuf_r>:
 80163c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163ca:	460e      	mov	r6, r1
 80163cc:	4614      	mov	r4, r2
 80163ce:	4605      	mov	r5, r0
 80163d0:	b118      	cbz	r0, 80163da <__swbuf_r+0x12>
 80163d2:	6983      	ldr	r3, [r0, #24]
 80163d4:	b90b      	cbnz	r3, 80163da <__swbuf_r+0x12>
 80163d6:	f000 f9d1 	bl	801677c <__sinit>
 80163da:	4b21      	ldr	r3, [pc, #132]	; (8016460 <__swbuf_r+0x98>)
 80163dc:	429c      	cmp	r4, r3
 80163de:	d12b      	bne.n	8016438 <__swbuf_r+0x70>
 80163e0:	686c      	ldr	r4, [r5, #4]
 80163e2:	69a3      	ldr	r3, [r4, #24]
 80163e4:	60a3      	str	r3, [r4, #8]
 80163e6:	89a3      	ldrh	r3, [r4, #12]
 80163e8:	071a      	lsls	r2, r3, #28
 80163ea:	d52f      	bpl.n	801644c <__swbuf_r+0x84>
 80163ec:	6923      	ldr	r3, [r4, #16]
 80163ee:	b36b      	cbz	r3, 801644c <__swbuf_r+0x84>
 80163f0:	6923      	ldr	r3, [r4, #16]
 80163f2:	6820      	ldr	r0, [r4, #0]
 80163f4:	1ac0      	subs	r0, r0, r3
 80163f6:	6963      	ldr	r3, [r4, #20]
 80163f8:	b2f6      	uxtb	r6, r6
 80163fa:	4283      	cmp	r3, r0
 80163fc:	4637      	mov	r7, r6
 80163fe:	dc04      	bgt.n	801640a <__swbuf_r+0x42>
 8016400:	4621      	mov	r1, r4
 8016402:	4628      	mov	r0, r5
 8016404:	f000 f926 	bl	8016654 <_fflush_r>
 8016408:	bb30      	cbnz	r0, 8016458 <__swbuf_r+0x90>
 801640a:	68a3      	ldr	r3, [r4, #8]
 801640c:	3b01      	subs	r3, #1
 801640e:	60a3      	str	r3, [r4, #8]
 8016410:	6823      	ldr	r3, [r4, #0]
 8016412:	1c5a      	adds	r2, r3, #1
 8016414:	6022      	str	r2, [r4, #0]
 8016416:	701e      	strb	r6, [r3, #0]
 8016418:	6963      	ldr	r3, [r4, #20]
 801641a:	3001      	adds	r0, #1
 801641c:	4283      	cmp	r3, r0
 801641e:	d004      	beq.n	801642a <__swbuf_r+0x62>
 8016420:	89a3      	ldrh	r3, [r4, #12]
 8016422:	07db      	lsls	r3, r3, #31
 8016424:	d506      	bpl.n	8016434 <__swbuf_r+0x6c>
 8016426:	2e0a      	cmp	r6, #10
 8016428:	d104      	bne.n	8016434 <__swbuf_r+0x6c>
 801642a:	4621      	mov	r1, r4
 801642c:	4628      	mov	r0, r5
 801642e:	f000 f911 	bl	8016654 <_fflush_r>
 8016432:	b988      	cbnz	r0, 8016458 <__swbuf_r+0x90>
 8016434:	4638      	mov	r0, r7
 8016436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016438:	4b0a      	ldr	r3, [pc, #40]	; (8016464 <__swbuf_r+0x9c>)
 801643a:	429c      	cmp	r4, r3
 801643c:	d101      	bne.n	8016442 <__swbuf_r+0x7a>
 801643e:	68ac      	ldr	r4, [r5, #8]
 8016440:	e7cf      	b.n	80163e2 <__swbuf_r+0x1a>
 8016442:	4b09      	ldr	r3, [pc, #36]	; (8016468 <__swbuf_r+0xa0>)
 8016444:	429c      	cmp	r4, r3
 8016446:	bf08      	it	eq
 8016448:	68ec      	ldreq	r4, [r5, #12]
 801644a:	e7ca      	b.n	80163e2 <__swbuf_r+0x1a>
 801644c:	4621      	mov	r1, r4
 801644e:	4628      	mov	r0, r5
 8016450:	f000 f80c 	bl	801646c <__swsetup_r>
 8016454:	2800      	cmp	r0, #0
 8016456:	d0cb      	beq.n	80163f0 <__swbuf_r+0x28>
 8016458:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801645c:	e7ea      	b.n	8016434 <__swbuf_r+0x6c>
 801645e:	bf00      	nop
 8016460:	08016ee4 	.word	0x08016ee4
 8016464:	08016f04 	.word	0x08016f04
 8016468:	08016ec4 	.word	0x08016ec4

0801646c <__swsetup_r>:
 801646c:	4b32      	ldr	r3, [pc, #200]	; (8016538 <__swsetup_r+0xcc>)
 801646e:	b570      	push	{r4, r5, r6, lr}
 8016470:	681d      	ldr	r5, [r3, #0]
 8016472:	4606      	mov	r6, r0
 8016474:	460c      	mov	r4, r1
 8016476:	b125      	cbz	r5, 8016482 <__swsetup_r+0x16>
 8016478:	69ab      	ldr	r3, [r5, #24]
 801647a:	b913      	cbnz	r3, 8016482 <__swsetup_r+0x16>
 801647c:	4628      	mov	r0, r5
 801647e:	f000 f97d 	bl	801677c <__sinit>
 8016482:	4b2e      	ldr	r3, [pc, #184]	; (801653c <__swsetup_r+0xd0>)
 8016484:	429c      	cmp	r4, r3
 8016486:	d10f      	bne.n	80164a8 <__swsetup_r+0x3c>
 8016488:	686c      	ldr	r4, [r5, #4]
 801648a:	89a3      	ldrh	r3, [r4, #12]
 801648c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016490:	0719      	lsls	r1, r3, #28
 8016492:	d42c      	bmi.n	80164ee <__swsetup_r+0x82>
 8016494:	06dd      	lsls	r5, r3, #27
 8016496:	d411      	bmi.n	80164bc <__swsetup_r+0x50>
 8016498:	2309      	movs	r3, #9
 801649a:	6033      	str	r3, [r6, #0]
 801649c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80164a0:	81a3      	strh	r3, [r4, #12]
 80164a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80164a6:	e03e      	b.n	8016526 <__swsetup_r+0xba>
 80164a8:	4b25      	ldr	r3, [pc, #148]	; (8016540 <__swsetup_r+0xd4>)
 80164aa:	429c      	cmp	r4, r3
 80164ac:	d101      	bne.n	80164b2 <__swsetup_r+0x46>
 80164ae:	68ac      	ldr	r4, [r5, #8]
 80164b0:	e7eb      	b.n	801648a <__swsetup_r+0x1e>
 80164b2:	4b24      	ldr	r3, [pc, #144]	; (8016544 <__swsetup_r+0xd8>)
 80164b4:	429c      	cmp	r4, r3
 80164b6:	bf08      	it	eq
 80164b8:	68ec      	ldreq	r4, [r5, #12]
 80164ba:	e7e6      	b.n	801648a <__swsetup_r+0x1e>
 80164bc:	0758      	lsls	r0, r3, #29
 80164be:	d512      	bpl.n	80164e6 <__swsetup_r+0x7a>
 80164c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80164c2:	b141      	cbz	r1, 80164d6 <__swsetup_r+0x6a>
 80164c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80164c8:	4299      	cmp	r1, r3
 80164ca:	d002      	beq.n	80164d2 <__swsetup_r+0x66>
 80164cc:	4630      	mov	r0, r6
 80164ce:	f7ff fe15 	bl	80160fc <_free_r>
 80164d2:	2300      	movs	r3, #0
 80164d4:	6363      	str	r3, [r4, #52]	; 0x34
 80164d6:	89a3      	ldrh	r3, [r4, #12]
 80164d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80164dc:	81a3      	strh	r3, [r4, #12]
 80164de:	2300      	movs	r3, #0
 80164e0:	6063      	str	r3, [r4, #4]
 80164e2:	6923      	ldr	r3, [r4, #16]
 80164e4:	6023      	str	r3, [r4, #0]
 80164e6:	89a3      	ldrh	r3, [r4, #12]
 80164e8:	f043 0308 	orr.w	r3, r3, #8
 80164ec:	81a3      	strh	r3, [r4, #12]
 80164ee:	6923      	ldr	r3, [r4, #16]
 80164f0:	b94b      	cbnz	r3, 8016506 <__swsetup_r+0x9a>
 80164f2:	89a3      	ldrh	r3, [r4, #12]
 80164f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80164f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80164fc:	d003      	beq.n	8016506 <__swsetup_r+0x9a>
 80164fe:	4621      	mov	r1, r4
 8016500:	4630      	mov	r0, r6
 8016502:	f000 fa01 	bl	8016908 <__smakebuf_r>
 8016506:	89a0      	ldrh	r0, [r4, #12]
 8016508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801650c:	f010 0301 	ands.w	r3, r0, #1
 8016510:	d00a      	beq.n	8016528 <__swsetup_r+0xbc>
 8016512:	2300      	movs	r3, #0
 8016514:	60a3      	str	r3, [r4, #8]
 8016516:	6963      	ldr	r3, [r4, #20]
 8016518:	425b      	negs	r3, r3
 801651a:	61a3      	str	r3, [r4, #24]
 801651c:	6923      	ldr	r3, [r4, #16]
 801651e:	b943      	cbnz	r3, 8016532 <__swsetup_r+0xc6>
 8016520:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016524:	d1ba      	bne.n	801649c <__swsetup_r+0x30>
 8016526:	bd70      	pop	{r4, r5, r6, pc}
 8016528:	0781      	lsls	r1, r0, #30
 801652a:	bf58      	it	pl
 801652c:	6963      	ldrpl	r3, [r4, #20]
 801652e:	60a3      	str	r3, [r4, #8]
 8016530:	e7f4      	b.n	801651c <__swsetup_r+0xb0>
 8016532:	2000      	movs	r0, #0
 8016534:	e7f7      	b.n	8016526 <__swsetup_r+0xba>
 8016536:	bf00      	nop
 8016538:	240000a4 	.word	0x240000a4
 801653c:	08016ee4 	.word	0x08016ee4
 8016540:	08016f04 	.word	0x08016f04
 8016544:	08016ec4 	.word	0x08016ec4

08016548 <__sflush_r>:
 8016548:	898a      	ldrh	r2, [r1, #12]
 801654a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801654e:	4605      	mov	r5, r0
 8016550:	0710      	lsls	r0, r2, #28
 8016552:	460c      	mov	r4, r1
 8016554:	d458      	bmi.n	8016608 <__sflush_r+0xc0>
 8016556:	684b      	ldr	r3, [r1, #4]
 8016558:	2b00      	cmp	r3, #0
 801655a:	dc05      	bgt.n	8016568 <__sflush_r+0x20>
 801655c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801655e:	2b00      	cmp	r3, #0
 8016560:	dc02      	bgt.n	8016568 <__sflush_r+0x20>
 8016562:	2000      	movs	r0, #0
 8016564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801656a:	2e00      	cmp	r6, #0
 801656c:	d0f9      	beq.n	8016562 <__sflush_r+0x1a>
 801656e:	2300      	movs	r3, #0
 8016570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016574:	682f      	ldr	r7, [r5, #0]
 8016576:	602b      	str	r3, [r5, #0]
 8016578:	d032      	beq.n	80165e0 <__sflush_r+0x98>
 801657a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801657c:	89a3      	ldrh	r3, [r4, #12]
 801657e:	075a      	lsls	r2, r3, #29
 8016580:	d505      	bpl.n	801658e <__sflush_r+0x46>
 8016582:	6863      	ldr	r3, [r4, #4]
 8016584:	1ac0      	subs	r0, r0, r3
 8016586:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016588:	b10b      	cbz	r3, 801658e <__sflush_r+0x46>
 801658a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801658c:	1ac0      	subs	r0, r0, r3
 801658e:	2300      	movs	r3, #0
 8016590:	4602      	mov	r2, r0
 8016592:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016594:	6a21      	ldr	r1, [r4, #32]
 8016596:	4628      	mov	r0, r5
 8016598:	47b0      	blx	r6
 801659a:	1c43      	adds	r3, r0, #1
 801659c:	89a3      	ldrh	r3, [r4, #12]
 801659e:	d106      	bne.n	80165ae <__sflush_r+0x66>
 80165a0:	6829      	ldr	r1, [r5, #0]
 80165a2:	291d      	cmp	r1, #29
 80165a4:	d82c      	bhi.n	8016600 <__sflush_r+0xb8>
 80165a6:	4a2a      	ldr	r2, [pc, #168]	; (8016650 <__sflush_r+0x108>)
 80165a8:	40ca      	lsrs	r2, r1
 80165aa:	07d6      	lsls	r6, r2, #31
 80165ac:	d528      	bpl.n	8016600 <__sflush_r+0xb8>
 80165ae:	2200      	movs	r2, #0
 80165b0:	6062      	str	r2, [r4, #4]
 80165b2:	04d9      	lsls	r1, r3, #19
 80165b4:	6922      	ldr	r2, [r4, #16]
 80165b6:	6022      	str	r2, [r4, #0]
 80165b8:	d504      	bpl.n	80165c4 <__sflush_r+0x7c>
 80165ba:	1c42      	adds	r2, r0, #1
 80165bc:	d101      	bne.n	80165c2 <__sflush_r+0x7a>
 80165be:	682b      	ldr	r3, [r5, #0]
 80165c0:	b903      	cbnz	r3, 80165c4 <__sflush_r+0x7c>
 80165c2:	6560      	str	r0, [r4, #84]	; 0x54
 80165c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80165c6:	602f      	str	r7, [r5, #0]
 80165c8:	2900      	cmp	r1, #0
 80165ca:	d0ca      	beq.n	8016562 <__sflush_r+0x1a>
 80165cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80165d0:	4299      	cmp	r1, r3
 80165d2:	d002      	beq.n	80165da <__sflush_r+0x92>
 80165d4:	4628      	mov	r0, r5
 80165d6:	f7ff fd91 	bl	80160fc <_free_r>
 80165da:	2000      	movs	r0, #0
 80165dc:	6360      	str	r0, [r4, #52]	; 0x34
 80165de:	e7c1      	b.n	8016564 <__sflush_r+0x1c>
 80165e0:	6a21      	ldr	r1, [r4, #32]
 80165e2:	2301      	movs	r3, #1
 80165e4:	4628      	mov	r0, r5
 80165e6:	47b0      	blx	r6
 80165e8:	1c41      	adds	r1, r0, #1
 80165ea:	d1c7      	bne.n	801657c <__sflush_r+0x34>
 80165ec:	682b      	ldr	r3, [r5, #0]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d0c4      	beq.n	801657c <__sflush_r+0x34>
 80165f2:	2b1d      	cmp	r3, #29
 80165f4:	d001      	beq.n	80165fa <__sflush_r+0xb2>
 80165f6:	2b16      	cmp	r3, #22
 80165f8:	d101      	bne.n	80165fe <__sflush_r+0xb6>
 80165fa:	602f      	str	r7, [r5, #0]
 80165fc:	e7b1      	b.n	8016562 <__sflush_r+0x1a>
 80165fe:	89a3      	ldrh	r3, [r4, #12]
 8016600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016604:	81a3      	strh	r3, [r4, #12]
 8016606:	e7ad      	b.n	8016564 <__sflush_r+0x1c>
 8016608:	690f      	ldr	r7, [r1, #16]
 801660a:	2f00      	cmp	r7, #0
 801660c:	d0a9      	beq.n	8016562 <__sflush_r+0x1a>
 801660e:	0793      	lsls	r3, r2, #30
 8016610:	680e      	ldr	r6, [r1, #0]
 8016612:	bf08      	it	eq
 8016614:	694b      	ldreq	r3, [r1, #20]
 8016616:	600f      	str	r7, [r1, #0]
 8016618:	bf18      	it	ne
 801661a:	2300      	movne	r3, #0
 801661c:	eba6 0807 	sub.w	r8, r6, r7
 8016620:	608b      	str	r3, [r1, #8]
 8016622:	f1b8 0f00 	cmp.w	r8, #0
 8016626:	dd9c      	ble.n	8016562 <__sflush_r+0x1a>
 8016628:	6a21      	ldr	r1, [r4, #32]
 801662a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801662c:	4643      	mov	r3, r8
 801662e:	463a      	mov	r2, r7
 8016630:	4628      	mov	r0, r5
 8016632:	47b0      	blx	r6
 8016634:	2800      	cmp	r0, #0
 8016636:	dc06      	bgt.n	8016646 <__sflush_r+0xfe>
 8016638:	89a3      	ldrh	r3, [r4, #12]
 801663a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801663e:	81a3      	strh	r3, [r4, #12]
 8016640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016644:	e78e      	b.n	8016564 <__sflush_r+0x1c>
 8016646:	4407      	add	r7, r0
 8016648:	eba8 0800 	sub.w	r8, r8, r0
 801664c:	e7e9      	b.n	8016622 <__sflush_r+0xda>
 801664e:	bf00      	nop
 8016650:	20400001 	.word	0x20400001

08016654 <_fflush_r>:
 8016654:	b538      	push	{r3, r4, r5, lr}
 8016656:	690b      	ldr	r3, [r1, #16]
 8016658:	4605      	mov	r5, r0
 801665a:	460c      	mov	r4, r1
 801665c:	b913      	cbnz	r3, 8016664 <_fflush_r+0x10>
 801665e:	2500      	movs	r5, #0
 8016660:	4628      	mov	r0, r5
 8016662:	bd38      	pop	{r3, r4, r5, pc}
 8016664:	b118      	cbz	r0, 801666e <_fflush_r+0x1a>
 8016666:	6983      	ldr	r3, [r0, #24]
 8016668:	b90b      	cbnz	r3, 801666e <_fflush_r+0x1a>
 801666a:	f000 f887 	bl	801677c <__sinit>
 801666e:	4b14      	ldr	r3, [pc, #80]	; (80166c0 <_fflush_r+0x6c>)
 8016670:	429c      	cmp	r4, r3
 8016672:	d11b      	bne.n	80166ac <_fflush_r+0x58>
 8016674:	686c      	ldr	r4, [r5, #4]
 8016676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d0ef      	beq.n	801665e <_fflush_r+0xa>
 801667e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016680:	07d0      	lsls	r0, r2, #31
 8016682:	d404      	bmi.n	801668e <_fflush_r+0x3a>
 8016684:	0599      	lsls	r1, r3, #22
 8016686:	d402      	bmi.n	801668e <_fflush_r+0x3a>
 8016688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801668a:	f000 f915 	bl	80168b8 <__retarget_lock_acquire_recursive>
 801668e:	4628      	mov	r0, r5
 8016690:	4621      	mov	r1, r4
 8016692:	f7ff ff59 	bl	8016548 <__sflush_r>
 8016696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016698:	07da      	lsls	r2, r3, #31
 801669a:	4605      	mov	r5, r0
 801669c:	d4e0      	bmi.n	8016660 <_fflush_r+0xc>
 801669e:	89a3      	ldrh	r3, [r4, #12]
 80166a0:	059b      	lsls	r3, r3, #22
 80166a2:	d4dd      	bmi.n	8016660 <_fflush_r+0xc>
 80166a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80166a6:	f000 f908 	bl	80168ba <__retarget_lock_release_recursive>
 80166aa:	e7d9      	b.n	8016660 <_fflush_r+0xc>
 80166ac:	4b05      	ldr	r3, [pc, #20]	; (80166c4 <_fflush_r+0x70>)
 80166ae:	429c      	cmp	r4, r3
 80166b0:	d101      	bne.n	80166b6 <_fflush_r+0x62>
 80166b2:	68ac      	ldr	r4, [r5, #8]
 80166b4:	e7df      	b.n	8016676 <_fflush_r+0x22>
 80166b6:	4b04      	ldr	r3, [pc, #16]	; (80166c8 <_fflush_r+0x74>)
 80166b8:	429c      	cmp	r4, r3
 80166ba:	bf08      	it	eq
 80166bc:	68ec      	ldreq	r4, [r5, #12]
 80166be:	e7da      	b.n	8016676 <_fflush_r+0x22>
 80166c0:	08016ee4 	.word	0x08016ee4
 80166c4:	08016f04 	.word	0x08016f04
 80166c8:	08016ec4 	.word	0x08016ec4

080166cc <std>:
 80166cc:	2300      	movs	r3, #0
 80166ce:	b510      	push	{r4, lr}
 80166d0:	4604      	mov	r4, r0
 80166d2:	e9c0 3300 	strd	r3, r3, [r0]
 80166d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80166da:	6083      	str	r3, [r0, #8]
 80166dc:	8181      	strh	r1, [r0, #12]
 80166de:	6643      	str	r3, [r0, #100]	; 0x64
 80166e0:	81c2      	strh	r2, [r0, #14]
 80166e2:	6183      	str	r3, [r0, #24]
 80166e4:	4619      	mov	r1, r3
 80166e6:	2208      	movs	r2, #8
 80166e8:	305c      	adds	r0, #92	; 0x5c
 80166ea:	f7ff fcff 	bl	80160ec <memset>
 80166ee:	4b05      	ldr	r3, [pc, #20]	; (8016704 <std+0x38>)
 80166f0:	6263      	str	r3, [r4, #36]	; 0x24
 80166f2:	4b05      	ldr	r3, [pc, #20]	; (8016708 <std+0x3c>)
 80166f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80166f6:	4b05      	ldr	r3, [pc, #20]	; (801670c <std+0x40>)
 80166f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80166fa:	4b05      	ldr	r3, [pc, #20]	; (8016710 <std+0x44>)
 80166fc:	6224      	str	r4, [r4, #32]
 80166fe:	6323      	str	r3, [r4, #48]	; 0x30
 8016700:	bd10      	pop	{r4, pc}
 8016702:	bf00      	nop
 8016704:	080169a1 	.word	0x080169a1
 8016708:	080169c3 	.word	0x080169c3
 801670c:	080169fb 	.word	0x080169fb
 8016710:	08016a1f 	.word	0x08016a1f

08016714 <_cleanup_r>:
 8016714:	4901      	ldr	r1, [pc, #4]	; (801671c <_cleanup_r+0x8>)
 8016716:	f000 b8af 	b.w	8016878 <_fwalk_reent>
 801671a:	bf00      	nop
 801671c:	08016655 	.word	0x08016655

08016720 <__sfmoreglue>:
 8016720:	b570      	push	{r4, r5, r6, lr}
 8016722:	2268      	movs	r2, #104	; 0x68
 8016724:	1e4d      	subs	r5, r1, #1
 8016726:	4355      	muls	r5, r2
 8016728:	460e      	mov	r6, r1
 801672a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801672e:	f7ff fd51 	bl	80161d4 <_malloc_r>
 8016732:	4604      	mov	r4, r0
 8016734:	b140      	cbz	r0, 8016748 <__sfmoreglue+0x28>
 8016736:	2100      	movs	r1, #0
 8016738:	e9c0 1600 	strd	r1, r6, [r0]
 801673c:	300c      	adds	r0, #12
 801673e:	60a0      	str	r0, [r4, #8]
 8016740:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016744:	f7ff fcd2 	bl	80160ec <memset>
 8016748:	4620      	mov	r0, r4
 801674a:	bd70      	pop	{r4, r5, r6, pc}

0801674c <__sfp_lock_acquire>:
 801674c:	4801      	ldr	r0, [pc, #4]	; (8016754 <__sfp_lock_acquire+0x8>)
 801674e:	f000 b8b3 	b.w	80168b8 <__retarget_lock_acquire_recursive>
 8016752:	bf00      	nop
 8016754:	24005a25 	.word	0x24005a25

08016758 <__sfp_lock_release>:
 8016758:	4801      	ldr	r0, [pc, #4]	; (8016760 <__sfp_lock_release+0x8>)
 801675a:	f000 b8ae 	b.w	80168ba <__retarget_lock_release_recursive>
 801675e:	bf00      	nop
 8016760:	24005a25 	.word	0x24005a25

08016764 <__sinit_lock_acquire>:
 8016764:	4801      	ldr	r0, [pc, #4]	; (801676c <__sinit_lock_acquire+0x8>)
 8016766:	f000 b8a7 	b.w	80168b8 <__retarget_lock_acquire_recursive>
 801676a:	bf00      	nop
 801676c:	24005a26 	.word	0x24005a26

08016770 <__sinit_lock_release>:
 8016770:	4801      	ldr	r0, [pc, #4]	; (8016778 <__sinit_lock_release+0x8>)
 8016772:	f000 b8a2 	b.w	80168ba <__retarget_lock_release_recursive>
 8016776:	bf00      	nop
 8016778:	24005a26 	.word	0x24005a26

0801677c <__sinit>:
 801677c:	b510      	push	{r4, lr}
 801677e:	4604      	mov	r4, r0
 8016780:	f7ff fff0 	bl	8016764 <__sinit_lock_acquire>
 8016784:	69a3      	ldr	r3, [r4, #24]
 8016786:	b11b      	cbz	r3, 8016790 <__sinit+0x14>
 8016788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801678c:	f7ff bff0 	b.w	8016770 <__sinit_lock_release>
 8016790:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016794:	6523      	str	r3, [r4, #80]	; 0x50
 8016796:	4b13      	ldr	r3, [pc, #76]	; (80167e4 <__sinit+0x68>)
 8016798:	4a13      	ldr	r2, [pc, #76]	; (80167e8 <__sinit+0x6c>)
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	62a2      	str	r2, [r4, #40]	; 0x28
 801679e:	42a3      	cmp	r3, r4
 80167a0:	bf04      	itt	eq
 80167a2:	2301      	moveq	r3, #1
 80167a4:	61a3      	streq	r3, [r4, #24]
 80167a6:	4620      	mov	r0, r4
 80167a8:	f000 f820 	bl	80167ec <__sfp>
 80167ac:	6060      	str	r0, [r4, #4]
 80167ae:	4620      	mov	r0, r4
 80167b0:	f000 f81c 	bl	80167ec <__sfp>
 80167b4:	60a0      	str	r0, [r4, #8]
 80167b6:	4620      	mov	r0, r4
 80167b8:	f000 f818 	bl	80167ec <__sfp>
 80167bc:	2200      	movs	r2, #0
 80167be:	60e0      	str	r0, [r4, #12]
 80167c0:	2104      	movs	r1, #4
 80167c2:	6860      	ldr	r0, [r4, #4]
 80167c4:	f7ff ff82 	bl	80166cc <std>
 80167c8:	68a0      	ldr	r0, [r4, #8]
 80167ca:	2201      	movs	r2, #1
 80167cc:	2109      	movs	r1, #9
 80167ce:	f7ff ff7d 	bl	80166cc <std>
 80167d2:	68e0      	ldr	r0, [r4, #12]
 80167d4:	2202      	movs	r2, #2
 80167d6:	2112      	movs	r1, #18
 80167d8:	f7ff ff78 	bl	80166cc <std>
 80167dc:	2301      	movs	r3, #1
 80167de:	61a3      	str	r3, [r4, #24]
 80167e0:	e7d2      	b.n	8016788 <__sinit+0xc>
 80167e2:	bf00      	nop
 80167e4:	08016ec0 	.word	0x08016ec0
 80167e8:	08016715 	.word	0x08016715

080167ec <__sfp>:
 80167ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ee:	4607      	mov	r7, r0
 80167f0:	f7ff ffac 	bl	801674c <__sfp_lock_acquire>
 80167f4:	4b1e      	ldr	r3, [pc, #120]	; (8016870 <__sfp+0x84>)
 80167f6:	681e      	ldr	r6, [r3, #0]
 80167f8:	69b3      	ldr	r3, [r6, #24]
 80167fa:	b913      	cbnz	r3, 8016802 <__sfp+0x16>
 80167fc:	4630      	mov	r0, r6
 80167fe:	f7ff ffbd 	bl	801677c <__sinit>
 8016802:	3648      	adds	r6, #72	; 0x48
 8016804:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016808:	3b01      	subs	r3, #1
 801680a:	d503      	bpl.n	8016814 <__sfp+0x28>
 801680c:	6833      	ldr	r3, [r6, #0]
 801680e:	b30b      	cbz	r3, 8016854 <__sfp+0x68>
 8016810:	6836      	ldr	r6, [r6, #0]
 8016812:	e7f7      	b.n	8016804 <__sfp+0x18>
 8016814:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016818:	b9d5      	cbnz	r5, 8016850 <__sfp+0x64>
 801681a:	4b16      	ldr	r3, [pc, #88]	; (8016874 <__sfp+0x88>)
 801681c:	60e3      	str	r3, [r4, #12]
 801681e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016822:	6665      	str	r5, [r4, #100]	; 0x64
 8016824:	f000 f847 	bl	80168b6 <__retarget_lock_init_recursive>
 8016828:	f7ff ff96 	bl	8016758 <__sfp_lock_release>
 801682c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016830:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016834:	6025      	str	r5, [r4, #0]
 8016836:	61a5      	str	r5, [r4, #24]
 8016838:	2208      	movs	r2, #8
 801683a:	4629      	mov	r1, r5
 801683c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016840:	f7ff fc54 	bl	80160ec <memset>
 8016844:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016848:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801684c:	4620      	mov	r0, r4
 801684e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016850:	3468      	adds	r4, #104	; 0x68
 8016852:	e7d9      	b.n	8016808 <__sfp+0x1c>
 8016854:	2104      	movs	r1, #4
 8016856:	4638      	mov	r0, r7
 8016858:	f7ff ff62 	bl	8016720 <__sfmoreglue>
 801685c:	4604      	mov	r4, r0
 801685e:	6030      	str	r0, [r6, #0]
 8016860:	2800      	cmp	r0, #0
 8016862:	d1d5      	bne.n	8016810 <__sfp+0x24>
 8016864:	f7ff ff78 	bl	8016758 <__sfp_lock_release>
 8016868:	230c      	movs	r3, #12
 801686a:	603b      	str	r3, [r7, #0]
 801686c:	e7ee      	b.n	801684c <__sfp+0x60>
 801686e:	bf00      	nop
 8016870:	08016ec0 	.word	0x08016ec0
 8016874:	ffff0001 	.word	0xffff0001

08016878 <_fwalk_reent>:
 8016878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801687c:	4606      	mov	r6, r0
 801687e:	4688      	mov	r8, r1
 8016880:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016884:	2700      	movs	r7, #0
 8016886:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801688a:	f1b9 0901 	subs.w	r9, r9, #1
 801688e:	d505      	bpl.n	801689c <_fwalk_reent+0x24>
 8016890:	6824      	ldr	r4, [r4, #0]
 8016892:	2c00      	cmp	r4, #0
 8016894:	d1f7      	bne.n	8016886 <_fwalk_reent+0xe>
 8016896:	4638      	mov	r0, r7
 8016898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801689c:	89ab      	ldrh	r3, [r5, #12]
 801689e:	2b01      	cmp	r3, #1
 80168a0:	d907      	bls.n	80168b2 <_fwalk_reent+0x3a>
 80168a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80168a6:	3301      	adds	r3, #1
 80168a8:	d003      	beq.n	80168b2 <_fwalk_reent+0x3a>
 80168aa:	4629      	mov	r1, r5
 80168ac:	4630      	mov	r0, r6
 80168ae:	47c0      	blx	r8
 80168b0:	4307      	orrs	r7, r0
 80168b2:	3568      	adds	r5, #104	; 0x68
 80168b4:	e7e9      	b.n	801688a <_fwalk_reent+0x12>

080168b6 <__retarget_lock_init_recursive>:
 80168b6:	4770      	bx	lr

080168b8 <__retarget_lock_acquire_recursive>:
 80168b8:	4770      	bx	lr

080168ba <__retarget_lock_release_recursive>:
 80168ba:	4770      	bx	lr

080168bc <__swhatbuf_r>:
 80168bc:	b570      	push	{r4, r5, r6, lr}
 80168be:	460e      	mov	r6, r1
 80168c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80168c4:	2900      	cmp	r1, #0
 80168c6:	b096      	sub	sp, #88	; 0x58
 80168c8:	4614      	mov	r4, r2
 80168ca:	461d      	mov	r5, r3
 80168cc:	da08      	bge.n	80168e0 <__swhatbuf_r+0x24>
 80168ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80168d2:	2200      	movs	r2, #0
 80168d4:	602a      	str	r2, [r5, #0]
 80168d6:	061a      	lsls	r2, r3, #24
 80168d8:	d410      	bmi.n	80168fc <__swhatbuf_r+0x40>
 80168da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80168de:	e00e      	b.n	80168fe <__swhatbuf_r+0x42>
 80168e0:	466a      	mov	r2, sp
 80168e2:	f000 f8c3 	bl	8016a6c <_fstat_r>
 80168e6:	2800      	cmp	r0, #0
 80168e8:	dbf1      	blt.n	80168ce <__swhatbuf_r+0x12>
 80168ea:	9a01      	ldr	r2, [sp, #4]
 80168ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80168f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80168f4:	425a      	negs	r2, r3
 80168f6:	415a      	adcs	r2, r3
 80168f8:	602a      	str	r2, [r5, #0]
 80168fa:	e7ee      	b.n	80168da <__swhatbuf_r+0x1e>
 80168fc:	2340      	movs	r3, #64	; 0x40
 80168fe:	2000      	movs	r0, #0
 8016900:	6023      	str	r3, [r4, #0]
 8016902:	b016      	add	sp, #88	; 0x58
 8016904:	bd70      	pop	{r4, r5, r6, pc}
	...

08016908 <__smakebuf_r>:
 8016908:	898b      	ldrh	r3, [r1, #12]
 801690a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801690c:	079d      	lsls	r5, r3, #30
 801690e:	4606      	mov	r6, r0
 8016910:	460c      	mov	r4, r1
 8016912:	d507      	bpl.n	8016924 <__smakebuf_r+0x1c>
 8016914:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016918:	6023      	str	r3, [r4, #0]
 801691a:	6123      	str	r3, [r4, #16]
 801691c:	2301      	movs	r3, #1
 801691e:	6163      	str	r3, [r4, #20]
 8016920:	b002      	add	sp, #8
 8016922:	bd70      	pop	{r4, r5, r6, pc}
 8016924:	ab01      	add	r3, sp, #4
 8016926:	466a      	mov	r2, sp
 8016928:	f7ff ffc8 	bl	80168bc <__swhatbuf_r>
 801692c:	9900      	ldr	r1, [sp, #0]
 801692e:	4605      	mov	r5, r0
 8016930:	4630      	mov	r0, r6
 8016932:	f7ff fc4f 	bl	80161d4 <_malloc_r>
 8016936:	b948      	cbnz	r0, 801694c <__smakebuf_r+0x44>
 8016938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801693c:	059a      	lsls	r2, r3, #22
 801693e:	d4ef      	bmi.n	8016920 <__smakebuf_r+0x18>
 8016940:	f023 0303 	bic.w	r3, r3, #3
 8016944:	f043 0302 	orr.w	r3, r3, #2
 8016948:	81a3      	strh	r3, [r4, #12]
 801694a:	e7e3      	b.n	8016914 <__smakebuf_r+0xc>
 801694c:	4b0d      	ldr	r3, [pc, #52]	; (8016984 <__smakebuf_r+0x7c>)
 801694e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016950:	89a3      	ldrh	r3, [r4, #12]
 8016952:	6020      	str	r0, [r4, #0]
 8016954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016958:	81a3      	strh	r3, [r4, #12]
 801695a:	9b00      	ldr	r3, [sp, #0]
 801695c:	6163      	str	r3, [r4, #20]
 801695e:	9b01      	ldr	r3, [sp, #4]
 8016960:	6120      	str	r0, [r4, #16]
 8016962:	b15b      	cbz	r3, 801697c <__smakebuf_r+0x74>
 8016964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016968:	4630      	mov	r0, r6
 801696a:	f000 f891 	bl	8016a90 <_isatty_r>
 801696e:	b128      	cbz	r0, 801697c <__smakebuf_r+0x74>
 8016970:	89a3      	ldrh	r3, [r4, #12]
 8016972:	f023 0303 	bic.w	r3, r3, #3
 8016976:	f043 0301 	orr.w	r3, r3, #1
 801697a:	81a3      	strh	r3, [r4, #12]
 801697c:	89a0      	ldrh	r0, [r4, #12]
 801697e:	4305      	orrs	r5, r0
 8016980:	81a5      	strh	r5, [r4, #12]
 8016982:	e7cd      	b.n	8016920 <__smakebuf_r+0x18>
 8016984:	08016715 	.word	0x08016715

08016988 <__malloc_lock>:
 8016988:	4801      	ldr	r0, [pc, #4]	; (8016990 <__malloc_lock+0x8>)
 801698a:	f7ff bf95 	b.w	80168b8 <__retarget_lock_acquire_recursive>
 801698e:	bf00      	nop
 8016990:	24005a24 	.word	0x24005a24

08016994 <__malloc_unlock>:
 8016994:	4801      	ldr	r0, [pc, #4]	; (801699c <__malloc_unlock+0x8>)
 8016996:	f7ff bf90 	b.w	80168ba <__retarget_lock_release_recursive>
 801699a:	bf00      	nop
 801699c:	24005a24 	.word	0x24005a24

080169a0 <__sread>:
 80169a0:	b510      	push	{r4, lr}
 80169a2:	460c      	mov	r4, r1
 80169a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169a8:	f000 f894 	bl	8016ad4 <_read_r>
 80169ac:	2800      	cmp	r0, #0
 80169ae:	bfab      	itete	ge
 80169b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80169b2:	89a3      	ldrhlt	r3, [r4, #12]
 80169b4:	181b      	addge	r3, r3, r0
 80169b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80169ba:	bfac      	ite	ge
 80169bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80169be:	81a3      	strhlt	r3, [r4, #12]
 80169c0:	bd10      	pop	{r4, pc}

080169c2 <__swrite>:
 80169c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169c6:	461f      	mov	r7, r3
 80169c8:	898b      	ldrh	r3, [r1, #12]
 80169ca:	05db      	lsls	r3, r3, #23
 80169cc:	4605      	mov	r5, r0
 80169ce:	460c      	mov	r4, r1
 80169d0:	4616      	mov	r6, r2
 80169d2:	d505      	bpl.n	80169e0 <__swrite+0x1e>
 80169d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169d8:	2302      	movs	r3, #2
 80169da:	2200      	movs	r2, #0
 80169dc:	f000 f868 	bl	8016ab0 <_lseek_r>
 80169e0:	89a3      	ldrh	r3, [r4, #12]
 80169e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80169e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80169ea:	81a3      	strh	r3, [r4, #12]
 80169ec:	4632      	mov	r2, r6
 80169ee:	463b      	mov	r3, r7
 80169f0:	4628      	mov	r0, r5
 80169f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169f6:	f000 b817 	b.w	8016a28 <_write_r>

080169fa <__sseek>:
 80169fa:	b510      	push	{r4, lr}
 80169fc:	460c      	mov	r4, r1
 80169fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a02:	f000 f855 	bl	8016ab0 <_lseek_r>
 8016a06:	1c43      	adds	r3, r0, #1
 8016a08:	89a3      	ldrh	r3, [r4, #12]
 8016a0a:	bf15      	itete	ne
 8016a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016a16:	81a3      	strheq	r3, [r4, #12]
 8016a18:	bf18      	it	ne
 8016a1a:	81a3      	strhne	r3, [r4, #12]
 8016a1c:	bd10      	pop	{r4, pc}

08016a1e <__sclose>:
 8016a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a22:	f000 b813 	b.w	8016a4c <_close_r>
	...

08016a28 <_write_r>:
 8016a28:	b538      	push	{r3, r4, r5, lr}
 8016a2a:	4d07      	ldr	r5, [pc, #28]	; (8016a48 <_write_r+0x20>)
 8016a2c:	4604      	mov	r4, r0
 8016a2e:	4608      	mov	r0, r1
 8016a30:	4611      	mov	r1, r2
 8016a32:	2200      	movs	r2, #0
 8016a34:	602a      	str	r2, [r5, #0]
 8016a36:	461a      	mov	r2, r3
 8016a38:	f7ec fe77 	bl	800372a <_write>
 8016a3c:	1c43      	adds	r3, r0, #1
 8016a3e:	d102      	bne.n	8016a46 <_write_r+0x1e>
 8016a40:	682b      	ldr	r3, [r5, #0]
 8016a42:	b103      	cbz	r3, 8016a46 <_write_r+0x1e>
 8016a44:	6023      	str	r3, [r4, #0]
 8016a46:	bd38      	pop	{r3, r4, r5, pc}
 8016a48:	24005a28 	.word	0x24005a28

08016a4c <_close_r>:
 8016a4c:	b538      	push	{r3, r4, r5, lr}
 8016a4e:	4d06      	ldr	r5, [pc, #24]	; (8016a68 <_close_r+0x1c>)
 8016a50:	2300      	movs	r3, #0
 8016a52:	4604      	mov	r4, r0
 8016a54:	4608      	mov	r0, r1
 8016a56:	602b      	str	r3, [r5, #0]
 8016a58:	f7ec fe83 	bl	8003762 <_close>
 8016a5c:	1c43      	adds	r3, r0, #1
 8016a5e:	d102      	bne.n	8016a66 <_close_r+0x1a>
 8016a60:	682b      	ldr	r3, [r5, #0]
 8016a62:	b103      	cbz	r3, 8016a66 <_close_r+0x1a>
 8016a64:	6023      	str	r3, [r4, #0]
 8016a66:	bd38      	pop	{r3, r4, r5, pc}
 8016a68:	24005a28 	.word	0x24005a28

08016a6c <_fstat_r>:
 8016a6c:	b538      	push	{r3, r4, r5, lr}
 8016a6e:	4d07      	ldr	r5, [pc, #28]	; (8016a8c <_fstat_r+0x20>)
 8016a70:	2300      	movs	r3, #0
 8016a72:	4604      	mov	r4, r0
 8016a74:	4608      	mov	r0, r1
 8016a76:	4611      	mov	r1, r2
 8016a78:	602b      	str	r3, [r5, #0]
 8016a7a:	f7ec fe7e 	bl	800377a <_fstat>
 8016a7e:	1c43      	adds	r3, r0, #1
 8016a80:	d102      	bne.n	8016a88 <_fstat_r+0x1c>
 8016a82:	682b      	ldr	r3, [r5, #0]
 8016a84:	b103      	cbz	r3, 8016a88 <_fstat_r+0x1c>
 8016a86:	6023      	str	r3, [r4, #0]
 8016a88:	bd38      	pop	{r3, r4, r5, pc}
 8016a8a:	bf00      	nop
 8016a8c:	24005a28 	.word	0x24005a28

08016a90 <_isatty_r>:
 8016a90:	b538      	push	{r3, r4, r5, lr}
 8016a92:	4d06      	ldr	r5, [pc, #24]	; (8016aac <_isatty_r+0x1c>)
 8016a94:	2300      	movs	r3, #0
 8016a96:	4604      	mov	r4, r0
 8016a98:	4608      	mov	r0, r1
 8016a9a:	602b      	str	r3, [r5, #0]
 8016a9c:	f7ec fe7d 	bl	800379a <_isatty>
 8016aa0:	1c43      	adds	r3, r0, #1
 8016aa2:	d102      	bne.n	8016aaa <_isatty_r+0x1a>
 8016aa4:	682b      	ldr	r3, [r5, #0]
 8016aa6:	b103      	cbz	r3, 8016aaa <_isatty_r+0x1a>
 8016aa8:	6023      	str	r3, [r4, #0]
 8016aaa:	bd38      	pop	{r3, r4, r5, pc}
 8016aac:	24005a28 	.word	0x24005a28

08016ab0 <_lseek_r>:
 8016ab0:	b538      	push	{r3, r4, r5, lr}
 8016ab2:	4d07      	ldr	r5, [pc, #28]	; (8016ad0 <_lseek_r+0x20>)
 8016ab4:	4604      	mov	r4, r0
 8016ab6:	4608      	mov	r0, r1
 8016ab8:	4611      	mov	r1, r2
 8016aba:	2200      	movs	r2, #0
 8016abc:	602a      	str	r2, [r5, #0]
 8016abe:	461a      	mov	r2, r3
 8016ac0:	f7ec fe76 	bl	80037b0 <_lseek>
 8016ac4:	1c43      	adds	r3, r0, #1
 8016ac6:	d102      	bne.n	8016ace <_lseek_r+0x1e>
 8016ac8:	682b      	ldr	r3, [r5, #0]
 8016aca:	b103      	cbz	r3, 8016ace <_lseek_r+0x1e>
 8016acc:	6023      	str	r3, [r4, #0]
 8016ace:	bd38      	pop	{r3, r4, r5, pc}
 8016ad0:	24005a28 	.word	0x24005a28

08016ad4 <_read_r>:
 8016ad4:	b538      	push	{r3, r4, r5, lr}
 8016ad6:	4d07      	ldr	r5, [pc, #28]	; (8016af4 <_read_r+0x20>)
 8016ad8:	4604      	mov	r4, r0
 8016ada:	4608      	mov	r0, r1
 8016adc:	4611      	mov	r1, r2
 8016ade:	2200      	movs	r2, #0
 8016ae0:	602a      	str	r2, [r5, #0]
 8016ae2:	461a      	mov	r2, r3
 8016ae4:	f7ec fe04 	bl	80036f0 <_read>
 8016ae8:	1c43      	adds	r3, r0, #1
 8016aea:	d102      	bne.n	8016af2 <_read_r+0x1e>
 8016aec:	682b      	ldr	r3, [r5, #0]
 8016aee:	b103      	cbz	r3, 8016af2 <_read_r+0x1e>
 8016af0:	6023      	str	r3, [r4, #0]
 8016af2:	bd38      	pop	{r3, r4, r5, pc}
 8016af4:	24005a28 	.word	0x24005a28

08016af8 <_init>:
 8016af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016afa:	bf00      	nop
 8016afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016afe:	bc08      	pop	{r3}
 8016b00:	469e      	mov	lr, r3
 8016b02:	4770      	bx	lr

08016b04 <_fini>:
 8016b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b06:	bf00      	nop
 8016b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b0a:	bc08      	pop	{r3}
 8016b0c:	469e      	mov	lr, r3
 8016b0e:	4770      	bx	lr
