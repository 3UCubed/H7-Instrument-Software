
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017350  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  080175f0  080175f0  000275f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017a88  08017a88  00027a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017a90  08017a90  00027a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017a94  08017a94  00027a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000104  24000000  08017a98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005928  24000120  08017b9c  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005a48  08017b9c  00035a48  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033ba1  00000000  00000000  00030132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005708  00000000  00000000  00063cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002778  00000000  00000000  000693e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002560  00000000  00000000  0006bb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00040106  00000000  00000000  0006e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000324c5  00000000  00000000  000ae1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194b89  00000000  00000000  000e0683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0027520c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b0cc  00000000  00000000  0027525c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080175d8 	.word	0x080175d8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	080175d8 	.word	0x080175d8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c00 	.word	0x24000c00

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a16      	ldr	r2, [pc, #88]	; (8000664 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 feee 	bl	80133f8 <osEventFlagsSet>
#endif

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e01e      	b.n	800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>
	} else if (htim == &htim2) {
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a12      	ldr	r2, [pc, #72]	; (800066c <HAL_TIM_OC_DelayElapsedCallback+0x6c>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fee3 	bl	80133f8 <osEventFlagsSet>
}
 8000632:	e013      	b.n	800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>
	} else if (htim == &htim3) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a0e      	ldr	r2, [pc, #56]	; (8000670 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d10c      	bne.n	8000656 <HAL_TIM_OC_DelayElapsedCallback+0x56>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2108      	movs	r1, #8
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fed8 	bl	80133f8 <osEventFlagsSet>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2104      	movs	r1, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f012 fed2 	bl	80133f8 <osEventFlagsSet>
}
 8000654:	e002      	b.n	800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>
		printf("Unknown Timer Interrupt\n");
 8000656:	4807      	ldr	r0, [pc, #28]	; (8000674 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000658:	f016 fc0e 	bl	8016e78 <puts>
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	24000508 	.word	0x24000508
 8000668:	24000c20 	.word	0x24000c20
 800066c:	24000554 	.word	0x24000554
 8000670:	240005a0 	.word	0x240005a0
 8000674:	08017678 	.word	0x08017678

08000678 <HAL_UART_RxCpltCallback>:
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af02      	add	r7, sp, #8
 800067e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000680:	2201      	movs	r2, #1
 8000682:	49f2      	ldr	r1, [pc, #968]	; (8000a4c <HAL_UART_RxCpltCallback+0x3d4>)
 8000684:	48f2      	ldr	r0, [pc, #968]	; (8000a50 <HAL_UART_RxCpltCallback+0x3d8>)
 8000686:	f00f ff2d 	bl	80104e4 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800068a:	4bf0      	ldr	r3, [pc, #960]	; (8000a4c <HAL_UART_RxCpltCallback+0x3d4>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	2be0      	cmp	r3, #224	; 0xe0
 8000694:	f200 844c 	bhi.w	8000f30 <HAL_UART_RxCpltCallback+0x8b8>
 8000698:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <HAL_UART_RxCpltCallback+0x28>)
 800069a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069e:	bf00      	nop
 80006a0:	08000a39 	.word	0x08000a39
 80006a4:	08000a7b 	.word	0x08000a7b
 80006a8:	08000b3d 	.word	0x08000b3d
 80006ac:	08000b73 	.word	0x08000b73
 80006b0:	08000ba7 	.word	0x08000ba7
 80006b4:	08000bdd 	.word	0x08000bdd
 80006b8:	08000c15 	.word	0x08000c15
 80006bc:	08000c4d 	.word	0x08000c4d
 80006c0:	08000c83 	.word	0x08000c83
 80006c4:	08000cb5 	.word	0x08000cb5
 80006c8:	08000ce7 	.word	0x08000ce7
 80006cc:	08000d1f 	.word	0x08000d1f
 80006d0:	08000d4f 	.word	0x08000d4f
 80006d4:	08000e4b 	.word	0x08000e4b
 80006d8:	08000eb3 	.word	0x08000eb3
 80006dc:	08000edb 	.word	0x08000edb
 80006e0:	08000a25 	.word	0x08000a25
 80006e4:	08000a61 	.word	0x08000a61
 80006e8:	08000b21 	.word	0x08000b21
 80006ec:	08000b59 	.word	0x08000b59
 80006f0:	08000b8d 	.word	0x08000b8d
 80006f4:	08000bc1 	.word	0x08000bc1
 80006f8:	08000bf9 	.word	0x08000bf9
 80006fc:	08000c31 	.word	0x08000c31
 8000700:	08000c69 	.word	0x08000c69
 8000704:	08000c9d 	.word	0x08000c9d
 8000708:	08000cc5 	.word	0x08000cc5
 800070c:	08000cfd 	.word	0x08000cfd
 8000710:	08000d35 	.word	0x08000d35
 8000714:	08000e09 	.word	0x08000e09
 8000718:	08000e8b 	.word	0x08000e8b
 800071c:	08000f31 	.word	0x08000f31
 8000720:	08000f31 	.word	0x08000f31
 8000724:	08000f31 	.word	0x08000f31
 8000728:	08000f31 	.word	0x08000f31
 800072c:	08000f31 	.word	0x08000f31
 8000730:	08000f31 	.word	0x08000f31
 8000734:	08000f31 	.word	0x08000f31
 8000738:	08000f31 	.word	0x08000f31
 800073c:	08000f31 	.word	0x08000f31
 8000740:	08000f31 	.word	0x08000f31
 8000744:	08000f31 	.word	0x08000f31
 8000748:	08000f31 	.word	0x08000f31
 800074c:	08000f31 	.word	0x08000f31
 8000750:	08000f31 	.word	0x08000f31
 8000754:	08000f31 	.word	0x08000f31
 8000758:	08000f31 	.word	0x08000f31
 800075c:	08000f31 	.word	0x08000f31
 8000760:	08000f31 	.word	0x08000f31
 8000764:	08000f31 	.word	0x08000f31
 8000768:	08000f31 	.word	0x08000f31
 800076c:	08000f31 	.word	0x08000f31
 8000770:	08000f31 	.word	0x08000f31
 8000774:	08000f31 	.word	0x08000f31
 8000778:	08000f31 	.word	0x08000f31
 800077c:	08000f31 	.word	0x08000f31
 8000780:	08000f31 	.word	0x08000f31
 8000784:	08000f31 	.word	0x08000f31
 8000788:	08000f31 	.word	0x08000f31
 800078c:	08000f31 	.word	0x08000f31
 8000790:	08000f31 	.word	0x08000f31
 8000794:	08000f31 	.word	0x08000f31
 8000798:	08000f31 	.word	0x08000f31
 800079c:	08000f31 	.word	0x08000f31
 80007a0:	08000f31 	.word	0x08000f31
 80007a4:	08000f31 	.word	0x08000f31
 80007a8:	08000f31 	.word	0x08000f31
 80007ac:	08000f31 	.word	0x08000f31
 80007b0:	08000f31 	.word	0x08000f31
 80007b4:	08000f31 	.word	0x08000f31
 80007b8:	08000f31 	.word	0x08000f31
 80007bc:	08000f31 	.word	0x08000f31
 80007c0:	08000f31 	.word	0x08000f31
 80007c4:	08000f31 	.word	0x08000f31
 80007c8:	08000f31 	.word	0x08000f31
 80007cc:	08000f31 	.word	0x08000f31
 80007d0:	08000f31 	.word	0x08000f31
 80007d4:	08000f31 	.word	0x08000f31
 80007d8:	08000f31 	.word	0x08000f31
 80007dc:	08000f31 	.word	0x08000f31
 80007e0:	08000f31 	.word	0x08000f31
 80007e4:	08000f31 	.word	0x08000f31
 80007e8:	08000f31 	.word	0x08000f31
 80007ec:	08000f31 	.word	0x08000f31
 80007f0:	08000f31 	.word	0x08000f31
 80007f4:	08000f31 	.word	0x08000f31
 80007f8:	08000f31 	.word	0x08000f31
 80007fc:	08000f31 	.word	0x08000f31
 8000800:	08000f31 	.word	0x08000f31
 8000804:	08000f31 	.word	0x08000f31
 8000808:	08000f31 	.word	0x08000f31
 800080c:	08000f31 	.word	0x08000f31
 8000810:	08000f31 	.word	0x08000f31
 8000814:	08000f31 	.word	0x08000f31
 8000818:	08000f31 	.word	0x08000f31
 800081c:	08000f31 	.word	0x08000f31
 8000820:	08000f31 	.word	0x08000f31
 8000824:	08000f31 	.word	0x08000f31
 8000828:	08000f31 	.word	0x08000f31
 800082c:	08000f31 	.word	0x08000f31
 8000830:	08000f31 	.word	0x08000f31
 8000834:	08000f31 	.word	0x08000f31
 8000838:	08000f31 	.word	0x08000f31
 800083c:	08000f31 	.word	0x08000f31
 8000840:	08000f31 	.word	0x08000f31
 8000844:	08000f31 	.word	0x08000f31
 8000848:	08000f31 	.word	0x08000f31
 800084c:	08000f31 	.word	0x08000f31
 8000850:	08000f31 	.word	0x08000f31
 8000854:	08000f31 	.word	0x08000f31
 8000858:	08000f31 	.word	0x08000f31
 800085c:	08000f31 	.word	0x08000f31
 8000860:	08000f31 	.word	0x08000f31
 8000864:	08000f31 	.word	0x08000f31
 8000868:	08000f31 	.word	0x08000f31
 800086c:	08000f31 	.word	0x08000f31
 8000870:	08000f31 	.word	0x08000f31
 8000874:	08000f31 	.word	0x08000f31
 8000878:	08000f31 	.word	0x08000f31
 800087c:	08000f31 	.word	0x08000f31
 8000880:	08000f31 	.word	0x08000f31
 8000884:	08000f31 	.word	0x08000f31
 8000888:	08000f31 	.word	0x08000f31
 800088c:	08000f31 	.word	0x08000f31
 8000890:	08000f31 	.word	0x08000f31
 8000894:	08000f31 	.word	0x08000f31
 8000898:	08000f31 	.word	0x08000f31
 800089c:	08000f31 	.word	0x08000f31
 80008a0:	08000f31 	.word	0x08000f31
 80008a4:	08000f31 	.word	0x08000f31
 80008a8:	08000f31 	.word	0x08000f31
 80008ac:	08000f31 	.word	0x08000f31
 80008b0:	08000f31 	.word	0x08000f31
 80008b4:	08000f31 	.word	0x08000f31
 80008b8:	08000f31 	.word	0x08000f31
 80008bc:	08000f31 	.word	0x08000f31
 80008c0:	08000f31 	.word	0x08000f31
 80008c4:	08000f31 	.word	0x08000f31
 80008c8:	08000f31 	.word	0x08000f31
 80008cc:	08000f31 	.word	0x08000f31
 80008d0:	08000f31 	.word	0x08000f31
 80008d4:	08000f31 	.word	0x08000f31
 80008d8:	08000f31 	.word	0x08000f31
 80008dc:	08000f31 	.word	0x08000f31
 80008e0:	08000f31 	.word	0x08000f31
 80008e4:	08000f31 	.word	0x08000f31
 80008e8:	08000f31 	.word	0x08000f31
 80008ec:	08000f31 	.word	0x08000f31
 80008f0:	08000f31 	.word	0x08000f31
 80008f4:	08000f31 	.word	0x08000f31
 80008f8:	08000f31 	.word	0x08000f31
 80008fc:	08000f31 	.word	0x08000f31
 8000900:	08000f31 	.word	0x08000f31
 8000904:	08000f31 	.word	0x08000f31
 8000908:	08000f31 	.word	0x08000f31
 800090c:	08000f31 	.word	0x08000f31
 8000910:	08000f31 	.word	0x08000f31
 8000914:	08000f31 	.word	0x08000f31
 8000918:	08000f31 	.word	0x08000f31
 800091c:	08000f31 	.word	0x08000f31
 8000920:	08000f31 	.word	0x08000f31
 8000924:	08000f31 	.word	0x08000f31
 8000928:	08000f31 	.word	0x08000f31
 800092c:	08000f31 	.word	0x08000f31
 8000930:	08000f31 	.word	0x08000f31
 8000934:	08000f31 	.word	0x08000f31
 8000938:	08000f31 	.word	0x08000f31
 800093c:	08000f31 	.word	0x08000f31
 8000940:	08000f31 	.word	0x08000f31
 8000944:	08000f31 	.word	0x08000f31
 8000948:	08000f31 	.word	0x08000f31
 800094c:	08000f31 	.word	0x08000f31
 8000950:	08000f31 	.word	0x08000f31
 8000954:	08000f31 	.word	0x08000f31
 8000958:	08000f31 	.word	0x08000f31
 800095c:	08000f13 	.word	0x08000f13
 8000960:	08000f31 	.word	0x08000f31
 8000964:	08000f31 	.word	0x08000f31
 8000968:	08000f31 	.word	0x08000f31
 800096c:	08000f31 	.word	0x08000f31
 8000970:	08000f31 	.word	0x08000f31
 8000974:	08000f31 	.word	0x08000f31
 8000978:	08000f31 	.word	0x08000f31
 800097c:	08000f31 	.word	0x08000f31
 8000980:	08000f31 	.word	0x08000f31
 8000984:	08000f31 	.word	0x08000f31
 8000988:	08000f31 	.word	0x08000f31
 800098c:	08000f31 	.word	0x08000f31
 8000990:	08000f31 	.word	0x08000f31
 8000994:	08000f31 	.word	0x08000f31
 8000998:	08000f31 	.word	0x08000f31
 800099c:	08000f19 	.word	0x08000f19
 80009a0:	08000f31 	.word	0x08000f31
 80009a4:	08000f31 	.word	0x08000f31
 80009a8:	08000f31 	.word	0x08000f31
 80009ac:	08000f31 	.word	0x08000f31
 80009b0:	08000f31 	.word	0x08000f31
 80009b4:	08000f31 	.word	0x08000f31
 80009b8:	08000f31 	.word	0x08000f31
 80009bc:	08000f31 	.word	0x08000f31
 80009c0:	08000f31 	.word	0x08000f31
 80009c4:	08000f31 	.word	0x08000f31
 80009c8:	08000f31 	.word	0x08000f31
 80009cc:	08000f31 	.word	0x08000f31
 80009d0:	08000f31 	.word	0x08000f31
 80009d4:	08000f31 	.word	0x08000f31
 80009d8:	08000f31 	.word	0x08000f31
 80009dc:	08000f25 	.word	0x08000f25
 80009e0:	08000f01 	.word	0x08000f01
 80009e4:	08000f31 	.word	0x08000f31
 80009e8:	08000f31 	.word	0x08000f31
 80009ec:	08000f31 	.word	0x08000f31
 80009f0:	08000f31 	.word	0x08000f31
 80009f4:	08000f31 	.word	0x08000f31
 80009f8:	08000f31 	.word	0x08000f31
 80009fc:	08000f31 	.word	0x08000f31
 8000a00:	08000f31 	.word	0x08000f31
 8000a04:	08000f31 	.word	0x08000f31
 8000a08:	08000f31 	.word	0x08000f31
 8000a0c:	08000f31 	.word	0x08000f31
 8000a10:	08000f31 	.word	0x08000f31
 8000a14:	08000f31 	.word	0x08000f31
 8000a18:	08000f31 	.word	0x08000f31
 8000a1c:	08000f31 	.word	0x08000f31
 8000a20:	08000eef 	.word	0x08000eef
	case 0x10: {
		printf("SDN1 ON\n");
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a26:	f016 fa27 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4618      	mov	r0, r3
 8000a32:	f008 fc73 	bl	800931c <HAL_GPIO_WritePin>
		break;
 8000a36:	e286      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a38:	4808      	ldr	r0, [pc, #32]	; (8000a5c <HAL_UART_RxCpltCallback+0x3e4>)
 8000a3a:	f016 fa1d 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a40:	2104      	movs	r1, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f008 fc69 	bl	800931c <HAL_GPIO_WritePin>
		break;
 8000a4a:	e27c      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
 8000a4c:	24000c24 	.word	0x24000c24
 8000a50:	240005ec 	.word	0x240005ec
 8000a54:	08017690 	.word	0x08017690
 8000a58:	58020400 	.word	0x58020400
 8000a5c:	08017698 	.word	0x08017698
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a60:	48be      	ldr	r0, [pc, #760]	; (8000d5c <HAL_UART_RxCpltCallback+0x6e4>)
 8000a62:	f016 fa09 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a66:	4bbe      	ldr	r3, [pc, #760]	; (8000d60 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a68:	2120      	movs	r1, #32
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f008 fc55 	bl	800931c <HAL_GPIO_WritePin>
		_2v5_enabled = 1;
 8000a72:	4bbc      	ldr	r3, [pc, #752]	; (8000d64 <HAL_UART_RxCpltCallback+0x6ec>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
		break;
 8000a78:	e265      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a7a:	48bb      	ldr	r0, [pc, #748]	; (8000d68 <HAL_UART_RxCpltCallback+0x6f0>)
 8000a7c:	f016 f9fc 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a80:	4bb7      	ldr	r3, [pc, #732]	; (8000d60 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a82:	2120      	movs	r1, #32
 8000a84:	2200      	movs	r2, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f008 fc48 	bl	800931c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a8c:	4bb4      	ldr	r3, [pc, #720]	; (8000d60 <HAL_UART_RxCpltCallback+0x6e8>)
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	2200      	movs	r2, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f008 fc42 	bl	800931c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a98:	4bb4      	ldr	r3, [pc, #720]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000a9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f008 fc3b 	bl	800931c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000aa6:	4bb1      	ldr	r3, [pc, #708]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aac:	2200      	movs	r2, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f008 fc34 	bl	800931c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000ab4:	4bad      	ldr	r3, [pc, #692]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aba:	2200      	movs	r2, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f008 fc2d 	bl	800931c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ac2:	4baa      	ldr	r3, [pc, #680]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ac4:	2140      	movs	r1, #64	; 0x40
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f008 fc27 	bl	800931c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ace:	4ba7      	ldr	r3, [pc, #668]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f008 fc21 	bl	800931c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ada:	4ba4      	ldr	r3, [pc, #656]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000adc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f008 fc1a 	bl	800931c <HAL_GPIO_WritePin>

		_2v5_enabled = 0;
 8000ae8:	4b9e      	ldr	r3, [pc, #632]	; (8000d64 <HAL_UART_RxCpltCallback+0x6ec>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
		_3v3_enabled = 0;
 8000aee:	4ba0      	ldr	r3, [pc, #640]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
		_5v_enabled = 0;
 8000af4:	4b9f      	ldr	r3, [pc, #636]	; (8000d74 <HAL_UART_RxCpltCallback+0x6fc>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
		_n3v3_enabled = 0;
 8000afa:	4b9f      	ldr	r3, [pc, #636]	; (8000d78 <HAL_UART_RxCpltCallback+0x700>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
		_n5v_enabled = 0;
 8000b00:	4b9e      	ldr	r3, [pc, #632]	; (8000d7c <HAL_UART_RxCpltCallback+0x704>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
		_15v_enabled = 0;
 8000b06:	4b9e      	ldr	r3, [pc, #632]	; (8000d80 <HAL_UART_RxCpltCallback+0x708>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
		_5vref_enabled = 0;
 8000b0c:	4b9d      	ldr	r3, [pc, #628]	; (8000d84 <HAL_UART_RxCpltCallback+0x70c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
		_n200v_enabled = 0;
 8000b12:	4b9d      	ldr	r3, [pc, #628]	; (8000d88 <HAL_UART_RxCpltCallback+0x710>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
		_n800v_enabled = 0;
 8000b18:	4b9c      	ldr	r3, [pc, #624]	; (8000d8c <HAL_UART_RxCpltCallback+0x714>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]

		break;
 8000b1e:	e212      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b20:	489b      	ldr	r0, [pc, #620]	; (8000d90 <HAL_UART_RxCpltCallback+0x718>)
 8000b22:	f016 f9a9 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b26:	4b91      	ldr	r3, [pc, #580]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f008 fbf4 	bl	800931c <HAL_GPIO_WritePin>
		_3v3_enabled = 1;
 8000b34:	4b8e      	ldr	r3, [pc, #568]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
		break;
 8000b3a:	e204      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b3c:	4895      	ldr	r0, [pc, #596]	; (8000d94 <HAL_UART_RxCpltCallback+0x71c>)
 8000b3e:	f016 f99b 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b42:	4b8a      	ldr	r3, [pc, #552]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f008 fbe6 	bl	800931c <HAL_GPIO_WritePin>
		_3v3_enabled = 0;
 8000b50:	4b87      	ldr	r3, [pc, #540]	; (8000d70 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
		break;
 8000b56:	e1f6      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b58:	488f      	ldr	r0, [pc, #572]	; (8000d98 <HAL_UART_RxCpltCallback+0x720>)
 8000b5a:	f016 f98d 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b5e:	4b83      	ldr	r3, [pc, #524]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	2201      	movs	r2, #1
 8000b64:	4618      	mov	r0, r3
 8000b66:	f008 fbd9 	bl	800931c <HAL_GPIO_WritePin>
		_5v_enabled = 1;
 8000b6a:	4b82      	ldr	r3, [pc, #520]	; (8000d74 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	701a      	strb	r2, [r3, #0]
		break;
 8000b70:	e1e9      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b72:	488a      	ldr	r0, [pc, #552]	; (8000d9c <HAL_UART_RxCpltCallback+0x724>)
 8000b74:	f016 f980 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b78:	4b7c      	ldr	r3, [pc, #496]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b7a:	2180      	movs	r1, #128	; 0x80
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f008 fbcc 	bl	800931c <HAL_GPIO_WritePin>
		_5v_enabled = 0;
 8000b84:	4b7b      	ldr	r3, [pc, #492]	; (8000d74 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
		break;
 8000b8a:	e1dc      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b8c:	4884      	ldr	r0, [pc, #528]	; (8000da0 <HAL_UART_RxCpltCallback+0x728>)
 8000b8e:	f016 f973 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b92:	4b76      	ldr	r3, [pc, #472]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000b94:	2140      	movs	r1, #64	; 0x40
 8000b96:	2201      	movs	r2, #1
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f008 fbbf 	bl	800931c <HAL_GPIO_WritePin>
		_n3v3_enabled = 1;
 8000b9e:	4b76      	ldr	r3, [pc, #472]	; (8000d78 <HAL_UART_RxCpltCallback+0x700>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	701a      	strb	r2, [r3, #0]
		break;
 8000ba4:	e1cf      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000ba6:	487f      	ldr	r0, [pc, #508]	; (8000da4 <HAL_UART_RxCpltCallback+0x72c>)
 8000ba8:	f016 f966 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bac:	4b6f      	ldr	r3, [pc, #444]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000bae:	2140      	movs	r1, #64	; 0x40
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f008 fbb2 	bl	800931c <HAL_GPIO_WritePin>
		_n3v3_enabled = 0;
 8000bb8:	4b6f      	ldr	r3, [pc, #444]	; (8000d78 <HAL_UART_RxCpltCallback+0x700>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
		break;
 8000bbe:	e1c2      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000bc0:	4879      	ldr	r0, [pc, #484]	; (8000da8 <HAL_UART_RxCpltCallback+0x730>)
 8000bc2:	f016 f959 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bc6:	4b69      	ldr	r3, [pc, #420]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f008 fba4 	bl	800931c <HAL_GPIO_WritePin>
		_n5v_enabled = 1;
 8000bd4:	4b69      	ldr	r3, [pc, #420]	; (8000d7c <HAL_UART_RxCpltCallback+0x704>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
		break;
 8000bda:	e1b4      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000bdc:	4873      	ldr	r0, [pc, #460]	; (8000dac <HAL_UART_RxCpltCallback+0x734>)
 8000bde:	f016 f94b 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000be2:	4b62      	ldr	r3, [pc, #392]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be8:	2200      	movs	r2, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f008 fb96 	bl	800931c <HAL_GPIO_WritePin>
		_n5v_enabled = 0;
 8000bf0:	4b62      	ldr	r3, [pc, #392]	; (8000d7c <HAL_UART_RxCpltCallback+0x704>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
		break;
 8000bf6:	e1a6      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000bf8:	486d      	ldr	r0, [pc, #436]	; (8000db0 <HAL_UART_RxCpltCallback+0x738>)
 8000bfa:	f016 f93d 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000bfe:	4b5b      	ldr	r3, [pc, #364]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c04:	2201      	movs	r2, #1
 8000c06:	4618      	mov	r0, r3
 8000c08:	f008 fb88 	bl	800931c <HAL_GPIO_WritePin>
		_15v_enabled = 1;
 8000c0c:	4b5c      	ldr	r3, [pc, #368]	; (8000d80 <HAL_UART_RxCpltCallback+0x708>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
		break;
 8000c12:	e198      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c14:	4867      	ldr	r0, [pc, #412]	; (8000db4 <HAL_UART_RxCpltCallback+0x73c>)
 8000c16:	f016 f92f 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c1a:	4b54      	ldr	r3, [pc, #336]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c20:	2200      	movs	r2, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f008 fb7a 	bl	800931c <HAL_GPIO_WritePin>
		_15v_enabled = 0;
 8000c28:	4b55      	ldr	r3, [pc, #340]	; (8000d80 <HAL_UART_RxCpltCallback+0x708>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
		break;
 8000c2e:	e18a      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c30:	4861      	ldr	r0, [pc, #388]	; (8000db8 <HAL_UART_RxCpltCallback+0x740>)
 8000c32:	f016 f921 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c36:	4b4d      	ldr	r3, [pc, #308]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f008 fb6c 	bl	800931c <HAL_GPIO_WritePin>
		_n200v_enabled = 1;
 8000c44:	4b50      	ldr	r3, [pc, #320]	; (8000d88 <HAL_UART_RxCpltCallback+0x710>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
		break;
 8000c4a:	e17c      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c4c:	485b      	ldr	r0, [pc, #364]	; (8000dbc <HAL_UART_RxCpltCallback+0x744>)
 8000c4e:	f016 f913 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c52:	4b46      	ldr	r3, [pc, #280]	; (8000d6c <HAL_UART_RxCpltCallback+0x6f4>)
 8000c54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c58:	2200      	movs	r2, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f008 fb5e 	bl	800931c <HAL_GPIO_WritePin>
		_n200v_enabled = 0;
 8000c60:	4b49      	ldr	r3, [pc, #292]	; (8000d88 <HAL_UART_RxCpltCallback+0x710>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]

		break;
 8000c66:	e16e      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c68:	4855      	ldr	r0, [pc, #340]	; (8000dc0 <HAL_UART_RxCpltCallback+0x748>)
 8000c6a:	f016 f905 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c6e:	4b3c      	ldr	r3, [pc, #240]	; (8000d60 <HAL_UART_RxCpltCallback+0x6e8>)
 8000c70:	2140      	movs	r1, #64	; 0x40
 8000c72:	2201      	movs	r2, #1
 8000c74:	4618      	mov	r0, r3
 8000c76:	f008 fb51 	bl	800931c <HAL_GPIO_WritePin>
		_n800v_enabled = 1;
 8000c7a:	4b44      	ldr	r3, [pc, #272]	; (8000d8c <HAL_UART_RxCpltCallback+0x714>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
		break;
 8000c80:	e161      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c82:	4850      	ldr	r0, [pc, #320]	; (8000dc4 <HAL_UART_RxCpltCallback+0x74c>)
 8000c84:	f016 f8f8 	bl	8016e78 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c88:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <HAL_UART_RxCpltCallback+0x6e8>)
 8000c8a:	2140      	movs	r1, #64	; 0x40
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f008 fb44 	bl	800931c <HAL_GPIO_WritePin>
		_n800v_enabled = 0;
 8000c94:	4b3d      	ldr	r3, [pc, #244]	; (8000d8c <HAL_UART_RxCpltCallback+0x714>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
		break;
 8000c9a:	e154      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000c9c:	484a      	ldr	r0, [pc, #296]	; (8000dc8 <HAL_UART_RxCpltCallback+0x750>)
 8000c9e:	f016 f8eb 	bl	8016e78 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2320      	movs	r3, #32
 8000ca8:	4a48      	ldr	r2, [pc, #288]	; (8000dcc <HAL_UART_RxCpltCallback+0x754>)
 8000caa:	2100      	movs	r1, #0
 8000cac:	4848      	ldr	r0, [pc, #288]	; (8000dd0 <HAL_UART_RxCpltCallback+0x758>)
 8000cae:	f004 ff99 	bl	8005be4 <HAL_DAC_Start_DMA>
		break;
 8000cb2:	e148      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000cb4:	4847      	ldr	r0, [pc, #284]	; (8000dd4 <HAL_UART_RxCpltCallback+0x75c>)
 8000cb6:	f016 f8df 	bl	8016e78 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4844      	ldr	r0, [pc, #272]	; (8000dd0 <HAL_UART_RxCpltCallback+0x758>)
 8000cbe:	f005 f851 	bl	8005d64 <HAL_DAC_Stop_DMA>
		break;
 8000cc2:	e140      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000cc4:	4844      	ldr	r0, [pc, #272]	; (8000dd8 <HAL_UART_RxCpltCallback+0x760>)
 8000cc6:	f016 f8d7 	bl	8016e78 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000cca:	210c      	movs	r1, #12
 8000ccc:	4843      	ldr	r0, [pc, #268]	; (8000ddc <HAL_UART_RxCpltCallback+0x764>)
 8000cce:	f00d ff29 	bl	800eb24 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000cd2:	4b43      	ldr	r3, [pc, #268]	; (8000de0 <HAL_UART_RxCpltCallback+0x768>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f012 fb8d 	bl	80133f8 <osEventFlagsSet>
		ERPA_ON = 1;
 8000cde:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <HAL_UART_RxCpltCallback+0x76c>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	701a      	strb	r2, [r3, #0]
		break;
 8000ce4:	e12f      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000ce6:	4840      	ldr	r0, [pc, #256]	; (8000de8 <HAL_UART_RxCpltCallback+0x770>)
 8000ce8:	f016 f8c6 	bl	8016e78 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000cec:	210c      	movs	r1, #12
 8000cee:	483b      	ldr	r0, [pc, #236]	; (8000ddc <HAL_UART_RxCpltCallback+0x764>)
 8000cf0:	f00e f872 	bl	800edd8 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000cf4:	4b3b      	ldr	r3, [pc, #236]	; (8000de4 <HAL_UART_RxCpltCallback+0x76c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
		break;
 8000cfa:	e124      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000cfc:	483b      	ldr	r0, [pc, #236]	; (8000dec <HAL_UART_RxCpltCallback+0x774>)
 8000cfe:	f016 f8bb 	bl	8016e78 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000d02:	2100      	movs	r1, #0
 8000d04:	483a      	ldr	r0, [pc, #232]	; (8000df0 <HAL_UART_RxCpltCallback+0x778>)
 8000d06:	f00d ff0d 	bl	800eb24 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000d0a:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <HAL_UART_RxCpltCallback+0x768>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2101      	movs	r1, #1
 8000d10:	4618      	mov	r0, r3
 8000d12:	f012 fb71 	bl	80133f8 <osEventFlagsSet>
		PMT_ON = 1;
 8000d16:	4b37      	ldr	r3, [pc, #220]	; (8000df4 <HAL_UART_RxCpltCallback+0x77c>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
		break;
 8000d1c:	e113      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000d1e:	4836      	ldr	r0, [pc, #216]	; (8000df8 <HAL_UART_RxCpltCallback+0x780>)
 8000d20:	f016 f8aa 	bl	8016e78 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000d24:	2100      	movs	r1, #0
 8000d26:	4832      	ldr	r0, [pc, #200]	; (8000df0 <HAL_UART_RxCpltCallback+0x778>)
 8000d28:	f00e f856 	bl	800edd8 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000d2c:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <HAL_UART_RxCpltCallback+0x77c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
		break;
 8000d32:	e108      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000d34:	4831      	ldr	r0, [pc, #196]	; (8000dfc <HAL_UART_RxCpltCallback+0x784>)
 8000d36:	f016 f89f 	bl	8016e78 <puts>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000d3a:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <HAL_UART_RxCpltCallback+0x768>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2104      	movs	r1, #4
 8000d40:	4618      	mov	r0, r3
 8000d42:	f012 fb59 	bl	80133f8 <osEventFlagsSet>
		HK_ON = 1;
 8000d46:	4b2e      	ldr	r3, [pc, #184]	; (8000e00 <HAL_UART_RxCpltCallback+0x788>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
		break;
 8000d4c:	e0fb      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000d4e:	482d      	ldr	r0, [pc, #180]	; (8000e04 <HAL_UART_RxCpltCallback+0x78c>)
 8000d50:	f016 f892 	bl	8016e78 <puts>
		HK_ON = 0;
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <HAL_UART_RxCpltCallback+0x788>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
		break;
 8000d5a:	e0f4      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
 8000d5c:	080176a4 	.word	0x080176a4
 8000d60:	58020400 	.word	0x58020400
 8000d64:	24000bd8 	.word	0x24000bd8
 8000d68:	080176b0 	.word	0x080176b0
 8000d6c:	58020800 	.word	0x58020800
 8000d70:	24000bd9 	.word	0x24000bd9
 8000d74:	24000bda 	.word	0x24000bda
 8000d78:	24000bdb 	.word	0x24000bdb
 8000d7c:	24000bdc 	.word	0x24000bdc
 8000d80:	24000bdd 	.word	0x24000bdd
 8000d84:	24000bde 	.word	0x24000bde
 8000d88:	24000bdf 	.word	0x24000bdf
 8000d8c:	24000be0 	.word	0x24000be0
 8000d90:	080176bc 	.word	0x080176bc
 8000d94:	080176c8 	.word	0x080176c8
 8000d98:	080176d8 	.word	0x080176d8
 8000d9c:	080176e4 	.word	0x080176e4
 8000da0:	080176f0 	.word	0x080176f0
 8000da4:	080176fc 	.word	0x080176fc
 8000da8:	0801770c 	.word	0x0801770c
 8000dac:	08017718 	.word	0x08017718
 8000db0:	08017724 	.word	0x08017724
 8000db4:	08017730 	.word	0x08017730
 8000db8:	0801773c 	.word	0x0801773c
 8000dbc:	0801774c 	.word	0x0801774c
 8000dc0:	0801775c 	.word	0x0801775c
 8000dc4:	08017768 	.word	0x08017768
 8000dc8:	08017778 	.word	0x08017778
 8000dcc:	2400000c 	.word	0x2400000c
 8000dd0:	240002f4 	.word	0x240002f4
 8000dd4:	08017788 	.word	0x08017788
 8000dd8:	08017798 	.word	0x08017798
 8000ddc:	24000554 	.word	0x24000554
 8000de0:	24000c20 	.word	0x24000c20
 8000de4:	24000c1b 	.word	0x24000c1b
 8000de8:	080177a0 	.word	0x080177a0
 8000dec:	080177ac 	.word	0x080177ac
 8000df0:	24000508 	.word	0x24000508
 8000df4:	24000c1a 	.word	0x24000c1a
 8000df8:	080177b4 	.word	0x080177b4
 8000dfc:	080177bc 	.word	0x080177bc
 8000e00:	24000c1c 	.word	0x24000c1c
 8000e04:	080177c4 	.word	0x080177c4
	}
	case 0x1D: {
		printf("Step Up\n");
 8000e08:	4851      	ldr	r0, [pc, #324]	; (8000f50 <HAL_UART_RxCpltCallback+0x8d8>)
 8000e0a:	f016 f835 	bl	8016e78 <puts>
		if (step < 17) {
 8000e0e:	4b51      	ldr	r3, [pc, #324]	; (8000f54 <HAL_UART_RxCpltCallback+0x8dc>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b10      	cmp	r3, #16
 8000e16:	f200 808f 	bhi.w	8000f38 <HAL_UART_RxCpltCallback+0x8c0>
			step += 2;
 8000e1a:	4b4e      	ldr	r3, [pc, #312]	; (8000f54 <HAL_UART_RxCpltCallback+0x8dc>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	3302      	adds	r3, #2
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b4b      	ldr	r3, [pc, #300]	; (8000f54 <HAL_UART_RxCpltCallback+0x8dc>)
 8000e26:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e28:	4b4a      	ldr	r3, [pc, #296]	; (8000f54 <HAL_UART_RxCpltCallback+0x8dc>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b49      	ldr	r3, [pc, #292]	; (8000f58 <HAL_UART_RxCpltCallback+0x8e0>)
 8000e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4848      	ldr	r0, [pc, #288]	; (8000f5c <HAL_UART_RxCpltCallback+0x8e4>)
 8000e3c:	f005 f835 	bl	8005eaa <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e40:	2100      	movs	r1, #0
 8000e42:	4846      	ldr	r0, [pc, #280]	; (8000f5c <HAL_UART_RxCpltCallback+0x8e4>)
 8000e44:	f004 fe76 	bl	8005b34 <HAL_DAC_Start>
		}
		break;
 8000e48:	e076      	b.n	8000f38 <HAL_UART_RxCpltCallback+0x8c0>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000e4a:	4845      	ldr	r0, [pc, #276]	; (8000f60 <HAL_UART_RxCpltCallback+0x8e8>)
 8000e4c:	f016 f814 	bl	8016e78 <puts>
		if (step > 3) {
 8000e50:	4b40      	ldr	r3, [pc, #256]	; (8000f54 <HAL_UART_RxCpltCallback+0x8dc>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d970      	bls.n	8000f3c <HAL_UART_RxCpltCallback+0x8c4>
			step -= 2;
 8000e5a:	4b3e      	ldr	r3, [pc, #248]	; (8000f54 <HAL_UART_RxCpltCallback+0x8dc>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	3b02      	subs	r3, #2
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	4b3b      	ldr	r3, [pc, #236]	; (8000f54 <HAL_UART_RxCpltCallback+0x8dc>)
 8000e66:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000e68:	4b3a      	ldr	r3, [pc, #232]	; (8000f54 <HAL_UART_RxCpltCallback+0x8dc>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b39      	ldr	r3, [pc, #228]	; (8000f58 <HAL_UART_RxCpltCallback+0x8e0>)
 8000e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4838      	ldr	r0, [pc, #224]	; (8000f5c <HAL_UART_RxCpltCallback+0x8e4>)
 8000e7c:	f005 f815 	bl	8005eaa <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000e80:	2100      	movs	r1, #0
 8000e82:	4836      	ldr	r0, [pc, #216]	; (8000f5c <HAL_UART_RxCpltCallback+0x8e4>)
 8000e84:	f004 fe56 	bl	8005b34 <HAL_DAC_Start>
		}
		break;
 8000e88:	e058      	b.n	8000f3c <HAL_UART_RxCpltCallback+0x8c4>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000e8a:	4836      	ldr	r0, [pc, #216]	; (8000f64 <HAL_UART_RxCpltCallback+0x8ec>)
 8000e8c:	f015 fff4 	bl	8016e78 <puts>
		if (cadence <= 50000) {
 8000e90:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <HAL_UART_RxCpltCallback+0x8f0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d851      	bhi.n	8000f40 <HAL_UART_RxCpltCallback+0x8c8>
			cadence *= 2;
 8000e9c:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <HAL_UART_RxCpltCallback+0x8f0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	4a31      	ldr	r2, [pc, #196]	; (8000f68 <HAL_UART_RxCpltCallback+0x8f0>)
 8000ea4:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000ea6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eaa:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <HAL_UART_RxCpltCallback+0x8f0>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000eb0:	e046      	b.n	8000f40 <HAL_UART_RxCpltCallback+0x8c8>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000eb2:	482e      	ldr	r0, [pc, #184]	; (8000f6c <HAL_UART_RxCpltCallback+0x8f4>)
 8000eb4:	f015 ffe0 	bl	8016e78 <puts>
		if (cadence >= 6250) {
 8000eb8:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <HAL_UART_RxCpltCallback+0x8f0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f641 0269 	movw	r2, #6249	; 0x1869
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d93f      	bls.n	8000f44 <HAL_UART_RxCpltCallback+0x8cc>
			cadence /= 2;
 8000ec4:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <HAL_UART_RxCpltCallback+0x8f0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	085b      	lsrs	r3, r3, #1
 8000eca:	4a27      	ldr	r2, [pc, #156]	; (8000f68 <HAL_UART_RxCpltCallback+0x8f0>)
 8000ecc:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000ece:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ed2:	4b25      	ldr	r3, [pc, #148]	; (8000f68 <HAL_UART_RxCpltCallback+0x8f0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000ed8:	e034      	b.n	8000f44 <HAL_UART_RxCpltCallback+0x8cc>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000eda:	4825      	ldr	r0, [pc, #148]	; (8000f70 <HAL_UART_RxCpltCallback+0x8f8>)
 8000edc:	f015 ffcc 	bl	8016e78 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 8000ee0:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <HAL_UART_RxCpltCallback+0x8fc>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2116      	movs	r1, #22
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f012 fa86 	bl	80133f8 <osEventFlagsSet>
		break;
 8000eec:	e02b      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000eee:	4822      	ldr	r0, [pc, #136]	; (8000f78 <HAL_UART_RxCpltCallback+0x900>)
 8000ef0:	f015 ffc2 	bl	8016e78 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000ef4:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <HAL_UART_RxCpltCallback+0x904>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f014 f823 	bl	8014f44 <xTaskResumeFromISR>
		break;
 8000efe:	e022      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000f00:	481f      	ldr	r0, [pc, #124]	; (8000f80 <HAL_UART_RxCpltCallback+0x908>)
 8000f02:	f015 ffb9 	bl	8016e78 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000f06:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <HAL_UART_RxCpltCallback+0x90c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f014 f81a 	bl	8014f44 <xTaskResumeFromISR>
		break;
 8000f10:	e019      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0xAF: {
		sync();
 8000f12:	f001 f9f7 	bl	8002304 <sync>
		break;
 8000f16:	e016      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0xBF: {
		xTaskResumeFromISR(Science_taskHandle);
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <HAL_UART_RxCpltCallback+0x910>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f014 f811 	bl	8014f44 <xTaskResumeFromISR>
		break;
 8000f22:	e010      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	case 0xCF: {
		xTaskResumeFromISR(Idle_taskHandle);
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_UART_RxCpltCallback+0x914>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f014 f80b 	bl	8014f44 <xTaskResumeFromISR>
		break;
 8000f2e:	e00a      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
	}
	default: {
		printf("Unknown Command\n");
 8000f30:	4817      	ldr	r0, [pc, #92]	; (8000f90 <HAL_UART_RxCpltCallback+0x918>)
 8000f32:	f015 ffa1 	bl	8016e78 <puts>
		break;
 8000f36:	e006      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
		break;
 8000f38:	bf00      	nop
 8000f3a:	e004      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
		break;
 8000f3c:	bf00      	nop
 8000f3e:	e002      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
		break;
 8000f40:	bf00      	nop
 8000f42:	e000      	b.n	8000f46 <HAL_UART_RxCpltCallback+0x8ce>
		break;
 8000f44:	bf00      	nop
	}
	}
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	080177cc 	.word	0x080177cc
 8000f54:	24000008 	.word	0x24000008
 8000f58:	2400000c 	.word	0x2400000c
 8000f5c:	240002f4 	.word	0x240002f4
 8000f60:	080177d4 	.word	0x080177d4
 8000f64:	080177e0 	.word	0x080177e0
 8000f68:	24000004 	.word	0x24000004
 8000f6c:	080177ec 	.word	0x080177ec
 8000f70:	080177f8 	.word	0x080177f8
 8000f74:	24000c20 	.word	0x24000c20
 8000f78:	08017808 	.word	0x08017808
 8000f7c:	24000704 	.word	0x24000704
 8000f80:	08017814 	.word	0x08017814
 8000f84:	24000964 	.word	0x24000964
 8000f88:	24000bd0 	.word	0x24000bd0
 8000f8c:	24000bd4 	.word	0x24000bd4
 8000f90:	08017820 	.word	0x08017820

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f98:	f003 f838 	bl	800400c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9c:	f000 f8c6 	bl	800112c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fa0:	f000 f944 	bl	800122c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa4:	f000 feba 	bl	8001d1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fa8:	f000 fe80 	bl	8001cac <MX_DMA_Init>
  MX_TIM3_Init();
 8000fac:	f000 fdc8 	bl	8001b40 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fb0:	f000 fe14 	bl	8001bdc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000fb4:	f000 fb50 	bl	8001658 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000fb8:	f000 fc46 	bl	8001848 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000fbc:	f000 fd4a 	bl	8001a54 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000fc0:	f000 fc9a 	bl	80018f8 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000fc4:	f000 fa84 	bl	80014d0 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000fc8:	f000 f960 	bl	800128c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000fcc:	f000 fb12 	bl	80015f4 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000fd0:	f000 fbe2 	bl	8001798 <MX_SPI1_Init>
  MX_RTC_Init();
 8000fd4:	f000 fb82 	bl	80016dc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fd8:	f012 f896 	bl	8013108 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2108      	movs	r1, #8
 8000fe0:	2080      	movs	r0, #128	; 0x80
 8000fe2:	f012 fb06 	bl	80135f2 <osMessageQueueNew>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a2f      	ldr	r2, [pc, #188]	; (80010a8 <main+0x114>)
 8000fea:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000fec:	4a2f      	ldr	r2, [pc, #188]	; (80010ac <main+0x118>)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	482f      	ldr	r0, [pc, #188]	; (80010b0 <main+0x11c>)
 8000ff2:	f012 f8d3 	bl	801319c <osThreadNew>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a2e      	ldr	r2, [pc, #184]	; (80010b4 <main+0x120>)
 8000ffa:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000ffc:	4a2e      	ldr	r2, [pc, #184]	; (80010b8 <main+0x124>)
 8000ffe:	2100      	movs	r1, #0
 8001000:	482e      	ldr	r0, [pc, #184]	; (80010bc <main+0x128>)
 8001002:	f012 f8cb 	bl	801319c <osThreadNew>
 8001006:	4603      	mov	r3, r0
 8001008:	4a2d      	ldr	r2, [pc, #180]	; (80010c0 <main+0x12c>)
 800100a:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 800100c:	4a2d      	ldr	r2, [pc, #180]	; (80010c4 <main+0x130>)
 800100e:	2100      	movs	r1, #0
 8001010:	482d      	ldr	r0, [pc, #180]	; (80010c8 <main+0x134>)
 8001012:	f012 f8c3 	bl	801319c <osThreadNew>
 8001016:	4603      	mov	r3, r0
 8001018:	4a2c      	ldr	r2, [pc, #176]	; (80010cc <main+0x138>)
 800101a:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 800101c:	4a2c      	ldr	r2, [pc, #176]	; (80010d0 <main+0x13c>)
 800101e:	2100      	movs	r1, #0
 8001020:	482c      	ldr	r0, [pc, #176]	; (80010d4 <main+0x140>)
 8001022:	f012 f8bb 	bl	801319c <osThreadNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a2b      	ldr	r2, [pc, #172]	; (80010d8 <main+0x144>)
 800102a:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 800102c:	4a2b      	ldr	r2, [pc, #172]	; (80010dc <main+0x148>)
 800102e:	2100      	movs	r1, #0
 8001030:	482b      	ldr	r0, [pc, #172]	; (80010e0 <main+0x14c>)
 8001032:	f012 f8b3 	bl	801319c <osThreadNew>
 8001036:	4603      	mov	r3, r0
 8001038:	4a2a      	ldr	r2, [pc, #168]	; (80010e4 <main+0x150>)
 800103a:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 800103c:	4a2a      	ldr	r2, [pc, #168]	; (80010e8 <main+0x154>)
 800103e:	2100      	movs	r1, #0
 8001040:	482a      	ldr	r0, [pc, #168]	; (80010ec <main+0x158>)
 8001042:	f012 f8ab 	bl	801319c <osThreadNew>
 8001046:	4603      	mov	r3, r0
 8001048:	4a29      	ldr	r2, [pc, #164]	; (80010f0 <main+0x15c>)
 800104a:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 800104c:	4a29      	ldr	r2, [pc, #164]	; (80010f4 <main+0x160>)
 800104e:	2100      	movs	r1, #0
 8001050:	4829      	ldr	r0, [pc, #164]	; (80010f8 <main+0x164>)
 8001052:	f012 f8a3 	bl	801319c <osThreadNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a28      	ldr	r2, [pc, #160]	; (80010fc <main+0x168>)
 800105a:	6013      	str	r3, [r2, #0]

  /* creation of FLAG_task */
  FLAG_taskHandle = osThreadNew(FLAG_init, NULL, &FLAG_task_attributes);
 800105c:	4a28      	ldr	r2, [pc, #160]	; (8001100 <main+0x16c>)
 800105e:	2100      	movs	r1, #0
 8001060:	4828      	ldr	r0, [pc, #160]	; (8001104 <main+0x170>)
 8001062:	f012 f89b 	bl	801319c <osThreadNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a27      	ldr	r2, [pc, #156]	; (8001108 <main+0x174>)
 800106a:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 800106c:	4a27      	ldr	r2, [pc, #156]	; (800110c <main+0x178>)
 800106e:	2100      	movs	r1, #0
 8001070:	4827      	ldr	r0, [pc, #156]	; (8001110 <main+0x17c>)
 8001072:	f012 f893 	bl	801319c <osThreadNew>
 8001076:	4603      	mov	r3, r0
 8001078:	4a26      	ldr	r2, [pc, #152]	; (8001114 <main+0x180>)
 800107a:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 800107c:	4a26      	ldr	r2, [pc, #152]	; (8001118 <main+0x184>)
 800107e:	2100      	movs	r1, #0
 8001080:	4826      	ldr	r0, [pc, #152]	; (800111c <main+0x188>)
 8001082:	f012 f88b 	bl	801319c <osThreadNew>
 8001086:	4603      	mov	r3, r0
 8001088:	4a25      	ldr	r2, [pc, #148]	; (8001120 <main+0x18c>)
 800108a:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 800108c:	2000      	movs	r0, #0
 800108e:	f012 f973 	bl	8013378 <osEventFlagsNew>
 8001092:	4603      	mov	r3, r0
 8001094:	4a23      	ldr	r2, [pc, #140]	; (8001124 <main+0x190>)
 8001096:	6013      	str	r3, [r2, #0]
	system_setup();
 8001098:	f001 f99e 	bl	80023d8 <system_setup>
	printf("Starting kernal...\n");
 800109c:	4822      	ldr	r0, [pc, #136]	; (8001128 <main+0x194>)
 800109e:	f015 feeb 	bl	8016e78 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010a2:	f012 f855 	bl	8013150 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80010a6:	e7fe      	b.n	80010a6 <main+0x112>
 80010a8:	24000c04 	.word	0x24000c04
 80010ac:	0801787c 	.word	0x0801787c
 80010b0:	08002b49 	.word	0x08002b49
 80010b4:	240006f8 	.word	0x240006f8
 80010b8:	080178a0 	.word	0x080178a0
 80010bc:	08002b8d 	.word	0x08002b8d
 80010c0:	240006fc 	.word	0x240006fc
 80010c4:	080178c4 	.word	0x080178c4
 80010c8:	08002bd1 	.word	0x08002bd1
 80010cc:	24000700 	.word	0x24000700
 80010d0:	080178e8 	.word	0x080178e8
 80010d4:	08002c15 	.word	0x08002c15
 80010d8:	24000704 	.word	0x24000704
 80010dc:	0801790c 	.word	0x0801790c
 80010e0:	08002cbd 	.word	0x08002cbd
 80010e4:	24000964 	.word	0x24000964
 80010e8:	08017930 	.word	0x08017930
 80010ec:	08002d65 	.word	0x08002d65
 80010f0:	24000bc4 	.word	0x24000bc4
 80010f4:	08017954 	.word	0x08017954
 80010f8:	08002e1d 	.word	0x08002e1d
 80010fc:	24000bc8 	.word	0x24000bc8
 8001100:	08017978 	.word	0x08017978
 8001104:	08002f15 	.word	0x08002f15
 8001108:	24000bcc 	.word	0x24000bcc
 800110c:	0801799c 	.word	0x0801799c
 8001110:	08002f51 	.word	0x08002f51
 8001114:	24000bd0 	.word	0x24000bd0
 8001118:	080179c0 	.word	0x080179c0
 800111c:	080030a9 	.word	0x080030a9
 8001120:	24000bd4 	.word	0x24000bd4
 8001124:	24000c20 	.word	0x24000c20
 8001128:	08017830 	.word	0x08017830

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b09c      	sub	sp, #112	; 0x70
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001136:	224c      	movs	r2, #76	; 0x4c
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f015 fd46 	bl	8016bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2220      	movs	r2, #32
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f015 fd40 	bl	8016bcc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800114c:	2002      	movs	r0, #2
 800114e:	f008 ff47 	bl	8009fe0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	4b33      	ldr	r3, [pc, #204]	; (8001224 <SystemClock_Config+0xf8>)
 8001158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115a:	4a32      	ldr	r2, [pc, #200]	; (8001224 <SystemClock_Config+0xf8>)
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001162:	4b30      	ldr	r3, [pc, #192]	; (8001224 <SystemClock_Config+0xf8>)
 8001164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <SystemClock_Config+0xfc>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001174:	4a2c      	ldr	r2, [pc, #176]	; (8001228 <SystemClock_Config+0xfc>)
 8001176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <SystemClock_Config+0xfc>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001188:	bf00      	nop
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <SystemClock_Config+0xfc>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001196:	d1f8      	bne.n	800118a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001198:	2303      	movs	r3, #3
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800119c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 80011a2:	2309      	movs	r3, #9
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a6:	2340      	movs	r3, #64	; 0x40
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011aa:	2302      	movs	r3, #2
 80011ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ae:	2302      	movs	r3, #2
 80011b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011b2:	2304      	movs	r3, #4
 80011b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 80011b6:	2320      	movs	r3, #32
 80011b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80011ba:	2304      	movs	r3, #4
 80011bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011be:	2304      	movs	r3, #4
 80011c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011c2:	2302      	movs	r3, #2
 80011c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80011c6:	2308      	movs	r3, #8
 80011c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	4618      	mov	r0, r3
 80011d8:	f008 ff3c 	bl	800a054 <HAL_RCC_OscConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80011e2:	f001 fffb 	bl	80031dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e6:	233f      	movs	r3, #63	; 0x3f
 80011e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ea:	2303      	movs	r3, #3
 80011ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2101      	movs	r1, #1
 800120a:	4618      	mov	r0, r3
 800120c:	f009 fb7c 	bl	800a908 <HAL_RCC_ClockConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001216:	f001 ffe1 	bl	80031dc <Error_Handler>
  }
}
 800121a:	bf00      	nop
 800121c:	3770      	adds	r7, #112	; 0x70
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	58000400 	.word	0x58000400
 8001228:	58024800 	.word	0x58024800

0800122c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b0b0      	sub	sp, #192	; 0xc0
 8001230:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001232:	463b      	mov	r3, r7
 8001234:	22c0      	movs	r2, #192	; 0xc0
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f015 fcc7 	bl	8016bcc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800123e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001242:	f04f 0300 	mov.w	r3, #0
 8001246:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800124a:	2304      	movs	r3, #4
 800124c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800124e:	2320      	movs	r3, #32
 8001250:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001252:	2308      	movs	r3, #8
 8001254:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001256:	2304      	movs	r3, #4
 8001258:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	4618      	mov	r0, r3
 8001274:	f009 ff16 	bl	800b0a4 <HAL_RCCEx_PeriphCLKConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800127e:	f001 ffad 	bl	80031dc <Error_Handler>
  }
}
 8001282:	bf00      	nop
 8001284:	37c0      	adds	r7, #192	; 0xc0
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800129e:	463b      	mov	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	615a      	str	r2, [r3, #20]
 80012ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012b0:	4b7a      	ldr	r3, [pc, #488]	; (800149c <MX_ADC1_Init+0x210>)
 80012b2:	4a7b      	ldr	r2, [pc, #492]	; (80014a0 <MX_ADC1_Init+0x214>)
 80012b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80012b6:	4b79      	ldr	r3, [pc, #484]	; (800149c <MX_ADC1_Init+0x210>)
 80012b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012be:	4b77      	ldr	r3, [pc, #476]	; (800149c <MX_ADC1_Init+0x210>)
 80012c0:	2208      	movs	r2, #8
 80012c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012c4:	4b75      	ldr	r3, [pc, #468]	; (800149c <MX_ADC1_Init+0x210>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ca:	4b74      	ldr	r3, [pc, #464]	; (800149c <MX_ADC1_Init+0x210>)
 80012cc:	2204      	movs	r2, #4
 80012ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012d0:	4b72      	ldr	r3, [pc, #456]	; (800149c <MX_ADC1_Init+0x210>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012d6:	4b71      	ldr	r3, [pc, #452]	; (800149c <MX_ADC1_Init+0x210>)
 80012d8:	2201      	movs	r2, #1
 80012da:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80012dc:	4b6f      	ldr	r3, [pc, #444]	; (800149c <MX_ADC1_Init+0x210>)
 80012de:	220b      	movs	r2, #11
 80012e0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e2:	4b6e      	ldr	r3, [pc, #440]	; (800149c <MX_ADC1_Init+0x210>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e8:	4b6c      	ldr	r3, [pc, #432]	; (800149c <MX_ADC1_Init+0x210>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ee:	4b6b      	ldr	r3, [pc, #428]	; (800149c <MX_ADC1_Init+0x210>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012f4:	4b69      	ldr	r3, [pc, #420]	; (800149c <MX_ADC1_Init+0x210>)
 80012f6:	2203      	movs	r2, #3
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012fa:	4b68      	ldr	r3, [pc, #416]	; (800149c <MX_ADC1_Init+0x210>)
 80012fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001300:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001302:	4b66      	ldr	r3, [pc, #408]	; (800149c <MX_ADC1_Init+0x210>)
 8001304:	2200      	movs	r2, #0
 8001306:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001308:	4b64      	ldr	r3, [pc, #400]	; (800149c <MX_ADC1_Init+0x210>)
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001310:	4862      	ldr	r0, [pc, #392]	; (800149c <MX_ADC1_Init+0x210>)
 8001312:	f003 f907 	bl	8004524 <HAL_ADC_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800131c:	f001 ff5e 	bl	80031dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	485c      	ldr	r0, [pc, #368]	; (800149c <MX_ADC1_Init+0x210>)
 800132c:	f004 fa22 	bl	8005774 <HAL_ADCEx_MultiModeConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001336:	f001 ff51 	bl	80031dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800133a:	4b5a      	ldr	r3, [pc, #360]	; (80014a4 <MX_ADC1_Init+0x218>)
 800133c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800133e:	2306      	movs	r3, #6
 8001340:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001342:	2307      	movs	r3, #7
 8001344:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001346:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800134a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800134c:	2304      	movs	r3, #4
 800134e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	4619      	mov	r1, r3
 800135c:	484f      	ldr	r0, [pc, #316]	; (800149c <MX_ADC1_Init+0x210>)
 800135e:	f003 fb65 	bl	8004a2c <HAL_ADC_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001368:	f001 ff38 	bl	80031dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800136c:	4b4e      	ldr	r3, [pc, #312]	; (80014a8 <MX_ADC1_Init+0x21c>)
 800136e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001370:	230c      	movs	r3, #12
 8001372:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001374:	463b      	mov	r3, r7
 8001376:	4619      	mov	r1, r3
 8001378:	4848      	ldr	r0, [pc, #288]	; (800149c <MX_ADC1_Init+0x210>)
 800137a:	f003 fb57 	bl	8004a2c <HAL_ADC_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001384:	f001 ff2a 	bl	80031dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001388:	4b48      	ldr	r3, [pc, #288]	; (80014ac <MX_ADC1_Init+0x220>)
 800138a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800138c:	2312      	movs	r3, #18
 800138e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	4841      	ldr	r0, [pc, #260]	; (800149c <MX_ADC1_Init+0x210>)
 8001396:	f003 fb49 	bl	8004a2c <HAL_ADC_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80013a0:	f001 ff1c 	bl	80031dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013a4:	4b42      	ldr	r3, [pc, #264]	; (80014b0 <MX_ADC1_Init+0x224>)
 80013a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013a8:	2318      	movs	r3, #24
 80013aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ac:	463b      	mov	r3, r7
 80013ae:	4619      	mov	r1, r3
 80013b0:	483a      	ldr	r0, [pc, #232]	; (800149c <MX_ADC1_Init+0x210>)
 80013b2:	f003 fb3b 	bl	8004a2c <HAL_ADC_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80013bc:	f001 ff0e 	bl	80031dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013c0:	4b3c      	ldr	r3, [pc, #240]	; (80014b4 <MX_ADC1_Init+0x228>)
 80013c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ca:	463b      	mov	r3, r7
 80013cc:	4619      	mov	r1, r3
 80013ce:	4833      	ldr	r0, [pc, #204]	; (800149c <MX_ADC1_Init+0x210>)
 80013d0:	f003 fb2c 	bl	8004a2c <HAL_ADC_ConfigChannel>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80013da:	f001 feff 	bl	80031dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013de:	4b36      	ldr	r3, [pc, #216]	; (80014b8 <MX_ADC1_Init+0x22c>)
 80013e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013e2:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	482b      	ldr	r0, [pc, #172]	; (800149c <MX_ADC1_Init+0x210>)
 80013ee:	f003 fb1d 	bl	8004a2c <HAL_ADC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80013f8:	f001 fef0 	bl	80031dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013fc:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <MX_ADC1_Init+0x230>)
 80013fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001400:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001404:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001406:	463b      	mov	r3, r7
 8001408:	4619      	mov	r1, r3
 800140a:	4824      	ldr	r0, [pc, #144]	; (800149c <MX_ADC1_Init+0x210>)
 800140c:	f003 fb0e 	bl	8004a2c <HAL_ADC_ConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001416:	f001 fee1 	bl	80031dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800141a:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <MX_ADC1_Init+0x234>)
 800141c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800141e:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001422:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	4619      	mov	r1, r3
 8001428:	481c      	ldr	r0, [pc, #112]	; (800149c <MX_ADC1_Init+0x210>)
 800142a:	f003 faff 	bl	8004a2c <HAL_ADC_ConfigChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001434:	f001 fed2 	bl	80031dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <MX_ADC1_Init+0x238>)
 800143a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800143c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001440:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001442:	463b      	mov	r3, r7
 8001444:	4619      	mov	r1, r3
 8001446:	4815      	ldr	r0, [pc, #84]	; (800149c <MX_ADC1_Init+0x210>)
 8001448:	f003 faf0 	bl	8004a2c <HAL_ADC_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001452:	f001 fec3 	bl	80031dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <MX_ADC1_Init+0x23c>)
 8001458:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800145a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800145e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001460:	463b      	mov	r3, r7
 8001462:	4619      	mov	r1, r3
 8001464:	480d      	ldr	r0, [pc, #52]	; (800149c <MX_ADC1_Init+0x210>)
 8001466:	f003 fae1 	bl	8004a2c <HAL_ADC_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001470:	f001 feb4 	bl	80031dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_ADC1_Init+0x240>)
 8001476:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001478:	f240 2306 	movw	r3, #518	; 0x206
 800147c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800147e:	463b      	mov	r3, r7
 8001480:	4619      	mov	r1, r3
 8001482:	4806      	ldr	r0, [pc, #24]	; (800149c <MX_ADC1_Init+0x210>)
 8001484:	f003 fad2 	bl	8004a2c <HAL_ADC_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 800148e:	f001 fea5 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	; 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2400013c 	.word	0x2400013c
 80014a0:	40022000 	.word	0x40022000
 80014a4:	0c900008 	.word	0x0c900008
 80014a8:	10c00010 	.word	0x10c00010
 80014ac:	14f00020 	.word	0x14f00020
 80014b0:	1d500080 	.word	0x1d500080
 80014b4:	21800100 	.word	0x21800100
 80014b8:	25b00200 	.word	0x25b00200
 80014bc:	2a000400 	.word	0x2a000400
 80014c0:	2e300800 	.word	0x2e300800
 80014c4:	3ac04000 	.word	0x3ac04000
 80014c8:	3ef08000 	.word	0x3ef08000
 80014cc:	47520000 	.word	0x47520000

080014d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
 80014e4:	615a      	str	r2, [r3, #20]
 80014e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014e8:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <MX_ADC3_Init+0x110>)
 80014ea:	4a3e      	ldr	r2, [pc, #248]	; (80015e4 <MX_ADC3_Init+0x114>)
 80014ec:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014ee:	4b3c      	ldr	r3, [pc, #240]	; (80015e0 <MX_ADC3_Init+0x110>)
 80014f0:	2208      	movs	r2, #8
 80014f2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014f4:	4b3a      	ldr	r3, [pc, #232]	; (80015e0 <MX_ADC3_Init+0x110>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014fa:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <MX_ADC3_Init+0x110>)
 80014fc:	2204      	movs	r2, #4
 80014fe:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001500:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <MX_ADC3_Init+0x110>)
 8001502:	2200      	movs	r2, #0
 8001504:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001506:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <MX_ADC3_Init+0x110>)
 8001508:	2201      	movs	r2, #1
 800150a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 800150c:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <MX_ADC3_Init+0x110>)
 800150e:	2204      	movs	r2, #4
 8001510:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001512:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <MX_ADC3_Init+0x110>)
 8001514:	2200      	movs	r2, #0
 8001516:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001518:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <MX_ADC3_Init+0x110>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800151e:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <MX_ADC3_Init+0x110>)
 8001520:	2200      	movs	r2, #0
 8001522:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001524:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <MX_ADC3_Init+0x110>)
 8001526:	2203      	movs	r2, #3
 8001528:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800152a:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <MX_ADC3_Init+0x110>)
 800152c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001530:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001532:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <MX_ADC3_Init+0x110>)
 8001534:	2200      	movs	r2, #0
 8001536:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001538:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <MX_ADC3_Init+0x110>)
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001540:	4827      	ldr	r0, [pc, #156]	; (80015e0 <MX_ADC3_Init+0x110>)
 8001542:	f002 ffef 	bl	8004524 <HAL_ADC_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 800154c:	f001 fe46 	bl	80031dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <MX_ADC3_Init+0x118>)
 8001552:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001554:	2306      	movs	r3, #6
 8001556:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001558:	2307      	movs	r3, #7
 800155a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800155c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001560:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001562:	2304      	movs	r3, #4
 8001564:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4619      	mov	r1, r3
 8001572:	481b      	ldr	r0, [pc, #108]	; (80015e0 <MX_ADC3_Init+0x110>)
 8001574:	f003 fa5a 	bl	8004a2c <HAL_ADC_ConfigChannel>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800157e:	f001 fe2d 	bl	80031dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <MX_ADC3_Init+0x11c>)
 8001584:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001586:	230c      	movs	r3, #12
 8001588:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	4619      	mov	r1, r3
 800158e:	4814      	ldr	r0, [pc, #80]	; (80015e0 <MX_ADC3_Init+0x110>)
 8001590:	f003 fa4c 	bl	8004a2c <HAL_ADC_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800159a:	f001 fe1f 	bl	80031dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800159e:	2301      	movs	r3, #1
 80015a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015a2:	2312      	movs	r3, #18
 80015a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	480d      	ldr	r0, [pc, #52]	; (80015e0 <MX_ADC3_Init+0x110>)
 80015ac:	f003 fa3e 	bl	8004a2c <HAL_ADC_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80015b6:	f001 fe11 	bl	80031dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_ADC3_Init+0x120>)
 80015bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015be:	2318      	movs	r3, #24
 80015c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	4806      	ldr	r0, [pc, #24]	; (80015e0 <MX_ADC3_Init+0x110>)
 80015c8:	f003 fa30 	bl	8004a2c <HAL_ADC_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80015d2:	f001 fe03 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	240001a0 	.word	0x240001a0
 80015e4:	58026000 	.word	0x58026000
 80015e8:	cb840000 	.word	0xcb840000
 80015ec:	cfb80000 	.word	0xcfb80000
 80015f0:	04300002 	.word	0x04300002

080015f4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2224      	movs	r2, #36	; 0x24
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f015 fae3 	bl	8016bcc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_DAC1_Init+0x5c>)
 8001608:	4a12      	ldr	r2, [pc, #72]	; (8001654 <MX_DAC1_Init+0x60>)
 800160a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800160c:	4810      	ldr	r0, [pc, #64]	; (8001650 <MX_DAC1_Init+0x5c>)
 800160e:	f004 fa6f 	bl	8005af0 <HAL_DAC_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001618:	f001 fde0 	bl	80031dc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001620:	230a      	movs	r3, #10
 8001622:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001628:	2301      	movs	r3, #1
 800162a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	4619      	mov	r1, r3
 8001636:	4806      	ldr	r0, [pc, #24]	; (8001650 <MX_DAC1_Init+0x5c>)
 8001638:	f004 fc8a 	bl	8005f50 <HAL_DAC_ConfigChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001642:	f001 fdcb 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	240002f4 	.word	0x240002f4
 8001654:	40007400 	.word	0x40007400

08001658 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <MX_I2C1_Init+0x78>)
 800165e:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <MX_I2C1_Init+0x7c>)
 8001660:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001662:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <MX_I2C1_Init+0x78>)
 8001664:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <MX_I2C1_Init+0x80>)
 8001666:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <MX_I2C1_Init+0x78>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166e:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_I2C1_Init+0x78>)
 8001670:	2201      	movs	r2, #1
 8001672:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001674:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <MX_I2C1_Init+0x78>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <MX_I2C1_Init+0x78>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_I2C1_Init+0x78>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <MX_I2C1_Init+0x78>)
 8001688:	2200      	movs	r2, #0
 800168a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <MX_I2C1_Init+0x78>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001692:	480f      	ldr	r0, [pc, #60]	; (80016d0 <MX_I2C1_Init+0x78>)
 8001694:	f007 fe5c 	bl	8009350 <HAL_I2C_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800169e:	f001 fd9d 	bl	80031dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016a2:	2100      	movs	r1, #0
 80016a4:	480a      	ldr	r0, [pc, #40]	; (80016d0 <MX_I2C1_Init+0x78>)
 80016a6:	f008 fba3 	bl	8009df0 <HAL_I2CEx_ConfigAnalogFilter>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016b0:	f001 fd94 	bl	80031dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016b4:	2100      	movs	r1, #0
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <MX_I2C1_Init+0x78>)
 80016b8:	f008 fbe5 	bl	8009e86 <HAL_I2CEx_ConfigDigitalFilter>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016c2:	f001 fd8b 	bl	80031dc <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80016c6:	2001      	movs	r0, #1
 80016c8:	f008 fc2a 	bl	8009f20 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	24000380 	.word	0x24000380
 80016d4:	40005400 	.word	0x40005400
 80016d8:	0020081f 	.word	0x0020081f

080016dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80016f0:	2300      	movs	r3, #0
 80016f2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016f4:	4b26      	ldr	r3, [pc, #152]	; (8001790 <MX_RTC_Init+0xb4>)
 80016f6:	4a27      	ldr	r2, [pc, #156]	; (8001794 <MX_RTC_Init+0xb8>)
 80016f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <MX_RTC_Init+0xb4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8001700:	4b23      	ldr	r3, [pc, #140]	; (8001790 <MX_RTC_Init+0xb4>)
 8001702:	2263      	movs	r2, #99	; 0x63
 8001704:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8001706:	4b22      	ldr	r3, [pc, #136]	; (8001790 <MX_RTC_Init+0xb4>)
 8001708:	f242 720f 	movw	r2, #9999	; 0x270f
 800170c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <MX_RTC_Init+0xb4>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <MX_RTC_Init+0xb4>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800171a:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <MX_RTC_Init+0xb4>)
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <MX_RTC_Init+0xb4>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001726:	481a      	ldr	r0, [pc, #104]	; (8001790 <MX_RTC_Init+0xb4>)
 8001728:	f00c f9ba 	bl	800daa0 <HAL_RTC_Init>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001732:	f001 fd53 	bl	80031dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001736:	2300      	movs	r3, #0
 8001738:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800173a:	2300      	movs	r3, #0
 800173c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800173e:	2300      	movs	r3, #0
 8001740:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	2201      	movs	r2, #1
 800174e:	4619      	mov	r1, r3
 8001750:	480f      	ldr	r0, [pc, #60]	; (8001790 <MX_RTC_Init+0xb4>)
 8001752:	f00c fa27 	bl	800dba4 <HAL_RTC_SetTime>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800175c:	f001 fd3e 	bl	80031dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001760:	2301      	movs	r3, #1
 8001762:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001764:	2301      	movs	r3, #1
 8001766:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001768:	2301      	movs	r3, #1
 800176a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800176c:	2300      	movs	r3, #0
 800176e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001770:	463b      	mov	r3, r7
 8001772:	2201      	movs	r2, #1
 8001774:	4619      	mov	r1, r3
 8001776:	4806      	ldr	r0, [pc, #24]	; (8001790 <MX_RTC_Init+0xb4>)
 8001778:	f00c fb0e 	bl	800dd98 <HAL_RTC_SetDate>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001782:	f001 fd2b 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	240003d4 	.word	0x240003d4
 8001794:	58004000 	.word	0x58004000

08001798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800179c:	4b28      	ldr	r3, [pc, #160]	; (8001840 <MX_SPI1_Init+0xa8>)
 800179e:	4a29      	ldr	r2, [pc, #164]	; (8001844 <MX_SPI1_Init+0xac>)
 80017a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <MX_SPI1_Init+0xa8>)
 80017a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <MX_SPI1_Init+0xa8>)
 80017ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017b0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80017b2:	4b23      	ldr	r3, [pc, #140]	; (8001840 <MX_SPI1_Init+0xa8>)
 80017b4:	220f      	movs	r2, #15
 80017b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017b8:	4b21      	ldr	r3, [pc, #132]	; (8001840 <MX_SPI1_Init+0xa8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017be:	4b20      	ldr	r3, [pc, #128]	; (8001840 <MX_SPI1_Init+0xa8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017c4:	4b1e      	ldr	r3, [pc, #120]	; (8001840 <MX_SPI1_Init+0xa8>)
 80017c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017cc:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <MX_SPI1_Init+0xa8>)
 80017ce:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d4:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <MX_SPI1_Init+0xa8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <MX_SPI1_Init+0xa8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e0:	4b17      	ldr	r3, [pc, #92]	; (8001840 <MX_SPI1_Init+0xa8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <MX_SPI1_Init+0xa8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <MX_SPI1_Init+0xa8>)
 80017ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017f2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <MX_SPI1_Init+0xa8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <MX_SPI1_Init+0xa8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <MX_SPI1_Init+0xa8>)
 8001802:	2200      	movs	r2, #0
 8001804:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <MX_SPI1_Init+0xa8>)
 8001808:	2200      	movs	r2, #0
 800180a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_SPI1_Init+0xa8>)
 800180e:	2200      	movs	r2, #0
 8001810:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <MX_SPI1_Init+0xa8>)
 8001814:	2200      	movs	r2, #0
 8001816:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_SPI1_Init+0xa8>)
 800181a:	2200      	movs	r2, #0
 800181c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <MX_SPI1_Init+0xa8>)
 8001820:	2200      	movs	r2, #0
 8001822:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_SPI1_Init+0xa8>)
 8001826:	2200      	movs	r2, #0
 8001828:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_SPI1_Init+0xa8>)
 800182c:	f00c fc5a 	bl	800e0e4 <HAL_SPI_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001836:	f001 fcd1 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	240003f8 	.word	0x240003f8
 8001844:	40013000 	.word	0x40013000

08001848 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800184c:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <MX_SPI2_Init+0xa8>)
 800184e:	4a29      	ldr	r2, [pc, #164]	; (80018f4 <MX_SPI2_Init+0xac>)
 8001850:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001852:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <MX_SPI2_Init+0xa8>)
 8001854:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001858:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800185a:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <MX_SPI2_Init+0xa8>)
 800185c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001860:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001862:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <MX_SPI2_Init+0xa8>)
 8001864:	220f      	movs	r2, #15
 8001866:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001868:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <MX_SPI2_Init+0xa8>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <MX_SPI2_Init+0xa8>)
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001874:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <MX_SPI2_Init+0xa8>)
 8001876:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800187a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <MX_SPI2_Init+0xa8>)
 800187e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001882:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <MX_SPI2_Init+0xa8>)
 8001886:	2200      	movs	r2, #0
 8001888:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_SPI2_Init+0xa8>)
 800188c:	2200      	movs	r2, #0
 800188e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_SPI2_Init+0xa8>)
 8001892:	2200      	movs	r2, #0
 8001894:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_SPI2_Init+0xa8>)
 8001898:	2200      	movs	r2, #0
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_SPI2_Init+0xa8>)
 800189e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <MX_SPI2_Init+0xa8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_SPI2_Init+0xa8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_SPI2_Init+0xa8>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_SPI2_Init+0xa8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_SPI2_Init+0xa8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <MX_SPI2_Init+0xa8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_SPI2_Init+0xa8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <MX_SPI2_Init+0xa8>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_SPI2_Init+0xa8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_SPI2_Init+0xa8>)
 80018dc:	f00c fc02 	bl	800e0e4 <HAL_SPI_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80018e6:	f001 fc79 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	24000480 	.word	0x24000480
 80018f4:	40003800 	.word	0x40003800

080018f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b09a      	sub	sp, #104	; 0x68
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
 8001928:	615a      	str	r2, [r3, #20]
 800192a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	222c      	movs	r2, #44	; 0x2c
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f015 f94a 	bl	8016bcc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001938:	4b44      	ldr	r3, [pc, #272]	; (8001a4c <MX_TIM1_Init+0x154>)
 800193a:	4a45      	ldr	r2, [pc, #276]	; (8001a50 <MX_TIM1_Init+0x158>)
 800193c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800193e:	4b43      	ldr	r3, [pc, #268]	; (8001a4c <MX_TIM1_Init+0x154>)
 8001940:	2231      	movs	r2, #49	; 0x31
 8001942:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001944:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <MX_TIM1_Init+0x154>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800194a:	4b40      	ldr	r3, [pc, #256]	; (8001a4c <MX_TIM1_Init+0x154>)
 800194c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001950:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001952:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <MX_TIM1_Init+0x154>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001958:	4b3c      	ldr	r3, [pc, #240]	; (8001a4c <MX_TIM1_Init+0x154>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195e:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <MX_TIM1_Init+0x154>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001964:	4839      	ldr	r0, [pc, #228]	; (8001a4c <MX_TIM1_Init+0x154>)
 8001966:	f00d f80e 	bl	800e986 <HAL_TIM_Base_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001970:	f001 fc34 	bl	80031dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001978:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800197a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800197e:	4619      	mov	r1, r3
 8001980:	4832      	ldr	r0, [pc, #200]	; (8001a4c <MX_TIM1_Init+0x154>)
 8001982:	f00d fd89 	bl	800f498 <HAL_TIM_ConfigClockSource>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800198c:	f001 fc26 	bl	80031dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001990:	482e      	ldr	r0, [pc, #184]	; (8001a4c <MX_TIM1_Init+0x154>)
 8001992:	f00d fb05 	bl	800efa0 <HAL_TIM_PWM_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800199c:	f001 fc1e 	bl	80031dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019b0:	4619      	mov	r1, r3
 80019b2:	4826      	ldr	r0, [pc, #152]	; (8001a4c <MX_TIM1_Init+0x154>)
 80019b4:	f00e fac6 	bl	800ff44 <HAL_TIMEx_MasterConfigSynchronization>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80019be:	f001 fc0d 	bl	80031dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c2:	2360      	movs	r3, #96	; 0x60
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80019c6:	f240 13df 	movw	r3, #479	; 0x1df
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019cc:	2300      	movs	r3, #0
 80019ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019d0:	2300      	movs	r3, #0
 80019d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019d8:	2300      	movs	r3, #0
 80019da:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019e4:	2200      	movs	r2, #0
 80019e6:	4619      	mov	r1, r3
 80019e8:	4818      	ldr	r0, [pc, #96]	; (8001a4c <MX_TIM1_Init+0x154>)
 80019ea:	f00d fc41 	bl	800f270 <HAL_TIM_PWM_ConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80019f4:	f001 fbf2 	bl	80031dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a10:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4807      	ldr	r0, [pc, #28]	; (8001a4c <MX_TIM1_Init+0x154>)
 8001a2e:	f00e fb17 	bl	8010060 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001a38:	f001 fbd0 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <MX_TIM1_Init+0x154>)
 8001a3e:	f001 ff5d 	bl	80038fc <HAL_TIM_MspPostInit>

}
 8001a42:	bf00      	nop
 8001a44:	3768      	adds	r7, #104	; 0x68
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	24000508 	.word	0x24000508
 8001a50:	40010000 	.word	0x40010000

08001a54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08e      	sub	sp, #56	; 0x38
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	f107 031c 	add.w	r3, r7, #28
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a74:	463b      	mov	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]
 8001a82:	615a      	str	r2, [r3, #20]
 8001a84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a86:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <MX_TIM2_Init+0xe8>)
 8001a88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <MX_TIM2_Init+0xe8>)
 8001a90:	2231      	movs	r2, #49	; 0x31
 8001a92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <MX_TIM2_Init+0xe8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001a9a:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <MX_TIM2_Init+0xe8>)
 8001a9c:	f640 4234 	movw	r2, #3124	; 0xc34
 8001aa0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <MX_TIM2_Init+0xe8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <MX_TIM2_Init+0xe8>)
 8001aaa:	2280      	movs	r2, #128	; 0x80
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aae:	4823      	ldr	r0, [pc, #140]	; (8001b3c <MX_TIM2_Init+0xe8>)
 8001ab0:	f00c ff69 	bl	800e986 <HAL_TIM_Base_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001aba:	f001 fb8f 	bl	80031dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ac4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	481c      	ldr	r0, [pc, #112]	; (8001b3c <MX_TIM2_Init+0xe8>)
 8001acc:	f00d fce4 	bl	800f498 <HAL_TIM_ConfigClockSource>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001ad6:	f001 fb81 	bl	80031dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ada:	4818      	ldr	r0, [pc, #96]	; (8001b3c <MX_TIM2_Init+0xe8>)
 8001adc:	f00d fa60 	bl	800efa0 <HAL_TIM_PWM_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001ae6:	f001 fb79 	bl	80031dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001aea:	2320      	movs	r3, #32
 8001aec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001af2:	f107 031c 	add.w	r3, r7, #28
 8001af6:	4619      	mov	r1, r3
 8001af8:	4810      	ldr	r0, [pc, #64]	; (8001b3c <MX_TIM2_Init+0xe8>)
 8001afa:	f00e fa23 	bl	800ff44 <HAL_TIMEx_MasterConfigSynchronization>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b04:	f001 fb6a 	bl	80031dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b08:	2360      	movs	r3, #96	; 0x60
 8001b0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b18:	463b      	mov	r3, r7
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4807      	ldr	r0, [pc, #28]	; (8001b3c <MX_TIM2_Init+0xe8>)
 8001b20:	f00d fba6 	bl	800f270 <HAL_TIM_PWM_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b2a:	f001 fb57 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b2e:	4803      	ldr	r0, [pc, #12]	; (8001b3c <MX_TIM2_Init+0xe8>)
 8001b30:	f001 fee4 	bl	80038fc <HAL_TIM_MspPostInit>

}
 8001b34:	bf00      	nop
 8001b36:	3738      	adds	r7, #56	; 0x38
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	24000554 	.word	0x24000554

08001b40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <MX_TIM3_Init+0x94>)
 8001b60:	4a1d      	ldr	r2, [pc, #116]	; (8001bd8 <MX_TIM3_Init+0x98>)
 8001b62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <MX_TIM3_Init+0x94>)
 8001b66:	2263      	movs	r2, #99	; 0x63
 8001b68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <MX_TIM3_Init+0x94>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <MX_TIM3_Init+0x94>)
 8001b72:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001b76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <MX_TIM3_Init+0x94>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <MX_TIM3_Init+0x94>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b84:	4813      	ldr	r0, [pc, #76]	; (8001bd4 <MX_TIM3_Init+0x94>)
 8001b86:	f00c fefe 	bl	800e986 <HAL_TIM_Base_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b90:	f001 fb24 	bl	80031dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b9a:	f107 0310 	add.w	r3, r7, #16
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <MX_TIM3_Init+0x94>)
 8001ba2:	f00d fc79 	bl	800f498 <HAL_TIM_ConfigClockSource>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001bac:	f001 fb16 	bl	80031dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_TIM3_Init+0x94>)
 8001bbe:	f00e f9c1 	bl	800ff44 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001bc8:	f001 fb08 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	3720      	adds	r7, #32
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	240005a0 	.word	0x240005a0
 8001bd8:	40000400 	.word	0x40000400

08001bdc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001be0:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001be2:	4a31      	ldr	r2, [pc, #196]	; (8001ca8 <MX_USART1_UART_Init+0xcc>)
 8001be4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001be6:	4b2f      	ldr	r3, [pc, #188]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001be8:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001bec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bee:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c00:	4b28      	ldr	r3, [pc, #160]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001c02:	220c      	movs	r2, #12
 8001c04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c06:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c0c:	4b25      	ldr	r3, [pc, #148]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c12:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c18:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c1e:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c24:	481f      	ldr	r0, [pc, #124]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001c26:	f00e fab7 	bl	8010198 <HAL_UART_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c30:	f001 fad4 	bl	80031dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c34:	2100      	movs	r1, #0
 8001c36:	481b      	ldr	r0, [pc, #108]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001c38:	f011 f957 	bl	8012eea <HAL_UARTEx_SetTxFifoThreshold>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c42:	f001 facb 	bl	80031dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c46:	2100      	movs	r1, #0
 8001c48:	4816      	ldr	r0, [pc, #88]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001c4a:	f011 f98c 	bl	8012f66 <HAL_UARTEx_SetRxFifoThreshold>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c54:	f001 fac2 	bl	80031dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c58:	4812      	ldr	r0, [pc, #72]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001c5a:	f011 f90d 	bl	8012e78 <HAL_UARTEx_DisableFifoMode>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c64:	f001 faba 	bl	80031dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8001c68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c6c:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001c6e:	f011 f97a 	bl	8012f66 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8001c72:	480c      	ldr	r0, [pc, #48]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001c74:	f011 f8c5 	bl	8012e02 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8001c78:	480a      	ldr	r0, [pc, #40]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001c7a:	f011 f88f 	bl	8012d9c <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c8c:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <MX_USART1_UART_Init+0xc8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c9c:	609a      	str	r2, [r3, #8]

	/* Put UART peripheral in reception process */
//	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
  /* USER CODE END USART1_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	240005ec 	.word	0x240005ec
 8001ca8:	40011000 	.word	0x40011000

08001cac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cb2:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <MX_DMA_Init+0x6c>)
 8001cb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cb8:	4a17      	ldr	r2, [pc, #92]	; (8001d18 <MX_DMA_Init+0x6c>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <MX_DMA_Init+0x6c>)
 8001cc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	607b      	str	r3, [r7, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2105      	movs	r1, #5
 8001cd4:	200b      	movs	r0, #11
 8001cd6:	f003 fee3 	bl	8005aa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001cda:	200b      	movs	r0, #11
 8001cdc:	f003 fefa 	bl	8005ad4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2105      	movs	r1, #5
 8001ce4:	200c      	movs	r0, #12
 8001ce6:	f003 fedb 	bl	8005aa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001cea:	200c      	movs	r0, #12
 8001cec:	f003 fef2 	bl	8005ad4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2105      	movs	r1, #5
 8001cf4:	200d      	movs	r0, #13
 8001cf6:	f003 fed3 	bl	8005aa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001cfa:	200d      	movs	r0, #13
 8001cfc:	f003 feea 	bl	8005ad4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2105      	movs	r1, #5
 8001d04:	2010      	movs	r0, #16
 8001d06:	f003 fecb 	bl	8005aa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d0a:	2010      	movs	r0, #16
 8001d0c:	f003 fee2 	bl	8005ad4 <HAL_NVIC_EnableIRQ>

}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	58024400 	.word	0x58024400

08001d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
 8001d30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d32:	4b34      	ldr	r3, [pc, #208]	; (8001e04 <MX_GPIO_Init+0xe8>)
 8001d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d38:	4a32      	ldr	r2, [pc, #200]	; (8001e04 <MX_GPIO_Init+0xe8>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d42:	4b30      	ldr	r3, [pc, #192]	; (8001e04 <MX_GPIO_Init+0xe8>)
 8001d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d50:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <MX_GPIO_Init+0xe8>)
 8001d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d56:	4a2b      	ldr	r2, [pc, #172]	; (8001e04 <MX_GPIO_Init+0xe8>)
 8001d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d60:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <MX_GPIO_Init+0xe8>)
 8001d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	4b25      	ldr	r3, [pc, #148]	; (8001e04 <MX_GPIO_Init+0xe8>)
 8001d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d74:	4a23      	ldr	r2, [pc, #140]	; (8001e04 <MX_GPIO_Init+0xe8>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d7e:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <MX_GPIO_Init+0xe8>)
 8001d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <MX_GPIO_Init+0xe8>)
 8001d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d92:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <MX_GPIO_Init+0xe8>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <MX_GPIO_Init+0xe8>)
 8001d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001daa:	2200      	movs	r2, #0
 8001dac:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001db0:	4815      	ldr	r0, [pc, #84]	; (8001e08 <MX_GPIO_Init+0xec>)
 8001db2:	f007 fab3 	bl	800931c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2164      	movs	r1, #100	; 0x64
 8001dba:	4814      	ldr	r0, [pc, #80]	; (8001e0c <MX_GPIO_Init+0xf0>)
 8001dbc:	f007 faae 	bl	800931c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001dc0:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001dc4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480b      	ldr	r0, [pc, #44]	; (8001e08 <MX_GPIO_Init+0xec>)
 8001dda:	f007 f8d7 	bl	8008f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001dde:	2364      	movs	r3, #100	; 0x64
 8001de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de2:	2301      	movs	r3, #1
 8001de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_GPIO_Init+0xf0>)
 8001df6:	f007 f8c9 	bl	8008f8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dfa:	bf00      	nop
 8001dfc:	3728      	adds	r7, #40	; 0x28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	58024400 	.word	0x58024400
 8001e08:	58020800 	.word	0x58020800
 8001e0c:	58020400 	.word	0x58020400

08001e10 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	b299      	uxth	r1, r3
 8001e22:	f107 0208 	add.w	r2, r7, #8
 8001e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	4817      	ldr	r0, [pc, #92]	; (8001e8c <poll_i2c_sensor+0x7c>)
 8001e30:	f007 fb2a 	bl	8009488 <HAL_I2C_Master_Transmit>
 8001e34:	4603      	mov	r3, r0
 8001e36:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001e38:	7b7b      	ldrb	r3, [r7, #13]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001e3e:	4814      	ldr	r0, [pc, #80]	; (8001e90 <poll_i2c_sensor+0x80>)
 8001e40:	f015 f81a 	bl	8016e78 <puts>
 8001e44:	e01c      	b.n	8001e80 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	b299      	uxth	r1, r3
 8001e4a:	f107 0208 	add.w	r2, r7, #8
 8001e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	2302      	movs	r3, #2
 8001e56:	480d      	ldr	r0, [pc, #52]	; (8001e8c <poll_i2c_sensor+0x7c>)
 8001e58:	f007 fc2e 	bl	80096b8 <HAL_I2C_Master_Receive>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001e60:	7b7b      	ldrb	r3, [r7, #13]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001e66:	480b      	ldr	r0, [pc, #44]	; (8001e94 <poll_i2c_sensor+0x84>)
 8001e68:	f015 f806 	bl	8016e78 <puts>
 8001e6c:	e008      	b.n	8001e80 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001e6e:	7a3b      	ldrb	r3, [r7, #8]
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001e74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e78:	7a7a      	ldrb	r2, [r7, #9]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	10db      	asrs	r3, r3, #3
 8001e7e:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001e80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	24000380 	.word	0x24000380
 8001e90:	08017844 	.word	0x08017844
 8001e94:	08017854 	.word	0x08017854

08001e98 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001ea0:	f107 010c 	add.w	r1, r7, #12
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	480c      	ldr	r0, [pc, #48]	; (8001edc <receive_pmt_spi+0x44>)
 8001eaa:	f00c fa3f 	bl	800e32c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001eae:	2300      	movs	r3, #0
 8001eb0:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001eb2:	7b7b      	ldrb	r3, [r7, #13]
 8001eb4:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <receive_pmt_spi+0x44>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <receive_pmt_spi+0x44>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ec4:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7bba      	ldrb	r2, [r7, #14]
 8001eca:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	701a      	strb	r2, [r3, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	240003f8 	.word	0x240003f8

08001ee0 <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001ee8:	f107 010c 	add.w	r1, r7, #12
 8001eec:	2364      	movs	r3, #100	; 0x64
 8001eee:	2201      	movs	r2, #1
 8001ef0:	480c      	ldr	r0, [pc, #48]	; (8001f24 <receive_erpa_spi+0x44>)
 8001ef2:	f00c fa1b 	bl	800e32c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001efa:	7b7b      	ldrb	r3, [r7, #13]
 8001efc:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <receive_erpa_spi+0x44>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <receive_erpa_spi+0x44>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f0c:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7bba      	ldrb	r2, [r7, #14]
 8001f12:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3301      	adds	r3, #1
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	701a      	strb	r2, [r3, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	24000480 	.word	0x24000480

08001f28 <receive_erpa_adc>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw data from the ERPA ADC and writes it to the
 * first element of the provided buffer.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <receive_erpa_adc+0x20>)
 8001f32:	885b      	ldrh	r3, [r3, #2]
 8001f34:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	89fa      	ldrh	r2, [r7, #14]
 8001f3a:	801a      	strh	r2, [r3, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	24000c80 	.word	0x24000c80

08001f4c <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001f54:	2390      	movs	r3, #144	; 0x90
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ff5a 	bl	8001e10 <poll_i2c_sensor>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001f60:	2394      	movs	r3, #148	; 0x94
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff54 	bl	8001e10 <poll_i2c_sensor>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001f6c:	2392      	movs	r3, #146	; 0x92
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ff4e 	bl	8001e10 <poll_i2c_sensor>
 8001f74:	4603      	mov	r3, r0
 8001f76:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001f78:	2396      	movs	r3, #150	; 0x96
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff48 	bl	8001e10 <poll_i2c_sensor>
 8001f80:	4603      	mov	r3, r0
 8001f82:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	89fa      	ldrh	r2, [r7, #14]
 8001f88:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	89ba      	ldrh	r2, [r7, #12]
 8001f90:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3304      	adds	r3, #4
 8001f96:	897a      	ldrh	r2, [r7, #10]
 8001f98:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3306      	adds	r3, #6
 8001f9e:	893a      	ldrh	r2, [r7, #8]
 8001fa0:	801a      	strh	r2, [r3, #0]
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <receive_hk_adc1>:
 * @param buffer Pointer to an array where ADC data will be stored.
 *
 * This function reads the raw housekeeping ADC1 data and writes it to the
 * corresponding elements of the provided buffer.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8001fb4:	4b25      	ldr	r3, [pc, #148]	; (800204c <receive_hk_adc1+0xa0>)
 8001fb6:	8a9b      	ldrh	r3, [r3, #20]
 8001fb8:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8001fba:	4b24      	ldr	r3, [pc, #144]	; (800204c <receive_hk_adc1+0xa0>)
 8001fbc:	8a1b      	ldrh	r3, [r3, #16]
 8001fbe:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8001fc0:	4b22      	ldr	r3, [pc, #136]	; (800204c <receive_hk_adc1+0xa0>)
 8001fc2:	899b      	ldrh	r3, [r3, #12]
 8001fc4:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <receive_hk_adc1+0xa0>)
 8001fc8:	8a5b      	ldrh	r3, [r3, #18]
 8001fca:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	; (800204c <receive_hk_adc1+0xa0>)
 8001fce:	889b      	ldrh	r3, [r3, #4]
 8001fd0:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <receive_hk_adc1+0xa0>)
 8001fd4:	88db      	ldrh	r3, [r3, #6]
 8001fd6:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	; (800204c <receive_hk_adc1+0xa0>)
 8001fda:	89db      	ldrh	r3, [r3, #14]
 8001fdc:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8001fde:	4b1b      	ldr	r3, [pc, #108]	; (800204c <receive_hk_adc1+0xa0>)
 8001fe0:	891b      	ldrh	r3, [r3, #8]
 8001fe2:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <receive_hk_adc1+0xa0>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001fea:	4b18      	ldr	r3, [pc, #96]	; (800204c <receive_hk_adc1+0xa0>)
 8001fec:	895b      	ldrh	r3, [r3, #10]
 8001fee:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	8bfa      	ldrh	r2, [r7, #30]
 8001ff4:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	8bba      	ldrh	r2, [r7, #28]
 8001ffc:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	8b7a      	ldrh	r2, [r7, #26]
 8002004:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3306      	adds	r3, #6
 800200a:	8b3a      	ldrh	r2, [r7, #24]
 800200c:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3308      	adds	r3, #8
 8002012:	8afa      	ldrh	r2, [r7, #22]
 8002014:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	330a      	adds	r3, #10
 800201a:	8aba      	ldrh	r2, [r7, #20]
 800201c:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	330c      	adds	r3, #12
 8002022:	8a7a      	ldrh	r2, [r7, #18]
 8002024:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	330e      	adds	r3, #14
 800202a:	8a3a      	ldrh	r2, [r7, #16]
 800202c:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3310      	adds	r3, #16
 8002032:	89fa      	ldrh	r2, [r7, #14]
 8002034:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3312      	adds	r3, #18
 800203a:	89ba      	ldrh	r2, [r7, #12]
 800203c:	801a      	strh	r2, [r3, #0]
}
 800203e:	bf00      	nop
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	24000c80 	.word	0x24000c80

08002050 <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <receive_hk_adc3+0x4c>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <receive_hk_adc3+0x4c>)
 8002060:	885b      	ldrh	r3, [r3, #2]
 8002062:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002064:	4b0d      	ldr	r3, [pc, #52]	; (800209c <receive_hk_adc3+0x4c>)
 8002066:	889b      	ldrh	r3, [r3, #4]
 8002068:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <receive_hk_adc3+0x4c>)
 800206c:	88db      	ldrh	r3, [r3, #6]
 800206e:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	89fa      	ldrh	r2, [r7, #14]
 8002074:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3302      	adds	r3, #2
 800207a:	89ba      	ldrh	r2, [r7, #12]
 800207c:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3304      	adds	r3, #4
 8002082:	897a      	ldrh	r2, [r7, #10]
 8002084:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3306      	adds	r3, #6
 800208a:	893a      	ldrh	r2, [r7, #8]
 800208c:	801a      	strh	r2, [r3, #0]
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	24000ca0 	.word	0x24000ca0

080020a0 <get_current_step>:
 * @return uint8_t The current step number or -1 if the DAC value is invalid.
 *
 * This function reads the current value from the DAC and returns the corresponding
 * step based on predefined DAC values.
 */
uint8_t get_current_step() {
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80020a6:	4b2e      	ldr	r3, [pc, #184]	; (8002160 <get_current_step+0xc0>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f640 72ff 	movw	r2, #4095	; 0xfff
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d04a      	beq.n	800214c <get_current_step+0xac>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020bc:	da48      	bge.n	8002150 <get_current_step+0xb0>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f640 628b 	movw	r2, #3723	; 0xe8b
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d03f      	beq.n	8002148 <get_current_step+0xa8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f640 628b 	movw	r2, #3723	; 0xe8b
 80020ce:	4293      	cmp	r3, r2
 80020d0:	dc3e      	bgt.n	8002150 <get_current_step+0xb0>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f640 421f 	movw	r2, #3103	; 0xc1f
 80020d8:	4293      	cmp	r3, r2
 80020da:	d033      	beq.n	8002144 <get_current_step+0xa4>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80020e2:	da35      	bge.n	8002150 <get_current_step+0xb0>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d028      	beq.n	8002140 <get_current_step+0xa0>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80020f4:	4293      	cmp	r3, r2
 80020f6:	dc2b      	bgt.n	8002150 <get_current_step+0xb0>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f240 7245 	movw	r2, #1861	; 0x745
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01c      	beq.n	800213c <get_current_step+0x9c>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f240 7245 	movw	r2, #1861	; 0x745
 8002108:	4293      	cmp	r3, r2
 800210a:	dc21      	bgt.n	8002150 <get_current_step+0xb0>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002112:	4293      	cmp	r3, r2
 8002114:	d010      	beq.n	8002138 <get_current_step+0x98>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800211c:	4293      	cmp	r3, r2
 800211e:	dc17      	bgt.n	8002150 <get_current_step+0xb0>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d004      	beq.n	8002130 <get_current_step+0x90>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 800212c:	d002      	beq.n	8002134 <get_current_step+0x94>
 800212e:	e00f      	b.n	8002150 <get_current_step+0xb0>
	case 0:
		return 0;
 8002130:	2300      	movs	r3, #0
 8002132:	e00e      	b.n	8002152 <get_current_step+0xb2>
	case 620:
		return 1;
 8002134:	2301      	movs	r3, #1
 8002136:	e00c      	b.n	8002152 <get_current_step+0xb2>
	case 1241:
		return 2;
 8002138:	2302      	movs	r3, #2
 800213a:	e00a      	b.n	8002152 <get_current_step+0xb2>
	case 1861:
		return 3;
 800213c:	2303      	movs	r3, #3
 800213e:	e008      	b.n	8002152 <get_current_step+0xb2>
	case 2482:
		return 4;
 8002140:	2304      	movs	r3, #4
 8002142:	e006      	b.n	8002152 <get_current_step+0xb2>
	case 3103:
		return 5;
 8002144:	2305      	movs	r3, #5
 8002146:	e004      	b.n	8002152 <get_current_step+0xb2>
	case 3723:
		return 6;
 8002148:	2306      	movs	r3, #6
 800214a:	e002      	b.n	8002152 <get_current_step+0xb2>
	case 4095:
		return 7;
 800214c:	2307      	movs	r3, #7
 800214e:	e000      	b.n	8002152 <get_current_step+0xb2>
	default:
		return -1;
 8002150:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40007400 	.word	0x40007400

08002164 <enter_stop>:
 *
 * This function sends an acknowledgment message, suspends all tasks, and
 * enters STOP mode. Upon waking up, it resumes all tasks and reconfigures
 * the system clock.
 */
void enter_stop() {
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0

	//flush_message_queue();
	send_ACK();
 8002168:	f000 f8f2 	bl	8002350 <send_ACK>

	vTaskSuspendAll();
 800216c:	f012 ffc2 	bl	80150f4 <vTaskSuspendAll>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002170:	2101      	movs	r1, #1
 8002172:	2001      	movs	r0, #1
 8002174:	f007 fef8 	bl	8009f68 <HAL_PWR_EnterSTOPMode>
	// When MCU is triggered to wake up, it resumes right here.
	// That's why it looks like we enter stop mode and then instantly
	// configure the clock and resume tasks, but in reality the MCU
	// just stops right here.

	SystemClock_Config();
 8002178:	f7fe ffd8 	bl	800112c <SystemClock_Config>
	xTaskResumeAll();
 800217c:	f012 ffc8 	bl	8015110 <xTaskResumeAll>
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}

08002184 <RTC_SetTime>:

void RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d051      	beq.n	800223e <RTC_SetTime+0xba>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2202      	movs	r2, #2
 80021a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	22ca      	movs	r2, #202	; 0xca
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2253      	movs	r2, #83	; 0x53
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f00b fee6 	bl	800df8c <RTC_EnterInitMode>
 80021c0:	4603      	mov	r3, r0
 80021c2:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d129      	bne.n	800221e <RTC_SetTime+0x9a>

		sTime->TimeFormat = 0x00U;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2200      	movs	r2, #0
 80021ce:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f00b ff4b 	bl	800e070 <RTC_ByteToBcd2>
 80021da:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 80021dc:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	785b      	ldrb	r3, [r3, #1]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f00b ff44 	bl	800e070 <RTC_ByteToBcd2>
 80021e8:	4603      	mov	r3, r0
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	789b      	ldrb	r3, [r3, #2]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f00b ff3c 	bl	800e070 <RTC_ByteToBcd2>
 80021f8:	4603      	mov	r3, r0
 80021fa:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	78db      	ldrb	r3, [r3, #3]
 8002202:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	6939      	ldr	r1, [r7, #16]
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <RTC_SetTime+0xc4>)
 8002210:	400b      	ands	r3, r1
 8002212:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f00b feed 	bl	800dff4 <RTC_ExitInitMode>
 800221a:	4603      	mov	r3, r0
 800221c:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	22ff      	movs	r2, #255	; 0xff
 8002224:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 8002226:	7dfb      	ldrb	r3, [r7, #23]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d103      	bne.n	8002234 <RTC_SetTime+0xb0>
		hrtc->State = HAL_RTC_STATE_READY;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2020 	strb.w	r2, [r3, #32]
 800223c:	e000      	b.n	8002240 <RTC_SetTime+0xbc>
	__HAL_LOCK(hrtc);
 800223e:	bf00      	nop

}
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	bd90      	pop	{r4, r7, pc}
 8002246:	bf00      	nop
 8002248:	007f7f7f 	.word	0x007f7f7f

0800224c <calibrateRTC>:
 *
 * This function extracts date and time information from the provided buffer
 * and sets the RTC accordingly. It handles years, months, days, hours, minutes,
 * seconds, and milliseconds.
 */
void calibrateRTC(uint8_t *buffer) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b08c      	sub	sp, #48	; 0x30
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	785b      	ldrb	r3, [r3, #1]
 8002258:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	789b      	ldrb	r3, [r3, #2]
 8002260:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	78db      	ldrb	r3, [r3, #3]
 8002268:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	791b      	ldrb	r3, [r3, #4]
 8002270:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	795b      	ldrb	r3, [r3, #5]
 8002278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	799b      	ldrb	r3, [r3, #6]
 8002280:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3307      	adds	r3, #7
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	b21a      	sxth	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3308      	adds	r3, #8
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b21b      	sxth	r3, r3
 8002296:	4313      	orrs	r3, r2
 8002298:	b21b      	sxth	r3, r3
 800229a:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 800229c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 80022a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 80022ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 80022b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022b8:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 80022ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80022be:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 80022c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80022c4:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 80022c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022c8:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 80022ca:	f107 0320 	add.w	r3, r7, #32
 80022ce:	2200      	movs	r2, #0
 80022d0:	4619      	mov	r1, r3
 80022d2:	480b      	ldr	r0, [pc, #44]	; (8002300 <calibrateRTC+0xb4>)
 80022d4:	f00b fd60 	bl	800dd98 <HAL_RTC_SetDate>
 80022d8:	4603      	mov	r3, r0
 80022da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 80022de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <calibrateRTC+0x9e>
		Error_Handler();
 80022e6:	f000 ff79 	bl	80031dc <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 80022ea:	f107 030c 	add.w	r3, r7, #12
 80022ee:	2200      	movs	r2, #0
 80022f0:	4619      	mov	r1, r3
 80022f2:	4803      	ldr	r0, [pc, #12]	; (8002300 <calibrateRTC+0xb4>)
 80022f4:	f7ff ff46 	bl	8002184 <RTC_SetTime>

//	status = HAL_RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
//	if (status != HAL_OK) {
//		Error_Handler();
//	}
}
 80022f8:	bf00      	nop
 80022fa:	3730      	adds	r7, #48	; 0x30
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	240003d4 	.word	0x240003d4

08002304 <sync>:
 * 1. Sends an acknowledgment to indicate the system is awake.
 * 2. Waits to receive an RTC-generated timestamp from the OBC/GUI.
 * 3. Calibrates the RTC with the received timestamp.
 * 4. Sends an acknowledgment to indicate the RTC calibration is complete.
 */
void sync() {
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
	send_ACK();
 800230a:	f000 f821 	bl	8002350 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 800230e:	480e      	ldr	r0, [pc, #56]	; (8002348 <sync+0x44>)
 8002310:	f00e f9b4 	bl	801067c <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002314:	2364      	movs	r3, #100	; 0x64
 8002316:	2209      	movs	r2, #9
 8002318:	490c      	ldr	r1, [pc, #48]	; (800234c <sync+0x48>)
 800231a:	480b      	ldr	r0, [pc, #44]	; (8002348 <sync+0x44>)
 800231c:	f00e f81a 	bl	8010354 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <sync+0x48>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2bff      	cmp	r3, #255	; 0xff
 800232a:	d1f3      	bne.n	8002314 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER);
 800232c:	4807      	ldr	r0, [pc, #28]	; (800234c <sync+0x48>)
 800232e:	f7ff ff8d 	bl	800224c <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002332:	2201      	movs	r2, #1
 8002334:	4905      	ldr	r1, [pc, #20]	; (800234c <sync+0x48>)
 8002336:	4804      	ldr	r0, [pc, #16]	; (8002348 <sync+0x44>)
 8002338:	f00e f8d4 	bl	80104e4 <HAL_UART_Receive_IT>

	send_ACK();
 800233c:	f000 f808 	bl	8002350 <send_ACK>
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	240005ec 	.word	0x240005ec
 800234c:	24000c24 	.word	0x24000c24

08002350 <send_ACK>:
 * @brief Sends an acknowledgment byte via UART.
 *
 * This function sends a single acknowledgment byte (0xFF) using the UART
 * interface to indicate a successful operation or state transition.
 */
void send_ACK() {
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <send_ACK+0x1c>)
 8002356:	22ff      	movs	r2, #255	; 0xff
 8002358:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 800235a:	2364      	movs	r3, #100	; 0x64
 800235c:	2201      	movs	r2, #1
 800235e:	4903      	ldr	r1, [pc, #12]	; (800236c <send_ACK+0x1c>)
 8002360:	4803      	ldr	r0, [pc, #12]	; (8002370 <send_ACK+0x20>)
 8002362:	f00d ff69 	bl	8010238 <HAL_UART_Transmit>
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	24000ca8 	.word	0x24000ca8
 8002370:	240005ec 	.word	0x240005ec

08002374 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <HAL_UART_TxCpltCallback+0x1c>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	24000000 	.word	0x24000000

08002394 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	4613      	mov	r3, r2
 80023a0:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f014 fbf3 	bl	8016b90 <malloc>
 80023aa:	4603      	mov	r3, r0
 80023ac:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	88fa      	ldrh	r2, [r7, #6]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f014 fbfb 	bl	8016bb0 <memcpy>
	packet.size = size;
 80023ba:	88fb      	ldrh	r3, [r7, #6]
 80023bc:	82bb      	strh	r3, [r7, #20]
	return packet;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	461a      	mov	r2, r3
 80023c2:	f107 0310 	add.w	r3, r7, #16
 80023c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80023ca:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <system_setup>:
 *
 * This function starts a timer channel, calibrates and starts ADCs with DMA,
 * and initializes UART reception. It sets up various hardware components
 * and checks for errors during the configuration process.
 */
void system_setup() {
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80023dc:	2100      	movs	r1, #0
 80023de:	481d      	ldr	r0, [pc, #116]	; (8002454 <system_setup+0x7c>)
 80023e0:	f00c fba0 	bl	800eb24 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 80023e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023e8:	f44f 729c 	mov.w	r2, #312	; 0x138
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80023ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80023f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023f6:	4818      	ldr	r0, [pc, #96]	; (8002458 <system_setup+0x80>)
 80023f8:	f003 f958 	bl	80056ac <HAL_ADCEx_Calibration_Start>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002402:	f000 feeb 	bl	80031dc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8002406:	220b      	movs	r2, #11
 8002408:	4914      	ldr	r1, [pc, #80]	; (800245c <system_setup+0x84>)
 800240a:	4813      	ldr	r0, [pc, #76]	; (8002458 <system_setup+0x80>)
 800240c:	f002 fa2c 	bl	8004868 <HAL_ADC_Start_DMA>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002416:	f000 fee1 	bl	80031dc <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800241a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800241e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002422:	480f      	ldr	r0, [pc, #60]	; (8002460 <system_setup+0x88>)
 8002424:	f003 f942 	bl	80056ac <HAL_ADCEx_Calibration_Start>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 800242e:	f000 fed5 	bl	80031dc <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002432:	2204      	movs	r2, #4
 8002434:	490b      	ldr	r1, [pc, #44]	; (8002464 <system_setup+0x8c>)
 8002436:	480a      	ldr	r0, [pc, #40]	; (8002460 <system_setup+0x88>)
 8002438:	f002 fa16 	bl	8004868 <HAL_ADC_Start_DMA>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002442:	f000 fecb 	bl	80031dc <Error_Handler>
	}
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002446:	2201      	movs	r2, #1
 8002448:	4907      	ldr	r1, [pc, #28]	; (8002468 <system_setup+0x90>)
 800244a:	4808      	ldr	r0, [pc, #32]	; (800246c <system_setup+0x94>)
 800244c:	f00e f84a 	bl	80104e4 <HAL_UART_Receive_IT>
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	240005a0 	.word	0x240005a0
 8002458:	2400013c 	.word	0x2400013c
 800245c:	24000c80 	.word	0x24000c80
 8002460:	240001a0 	.word	0x240001a0
 8002464:	24000ca0 	.word	0x24000ca0
 8002468:	24000c24 	.word	0x24000c24
 800246c:	240005ec 	.word	0x240005ec

08002470 <get_uptime>:
 * This function calculates the system uptime based on the `uptime_millis`
 * variable and the current value of the SysTick timer. It handles potential
 * rollovers by checking and correcting the values before storing the uptime
 * in the provided buffer.
 */
void get_uptime(uint8_t *buffer) {
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 800247c:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <get_uptime+0x88>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 8002482:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <get_uptime+0x8c>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8002488:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <get_uptime+0x88>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	429a      	cmp	r2, r3
 8002490:	d005      	beq.n	800249e <get_uptime+0x2e>
		ms = uptime_millis;
 8002492:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <get_uptime+0x88>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8002498:	4b18      	ldr	r3, [pc, #96]	; (80024fc <get_uptime+0x8c>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024a4:	fb03 f202 	mul.w	r2, r3, r2
 80024a8:	4b14      	ldr	r3, [pc, #80]	; (80024fc <get_uptime+0x8c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	3301      	adds	r3, #1
 80024ae:	4914      	ldr	r1, [pc, #80]	; (8002500 <get_uptime+0x90>)
 80024b0:	fba1 1303 	umull	r1, r3, r1, r3
 80024b4:	099b      	lsrs	r3, r3, #6
 80024b6:	6939      	ldr	r1, [r7, #16]
 80024b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	0e1b      	lsrs	r3, r3, #24
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	0c1a      	lsrs	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3301      	adds	r3, #1
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	0a1a      	lsrs	r2, r3, #8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3302      	adds	r3, #2
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3303      	adds	r3, #3
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	701a      	strb	r2, [r3, #0]
}
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	24000c00 	.word	0x24000c00
 80024fc:	e000e010 	.word	0xe000e010
 8002500:	10624dd3 	.word	0x10624dd3

08002504 <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	; 0x28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 800250c:	f107 0310 	add.w	r3, r7, #16
 8002510:	2200      	movs	r2, #0
 8002512:	4619      	mov	r1, r3
 8002514:	4821      	ldr	r0, [pc, #132]	; (800259c <getTimestamp+0x98>)
 8002516:	f00b fbe3 	bl	800dce0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 800251a:	f107 030c 	add.w	r3, r7, #12
 800251e:	2200      	movs	r2, #0
 8002520:	4619      	mov	r1, r3
 8002522:	481e      	ldr	r0, [pc, #120]	; (800259c <getTimestamp+0x98>)
 8002524:	f00b fcc0 	bl	800dea8 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2264      	movs	r2, #100	; 0x64
 800252c:	fb03 f202 	mul.w	r2, r3, r2
 8002530:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <getTimestamp+0x9c>)
 8002532:	1a9b      	subs	r3, r3, r2
 8002534:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3301      	adds	r3, #1
 8002540:	7b7a      	ldrb	r2, [r7, #13]
 8002542:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3302      	adds	r3, #2
 8002548:	7bba      	ldrb	r2, [r7, #14]
 800254a:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3303      	adds	r3, #3
 8002550:	7c3a      	ldrb	r2, [r7, #16]
 8002552:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3304      	adds	r3, #4
 8002558:	7c7a      	ldrb	r2, [r7, #17]
 800255a:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3305      	adds	r3, #5
 8002560:	7cba      	ldrb	r2, [r7, #18]
 8002562:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	0e1a      	lsrs	r2, r3, #24
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3306      	adds	r3, #6
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	0c1a      	lsrs	r2, r3, #16
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3307      	adds	r3, #7
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	0a1a      	lsrs	r2, r3, #8
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3308      	adds	r3, #8
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3309      	adds	r3, #9
 800258c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]
}
 8002592:	bf00      	nop
 8002594:	3728      	adds	r7, #40	; 0x28
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	240003d4 	.word	0x240003d4
 80025a0:	000f4240 	.word	0x000f4240

080025a4 <sample_pmt>:
 * PMT data, SPI data, and uptime information, and retrieves the current
 * uptime and PMT SPI data. It then constructs a data packet including synchronization
 * bytes, sequence information, and the retrieved data, and places the packet in
 * the message queue. Memory allocated for the data is subsequently freed.
 */
void sample_pmt() {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80025aa:	bf00      	nop
 80025ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025b0:	4833      	ldr	r0, [pc, #204]	; (8002680 <sample_pmt+0xdc>)
 80025b2:	f006 fe9b 	bl	80092ec <HAL_GPIO_ReadPin>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f7      	bne.n	80025ac <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 80025bc:	200a      	movs	r0, #10
 80025be:	f014 fae7 	bl	8016b90 <malloc>
 80025c2:	4603      	mov	r3, r0
 80025c4:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80025c6:	2002      	movs	r0, #2
 80025c8:	f014 fae2 	bl	8016b90 <malloc>
 80025cc:	4603      	mov	r3, r0
 80025ce:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80025d0:	2004      	movs	r0, #4
 80025d2:	f014 fadd 	bl	8016b90 <malloc>
 80025d6:	4603      	mov	r3, r0
 80025d8:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7ff ff48 	bl	8002470 <get_uptime>

	receive_pmt_spi(pmt_spi);
 80025e0:	6938      	ldr	r0, [r7, #16]
 80025e2:	f7ff fc59 	bl	8001e98 <receive_pmt_spi>

	buffer[0] = PMT_SYNC;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	22bb      	movs	r2, #187	; 0xbb
 80025ea:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3301      	adds	r3, #1
 80025f0:	22bb      	movs	r2, #187	; 0xbb
 80025f2:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80025f4:	4b23      	ldr	r3, [pc, #140]	; (8002684 <sample_pmt+0xe0>)
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3302      	adds	r3, #2
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002604:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <sample_pmt+0xe0>)
 8002606:	881a      	ldrh	r2, [r3, #0]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	3303      	adds	r3, #3
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	3304      	adds	r3, #4
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	7812      	ldrb	r2, [r2, #0]
 8002618:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	3305      	adds	r3, #5
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	7852      	ldrb	r2, [r2, #1]
 8002622:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3306      	adds	r3, #6
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	7812      	ldrb	r2, [r2, #0]
 800262c:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3307      	adds	r3, #7
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	7852      	ldrb	r2, [r2, #1]
 8002636:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3308      	adds	r3, #8
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	7892      	ldrb	r2, [r2, #2]
 8002640:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3309      	adds	r3, #9
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	78d2      	ldrb	r2, [r2, #3]
 800264a:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	220a      	movs	r2, #10
 8002650:	6979      	ldr	r1, [r7, #20]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fe9e 	bl	8002394 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <sample_pmt+0xe4>)
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	1d39      	adds	r1, r7, #4
 800265e:	2300      	movs	r3, #0
 8002660:	2200      	movs	r2, #0
 8002662:	f011 f839 	bl	80136d8 <osMessageQueuePut>
	free(buffer);
 8002666:	6978      	ldr	r0, [r7, #20]
 8002668:	f014 fa9a 	bl	8016ba0 <free>
	free(pmt_spi);
 800266c:	6938      	ldr	r0, [r7, #16]
 800266e:	f014 fa97 	bl	8016ba0 <free>
	free(uptime);
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f014 fa94 	bl	8016ba0 <free>
}
 8002678:	bf00      	nop
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	58020000 	.word	0x58020000
 8002684:	24000c10 	.word	0x24000c10
 8002688:	24000c04 	.word	0x24000c04

0800268c <sample_erpa>:
 * the ERPA data, retrieves uptime, SPI data, and ADC readings, and constructs
 * a data packet with synchronization bytes, sequence information, and the
 * collected data. The packet is then placed in the message queue, and the
 * allocated memory is freed.
 */
void sample_erpa() {
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002692:	bf00      	nop
 8002694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002698:	4848      	ldr	r0, [pc, #288]	; (80027bc <sample_erpa+0x130>)
 800269a:	f006 fe27 	bl	80092ec <HAL_GPIO_ReadPin>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f7      	bne.n	8002694 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80026a4:	200e      	movs	r0, #14
 80026a6:	f014 fa73 	bl	8016b90 <malloc>
 80026aa:	4603      	mov	r3, r0
 80026ac:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80026ae:	2002      	movs	r0, #2
 80026b0:	f014 fa6e 	bl	8016b90 <malloc>
 80026b4:	4603      	mov	r3, r0
 80026b6:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 80026b8:	2002      	movs	r0, #2
 80026ba:	f014 fa69 	bl	8016b90 <malloc>
 80026be:	4603      	mov	r3, r0
 80026c0:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80026c2:	2004      	movs	r0, #4
 80026c4:	f014 fa64 	bl	8016b90 <malloc>
 80026c8:	4603      	mov	r3, r0
 80026ca:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 80026cc:	23ff      	movs	r3, #255	; 0xff
 80026ce:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 80026d0:	6938      	ldr	r0, [r7, #16]
 80026d2:	f7ff fecd 	bl	8002470 <get_uptime>
	sweep_step = get_current_step();
 80026d6:	f7ff fce3 	bl	80020a0 <get_current_step>
 80026da:	4603      	mov	r3, r0
 80026dc:	73fb      	strb	r3, [r7, #15]

	receive_erpa_spi(erpa_spi);
 80026de:	69b8      	ldr	r0, [r7, #24]
 80026e0:	f7ff fbfe 	bl	8001ee0 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 80026e4:	6978      	ldr	r0, [r7, #20]
 80026e6:	f7ff fc1f 	bl	8001f28 <receive_erpa_adc>

	buffer[0] = ERPA_SYNC;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	22aa      	movs	r2, #170	; 0xaa
 80026ee:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	3301      	adds	r3, #1
 80026f4:	22aa      	movs	r2, #170	; 0xaa
 80026f6:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 80026f8:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <sample_erpa+0x134>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	0c1a      	lsrs	r2, r3, #16
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3302      	adds	r3, #2
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8002706:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <sample_erpa+0x134>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	0a1a      	lsrs	r2, r3, #8
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	3303      	adds	r3, #3
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 8002714:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <sample_erpa+0x134>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	3304      	adds	r3, #4
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	3305      	adds	r3, #5
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	b29a      	uxth	r2, r3
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	3306      	adds	r3, #6
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	881a      	ldrh	r2, [r3, #0]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	3307      	adds	r3, #7
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	3308      	adds	r3, #8
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	7812      	ldrb	r2, [r2, #0]
 800274c:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3309      	adds	r3, #9
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	7852      	ldrb	r2, [r2, #1]
 8002756:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	330a      	adds	r3, #10
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	7812      	ldrb	r2, [r2, #0]
 8002760:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	330b      	adds	r3, #11
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	7852      	ldrb	r2, [r2, #1]
 800276a:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	330c      	adds	r3, #12
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	7892      	ldrb	r2, [r2, #2]
 8002774:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	330d      	adds	r3, #13
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	78d2      	ldrb	r2, [r2, #3]
 800277e:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8002780:	1d3b      	adds	r3, r7, #4
 8002782:	220e      	movs	r2, #14
 8002784:	69f9      	ldr	r1, [r7, #28]
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fe04 	bl	8002394 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 800278c:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <sample_erpa+0x138>)
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	1d39      	adds	r1, r7, #4
 8002792:	2300      	movs	r3, #0
 8002794:	2200      	movs	r2, #0
 8002796:	f010 ff9f 	bl	80136d8 <osMessageQueuePut>
	free(buffer);
 800279a:	69f8      	ldr	r0, [r7, #28]
 800279c:	f014 fa00 	bl	8016ba0 <free>
	free(erpa_spi);
 80027a0:	69b8      	ldr	r0, [r7, #24]
 80027a2:	f014 f9fd 	bl	8016ba0 <free>
	free(erpa_adc);
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f014 f9fa 	bl	8016ba0 <free>
	free(uptime);
 80027ac:	6938      	ldr	r0, [r7, #16]
 80027ae:	f014 f9f7 	bl	8016ba0 <free>
}
 80027b2:	bf00      	nop
 80027b4:	3720      	adds	r7, #32
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	58020400 	.word	0x58020400
 80027c0:	24000c14 	.word	0x24000c14
 80027c4:	24000c04 	.word	0x24000c04

080027c8 <sample_hk>:
 * metrics, including voltage readings and temperatures. It then constructs
 * a data packet with synchronization bytes, sequence information, and sampled
 * data, and places the packet in the message queue. The allocated memory is
 * subsequently freed.
 */
void sample_hk() {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 80027ce:	2036      	movs	r0, #54	; 0x36
 80027d0:	f014 f9de 	bl	8016b90 <malloc>
 80027d4:	4603      	mov	r3, r0
 80027d6:	617b      	str	r3, [r7, #20]
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 80027d8:	2008      	movs	r0, #8
 80027da:	f014 f9d9 	bl	8016b90 <malloc>
 80027de:	4603      	mov	r3, r0
 80027e0:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 80027e2:	200a      	movs	r0, #10
 80027e4:	f014 f9d4 	bl	8016b90 <malloc>
 80027e8:	4603      	mov	r3, r0
 80027ea:	60fb      	str	r3, [r7, #12]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 80027ec:	2004      	movs	r0, #4
 80027ee:	f014 f9cf 	bl	8016b90 <malloc>
 80027f2:	4603      	mov	r3, r0
 80027f4:	60bb      	str	r3, [r7, #8]

	get_uptime(uptime);
 80027f6:	68b8      	ldr	r0, [r7, #8]
 80027f8:	f7ff fe3a 	bl	8002470 <get_uptime>
	getTimestamp(timestamp);
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f7ff fe81 	bl	8002504 <getTimestamp>
	receive_hk_i2c(hk_i2c);
 8002802:	6938      	ldr	r0, [r7, #16]
 8002804:	f7ff fba2 	bl	8001f4c <receive_hk_i2c>


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	22cc      	movs	r2, #204	; 0xcc
 800280c:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	3301      	adds	r3, #1
 8002812:	22cc      	movs	r2, #204	; 0xcc
 8002814:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002816:	4ba1      	ldr	r3, [pc, #644]	; (8002a9c <sample_hk+0x2d4>)
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	b29a      	uxth	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	3302      	adds	r3, #2
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002826:	4b9d      	ldr	r3, [pc, #628]	; (8002a9c <sample_hk+0x2d4>)
 8002828:	881a      	ldrh	r2, [r3, #0]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	3303      	adds	r3, #3
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 8002832:	4b9b      	ldr	r3, [pc, #620]	; (8002aa0 <sample_hk+0x2d8>)
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	b29a      	uxth	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	3304      	adds	r3, #4
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 8002842:	4b97      	ldr	r3, [pc, #604]	; (8002aa0 <sample_hk+0x2d8>)
 8002844:	881a      	ldrh	r2, [r3, #0]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	3305      	adds	r3, #5
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 800284e:	4b95      	ldr	r3, [pc, #596]	; (8002aa4 <sample_hk+0x2dc>)
 8002850:	881b      	ldrh	r3, [r3, #0]
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	b29a      	uxth	r2, r3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	3306      	adds	r3, #6
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 800285e:	4b91      	ldr	r3, [pc, #580]	; (8002aa4 <sample_hk+0x2dc>)
 8002860:	881a      	ldrh	r2, [r3, #0]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	3307      	adds	r3, #7
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002870:	121a      	asrs	r2, r3, #8
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	3308      	adds	r3, #8
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3309      	adds	r3, #9
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	3302      	adds	r3, #2
 800288c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002890:	121a      	asrs	r2, r3, #8
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	330a      	adds	r3, #10
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	3302      	adds	r3, #2
 800289e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	330b      	adds	r3, #11
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	3304      	adds	r3, #4
 80028ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b2:	121a      	asrs	r2, r3, #8
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	330c      	adds	r3, #12
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	3304      	adds	r3, #4
 80028c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	330d      	adds	r3, #13
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	3306      	adds	r3, #6
 80028d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028d4:	121a      	asrs	r2, r3, #8
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	330e      	adds	r3, #14
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	3306      	adds	r3, #6
 80028e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	330f      	adds	r3, #15
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 80028ee:	4b6e      	ldr	r3, [pc, #440]	; (8002aa8 <sample_hk+0x2e0>)
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3310      	adds	r3, #16
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 80028fe:	4b6a      	ldr	r3, [pc, #424]	; (8002aa8 <sample_hk+0x2e0>)
 8002900:	881a      	ldrh	r2, [r3, #0]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3311      	adds	r3, #17
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 800290a:	4b68      	ldr	r3, [pc, #416]	; (8002aac <sample_hk+0x2e4>)
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	b29a      	uxth	r2, r3
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	3312      	adds	r3, #18
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 800291a:	4b64      	ldr	r3, [pc, #400]	; (8002aac <sample_hk+0x2e4>)
 800291c:	881a      	ldrh	r2, [r3, #0]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	3313      	adds	r3, #19
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002926:	4b62      	ldr	r3, [pc, #392]	; (8002ab0 <sample_hk+0x2e8>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	b29a      	uxth	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3314      	adds	r3, #20
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 8002936:	4b5e      	ldr	r3, [pc, #376]	; (8002ab0 <sample_hk+0x2e8>)
 8002938:	881a      	ldrh	r2, [r3, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3315      	adds	r3, #21
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002942:	4b5c      	ldr	r3, [pc, #368]	; (8002ab4 <sample_hk+0x2ec>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	b29a      	uxth	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	3316      	adds	r3, #22
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 8002952:	4b58      	ldr	r3, [pc, #352]	; (8002ab4 <sample_hk+0x2ec>)
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3317      	adds	r3, #23
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 800295e:	4b56      	ldr	r3, [pc, #344]	; (8002ab8 <sample_hk+0x2f0>)
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	b29a      	uxth	r2, r3
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3318      	adds	r3, #24
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 800296e:	4b52      	ldr	r3, [pc, #328]	; (8002ab8 <sample_hk+0x2f0>)
 8002970:	881a      	ldrh	r2, [r3, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	3319      	adds	r3, #25
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 800297a:	4b50      	ldr	r3, [pc, #320]	; (8002abc <sample_hk+0x2f4>)
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	b29a      	uxth	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	331a      	adds	r3, #26
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 800298a:	4b4c      	ldr	r3, [pc, #304]	; (8002abc <sample_hk+0x2f4>)
 800298c:	881a      	ldrh	r2, [r3, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	331b      	adds	r3, #27
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 8002996:	4b4a      	ldr	r3, [pc, #296]	; (8002ac0 <sample_hk+0x2f8>)
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	b29a      	uxth	r2, r3
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	331c      	adds	r3, #28
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 80029a6:	4b46      	ldr	r3, [pc, #280]	; (8002ac0 <sample_hk+0x2f8>)
 80029a8:	881a      	ldrh	r2, [r3, #0]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	331d      	adds	r3, #29
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 80029b2:	4b44      	ldr	r3, [pc, #272]	; (8002ac4 <sample_hk+0x2fc>)
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	331e      	adds	r3, #30
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 80029c2:	4b40      	ldr	r3, [pc, #256]	; (8002ac4 <sample_hk+0x2fc>)
 80029c4:	881a      	ldrh	r2, [r3, #0]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	331f      	adds	r3, #31
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80029ce:	4b3e      	ldr	r3, [pc, #248]	; (8002ac8 <sample_hk+0x300>)
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	3320      	adds	r3, #32
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 80029de:	4b3a      	ldr	r3, [pc, #232]	; (8002ac8 <sample_hk+0x300>)
 80029e0:	881a      	ldrh	r2, [r3, #0]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	3321      	adds	r3, #33	; 0x21
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 80029ea:	4b38      	ldr	r3, [pc, #224]	; (8002acc <sample_hk+0x304>)
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3322      	adds	r3, #34	; 0x22
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 80029fa:	4b34      	ldr	r3, [pc, #208]	; (8002acc <sample_hk+0x304>)
 80029fc:	881a      	ldrh	r2, [r3, #0]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3323      	adds	r3, #35	; 0x23
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 8002a06:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <sample_hk+0x308>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	3324      	adds	r3, #36	; 0x24
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 8002a16:	4b2e      	ldr	r3, [pc, #184]	; (8002ad0 <sample_hk+0x308>)
 8002a18:	881a      	ldrh	r2, [r3, #0]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	3325      	adds	r3, #37	; 0x25
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]
	buffer[38] = ((_tmp1 & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002a22:	4b2c      	ldr	r3, [pc, #176]	; (8002ad4 <sample_hk+0x30c>)
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	3326      	adds	r3, #38	; 0x26
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]
	buffer[39] = (_tmp1 & 0xFF);           // TEMPURATURE 1 LSB
 8002a32:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <sample_hk+0x30c>)
 8002a34:	881a      	ldrh	r2, [r3, #0]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3327      	adds	r3, #39	; 0x27
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[0];
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	3328      	adds	r3, #40	; 0x28
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	7812      	ldrb	r2, [r2, #0]
 8002a46:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	3329      	adds	r3, #41	; 0x29
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	7852      	ldrb	r2, [r2, #1]
 8002a50:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	332a      	adds	r3, #42	; 0x2a
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	7892      	ldrb	r2, [r2, #2]
 8002a5a:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	332b      	adds	r3, #43	; 0x2b
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	78d2      	ldrb	r2, [r2, #3]
 8002a64:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	332c      	adds	r3, #44	; 0x2c
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	7912      	ldrb	r2, [r2, #4]
 8002a6e:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	332d      	adds	r3, #45	; 0x2d
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	7952      	ldrb	r2, [r2, #5]
 8002a78:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	332e      	adds	r3, #46	; 0x2e
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	7992      	ldrb	r2, [r2, #6]
 8002a82:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	332f      	adds	r3, #47	; 0x2f
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	79d2      	ldrb	r2, [r2, #7]
 8002a8c:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	3330      	adds	r3, #48	; 0x30
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	7a12      	ldrb	r2, [r2, #8]
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	e01e      	b.n	8002ad8 <sample_hk+0x310>
 8002a9a:	bf00      	nop
 8002a9c:	24000c18 	.word	0x24000c18
 8002aa0:	24000be2 	.word	0x24000be2
 8002aa4:	24000be4 	.word	0x24000be4
 8002aa8:	24000be6 	.word	0x24000be6
 8002aac:	24000be8 	.word	0x24000be8
 8002ab0:	24000bea 	.word	0x24000bea
 8002ab4:	24000bec 	.word	0x24000bec
 8002ab8:	24000bee 	.word	0x24000bee
 8002abc:	24000bf0 	.word	0x24000bf0
 8002ac0:	24000bf2 	.word	0x24000bf2
 8002ac4:	24000bf4 	.word	0x24000bf4
 8002ac8:	24000bf6 	.word	0x24000bf6
 8002acc:	24000bf8 	.word	0x24000bf8
 8002ad0:	24000bfa 	.word	0x24000bfa
 8002ad4:	24000bfc 	.word	0x24000bfc
	buffer[49] = timestamp[9];
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3331      	adds	r3, #49	; 0x31
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	7a52      	ldrb	r2, [r2, #9]
 8002ae0:	701a      	strb	r2, [r3, #0]
	buffer[50] = uptime[0];
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3332      	adds	r3, #50	; 0x32
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	7812      	ldrb	r2, [r2, #0]
 8002aea:	701a      	strb	r2, [r3, #0]
	buffer[51] = uptime[1];
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3333      	adds	r3, #51	; 0x33
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	7852      	ldrb	r2, [r2, #1]
 8002af4:	701a      	strb	r2, [r3, #0]
	buffer[52] = uptime[2];
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	3334      	adds	r3, #52	; 0x34
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	7892      	ldrb	r2, [r2, #2]
 8002afe:	701a      	strb	r2, [r3, #0]
	buffer[53] = uptime[3];
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	3335      	adds	r3, #53	; 0x35
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	78d2      	ldrb	r2, [r2, #3]
 8002b08:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8002b0a:	463b      	mov	r3, r7
 8002b0c:	2236      	movs	r2, #54	; 0x36
 8002b0e:	6979      	ldr	r1, [r7, #20]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fc3f 	bl	8002394 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002b16:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <sample_hk+0x37c>)
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	4639      	mov	r1, r7
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f010 fdda 	bl	80136d8 <osMessageQueuePut>

	free(buffer);
 8002b24:	6978      	ldr	r0, [r7, #20]
 8002b26:	f014 f83b 	bl	8016ba0 <free>
	free(hk_i2c);
 8002b2a:	6938      	ldr	r0, [r7, #16]
 8002b2c:	f014 f838 	bl	8016ba0 <free>
	free(timestamp);
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f014 f835 	bl	8016ba0 <free>
	free(uptime);
 8002b36:	68b8      	ldr	r0, [r7, #8]
 8002b38:	f014 f832 	bl	8016ba0 <free>
}
 8002b3c:	bf00      	nop
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	24000c04 	.word	0x24000c04

08002b48 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <PMT_init+0x38>)
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	f010 fce3 	bl	8013526 <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <PMT_init+0x3c>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d007      	beq.n	8002b7a <PMT_init+0x32>
			sample_pmt();
 8002b6a:	f7ff fd1b 	bl	80025a4 <sample_pmt>
			pmt_seq++;
 8002b6e:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <PMT_init+0x40>)
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	3301      	adds	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <PMT_init+0x40>)
 8002b78:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002b7a:	f010 fba1 	bl	80132c0 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002b7e:	e7e7      	b.n	8002b50 <PMT_init+0x8>
 8002b80:	24000c20 	.word	0x24000c20
 8002b84:	24000c1a 	.word	0x24000c1a
 8002b88:	24000c10 	.word	0x24000c10

08002b8c <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <ERPA_init+0x38>)
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	f010 fcc1 	bl	8013526 <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <ERPA_init+0x3c>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d006      	beq.n	8002bbc <ERPA_init+0x30>
			sample_erpa();
 8002bae:	f7ff fd6d 	bl	800268c <sample_erpa>
			erpa_seq++;
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <ERPA_init+0x40>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <ERPA_init+0x40>)
 8002bba:	6013      	str	r3, [r2, #0]
		}
		osThreadYield();
 8002bbc:	f010 fb80 	bl	80132c0 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002bc0:	e7e8      	b.n	8002b94 <ERPA_init+0x8>
 8002bc2:	bf00      	nop
 8002bc4:	24000c20 	.word	0x24000c20
 8002bc8:	24000c1b 	.word	0x24000c1b
 8002bcc:	24000c14 	.word	0x24000c14

08002bd0 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HK_init+0x38>)
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002be0:	2200      	movs	r2, #0
 8002be2:	2104      	movs	r1, #4
 8002be4:	f010 fc9f 	bl	8013526 <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 8002be8:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <HK_init+0x3c>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d007      	beq.n	8002c02 <HK_init+0x32>
			sample_hk();
 8002bf2:	f7ff fde9 	bl	80027c8 <sample_hk>
			hk_seq++;
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HK_init+0x40>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <HK_init+0x40>)
 8002c00:	801a      	strh	r2, [r3, #0]
		}
		osThreadYield();
 8002c02:	f010 fb5d 	bl	80132c0 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002c06:	e7e7      	b.n	8002bd8 <HK_init+0x8>
 8002c08:	24000c20 	.word	0x24000c20
 8002c0c:	24000c1c 	.word	0x24000c1c
 8002c10:	24000c18 	.word	0x24000c18

08002c14 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002c1c:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <GPIO_on_init+0x9c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f010 fb6d 	bl	8013300 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002c26:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <GPIO_on_init+0xa0>)
 8002c28:	2104      	movs	r1, #4
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f006 fb75 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002c32:	2064      	movs	r0, #100	; 0x64
 8002c34:	f010 fb85 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002c38:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <GPIO_on_init+0xa0>)
 8002c3a:	2120      	movs	r1, #32
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f006 fb6c 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002c44:	2064      	movs	r0, #100	; 0x64
 8002c46:	f010 fb7c 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002c4a:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <GPIO_on_init+0xa4>)
 8002c4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c50:	2201      	movs	r2, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f006 fb62 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002c58:	2064      	movs	r0, #100	; 0x64
 8002c5a:	f010 fb72 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002c5e:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <GPIO_on_init+0xa4>)
 8002c60:	2180      	movs	r1, #128	; 0x80
 8002c62:	2201      	movs	r2, #1
 8002c64:	4618      	mov	r0, r3
 8002c66:	f006 fb59 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002c6a:	2064      	movs	r0, #100	; 0x64
 8002c6c:	f010 fb69 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <GPIO_on_init+0xa4>)
 8002c72:	2140      	movs	r1, #64	; 0x40
 8002c74:	2201      	movs	r2, #1
 8002c76:	4618      	mov	r0, r3
 8002c78:	f006 fb50 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002c7c:	2064      	movs	r0, #100	; 0x64
 8002c7e:	f010 fb60 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <GPIO_on_init+0xa4>)
 8002c84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f006 fb46 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002c90:	2064      	movs	r0, #100	; 0x64
 8002c92:	f010 fb56 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <GPIO_on_init+0xa4>)
 8002c98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f006 fb3c 	bl	800931c <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002ca4:	4b02      	ldr	r3, [pc, #8]	; (8002cb0 <GPIO_on_init+0x9c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f010 fb29 	bl	8013300 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002cae:	e7ba      	b.n	8002c26 <GPIO_on_init+0x12>
 8002cb0:	24000704 	.word	0x24000704
 8002cb4:	58020400 	.word	0x58020400
 8002cb8:	58020800 	.word	0x58020800

08002cbc <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002cc4:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <GPIO_off_init+0x9c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f010 fb19 	bl	8013300 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002cce:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <GPIO_off_init+0xa0>)
 8002cd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f006 fb20 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002cdc:	2064      	movs	r0, #100	; 0x64
 8002cde:	f010 fb30 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002ce2:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <GPIO_off_init+0xa0>)
 8002ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ce8:	2200      	movs	r2, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f006 fb16 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002cf0:	2064      	movs	r0, #100	; 0x64
 8002cf2:	f010 fb26 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002cf6:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <GPIO_off_init+0xa0>)
 8002cf8:	2140      	movs	r1, #64	; 0x40
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f006 fb0d 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002d02:	2064      	movs	r0, #100	; 0x64
 8002d04:	f010 fb1d 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002d08:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <GPIO_off_init+0xa0>)
 8002d0a:	2180      	movs	r1, #128	; 0x80
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f006 fb04 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002d14:	2064      	movs	r0, #100	; 0x64
 8002d16:	f010 fb14 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002d1a:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <GPIO_off_init+0xa0>)
 8002d1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d20:	2200      	movs	r2, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f006 fafa 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002d28:	2064      	movs	r0, #100	; 0x64
 8002d2a:	f010 fb0a 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <GPIO_off_init+0xa4>)
 8002d30:	2120      	movs	r1, #32
 8002d32:	2200      	movs	r2, #0
 8002d34:	4618      	mov	r0, r3
 8002d36:	f006 faf1 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002d3a:	2064      	movs	r0, #100	; 0x64
 8002d3c:	f010 fb01 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <GPIO_off_init+0xa4>)
 8002d42:	2104      	movs	r1, #4
 8002d44:	2200      	movs	r2, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f006 fae8 	bl	800931c <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002d4c:	4b02      	ldr	r3, [pc, #8]	; (8002d58 <GPIO_off_init+0x9c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f010 fad5 	bl	8013300 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002d56:	e7ba      	b.n	8002cce <GPIO_off_init+0x12>
 8002d58:	24000964 	.word	0x24000964
 8002d5c:	58020800 	.word	0x58020800
 8002d60:	58020400 	.word	0x58020400

08002d64 <UART_TX_init>:
 *
 * @param argument Pointer to the argument passed to the thread (not used).
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002d74:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <UART_TX_init+0xa4>)
 8002d76:	6818      	ldr	r0, [r3, #0]
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4923      	ldr	r1, [pc, #140]	; (8002e0c <UART_TX_init+0xa8>)
 8002d80:	f010 fd0a 	bl	8013798 <osMessageQueueGet>
 8002d84:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d121      	bne.n	8002dd0 <UART_TX_init+0x6c>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002d8c:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <UART_TX_init+0xa8>)
 8002d8e:	889b      	ldrh	r3, [r3, #4]
 8002d90:	461a      	mov	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4413      	add	r3, r2
 8002d96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d9a:	d219      	bcs.n	8002dd0 <UART_TX_init+0x6c>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <UART_TX_init+0xac>)
 8002da0:	4413      	add	r3, r2
 8002da2:	4a1a      	ldr	r2, [pc, #104]	; (8002e0c <UART_TX_init+0xa8>)
 8002da4:	6811      	ldr	r1, [r2, #0]
 8002da6:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <UART_TX_init+0xa8>)
 8002da8:	8892      	ldrh	r2, [r2, #4]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f013 ff00 	bl	8016bb0 <memcpy>
					free(msg.array);
 8002db0:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <UART_TX_init+0xa8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f013 fef3 	bl	8016ba0 <free>
					total_size += msg.size;
 8002dba:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <UART_TX_init+0xa8>)
 8002dbc:	889b      	ldrh	r3, [r3, #4]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f240 32b1 	movw	r2, #945	; 0x3b1
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d803      	bhi.n	8002dd8 <UART_TX_init+0x74>
						break;
					}
				}
			}
		} while (status == osOK);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0ce      	beq.n	8002d74 <UART_TX_init+0x10>
 8002dd6:	e000      	b.n	8002dda <UART_TX_init+0x76>
						break;
 8002dd8:	bf00      	nop

		if (total_size > 0) {
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d010      	beq.n	8002e02 <UART_TX_init+0x9e>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	490a      	ldr	r1, [pc, #40]	; (8002e10 <UART_TX_init+0xac>)
 8002de8:	480a      	ldr	r0, [pc, #40]	; (8002e14 <UART_TX_init+0xb0>)
 8002dea:	f00d fbc7 	bl	801057c <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002dee:	e001      	b.n	8002df4 <UART_TX_init+0x90>
				osThreadYield();
 8002df0:	f010 fa66 	bl	80132c0 <osThreadYield>
			while (tx_flag == 0) {
 8002df4:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <UART_TX_init+0xb4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f9      	beq.n	8002df0 <UART_TX_init+0x8c>
			}

			// Reset the flag
			tx_flag = 0;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <UART_TX_init+0xb4>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002e02:	f010 fa5d 	bl	80132c0 <osThreadYield>
		total_size = 0;
 8002e06:	e7b3      	b.n	8002d70 <UART_TX_init+0xc>
 8002e08:	24000c04 	.word	0x24000c04
 8002e0c:	24000c08 	.word	0x24000c08
 8002e10:	24000cac 	.word	0x24000cac
 8002e14:	240005ec 	.word	0x240005ec
 8002e18:	24000000 	.word	0x24000000

08002e1c <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	/* Infinite loop */

	// TODO: Figure out how we should monitor busvmon, busimon, vsense, and vrefint
	for (;;) {
		osEventFlagsWait(event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 8002e24:	4b2c      	ldr	r3, [pc, #176]	; (8002ed8 <Voltage_Monitor_init+0xbc>)
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2108      	movs	r1, #8
 8002e30:	f010 fb79 	bl	8013526 <osEventFlagsWait>
		osWaitForever);

		uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 8002e34:	2014      	movs	r0, #20
 8002e36:	f013 feab 	bl	8016b90 <malloc>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	60fb      	str	r3, [r7, #12]
		uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002e3e:	2008      	movs	r0, #8
 8002e40:	f013 fea6 	bl	8016b90 <malloc>
 8002e44:	4603      	mov	r3, r0
 8002e46:	60bb      	str	r3, [r7, #8]

		receive_hk_adc1(hk_adc1);
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f7ff f8af 	bl	8001fac <receive_hk_adc1>
		receive_hk_adc3(hk_adc3);
 8002e4e:	68b8      	ldr	r0, [r7, #8]
 8002e50:	f7ff f8fe 	bl	8002050 <receive_hk_adc3>

		_vsense = hk_adc3[1];
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	885a      	ldrh	r2, [r3, #2]
 8002e58:	4b20      	ldr	r3, [pc, #128]	; (8002edc <Voltage_Monitor_init+0xc0>)
 8002e5a:	801a      	strh	r2, [r3, #0]
		_vrefint = hk_adc3[0];
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	881a      	ldrh	r2, [r3, #0]
 8002e60:	4b1f      	ldr	r3, [pc, #124]	; (8002ee0 <Voltage_Monitor_init+0xc4>)
 8002e62:	801a      	strh	r2, [r3, #0]
		_busvmon = hk_adc1[0];
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	881a      	ldrh	r2, [r3, #0]
 8002e68:	4b1e      	ldr	r3, [pc, #120]	; (8002ee4 <Voltage_Monitor_init+0xc8>)
 8002e6a:	801a      	strh	r2, [r3, #0]
		_busimon = hk_adc1[1];
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	885a      	ldrh	r2, [r3, #2]
 8002e70:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <Voltage_Monitor_init+0xcc>)
 8002e72:	801a      	strh	r2, [r3, #0]
		_2v5 = hk_adc1[2];
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	889a      	ldrh	r2, [r3, #4]
 8002e78:	4b1c      	ldr	r3, [pc, #112]	; (8002eec <Voltage_Monitor_init+0xd0>)
 8002e7a:	801a      	strh	r2, [r3, #0]
		_3v3 = hk_adc3[3];
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	88da      	ldrh	r2, [r3, #6]
 8002e80:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <Voltage_Monitor_init+0xd4>)
 8002e82:	801a      	strh	r2, [r3, #0]
		_5v = hk_adc1[6];
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	899a      	ldrh	r2, [r3, #12]
 8002e88:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <Voltage_Monitor_init+0xd8>)
 8002e8a:	801a      	strh	r2, [r3, #0]
		_n3v3 = hk_adc1[3];
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	88da      	ldrh	r2, [r3, #6]
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <Voltage_Monitor_init+0xdc>)
 8002e92:	801a      	strh	r2, [r3, #0]
		_n5v = hk_adc3[2];
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	889a      	ldrh	r2, [r3, #4]
 8002e98:	4b18      	ldr	r3, [pc, #96]	; (8002efc <Voltage_Monitor_init+0xe0>)
 8002e9a:	801a      	strh	r2, [r3, #0]
		_15v = hk_adc1[7];
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	89da      	ldrh	r2, [r3, #14]
 8002ea0:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <Voltage_Monitor_init+0xe4>)
 8002ea2:	801a      	strh	r2, [r3, #0]
		_5vref = hk_adc1[8];
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8a1a      	ldrh	r2, [r3, #16]
 8002ea8:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <Voltage_Monitor_init+0xe8>)
 8002eaa:	801a      	strh	r2, [r3, #0]
		_n200v = hk_adc1[4];
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	891a      	ldrh	r2, [r3, #8]
 8002eb0:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <Voltage_Monitor_init+0xec>)
 8002eb2:	801a      	strh	r2, [r3, #0]
		_n800v = hk_adc1[5];
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	895a      	ldrh	r2, [r3, #10]
 8002eb8:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <Voltage_Monitor_init+0xf0>)
 8002eba:	801a      	strh	r2, [r3, #0]
		_tmp1 = hk_adc1[9];
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8a5a      	ldrh	r2, [r3, #18]
 8002ec0:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <Voltage_Monitor_init+0xf4>)
 8002ec2:	801a      	strh	r2, [r3, #0]
				error_protocol(RAIL_n800v);
			}
		}
#endif

		free(hk_adc1);
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f013 fe6b 	bl	8016ba0 <free>
		free(hk_adc3);
 8002eca:	68b8      	ldr	r0, [r7, #8]
 8002ecc:	f013 fe68 	bl	8016ba0 <free>

		osThreadYield();
 8002ed0:	f010 f9f6 	bl	80132c0 <osThreadYield>
	for (;;) {
 8002ed4:	e7a6      	b.n	8002e24 <Voltage_Monitor_init+0x8>
 8002ed6:	bf00      	nop
 8002ed8:	24000c20 	.word	0x24000c20
 8002edc:	24000be2 	.word	0x24000be2
 8002ee0:	24000be4 	.word	0x24000be4
 8002ee4:	24000be6 	.word	0x24000be6
 8002ee8:	24000be8 	.word	0x24000be8
 8002eec:	24000bea 	.word	0x24000bea
 8002ef0:	24000bec 	.word	0x24000bec
 8002ef4:	24000bee 	.word	0x24000bee
 8002ef8:	24000bf0 	.word	0x24000bf0
 8002efc:	24000bf2 	.word	0x24000bf2
 8002f00:	24000bf4 	.word	0x24000bf4
 8002f04:	24000bf6 	.word	0x24000bf6
 8002f08:	24000bf8 	.word	0x24000bf8
 8002f0c:	24000bfa 	.word	0x24000bfa
 8002f10:	24000bfc 	.word	0x24000bfc

08002f14 <FLAG_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FLAG_init */
void FLAG_init(void *argument)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FLAG_init */
	/* Infinite loop */
	for (;;) {
		int current_flag = osEventFlagsGet(event_flags);
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <FLAG_init+0x38>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f010 fadf 	bl	80134e4 <osEventFlagsGet>
 8002f26:	4603      	mov	r3, r0
 8002f28:	60fb      	str	r3, [r7, #12]

		if ((current_flag & STOP_FLAG) != 0) {
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f003 0316 	and.w	r3, r3, #22
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d007      	beq.n	8002f44 <FLAG_init+0x30>
			osEventFlagsClear(event_flags, STOP_FLAG);
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <FLAG_init+0x38>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2116      	movs	r1, #22
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f010 faa0 	bl	8013480 <osEventFlagsClear>
			enter_stop();
 8002f40:	f7ff f910 	bl	8002164 <enter_stop>
		}
		osDelay(1);
 8002f44:	2001      	movs	r0, #1
 8002f46:	f010 f9fc 	bl	8013342 <osDelay>
	for (;;) {
 8002f4a:	e7e7      	b.n	8002f1c <FLAG_init+0x8>
 8002f4c:	24000c20 	.word	0x24000c20

08002f50 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */
	osThreadSuspend(Science_taskHandle);
 8002f58:	4b48      	ldr	r3, [pc, #288]	; (800307c <Science_init+0x12c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f010 f9cf 	bl	8013300 <osThreadSuspend>

  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002f62:	4b47      	ldr	r3, [pc, #284]	; (8003080 <Science_init+0x130>)
 8002f64:	2104      	movs	r1, #4
 8002f66:	2201      	movs	r2, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f006 f9d7 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002f6e:	2064      	movs	r0, #100	; 0x64
 8002f70:	f010 f9e7 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002f74:	4b42      	ldr	r3, [pc, #264]	; (8003080 <Science_init+0x130>)
 8002f76:	2120      	movs	r1, #32
 8002f78:	2201      	movs	r2, #1
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f006 f9ce 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002f80:	2064      	movs	r0, #100	; 0x64
 8002f82:	f010 f9de 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002f86:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <Science_init+0x134>)
 8002f88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f006 f9c4 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002f94:	2064      	movs	r0, #100	; 0x64
 8002f96:	f010 f9d4 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002f9a:	4b3a      	ldr	r3, [pc, #232]	; (8003084 <Science_init+0x134>)
 8002f9c:	2180      	movs	r1, #128	; 0x80
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f006 f9bb 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002fa6:	2064      	movs	r0, #100	; 0x64
 8002fa8:	f010 f9cb 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002fac:	4b35      	ldr	r3, [pc, #212]	; (8003084 <Science_init+0x134>)
 8002fae:	2140      	movs	r1, #64	; 0x40
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f006 f9b2 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002fb8:	2064      	movs	r0, #100	; 0x64
 8002fba:	f010 f9c2 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002fbe:	4b31      	ldr	r3, [pc, #196]	; (8003084 <Science_init+0x134>)
 8002fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f006 f9a8 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8002fcc:	2064      	movs	r0, #100	; 0x64
 8002fce:	f010 f9b8 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002fd2:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <Science_init+0x134>)
 8002fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fd8:	2201      	movs	r2, #1
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f006 f99e 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(300);
 8002fe0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002fe4:	f010 f9ad 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);// Enable n200v
 8002fe8:	4b26      	ldr	r3, [pc, #152]	; (8003084 <Science_init+0x134>)
 8002fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f006 f993 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(300);
 8002ff6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ffa:	f010 f9a2 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);// Enable n800v
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <Science_init+0x130>)
 8003000:	2140      	movs	r1, #64	; 0x40
 8003002:	2201      	movs	r2, #1
 8003004:	4618      	mov	r0, r3
 8003006:	f006 f989 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(300);
 800300a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800300e:	f010 f998 	bl	8013342 <osDelay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003012:	b672      	cpsid	i
}
 8003014:	bf00      	nop

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8003016:	2300      	movs	r3, #0
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	2320      	movs	r3, #32
 800301c:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <Science_init+0x138>)
 800301e:	2100      	movs	r1, #0
 8003020:	481a      	ldr	r0, [pc, #104]	; (800308c <Science_init+0x13c>)
 8003022:	f002 fddf 	bl	8005be4 <HAL_DAC_Start_DMA>
		HK_ON = 1;
 8003026:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <Science_init+0x140>)
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet on
 800302c:	210c      	movs	r1, #12
 800302e:	4819      	ldr	r0, [pc, #100]	; (8003094 <Science_init+0x144>)
 8003030:	f00b fd78 	bl	800eb24 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8003034:	4b18      	ldr	r3, [pc, #96]	; (8003098 <Science_init+0x148>)
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);				// PMT packet on
 800303a:	2100      	movs	r1, #0
 800303c:	4817      	ldr	r0, [pc, #92]	; (800309c <Science_init+0x14c>)
 800303e:	f00b fd71 	bl	800eb24 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8003042:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <Science_init+0x150>)
 8003044:	2201      	movs	r2, #1
 8003046:	701a      	strb	r2, [r3, #0]

		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8003048:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <Science_init+0x154>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2104      	movs	r1, #4
 800304e:	4618      	mov	r0, r3
 8003050:	f010 f9d2 	bl	80133f8 <osEventFlagsSet>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8003054:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <Science_init+0x154>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2102      	movs	r1, #2
 800305a:	4618      	mov	r0, r3
 800305c:	f010 f9cc 	bl	80133f8 <osEventFlagsSet>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8003060:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <Science_init+0x154>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2101      	movs	r1, #1
 8003066:	4618      	mov	r0, r3
 8003068:	f010 f9c6 	bl	80133f8 <osEventFlagsSet>
  __ASM volatile ("cpsie i" : : : "memory");
 800306c:	b662      	cpsie	i
}
 800306e:	bf00      	nop

		__enable_irq();

		osThreadSuspend(Science_taskHandle);
 8003070:	4b02      	ldr	r3, [pc, #8]	; (800307c <Science_init+0x12c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f010 f943 	bl	8013300 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 800307a:	e772      	b.n	8002f62 <Science_init+0x12>
 800307c:	24000bd0 	.word	0x24000bd0
 8003080:	58020400 	.word	0x58020400
 8003084:	58020800 	.word	0x58020800
 8003088:	2400000c 	.word	0x2400000c
 800308c:	240002f4 	.word	0x240002f4
 8003090:	24000c1c 	.word	0x24000c1c
 8003094:	24000554 	.word	0x24000554
 8003098:	24000c1b 	.word	0x24000c1b
 800309c:	24000508 	.word	0x24000508
 80030a0:	24000c1a 	.word	0x24000c1a
 80030a4:	24000c20 	.word	0x24000c20

080030a8 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */
	osThreadSuspend(Idle_taskHandle);
 80030b0:	4b39      	ldr	r3, [pc, #228]	; (8003198 <Idle_init+0xf0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f010 f923 	bl	8013300 <osThreadSuspend>

  /* Infinite loop */
  for(;;)
  {
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80030ba:	2100      	movs	r1, #0
 80030bc:	4837      	ldr	r0, [pc, #220]	; (800319c <Idle_init+0xf4>)
 80030be:	f00b fe8b 	bl	800edd8 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 80030c2:	4b37      	ldr	r3, [pc, #220]	; (80031a0 <Idle_init+0xf8>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 80030c8:	210c      	movs	r1, #12
 80030ca:	4836      	ldr	r0, [pc, #216]	; (80031a4 <Idle_init+0xfc>)
 80030cc:	f00b fe84 	bl	800edd8 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 80030d0:	4b35      	ldr	r3, [pc, #212]	; (80031a8 <Idle_init+0x100>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]
		HK_ON = 0;
 80030d6:	4b35      	ldr	r3, [pc, #212]	; (80031ac <Idle_init+0x104>)
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80030dc:	2064      	movs	r0, #100	; 0x64
 80030de:	f010 f930 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET); // Enable n800v
 80030e2:	4b33      	ldr	r3, [pc, #204]	; (80031b0 <Idle_init+0x108>)
 80030e4:	2140      	movs	r1, #64	; 0x40
 80030e6:	2200      	movs	r2, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f006 f917 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 80030ee:	2064      	movs	r0, #100	; 0x64
 80030f0:	f010 f927 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET); // Enable n200v
 80030f4:	4b2f      	ldr	r3, [pc, #188]	; (80031b4 <Idle_init+0x10c>)
 80030f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030fa:	2200      	movs	r2, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f006 f90d 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8003102:	2064      	movs	r0, #100	; 0x64
 8003104:	f010 f91d 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v off pc9
 8003108:	4b2a      	ldr	r3, [pc, #168]	; (80031b4 <Idle_init+0x10c>)
 800310a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800310e:	2200      	movs	r2, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f006 f903 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8003116:	2064      	movs	r0, #100	; 0x64
 8003118:	f010 f913 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v off pc8
 800311c:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <Idle_init+0x10c>)
 800311e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003122:	2200      	movs	r2, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f006 f8f9 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 800312a:	2064      	movs	r0, #100	; 0x64
 800312c:	f010 f909 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 off pc6
 8003130:	4b20      	ldr	r3, [pc, #128]	; (80031b4 <Idle_init+0x10c>)
 8003132:	2140      	movs	r1, #64	; 0x40
 8003134:	2200      	movs	r2, #0
 8003136:	4618      	mov	r0, r3
 8003138:	f006 f8f0 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 800313c:	2064      	movs	r0, #100	; 0x64
 800313e:	f010 f900 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v off pc7
 8003142:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <Idle_init+0x10c>)
 8003144:	2180      	movs	r1, #128	; 0x80
 8003146:	2200      	movs	r2, #0
 8003148:	4618      	mov	r0, r3
 800314a:	f006 f8e7 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 800314e:	2064      	movs	r0, #100	; 0x64
 8003150:	f010 f8f7 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 off pc1
 8003154:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <Idle_init+0x10c>)
 8003156:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800315a:	2200      	movs	r2, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f006 f8dd 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8003162:	2064      	movs	r0, #100	; 0x64
 8003164:	f010 f8ed 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys off pb5
 8003168:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <Idle_init+0x108>)
 800316a:	2120      	movs	r1, #32
 800316c:	2200      	movs	r2, #0
 800316e:	4618      	mov	r0, r3
 8003170:	f006 f8d4 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8003174:	2064      	movs	r0, #100	; 0x64
 8003176:	f010 f8e4 	bl	8013342 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 800317a:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <Idle_init+0x108>)
 800317c:	2104      	movs	r1, #4
 800317e:	2200      	movs	r2, #0
 8003180:	4618      	mov	r0, r3
 8003182:	f006 f8cb 	bl	800931c <HAL_GPIO_WritePin>
		osDelay(100);
 8003186:	2064      	movs	r0, #100	; 0x64
 8003188:	f010 f8db 	bl	8013342 <osDelay>

		osThreadSuspend(Idle_taskHandle);
 800318c:	4b02      	ldr	r3, [pc, #8]	; (8003198 <Idle_init+0xf0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f010 f8b5 	bl	8013300 <osThreadSuspend>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8003196:	e790      	b.n	80030ba <Idle_init+0x12>
 8003198:	24000bd4 	.word	0x24000bd4
 800319c:	24000508 	.word	0x24000508
 80031a0:	24000c1a 	.word	0x24000c1a
 80031a4:	24000554 	.word	0x24000554
 80031a8:	24000c1b 	.word	0x24000c1b
 80031ac:	24000c1c 	.word	0x24000c1c
 80031b0:	58020400 	.word	0x58020400
 80031b4:	58020800 	.word	0x58020800

080031b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d101      	bne.n	80031ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80031ca:	f000 ff5b 	bl	8004084 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40001000 	.word	0x40001000

080031dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80031e0:	b672      	cpsid	i
}
 80031e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80031e4:	e7fe      	b.n	80031e4 <Error_Handler+0x8>
	...

080031e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ee:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <HAL_MspInit+0x38>)
 80031f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031f4:	4a0a      	ldr	r2, [pc, #40]	; (8003220 <HAL_MspInit+0x38>)
 80031f6:	f043 0302 	orr.w	r3, r3, #2
 80031fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <HAL_MspInit+0x38>)
 8003200:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800320c:	2200      	movs	r2, #0
 800320e:	210f      	movs	r1, #15
 8003210:	f06f 0001 	mvn.w	r0, #1
 8003214:	f002 fc44 	bl	8005aa0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	58024400 	.word	0x58024400

08003224 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08e      	sub	sp, #56	; 0x38
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a7b      	ldr	r2, [pc, #492]	; (8003430 <HAL_ADC_MspInit+0x20c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	f040 8091 	bne.w	800336a <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003248:	4b7a      	ldr	r3, [pc, #488]	; (8003434 <HAL_ADC_MspInit+0x210>)
 800324a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800324e:	4a79      	ldr	r2, [pc, #484]	; (8003434 <HAL_ADC_MspInit+0x210>)
 8003250:	f043 0320 	orr.w	r3, r3, #32
 8003254:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003258:	4b76      	ldr	r3, [pc, #472]	; (8003434 <HAL_ADC_MspInit+0x210>)
 800325a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	623b      	str	r3, [r7, #32]
 8003264:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003266:	4b73      	ldr	r3, [pc, #460]	; (8003434 <HAL_ADC_MspInit+0x210>)
 8003268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800326c:	4a71      	ldr	r2, [pc, #452]	; (8003434 <HAL_ADC_MspInit+0x210>)
 800326e:	f043 0304 	orr.w	r3, r3, #4
 8003272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003276:	4b6f      	ldr	r3, [pc, #444]	; (8003434 <HAL_ADC_MspInit+0x210>)
 8003278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003284:	4b6b      	ldr	r3, [pc, #428]	; (8003434 <HAL_ADC_MspInit+0x210>)
 8003286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800328a:	4a6a      	ldr	r2, [pc, #424]	; (8003434 <HAL_ADC_MspInit+0x210>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003294:	4b67      	ldr	r3, [pc, #412]	; (8003434 <HAL_ADC_MspInit+0x210>)
 8003296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	61bb      	str	r3, [r7, #24]
 80032a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a2:	4b64      	ldr	r3, [pc, #400]	; (8003434 <HAL_ADC_MspInit+0x210>)
 80032a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032a8:	4a62      	ldr	r2, [pc, #392]	; (8003434 <HAL_ADC_MspInit+0x210>)
 80032aa:	f043 0302 	orr.w	r3, r3, #2
 80032ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032b2:	4b60      	ldr	r3, [pc, #384]	; (8003434 <HAL_ADC_MspInit+0x210>)
 80032b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80032c0:	2333      	movs	r3, #51	; 0x33
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032c4:	2303      	movs	r3, #3
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d0:	4619      	mov	r1, r3
 80032d2:	4859      	ldr	r0, [pc, #356]	; (8003438 <HAL_ADC_MspInit+0x214>)
 80032d4:	f005 fe5a 	bl	8008f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 80032d8:	23ce      	movs	r3, #206	; 0xce
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032dc:	2303      	movs	r3, #3
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e8:	4619      	mov	r1, r3
 80032ea:	4854      	ldr	r0, [pc, #336]	; (800343c <HAL_ADC_MspInit+0x218>)
 80032ec:	f005 fe4e 	bl	8008f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032f0:	2303      	movs	r3, #3
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032f4:	2303      	movs	r3, #3
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003300:	4619      	mov	r1, r3
 8003302:	484f      	ldr	r0, [pc, #316]	; (8003440 <HAL_ADC_MspInit+0x21c>)
 8003304:	f005 fe42 	bl	8008f8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8003308:	4b4e      	ldr	r3, [pc, #312]	; (8003444 <HAL_ADC_MspInit+0x220>)
 800330a:	4a4f      	ldr	r2, [pc, #316]	; (8003448 <HAL_ADC_MspInit+0x224>)
 800330c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800330e:	4b4d      	ldr	r3, [pc, #308]	; (8003444 <HAL_ADC_MspInit+0x220>)
 8003310:	2209      	movs	r2, #9
 8003312:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003314:	4b4b      	ldr	r3, [pc, #300]	; (8003444 <HAL_ADC_MspInit+0x220>)
 8003316:	2200      	movs	r2, #0
 8003318:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800331a:	4b4a      	ldr	r3, [pc, #296]	; (8003444 <HAL_ADC_MspInit+0x220>)
 800331c:	2200      	movs	r2, #0
 800331e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003320:	4b48      	ldr	r3, [pc, #288]	; (8003444 <HAL_ADC_MspInit+0x220>)
 8003322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003326:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003328:	4b46      	ldr	r3, [pc, #280]	; (8003444 <HAL_ADC_MspInit+0x220>)
 800332a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800332e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003330:	4b44      	ldr	r3, [pc, #272]	; (8003444 <HAL_ADC_MspInit+0x220>)
 8003332:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003336:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003338:	4b42      	ldr	r3, [pc, #264]	; (8003444 <HAL_ADC_MspInit+0x220>)
 800333a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800333e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003340:	4b40      	ldr	r3, [pc, #256]	; (8003444 <HAL_ADC_MspInit+0x220>)
 8003342:	2200      	movs	r2, #0
 8003344:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003346:	4b3f      	ldr	r3, [pc, #252]	; (8003444 <HAL_ADC_MspInit+0x220>)
 8003348:	2200      	movs	r2, #0
 800334a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800334c:	483d      	ldr	r0, [pc, #244]	; (8003444 <HAL_ADC_MspInit+0x220>)
 800334e:	f002 ffd5 	bl	80062fc <HAL_DMA_Init>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8003358:	f7ff ff40 	bl	80031dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a39      	ldr	r2, [pc, #228]	; (8003444 <HAL_ADC_MspInit+0x220>)
 8003360:	64da      	str	r2, [r3, #76]	; 0x4c
 8003362:	4a38      	ldr	r2, [pc, #224]	; (8003444 <HAL_ADC_MspInit+0x220>)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003368:	e05e      	b.n	8003428 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a37      	ldr	r2, [pc, #220]	; (800344c <HAL_ADC_MspInit+0x228>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d159      	bne.n	8003428 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003374:	4b2f      	ldr	r3, [pc, #188]	; (8003434 <HAL_ADC_MspInit+0x210>)
 8003376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800337a:	4a2e      	ldr	r2, [pc, #184]	; (8003434 <HAL_ADC_MspInit+0x210>)
 800337c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003380:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003384:	4b2b      	ldr	r3, [pc, #172]	; (8003434 <HAL_ADC_MspInit+0x210>)
 8003386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800338a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003392:	4b28      	ldr	r3, [pc, #160]	; (8003434 <HAL_ADC_MspInit+0x210>)
 8003394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003398:	4a26      	ldr	r2, [pc, #152]	; (8003434 <HAL_ADC_MspInit+0x210>)
 800339a:	f043 0304 	orr.w	r3, r3, #4
 800339e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033a2:	4b24      	ldr	r3, [pc, #144]	; (8003434 <HAL_ADC_MspInit+0x210>)
 80033a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80033b0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80033b4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80033b8:	f000 fe90 	bl	80040dc <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80033bc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80033c0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80033c4:	f000 fe8a 	bl	80040dc <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 80033c8:	4b21      	ldr	r3, [pc, #132]	; (8003450 <HAL_ADC_MspInit+0x22c>)
 80033ca:	4a22      	ldr	r2, [pc, #136]	; (8003454 <HAL_ADC_MspInit+0x230>)
 80033cc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80033ce:	4b20      	ldr	r3, [pc, #128]	; (8003450 <HAL_ADC_MspInit+0x22c>)
 80033d0:	2273      	movs	r2, #115	; 0x73
 80033d2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033d4:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <HAL_ADC_MspInit+0x22c>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80033da:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <HAL_ADC_MspInit+0x22c>)
 80033dc:	2200      	movs	r2, #0
 80033de:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80033e0:	4b1b      	ldr	r3, [pc, #108]	; (8003450 <HAL_ADC_MspInit+0x22c>)
 80033e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033e6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033e8:	4b19      	ldr	r3, [pc, #100]	; (8003450 <HAL_ADC_MspInit+0x22c>)
 80033ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033ee:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033f0:	4b17      	ldr	r3, [pc, #92]	; (8003450 <HAL_ADC_MspInit+0x22c>)
 80033f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033f6:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80033f8:	4b15      	ldr	r3, [pc, #84]	; (8003450 <HAL_ADC_MspInit+0x22c>)
 80033fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033fe:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003400:	4b13      	ldr	r3, [pc, #76]	; (8003450 <HAL_ADC_MspInit+0x22c>)
 8003402:	2200      	movs	r2, #0
 8003404:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003406:	4b12      	ldr	r3, [pc, #72]	; (8003450 <HAL_ADC_MspInit+0x22c>)
 8003408:	2200      	movs	r2, #0
 800340a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800340c:	4810      	ldr	r0, [pc, #64]	; (8003450 <HAL_ADC_MspInit+0x22c>)
 800340e:	f002 ff75 	bl	80062fc <HAL_DMA_Init>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8003418:	f7ff fee0 	bl	80031dc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a0c      	ldr	r2, [pc, #48]	; (8003450 <HAL_ADC_MspInit+0x22c>)
 8003420:	64da      	str	r2, [r3, #76]	; 0x4c
 8003422:	4a0b      	ldr	r2, [pc, #44]	; (8003450 <HAL_ADC_MspInit+0x22c>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003428:	bf00      	nop
 800342a:	3738      	adds	r7, #56	; 0x38
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40022000 	.word	0x40022000
 8003434:	58024400 	.word	0x58024400
 8003438:	58020800 	.word	0x58020800
 800343c:	58020000 	.word	0x58020000
 8003440:	58020400 	.word	0x58020400
 8003444:	24000204 	.word	0x24000204
 8003448:	40020010 	.word	0x40020010
 800344c:	58026000 	.word	0x58026000
 8003450:	2400027c 	.word	0x2400027c
 8003454:	40020028 	.word	0x40020028

08003458 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a34      	ldr	r2, [pc, #208]	; (8003548 <HAL_DAC_MspInit+0xf0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d161      	bne.n	800353e <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800347a:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_DAC_MspInit+0xf4>)
 800347c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003480:	4a32      	ldr	r2, [pc, #200]	; (800354c <HAL_DAC_MspInit+0xf4>)
 8003482:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003486:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800348a:	4b30      	ldr	r3, [pc, #192]	; (800354c <HAL_DAC_MspInit+0xf4>)
 800348c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003498:	4b2c      	ldr	r3, [pc, #176]	; (800354c <HAL_DAC_MspInit+0xf4>)
 800349a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800349e:	4a2b      	ldr	r2, [pc, #172]	; (800354c <HAL_DAC_MspInit+0xf4>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034a8:	4b28      	ldr	r3, [pc, #160]	; (800354c <HAL_DAC_MspInit+0xf4>)
 80034aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034b6:	2310      	movs	r3, #16
 80034b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ba:	2303      	movs	r3, #3
 80034bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c2:	f107 0314 	add.w	r3, r7, #20
 80034c6:	4619      	mov	r1, r3
 80034c8:	4821      	ldr	r0, [pc, #132]	; (8003550 <HAL_DAC_MspInit+0xf8>)
 80034ca:	f005 fd5f 	bl	8008f8c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 80034ce:	4b21      	ldr	r3, [pc, #132]	; (8003554 <HAL_DAC_MspInit+0xfc>)
 80034d0:	4a21      	ldr	r2, [pc, #132]	; (8003558 <HAL_DAC_MspInit+0x100>)
 80034d2:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80034d4:	4b1f      	ldr	r3, [pc, #124]	; (8003554 <HAL_DAC_MspInit+0xfc>)
 80034d6:	2243      	movs	r2, #67	; 0x43
 80034d8:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034da:	4b1e      	ldr	r3, [pc, #120]	; (8003554 <HAL_DAC_MspInit+0xfc>)
 80034dc:	2240      	movs	r2, #64	; 0x40
 80034de:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034e0:	4b1c      	ldr	r3, [pc, #112]	; (8003554 <HAL_DAC_MspInit+0xfc>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80034e6:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <HAL_DAC_MspInit+0xfc>)
 80034e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034ec:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034ee:	4b19      	ldr	r3, [pc, #100]	; (8003554 <HAL_DAC_MspInit+0xfc>)
 80034f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034f4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034f6:	4b17      	ldr	r3, [pc, #92]	; (8003554 <HAL_DAC_MspInit+0xfc>)
 80034f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034fc:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80034fe:	4b15      	ldr	r3, [pc, #84]	; (8003554 <HAL_DAC_MspInit+0xfc>)
 8003500:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003504:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003506:	4b13      	ldr	r3, [pc, #76]	; (8003554 <HAL_DAC_MspInit+0xfc>)
 8003508:	2200      	movs	r2, #0
 800350a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800350c:	4b11      	ldr	r3, [pc, #68]	; (8003554 <HAL_DAC_MspInit+0xfc>)
 800350e:	2200      	movs	r2, #0
 8003510:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003512:	4810      	ldr	r0, [pc, #64]	; (8003554 <HAL_DAC_MspInit+0xfc>)
 8003514:	f002 fef2 	bl	80062fc <HAL_DMA_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800351e:	f7ff fe5d 	bl	80031dc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a0b      	ldr	r2, [pc, #44]	; (8003554 <HAL_DAC_MspInit+0xfc>)
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	4a0a      	ldr	r2, [pc, #40]	; (8003554 <HAL_DAC_MspInit+0xfc>)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800352e:	2200      	movs	r2, #0
 8003530:	2105      	movs	r1, #5
 8003532:	2036      	movs	r0, #54	; 0x36
 8003534:	f002 fab4 	bl	8005aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003538:	2036      	movs	r0, #54	; 0x36
 800353a:	f002 facb 	bl	8005ad4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800353e:	bf00      	nop
 8003540:	3728      	adds	r7, #40	; 0x28
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40007400 	.word	0x40007400
 800354c:	58024400 	.word	0x58024400
 8003550:	58020000 	.word	0x58020000
 8003554:	24000308 	.word	0x24000308
 8003558:	40020088 	.word	0x40020088

0800355c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b0ba      	sub	sp, #232	; 0xe8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003564:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003574:	f107 0310 	add.w	r3, r7, #16
 8003578:	22c0      	movs	r2, #192	; 0xc0
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f013 fb25 	bl	8016bcc <memset>
  if(hi2c->Instance==I2C1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a27      	ldr	r2, [pc, #156]	; (8003624 <HAL_I2C_MspInit+0xc8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d146      	bne.n	800361a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800358c:	f04f 0208 	mov.w	r2, #8
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003598:	2300      	movs	r3, #0
 800359a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800359e:	f107 0310 	add.w	r3, r7, #16
 80035a2:	4618      	mov	r0, r3
 80035a4:	f007 fd7e 	bl	800b0a4 <HAL_RCCEx_PeriphCLKConfig>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80035ae:	f7ff fe15 	bl	80031dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b2:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <HAL_I2C_MspInit+0xcc>)
 80035b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b8:	4a1b      	ldr	r2, [pc, #108]	; (8003628 <HAL_I2C_MspInit+0xcc>)
 80035ba:	f043 0302 	orr.w	r3, r3, #2
 80035be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035c2:	4b19      	ldr	r3, [pc, #100]	; (8003628 <HAL_I2C_MspInit+0xcc>)
 80035c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035d8:	2312      	movs	r3, #18
 80035da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e4:	2300      	movs	r3, #0
 80035e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035ea:	2304      	movs	r3, #4
 80035ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035f4:	4619      	mov	r1, r3
 80035f6:	480d      	ldr	r0, [pc, #52]	; (800362c <HAL_I2C_MspInit+0xd0>)
 80035f8:	f005 fcc8 	bl	8008f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035fc:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <HAL_I2C_MspInit+0xcc>)
 80035fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003602:	4a09      	ldr	r2, [pc, #36]	; (8003628 <HAL_I2C_MspInit+0xcc>)
 8003604:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003608:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <HAL_I2C_MspInit+0xcc>)
 800360e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800361a:	bf00      	nop
 800361c:	37e8      	adds	r7, #232	; 0xe8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40005400 	.word	0x40005400
 8003628:	58024400 	.word	0x58024400
 800362c:	58020400 	.word	0x58020400

08003630 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b0b2      	sub	sp, #200	; 0xc8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003638:	f107 0308 	add.w	r3, r7, #8
 800363c:	22c0      	movs	r2, #192	; 0xc0
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f013 fac3 	bl	8016bcc <memset>
  if(hrtc->Instance==RTC)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a10      	ldr	r2, [pc, #64]	; (800368c <HAL_RTC_MspInit+0x5c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d118      	bne.n	8003682 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003650:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <HAL_RTC_MspInit+0x60>)
 800365e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003662:	f107 0308 	add.w	r3, r7, #8
 8003666:	4618      	mov	r0, r3
 8003668:	f007 fd1c 	bl	800b0a4 <HAL_RCCEx_PeriphCLKConfig>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003672:	f7ff fdb3 	bl	80031dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003676:	4b07      	ldr	r3, [pc, #28]	; (8003694 <HAL_RTC_MspInit+0x64>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	4a06      	ldr	r2, [pc, #24]	; (8003694 <HAL_RTC_MspInit+0x64>)
 800367c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003680:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003682:	bf00      	nop
 8003684:	37c8      	adds	r7, #200	; 0xc8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	58004000 	.word	0x58004000
 8003690:	00019300 	.word	0x00019300
 8003694:	58024400 	.word	0x58024400

08003698 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b0bc      	sub	sp, #240	; 0xf0
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036b0:	f107 0318 	add.w	r3, r7, #24
 80036b4:	22c0      	movs	r2, #192	; 0xc0
 80036b6:	2100      	movs	r1, #0
 80036b8:	4618      	mov	r0, r3
 80036ba:	f013 fa87 	bl	8016bcc <memset>
  if(hspi->Instance==SPI1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a4c      	ldr	r2, [pc, #304]	; (80037f4 <HAL_SPI_MspInit+0x15c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d145      	bne.n	8003754 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80036c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036d8:	f107 0318 	add.w	r3, r7, #24
 80036dc:	4618      	mov	r0, r3
 80036de:	f007 fce1 	bl	800b0a4 <HAL_RCCEx_PeriphCLKConfig>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80036e8:	f7ff fd78 	bl	80031dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036ec:	4b42      	ldr	r3, [pc, #264]	; (80037f8 <HAL_SPI_MspInit+0x160>)
 80036ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036f2:	4a41      	ldr	r2, [pc, #260]	; (80037f8 <HAL_SPI_MspInit+0x160>)
 80036f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80036fc:	4b3e      	ldr	r3, [pc, #248]	; (80037f8 <HAL_SPI_MspInit+0x160>)
 80036fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800370a:	4b3b      	ldr	r3, [pc, #236]	; (80037f8 <HAL_SPI_MspInit+0x160>)
 800370c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003710:	4a39      	ldr	r2, [pc, #228]	; (80037f8 <HAL_SPI_MspInit+0x160>)
 8003712:	f043 0302 	orr.w	r3, r3, #2
 8003716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800371a:	4b37      	ldr	r3, [pc, #220]	; (80037f8 <HAL_SPI_MspInit+0x160>)
 800371c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003728:	2318      	movs	r3, #24
 800372a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372e:	2302      	movs	r3, #2
 8003730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003734:	2300      	movs	r3, #0
 8003736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373a:	2300      	movs	r3, #0
 800373c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003740:	2305      	movs	r3, #5
 8003742:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003746:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800374a:	4619      	mov	r1, r3
 800374c:	482b      	ldr	r0, [pc, #172]	; (80037fc <HAL_SPI_MspInit+0x164>)
 800374e:	f005 fc1d 	bl	8008f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003752:	e04a      	b.n	80037ea <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a29      	ldr	r2, [pc, #164]	; (8003800 <HAL_SPI_MspInit+0x168>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d145      	bne.n	80037ea <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800375e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800376a:	2300      	movs	r3, #0
 800376c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800376e:	f107 0318 	add.w	r3, r7, #24
 8003772:	4618      	mov	r0, r3
 8003774:	f007 fc96 	bl	800b0a4 <HAL_RCCEx_PeriphCLKConfig>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800377e:	f7ff fd2d 	bl	80031dc <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003782:	4b1d      	ldr	r3, [pc, #116]	; (80037f8 <HAL_SPI_MspInit+0x160>)
 8003784:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003788:	4a1b      	ldr	r2, [pc, #108]	; (80037f8 <HAL_SPI_MspInit+0x160>)
 800378a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800378e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003792:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <HAL_SPI_MspInit+0x160>)
 8003794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a0:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <HAL_SPI_MspInit+0x160>)
 80037a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037a6:	4a14      	ldr	r2, [pc, #80]	; (80037f8 <HAL_SPI_MspInit+0x160>)
 80037a8:	f043 0302 	orr.w	r3, r3, #2
 80037ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <HAL_SPI_MspInit+0x160>)
 80037b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80037be:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80037c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c6:	2302      	movs	r3, #2
 80037c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d2:	2300      	movs	r3, #0
 80037d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037d8:	2305      	movs	r3, #5
 80037da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80037e2:	4619      	mov	r1, r3
 80037e4:	4805      	ldr	r0, [pc, #20]	; (80037fc <HAL_SPI_MspInit+0x164>)
 80037e6:	f005 fbd1 	bl	8008f8c <HAL_GPIO_Init>
}
 80037ea:	bf00      	nop
 80037ec:	37f0      	adds	r7, #240	; 0xf0
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40013000 	.word	0x40013000
 80037f8:	58024400 	.word	0x58024400
 80037fc:	58020400 	.word	0x58020400
 8003800:	40003800 	.word	0x40003800

08003804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a37      	ldr	r2, [pc, #220]	; (80038f0 <HAL_TIM_Base_MspInit+0xec>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d12f      	bne.n	8003876 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003816:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <HAL_TIM_Base_MspInit+0xf0>)
 8003818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800381c:	4a35      	ldr	r2, [pc, #212]	; (80038f4 <HAL_TIM_Base_MspInit+0xf0>)
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003826:	4b33      	ldr	r3, [pc, #204]	; (80038f4 <HAL_TIM_Base_MspInit+0xf0>)
 8003828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003834:	2200      	movs	r2, #0
 8003836:	2105      	movs	r1, #5
 8003838:	2018      	movs	r0, #24
 800383a:	f002 f931 	bl	8005aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800383e:	2018      	movs	r0, #24
 8003840:	f002 f948 	bl	8005ad4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003844:	2200      	movs	r2, #0
 8003846:	2105      	movs	r1, #5
 8003848:	2019      	movs	r0, #25
 800384a:	f002 f929 	bl	8005aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800384e:	2019      	movs	r0, #25
 8003850:	f002 f940 	bl	8005ad4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8003854:	2200      	movs	r2, #0
 8003856:	2105      	movs	r1, #5
 8003858:	201a      	movs	r0, #26
 800385a:	f002 f921 	bl	8005aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800385e:	201a      	movs	r0, #26
 8003860:	f002 f938 	bl	8005ad4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003864:	2200      	movs	r2, #0
 8003866:	2105      	movs	r1, #5
 8003868:	201b      	movs	r0, #27
 800386a:	f002 f919 	bl	8005aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800386e:	201b      	movs	r0, #27
 8003870:	f002 f930 	bl	8005ad4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003874:	e038      	b.n	80038e8 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387e:	d117      	bne.n	80038b0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003880:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <HAL_TIM_Base_MspInit+0xf0>)
 8003882:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003886:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <HAL_TIM_Base_MspInit+0xf0>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003890:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <HAL_TIM_Base_MspInit+0xf0>)
 8003892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800389e:	2200      	movs	r2, #0
 80038a0:	2105      	movs	r1, #5
 80038a2:	201c      	movs	r0, #28
 80038a4:	f002 f8fc 	bl	8005aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80038a8:	201c      	movs	r0, #28
 80038aa:	f002 f913 	bl	8005ad4 <HAL_NVIC_EnableIRQ>
}
 80038ae:	e01b      	b.n	80038e8 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a10      	ldr	r2, [pc, #64]	; (80038f8 <HAL_TIM_Base_MspInit+0xf4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d116      	bne.n	80038e8 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038ba:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <HAL_TIM_Base_MspInit+0xf0>)
 80038bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038c0:	4a0c      	ldr	r2, [pc, #48]	; (80038f4 <HAL_TIM_Base_MspInit+0xf0>)
 80038c2:	f043 0302 	orr.w	r3, r3, #2
 80038c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <HAL_TIM_Base_MspInit+0xf0>)
 80038cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80038d8:	2200      	movs	r2, #0
 80038da:	2105      	movs	r1, #5
 80038dc:	201d      	movs	r0, #29
 80038de:	f002 f8df 	bl	8005aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80038e2:	201d      	movs	r0, #29
 80038e4:	f002 f8f6 	bl	8005ad4 <HAL_NVIC_EnableIRQ>
}
 80038e8:	bf00      	nop
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40010000 	.word	0x40010000
 80038f4:	58024400 	.word	0x58024400
 80038f8:	40000400 	.word	0x40000400

080038fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08a      	sub	sp, #40	; 0x28
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003904:	f107 0314 	add.w	r3, r7, #20
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	609a      	str	r2, [r3, #8]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a26      	ldr	r2, [pc, #152]	; (80039b4 <HAL_TIM_MspPostInit+0xb8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d120      	bne.n	8003960 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391e:	4b26      	ldr	r3, [pc, #152]	; (80039b8 <HAL_TIM_MspPostInit+0xbc>)
 8003920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003924:	4a24      	ldr	r2, [pc, #144]	; (80039b8 <HAL_TIM_MspPostInit+0xbc>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800392e:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <HAL_TIM_MspPostInit+0xbc>)
 8003930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800393c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003942:	2302      	movs	r3, #2
 8003944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003946:	2300      	movs	r3, #0
 8003948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394a:	2300      	movs	r3, #0
 800394c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800394e:	2301      	movs	r3, #1
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003952:	f107 0314 	add.w	r3, r7, #20
 8003956:	4619      	mov	r1, r3
 8003958:	4818      	ldr	r0, [pc, #96]	; (80039bc <HAL_TIM_MspPostInit+0xc0>)
 800395a:	f005 fb17 	bl	8008f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800395e:	e024      	b.n	80039aa <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003968:	d11f      	bne.n	80039aa <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <HAL_TIM_MspPostInit+0xbc>)
 800396c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003970:	4a11      	ldr	r2, [pc, #68]	; (80039b8 <HAL_TIM_MspPostInit+0xbc>)
 8003972:	f043 0302 	orr.w	r3, r3, #2
 8003976:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800397a:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <HAL_TIM_MspPostInit+0xbc>)
 800397c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003988:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800398c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398e:	2302      	movs	r3, #2
 8003990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003996:	2300      	movs	r3, #0
 8003998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800399a:	2301      	movs	r3, #1
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800399e:	f107 0314 	add.w	r3, r7, #20
 80039a2:	4619      	mov	r1, r3
 80039a4:	4806      	ldr	r0, [pc, #24]	; (80039c0 <HAL_TIM_MspPostInit+0xc4>)
 80039a6:	f005 faf1 	bl	8008f8c <HAL_GPIO_Init>
}
 80039aa:	bf00      	nop
 80039ac:	3728      	adds	r7, #40	; 0x28
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40010000 	.word	0x40010000
 80039b8:	58024400 	.word	0x58024400
 80039bc:	58020000 	.word	0x58020000
 80039c0:	58020400 	.word	0x58020400

080039c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b0ba      	sub	sp, #232	; 0xe8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	609a      	str	r2, [r3, #8]
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039dc:	f107 0310 	add.w	r3, r7, #16
 80039e0:	22c0      	movs	r2, #192	; 0xc0
 80039e2:	2100      	movs	r1, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f013 f8f1 	bl	8016bcc <memset>
  if(huart->Instance==USART1)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a41      	ldr	r2, [pc, #260]	; (8003af4 <HAL_UART_MspInit+0x130>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d17b      	bne.n	8003aec <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80039f4:	f04f 0201 	mov.w	r2, #1
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003a00:	2318      	movs	r3, #24
 8003a02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a06:	f107 0310 	add.w	r3, r7, #16
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f007 fb4a 	bl	800b0a4 <HAL_RCCEx_PeriphCLKConfig>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003a16:	f7ff fbe1 	bl	80031dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a1a:	4b37      	ldr	r3, [pc, #220]	; (8003af8 <HAL_UART_MspInit+0x134>)
 8003a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a20:	4a35      	ldr	r2, [pc, #212]	; (8003af8 <HAL_UART_MspInit+0x134>)
 8003a22:	f043 0310 	orr.w	r3, r3, #16
 8003a26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a2a:	4b33      	ldr	r3, [pc, #204]	; (8003af8 <HAL_UART_MspInit+0x134>)
 8003a2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a38:	4b2f      	ldr	r3, [pc, #188]	; (8003af8 <HAL_UART_MspInit+0x134>)
 8003a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a3e:	4a2e      	ldr	r2, [pc, #184]	; (8003af8 <HAL_UART_MspInit+0x134>)
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a48:	4b2b      	ldr	r3, [pc, #172]	; (8003af8 <HAL_UART_MspInit+0x134>)
 8003a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a5e:	2302      	movs	r3, #2
 8003a60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a70:	2307      	movs	r3, #7
 8003a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a76:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	481f      	ldr	r0, [pc, #124]	; (8003afc <HAL_UART_MspInit+0x138>)
 8003a7e:	f005 fa85 	bl	8008f8c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003a82:	4b1f      	ldr	r3, [pc, #124]	; (8003b00 <HAL_UART_MspInit+0x13c>)
 8003a84:	4a1f      	ldr	r2, [pc, #124]	; (8003b04 <HAL_UART_MspInit+0x140>)
 8003a86:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003a88:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <HAL_UART_MspInit+0x13c>)
 8003a8a:	222a      	movs	r2, #42	; 0x2a
 8003a8c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a8e:	4b1c      	ldr	r3, [pc, #112]	; (8003b00 <HAL_UART_MspInit+0x13c>)
 8003a90:	2240      	movs	r2, #64	; 0x40
 8003a92:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a94:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <HAL_UART_MspInit+0x13c>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a9a:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <HAL_UART_MspInit+0x13c>)
 8003a9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aa0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003aa2:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <HAL_UART_MspInit+0x13c>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003aa8:	4b15      	ldr	r3, [pc, #84]	; (8003b00 <HAL_UART_MspInit+0x13c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003aae:	4b14      	ldr	r3, [pc, #80]	; (8003b00 <HAL_UART_MspInit+0x13c>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ab4:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <HAL_UART_MspInit+0x13c>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003aba:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <HAL_UART_MspInit+0x13c>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003ac0:	480f      	ldr	r0, [pc, #60]	; (8003b00 <HAL_UART_MspInit+0x13c>)
 8003ac2:	f002 fc1b 	bl	80062fc <HAL_DMA_Init>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003acc:	f7ff fb86 	bl	80031dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a0b      	ldr	r2, [pc, #44]	; (8003b00 <HAL_UART_MspInit+0x13c>)
 8003ad4:	67da      	str	r2, [r3, #124]	; 0x7c
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	; (8003b00 <HAL_UART_MspInit+0x13c>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003adc:	2200      	movs	r2, #0
 8003ade:	2105      	movs	r1, #5
 8003ae0:	2025      	movs	r0, #37	; 0x25
 8003ae2:	f001 ffdd 	bl	8005aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ae6:	2025      	movs	r0, #37	; 0x25
 8003ae8:	f001 fff4 	bl	8005ad4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003aec:	bf00      	nop
 8003aee:	37e8      	adds	r7, #232	; 0xe8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40011000 	.word	0x40011000
 8003af8:	58024400 	.word	0x58024400
 8003afc:	58020000 	.word	0x58020000
 8003b00:	24000680 	.word	0x24000680
 8003b04:	40020040 	.word	0x40020040

08003b08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b090      	sub	sp, #64	; 0x40
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	d827      	bhi.n	8003b66 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8003b16:	2200      	movs	r2, #0
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	2036      	movs	r0, #54	; 0x36
 8003b1c:	f001 ffc0 	bl	8005aa0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b20:	2036      	movs	r0, #54	; 0x36
 8003b22:	f001 ffd7 	bl	8005ad4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003b26:	4a29      	ldr	r2, [pc, #164]	; (8003bcc <HAL_InitTick+0xc4>)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003b2c:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <HAL_InitTick+0xc8>)
 8003b2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b32:	4a27      	ldr	r2, [pc, #156]	; (8003bd0 <HAL_InitTick+0xc8>)
 8003b34:	f043 0310 	orr.w	r3, r3, #16
 8003b38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b3c:	4b24      	ldr	r3, [pc, #144]	; (8003bd0 <HAL_InitTick+0xc8>)
 8003b3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b4a:	f107 0210 	add.w	r2, r7, #16
 8003b4e:	f107 0314 	add.w	r3, r7, #20
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f007 fa63 	bl	800b020 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <HAL_InitTick+0x6a>
 8003b64:	e001      	b.n	8003b6a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e02b      	b.n	8003bc2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b6a:	f007 fa2d 	bl	800afc8 <HAL_RCC_GetPCLK1Freq>
 8003b6e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003b70:	e004      	b.n	8003b7c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b72:	f007 fa29 	bl	800afc8 <HAL_RCC_GetPCLK1Freq>
 8003b76:	4603      	mov	r3, r0
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7e:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <HAL_InitTick+0xcc>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	0c9b      	lsrs	r3, r3, #18
 8003b86:	3b01      	subs	r3, #1
 8003b88:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003b8a:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <HAL_InitTick+0xd0>)
 8003b8c:	4a13      	ldr	r2, [pc, #76]	; (8003bdc <HAL_InitTick+0xd4>)
 8003b8e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003b90:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <HAL_InitTick+0xd0>)
 8003b92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b96:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b98:	4a0f      	ldr	r2, [pc, #60]	; (8003bd8 <HAL_InitTick+0xd0>)
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b9e:	4b0e      	ldr	r3, [pc, #56]	; (8003bd8 <HAL_InitTick+0xd0>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <HAL_InitTick+0xd0>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003baa:	480b      	ldr	r0, [pc, #44]	; (8003bd8 <HAL_InitTick+0xd0>)
 8003bac:	f00a feeb 	bl	800e986 <HAL_TIM_Base_Init>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d104      	bne.n	8003bc0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003bb6:	4808      	ldr	r0, [pc, #32]	; (8003bd8 <HAL_InitTick+0xd0>)
 8003bb8:	f00a ff3c 	bl	800ea34 <HAL_TIM_Base_Start_IT>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	e000      	b.n	8003bc2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3740      	adds	r7, #64	; 0x40
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	24000094 	.word	0x24000094
 8003bd0:	58024400 	.word	0x58024400
 8003bd4:	431bde83 	.word	0x431bde83
 8003bd8:	24001094 	.word	0x24001094
 8003bdc:	40001000 	.word	0x40001000

08003be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003be4:	e7fe      	b.n	8003be4 <NMI_Handler+0x4>

08003be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003be6:	b480      	push	{r7}
 8003be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bea:	e7fe      	b.n	8003bea <HardFault_Handler+0x4>

08003bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bf0:	e7fe      	b.n	8003bf0 <MemManage_Handler+0x4>

08003bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bf6:	e7fe      	b.n	8003bf6 <BusFault_Handler+0x4>

08003bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bfc:	e7fe      	b.n	8003bfc <UsageFault_Handler+0x4>

08003bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c10:	4802      	ldr	r0, [pc, #8]	; (8003c1c <DMA1_Stream0_IRQHandler+0x10>)
 8003c12:	f003 fe9d 	bl	8007950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	24000204 	.word	0x24000204

08003c20 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003c24:	4802      	ldr	r0, [pc, #8]	; (8003c30 <DMA1_Stream1_IRQHandler+0x10>)
 8003c26:	f003 fe93 	bl	8007950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	2400027c 	.word	0x2400027c

08003c34 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003c38:	4802      	ldr	r0, [pc, #8]	; (8003c44 <DMA1_Stream2_IRQHandler+0x10>)
 8003c3a:	f003 fe89 	bl	8007950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	24000680 	.word	0x24000680

08003c48 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003c4c:	4802      	ldr	r0, [pc, #8]	; (8003c58 <DMA1_Stream5_IRQHandler+0x10>)
 8003c4e:	f003 fe7f 	bl	8007950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	24000308 	.word	0x24000308

08003c5c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c60:	4802      	ldr	r0, [pc, #8]	; (8003c6c <TIM1_BRK_IRQHandler+0x10>)
 8003c62:	f00b f9fe 	bl	800f062 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	24000508 	.word	0x24000508

08003c70 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c74:	4802      	ldr	r0, [pc, #8]	; (8003c80 <TIM1_UP_IRQHandler+0x10>)
 8003c76:	f00b f9f4 	bl	800f062 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	24000508 	.word	0x24000508

08003c84 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c88:	4802      	ldr	r0, [pc, #8]	; (8003c94 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003c8a:	f00b f9ea 	bl	800f062 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	24000508 	.word	0x24000508

08003c98 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c9c:	4802      	ldr	r0, [pc, #8]	; (8003ca8 <TIM1_CC_IRQHandler+0x10>)
 8003c9e:	f00b f9e0 	bl	800f062 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	24000508 	.word	0x24000508

08003cac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003cb0:	4802      	ldr	r0, [pc, #8]	; (8003cbc <TIM2_IRQHandler+0x10>)
 8003cb2:	f00b f9d6 	bl	800f062 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	24000554 	.word	0x24000554

08003cc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <TIM3_IRQHandler+0x10>)
 8003cc6:	f00b f9cc 	bl	800f062 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	240005a0 	.word	0x240005a0

08003cd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003cd8:	4802      	ldr	r0, [pc, #8]	; (8003ce4 <USART1_IRQHandler+0x10>)
 8003cda:	f00c fd85 	bl	80107e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	240005ec 	.word	0x240005ec

08003ce8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8003cec:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <TIM6_DAC_IRQHandler+0x20>)
 8003cee:	791b      	ldrb	r3, [r3, #4]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8003cf6:	4804      	ldr	r0, [pc, #16]	; (8003d08 <TIM6_DAC_IRQHandler+0x20>)
 8003cf8:	f002 f881 	bl	8005dfe <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003cfc:	4803      	ldr	r0, [pc, #12]	; (8003d0c <TIM6_DAC_IRQHandler+0x24>)
 8003cfe:	f00b f9b0 	bl	800f062 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003d02:	bf00      	nop
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	240002f4 	.word	0x240002f4
 8003d0c:	24001094 	.word	0x24001094

08003d10 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003d1a:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <ITM_SendChar+0x48>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a0e      	ldr	r2, [pc, #56]	; (8003d58 <ITM_SendChar+0x48>)
 8003d20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d24:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8003d26:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <ITM_SendChar+0x4c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a0c      	ldr	r2, [pc, #48]	; (8003d5c <ITM_SendChar+0x4c>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8003d32:	bf00      	nop
 8003d34:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f8      	beq.n	8003d34 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8003d42:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	6013      	str	r3, [r2, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	e000edfc 	.word	0xe000edfc
 8003d5c:	e0000e00 	.word	0xe0000e00

08003d60 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	e00a      	b.n	8003d88 <_read+0x28>
		*ptr++ = __io_getchar();
 8003d72:	f3af 8000 	nop.w
 8003d76:	4601      	mov	r1, r0
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	60ba      	str	r2, [r7, #8]
 8003d7e:	b2ca      	uxtb	r2, r1
 8003d80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	3301      	adds	r3, #1
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	dbf0      	blt.n	8003d72 <_read+0x12>
	}

	return len;
 8003d90:	687b      	ldr	r3, [r7, #4]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b086      	sub	sp, #24
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	e009      	b.n	8003dc0 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	60ba      	str	r2, [r7, #8]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff ffab 	bl	8003d10 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	dbf1      	blt.n	8003dac <_write+0x12>
	}
	return len;
 8003dc8:	687b      	ldr	r3, [r7, #4]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <_close>:

int _close(int file) {
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <_fstat>:

int _fstat(int file, struct stat *st) {
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dfa:	605a      	str	r2, [r3, #4]
	return 0;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <_isatty>:

int _isatty(int file) {
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8003e12:	2301      	movs	r3, #1
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003e44:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8003e46:	4b15      	ldr	r3, [pc, #84]	; (8003e9c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003e50:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <_sbrk+0x64>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d102      	bne.n	8003e5e <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003e58:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <_sbrk+0x64>)
 8003e5a:	4a12      	ldr	r2, [pc, #72]	; (8003ea4 <_sbrk+0x68>)
 8003e5c:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <_sbrk+0x64>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d207      	bcs.n	8003e7c <_sbrk+0x40>
		errno = ENOMEM;
 8003e6c:	f012 fe66 	bl	8016b3c <__errno>
 8003e70:	4603      	mov	r3, r0
 8003e72:	220c      	movs	r2, #12
 8003e74:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8003e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e7a:	e009      	b.n	8003e90 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003e7c:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <_sbrk+0x64>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003e82:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <_sbrk+0x64>)
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4413      	add	r3, r2
 8003e8a:	4a05      	ldr	r2, [pc, #20]	; (8003ea0 <_sbrk+0x64>)
 8003e8c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	24080000 	.word	0x24080000
 8003e9c:	00000400 	.word	0x00000400
 8003ea0:	240010e0 	.word	0x240010e0
 8003ea4:	24005a48 	.word	0x24005a48

08003ea8 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003eac:	4b37      	ldr	r3, [pc, #220]	; (8003f8c <SystemInit+0xe4>)
 8003eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb2:	4a36      	ldr	r2, [pc, #216]	; (8003f8c <SystemInit+0xe4>)
 8003eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003ebc:	4b34      	ldr	r3, [pc, #208]	; (8003f90 <SystemInit+0xe8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	2b06      	cmp	r3, #6
 8003ec6:	d807      	bhi.n	8003ed8 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003ec8:	4b31      	ldr	r3, [pc, #196]	; (8003f90 <SystemInit+0xe8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f023 030f 	bic.w	r3, r3, #15
 8003ed0:	4a2f      	ldr	r2, [pc, #188]	; (8003f90 <SystemInit+0xe8>)
 8003ed2:	f043 0307 	orr.w	r3, r3, #7
 8003ed6:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003ed8:	4b2e      	ldr	r3, [pc, #184]	; (8003f94 <SystemInit+0xec>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a2d      	ldr	r2, [pc, #180]	; (8003f94 <SystemInit+0xec>)
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003ee4:	4b2b      	ldr	r3, [pc, #172]	; (8003f94 <SystemInit+0xec>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8003eea:	4b2a      	ldr	r3, [pc, #168]	; (8003f94 <SystemInit+0xec>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	4929      	ldr	r1, [pc, #164]	; (8003f94 <SystemInit+0xec>)
 8003ef0:	4b29      	ldr	r3, [pc, #164]	; (8003f98 <SystemInit+0xf0>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003ef6:	4b26      	ldr	r3, [pc, #152]	; (8003f90 <SystemInit+0xe8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003f02:	4b23      	ldr	r3, [pc, #140]	; (8003f90 <SystemInit+0xe8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 030f 	bic.w	r3, r3, #15
 8003f0a:	4a21      	ldr	r2, [pc, #132]	; (8003f90 <SystemInit+0xe8>)
 8003f0c:	f043 0307 	orr.w	r3, r3, #7
 8003f10:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003f12:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <SystemInit+0xec>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003f18:	4b1e      	ldr	r3, [pc, #120]	; (8003f94 <SystemInit+0xec>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003f1e:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <SystemInit+0xec>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003f24:	4b1b      	ldr	r3, [pc, #108]	; (8003f94 <SystemInit+0xec>)
 8003f26:	4a1d      	ldr	r2, [pc, #116]	; (8003f9c <SystemInit+0xf4>)
 8003f28:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003f2a:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <SystemInit+0xec>)
 8003f2c:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <SystemInit+0xf8>)
 8003f2e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003f30:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <SystemInit+0xec>)
 8003f32:	4a1c      	ldr	r2, [pc, #112]	; (8003fa4 <SystemInit+0xfc>)
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003f36:	4b17      	ldr	r3, [pc, #92]	; (8003f94 <SystemInit+0xec>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003f3c:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <SystemInit+0xec>)
 8003f3e:	4a19      	ldr	r2, [pc, #100]	; (8003fa4 <SystemInit+0xfc>)
 8003f40:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003f42:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <SystemInit+0xec>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003f48:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <SystemInit+0xec>)
 8003f4a:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <SystemInit+0xfc>)
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003f4e:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <SystemInit+0xec>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003f54:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <SystemInit+0xec>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a0e      	ldr	r2, [pc, #56]	; (8003f94 <SystemInit+0xec>)
 8003f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f5e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003f60:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <SystemInit+0xec>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <SystemInit+0x100>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4b10      	ldr	r3, [pc, #64]	; (8003fac <SystemInit+0x104>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f72:	d202      	bcs.n	8003f7a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003f74:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <SystemInit+0x108>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003f7a:	4b0e      	ldr	r3, [pc, #56]	; (8003fb4 <SystemInit+0x10c>)
 8003f7c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003f80:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000ed00 	.word	0xe000ed00
 8003f90:	52002000 	.word	0x52002000
 8003f94:	58024400 	.word	0x58024400
 8003f98:	eaf6ed7f 	.word	0xeaf6ed7f
 8003f9c:	02020200 	.word	0x02020200
 8003fa0:	01ff0000 	.word	0x01ff0000
 8003fa4:	01010280 	.word	0x01010280
 8003fa8:	5c001000 	.word	0x5c001000
 8003fac:	ffff0000 	.word	0xffff0000
 8003fb0:	51008108 	.word	0x51008108
 8003fb4:	52004000 	.word	0x52004000

08003fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ff0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fbc:	f7ff ff74 	bl	8003ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fc0:	480c      	ldr	r0, [pc, #48]	; (8003ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fc2:	490d      	ldr	r1, [pc, #52]	; (8003ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fc4:	4a0d      	ldr	r2, [pc, #52]	; (8003ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fc8:	e002      	b.n	8003fd0 <LoopCopyDataInit>

08003fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fce:	3304      	adds	r3, #4

08003fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fd4:	d3f9      	bcc.n	8003fca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fd8:	4c0a      	ldr	r4, [pc, #40]	; (8004004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fdc:	e001      	b.n	8003fe2 <LoopFillZerobss>

08003fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fe0:	3204      	adds	r2, #4

08003fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fe4:	d3fb      	bcc.n	8003fde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fe6:	f012 fdaf 	bl	8016b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fea:	f7fc ffd3 	bl	8000f94 <main>
  bx  lr
 8003fee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ff0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003ff4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003ff8:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8003ffc:	08017a98 	.word	0x08017a98
  ldr r2, =_sbss
 8004000:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8004004:	24005a48 	.word	0x24005a48

08004008 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004008:	e7fe      	b.n	8004008 <ADC3_IRQHandler>
	...

0800400c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004012:	2003      	movs	r0, #3
 8004014:	f001 fd39 	bl	8005a8a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004018:	f006 fe2c 	bl	800ac74 <HAL_RCC_GetSysClockFreq>
 800401c:	4602      	mov	r2, r0
 800401e:	4b15      	ldr	r3, [pc, #84]	; (8004074 <HAL_Init+0x68>)
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	0a1b      	lsrs	r3, r3, #8
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	4913      	ldr	r1, [pc, #76]	; (8004078 <HAL_Init+0x6c>)
 800402a:	5ccb      	ldrb	r3, [r1, r3]
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	fa22 f303 	lsr.w	r3, r2, r3
 8004034:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004036:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <HAL_Init+0x68>)
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	4a0e      	ldr	r2, [pc, #56]	; (8004078 <HAL_Init+0x6c>)
 8004040:	5cd3      	ldrb	r3, [r2, r3]
 8004042:	f003 031f 	and.w	r3, r3, #31
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
 800404c:	4a0b      	ldr	r2, [pc, #44]	; (800407c <HAL_Init+0x70>)
 800404e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004050:	4a0b      	ldr	r2, [pc, #44]	; (8004080 <HAL_Init+0x74>)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004056:	2005      	movs	r0, #5
 8004058:	f7ff fd56 	bl	8003b08 <HAL_InitTick>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e002      	b.n	800406c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004066:	f7ff f8bf 	bl	80031e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	58024400 	.word	0x58024400
 8004078:	080179e4 	.word	0x080179e4
 800407c:	24000090 	.word	0x24000090
 8004080:	2400008c 	.word	0x2400008c

08004084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004088:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_IncTick+0x20>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	461a      	mov	r2, r3
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_IncTick+0x24>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4413      	add	r3, r2
 8004094:	4a04      	ldr	r2, [pc, #16]	; (80040a8 <HAL_IncTick+0x24>)
 8004096:	6013      	str	r3, [r2, #0]
}
 8004098:	bf00      	nop
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	24000098 	.word	0x24000098
 80040a8:	240010e4 	.word	0x240010e4

080040ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  return uwTick;
 80040b0:	4b03      	ldr	r3, [pc, #12]	; (80040c0 <HAL_GetTick+0x14>)
 80040b2:	681b      	ldr	r3, [r3, #0]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	240010e4 	.word	0x240010e4

080040c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80040c8:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <HAL_GetREVID+0x14>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	0c1b      	lsrs	r3, r3, #16
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	5c001000 	.word	0x5c001000

080040dc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80040e6:	4b07      	ldr	r3, [pc, #28]	; (8004104 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	401a      	ands	r2, r3
 80040f0:	4904      	ldr	r1, [pc, #16]	; (8004104 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	604b      	str	r3, [r1, #4]
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	58000400 	.word	0x58000400

08004108 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	609a      	str	r2, [r3, #8]
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	609a      	str	r2, [r3, #8]
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004164:	4618      	mov	r0, r3
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3360      	adds	r3, #96	; 0x60
 8004182:	461a      	mov	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	430b      	orrs	r3, r1
 800419e:	431a      	orrs	r2, r3
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80041a4:	bf00      	nop
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	fa01 f303 	lsl.w	r3, r1, r3
 80041d0:	431a      	orrs	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	611a      	str	r2, [r3, #16]
}
 80041d6:	bf00      	nop
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b087      	sub	sp, #28
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3360      	adds	r3, #96	; 0x60
 80041f2:	461a      	mov	r2, r3
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	431a      	orrs	r2, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	601a      	str	r2, [r3, #0]
  }
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800423e:	b480      	push	{r7}
 8004240:	b087      	sub	sp, #28
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3330      	adds	r3, #48	; 0x30
 800424e:	461a      	mov	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	4413      	add	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	211f      	movs	r1, #31
 800426a:	fa01 f303 	lsl.w	r3, r1, r3
 800426e:	43db      	mvns	r3, r3
 8004270:	401a      	ands	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	0e9b      	lsrs	r3, r3, #26
 8004276:	f003 011f 	and.w	r1, r3, #31
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f003 031f 	and.w	r3, r3, #31
 8004280:	fa01 f303 	lsl.w	r3, r1, r3
 8004284:	431a      	orrs	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f023 0203 	bic.w	r2, r3, #3
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	60da      	str	r2, [r3, #12]
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3314      	adds	r3, #20
 80042cc:	461a      	mov	r2, r3
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	0e5b      	lsrs	r3, r3, #25
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	4413      	add	r3, r2
 80042da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	0d1b      	lsrs	r3, r3, #20
 80042e4:	f003 031f 	and.w	r3, r3, #31
 80042e8:	2107      	movs	r1, #7
 80042ea:	fa01 f303 	lsl.w	r3, r1, r3
 80042ee:	43db      	mvns	r3, r3
 80042f0:	401a      	ands	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	0d1b      	lsrs	r3, r3, #20
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004300:	431a      	orrs	r2, r3
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800432c:	43db      	mvns	r3, r3
 800432e:	401a      	ands	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f003 0318 	and.w	r3, r3, #24
 8004336:	4908      	ldr	r1, [pc, #32]	; (8004358 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004338:	40d9      	lsrs	r1, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	400b      	ands	r3, r1
 800433e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004342:	431a      	orrs	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800434a:	bf00      	nop
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	000fffff 	.word	0x000fffff

0800435c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 031f 	and.w	r3, r3, #31
}
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	4b04      	ldr	r3, [pc, #16]	; (8004398 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004386:	4013      	ands	r3, r2
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6093      	str	r3, [r2, #8]
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	5fffffc0 	.word	0x5fffffc0

0800439c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b0:	d101      	bne.n	80043b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <LL_ADC_EnableInternalRegulator+0x24>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	6fffffc0 	.word	0x6fffffc0

080043ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004400:	d101      	bne.n	8004406 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <LL_ADC_Enable+0x24>)
 8004422:	4013      	ands	r3, r2
 8004424:	f043 0201 	orr.w	r2, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	7fffffc0 	.word	0x7fffffc0

0800443c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <LL_ADC_Disable+0x24>)
 800444a:	4013      	ands	r3, r2
 800444c:	f043 0202 	orr.w	r2, r3, #2
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	7fffffc0 	.word	0x7fffffc0

08004464 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <LL_ADC_IsEnabled+0x18>
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <LL_ADC_IsEnabled+0x1a>
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b02      	cmp	r3, #2
 800449c:	d101      	bne.n	80044a2 <LL_ADC_IsDisableOngoing+0x18>
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <LL_ADC_IsDisableOngoing+0x1a>
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <LL_ADC_REG_StartConversion+0x24>)
 80044be:	4013      	ands	r3, r2
 80044c0:	f043 0204 	orr.w	r2, r3, #4
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	7fffffc0 	.word	0x7fffffc0

080044d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d101      	bne.n	80044f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044ec:	2301      	movs	r3, #1
 80044ee:	e000      	b.n	80044f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b08      	cmp	r3, #8
 8004510:	d101      	bne.n	8004516 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004524:	b590      	push	{r4, r7, lr}
 8004526:	b089      	sub	sp, #36	; 0x24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004530:	2300      	movs	r3, #0
 8004532:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e18f      	b.n	800485e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7fe fe69 	bl	8003224 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff ff19 	bl	800439c <LL_ADC_IsDeepPowerDownEnabled>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d004      	beq.n	800457a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff feff 	bl	8004378 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff ff34 	bl	80043ec <LL_ADC_IsInternalRegulatorEnabled>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d114      	bne.n	80045b4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff ff18 	bl	80043c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004594:	4b87      	ldr	r3, [pc, #540]	; (80047b4 <HAL_ADC_Init+0x290>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	099b      	lsrs	r3, r3, #6
 800459a:	4a87      	ldr	r2, [pc, #540]	; (80047b8 <HAL_ADC_Init+0x294>)
 800459c:	fba2 2303 	umull	r2, r3, r2, r3
 80045a0:	099b      	lsrs	r3, r3, #6
 80045a2:	3301      	adds	r3, #1
 80045a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045a6:	e002      	b.n	80045ae <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1f9      	bne.n	80045a8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff ff17 	bl	80043ec <LL_ADC_IsInternalRegulatorEnabled>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10d      	bne.n	80045e0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c8:	f043 0210 	orr.w	r2, r3, #16
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d4:	f043 0201 	orr.w	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff ff77 	bl	80044d8 <LL_ADC_REG_IsConversionOngoing>
 80045ea:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f040 8129 	bne.w	800484c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f040 8125 	bne.w	800484c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004606:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800460a:	f043 0202 	orr.w	r2, r3, #2
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff ff24 	bl	8004464 <LL_ADC_IsEnabled>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d136      	bne.n	8004690 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a65      	ldr	r2, [pc, #404]	; (80047bc <HAL_ADC_Init+0x298>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_ADC_Init+0x112>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a63      	ldr	r2, [pc, #396]	; (80047c0 <HAL_ADC_Init+0x29c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d10e      	bne.n	8004654 <HAL_ADC_Init+0x130>
 8004636:	4861      	ldr	r0, [pc, #388]	; (80047bc <HAL_ADC_Init+0x298>)
 8004638:	f7ff ff14 	bl	8004464 <LL_ADC_IsEnabled>
 800463c:	4604      	mov	r4, r0
 800463e:	4860      	ldr	r0, [pc, #384]	; (80047c0 <HAL_ADC_Init+0x29c>)
 8004640:	f7ff ff10 	bl	8004464 <LL_ADC_IsEnabled>
 8004644:	4603      	mov	r3, r0
 8004646:	4323      	orrs	r3, r4
 8004648:	2b00      	cmp	r3, #0
 800464a:	bf0c      	ite	eq
 800464c:	2301      	moveq	r3, #1
 800464e:	2300      	movne	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	e008      	b.n	8004666 <HAL_ADC_Init+0x142>
 8004654:	485b      	ldr	r0, [pc, #364]	; (80047c4 <HAL_ADC_Init+0x2a0>)
 8004656:	f7ff ff05 	bl	8004464 <LL_ADC_IsEnabled>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d012      	beq.n	8004690 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a53      	ldr	r2, [pc, #332]	; (80047bc <HAL_ADC_Init+0x298>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d004      	beq.n	800467e <HAL_ADC_Init+0x15a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a51      	ldr	r2, [pc, #324]	; (80047c0 <HAL_ADC_Init+0x29c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d101      	bne.n	8004682 <HAL_ADC_Init+0x15e>
 800467e:	4a52      	ldr	r2, [pc, #328]	; (80047c8 <HAL_ADC_Init+0x2a4>)
 8004680:	e000      	b.n	8004684 <HAL_ADC_Init+0x160>
 8004682:	4a52      	ldr	r2, [pc, #328]	; (80047cc <HAL_ADC_Init+0x2a8>)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	4619      	mov	r1, r3
 800468a:	4610      	mov	r0, r2
 800468c:	f7ff fd3c 	bl	8004108 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004690:	f7ff fd18 	bl	80040c4 <HAL_GetREVID>
 8004694:	4603      	mov	r3, r0
 8004696:	f241 0203 	movw	r2, #4099	; 0x1003
 800469a:	4293      	cmp	r3, r2
 800469c:	d914      	bls.n	80046c8 <HAL_ADC_Init+0x1a4>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	2b10      	cmp	r3, #16
 80046a4:	d110      	bne.n	80046c8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	7d5b      	ldrb	r3, [r3, #21]
 80046aa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046b0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046b6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	7f1b      	ldrb	r3, [r3, #28]
 80046bc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046be:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046c0:	f043 030c 	orr.w	r3, r3, #12
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	e00d      	b.n	80046e4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	7d5b      	ldrb	r3, [r3, #21]
 80046cc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046d2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046d8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	7f1b      	ldrb	r3, [r3, #28]
 80046de:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	7f1b      	ldrb	r3, [r3, #28]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d106      	bne.n	80046fa <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	045b      	lsls	r3, r3, #17
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	4b2c      	ldr	r3, [pc, #176]	; (80047d0 <HAL_ADC_Init+0x2ac>)
 800471e:	4013      	ands	r3, r2
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6812      	ldr	r2, [r2, #0]
 8004724:	69b9      	ldr	r1, [r7, #24]
 8004726:	430b      	orrs	r3, r1
 8004728:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff fed2 	bl	80044d8 <LL_ADC_REG_IsConversionOngoing>
 8004734:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fedf 	bl	80044fe <LL_ADC_INJ_IsConversionOngoing>
 8004740:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d15f      	bne.n	8004808 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d15c      	bne.n	8004808 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	7d1b      	ldrb	r3, [r3, #20]
 8004752:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004758:	4313      	orrs	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	4b1c      	ldr	r3, [pc, #112]	; (80047d4 <HAL_ADC_Init+0x2b0>)
 8004764:	4013      	ands	r3, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6812      	ldr	r2, [r2, #0]
 800476a:	69b9      	ldr	r1, [r7, #24]
 800476c:	430b      	orrs	r3, r1
 800476e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004776:	2b01      	cmp	r3, #1
 8004778:	d130      	bne.n	80047dc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <HAL_ADC_Init+0x2b4>)
 8004788:	4013      	ands	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800478e:	3a01      	subs	r2, #1
 8004790:	0411      	lsls	r1, r2, #16
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004796:	4311      	orrs	r1, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800479c:	4311      	orrs	r1, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047a2:	430a      	orrs	r2, r1
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	611a      	str	r2, [r3, #16]
 80047b0:	e01c      	b.n	80047ec <HAL_ADC_Init+0x2c8>
 80047b2:	bf00      	nop
 80047b4:	2400008c 	.word	0x2400008c
 80047b8:	053e2d63 	.word	0x053e2d63
 80047bc:	40022000 	.word	0x40022000
 80047c0:	40022100 	.word	0x40022100
 80047c4:	58026000 	.word	0x58026000
 80047c8:	40022300 	.word	0x40022300
 80047cc:	58026300 	.word	0x58026300
 80047d0:	fff0c003 	.word	0xfff0c003
 80047d4:	ffffbffc 	.word	0xffffbffc
 80047d8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0201 	bic.w	r2, r2, #1
 80047ea:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 fdec 	bl	80053e0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d10c      	bne.n	800482a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	f023 010f 	bic.w	r1, r3, #15
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	1e5a      	subs	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
 8004828:	e007      	b.n	800483a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 020f 	bic.w	r2, r2, #15
 8004838:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483e:	f023 0303 	bic.w	r3, r3, #3
 8004842:	f043 0201 	orr.w	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	655a      	str	r2, [r3, #84]	; 0x54
 800484a:	e007      	b.n	800485c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004850:	f043 0210 	orr.w	r2, r3, #16
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800485c:	7ffb      	ldrb	r3, [r7, #31]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3724      	adds	r7, #36	; 0x24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd90      	pop	{r4, r7, pc}
 8004866:	bf00      	nop

08004868 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a55      	ldr	r2, [pc, #340]	; (80049d0 <HAL_ADC_Start_DMA+0x168>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d004      	beq.n	8004888 <HAL_ADC_Start_DMA+0x20>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a54      	ldr	r2, [pc, #336]	; (80049d4 <HAL_ADC_Start_DMA+0x16c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d101      	bne.n	800488c <HAL_ADC_Start_DMA+0x24>
 8004888:	4b53      	ldr	r3, [pc, #332]	; (80049d8 <HAL_ADC_Start_DMA+0x170>)
 800488a:	e000      	b.n	800488e <HAL_ADC_Start_DMA+0x26>
 800488c:	4b53      	ldr	r3, [pc, #332]	; (80049dc <HAL_ADC_Start_DMA+0x174>)
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fd64 	bl	800435c <LL_ADC_GetMultimode>
 8004894:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fe1c 	bl	80044d8 <LL_ADC_REG_IsConversionOngoing>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f040 808c 	bne.w	80049c0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d101      	bne.n	80048b6 <HAL_ADC_Start_DMA+0x4e>
 80048b2:	2302      	movs	r3, #2
 80048b4:	e087      	b.n	80049c6 <HAL_ADC_Start_DMA+0x15e>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	2b05      	cmp	r3, #5
 80048c8:	d002      	beq.n	80048d0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	2b09      	cmp	r3, #9
 80048ce:	d170      	bne.n	80049b2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fc07 	bl	80050e4 <ADC_Enable>
 80048d6:	4603      	mov	r3, r0
 80048d8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80048da:	7dfb      	ldrb	r3, [r7, #23]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d163      	bne.n	80049a8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048e4:	4b3e      	ldr	r3, [pc, #248]	; (80049e0 <HAL_ADC_Start_DMA+0x178>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a37      	ldr	r2, [pc, #220]	; (80049d4 <HAL_ADC_Start_DMA+0x16c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d002      	beq.n	8004900 <HAL_ADC_Start_DMA+0x98>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	e000      	b.n	8004902 <HAL_ADC_Start_DMA+0x9a>
 8004900:	4b33      	ldr	r3, [pc, #204]	; (80049d0 <HAL_ADC_Start_DMA+0x168>)
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	6812      	ldr	r2, [r2, #0]
 8004906:	4293      	cmp	r3, r2
 8004908:	d002      	beq.n	8004910 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d105      	bne.n	800491c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004914:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d006      	beq.n	8004936 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492c:	f023 0206 	bic.w	r2, r3, #6
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	659a      	str	r2, [r3, #88]	; 0x58
 8004934:	e002      	b.n	800493c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004940:	4a28      	ldr	r2, [pc, #160]	; (80049e4 <HAL_ADC_Start_DMA+0x17c>)
 8004942:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004948:	4a27      	ldr	r2, [pc, #156]	; (80049e8 <HAL_ADC_Start_DMA+0x180>)
 800494a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004950:	4a26      	ldr	r2, [pc, #152]	; (80049ec <HAL_ADC_Start_DMA+0x184>)
 8004952:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	221c      	movs	r2, #28
 800495a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0210 	orr.w	r2, r2, #16
 8004972:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f7ff fc89 	bl	8004296 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3340      	adds	r3, #64	; 0x40
 800498e:	4619      	mov	r1, r3
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f002 f80e 	bl	80069b4 <HAL_DMA_Start_IT>
 8004998:	4603      	mov	r3, r0
 800499a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff fd85 	bl	80044b0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80049a6:	e00d      	b.n	80049c4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80049b0:	e008      	b.n	80049c4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80049be:	e001      	b.n	80049c4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80049c0:	2302      	movs	r3, #2
 80049c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40022000 	.word	0x40022000
 80049d4:	40022100 	.word	0x40022100
 80049d8:	40022300 	.word	0x40022300
 80049dc:	58026300 	.word	0x58026300
 80049e0:	fffff0fe 	.word	0xfffff0fe
 80049e4:	080052b7 	.word	0x080052b7
 80049e8:	0800538f 	.word	0x0800538f
 80049ec:	080053ab 	.word	0x080053ab

080049f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a2c:	b590      	push	{r4, r7, lr}
 8004a2e:	b0a1      	sub	sp, #132	; 0x84
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	4a65      	ldr	r2, [pc, #404]	; (8004bdc <HAL_ADC_ConfigChannel+0x1b0>)
 8004a46:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d101      	bne.n	8004a56 <HAL_ADC_ConfigChannel+0x2a>
 8004a52:	2302      	movs	r3, #2
 8004a54:	e32e      	b.n	80050b4 <HAL_ADC_ConfigChannel+0x688>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff fd38 	bl	80044d8 <LL_ADC_REG_IsConversionOngoing>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f040 8313 	bne.w	8005096 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	db2c      	blt.n	8004ad2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d108      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0x6a>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	0e9b      	lsrs	r3, r3, #26
 8004a8a:	f003 031f 	and.w	r3, r3, #31
 8004a8e:	2201      	movs	r2, #1
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	e016      	b.n	8004ac4 <HAL_ADC_ConfigChannel+0x98>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a9e:	fa93 f3a3 	rbit	r3, r3
 8004aa2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004aae:	2320      	movs	r3, #32
 8004ab0:	e003      	b.n	8004aba <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ab4:	fab3 f383 	clz	r3, r3
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	f003 031f 	and.w	r3, r3, #31
 8004abe:	2201      	movs	r2, #1
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	69d1      	ldr	r1, [r2, #28]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6812      	ldr	r2, [r2, #0]
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	6859      	ldr	r1, [r3, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f7ff fbad 	bl	800423e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff fcf5 	bl	80044d8 <LL_ADC_REG_IsConversionOngoing>
 8004aee:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fd02 	bl	80044fe <LL_ADC_INJ_IsConversionOngoing>
 8004afa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 80b8 	bne.w	8004c74 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f040 80b4 	bne.w	8004c74 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	6819      	ldr	r1, [r3, #0]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f7ff fbcf 	bl	80042bc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b1e:	4b30      	ldr	r3, [pc, #192]	; (8004be0 <HAL_ADC_ConfigChannel+0x1b4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004b26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b2a:	d10b      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x118>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	695a      	ldr	r2, [r3, #20]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	089b      	lsrs	r3, r3, #2
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	e01d      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x154>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f003 0310 	and.w	r3, r3, #16
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10b      	bne.n	8004b6a <HAL_ADC_ConfigChannel+0x13e>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	089b      	lsrs	r3, r3, #2
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	e00a      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x154>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	089b      	lsrs	r3, r3, #2
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d02c      	beq.n	8004be4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6818      	ldr	r0, [r3, #0]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	6919      	ldr	r1, [r3, #16]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b98:	f7ff faea 	bl	8004170 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	6919      	ldr	r1, [r3, #16]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	7e5b      	ldrb	r3, [r3, #25]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d102      	bne.n	8004bb2 <HAL_ADC_ConfigChannel+0x186>
 8004bac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004bb0:	e000      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x188>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f7ff fb14 	bl	80041e2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6919      	ldr	r1, [r3, #16]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	7e1b      	ldrb	r3, [r3, #24]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d102      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x1a4>
 8004bca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bce:	e000      	b.n	8004bd2 <HAL_ADC_ConfigChannel+0x1a6>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f7ff faec 	bl	80041b0 <LL_ADC_SetDataRightShift>
 8004bd8:	e04c      	b.n	8004c74 <HAL_ADC_ConfigChannel+0x248>
 8004bda:	bf00      	nop
 8004bdc:	47ff0000 	.word	0x47ff0000
 8004be0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	069b      	lsls	r3, r3, #26
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d107      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c06:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	069b      	lsls	r3, r3, #26
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d107      	bne.n	8004c2c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c2a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	069b      	lsls	r3, r3, #26
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d107      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c4e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	069b      	lsls	r3, r3, #26
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d107      	bne.n	8004c74 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c72:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff fbf3 	bl	8004464 <LL_ADC_IsEnabled>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f040 8211 	bne.w	80050a8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	6819      	ldr	r1, [r3, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	461a      	mov	r2, r3
 8004c94:	f7ff fb3e 	bl	8004314 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4aa1      	ldr	r2, [pc, #644]	; (8004f24 <HAL_ADC_ConfigChannel+0x4f8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	f040 812e 	bne.w	8004f00 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10b      	bne.n	8004ccc <HAL_ADC_ConfigChannel+0x2a0>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	0e9b      	lsrs	r3, r3, #26
 8004cba:	3301      	adds	r3, #1
 8004cbc:	f003 031f 	and.w	r3, r3, #31
 8004cc0:	2b09      	cmp	r3, #9
 8004cc2:	bf94      	ite	ls
 8004cc4:	2301      	movls	r3, #1
 8004cc6:	2300      	movhi	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e019      	b.n	8004d00 <HAL_ADC_ConfigChannel+0x2d4>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cd4:	fa93 f3a3 	rbit	r3, r3
 8004cd8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004ce4:	2320      	movs	r3, #32
 8004ce6:	e003      	b.n	8004cf0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cea:	fab3 f383 	clz	r3, r3
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	f003 031f 	and.w	r3, r3, #31
 8004cf6:	2b09      	cmp	r3, #9
 8004cf8:	bf94      	ite	ls
 8004cfa:	2301      	movls	r3, #1
 8004cfc:	2300      	movhi	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d079      	beq.n	8004df8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d107      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x2f4>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	0e9b      	lsrs	r3, r3, #26
 8004d16:	3301      	adds	r3, #1
 8004d18:	069b      	lsls	r3, r3, #26
 8004d1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d1e:	e015      	b.n	8004d4c <HAL_ADC_ConfigChannel+0x320>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d28:	fa93 f3a3 	rbit	r3, r3
 8004d2c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d30:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004d38:	2320      	movs	r3, #32
 8004d3a:	e003      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d3e:	fab3 f383 	clz	r3, r3
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	3301      	adds	r3, #1
 8004d46:	069b      	lsls	r3, r3, #26
 8004d48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d109      	bne.n	8004d6c <HAL_ADC_ConfigChannel+0x340>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	0e9b      	lsrs	r3, r3, #26
 8004d5e:	3301      	adds	r3, #1
 8004d60:	f003 031f 	and.w	r3, r3, #31
 8004d64:	2101      	movs	r1, #1
 8004d66:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6a:	e017      	b.n	8004d9c <HAL_ADC_ConfigChannel+0x370>
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d74:	fa93 f3a3 	rbit	r3, r3
 8004d78:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004d84:	2320      	movs	r3, #32
 8004d86:	e003      	b.n	8004d90 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8a:	fab3 f383 	clz	r3, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	3301      	adds	r3, #1
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	2101      	movs	r1, #1
 8004d98:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9c:	ea42 0103 	orr.w	r1, r2, r3
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <HAL_ADC_ConfigChannel+0x396>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	0e9b      	lsrs	r3, r3, #26
 8004db2:	3301      	adds	r3, #1
 8004db4:	f003 021f 	and.w	r2, r3, #31
 8004db8:	4613      	mov	r3, r2
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	4413      	add	r3, r2
 8004dbe:	051b      	lsls	r3, r3, #20
 8004dc0:	e018      	b.n	8004df4 <HAL_ADC_ConfigChannel+0x3c8>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dca:	fa93 f3a3 	rbit	r3, r3
 8004dce:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004dda:	2320      	movs	r3, #32
 8004ddc:	e003      	b.n	8004de6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de0:	fab3 f383 	clz	r3, r3
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	3301      	adds	r3, #1
 8004de8:	f003 021f 	and.w	r2, r3, #31
 8004dec:	4613      	mov	r3, r2
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	4413      	add	r3, r2
 8004df2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004df4:	430b      	orrs	r3, r1
 8004df6:	e07e      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d107      	bne.n	8004e14 <HAL_ADC_ConfigChannel+0x3e8>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	0e9b      	lsrs	r3, r3, #26
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	069b      	lsls	r3, r3, #26
 8004e0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e12:	e015      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x414>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	fa93 f3a3 	rbit	r3, r3
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004e2c:	2320      	movs	r3, #32
 8004e2e:	e003      	b.n	8004e38 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e32:	fab3 f383 	clz	r3, r3
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	3301      	adds	r3, #1
 8004e3a:	069b      	lsls	r3, r3, #26
 8004e3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d109      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x434>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	0e9b      	lsrs	r3, r3, #26
 8004e52:	3301      	adds	r3, #1
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	2101      	movs	r1, #1
 8004e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5e:	e017      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x464>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	fa93 f3a3 	rbit	r3, r3
 8004e6c:	61bb      	str	r3, [r7, #24]
  return result;
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004e78:	2320      	movs	r3, #32
 8004e7a:	e003      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	fab3 f383 	clz	r3, r3
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	3301      	adds	r3, #1
 8004e86:	f003 031f 	and.w	r3, r3, #31
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	ea42 0103 	orr.w	r1, r2, r3
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10d      	bne.n	8004ebc <HAL_ADC_ConfigChannel+0x490>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	0e9b      	lsrs	r3, r3, #26
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	f003 021f 	and.w	r2, r3, #31
 8004eac:	4613      	mov	r3, r2
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	4413      	add	r3, r2
 8004eb2:	3b1e      	subs	r3, #30
 8004eb4:	051b      	lsls	r3, r3, #20
 8004eb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004eba:	e01b      	b.n	8004ef4 <HAL_ADC_ConfigChannel+0x4c8>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	fa93 f3a3 	rbit	r3, r3
 8004ec8:	60fb      	str	r3, [r7, #12]
  return result;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004ed4:	2320      	movs	r3, #32
 8004ed6:	e003      	b.n	8004ee0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	fab3 f383 	clz	r3, r3
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	f003 021f 	and.w	r2, r3, #31
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	4413      	add	r3, r2
 8004eec:	3b1e      	subs	r3, #30
 8004eee:	051b      	lsls	r3, r3, #20
 8004ef0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ef4:	430b      	orrs	r3, r1
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	6892      	ldr	r2, [r2, #8]
 8004efa:	4619      	mov	r1, r3
 8004efc:	f7ff f9de 	bl	80042bc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f280 80cf 	bge.w	80050a8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a06      	ldr	r2, [pc, #24]	; (8004f28 <HAL_ADC_ConfigChannel+0x4fc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d004      	beq.n	8004f1e <HAL_ADC_ConfigChannel+0x4f2>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <HAL_ADC_ConfigChannel+0x500>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d10a      	bne.n	8004f34 <HAL_ADC_ConfigChannel+0x508>
 8004f1e:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <HAL_ADC_ConfigChannel+0x504>)
 8004f20:	e009      	b.n	8004f36 <HAL_ADC_ConfigChannel+0x50a>
 8004f22:	bf00      	nop
 8004f24:	47ff0000 	.word	0x47ff0000
 8004f28:	40022000 	.word	0x40022000
 8004f2c:	40022100 	.word	0x40022100
 8004f30:	40022300 	.word	0x40022300
 8004f34:	4b61      	ldr	r3, [pc, #388]	; (80050bc <HAL_ADC_ConfigChannel+0x690>)
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff f90c 	bl	8004154 <LL_ADC_GetCommonPathInternalCh>
 8004f3c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a5f      	ldr	r2, [pc, #380]	; (80050c0 <HAL_ADC_ConfigChannel+0x694>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d004      	beq.n	8004f52 <HAL_ADC_ConfigChannel+0x526>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a5d      	ldr	r2, [pc, #372]	; (80050c4 <HAL_ADC_ConfigChannel+0x698>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d10e      	bne.n	8004f70 <HAL_ADC_ConfigChannel+0x544>
 8004f52:	485b      	ldr	r0, [pc, #364]	; (80050c0 <HAL_ADC_ConfigChannel+0x694>)
 8004f54:	f7ff fa86 	bl	8004464 <LL_ADC_IsEnabled>
 8004f58:	4604      	mov	r4, r0
 8004f5a:	485a      	ldr	r0, [pc, #360]	; (80050c4 <HAL_ADC_ConfigChannel+0x698>)
 8004f5c:	f7ff fa82 	bl	8004464 <LL_ADC_IsEnabled>
 8004f60:	4603      	mov	r3, r0
 8004f62:	4323      	orrs	r3, r4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	bf0c      	ite	eq
 8004f68:	2301      	moveq	r3, #1
 8004f6a:	2300      	movne	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	e008      	b.n	8004f82 <HAL_ADC_ConfigChannel+0x556>
 8004f70:	4855      	ldr	r0, [pc, #340]	; (80050c8 <HAL_ADC_ConfigChannel+0x69c>)
 8004f72:	f7ff fa77 	bl	8004464 <LL_ADC_IsEnabled>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d07d      	beq.n	8005082 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a50      	ldr	r2, [pc, #320]	; (80050cc <HAL_ADC_ConfigChannel+0x6a0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d130      	bne.n	8004ff2 <HAL_ADC_ConfigChannel+0x5c6>
 8004f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d12b      	bne.n	8004ff2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a4a      	ldr	r2, [pc, #296]	; (80050c8 <HAL_ADC_ConfigChannel+0x69c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	f040 8081 	bne.w	80050a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a45      	ldr	r2, [pc, #276]	; (80050c0 <HAL_ADC_ConfigChannel+0x694>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d004      	beq.n	8004fba <HAL_ADC_ConfigChannel+0x58e>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a43      	ldr	r2, [pc, #268]	; (80050c4 <HAL_ADC_ConfigChannel+0x698>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d101      	bne.n	8004fbe <HAL_ADC_ConfigChannel+0x592>
 8004fba:	4a45      	ldr	r2, [pc, #276]	; (80050d0 <HAL_ADC_ConfigChannel+0x6a4>)
 8004fbc:	e000      	b.n	8004fc0 <HAL_ADC_ConfigChannel+0x594>
 8004fbe:	4a3f      	ldr	r2, [pc, #252]	; (80050bc <HAL_ADC_ConfigChannel+0x690>)
 8004fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	f7ff f8b0 	bl	800412e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fce:	4b41      	ldr	r3, [pc, #260]	; (80050d4 <HAL_ADC_ConfigChannel+0x6a8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	099b      	lsrs	r3, r3, #6
 8004fd4:	4a40      	ldr	r2, [pc, #256]	; (80050d8 <HAL_ADC_ConfigChannel+0x6ac>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	099b      	lsrs	r3, r3, #6
 8004fdc:	3301      	adds	r3, #1
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004fe2:	e002      	b.n	8004fea <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1f9      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ff0:	e05a      	b.n	80050a8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a39      	ldr	r2, [pc, #228]	; (80050dc <HAL_ADC_ConfigChannel+0x6b0>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d11e      	bne.n	800503a <HAL_ADC_ConfigChannel+0x60e>
 8004ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d119      	bne.n	800503a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a2f      	ldr	r2, [pc, #188]	; (80050c8 <HAL_ADC_ConfigChannel+0x69c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d14b      	bne.n	80050a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a2a      	ldr	r2, [pc, #168]	; (80050c0 <HAL_ADC_ConfigChannel+0x694>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <HAL_ADC_ConfigChannel+0x5f8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a29      	ldr	r2, [pc, #164]	; (80050c4 <HAL_ADC_ConfigChannel+0x698>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d101      	bne.n	8005028 <HAL_ADC_ConfigChannel+0x5fc>
 8005024:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <HAL_ADC_ConfigChannel+0x6a4>)
 8005026:	e000      	b.n	800502a <HAL_ADC_ConfigChannel+0x5fe>
 8005028:	4a24      	ldr	r2, [pc, #144]	; (80050bc <HAL_ADC_ConfigChannel+0x690>)
 800502a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f7ff f87b 	bl	800412e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005038:	e036      	b.n	80050a8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a28      	ldr	r2, [pc, #160]	; (80050e0 <HAL_ADC_ConfigChannel+0x6b4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d131      	bne.n	80050a8 <HAL_ADC_ConfigChannel+0x67c>
 8005044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d12c      	bne.n	80050a8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1d      	ldr	r2, [pc, #116]	; (80050c8 <HAL_ADC_ConfigChannel+0x69c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d127      	bne.n	80050a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a18      	ldr	r2, [pc, #96]	; (80050c0 <HAL_ADC_ConfigChannel+0x694>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d004      	beq.n	800506c <HAL_ADC_ConfigChannel+0x640>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a17      	ldr	r2, [pc, #92]	; (80050c4 <HAL_ADC_ConfigChannel+0x698>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d101      	bne.n	8005070 <HAL_ADC_ConfigChannel+0x644>
 800506c:	4a18      	ldr	r2, [pc, #96]	; (80050d0 <HAL_ADC_ConfigChannel+0x6a4>)
 800506e:	e000      	b.n	8005072 <HAL_ADC_ConfigChannel+0x646>
 8005070:	4a12      	ldr	r2, [pc, #72]	; (80050bc <HAL_ADC_ConfigChannel+0x690>)
 8005072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005074:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f7ff f857 	bl	800412e <LL_ADC_SetCommonPathInternalCh>
 8005080:	e012      	b.n	80050a8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005086:	f043 0220 	orr.w	r2, r3, #32
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005094:	e008      	b.n	80050a8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	f043 0220 	orr.w	r2, r3, #32
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80050b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3784      	adds	r7, #132	; 0x84
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd90      	pop	{r4, r7, pc}
 80050bc:	58026300 	.word	0x58026300
 80050c0:	40022000 	.word	0x40022000
 80050c4:	40022100 	.word	0x40022100
 80050c8:	58026000 	.word	0x58026000
 80050cc:	cb840000 	.word	0xcb840000
 80050d0:	40022300 	.word	0x40022300
 80050d4:	2400008c 	.word	0x2400008c
 80050d8:	053e2d63 	.word	0x053e2d63
 80050dc:	c7520000 	.word	0xc7520000
 80050e0:	cfb80000 	.word	0xcfb80000

080050e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff f9b7 	bl	8004464 <LL_ADC_IsEnabled>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d16e      	bne.n	80051da <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	4b38      	ldr	r3, [pc, #224]	; (80051e4 <ADC_Enable+0x100>)
 8005104:	4013      	ands	r3, r2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00d      	beq.n	8005126 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510e:	f043 0210 	orr.w	r2, r3, #16
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511a:	f043 0201 	orr.w	r2, r3, #1
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e05a      	b.n	80051dc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff f972 	bl	8004414 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005130:	f7fe ffbc 	bl	80040ac <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a2b      	ldr	r2, [pc, #172]	; (80051e8 <ADC_Enable+0x104>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d004      	beq.n	800514a <ADC_Enable+0x66>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a29      	ldr	r2, [pc, #164]	; (80051ec <ADC_Enable+0x108>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d101      	bne.n	800514e <ADC_Enable+0x6a>
 800514a:	4b29      	ldr	r3, [pc, #164]	; (80051f0 <ADC_Enable+0x10c>)
 800514c:	e000      	b.n	8005150 <ADC_Enable+0x6c>
 800514e:	4b29      	ldr	r3, [pc, #164]	; (80051f4 <ADC_Enable+0x110>)
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff f903 	bl	800435c <LL_ADC_GetMultimode>
 8005156:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a23      	ldr	r2, [pc, #140]	; (80051ec <ADC_Enable+0x108>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d002      	beq.n	8005168 <ADC_Enable+0x84>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	e000      	b.n	800516a <ADC_Enable+0x86>
 8005168:	4b1f      	ldr	r3, [pc, #124]	; (80051e8 <ADC_Enable+0x104>)
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6812      	ldr	r2, [r2, #0]
 800516e:	4293      	cmp	r3, r2
 8005170:	d02c      	beq.n	80051cc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d130      	bne.n	80051da <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005178:	e028      	b.n	80051cc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff f970 	bl	8004464 <LL_ADC_IsEnabled>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d104      	bne.n	8005194 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff f940 	bl	8004414 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005194:	f7fe ff8a 	bl	80040ac <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d914      	bls.n	80051cc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d00d      	beq.n	80051cc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b4:	f043 0210 	orr.w	r2, r3, #16
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c0:	f043 0201 	orr.w	r2, r3, #1
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e007      	b.n	80051dc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d1cf      	bne.n	800517a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	8000003f 	.word	0x8000003f
 80051e8:	40022000 	.word	0x40022000
 80051ec:	40022100 	.word	0x40022100
 80051f0:	40022300 	.word	0x40022300
 80051f4:	58026300 	.word	0x58026300

080051f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff f940 	bl	800448a <LL_ADC_IsDisableOngoing>
 800520a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff f927 	bl	8004464 <LL_ADC_IsEnabled>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d047      	beq.n	80052ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d144      	bne.n	80052ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 030d 	and.w	r3, r3, #13
 800522c:	2b01      	cmp	r3, #1
 800522e:	d10c      	bne.n	800524a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4618      	mov	r0, r3
 8005236:	f7ff f901 	bl	800443c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2203      	movs	r2, #3
 8005240:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005242:	f7fe ff33 	bl	80040ac <HAL_GetTick>
 8005246:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005248:	e029      	b.n	800529e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	f043 0210 	orr.w	r2, r3, #16
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	f043 0201 	orr.w	r2, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e023      	b.n	80052ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005266:	f7fe ff21 	bl	80040ac <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d914      	bls.n	800529e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00d      	beq.n	800529e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005286:	f043 0210 	orr.w	r2, r3, #16
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005292:	f043 0201 	orr.w	r2, r3, #1
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e007      	b.n	80052ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1dc      	bne.n	8005266 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b084      	sub	sp, #16
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d14b      	bne.n	8005368 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d021      	beq.n	800532e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fe ff92 	bl	8004218 <LL_ADC_REG_IsTriggerSourceSWStart>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d032      	beq.n	8005360 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d12b      	bne.n	8005360 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d11f      	bne.n	8005360 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005324:	f043 0201 	orr.w	r2, r3, #1
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	655a      	str	r2, [r3, #84]	; 0x54
 800532c:	e018      	b.n	8005360 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0303 	and.w	r3, r3, #3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d111      	bne.n	8005360 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005340:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d105      	bne.n	8005360 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005358:	f043 0201 	orr.w	r2, r3, #1
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f7ff fb45 	bl	80049f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005366:	e00e      	b.n	8005386 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	f003 0310 	and.w	r3, r3, #16
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f7ff fb4f 	bl	8004a18 <HAL_ADC_ErrorCallback>
}
 800537a:	e004      	b.n	8005386 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	4798      	blx	r3
}
 8005386:	bf00      	nop
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f7ff fb31 	bl	8004a04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c8:	f043 0204 	orr.w	r2, r3, #4
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7ff fb21 	bl	8004a18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053d6:	bf00      	nop
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a7a      	ldr	r2, [pc, #488]	; (80055d8 <ADC_ConfigureBoostMode+0x1f8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d004      	beq.n	80053fc <ADC_ConfigureBoostMode+0x1c>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a79      	ldr	r2, [pc, #484]	; (80055dc <ADC_ConfigureBoostMode+0x1fc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d109      	bne.n	8005410 <ADC_ConfigureBoostMode+0x30>
 80053fc:	4b78      	ldr	r3, [pc, #480]	; (80055e0 <ADC_ConfigureBoostMode+0x200>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005404:	2b00      	cmp	r3, #0
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	e008      	b.n	8005422 <ADC_ConfigureBoostMode+0x42>
 8005410:	4b74      	ldr	r3, [pc, #464]	; (80055e4 <ADC_ConfigureBoostMode+0x204>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005418:	2b00      	cmp	r3, #0
 800541a:	bf14      	ite	ne
 800541c:	2301      	movne	r3, #1
 800541e:	2300      	moveq	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01c      	beq.n	8005460 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005426:	f005 fd9f 	bl	800af68 <HAL_RCC_GetHCLKFreq>
 800542a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005434:	d010      	beq.n	8005458 <ADC_ConfigureBoostMode+0x78>
 8005436:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800543a:	d873      	bhi.n	8005524 <ADC_ConfigureBoostMode+0x144>
 800543c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005440:	d002      	beq.n	8005448 <ADC_ConfigureBoostMode+0x68>
 8005442:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005446:	d16d      	bne.n	8005524 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	0c1b      	lsrs	r3, r3, #16
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	fbb2 f3f3 	udiv	r3, r2, r3
 8005454:	60fb      	str	r3, [r7, #12]
        break;
 8005456:	e068      	b.n	800552a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	089b      	lsrs	r3, r3, #2
 800545c:	60fb      	str	r3, [r7, #12]
        break;
 800545e:	e064      	b.n	800552a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005460:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005464:	f04f 0100 	mov.w	r1, #0
 8005468:	f007 f826 	bl	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800546c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005476:	d051      	beq.n	800551c <ADC_ConfigureBoostMode+0x13c>
 8005478:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800547c:	d854      	bhi.n	8005528 <ADC_ConfigureBoostMode+0x148>
 800547e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005482:	d047      	beq.n	8005514 <ADC_ConfigureBoostMode+0x134>
 8005484:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005488:	d84e      	bhi.n	8005528 <ADC_ConfigureBoostMode+0x148>
 800548a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800548e:	d03d      	beq.n	800550c <ADC_ConfigureBoostMode+0x12c>
 8005490:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005494:	d848      	bhi.n	8005528 <ADC_ConfigureBoostMode+0x148>
 8005496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800549a:	d033      	beq.n	8005504 <ADC_ConfigureBoostMode+0x124>
 800549c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054a0:	d842      	bhi.n	8005528 <ADC_ConfigureBoostMode+0x148>
 80054a2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80054a6:	d029      	beq.n	80054fc <ADC_ConfigureBoostMode+0x11c>
 80054a8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80054ac:	d83c      	bhi.n	8005528 <ADC_ConfigureBoostMode+0x148>
 80054ae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80054b2:	d01a      	beq.n	80054ea <ADC_ConfigureBoostMode+0x10a>
 80054b4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80054b8:	d836      	bhi.n	8005528 <ADC_ConfigureBoostMode+0x148>
 80054ba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80054be:	d014      	beq.n	80054ea <ADC_ConfigureBoostMode+0x10a>
 80054c0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80054c4:	d830      	bhi.n	8005528 <ADC_ConfigureBoostMode+0x148>
 80054c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ca:	d00e      	beq.n	80054ea <ADC_ConfigureBoostMode+0x10a>
 80054cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d0:	d82a      	bhi.n	8005528 <ADC_ConfigureBoostMode+0x148>
 80054d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054d6:	d008      	beq.n	80054ea <ADC_ConfigureBoostMode+0x10a>
 80054d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054dc:	d824      	bhi.n	8005528 <ADC_ConfigureBoostMode+0x148>
 80054de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054e2:	d002      	beq.n	80054ea <ADC_ConfigureBoostMode+0x10a>
 80054e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054e8:	d11e      	bne.n	8005528 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	0c9b      	lsrs	r3, r3, #18
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f8:	60fb      	str	r3, [r7, #12]
        break;
 80054fa:	e016      	b.n	800552a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	091b      	lsrs	r3, r3, #4
 8005500:	60fb      	str	r3, [r7, #12]
        break;
 8005502:	e012      	b.n	800552a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	60fb      	str	r3, [r7, #12]
        break;
 800550a:	e00e      	b.n	800552a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	099b      	lsrs	r3, r3, #6
 8005510:	60fb      	str	r3, [r7, #12]
        break;
 8005512:	e00a      	b.n	800552a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	09db      	lsrs	r3, r3, #7
 8005518:	60fb      	str	r3, [r7, #12]
        break;
 800551a:	e006      	b.n	800552a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	0a1b      	lsrs	r3, r3, #8
 8005520:	60fb      	str	r3, [r7, #12]
        break;
 8005522:	e002      	b.n	800552a <ADC_ConfigureBoostMode+0x14a>
        break;
 8005524:	bf00      	nop
 8005526:	e000      	b.n	800552a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005528:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800552a:	f7fe fdcb 	bl	80040c4 <HAL_GetREVID>
 800552e:	4603      	mov	r3, r0
 8005530:	f241 0203 	movw	r2, #4099	; 0x1003
 8005534:	4293      	cmp	r3, r2
 8005536:	d815      	bhi.n	8005564 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4a2b      	ldr	r2, [pc, #172]	; (80055e8 <ADC_ConfigureBoostMode+0x208>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d908      	bls.n	8005552 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800554e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005550:	e03e      	b.n	80055d0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005560:	609a      	str	r2, [r3, #8]
}
 8005562:	e035      	b.n	80055d0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	085b      	lsrs	r3, r3, #1
 8005568:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4a1f      	ldr	r2, [pc, #124]	; (80055ec <ADC_ConfigureBoostMode+0x20c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d808      	bhi.n	8005584 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005580:	609a      	str	r2, [r3, #8]
}
 8005582:	e025      	b.n	80055d0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4a1a      	ldr	r2, [pc, #104]	; (80055f0 <ADC_ConfigureBoostMode+0x210>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d80a      	bhi.n	80055a2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800559e:	609a      	str	r2, [r3, #8]
}
 80055a0:	e016      	b.n	80055d0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <ADC_ConfigureBoostMode+0x214>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d80a      	bhi.n	80055c0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055bc:	609a      	str	r2, [r3, #8]
}
 80055be:	e007      	b.n	80055d0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80055ce:	609a      	str	r2, [r3, #8]
}
 80055d0:	bf00      	nop
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40022000 	.word	0x40022000
 80055dc:	40022100 	.word	0x40022100
 80055e0:	40022300 	.word	0x40022300
 80055e4:	58026300 	.word	0x58026300
 80055e8:	01312d00 	.word	0x01312d00
 80055ec:	005f5e10 	.word	0x005f5e10
 80055f0:	00bebc20 	.word	0x00bebc20
 80055f4:	017d7840 	.word	0x017d7840

080055f8 <LL_ADC_IsEnabled>:
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <LL_ADC_IsEnabled+0x18>
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <LL_ADC_IsEnabled+0x1a>
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
	...

08005620 <LL_ADC_StartCalibration>:
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	4b09      	ldr	r3, [pc, #36]	; (8005658 <LL_ADC_StartCalibration+0x38>)
 8005632:	4013      	ands	r3, r2
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005640:	430a      	orrs	r2, r1
 8005642:	4313      	orrs	r3, r2
 8005644:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	609a      	str	r2, [r3, #8]
}
 800564c:	bf00      	nop
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	3ffeffc0 	.word	0x3ffeffc0

0800565c <LL_ADC_IsCalibrationOnGoing>:
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800566c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005670:	d101      	bne.n	8005676 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005672:	2301      	movs	r3, #1
 8005674:	e000      	b.n	8005678 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <LL_ADC_REG_IsConversionOngoing>:
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b04      	cmp	r3, #4
 8005696:	d101      	bne.n	800569c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
	...

080056ac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <HAL_ADCEx_Calibration_Start+0x1e>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e04c      	b.n	8005764 <HAL_ADCEx_Calibration_Start+0xb8>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7ff fd90 	bl	80051f8 <ADC_Disable>
 80056d8:	4603      	mov	r3, r0
 80056da:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80056dc:	7dfb      	ldrb	r3, [r7, #23]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d135      	bne.n	800574e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056e6:	4b21      	ldr	r3, [pc, #132]	; (800576c <HAL_ADCEx_Calibration_Start+0xc0>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	f043 0202 	orr.w	r2, r3, #2
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7ff ff90 	bl	8005620 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005700:	e014      	b.n	800572c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	3301      	adds	r3, #1
 8005706:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4a19      	ldr	r2, [pc, #100]	; (8005770 <HAL_ADCEx_Calibration_Start+0xc4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d30d      	bcc.n	800572c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005714:	f023 0312 	bic.w	r3, r3, #18
 8005718:	f043 0210 	orr.w	r2, r3, #16
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e01b      	b.n	8005764 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff ff93 	bl	800565c <LL_ADC_IsCalibrationOnGoing>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e2      	bne.n	8005702 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005740:	f023 0303 	bic.w	r3, r3, #3
 8005744:	f043 0201 	orr.w	r2, r3, #1
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	655a      	str	r2, [r3, #84]	; 0x54
 800574c:	e005      	b.n	800575a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005752:	f043 0210 	orr.w	r2, r3, #16
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005762:	7dfb      	ldrb	r3, [r7, #23]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	ffffeefd 	.word	0xffffeefd
 8005770:	25c3f800 	.word	0x25c3f800

08005774 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005774:	b590      	push	{r4, r7, lr}
 8005776:	b09f      	sub	sp, #124	; 0x7c
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800578e:	2302      	movs	r3, #2
 8005790:	e0be      	b.n	8005910 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800579a:	2300      	movs	r3, #0
 800579c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800579e:	2300      	movs	r3, #0
 80057a0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a5c      	ldr	r2, [pc, #368]	; (8005918 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d102      	bne.n	80057b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80057ac:	4b5b      	ldr	r3, [pc, #364]	; (800591c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80057ae:	60bb      	str	r3, [r7, #8]
 80057b0:	e001      	b.n	80057b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80057b2:	2300      	movs	r3, #0
 80057b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10b      	bne.n	80057d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c0:	f043 0220 	orr.w	r2, r3, #32
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e09d      	b.n	8005910 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff ff54 	bl	8005684 <LL_ADC_REG_IsConversionOngoing>
 80057dc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff ff4e 	bl	8005684 <LL_ADC_REG_IsConversionOngoing>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d17f      	bne.n	80058ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80057ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d17c      	bne.n	80058ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a47      	ldr	r2, [pc, #284]	; (8005918 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d004      	beq.n	8005808 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a46      	ldr	r2, [pc, #280]	; (800591c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d101      	bne.n	800580c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005808:	4b45      	ldr	r3, [pc, #276]	; (8005920 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800580a:	e000      	b.n	800580e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800580c:	4b45      	ldr	r3, [pc, #276]	; (8005924 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800580e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d039      	beq.n	800588c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	431a      	orrs	r2, r3
 8005826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005828:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a3a      	ldr	r2, [pc, #232]	; (8005918 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d004      	beq.n	800583e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a38      	ldr	r2, [pc, #224]	; (800591c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d10e      	bne.n	800585c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800583e:	4836      	ldr	r0, [pc, #216]	; (8005918 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005840:	f7ff feda 	bl	80055f8 <LL_ADC_IsEnabled>
 8005844:	4604      	mov	r4, r0
 8005846:	4835      	ldr	r0, [pc, #212]	; (800591c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005848:	f7ff fed6 	bl	80055f8 <LL_ADC_IsEnabled>
 800584c:	4603      	mov	r3, r0
 800584e:	4323      	orrs	r3, r4
 8005850:	2b00      	cmp	r3, #0
 8005852:	bf0c      	ite	eq
 8005854:	2301      	moveq	r3, #1
 8005856:	2300      	movne	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	e008      	b.n	800586e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800585c:	4832      	ldr	r0, [pc, #200]	; (8005928 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800585e:	f7ff fecb 	bl	80055f8 <LL_ADC_IsEnabled>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf0c      	ite	eq
 8005868:	2301      	moveq	r3, #1
 800586a:	2300      	movne	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d047      	beq.n	8005902 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	4b2d      	ldr	r3, [pc, #180]	; (800592c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005878:	4013      	ands	r3, r2
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	6811      	ldr	r1, [r2, #0]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	6892      	ldr	r2, [r2, #8]
 8005882:	430a      	orrs	r2, r1
 8005884:	431a      	orrs	r2, r3
 8005886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005888:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800588a:	e03a      	b.n	8005902 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800588c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005896:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a1e      	ldr	r2, [pc, #120]	; (8005918 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d004      	beq.n	80058ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a1d      	ldr	r2, [pc, #116]	; (800591c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d10e      	bne.n	80058ca <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80058ac:	481a      	ldr	r0, [pc, #104]	; (8005918 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80058ae:	f7ff fea3 	bl	80055f8 <LL_ADC_IsEnabled>
 80058b2:	4604      	mov	r4, r0
 80058b4:	4819      	ldr	r0, [pc, #100]	; (800591c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80058b6:	f7ff fe9f 	bl	80055f8 <LL_ADC_IsEnabled>
 80058ba:	4603      	mov	r3, r0
 80058bc:	4323      	orrs	r3, r4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	bf0c      	ite	eq
 80058c2:	2301      	moveq	r3, #1
 80058c4:	2300      	movne	r3, #0
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	e008      	b.n	80058dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80058ca:	4817      	ldr	r0, [pc, #92]	; (8005928 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80058cc:	f7ff fe94 	bl	80055f8 <LL_ADC_IsEnabled>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bf0c      	ite	eq
 80058d6:	2301      	moveq	r3, #1
 80058d8:	2300      	movne	r3, #0
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d010      	beq.n	8005902 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80058e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	4b11      	ldr	r3, [pc, #68]	; (800592c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80058e6:	4013      	ands	r3, r2
 80058e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058ea:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058ec:	e009      	b.n	8005902 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f2:	f043 0220 	orr.w	r2, r3, #32
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005900:	e000      	b.n	8005904 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005902:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800590c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005910:	4618      	mov	r0, r3
 8005912:	377c      	adds	r7, #124	; 0x7c
 8005914:	46bd      	mov	sp, r7
 8005916:	bd90      	pop	{r4, r7, pc}
 8005918:	40022000 	.word	0x40022000
 800591c:	40022100 	.word	0x40022100
 8005920:	40022300 	.word	0x40022300
 8005924:	58026300 	.word	0x58026300
 8005928:	58026000 	.word	0x58026000
 800592c:	fffff0e0 	.word	0xfffff0e0

08005930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005940:	4b0b      	ldr	r3, [pc, #44]	; (8005970 <__NVIC_SetPriorityGrouping+0x40>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800594c:	4013      	ands	r3, r2
 800594e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005958:	4b06      	ldr	r3, [pc, #24]	; (8005974 <__NVIC_SetPriorityGrouping+0x44>)
 800595a:	4313      	orrs	r3, r2
 800595c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800595e:	4a04      	ldr	r2, [pc, #16]	; (8005970 <__NVIC_SetPriorityGrouping+0x40>)
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	60d3      	str	r3, [r2, #12]
}
 8005964:	bf00      	nop
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	e000ed00 	.word	0xe000ed00
 8005974:	05fa0000 	.word	0x05fa0000

08005978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800597c:	4b04      	ldr	r3, [pc, #16]	; (8005990 <__NVIC_GetPriorityGrouping+0x18>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	0a1b      	lsrs	r3, r3, #8
 8005982:	f003 0307 	and.w	r3, r3, #7
}
 8005986:	4618      	mov	r0, r3
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	e000ed00 	.word	0xe000ed00

08005994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	4603      	mov	r3, r0
 800599c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800599e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	db0b      	blt.n	80059be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059a6:	88fb      	ldrh	r3, [r7, #6]
 80059a8:	f003 021f 	and.w	r2, r3, #31
 80059ac:	4907      	ldr	r1, [pc, #28]	; (80059cc <__NVIC_EnableIRQ+0x38>)
 80059ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059b2:	095b      	lsrs	r3, r3, #5
 80059b4:	2001      	movs	r0, #1
 80059b6:	fa00 f202 	lsl.w	r2, r0, r2
 80059ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	e000e100 	.word	0xe000e100

080059d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	6039      	str	r1, [r7, #0]
 80059da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80059dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	db0a      	blt.n	80059fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	490c      	ldr	r1, [pc, #48]	; (8005a1c <__NVIC_SetPriority+0x4c>)
 80059ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059ee:	0112      	lsls	r2, r2, #4
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	440b      	add	r3, r1
 80059f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059f8:	e00a      	b.n	8005a10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	4908      	ldr	r1, [pc, #32]	; (8005a20 <__NVIC_SetPriority+0x50>)
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	3b04      	subs	r3, #4
 8005a08:	0112      	lsls	r2, r2, #4
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	761a      	strb	r2, [r3, #24]
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	e000e100 	.word	0xe000e100
 8005a20:	e000ed00 	.word	0xe000ed00

08005a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b089      	sub	sp, #36	; 0x24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	f1c3 0307 	rsb	r3, r3, #7
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	bf28      	it	cs
 8005a42:	2304      	movcs	r3, #4
 8005a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	3304      	adds	r3, #4
 8005a4a:	2b06      	cmp	r3, #6
 8005a4c:	d902      	bls.n	8005a54 <NVIC_EncodePriority+0x30>
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	3b03      	subs	r3, #3
 8005a52:	e000      	b.n	8005a56 <NVIC_EncodePriority+0x32>
 8005a54:	2300      	movs	r3, #0
 8005a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	43da      	mvns	r2, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	401a      	ands	r2, r3
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	fa01 f303 	lsl.w	r3, r1, r3
 8005a76:	43d9      	mvns	r1, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a7c:	4313      	orrs	r3, r2
         );
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3724      	adds	r7, #36	; 0x24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff ff4c 	bl	8005930 <__NVIC_SetPriorityGrouping>
}
 8005a98:	bf00      	nop
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005aae:	f7ff ff63 	bl	8005978 <__NVIC_GetPriorityGrouping>
 8005ab2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	6978      	ldr	r0, [r7, #20]
 8005aba:	f7ff ffb3 	bl	8005a24 <NVIC_EncodePriority>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7ff ff82 	bl	80059d0 <__NVIC_SetPriority>
}
 8005acc:	bf00      	nop
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff ff56 	bl	8005994 <__NVIC_EnableIRQ>
}
 8005ae8:	bf00      	nop
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e014      	b.n	8005b2c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	791b      	ldrb	r3, [r3, #4]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d105      	bne.n	8005b18 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fd fca0 	bl	8003458 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e046      	b.n	8005bd6 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	795b      	ldrb	r3, [r3, #5]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d101      	bne.n	8005b54 <HAL_DAC_Start+0x20>
 8005b50:	2302      	movs	r3, #2
 8005b52:	e040      	b.n	8005bd6 <HAL_DAC_Start+0xa2>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6819      	ldr	r1, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	f003 0310 	and.w	r3, r3, #16
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	409a      	lsls	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10f      	bne.n	8005b9e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d11d      	bne.n	8005bc8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0201 	orr.w	r2, r2, #1
 8005b9a:	605a      	str	r2, [r3, #4]
 8005b9c:	e014      	b.n	8005bc8 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	f003 0310 	and.w	r3, r3, #16
 8005bae:	2102      	movs	r1, #2
 8005bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d107      	bne.n	8005bc8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0202 	orr.w	r2, r2, #2
 8005bc6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
	...

08005be4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0a2      	b.n	8005d42 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	795b      	ldrb	r3, [r3, #5]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_DAC_Start_DMA+0x24>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e09c      	b.n	8005d42 <HAL_DAC_Start_DMA+0x15e>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2202      	movs	r2, #2
 8005c12:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d129      	bne.n	8005c6e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	4a4b      	ldr	r2, [pc, #300]	; (8005d4c <HAL_DAC_Start_DMA+0x168>)
 8005c20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	4a4a      	ldr	r2, [pc, #296]	; (8005d50 <HAL_DAC_Start_DMA+0x16c>)
 8005c28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	4a49      	ldr	r2, [pc, #292]	; (8005d54 <HAL_DAC_Start_DMA+0x170>)
 8005c30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c40:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <HAL_DAC_Start_DMA+0x6c>
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d005      	beq.n	8005c5a <HAL_DAC_Start_DMA+0x76>
 8005c4e:	e009      	b.n	8005c64 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3308      	adds	r3, #8
 8005c56:	613b      	str	r3, [r7, #16]
        break;
 8005c58:	e033      	b.n	8005cc2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	330c      	adds	r3, #12
 8005c60:	613b      	str	r3, [r7, #16]
        break;
 8005c62:	e02e      	b.n	8005cc2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3310      	adds	r3, #16
 8005c6a:	613b      	str	r3, [r7, #16]
        break;
 8005c6c:	e029      	b.n	8005cc2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	4a39      	ldr	r2, [pc, #228]	; (8005d58 <HAL_DAC_Start_DMA+0x174>)
 8005c74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	4a38      	ldr	r2, [pc, #224]	; (8005d5c <HAL_DAC_Start_DMA+0x178>)
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	4a37      	ldr	r2, [pc, #220]	; (8005d60 <HAL_DAC_Start_DMA+0x17c>)
 8005c84:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c94:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <HAL_DAC_Start_DMA+0xc0>
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d005      	beq.n	8005cae <HAL_DAC_Start_DMA+0xca>
 8005ca2:	e009      	b.n	8005cb8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3314      	adds	r3, #20
 8005caa:	613b      	str	r3, [r7, #16]
        break;
 8005cac:	e009      	b.n	8005cc2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3318      	adds	r3, #24
 8005cb4:	613b      	str	r3, [r7, #16]
        break;
 8005cb6:	e004      	b.n	8005cc2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	331c      	adds	r3, #28
 8005cbe:	613b      	str	r3, [r7, #16]
        break;
 8005cc0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d111      	bne.n	8005cec <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cd6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6898      	ldr	r0, [r3, #8]
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	f000 fe67 	bl	80069b4 <HAL_DMA_Start_IT>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	75fb      	strb	r3, [r7, #23]
 8005cea:	e010      	b.n	8005d0e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005cfa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	68d8      	ldr	r0, [r3, #12]
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	f000 fe55 	bl	80069b4 <HAL_DMA_Start_IT>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10c      	bne.n	8005d34 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6819      	ldr	r1, [r3, #0]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f003 0310 	and.w	r3, r3, #16
 8005d26:	2201      	movs	r2, #1
 8005d28:	409a      	lsls	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	e005      	b.n	8005d40 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	f043 0204 	orr.w	r2, r3, #4
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	080061d5 	.word	0x080061d5
 8005d50:	080061f7 	.word	0x080061f7
 8005d54:	08006213 	.word	0x08006213
 8005d58:	08006291 	.word	0x08006291
 8005d5c:	080062b3 	.word	0x080062b3
 8005d60:	080062cf 	.word	0x080062cf

08005d64 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e03e      	b.n	8005df6 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6819      	ldr	r1, [r3, #0]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d88:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8c:	43da      	mvns	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	400a      	ands	r2, r1
 8005d94:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6819      	ldr	r1, [r3, #0]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2201      	movs	r2, #1
 8005da4:	fa02 f303 	lsl.w	r3, r2, r3
 8005da8:	43da      	mvns	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	400a      	ands	r2, r1
 8005db0:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10d      	bne.n	8005dd4 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f001 f863 	bl	8006e88 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	e00c      	b.n	8005dee <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f001 f855 	bl	8006e88 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005dec:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e14:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01d      	beq.n	8005e5c <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d018      	beq.n	8005e5c <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f043 0201 	orr.w	r2, r3, #1
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e54:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f86f 	bl	8005f3a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d01d      	beq.n	8005ea2 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d018      	beq.n	8005ea2 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2204      	movs	r2, #4
 8005e74:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f043 0202 	orr.w	r2, r3, #2
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005e8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005e9a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f9ed 	bl	800627c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005ea2:	bf00      	nop
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b087      	sub	sp, #28
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	607a      	str	r2, [r7, #4]
 8005eb6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e015      	b.n	8005ef2 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d105      	bne.n	8005ede <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	3308      	adds	r3, #8
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	e004      	b.n	8005ee8 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	3314      	adds	r3, #20
 8005ee6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	461a      	mov	r2, r3
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005f06:	bf00      	nop
 8005f08:	370c      	adds	r7, #12
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr

08005f12 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005f1a:	bf00      	nop
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005f42:	bf00      	nop
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
	...

08005f50 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08a      	sub	sp, #40	; 0x28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <HAL_DAC_ConfigChannel+0x1e>
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e12a      	b.n	80061c8 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	795b      	ldrb	r3, [r3, #5]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d101      	bne.n	8005f7e <HAL_DAC_ConfigChannel+0x2e>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e124      	b.n	80061c8 <HAL_DAC_ConfigChannel+0x278>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2202      	movs	r2, #2
 8005f88:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d17a      	bne.n	8006088 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005f92:	f7fe f88b 	bl	80040ac <HAL_GetTick>
 8005f96:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d13d      	bne.n	800601a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f9e:	e018      	b.n	8005fd2 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005fa0:	f7fe f884 	bl	80040ac <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d911      	bls.n	8005fd2 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb4:	4b86      	ldr	r3, [pc, #536]	; (80061d0 <HAL_DAC_ConfigChannel+0x280>)
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f043 0208 	orr.w	r2, r3, #8
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2203      	movs	r2, #3
 8005fcc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e0fa      	b.n	80061c8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fd8:	4b7d      	ldr	r3, [pc, #500]	; (80061d0 <HAL_DAC_ConfigChannel+0x280>)
 8005fda:	4013      	ands	r3, r2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1df      	bne.n	8005fa0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	6992      	ldr	r2, [r2, #24]
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40
 8005fea:	e020      	b.n	800602e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005fec:	f7fe f85e 	bl	80040ac <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d90f      	bls.n	800601a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006000:	2b00      	cmp	r3, #0
 8006002:	da0a      	bge.n	800601a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f043 0208 	orr.w	r2, r3, #8
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2203      	movs	r2, #3
 8006014:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e0d6      	b.n	80061c8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006020:	2b00      	cmp	r3, #0
 8006022:	dbe3      	blt.n	8005fec <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	6992      	ldr	r2, [r2, #24]
 800602c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f003 0310 	and.w	r3, r3, #16
 800603a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800603e:	fa01 f303 	lsl.w	r3, r1, r3
 8006042:	43db      	mvns	r3, r3
 8006044:	ea02 0103 	and.w	r1, r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	69da      	ldr	r2, [r3, #28]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f003 0310 	and.w	r3, r3, #16
 8006052:	409a      	lsls	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	21ff      	movs	r1, #255	; 0xff
 800606a:	fa01 f303 	lsl.w	r3, r1, r3
 800606e:	43db      	mvns	r3, r3
 8006070:	ea02 0103 	and.w	r1, r2, r3
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6a1a      	ldr	r2, [r3, #32]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f003 0310 	and.w	r3, r3, #16
 800607e:	409a      	lsls	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d11d      	bne.n	80060cc <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f003 0310 	and.w	r3, r3, #16
 800609e:	221f      	movs	r2, #31
 80060a0:	fa02 f303 	lsl.w	r3, r2, r3
 80060a4:	43db      	mvns	r3, r3
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	4013      	ands	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f003 0310 	and.w	r3, r3, #16
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	fa02 f303 	lsl.w	r3, r2, r3
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f003 0310 	and.w	r3, r3, #16
 80060da:	2207      	movs	r2, #7
 80060dc:	fa02 f303 	lsl.w	r3, r2, r3
 80060e0:	43db      	mvns	r3, r3
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	4013      	ands	r3, r2
 80060e6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d102      	bne.n	80060f6 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80060f0:	2300      	movs	r3, #0
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
 80060f4:	e00f      	b.n	8006116 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d102      	bne.n	8006104 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80060fe:	2301      	movs	r3, #1
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
 8006102:	e008      	b.n	8006116 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d102      	bne.n	8006112 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800610c:	2301      	movs	r3, #1
 800610e:	627b      	str	r3, [r7, #36]	; 0x24
 8006110:	e001      	b.n	8006116 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006112:	2300      	movs	r3, #0
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	4313      	orrs	r3, r2
 8006120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f003 0310 	and.w	r3, r3, #16
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	fa02 f303 	lsl.w	r3, r2, r3
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	4313      	orrs	r3, r2
 8006136:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6819      	ldr	r1, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	43da      	mvns	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	400a      	ands	r2, r1
 800615c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	43db      	mvns	r3, r3
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	4013      	ands	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	4313      	orrs	r3, r2
 8006192:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6819      	ldr	r1, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f003 0310 	and.w	r3, r3, #16
 80061a8:	22c0      	movs	r2, #192	; 0xc0
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	43da      	mvns	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	400a      	ands	r2, r1
 80061b6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2201      	movs	r2, #1
 80061bc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80061c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3728      	adds	r7, #40	; 0x28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20008000 	.word	0x20008000

080061d4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f7ff fe8b 	bl	8005efe <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	711a      	strb	r2, [r3, #4]
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff fe84 	bl	8005f12 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800620a:	bf00      	nop
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	f043 0204 	orr.w	r2, r3, #4
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7ff fe7a 	bl	8005f26 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	711a      	strb	r2, [r3, #4]
}
 8006238:	bf00      	nop
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f7ff ffce 	bl	8006240 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2201      	movs	r2, #1
 80062a8:	711a      	strb	r2, [r3, #4]
}
 80062aa:	bf00      	nop
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062be:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f7ff ffc7 	bl	8006254 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f043 0204 	orr.w	r2, r3, #4
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f7ff ffbd 	bl	8006268 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	711a      	strb	r2, [r3, #4]
}
 80062f4:	bf00      	nop
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006304:	f7fd fed2 	bl	80040ac <HAL_GetTick>
 8006308:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e316      	b.n	8006942 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a66      	ldr	r2, [pc, #408]	; (80064b4 <HAL_DMA_Init+0x1b8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d04a      	beq.n	80063b4 <HAL_DMA_Init+0xb8>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a65      	ldr	r2, [pc, #404]	; (80064b8 <HAL_DMA_Init+0x1bc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d045      	beq.n	80063b4 <HAL_DMA_Init+0xb8>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a63      	ldr	r2, [pc, #396]	; (80064bc <HAL_DMA_Init+0x1c0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d040      	beq.n	80063b4 <HAL_DMA_Init+0xb8>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a62      	ldr	r2, [pc, #392]	; (80064c0 <HAL_DMA_Init+0x1c4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d03b      	beq.n	80063b4 <HAL_DMA_Init+0xb8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a60      	ldr	r2, [pc, #384]	; (80064c4 <HAL_DMA_Init+0x1c8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d036      	beq.n	80063b4 <HAL_DMA_Init+0xb8>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a5f      	ldr	r2, [pc, #380]	; (80064c8 <HAL_DMA_Init+0x1cc>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d031      	beq.n	80063b4 <HAL_DMA_Init+0xb8>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a5d      	ldr	r2, [pc, #372]	; (80064cc <HAL_DMA_Init+0x1d0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d02c      	beq.n	80063b4 <HAL_DMA_Init+0xb8>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a5c      	ldr	r2, [pc, #368]	; (80064d0 <HAL_DMA_Init+0x1d4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d027      	beq.n	80063b4 <HAL_DMA_Init+0xb8>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a5a      	ldr	r2, [pc, #360]	; (80064d4 <HAL_DMA_Init+0x1d8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d022      	beq.n	80063b4 <HAL_DMA_Init+0xb8>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a59      	ldr	r2, [pc, #356]	; (80064d8 <HAL_DMA_Init+0x1dc>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d01d      	beq.n	80063b4 <HAL_DMA_Init+0xb8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a57      	ldr	r2, [pc, #348]	; (80064dc <HAL_DMA_Init+0x1e0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d018      	beq.n	80063b4 <HAL_DMA_Init+0xb8>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a56      	ldr	r2, [pc, #344]	; (80064e0 <HAL_DMA_Init+0x1e4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d013      	beq.n	80063b4 <HAL_DMA_Init+0xb8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a54      	ldr	r2, [pc, #336]	; (80064e4 <HAL_DMA_Init+0x1e8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d00e      	beq.n	80063b4 <HAL_DMA_Init+0xb8>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a53      	ldr	r2, [pc, #332]	; (80064e8 <HAL_DMA_Init+0x1ec>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d009      	beq.n	80063b4 <HAL_DMA_Init+0xb8>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a51      	ldr	r2, [pc, #324]	; (80064ec <HAL_DMA_Init+0x1f0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d004      	beq.n	80063b4 <HAL_DMA_Init+0xb8>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a50      	ldr	r2, [pc, #320]	; (80064f0 <HAL_DMA_Init+0x1f4>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d101      	bne.n	80063b8 <HAL_DMA_Init+0xbc>
 80063b4:	2301      	movs	r3, #1
 80063b6:	e000      	b.n	80063ba <HAL_DMA_Init+0xbe>
 80063b8:	2300      	movs	r3, #0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 813b 	beq.w	8006636 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a37      	ldr	r2, [pc, #220]	; (80064b4 <HAL_DMA_Init+0x1b8>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d04a      	beq.n	8006470 <HAL_DMA_Init+0x174>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a36      	ldr	r2, [pc, #216]	; (80064b8 <HAL_DMA_Init+0x1bc>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d045      	beq.n	8006470 <HAL_DMA_Init+0x174>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a34      	ldr	r2, [pc, #208]	; (80064bc <HAL_DMA_Init+0x1c0>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d040      	beq.n	8006470 <HAL_DMA_Init+0x174>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a33      	ldr	r2, [pc, #204]	; (80064c0 <HAL_DMA_Init+0x1c4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d03b      	beq.n	8006470 <HAL_DMA_Init+0x174>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a31      	ldr	r2, [pc, #196]	; (80064c4 <HAL_DMA_Init+0x1c8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d036      	beq.n	8006470 <HAL_DMA_Init+0x174>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a30      	ldr	r2, [pc, #192]	; (80064c8 <HAL_DMA_Init+0x1cc>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d031      	beq.n	8006470 <HAL_DMA_Init+0x174>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a2e      	ldr	r2, [pc, #184]	; (80064cc <HAL_DMA_Init+0x1d0>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d02c      	beq.n	8006470 <HAL_DMA_Init+0x174>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a2d      	ldr	r2, [pc, #180]	; (80064d0 <HAL_DMA_Init+0x1d4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d027      	beq.n	8006470 <HAL_DMA_Init+0x174>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a2b      	ldr	r2, [pc, #172]	; (80064d4 <HAL_DMA_Init+0x1d8>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d022      	beq.n	8006470 <HAL_DMA_Init+0x174>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a2a      	ldr	r2, [pc, #168]	; (80064d8 <HAL_DMA_Init+0x1dc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d01d      	beq.n	8006470 <HAL_DMA_Init+0x174>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a28      	ldr	r2, [pc, #160]	; (80064dc <HAL_DMA_Init+0x1e0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d018      	beq.n	8006470 <HAL_DMA_Init+0x174>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a27      	ldr	r2, [pc, #156]	; (80064e0 <HAL_DMA_Init+0x1e4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d013      	beq.n	8006470 <HAL_DMA_Init+0x174>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a25      	ldr	r2, [pc, #148]	; (80064e4 <HAL_DMA_Init+0x1e8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d00e      	beq.n	8006470 <HAL_DMA_Init+0x174>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a24      	ldr	r2, [pc, #144]	; (80064e8 <HAL_DMA_Init+0x1ec>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d009      	beq.n	8006470 <HAL_DMA_Init+0x174>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a22      	ldr	r2, [pc, #136]	; (80064ec <HAL_DMA_Init+0x1f0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d004      	beq.n	8006470 <HAL_DMA_Init+0x174>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a21      	ldr	r2, [pc, #132]	; (80064f0 <HAL_DMA_Init+0x1f4>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d108      	bne.n	8006482 <HAL_DMA_Init+0x186>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0201 	bic.w	r2, r2, #1
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	e007      	b.n	8006492 <HAL_DMA_Init+0x196>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0201 	bic.w	r2, r2, #1
 8006490:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006492:	e02f      	b.n	80064f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006494:	f7fd fe0a 	bl	80040ac <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b05      	cmp	r3, #5
 80064a0:	d928      	bls.n	80064f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2220      	movs	r2, #32
 80064a6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2203      	movs	r2, #3
 80064ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e246      	b.n	8006942 <HAL_DMA_Init+0x646>
 80064b4:	40020010 	.word	0x40020010
 80064b8:	40020028 	.word	0x40020028
 80064bc:	40020040 	.word	0x40020040
 80064c0:	40020058 	.word	0x40020058
 80064c4:	40020070 	.word	0x40020070
 80064c8:	40020088 	.word	0x40020088
 80064cc:	400200a0 	.word	0x400200a0
 80064d0:	400200b8 	.word	0x400200b8
 80064d4:	40020410 	.word	0x40020410
 80064d8:	40020428 	.word	0x40020428
 80064dc:	40020440 	.word	0x40020440
 80064e0:	40020458 	.word	0x40020458
 80064e4:	40020470 	.word	0x40020470
 80064e8:	40020488 	.word	0x40020488
 80064ec:	400204a0 	.word	0x400204a0
 80064f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1c8      	bne.n	8006494 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	4b83      	ldr	r3, [pc, #524]	; (800671c <HAL_DMA_Init+0x420>)
 800650e:	4013      	ands	r3, r2
 8006510:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800651a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006526:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006532:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006544:	2b04      	cmp	r3, #4
 8006546:	d107      	bne.n	8006558 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006550:	4313      	orrs	r3, r2
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	4313      	orrs	r3, r2
 8006556:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006558:	4b71      	ldr	r3, [pc, #452]	; (8006720 <HAL_DMA_Init+0x424>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	4b71      	ldr	r3, [pc, #452]	; (8006724 <HAL_DMA_Init+0x428>)
 800655e:	4013      	ands	r3, r2
 8006560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006564:	d328      	bcc.n	80065b8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	2b28      	cmp	r3, #40	; 0x28
 800656c:	d903      	bls.n	8006576 <HAL_DMA_Init+0x27a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b2e      	cmp	r3, #46	; 0x2e
 8006574:	d917      	bls.n	80065a6 <HAL_DMA_Init+0x2aa>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b3e      	cmp	r3, #62	; 0x3e
 800657c:	d903      	bls.n	8006586 <HAL_DMA_Init+0x28a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b42      	cmp	r3, #66	; 0x42
 8006584:	d90f      	bls.n	80065a6 <HAL_DMA_Init+0x2aa>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b46      	cmp	r3, #70	; 0x46
 800658c:	d903      	bls.n	8006596 <HAL_DMA_Init+0x29a>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2b48      	cmp	r3, #72	; 0x48
 8006594:	d907      	bls.n	80065a6 <HAL_DMA_Init+0x2aa>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b4e      	cmp	r3, #78	; 0x4e
 800659c:	d905      	bls.n	80065aa <HAL_DMA_Init+0x2ae>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	2b52      	cmp	r3, #82	; 0x52
 80065a4:	d801      	bhi.n	80065aa <HAL_DMA_Init+0x2ae>
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <HAL_DMA_Init+0x2b0>
 80065aa:	2300      	movs	r3, #0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065b6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f023 0307 	bic.w	r3, r3, #7
 80065ce:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d117      	bne.n	8006612 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00e      	beq.n	8006612 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f002 fb3f 	bl	8008c78 <DMA_CheckFifoParam>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d008      	beq.n	8006612 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2240      	movs	r2, #64	; 0x40
 8006604:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e197      	b.n	8006942 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f002 fa7a 	bl	8008b14 <DMA_CalcBaseAndBitshift>
 8006620:	4603      	mov	r3, r0
 8006622:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006628:	f003 031f 	and.w	r3, r3, #31
 800662c:	223f      	movs	r2, #63	; 0x3f
 800662e:	409a      	lsls	r2, r3
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	609a      	str	r2, [r3, #8]
 8006634:	e0cd      	b.n	80067d2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a3b      	ldr	r2, [pc, #236]	; (8006728 <HAL_DMA_Init+0x42c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d022      	beq.n	8006686 <HAL_DMA_Init+0x38a>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a39      	ldr	r2, [pc, #228]	; (800672c <HAL_DMA_Init+0x430>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d01d      	beq.n	8006686 <HAL_DMA_Init+0x38a>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a38      	ldr	r2, [pc, #224]	; (8006730 <HAL_DMA_Init+0x434>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d018      	beq.n	8006686 <HAL_DMA_Init+0x38a>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a36      	ldr	r2, [pc, #216]	; (8006734 <HAL_DMA_Init+0x438>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d013      	beq.n	8006686 <HAL_DMA_Init+0x38a>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a35      	ldr	r2, [pc, #212]	; (8006738 <HAL_DMA_Init+0x43c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00e      	beq.n	8006686 <HAL_DMA_Init+0x38a>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a33      	ldr	r2, [pc, #204]	; (800673c <HAL_DMA_Init+0x440>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d009      	beq.n	8006686 <HAL_DMA_Init+0x38a>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a32      	ldr	r2, [pc, #200]	; (8006740 <HAL_DMA_Init+0x444>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d004      	beq.n	8006686 <HAL_DMA_Init+0x38a>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a30      	ldr	r2, [pc, #192]	; (8006744 <HAL_DMA_Init+0x448>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d101      	bne.n	800668a <HAL_DMA_Init+0x38e>
 8006686:	2301      	movs	r3, #1
 8006688:	e000      	b.n	800668c <HAL_DMA_Init+0x390>
 800668a:	2300      	movs	r3, #0
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 8097 	beq.w	80067c0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a24      	ldr	r2, [pc, #144]	; (8006728 <HAL_DMA_Init+0x42c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d021      	beq.n	80066e0 <HAL_DMA_Init+0x3e4>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a22      	ldr	r2, [pc, #136]	; (800672c <HAL_DMA_Init+0x430>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d01c      	beq.n	80066e0 <HAL_DMA_Init+0x3e4>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a21      	ldr	r2, [pc, #132]	; (8006730 <HAL_DMA_Init+0x434>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d017      	beq.n	80066e0 <HAL_DMA_Init+0x3e4>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a1f      	ldr	r2, [pc, #124]	; (8006734 <HAL_DMA_Init+0x438>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d012      	beq.n	80066e0 <HAL_DMA_Init+0x3e4>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a1e      	ldr	r2, [pc, #120]	; (8006738 <HAL_DMA_Init+0x43c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00d      	beq.n	80066e0 <HAL_DMA_Init+0x3e4>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a1c      	ldr	r2, [pc, #112]	; (800673c <HAL_DMA_Init+0x440>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d008      	beq.n	80066e0 <HAL_DMA_Init+0x3e4>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1b      	ldr	r2, [pc, #108]	; (8006740 <HAL_DMA_Init+0x444>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <HAL_DMA_Init+0x3e4>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a19      	ldr	r2, [pc, #100]	; (8006744 <HAL_DMA_Init+0x448>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2202      	movs	r2, #2
 80066e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4b12      	ldr	r3, [pc, #72]	; (8006748 <HAL_DMA_Init+0x44c>)
 80066fe:	4013      	ands	r3, r2
 8006700:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2b40      	cmp	r3, #64	; 0x40
 8006708:	d020      	beq.n	800674c <HAL_DMA_Init+0x450>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	2b80      	cmp	r3, #128	; 0x80
 8006710:	d102      	bne.n	8006718 <HAL_DMA_Init+0x41c>
 8006712:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006716:	e01a      	b.n	800674e <HAL_DMA_Init+0x452>
 8006718:	2300      	movs	r3, #0
 800671a:	e018      	b.n	800674e <HAL_DMA_Init+0x452>
 800671c:	fe10803f 	.word	0xfe10803f
 8006720:	5c001000 	.word	0x5c001000
 8006724:	ffff0000 	.word	0xffff0000
 8006728:	58025408 	.word	0x58025408
 800672c:	5802541c 	.word	0x5802541c
 8006730:	58025430 	.word	0x58025430
 8006734:	58025444 	.word	0x58025444
 8006738:	58025458 	.word	0x58025458
 800673c:	5802546c 	.word	0x5802546c
 8006740:	58025480 	.word	0x58025480
 8006744:	58025494 	.word	0x58025494
 8006748:	fffe000f 	.word	0xfffe000f
 800674c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	68d2      	ldr	r2, [r2, #12]
 8006752:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006754:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800675c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006764:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800676c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006774:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800677c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	4b6e      	ldr	r3, [pc, #440]	; (800694c <HAL_DMA_Init+0x650>)
 8006794:	4413      	add	r3, r2
 8006796:	4a6e      	ldr	r2, [pc, #440]	; (8006950 <HAL_DMA_Init+0x654>)
 8006798:	fba2 2303 	umull	r2, r3, r2, r3
 800679c:	091b      	lsrs	r3, r3, #4
 800679e:	009a      	lsls	r2, r3, #2
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f002 f9b5 	bl	8008b14 <DMA_CalcBaseAndBitshift>
 80067aa:	4603      	mov	r3, r0
 80067ac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b2:	f003 031f 	and.w	r3, r3, #31
 80067b6:	2201      	movs	r2, #1
 80067b8:	409a      	lsls	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	605a      	str	r2, [r3, #4]
 80067be:	e008      	b.n	80067d2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2240      	movs	r2, #64	; 0x40
 80067c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2203      	movs	r2, #3
 80067ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e0b7      	b.n	8006942 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a5f      	ldr	r2, [pc, #380]	; (8006954 <HAL_DMA_Init+0x658>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d072      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a5d      	ldr	r2, [pc, #372]	; (8006958 <HAL_DMA_Init+0x65c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d06d      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a5c      	ldr	r2, [pc, #368]	; (800695c <HAL_DMA_Init+0x660>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d068      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a5a      	ldr	r2, [pc, #360]	; (8006960 <HAL_DMA_Init+0x664>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d063      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a59      	ldr	r2, [pc, #356]	; (8006964 <HAL_DMA_Init+0x668>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d05e      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a57      	ldr	r2, [pc, #348]	; (8006968 <HAL_DMA_Init+0x66c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d059      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a56      	ldr	r2, [pc, #344]	; (800696c <HAL_DMA_Init+0x670>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d054      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a54      	ldr	r2, [pc, #336]	; (8006970 <HAL_DMA_Init+0x674>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d04f      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a53      	ldr	r2, [pc, #332]	; (8006974 <HAL_DMA_Init+0x678>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d04a      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a51      	ldr	r2, [pc, #324]	; (8006978 <HAL_DMA_Init+0x67c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d045      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a50      	ldr	r2, [pc, #320]	; (800697c <HAL_DMA_Init+0x680>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d040      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a4e      	ldr	r2, [pc, #312]	; (8006980 <HAL_DMA_Init+0x684>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d03b      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a4d      	ldr	r2, [pc, #308]	; (8006984 <HAL_DMA_Init+0x688>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d036      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a4b      	ldr	r2, [pc, #300]	; (8006988 <HAL_DMA_Init+0x68c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d031      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a4a      	ldr	r2, [pc, #296]	; (800698c <HAL_DMA_Init+0x690>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d02c      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a48      	ldr	r2, [pc, #288]	; (8006990 <HAL_DMA_Init+0x694>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d027      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a47      	ldr	r2, [pc, #284]	; (8006994 <HAL_DMA_Init+0x698>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d022      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a45      	ldr	r2, [pc, #276]	; (8006998 <HAL_DMA_Init+0x69c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d01d      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a44      	ldr	r2, [pc, #272]	; (800699c <HAL_DMA_Init+0x6a0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d018      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a42      	ldr	r2, [pc, #264]	; (80069a0 <HAL_DMA_Init+0x6a4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d013      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a41      	ldr	r2, [pc, #260]	; (80069a4 <HAL_DMA_Init+0x6a8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00e      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a3f      	ldr	r2, [pc, #252]	; (80069a8 <HAL_DMA_Init+0x6ac>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d009      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a3e      	ldr	r2, [pc, #248]	; (80069ac <HAL_DMA_Init+0x6b0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d004      	beq.n	80068c2 <HAL_DMA_Init+0x5c6>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a3c      	ldr	r2, [pc, #240]	; (80069b0 <HAL_DMA_Init+0x6b4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d101      	bne.n	80068c6 <HAL_DMA_Init+0x5ca>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e000      	b.n	80068c8 <HAL_DMA_Init+0x5cc>
 80068c6:	2300      	movs	r3, #0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d032      	beq.n	8006932 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f002 fa4f 	bl	8008d70 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	2b80      	cmp	r3, #128	; 0x80
 80068d8:	d102      	bne.n	80068e0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80068f4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d010      	beq.n	8006920 <HAL_DMA_Init+0x624>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b08      	cmp	r3, #8
 8006904:	d80c      	bhi.n	8006920 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f002 facc 	bl	8008ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006910:	2200      	movs	r2, #0
 8006912:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800691c:	605a      	str	r2, [r3, #4]
 800691e:	e008      	b.n	8006932 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	a7fdabf8 	.word	0xa7fdabf8
 8006950:	cccccccd 	.word	0xcccccccd
 8006954:	40020010 	.word	0x40020010
 8006958:	40020028 	.word	0x40020028
 800695c:	40020040 	.word	0x40020040
 8006960:	40020058 	.word	0x40020058
 8006964:	40020070 	.word	0x40020070
 8006968:	40020088 	.word	0x40020088
 800696c:	400200a0 	.word	0x400200a0
 8006970:	400200b8 	.word	0x400200b8
 8006974:	40020410 	.word	0x40020410
 8006978:	40020428 	.word	0x40020428
 800697c:	40020440 	.word	0x40020440
 8006980:	40020458 	.word	0x40020458
 8006984:	40020470 	.word	0x40020470
 8006988:	40020488 	.word	0x40020488
 800698c:	400204a0 	.word	0x400204a0
 8006990:	400204b8 	.word	0x400204b8
 8006994:	58025408 	.word	0x58025408
 8006998:	5802541c 	.word	0x5802541c
 800699c:	58025430 	.word	0x58025430
 80069a0:	58025444 	.word	0x58025444
 80069a4:	58025458 	.word	0x58025458
 80069a8:	5802546c 	.word	0x5802546c
 80069ac:	58025480 	.word	0x58025480
 80069b0:	58025494 	.word	0x58025494

080069b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
 80069c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e226      	b.n	8006e1e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d101      	bne.n	80069de <HAL_DMA_Start_IT+0x2a>
 80069da:	2302      	movs	r3, #2
 80069dc:	e21f      	b.n	8006e1e <HAL_DMA_Start_IT+0x46a>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	f040 820a 	bne.w	8006e08 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a68      	ldr	r2, [pc, #416]	; (8006ba8 <HAL_DMA_Start_IT+0x1f4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d04a      	beq.n	8006aa2 <HAL_DMA_Start_IT+0xee>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a66      	ldr	r2, [pc, #408]	; (8006bac <HAL_DMA_Start_IT+0x1f8>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d045      	beq.n	8006aa2 <HAL_DMA_Start_IT+0xee>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a65      	ldr	r2, [pc, #404]	; (8006bb0 <HAL_DMA_Start_IT+0x1fc>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d040      	beq.n	8006aa2 <HAL_DMA_Start_IT+0xee>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a63      	ldr	r2, [pc, #396]	; (8006bb4 <HAL_DMA_Start_IT+0x200>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d03b      	beq.n	8006aa2 <HAL_DMA_Start_IT+0xee>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a62      	ldr	r2, [pc, #392]	; (8006bb8 <HAL_DMA_Start_IT+0x204>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d036      	beq.n	8006aa2 <HAL_DMA_Start_IT+0xee>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a60      	ldr	r2, [pc, #384]	; (8006bbc <HAL_DMA_Start_IT+0x208>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d031      	beq.n	8006aa2 <HAL_DMA_Start_IT+0xee>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a5f      	ldr	r2, [pc, #380]	; (8006bc0 <HAL_DMA_Start_IT+0x20c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d02c      	beq.n	8006aa2 <HAL_DMA_Start_IT+0xee>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a5d      	ldr	r2, [pc, #372]	; (8006bc4 <HAL_DMA_Start_IT+0x210>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d027      	beq.n	8006aa2 <HAL_DMA_Start_IT+0xee>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a5c      	ldr	r2, [pc, #368]	; (8006bc8 <HAL_DMA_Start_IT+0x214>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d022      	beq.n	8006aa2 <HAL_DMA_Start_IT+0xee>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a5a      	ldr	r2, [pc, #360]	; (8006bcc <HAL_DMA_Start_IT+0x218>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d01d      	beq.n	8006aa2 <HAL_DMA_Start_IT+0xee>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a59      	ldr	r2, [pc, #356]	; (8006bd0 <HAL_DMA_Start_IT+0x21c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d018      	beq.n	8006aa2 <HAL_DMA_Start_IT+0xee>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a57      	ldr	r2, [pc, #348]	; (8006bd4 <HAL_DMA_Start_IT+0x220>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d013      	beq.n	8006aa2 <HAL_DMA_Start_IT+0xee>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a56      	ldr	r2, [pc, #344]	; (8006bd8 <HAL_DMA_Start_IT+0x224>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00e      	beq.n	8006aa2 <HAL_DMA_Start_IT+0xee>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a54      	ldr	r2, [pc, #336]	; (8006bdc <HAL_DMA_Start_IT+0x228>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d009      	beq.n	8006aa2 <HAL_DMA_Start_IT+0xee>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a53      	ldr	r2, [pc, #332]	; (8006be0 <HAL_DMA_Start_IT+0x22c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d004      	beq.n	8006aa2 <HAL_DMA_Start_IT+0xee>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a51      	ldr	r2, [pc, #324]	; (8006be4 <HAL_DMA_Start_IT+0x230>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d108      	bne.n	8006ab4 <HAL_DMA_Start_IT+0x100>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0201 	bic.w	r2, r2, #1
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	e007      	b.n	8006ac4 <HAL_DMA_Start_IT+0x110>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0201 	bic.w	r2, r2, #1
 8006ac2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	68b9      	ldr	r1, [r7, #8]
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f001 fe76 	bl	80087bc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a34      	ldr	r2, [pc, #208]	; (8006ba8 <HAL_DMA_Start_IT+0x1f4>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d04a      	beq.n	8006b70 <HAL_DMA_Start_IT+0x1bc>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a33      	ldr	r2, [pc, #204]	; (8006bac <HAL_DMA_Start_IT+0x1f8>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d045      	beq.n	8006b70 <HAL_DMA_Start_IT+0x1bc>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a31      	ldr	r2, [pc, #196]	; (8006bb0 <HAL_DMA_Start_IT+0x1fc>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d040      	beq.n	8006b70 <HAL_DMA_Start_IT+0x1bc>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a30      	ldr	r2, [pc, #192]	; (8006bb4 <HAL_DMA_Start_IT+0x200>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d03b      	beq.n	8006b70 <HAL_DMA_Start_IT+0x1bc>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a2e      	ldr	r2, [pc, #184]	; (8006bb8 <HAL_DMA_Start_IT+0x204>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d036      	beq.n	8006b70 <HAL_DMA_Start_IT+0x1bc>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a2d      	ldr	r2, [pc, #180]	; (8006bbc <HAL_DMA_Start_IT+0x208>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d031      	beq.n	8006b70 <HAL_DMA_Start_IT+0x1bc>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a2b      	ldr	r2, [pc, #172]	; (8006bc0 <HAL_DMA_Start_IT+0x20c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d02c      	beq.n	8006b70 <HAL_DMA_Start_IT+0x1bc>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a2a      	ldr	r2, [pc, #168]	; (8006bc4 <HAL_DMA_Start_IT+0x210>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d027      	beq.n	8006b70 <HAL_DMA_Start_IT+0x1bc>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a28      	ldr	r2, [pc, #160]	; (8006bc8 <HAL_DMA_Start_IT+0x214>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d022      	beq.n	8006b70 <HAL_DMA_Start_IT+0x1bc>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a27      	ldr	r2, [pc, #156]	; (8006bcc <HAL_DMA_Start_IT+0x218>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d01d      	beq.n	8006b70 <HAL_DMA_Start_IT+0x1bc>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a25      	ldr	r2, [pc, #148]	; (8006bd0 <HAL_DMA_Start_IT+0x21c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d018      	beq.n	8006b70 <HAL_DMA_Start_IT+0x1bc>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a24      	ldr	r2, [pc, #144]	; (8006bd4 <HAL_DMA_Start_IT+0x220>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d013      	beq.n	8006b70 <HAL_DMA_Start_IT+0x1bc>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a22      	ldr	r2, [pc, #136]	; (8006bd8 <HAL_DMA_Start_IT+0x224>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d00e      	beq.n	8006b70 <HAL_DMA_Start_IT+0x1bc>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a21      	ldr	r2, [pc, #132]	; (8006bdc <HAL_DMA_Start_IT+0x228>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d009      	beq.n	8006b70 <HAL_DMA_Start_IT+0x1bc>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a1f      	ldr	r2, [pc, #124]	; (8006be0 <HAL_DMA_Start_IT+0x22c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d004      	beq.n	8006b70 <HAL_DMA_Start_IT+0x1bc>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1e      	ldr	r2, [pc, #120]	; (8006be4 <HAL_DMA_Start_IT+0x230>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d101      	bne.n	8006b74 <HAL_DMA_Start_IT+0x1c0>
 8006b70:	2301      	movs	r3, #1
 8006b72:	e000      	b.n	8006b76 <HAL_DMA_Start_IT+0x1c2>
 8006b74:	2300      	movs	r3, #0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d036      	beq.n	8006be8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f023 021e 	bic.w	r2, r3, #30
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f042 0216 	orr.w	r2, r2, #22
 8006b8c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d03e      	beq.n	8006c14 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f042 0208 	orr.w	r2, r2, #8
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	e035      	b.n	8006c14 <HAL_DMA_Start_IT+0x260>
 8006ba8:	40020010 	.word	0x40020010
 8006bac:	40020028 	.word	0x40020028
 8006bb0:	40020040 	.word	0x40020040
 8006bb4:	40020058 	.word	0x40020058
 8006bb8:	40020070 	.word	0x40020070
 8006bbc:	40020088 	.word	0x40020088
 8006bc0:	400200a0 	.word	0x400200a0
 8006bc4:	400200b8 	.word	0x400200b8
 8006bc8:	40020410 	.word	0x40020410
 8006bcc:	40020428 	.word	0x40020428
 8006bd0:	40020440 	.word	0x40020440
 8006bd4:	40020458 	.word	0x40020458
 8006bd8:	40020470 	.word	0x40020470
 8006bdc:	40020488 	.word	0x40020488
 8006be0:	400204a0 	.word	0x400204a0
 8006be4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f023 020e 	bic.w	r2, r3, #14
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 020a 	orr.w	r2, r2, #10
 8006bfa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d007      	beq.n	8006c14 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 0204 	orr.w	r2, r2, #4
 8006c12:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a83      	ldr	r2, [pc, #524]	; (8006e28 <HAL_DMA_Start_IT+0x474>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d072      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a82      	ldr	r2, [pc, #520]	; (8006e2c <HAL_DMA_Start_IT+0x478>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d06d      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a80      	ldr	r2, [pc, #512]	; (8006e30 <HAL_DMA_Start_IT+0x47c>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d068      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a7f      	ldr	r2, [pc, #508]	; (8006e34 <HAL_DMA_Start_IT+0x480>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d063      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a7d      	ldr	r2, [pc, #500]	; (8006e38 <HAL_DMA_Start_IT+0x484>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d05e      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a7c      	ldr	r2, [pc, #496]	; (8006e3c <HAL_DMA_Start_IT+0x488>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d059      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a7a      	ldr	r2, [pc, #488]	; (8006e40 <HAL_DMA_Start_IT+0x48c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d054      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a79      	ldr	r2, [pc, #484]	; (8006e44 <HAL_DMA_Start_IT+0x490>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d04f      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a77      	ldr	r2, [pc, #476]	; (8006e48 <HAL_DMA_Start_IT+0x494>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d04a      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a76      	ldr	r2, [pc, #472]	; (8006e4c <HAL_DMA_Start_IT+0x498>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d045      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a74      	ldr	r2, [pc, #464]	; (8006e50 <HAL_DMA_Start_IT+0x49c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d040      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a73      	ldr	r2, [pc, #460]	; (8006e54 <HAL_DMA_Start_IT+0x4a0>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d03b      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a71      	ldr	r2, [pc, #452]	; (8006e58 <HAL_DMA_Start_IT+0x4a4>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d036      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a70      	ldr	r2, [pc, #448]	; (8006e5c <HAL_DMA_Start_IT+0x4a8>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d031      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a6e      	ldr	r2, [pc, #440]	; (8006e60 <HAL_DMA_Start_IT+0x4ac>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d02c      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a6d      	ldr	r2, [pc, #436]	; (8006e64 <HAL_DMA_Start_IT+0x4b0>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d027      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a6b      	ldr	r2, [pc, #428]	; (8006e68 <HAL_DMA_Start_IT+0x4b4>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d022      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a6a      	ldr	r2, [pc, #424]	; (8006e6c <HAL_DMA_Start_IT+0x4b8>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d01d      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a68      	ldr	r2, [pc, #416]	; (8006e70 <HAL_DMA_Start_IT+0x4bc>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d018      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a67      	ldr	r2, [pc, #412]	; (8006e74 <HAL_DMA_Start_IT+0x4c0>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d013      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a65      	ldr	r2, [pc, #404]	; (8006e78 <HAL_DMA_Start_IT+0x4c4>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00e      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a64      	ldr	r2, [pc, #400]	; (8006e7c <HAL_DMA_Start_IT+0x4c8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d009      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a62      	ldr	r2, [pc, #392]	; (8006e80 <HAL_DMA_Start_IT+0x4cc>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d004      	beq.n	8006d04 <HAL_DMA_Start_IT+0x350>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a61      	ldr	r2, [pc, #388]	; (8006e84 <HAL_DMA_Start_IT+0x4d0>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d101      	bne.n	8006d08 <HAL_DMA_Start_IT+0x354>
 8006d04:	2301      	movs	r3, #1
 8006d06:	e000      	b.n	8006d0a <HAL_DMA_Start_IT+0x356>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01a      	beq.n	8006d44 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d007      	beq.n	8006d2c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d2a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d007      	beq.n	8006d44 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d42:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a37      	ldr	r2, [pc, #220]	; (8006e28 <HAL_DMA_Start_IT+0x474>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d04a      	beq.n	8006de4 <HAL_DMA_Start_IT+0x430>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a36      	ldr	r2, [pc, #216]	; (8006e2c <HAL_DMA_Start_IT+0x478>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d045      	beq.n	8006de4 <HAL_DMA_Start_IT+0x430>
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a34      	ldr	r2, [pc, #208]	; (8006e30 <HAL_DMA_Start_IT+0x47c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d040      	beq.n	8006de4 <HAL_DMA_Start_IT+0x430>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a33      	ldr	r2, [pc, #204]	; (8006e34 <HAL_DMA_Start_IT+0x480>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d03b      	beq.n	8006de4 <HAL_DMA_Start_IT+0x430>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a31      	ldr	r2, [pc, #196]	; (8006e38 <HAL_DMA_Start_IT+0x484>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d036      	beq.n	8006de4 <HAL_DMA_Start_IT+0x430>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a30      	ldr	r2, [pc, #192]	; (8006e3c <HAL_DMA_Start_IT+0x488>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d031      	beq.n	8006de4 <HAL_DMA_Start_IT+0x430>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a2e      	ldr	r2, [pc, #184]	; (8006e40 <HAL_DMA_Start_IT+0x48c>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d02c      	beq.n	8006de4 <HAL_DMA_Start_IT+0x430>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a2d      	ldr	r2, [pc, #180]	; (8006e44 <HAL_DMA_Start_IT+0x490>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d027      	beq.n	8006de4 <HAL_DMA_Start_IT+0x430>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a2b      	ldr	r2, [pc, #172]	; (8006e48 <HAL_DMA_Start_IT+0x494>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d022      	beq.n	8006de4 <HAL_DMA_Start_IT+0x430>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a2a      	ldr	r2, [pc, #168]	; (8006e4c <HAL_DMA_Start_IT+0x498>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d01d      	beq.n	8006de4 <HAL_DMA_Start_IT+0x430>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a28      	ldr	r2, [pc, #160]	; (8006e50 <HAL_DMA_Start_IT+0x49c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d018      	beq.n	8006de4 <HAL_DMA_Start_IT+0x430>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a27      	ldr	r2, [pc, #156]	; (8006e54 <HAL_DMA_Start_IT+0x4a0>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d013      	beq.n	8006de4 <HAL_DMA_Start_IT+0x430>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a25      	ldr	r2, [pc, #148]	; (8006e58 <HAL_DMA_Start_IT+0x4a4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d00e      	beq.n	8006de4 <HAL_DMA_Start_IT+0x430>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a24      	ldr	r2, [pc, #144]	; (8006e5c <HAL_DMA_Start_IT+0x4a8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d009      	beq.n	8006de4 <HAL_DMA_Start_IT+0x430>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a22      	ldr	r2, [pc, #136]	; (8006e60 <HAL_DMA_Start_IT+0x4ac>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d004      	beq.n	8006de4 <HAL_DMA_Start_IT+0x430>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a21      	ldr	r2, [pc, #132]	; (8006e64 <HAL_DMA_Start_IT+0x4b0>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d108      	bne.n	8006df6 <HAL_DMA_Start_IT+0x442>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f042 0201 	orr.w	r2, r2, #1
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	e012      	b.n	8006e1c <HAL_DMA_Start_IT+0x468>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0201 	orr.w	r2, r2, #1
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	e009      	b.n	8006e1c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40020010 	.word	0x40020010
 8006e2c:	40020028 	.word	0x40020028
 8006e30:	40020040 	.word	0x40020040
 8006e34:	40020058 	.word	0x40020058
 8006e38:	40020070 	.word	0x40020070
 8006e3c:	40020088 	.word	0x40020088
 8006e40:	400200a0 	.word	0x400200a0
 8006e44:	400200b8 	.word	0x400200b8
 8006e48:	40020410 	.word	0x40020410
 8006e4c:	40020428 	.word	0x40020428
 8006e50:	40020440 	.word	0x40020440
 8006e54:	40020458 	.word	0x40020458
 8006e58:	40020470 	.word	0x40020470
 8006e5c:	40020488 	.word	0x40020488
 8006e60:	400204a0 	.word	0x400204a0
 8006e64:	400204b8 	.word	0x400204b8
 8006e68:	58025408 	.word	0x58025408
 8006e6c:	5802541c 	.word	0x5802541c
 8006e70:	58025430 	.word	0x58025430
 8006e74:	58025444 	.word	0x58025444
 8006e78:	58025458 	.word	0x58025458
 8006e7c:	5802546c 	.word	0x5802546c
 8006e80:	58025480 	.word	0x58025480
 8006e84:	58025494 	.word	0x58025494

08006e88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006e90:	f7fd f90c 	bl	80040ac <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e2dc      	b.n	800745a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d008      	beq.n	8006ebe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2280      	movs	r2, #128	; 0x80
 8006eb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e2cd      	b.n	800745a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a76      	ldr	r2, [pc, #472]	; (800709c <HAL_DMA_Abort+0x214>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d04a      	beq.n	8006f5e <HAL_DMA_Abort+0xd6>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a74      	ldr	r2, [pc, #464]	; (80070a0 <HAL_DMA_Abort+0x218>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d045      	beq.n	8006f5e <HAL_DMA_Abort+0xd6>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a73      	ldr	r2, [pc, #460]	; (80070a4 <HAL_DMA_Abort+0x21c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d040      	beq.n	8006f5e <HAL_DMA_Abort+0xd6>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a71      	ldr	r2, [pc, #452]	; (80070a8 <HAL_DMA_Abort+0x220>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d03b      	beq.n	8006f5e <HAL_DMA_Abort+0xd6>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a70      	ldr	r2, [pc, #448]	; (80070ac <HAL_DMA_Abort+0x224>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d036      	beq.n	8006f5e <HAL_DMA_Abort+0xd6>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a6e      	ldr	r2, [pc, #440]	; (80070b0 <HAL_DMA_Abort+0x228>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d031      	beq.n	8006f5e <HAL_DMA_Abort+0xd6>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a6d      	ldr	r2, [pc, #436]	; (80070b4 <HAL_DMA_Abort+0x22c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d02c      	beq.n	8006f5e <HAL_DMA_Abort+0xd6>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a6b      	ldr	r2, [pc, #428]	; (80070b8 <HAL_DMA_Abort+0x230>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d027      	beq.n	8006f5e <HAL_DMA_Abort+0xd6>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a6a      	ldr	r2, [pc, #424]	; (80070bc <HAL_DMA_Abort+0x234>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d022      	beq.n	8006f5e <HAL_DMA_Abort+0xd6>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a68      	ldr	r2, [pc, #416]	; (80070c0 <HAL_DMA_Abort+0x238>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d01d      	beq.n	8006f5e <HAL_DMA_Abort+0xd6>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a67      	ldr	r2, [pc, #412]	; (80070c4 <HAL_DMA_Abort+0x23c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d018      	beq.n	8006f5e <HAL_DMA_Abort+0xd6>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a65      	ldr	r2, [pc, #404]	; (80070c8 <HAL_DMA_Abort+0x240>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d013      	beq.n	8006f5e <HAL_DMA_Abort+0xd6>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a64      	ldr	r2, [pc, #400]	; (80070cc <HAL_DMA_Abort+0x244>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00e      	beq.n	8006f5e <HAL_DMA_Abort+0xd6>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a62      	ldr	r2, [pc, #392]	; (80070d0 <HAL_DMA_Abort+0x248>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d009      	beq.n	8006f5e <HAL_DMA_Abort+0xd6>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a61      	ldr	r2, [pc, #388]	; (80070d4 <HAL_DMA_Abort+0x24c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d004      	beq.n	8006f5e <HAL_DMA_Abort+0xd6>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a5f      	ldr	r2, [pc, #380]	; (80070d8 <HAL_DMA_Abort+0x250>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d101      	bne.n	8006f62 <HAL_DMA_Abort+0xda>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e000      	b.n	8006f64 <HAL_DMA_Abort+0xdc>
 8006f62:	2300      	movs	r3, #0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d013      	beq.n	8006f90 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 021e 	bic.w	r2, r2, #30
 8006f76:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	695a      	ldr	r2, [r3, #20]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f86:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	e00a      	b.n	8006fa6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 020e 	bic.w	r2, r2, #14
 8006f9e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a3c      	ldr	r2, [pc, #240]	; (800709c <HAL_DMA_Abort+0x214>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d072      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a3a      	ldr	r2, [pc, #232]	; (80070a0 <HAL_DMA_Abort+0x218>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d06d      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a39      	ldr	r2, [pc, #228]	; (80070a4 <HAL_DMA_Abort+0x21c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d068      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a37      	ldr	r2, [pc, #220]	; (80070a8 <HAL_DMA_Abort+0x220>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d063      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a36      	ldr	r2, [pc, #216]	; (80070ac <HAL_DMA_Abort+0x224>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d05e      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a34      	ldr	r2, [pc, #208]	; (80070b0 <HAL_DMA_Abort+0x228>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d059      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a33      	ldr	r2, [pc, #204]	; (80070b4 <HAL_DMA_Abort+0x22c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d054      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a31      	ldr	r2, [pc, #196]	; (80070b8 <HAL_DMA_Abort+0x230>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d04f      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a30      	ldr	r2, [pc, #192]	; (80070bc <HAL_DMA_Abort+0x234>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d04a      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a2e      	ldr	r2, [pc, #184]	; (80070c0 <HAL_DMA_Abort+0x238>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d045      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a2d      	ldr	r2, [pc, #180]	; (80070c4 <HAL_DMA_Abort+0x23c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d040      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a2b      	ldr	r2, [pc, #172]	; (80070c8 <HAL_DMA_Abort+0x240>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d03b      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a2a      	ldr	r2, [pc, #168]	; (80070cc <HAL_DMA_Abort+0x244>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d036      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a28      	ldr	r2, [pc, #160]	; (80070d0 <HAL_DMA_Abort+0x248>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d031      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a27      	ldr	r2, [pc, #156]	; (80070d4 <HAL_DMA_Abort+0x24c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d02c      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a25      	ldr	r2, [pc, #148]	; (80070d8 <HAL_DMA_Abort+0x250>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d027      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a24      	ldr	r2, [pc, #144]	; (80070dc <HAL_DMA_Abort+0x254>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d022      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a22      	ldr	r2, [pc, #136]	; (80070e0 <HAL_DMA_Abort+0x258>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d01d      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a21      	ldr	r2, [pc, #132]	; (80070e4 <HAL_DMA_Abort+0x25c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d018      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a1f      	ldr	r2, [pc, #124]	; (80070e8 <HAL_DMA_Abort+0x260>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d013      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a1e      	ldr	r2, [pc, #120]	; (80070ec <HAL_DMA_Abort+0x264>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d00e      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a1c      	ldr	r2, [pc, #112]	; (80070f0 <HAL_DMA_Abort+0x268>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d009      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a1b      	ldr	r2, [pc, #108]	; (80070f4 <HAL_DMA_Abort+0x26c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d004      	beq.n	8007096 <HAL_DMA_Abort+0x20e>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a19      	ldr	r2, [pc, #100]	; (80070f8 <HAL_DMA_Abort+0x270>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d132      	bne.n	80070fc <HAL_DMA_Abort+0x274>
 8007096:	2301      	movs	r3, #1
 8007098:	e031      	b.n	80070fe <HAL_DMA_Abort+0x276>
 800709a:	bf00      	nop
 800709c:	40020010 	.word	0x40020010
 80070a0:	40020028 	.word	0x40020028
 80070a4:	40020040 	.word	0x40020040
 80070a8:	40020058 	.word	0x40020058
 80070ac:	40020070 	.word	0x40020070
 80070b0:	40020088 	.word	0x40020088
 80070b4:	400200a0 	.word	0x400200a0
 80070b8:	400200b8 	.word	0x400200b8
 80070bc:	40020410 	.word	0x40020410
 80070c0:	40020428 	.word	0x40020428
 80070c4:	40020440 	.word	0x40020440
 80070c8:	40020458 	.word	0x40020458
 80070cc:	40020470 	.word	0x40020470
 80070d0:	40020488 	.word	0x40020488
 80070d4:	400204a0 	.word	0x400204a0
 80070d8:	400204b8 	.word	0x400204b8
 80070dc:	58025408 	.word	0x58025408
 80070e0:	5802541c 	.word	0x5802541c
 80070e4:	58025430 	.word	0x58025430
 80070e8:	58025444 	.word	0x58025444
 80070ec:	58025458 	.word	0x58025458
 80070f0:	5802546c 	.word	0x5802546c
 80070f4:	58025480 	.word	0x58025480
 80070f8:	58025494 	.word	0x58025494
 80070fc:	2300      	movs	r3, #0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d007      	beq.n	8007112 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800710c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007110:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a6d      	ldr	r2, [pc, #436]	; (80072cc <HAL_DMA_Abort+0x444>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d04a      	beq.n	80071b2 <HAL_DMA_Abort+0x32a>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a6b      	ldr	r2, [pc, #428]	; (80072d0 <HAL_DMA_Abort+0x448>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d045      	beq.n	80071b2 <HAL_DMA_Abort+0x32a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a6a      	ldr	r2, [pc, #424]	; (80072d4 <HAL_DMA_Abort+0x44c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d040      	beq.n	80071b2 <HAL_DMA_Abort+0x32a>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a68      	ldr	r2, [pc, #416]	; (80072d8 <HAL_DMA_Abort+0x450>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d03b      	beq.n	80071b2 <HAL_DMA_Abort+0x32a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a67      	ldr	r2, [pc, #412]	; (80072dc <HAL_DMA_Abort+0x454>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d036      	beq.n	80071b2 <HAL_DMA_Abort+0x32a>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a65      	ldr	r2, [pc, #404]	; (80072e0 <HAL_DMA_Abort+0x458>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d031      	beq.n	80071b2 <HAL_DMA_Abort+0x32a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a64      	ldr	r2, [pc, #400]	; (80072e4 <HAL_DMA_Abort+0x45c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d02c      	beq.n	80071b2 <HAL_DMA_Abort+0x32a>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a62      	ldr	r2, [pc, #392]	; (80072e8 <HAL_DMA_Abort+0x460>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d027      	beq.n	80071b2 <HAL_DMA_Abort+0x32a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a61      	ldr	r2, [pc, #388]	; (80072ec <HAL_DMA_Abort+0x464>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d022      	beq.n	80071b2 <HAL_DMA_Abort+0x32a>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a5f      	ldr	r2, [pc, #380]	; (80072f0 <HAL_DMA_Abort+0x468>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d01d      	beq.n	80071b2 <HAL_DMA_Abort+0x32a>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a5e      	ldr	r2, [pc, #376]	; (80072f4 <HAL_DMA_Abort+0x46c>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d018      	beq.n	80071b2 <HAL_DMA_Abort+0x32a>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a5c      	ldr	r2, [pc, #368]	; (80072f8 <HAL_DMA_Abort+0x470>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d013      	beq.n	80071b2 <HAL_DMA_Abort+0x32a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a5b      	ldr	r2, [pc, #364]	; (80072fc <HAL_DMA_Abort+0x474>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00e      	beq.n	80071b2 <HAL_DMA_Abort+0x32a>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a59      	ldr	r2, [pc, #356]	; (8007300 <HAL_DMA_Abort+0x478>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d009      	beq.n	80071b2 <HAL_DMA_Abort+0x32a>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a58      	ldr	r2, [pc, #352]	; (8007304 <HAL_DMA_Abort+0x47c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d004      	beq.n	80071b2 <HAL_DMA_Abort+0x32a>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a56      	ldr	r2, [pc, #344]	; (8007308 <HAL_DMA_Abort+0x480>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d108      	bne.n	80071c4 <HAL_DMA_Abort+0x33c>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0201 	bic.w	r2, r2, #1
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	e007      	b.n	80071d4 <HAL_DMA_Abort+0x34c>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0201 	bic.w	r2, r2, #1
 80071d2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80071d4:	e013      	b.n	80071fe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071d6:	f7fc ff69 	bl	80040ac <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	2b05      	cmp	r3, #5
 80071e2:	d90c      	bls.n	80071fe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2220      	movs	r2, #32
 80071e8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2203      	movs	r2, #3
 80071ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e12d      	b.n	800745a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e5      	bne.n	80071d6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a2f      	ldr	r2, [pc, #188]	; (80072cc <HAL_DMA_Abort+0x444>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d04a      	beq.n	80072aa <HAL_DMA_Abort+0x422>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a2d      	ldr	r2, [pc, #180]	; (80072d0 <HAL_DMA_Abort+0x448>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d045      	beq.n	80072aa <HAL_DMA_Abort+0x422>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a2c      	ldr	r2, [pc, #176]	; (80072d4 <HAL_DMA_Abort+0x44c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d040      	beq.n	80072aa <HAL_DMA_Abort+0x422>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a2a      	ldr	r2, [pc, #168]	; (80072d8 <HAL_DMA_Abort+0x450>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d03b      	beq.n	80072aa <HAL_DMA_Abort+0x422>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a29      	ldr	r2, [pc, #164]	; (80072dc <HAL_DMA_Abort+0x454>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d036      	beq.n	80072aa <HAL_DMA_Abort+0x422>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a27      	ldr	r2, [pc, #156]	; (80072e0 <HAL_DMA_Abort+0x458>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d031      	beq.n	80072aa <HAL_DMA_Abort+0x422>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a26      	ldr	r2, [pc, #152]	; (80072e4 <HAL_DMA_Abort+0x45c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d02c      	beq.n	80072aa <HAL_DMA_Abort+0x422>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a24      	ldr	r2, [pc, #144]	; (80072e8 <HAL_DMA_Abort+0x460>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d027      	beq.n	80072aa <HAL_DMA_Abort+0x422>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a23      	ldr	r2, [pc, #140]	; (80072ec <HAL_DMA_Abort+0x464>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d022      	beq.n	80072aa <HAL_DMA_Abort+0x422>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a21      	ldr	r2, [pc, #132]	; (80072f0 <HAL_DMA_Abort+0x468>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d01d      	beq.n	80072aa <HAL_DMA_Abort+0x422>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a20      	ldr	r2, [pc, #128]	; (80072f4 <HAL_DMA_Abort+0x46c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d018      	beq.n	80072aa <HAL_DMA_Abort+0x422>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a1e      	ldr	r2, [pc, #120]	; (80072f8 <HAL_DMA_Abort+0x470>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <HAL_DMA_Abort+0x422>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a1d      	ldr	r2, [pc, #116]	; (80072fc <HAL_DMA_Abort+0x474>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00e      	beq.n	80072aa <HAL_DMA_Abort+0x422>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1b      	ldr	r2, [pc, #108]	; (8007300 <HAL_DMA_Abort+0x478>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d009      	beq.n	80072aa <HAL_DMA_Abort+0x422>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a1a      	ldr	r2, [pc, #104]	; (8007304 <HAL_DMA_Abort+0x47c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d004      	beq.n	80072aa <HAL_DMA_Abort+0x422>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a18      	ldr	r2, [pc, #96]	; (8007308 <HAL_DMA_Abort+0x480>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d101      	bne.n	80072ae <HAL_DMA_Abort+0x426>
 80072aa:	2301      	movs	r3, #1
 80072ac:	e000      	b.n	80072b0 <HAL_DMA_Abort+0x428>
 80072ae:	2300      	movs	r3, #0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d02b      	beq.n	800730c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072be:	f003 031f 	and.w	r3, r3, #31
 80072c2:	223f      	movs	r2, #63	; 0x3f
 80072c4:	409a      	lsls	r2, r3
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	609a      	str	r2, [r3, #8]
 80072ca:	e02a      	b.n	8007322 <HAL_DMA_Abort+0x49a>
 80072cc:	40020010 	.word	0x40020010
 80072d0:	40020028 	.word	0x40020028
 80072d4:	40020040 	.word	0x40020040
 80072d8:	40020058 	.word	0x40020058
 80072dc:	40020070 	.word	0x40020070
 80072e0:	40020088 	.word	0x40020088
 80072e4:	400200a0 	.word	0x400200a0
 80072e8:	400200b8 	.word	0x400200b8
 80072ec:	40020410 	.word	0x40020410
 80072f0:	40020428 	.word	0x40020428
 80072f4:	40020440 	.word	0x40020440
 80072f8:	40020458 	.word	0x40020458
 80072fc:	40020470 	.word	0x40020470
 8007300:	40020488 	.word	0x40020488
 8007304:	400204a0 	.word	0x400204a0
 8007308:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007310:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007316:	f003 031f 	and.w	r3, r3, #31
 800731a:	2201      	movs	r2, #1
 800731c:	409a      	lsls	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a4f      	ldr	r2, [pc, #316]	; (8007464 <HAL_DMA_Abort+0x5dc>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d072      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a4d      	ldr	r2, [pc, #308]	; (8007468 <HAL_DMA_Abort+0x5e0>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d06d      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a4c      	ldr	r2, [pc, #304]	; (800746c <HAL_DMA_Abort+0x5e4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d068      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a4a      	ldr	r2, [pc, #296]	; (8007470 <HAL_DMA_Abort+0x5e8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d063      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a49      	ldr	r2, [pc, #292]	; (8007474 <HAL_DMA_Abort+0x5ec>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d05e      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a47      	ldr	r2, [pc, #284]	; (8007478 <HAL_DMA_Abort+0x5f0>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d059      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a46      	ldr	r2, [pc, #280]	; (800747c <HAL_DMA_Abort+0x5f4>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d054      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a44      	ldr	r2, [pc, #272]	; (8007480 <HAL_DMA_Abort+0x5f8>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d04f      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a43      	ldr	r2, [pc, #268]	; (8007484 <HAL_DMA_Abort+0x5fc>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d04a      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a41      	ldr	r2, [pc, #260]	; (8007488 <HAL_DMA_Abort+0x600>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d045      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a40      	ldr	r2, [pc, #256]	; (800748c <HAL_DMA_Abort+0x604>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d040      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a3e      	ldr	r2, [pc, #248]	; (8007490 <HAL_DMA_Abort+0x608>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d03b      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a3d      	ldr	r2, [pc, #244]	; (8007494 <HAL_DMA_Abort+0x60c>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d036      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a3b      	ldr	r2, [pc, #236]	; (8007498 <HAL_DMA_Abort+0x610>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d031      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a3a      	ldr	r2, [pc, #232]	; (800749c <HAL_DMA_Abort+0x614>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d02c      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a38      	ldr	r2, [pc, #224]	; (80074a0 <HAL_DMA_Abort+0x618>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d027      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a37      	ldr	r2, [pc, #220]	; (80074a4 <HAL_DMA_Abort+0x61c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d022      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a35      	ldr	r2, [pc, #212]	; (80074a8 <HAL_DMA_Abort+0x620>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d01d      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a34      	ldr	r2, [pc, #208]	; (80074ac <HAL_DMA_Abort+0x624>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d018      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a32      	ldr	r2, [pc, #200]	; (80074b0 <HAL_DMA_Abort+0x628>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d013      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a31      	ldr	r2, [pc, #196]	; (80074b4 <HAL_DMA_Abort+0x62c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00e      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a2f      	ldr	r2, [pc, #188]	; (80074b8 <HAL_DMA_Abort+0x630>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d009      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a2e      	ldr	r2, [pc, #184]	; (80074bc <HAL_DMA_Abort+0x634>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d004      	beq.n	8007412 <HAL_DMA_Abort+0x58a>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a2c      	ldr	r2, [pc, #176]	; (80074c0 <HAL_DMA_Abort+0x638>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d101      	bne.n	8007416 <HAL_DMA_Abort+0x58e>
 8007412:	2301      	movs	r3, #1
 8007414:	e000      	b.n	8007418 <HAL_DMA_Abort+0x590>
 8007416:	2300      	movs	r3, #0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d015      	beq.n	8007448 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007424:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00c      	beq.n	8007448 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800743c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007446:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	40020010 	.word	0x40020010
 8007468:	40020028 	.word	0x40020028
 800746c:	40020040 	.word	0x40020040
 8007470:	40020058 	.word	0x40020058
 8007474:	40020070 	.word	0x40020070
 8007478:	40020088 	.word	0x40020088
 800747c:	400200a0 	.word	0x400200a0
 8007480:	400200b8 	.word	0x400200b8
 8007484:	40020410 	.word	0x40020410
 8007488:	40020428 	.word	0x40020428
 800748c:	40020440 	.word	0x40020440
 8007490:	40020458 	.word	0x40020458
 8007494:	40020470 	.word	0x40020470
 8007498:	40020488 	.word	0x40020488
 800749c:	400204a0 	.word	0x400204a0
 80074a0:	400204b8 	.word	0x400204b8
 80074a4:	58025408 	.word	0x58025408
 80074a8:	5802541c 	.word	0x5802541c
 80074ac:	58025430 	.word	0x58025430
 80074b0:	58025444 	.word	0x58025444
 80074b4:	58025458 	.word	0x58025458
 80074b8:	5802546c 	.word	0x5802546c
 80074bc:	58025480 	.word	0x58025480
 80074c0:	58025494 	.word	0x58025494

080074c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e237      	b.n	8007946 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d004      	beq.n	80074ec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2280      	movs	r2, #128	; 0x80
 80074e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e22c      	b.n	8007946 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a5c      	ldr	r2, [pc, #368]	; (8007664 <HAL_DMA_Abort_IT+0x1a0>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d04a      	beq.n	800758c <HAL_DMA_Abort_IT+0xc8>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a5b      	ldr	r2, [pc, #364]	; (8007668 <HAL_DMA_Abort_IT+0x1a4>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d045      	beq.n	800758c <HAL_DMA_Abort_IT+0xc8>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a59      	ldr	r2, [pc, #356]	; (800766c <HAL_DMA_Abort_IT+0x1a8>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d040      	beq.n	800758c <HAL_DMA_Abort_IT+0xc8>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a58      	ldr	r2, [pc, #352]	; (8007670 <HAL_DMA_Abort_IT+0x1ac>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d03b      	beq.n	800758c <HAL_DMA_Abort_IT+0xc8>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a56      	ldr	r2, [pc, #344]	; (8007674 <HAL_DMA_Abort_IT+0x1b0>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d036      	beq.n	800758c <HAL_DMA_Abort_IT+0xc8>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a55      	ldr	r2, [pc, #340]	; (8007678 <HAL_DMA_Abort_IT+0x1b4>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d031      	beq.n	800758c <HAL_DMA_Abort_IT+0xc8>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a53      	ldr	r2, [pc, #332]	; (800767c <HAL_DMA_Abort_IT+0x1b8>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d02c      	beq.n	800758c <HAL_DMA_Abort_IT+0xc8>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a52      	ldr	r2, [pc, #328]	; (8007680 <HAL_DMA_Abort_IT+0x1bc>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d027      	beq.n	800758c <HAL_DMA_Abort_IT+0xc8>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a50      	ldr	r2, [pc, #320]	; (8007684 <HAL_DMA_Abort_IT+0x1c0>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d022      	beq.n	800758c <HAL_DMA_Abort_IT+0xc8>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a4f      	ldr	r2, [pc, #316]	; (8007688 <HAL_DMA_Abort_IT+0x1c4>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d01d      	beq.n	800758c <HAL_DMA_Abort_IT+0xc8>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a4d      	ldr	r2, [pc, #308]	; (800768c <HAL_DMA_Abort_IT+0x1c8>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d018      	beq.n	800758c <HAL_DMA_Abort_IT+0xc8>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a4c      	ldr	r2, [pc, #304]	; (8007690 <HAL_DMA_Abort_IT+0x1cc>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d013      	beq.n	800758c <HAL_DMA_Abort_IT+0xc8>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a4a      	ldr	r2, [pc, #296]	; (8007694 <HAL_DMA_Abort_IT+0x1d0>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d00e      	beq.n	800758c <HAL_DMA_Abort_IT+0xc8>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a49      	ldr	r2, [pc, #292]	; (8007698 <HAL_DMA_Abort_IT+0x1d4>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d009      	beq.n	800758c <HAL_DMA_Abort_IT+0xc8>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a47      	ldr	r2, [pc, #284]	; (800769c <HAL_DMA_Abort_IT+0x1d8>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d004      	beq.n	800758c <HAL_DMA_Abort_IT+0xc8>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a46      	ldr	r2, [pc, #280]	; (80076a0 <HAL_DMA_Abort_IT+0x1dc>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d101      	bne.n	8007590 <HAL_DMA_Abort_IT+0xcc>
 800758c:	2301      	movs	r3, #1
 800758e:	e000      	b.n	8007592 <HAL_DMA_Abort_IT+0xce>
 8007590:	2300      	movs	r3, #0
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 8086 	beq.w	80076a4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2204      	movs	r2, #4
 800759c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a2f      	ldr	r2, [pc, #188]	; (8007664 <HAL_DMA_Abort_IT+0x1a0>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d04a      	beq.n	8007640 <HAL_DMA_Abort_IT+0x17c>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a2e      	ldr	r2, [pc, #184]	; (8007668 <HAL_DMA_Abort_IT+0x1a4>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d045      	beq.n	8007640 <HAL_DMA_Abort_IT+0x17c>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a2c      	ldr	r2, [pc, #176]	; (800766c <HAL_DMA_Abort_IT+0x1a8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d040      	beq.n	8007640 <HAL_DMA_Abort_IT+0x17c>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a2b      	ldr	r2, [pc, #172]	; (8007670 <HAL_DMA_Abort_IT+0x1ac>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d03b      	beq.n	8007640 <HAL_DMA_Abort_IT+0x17c>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a29      	ldr	r2, [pc, #164]	; (8007674 <HAL_DMA_Abort_IT+0x1b0>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d036      	beq.n	8007640 <HAL_DMA_Abort_IT+0x17c>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a28      	ldr	r2, [pc, #160]	; (8007678 <HAL_DMA_Abort_IT+0x1b4>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d031      	beq.n	8007640 <HAL_DMA_Abort_IT+0x17c>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a26      	ldr	r2, [pc, #152]	; (800767c <HAL_DMA_Abort_IT+0x1b8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d02c      	beq.n	8007640 <HAL_DMA_Abort_IT+0x17c>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a25      	ldr	r2, [pc, #148]	; (8007680 <HAL_DMA_Abort_IT+0x1bc>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d027      	beq.n	8007640 <HAL_DMA_Abort_IT+0x17c>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a23      	ldr	r2, [pc, #140]	; (8007684 <HAL_DMA_Abort_IT+0x1c0>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d022      	beq.n	8007640 <HAL_DMA_Abort_IT+0x17c>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a22      	ldr	r2, [pc, #136]	; (8007688 <HAL_DMA_Abort_IT+0x1c4>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d01d      	beq.n	8007640 <HAL_DMA_Abort_IT+0x17c>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a20      	ldr	r2, [pc, #128]	; (800768c <HAL_DMA_Abort_IT+0x1c8>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d018      	beq.n	8007640 <HAL_DMA_Abort_IT+0x17c>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1f      	ldr	r2, [pc, #124]	; (8007690 <HAL_DMA_Abort_IT+0x1cc>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d013      	beq.n	8007640 <HAL_DMA_Abort_IT+0x17c>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a1d      	ldr	r2, [pc, #116]	; (8007694 <HAL_DMA_Abort_IT+0x1d0>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d00e      	beq.n	8007640 <HAL_DMA_Abort_IT+0x17c>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a1c      	ldr	r2, [pc, #112]	; (8007698 <HAL_DMA_Abort_IT+0x1d4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d009      	beq.n	8007640 <HAL_DMA_Abort_IT+0x17c>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a1a      	ldr	r2, [pc, #104]	; (800769c <HAL_DMA_Abort_IT+0x1d8>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d004      	beq.n	8007640 <HAL_DMA_Abort_IT+0x17c>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a19      	ldr	r2, [pc, #100]	; (80076a0 <HAL_DMA_Abort_IT+0x1dc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d108      	bne.n	8007652 <HAL_DMA_Abort_IT+0x18e>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f022 0201 	bic.w	r2, r2, #1
 800764e:	601a      	str	r2, [r3, #0]
 8007650:	e178      	b.n	8007944 <HAL_DMA_Abort_IT+0x480>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0201 	bic.w	r2, r2, #1
 8007660:	601a      	str	r2, [r3, #0]
 8007662:	e16f      	b.n	8007944 <HAL_DMA_Abort_IT+0x480>
 8007664:	40020010 	.word	0x40020010
 8007668:	40020028 	.word	0x40020028
 800766c:	40020040 	.word	0x40020040
 8007670:	40020058 	.word	0x40020058
 8007674:	40020070 	.word	0x40020070
 8007678:	40020088 	.word	0x40020088
 800767c:	400200a0 	.word	0x400200a0
 8007680:	400200b8 	.word	0x400200b8
 8007684:	40020410 	.word	0x40020410
 8007688:	40020428 	.word	0x40020428
 800768c:	40020440 	.word	0x40020440
 8007690:	40020458 	.word	0x40020458
 8007694:	40020470 	.word	0x40020470
 8007698:	40020488 	.word	0x40020488
 800769c:	400204a0 	.word	0x400204a0
 80076a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 020e 	bic.w	r2, r2, #14
 80076b2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a6c      	ldr	r2, [pc, #432]	; (800786c <HAL_DMA_Abort_IT+0x3a8>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d04a      	beq.n	8007754 <HAL_DMA_Abort_IT+0x290>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a6b      	ldr	r2, [pc, #428]	; (8007870 <HAL_DMA_Abort_IT+0x3ac>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d045      	beq.n	8007754 <HAL_DMA_Abort_IT+0x290>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a69      	ldr	r2, [pc, #420]	; (8007874 <HAL_DMA_Abort_IT+0x3b0>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d040      	beq.n	8007754 <HAL_DMA_Abort_IT+0x290>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a68      	ldr	r2, [pc, #416]	; (8007878 <HAL_DMA_Abort_IT+0x3b4>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d03b      	beq.n	8007754 <HAL_DMA_Abort_IT+0x290>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a66      	ldr	r2, [pc, #408]	; (800787c <HAL_DMA_Abort_IT+0x3b8>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d036      	beq.n	8007754 <HAL_DMA_Abort_IT+0x290>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a65      	ldr	r2, [pc, #404]	; (8007880 <HAL_DMA_Abort_IT+0x3bc>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d031      	beq.n	8007754 <HAL_DMA_Abort_IT+0x290>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a63      	ldr	r2, [pc, #396]	; (8007884 <HAL_DMA_Abort_IT+0x3c0>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d02c      	beq.n	8007754 <HAL_DMA_Abort_IT+0x290>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a62      	ldr	r2, [pc, #392]	; (8007888 <HAL_DMA_Abort_IT+0x3c4>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d027      	beq.n	8007754 <HAL_DMA_Abort_IT+0x290>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a60      	ldr	r2, [pc, #384]	; (800788c <HAL_DMA_Abort_IT+0x3c8>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d022      	beq.n	8007754 <HAL_DMA_Abort_IT+0x290>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a5f      	ldr	r2, [pc, #380]	; (8007890 <HAL_DMA_Abort_IT+0x3cc>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d01d      	beq.n	8007754 <HAL_DMA_Abort_IT+0x290>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a5d      	ldr	r2, [pc, #372]	; (8007894 <HAL_DMA_Abort_IT+0x3d0>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d018      	beq.n	8007754 <HAL_DMA_Abort_IT+0x290>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a5c      	ldr	r2, [pc, #368]	; (8007898 <HAL_DMA_Abort_IT+0x3d4>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d013      	beq.n	8007754 <HAL_DMA_Abort_IT+0x290>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a5a      	ldr	r2, [pc, #360]	; (800789c <HAL_DMA_Abort_IT+0x3d8>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d00e      	beq.n	8007754 <HAL_DMA_Abort_IT+0x290>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a59      	ldr	r2, [pc, #356]	; (80078a0 <HAL_DMA_Abort_IT+0x3dc>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d009      	beq.n	8007754 <HAL_DMA_Abort_IT+0x290>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a57      	ldr	r2, [pc, #348]	; (80078a4 <HAL_DMA_Abort_IT+0x3e0>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d004      	beq.n	8007754 <HAL_DMA_Abort_IT+0x290>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a56      	ldr	r2, [pc, #344]	; (80078a8 <HAL_DMA_Abort_IT+0x3e4>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d108      	bne.n	8007766 <HAL_DMA_Abort_IT+0x2a2>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f022 0201 	bic.w	r2, r2, #1
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	e007      	b.n	8007776 <HAL_DMA_Abort_IT+0x2b2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 0201 	bic.w	r2, r2, #1
 8007774:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a3c      	ldr	r2, [pc, #240]	; (800786c <HAL_DMA_Abort_IT+0x3a8>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d072      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a3a      	ldr	r2, [pc, #232]	; (8007870 <HAL_DMA_Abort_IT+0x3ac>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d06d      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a39      	ldr	r2, [pc, #228]	; (8007874 <HAL_DMA_Abort_IT+0x3b0>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d068      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a37      	ldr	r2, [pc, #220]	; (8007878 <HAL_DMA_Abort_IT+0x3b4>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d063      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a36      	ldr	r2, [pc, #216]	; (800787c <HAL_DMA_Abort_IT+0x3b8>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d05e      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a34      	ldr	r2, [pc, #208]	; (8007880 <HAL_DMA_Abort_IT+0x3bc>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d059      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a33      	ldr	r2, [pc, #204]	; (8007884 <HAL_DMA_Abort_IT+0x3c0>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d054      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a31      	ldr	r2, [pc, #196]	; (8007888 <HAL_DMA_Abort_IT+0x3c4>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d04f      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a30      	ldr	r2, [pc, #192]	; (800788c <HAL_DMA_Abort_IT+0x3c8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d04a      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a2e      	ldr	r2, [pc, #184]	; (8007890 <HAL_DMA_Abort_IT+0x3cc>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d045      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a2d      	ldr	r2, [pc, #180]	; (8007894 <HAL_DMA_Abort_IT+0x3d0>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d040      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a2b      	ldr	r2, [pc, #172]	; (8007898 <HAL_DMA_Abort_IT+0x3d4>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d03b      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a2a      	ldr	r2, [pc, #168]	; (800789c <HAL_DMA_Abort_IT+0x3d8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d036      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a28      	ldr	r2, [pc, #160]	; (80078a0 <HAL_DMA_Abort_IT+0x3dc>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d031      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a27      	ldr	r2, [pc, #156]	; (80078a4 <HAL_DMA_Abort_IT+0x3e0>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d02c      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a25      	ldr	r2, [pc, #148]	; (80078a8 <HAL_DMA_Abort_IT+0x3e4>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d027      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a24      	ldr	r2, [pc, #144]	; (80078ac <HAL_DMA_Abort_IT+0x3e8>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d022      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a22      	ldr	r2, [pc, #136]	; (80078b0 <HAL_DMA_Abort_IT+0x3ec>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d01d      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a21      	ldr	r2, [pc, #132]	; (80078b4 <HAL_DMA_Abort_IT+0x3f0>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d018      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a1f      	ldr	r2, [pc, #124]	; (80078b8 <HAL_DMA_Abort_IT+0x3f4>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d013      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a1e      	ldr	r2, [pc, #120]	; (80078bc <HAL_DMA_Abort_IT+0x3f8>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d00e      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a1c      	ldr	r2, [pc, #112]	; (80078c0 <HAL_DMA_Abort_IT+0x3fc>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d009      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a1b      	ldr	r2, [pc, #108]	; (80078c4 <HAL_DMA_Abort_IT+0x400>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d004      	beq.n	8007866 <HAL_DMA_Abort_IT+0x3a2>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a19      	ldr	r2, [pc, #100]	; (80078c8 <HAL_DMA_Abort_IT+0x404>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d132      	bne.n	80078cc <HAL_DMA_Abort_IT+0x408>
 8007866:	2301      	movs	r3, #1
 8007868:	e031      	b.n	80078ce <HAL_DMA_Abort_IT+0x40a>
 800786a:	bf00      	nop
 800786c:	40020010 	.word	0x40020010
 8007870:	40020028 	.word	0x40020028
 8007874:	40020040 	.word	0x40020040
 8007878:	40020058 	.word	0x40020058
 800787c:	40020070 	.word	0x40020070
 8007880:	40020088 	.word	0x40020088
 8007884:	400200a0 	.word	0x400200a0
 8007888:	400200b8 	.word	0x400200b8
 800788c:	40020410 	.word	0x40020410
 8007890:	40020428 	.word	0x40020428
 8007894:	40020440 	.word	0x40020440
 8007898:	40020458 	.word	0x40020458
 800789c:	40020470 	.word	0x40020470
 80078a0:	40020488 	.word	0x40020488
 80078a4:	400204a0 	.word	0x400204a0
 80078a8:	400204b8 	.word	0x400204b8
 80078ac:	58025408 	.word	0x58025408
 80078b0:	5802541c 	.word	0x5802541c
 80078b4:	58025430 	.word	0x58025430
 80078b8:	58025444 	.word	0x58025444
 80078bc:	58025458 	.word	0x58025458
 80078c0:	5802546c 	.word	0x5802546c
 80078c4:	58025480 	.word	0x58025480
 80078c8:	58025494 	.word	0x58025494
 80078cc:	2300      	movs	r3, #0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d028      	beq.n	8007924 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078e0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ec:	f003 031f 	and.w	r3, r3, #31
 80078f0:	2201      	movs	r2, #1
 80078f2:	409a      	lsls	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007900:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00c      	beq.n	8007924 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007918:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007922:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop

08007950 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08a      	sub	sp, #40	; 0x28
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800795c:	4b67      	ldr	r3, [pc, #412]	; (8007afc <HAL_DMA_IRQHandler+0x1ac>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a67      	ldr	r2, [pc, #412]	; (8007b00 <HAL_DMA_IRQHandler+0x1b0>)
 8007962:	fba2 2303 	umull	r2, r3, r2, r3
 8007966:	0a9b      	lsrs	r3, r3, #10
 8007968:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007974:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a5f      	ldr	r2, [pc, #380]	; (8007b04 <HAL_DMA_IRQHandler+0x1b4>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d04a      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xd2>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a5d      	ldr	r2, [pc, #372]	; (8007b08 <HAL_DMA_IRQHandler+0x1b8>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d045      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xd2>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a5c      	ldr	r2, [pc, #368]	; (8007b0c <HAL_DMA_IRQHandler+0x1bc>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d040      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xd2>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a5a      	ldr	r2, [pc, #360]	; (8007b10 <HAL_DMA_IRQHandler+0x1c0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d03b      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xd2>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a59      	ldr	r2, [pc, #356]	; (8007b14 <HAL_DMA_IRQHandler+0x1c4>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d036      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xd2>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a57      	ldr	r2, [pc, #348]	; (8007b18 <HAL_DMA_IRQHandler+0x1c8>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d031      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xd2>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a56      	ldr	r2, [pc, #344]	; (8007b1c <HAL_DMA_IRQHandler+0x1cc>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d02c      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xd2>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a54      	ldr	r2, [pc, #336]	; (8007b20 <HAL_DMA_IRQHandler+0x1d0>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d027      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xd2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a53      	ldr	r2, [pc, #332]	; (8007b24 <HAL_DMA_IRQHandler+0x1d4>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d022      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xd2>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a51      	ldr	r2, [pc, #324]	; (8007b28 <HAL_DMA_IRQHandler+0x1d8>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d01d      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xd2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a50      	ldr	r2, [pc, #320]	; (8007b2c <HAL_DMA_IRQHandler+0x1dc>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d018      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xd2>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a4e      	ldr	r2, [pc, #312]	; (8007b30 <HAL_DMA_IRQHandler+0x1e0>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d013      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xd2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a4d      	ldr	r2, [pc, #308]	; (8007b34 <HAL_DMA_IRQHandler+0x1e4>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d00e      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xd2>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a4b      	ldr	r2, [pc, #300]	; (8007b38 <HAL_DMA_IRQHandler+0x1e8>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d009      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xd2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a4a      	ldr	r2, [pc, #296]	; (8007b3c <HAL_DMA_IRQHandler+0x1ec>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d004      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xd2>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a48      	ldr	r2, [pc, #288]	; (8007b40 <HAL_DMA_IRQHandler+0x1f0>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d101      	bne.n	8007a26 <HAL_DMA_IRQHandler+0xd6>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e000      	b.n	8007a28 <HAL_DMA_IRQHandler+0xd8>
 8007a26:	2300      	movs	r3, #0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 842b 	beq.w	8008284 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a32:	f003 031f 	and.w	r3, r3, #31
 8007a36:	2208      	movs	r2, #8
 8007a38:	409a      	lsls	r2, r3
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 80a2 	beq.w	8007b88 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a2e      	ldr	r2, [pc, #184]	; (8007b04 <HAL_DMA_IRQHandler+0x1b4>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d04a      	beq.n	8007ae4 <HAL_DMA_IRQHandler+0x194>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a2d      	ldr	r2, [pc, #180]	; (8007b08 <HAL_DMA_IRQHandler+0x1b8>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d045      	beq.n	8007ae4 <HAL_DMA_IRQHandler+0x194>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a2b      	ldr	r2, [pc, #172]	; (8007b0c <HAL_DMA_IRQHandler+0x1bc>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d040      	beq.n	8007ae4 <HAL_DMA_IRQHandler+0x194>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a2a      	ldr	r2, [pc, #168]	; (8007b10 <HAL_DMA_IRQHandler+0x1c0>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d03b      	beq.n	8007ae4 <HAL_DMA_IRQHandler+0x194>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a28      	ldr	r2, [pc, #160]	; (8007b14 <HAL_DMA_IRQHandler+0x1c4>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d036      	beq.n	8007ae4 <HAL_DMA_IRQHandler+0x194>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a27      	ldr	r2, [pc, #156]	; (8007b18 <HAL_DMA_IRQHandler+0x1c8>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d031      	beq.n	8007ae4 <HAL_DMA_IRQHandler+0x194>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a25      	ldr	r2, [pc, #148]	; (8007b1c <HAL_DMA_IRQHandler+0x1cc>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d02c      	beq.n	8007ae4 <HAL_DMA_IRQHandler+0x194>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a24      	ldr	r2, [pc, #144]	; (8007b20 <HAL_DMA_IRQHandler+0x1d0>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d027      	beq.n	8007ae4 <HAL_DMA_IRQHandler+0x194>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a22      	ldr	r2, [pc, #136]	; (8007b24 <HAL_DMA_IRQHandler+0x1d4>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d022      	beq.n	8007ae4 <HAL_DMA_IRQHandler+0x194>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a21      	ldr	r2, [pc, #132]	; (8007b28 <HAL_DMA_IRQHandler+0x1d8>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d01d      	beq.n	8007ae4 <HAL_DMA_IRQHandler+0x194>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a1f      	ldr	r2, [pc, #124]	; (8007b2c <HAL_DMA_IRQHandler+0x1dc>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d018      	beq.n	8007ae4 <HAL_DMA_IRQHandler+0x194>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a1e      	ldr	r2, [pc, #120]	; (8007b30 <HAL_DMA_IRQHandler+0x1e0>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d013      	beq.n	8007ae4 <HAL_DMA_IRQHandler+0x194>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a1c      	ldr	r2, [pc, #112]	; (8007b34 <HAL_DMA_IRQHandler+0x1e4>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00e      	beq.n	8007ae4 <HAL_DMA_IRQHandler+0x194>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a1b      	ldr	r2, [pc, #108]	; (8007b38 <HAL_DMA_IRQHandler+0x1e8>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d009      	beq.n	8007ae4 <HAL_DMA_IRQHandler+0x194>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a19      	ldr	r2, [pc, #100]	; (8007b3c <HAL_DMA_IRQHandler+0x1ec>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d004      	beq.n	8007ae4 <HAL_DMA_IRQHandler+0x194>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a18      	ldr	r2, [pc, #96]	; (8007b40 <HAL_DMA_IRQHandler+0x1f0>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d12f      	bne.n	8007b44 <HAL_DMA_IRQHandler+0x1f4>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0304 	and.w	r3, r3, #4
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	bf14      	ite	ne
 8007af2:	2301      	movne	r3, #1
 8007af4:	2300      	moveq	r3, #0
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	e02e      	b.n	8007b58 <HAL_DMA_IRQHandler+0x208>
 8007afa:	bf00      	nop
 8007afc:	2400008c 	.word	0x2400008c
 8007b00:	1b4e81b5 	.word	0x1b4e81b5
 8007b04:	40020010 	.word	0x40020010
 8007b08:	40020028 	.word	0x40020028
 8007b0c:	40020040 	.word	0x40020040
 8007b10:	40020058 	.word	0x40020058
 8007b14:	40020070 	.word	0x40020070
 8007b18:	40020088 	.word	0x40020088
 8007b1c:	400200a0 	.word	0x400200a0
 8007b20:	400200b8 	.word	0x400200b8
 8007b24:	40020410 	.word	0x40020410
 8007b28:	40020428 	.word	0x40020428
 8007b2c:	40020440 	.word	0x40020440
 8007b30:	40020458 	.word	0x40020458
 8007b34:	40020470 	.word	0x40020470
 8007b38:	40020488 	.word	0x40020488
 8007b3c:	400204a0 	.word	0x400204a0
 8007b40:	400204b8 	.word	0x400204b8
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0308 	and.w	r3, r3, #8
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	bf14      	ite	ne
 8007b52:	2301      	movne	r3, #1
 8007b54:	2300      	moveq	r3, #0
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d015      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 0204 	bic.w	r2, r2, #4
 8007b6a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b70:	f003 031f 	and.w	r3, r3, #31
 8007b74:	2208      	movs	r2, #8
 8007b76:	409a      	lsls	r2, r3
 8007b78:	6a3b      	ldr	r3, [r7, #32]
 8007b7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b80:	f043 0201 	orr.w	r2, r3, #1
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b8c:	f003 031f 	and.w	r3, r3, #31
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	fa22 f303 	lsr.w	r3, r2, r3
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d06e      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a69      	ldr	r2, [pc, #420]	; (8007d48 <HAL_DMA_IRQHandler+0x3f8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d04a      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x2ee>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a67      	ldr	r2, [pc, #412]	; (8007d4c <HAL_DMA_IRQHandler+0x3fc>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d045      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x2ee>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a66      	ldr	r2, [pc, #408]	; (8007d50 <HAL_DMA_IRQHandler+0x400>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d040      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x2ee>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a64      	ldr	r2, [pc, #400]	; (8007d54 <HAL_DMA_IRQHandler+0x404>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d03b      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x2ee>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a63      	ldr	r2, [pc, #396]	; (8007d58 <HAL_DMA_IRQHandler+0x408>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d036      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x2ee>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a61      	ldr	r2, [pc, #388]	; (8007d5c <HAL_DMA_IRQHandler+0x40c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d031      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x2ee>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a60      	ldr	r2, [pc, #384]	; (8007d60 <HAL_DMA_IRQHandler+0x410>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d02c      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x2ee>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a5e      	ldr	r2, [pc, #376]	; (8007d64 <HAL_DMA_IRQHandler+0x414>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d027      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x2ee>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a5d      	ldr	r2, [pc, #372]	; (8007d68 <HAL_DMA_IRQHandler+0x418>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d022      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x2ee>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a5b      	ldr	r2, [pc, #364]	; (8007d6c <HAL_DMA_IRQHandler+0x41c>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d01d      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x2ee>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a5a      	ldr	r2, [pc, #360]	; (8007d70 <HAL_DMA_IRQHandler+0x420>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d018      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x2ee>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a58      	ldr	r2, [pc, #352]	; (8007d74 <HAL_DMA_IRQHandler+0x424>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d013      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x2ee>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a57      	ldr	r2, [pc, #348]	; (8007d78 <HAL_DMA_IRQHandler+0x428>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d00e      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x2ee>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a55      	ldr	r2, [pc, #340]	; (8007d7c <HAL_DMA_IRQHandler+0x42c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d009      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x2ee>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a54      	ldr	r2, [pc, #336]	; (8007d80 <HAL_DMA_IRQHandler+0x430>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d004      	beq.n	8007c3e <HAL_DMA_IRQHandler+0x2ee>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a52      	ldr	r2, [pc, #328]	; (8007d84 <HAL_DMA_IRQHandler+0x434>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d10a      	bne.n	8007c54 <HAL_DMA_IRQHandler+0x304>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	bf14      	ite	ne
 8007c4c:	2301      	movne	r3, #1
 8007c4e:	2300      	moveq	r3, #0
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	e003      	b.n	8007c5c <HAL_DMA_IRQHandler+0x30c>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00d      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c64:	f003 031f 	and.w	r3, r3, #31
 8007c68:	2201      	movs	r2, #1
 8007c6a:	409a      	lsls	r2, r3
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c74:	f043 0202 	orr.w	r2, r3, #2
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c80:	f003 031f 	and.w	r3, r3, #31
 8007c84:	2204      	movs	r2, #4
 8007c86:	409a      	lsls	r2, r3
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 808f 	beq.w	8007db0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a2c      	ldr	r2, [pc, #176]	; (8007d48 <HAL_DMA_IRQHandler+0x3f8>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d04a      	beq.n	8007d32 <HAL_DMA_IRQHandler+0x3e2>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a2a      	ldr	r2, [pc, #168]	; (8007d4c <HAL_DMA_IRQHandler+0x3fc>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d045      	beq.n	8007d32 <HAL_DMA_IRQHandler+0x3e2>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a29      	ldr	r2, [pc, #164]	; (8007d50 <HAL_DMA_IRQHandler+0x400>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d040      	beq.n	8007d32 <HAL_DMA_IRQHandler+0x3e2>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a27      	ldr	r2, [pc, #156]	; (8007d54 <HAL_DMA_IRQHandler+0x404>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d03b      	beq.n	8007d32 <HAL_DMA_IRQHandler+0x3e2>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a26      	ldr	r2, [pc, #152]	; (8007d58 <HAL_DMA_IRQHandler+0x408>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d036      	beq.n	8007d32 <HAL_DMA_IRQHandler+0x3e2>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a24      	ldr	r2, [pc, #144]	; (8007d5c <HAL_DMA_IRQHandler+0x40c>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d031      	beq.n	8007d32 <HAL_DMA_IRQHandler+0x3e2>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a23      	ldr	r2, [pc, #140]	; (8007d60 <HAL_DMA_IRQHandler+0x410>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d02c      	beq.n	8007d32 <HAL_DMA_IRQHandler+0x3e2>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a21      	ldr	r2, [pc, #132]	; (8007d64 <HAL_DMA_IRQHandler+0x414>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d027      	beq.n	8007d32 <HAL_DMA_IRQHandler+0x3e2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a20      	ldr	r2, [pc, #128]	; (8007d68 <HAL_DMA_IRQHandler+0x418>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d022      	beq.n	8007d32 <HAL_DMA_IRQHandler+0x3e2>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a1e      	ldr	r2, [pc, #120]	; (8007d6c <HAL_DMA_IRQHandler+0x41c>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d01d      	beq.n	8007d32 <HAL_DMA_IRQHandler+0x3e2>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a1d      	ldr	r2, [pc, #116]	; (8007d70 <HAL_DMA_IRQHandler+0x420>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d018      	beq.n	8007d32 <HAL_DMA_IRQHandler+0x3e2>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a1b      	ldr	r2, [pc, #108]	; (8007d74 <HAL_DMA_IRQHandler+0x424>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d013      	beq.n	8007d32 <HAL_DMA_IRQHandler+0x3e2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a1a      	ldr	r2, [pc, #104]	; (8007d78 <HAL_DMA_IRQHandler+0x428>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d00e      	beq.n	8007d32 <HAL_DMA_IRQHandler+0x3e2>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a18      	ldr	r2, [pc, #96]	; (8007d7c <HAL_DMA_IRQHandler+0x42c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d009      	beq.n	8007d32 <HAL_DMA_IRQHandler+0x3e2>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a17      	ldr	r2, [pc, #92]	; (8007d80 <HAL_DMA_IRQHandler+0x430>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d004      	beq.n	8007d32 <HAL_DMA_IRQHandler+0x3e2>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a15      	ldr	r2, [pc, #84]	; (8007d84 <HAL_DMA_IRQHandler+0x434>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d12a      	bne.n	8007d88 <HAL_DMA_IRQHandler+0x438>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0302 	and.w	r3, r3, #2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	bf14      	ite	ne
 8007d40:	2301      	movne	r3, #1
 8007d42:	2300      	moveq	r3, #0
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	e023      	b.n	8007d90 <HAL_DMA_IRQHandler+0x440>
 8007d48:	40020010 	.word	0x40020010
 8007d4c:	40020028 	.word	0x40020028
 8007d50:	40020040 	.word	0x40020040
 8007d54:	40020058 	.word	0x40020058
 8007d58:	40020070 	.word	0x40020070
 8007d5c:	40020088 	.word	0x40020088
 8007d60:	400200a0 	.word	0x400200a0
 8007d64:	400200b8 	.word	0x400200b8
 8007d68:	40020410 	.word	0x40020410
 8007d6c:	40020428 	.word	0x40020428
 8007d70:	40020440 	.word	0x40020440
 8007d74:	40020458 	.word	0x40020458
 8007d78:	40020470 	.word	0x40020470
 8007d7c:	40020488 	.word	0x40020488
 8007d80:	400204a0 	.word	0x400204a0
 8007d84:	400204b8 	.word	0x400204b8
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2300      	movs	r3, #0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00d      	beq.n	8007db0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d98:	f003 031f 	and.w	r3, r3, #31
 8007d9c:	2204      	movs	r2, #4
 8007d9e:	409a      	lsls	r2, r3
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da8:	f043 0204 	orr.w	r2, r3, #4
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007db4:	f003 031f 	and.w	r3, r3, #31
 8007db8:	2210      	movs	r2, #16
 8007dba:	409a      	lsls	r2, r3
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 80a6 	beq.w	8007f12 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a85      	ldr	r2, [pc, #532]	; (8007fe0 <HAL_DMA_IRQHandler+0x690>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d04a      	beq.n	8007e66 <HAL_DMA_IRQHandler+0x516>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a83      	ldr	r2, [pc, #524]	; (8007fe4 <HAL_DMA_IRQHandler+0x694>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d045      	beq.n	8007e66 <HAL_DMA_IRQHandler+0x516>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a82      	ldr	r2, [pc, #520]	; (8007fe8 <HAL_DMA_IRQHandler+0x698>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d040      	beq.n	8007e66 <HAL_DMA_IRQHandler+0x516>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a80      	ldr	r2, [pc, #512]	; (8007fec <HAL_DMA_IRQHandler+0x69c>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d03b      	beq.n	8007e66 <HAL_DMA_IRQHandler+0x516>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a7f      	ldr	r2, [pc, #508]	; (8007ff0 <HAL_DMA_IRQHandler+0x6a0>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d036      	beq.n	8007e66 <HAL_DMA_IRQHandler+0x516>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a7d      	ldr	r2, [pc, #500]	; (8007ff4 <HAL_DMA_IRQHandler+0x6a4>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d031      	beq.n	8007e66 <HAL_DMA_IRQHandler+0x516>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a7c      	ldr	r2, [pc, #496]	; (8007ff8 <HAL_DMA_IRQHandler+0x6a8>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d02c      	beq.n	8007e66 <HAL_DMA_IRQHandler+0x516>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a7a      	ldr	r2, [pc, #488]	; (8007ffc <HAL_DMA_IRQHandler+0x6ac>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d027      	beq.n	8007e66 <HAL_DMA_IRQHandler+0x516>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a79      	ldr	r2, [pc, #484]	; (8008000 <HAL_DMA_IRQHandler+0x6b0>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d022      	beq.n	8007e66 <HAL_DMA_IRQHandler+0x516>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a77      	ldr	r2, [pc, #476]	; (8008004 <HAL_DMA_IRQHandler+0x6b4>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d01d      	beq.n	8007e66 <HAL_DMA_IRQHandler+0x516>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a76      	ldr	r2, [pc, #472]	; (8008008 <HAL_DMA_IRQHandler+0x6b8>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d018      	beq.n	8007e66 <HAL_DMA_IRQHandler+0x516>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a74      	ldr	r2, [pc, #464]	; (800800c <HAL_DMA_IRQHandler+0x6bc>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d013      	beq.n	8007e66 <HAL_DMA_IRQHandler+0x516>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a73      	ldr	r2, [pc, #460]	; (8008010 <HAL_DMA_IRQHandler+0x6c0>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d00e      	beq.n	8007e66 <HAL_DMA_IRQHandler+0x516>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a71      	ldr	r2, [pc, #452]	; (8008014 <HAL_DMA_IRQHandler+0x6c4>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d009      	beq.n	8007e66 <HAL_DMA_IRQHandler+0x516>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a70      	ldr	r2, [pc, #448]	; (8008018 <HAL_DMA_IRQHandler+0x6c8>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d004      	beq.n	8007e66 <HAL_DMA_IRQHandler+0x516>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a6e      	ldr	r2, [pc, #440]	; (800801c <HAL_DMA_IRQHandler+0x6cc>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d10a      	bne.n	8007e7c <HAL_DMA_IRQHandler+0x52c>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0308 	and.w	r3, r3, #8
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	bf14      	ite	ne
 8007e74:	2301      	movne	r3, #1
 8007e76:	2300      	moveq	r3, #0
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	e009      	b.n	8007e90 <HAL_DMA_IRQHandler+0x540>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0304 	and.w	r3, r3, #4
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	bf14      	ite	ne
 8007e8a:	2301      	movne	r3, #1
 8007e8c:	2300      	moveq	r3, #0
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d03e      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e98:	f003 031f 	and.w	r3, r3, #31
 8007e9c:	2210      	movs	r2, #16
 8007e9e:	409a      	lsls	r2, r3
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d018      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d108      	bne.n	8007ed2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d024      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	4798      	blx	r3
 8007ed0:	e01f      	b.n	8007f12 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d01b      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	4798      	blx	r3
 8007ee2:	e016      	b.n	8007f12 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d107      	bne.n	8007f02 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f022 0208 	bic.w	r2, r2, #8
 8007f00:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f16:	f003 031f 	and.w	r3, r3, #31
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	409a      	lsls	r2, r3
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	4013      	ands	r3, r2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 8110 	beq.w	8008148 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a2c      	ldr	r2, [pc, #176]	; (8007fe0 <HAL_DMA_IRQHandler+0x690>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d04a      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x678>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a2b      	ldr	r2, [pc, #172]	; (8007fe4 <HAL_DMA_IRQHandler+0x694>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d045      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x678>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a29      	ldr	r2, [pc, #164]	; (8007fe8 <HAL_DMA_IRQHandler+0x698>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d040      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x678>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a28      	ldr	r2, [pc, #160]	; (8007fec <HAL_DMA_IRQHandler+0x69c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d03b      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x678>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a26      	ldr	r2, [pc, #152]	; (8007ff0 <HAL_DMA_IRQHandler+0x6a0>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d036      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x678>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a25      	ldr	r2, [pc, #148]	; (8007ff4 <HAL_DMA_IRQHandler+0x6a4>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d031      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x678>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a23      	ldr	r2, [pc, #140]	; (8007ff8 <HAL_DMA_IRQHandler+0x6a8>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d02c      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x678>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a22      	ldr	r2, [pc, #136]	; (8007ffc <HAL_DMA_IRQHandler+0x6ac>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d027      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x678>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a20      	ldr	r2, [pc, #128]	; (8008000 <HAL_DMA_IRQHandler+0x6b0>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d022      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x678>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a1f      	ldr	r2, [pc, #124]	; (8008004 <HAL_DMA_IRQHandler+0x6b4>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d01d      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x678>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a1d      	ldr	r2, [pc, #116]	; (8008008 <HAL_DMA_IRQHandler+0x6b8>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d018      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x678>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a1c      	ldr	r2, [pc, #112]	; (800800c <HAL_DMA_IRQHandler+0x6bc>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d013      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x678>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a1a      	ldr	r2, [pc, #104]	; (8008010 <HAL_DMA_IRQHandler+0x6c0>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00e      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x678>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a19      	ldr	r2, [pc, #100]	; (8008014 <HAL_DMA_IRQHandler+0x6c4>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d009      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x678>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a17      	ldr	r2, [pc, #92]	; (8008018 <HAL_DMA_IRQHandler+0x6c8>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d004      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0x678>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a16      	ldr	r2, [pc, #88]	; (800801c <HAL_DMA_IRQHandler+0x6cc>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d12b      	bne.n	8008020 <HAL_DMA_IRQHandler+0x6d0>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0310 	and.w	r3, r3, #16
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	bf14      	ite	ne
 8007fd6:	2301      	movne	r3, #1
 8007fd8:	2300      	moveq	r3, #0
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	e02a      	b.n	8008034 <HAL_DMA_IRQHandler+0x6e4>
 8007fde:	bf00      	nop
 8007fe0:	40020010 	.word	0x40020010
 8007fe4:	40020028 	.word	0x40020028
 8007fe8:	40020040 	.word	0x40020040
 8007fec:	40020058 	.word	0x40020058
 8007ff0:	40020070 	.word	0x40020070
 8007ff4:	40020088 	.word	0x40020088
 8007ff8:	400200a0 	.word	0x400200a0
 8007ffc:	400200b8 	.word	0x400200b8
 8008000:	40020410 	.word	0x40020410
 8008004:	40020428 	.word	0x40020428
 8008008:	40020440 	.word	0x40020440
 800800c:	40020458 	.word	0x40020458
 8008010:	40020470 	.word	0x40020470
 8008014:	40020488 	.word	0x40020488
 8008018:	400204a0 	.word	0x400204a0
 800801c:	400204b8 	.word	0x400204b8
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0302 	and.w	r3, r3, #2
 800802a:	2b00      	cmp	r3, #0
 800802c:	bf14      	ite	ne
 800802e:	2301      	movne	r3, #1
 8008030:	2300      	moveq	r3, #0
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 8087 	beq.w	8008148 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800803e:	f003 031f 	and.w	r3, r3, #31
 8008042:	2220      	movs	r2, #32
 8008044:	409a      	lsls	r2, r3
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b04      	cmp	r3, #4
 8008054:	d139      	bne.n	80080ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f022 0216 	bic.w	r2, r2, #22
 8008064:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	695a      	ldr	r2, [r3, #20]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008074:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807a:	2b00      	cmp	r3, #0
 800807c:	d103      	bne.n	8008086 <HAL_DMA_IRQHandler+0x736>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008082:	2b00      	cmp	r3, #0
 8008084:	d007      	beq.n	8008096 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f022 0208 	bic.w	r2, r2, #8
 8008094:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800809a:	f003 031f 	and.w	r3, r3, #31
 800809e:	223f      	movs	r2, #63	; 0x3f
 80080a0:	409a      	lsls	r2, r3
 80080a2:	6a3b      	ldr	r3, [r7, #32]
 80080a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 834a 	beq.w	8008754 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	4798      	blx	r3
          }
          return;
 80080c8:	e344      	b.n	8008754 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d018      	beq.n	800810a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d108      	bne.n	80080f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d02c      	beq.n	8008148 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	4798      	blx	r3
 80080f6:	e027      	b.n	8008148 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d023      	beq.n	8008148 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	4798      	blx	r3
 8008108:	e01e      	b.n	8008148 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10f      	bne.n	8008138 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f022 0210 	bic.w	r2, r2, #16
 8008126:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813c:	2b00      	cmp	r3, #0
 800813e:	d003      	beq.n	8008148 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 8306 	beq.w	800875e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 8088 	beq.w	8008270 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2204      	movs	r2, #4
 8008164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a7a      	ldr	r2, [pc, #488]	; (8008358 <HAL_DMA_IRQHandler+0xa08>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d04a      	beq.n	8008208 <HAL_DMA_IRQHandler+0x8b8>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a79      	ldr	r2, [pc, #484]	; (800835c <HAL_DMA_IRQHandler+0xa0c>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d045      	beq.n	8008208 <HAL_DMA_IRQHandler+0x8b8>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a77      	ldr	r2, [pc, #476]	; (8008360 <HAL_DMA_IRQHandler+0xa10>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d040      	beq.n	8008208 <HAL_DMA_IRQHandler+0x8b8>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a76      	ldr	r2, [pc, #472]	; (8008364 <HAL_DMA_IRQHandler+0xa14>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d03b      	beq.n	8008208 <HAL_DMA_IRQHandler+0x8b8>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a74      	ldr	r2, [pc, #464]	; (8008368 <HAL_DMA_IRQHandler+0xa18>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d036      	beq.n	8008208 <HAL_DMA_IRQHandler+0x8b8>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a73      	ldr	r2, [pc, #460]	; (800836c <HAL_DMA_IRQHandler+0xa1c>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d031      	beq.n	8008208 <HAL_DMA_IRQHandler+0x8b8>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a71      	ldr	r2, [pc, #452]	; (8008370 <HAL_DMA_IRQHandler+0xa20>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d02c      	beq.n	8008208 <HAL_DMA_IRQHandler+0x8b8>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a70      	ldr	r2, [pc, #448]	; (8008374 <HAL_DMA_IRQHandler+0xa24>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d027      	beq.n	8008208 <HAL_DMA_IRQHandler+0x8b8>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a6e      	ldr	r2, [pc, #440]	; (8008378 <HAL_DMA_IRQHandler+0xa28>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d022      	beq.n	8008208 <HAL_DMA_IRQHandler+0x8b8>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a6d      	ldr	r2, [pc, #436]	; (800837c <HAL_DMA_IRQHandler+0xa2c>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d01d      	beq.n	8008208 <HAL_DMA_IRQHandler+0x8b8>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a6b      	ldr	r2, [pc, #428]	; (8008380 <HAL_DMA_IRQHandler+0xa30>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d018      	beq.n	8008208 <HAL_DMA_IRQHandler+0x8b8>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a6a      	ldr	r2, [pc, #424]	; (8008384 <HAL_DMA_IRQHandler+0xa34>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d013      	beq.n	8008208 <HAL_DMA_IRQHandler+0x8b8>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a68      	ldr	r2, [pc, #416]	; (8008388 <HAL_DMA_IRQHandler+0xa38>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d00e      	beq.n	8008208 <HAL_DMA_IRQHandler+0x8b8>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a67      	ldr	r2, [pc, #412]	; (800838c <HAL_DMA_IRQHandler+0xa3c>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d009      	beq.n	8008208 <HAL_DMA_IRQHandler+0x8b8>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a65      	ldr	r2, [pc, #404]	; (8008390 <HAL_DMA_IRQHandler+0xa40>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d004      	beq.n	8008208 <HAL_DMA_IRQHandler+0x8b8>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a64      	ldr	r2, [pc, #400]	; (8008394 <HAL_DMA_IRQHandler+0xa44>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d108      	bne.n	800821a <HAL_DMA_IRQHandler+0x8ca>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 0201 	bic.w	r2, r2, #1
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	e007      	b.n	800822a <HAL_DMA_IRQHandler+0x8da>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 0201 	bic.w	r2, r2, #1
 8008228:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	3301      	adds	r3, #1
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008232:	429a      	cmp	r2, r3
 8008234:	d307      	bcc.n	8008246 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1f2      	bne.n	800822a <HAL_DMA_IRQHandler+0x8da>
 8008244:	e000      	b.n	8008248 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008246:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d004      	beq.n	8008260 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2203      	movs	r2, #3
 800825a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800825e:	e003      	b.n	8008268 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 8272 	beq.w	800875e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	4798      	blx	r3
 8008282:	e26c      	b.n	800875e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a43      	ldr	r2, [pc, #268]	; (8008398 <HAL_DMA_IRQHandler+0xa48>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d022      	beq.n	80082d4 <HAL_DMA_IRQHandler+0x984>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a42      	ldr	r2, [pc, #264]	; (800839c <HAL_DMA_IRQHandler+0xa4c>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d01d      	beq.n	80082d4 <HAL_DMA_IRQHandler+0x984>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a40      	ldr	r2, [pc, #256]	; (80083a0 <HAL_DMA_IRQHandler+0xa50>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d018      	beq.n	80082d4 <HAL_DMA_IRQHandler+0x984>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a3f      	ldr	r2, [pc, #252]	; (80083a4 <HAL_DMA_IRQHandler+0xa54>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d013      	beq.n	80082d4 <HAL_DMA_IRQHandler+0x984>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a3d      	ldr	r2, [pc, #244]	; (80083a8 <HAL_DMA_IRQHandler+0xa58>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d00e      	beq.n	80082d4 <HAL_DMA_IRQHandler+0x984>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a3c      	ldr	r2, [pc, #240]	; (80083ac <HAL_DMA_IRQHandler+0xa5c>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d009      	beq.n	80082d4 <HAL_DMA_IRQHandler+0x984>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a3a      	ldr	r2, [pc, #232]	; (80083b0 <HAL_DMA_IRQHandler+0xa60>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d004      	beq.n	80082d4 <HAL_DMA_IRQHandler+0x984>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a39      	ldr	r2, [pc, #228]	; (80083b4 <HAL_DMA_IRQHandler+0xa64>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d101      	bne.n	80082d8 <HAL_DMA_IRQHandler+0x988>
 80082d4:	2301      	movs	r3, #1
 80082d6:	e000      	b.n	80082da <HAL_DMA_IRQHandler+0x98a>
 80082d8:	2300      	movs	r3, #0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 823f 	beq.w	800875e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ec:	f003 031f 	and.w	r3, r3, #31
 80082f0:	2204      	movs	r2, #4
 80082f2:	409a      	lsls	r2, r3
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	4013      	ands	r3, r2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 80cd 	beq.w	8008498 <HAL_DMA_IRQHandler+0xb48>
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 80c7 	beq.w	8008498 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800830e:	f003 031f 	and.w	r3, r3, #31
 8008312:	2204      	movs	r2, #4
 8008314:	409a      	lsls	r2, r3
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d049      	beq.n	80083b8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800832a:	2b00      	cmp	r3, #0
 800832c:	d109      	bne.n	8008342 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 8210 	beq.w	8008758 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008340:	e20a      	b.n	8008758 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 8206 	beq.w	8008758 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008354:	e200      	b.n	8008758 <HAL_DMA_IRQHandler+0xe08>
 8008356:	bf00      	nop
 8008358:	40020010 	.word	0x40020010
 800835c:	40020028 	.word	0x40020028
 8008360:	40020040 	.word	0x40020040
 8008364:	40020058 	.word	0x40020058
 8008368:	40020070 	.word	0x40020070
 800836c:	40020088 	.word	0x40020088
 8008370:	400200a0 	.word	0x400200a0
 8008374:	400200b8 	.word	0x400200b8
 8008378:	40020410 	.word	0x40020410
 800837c:	40020428 	.word	0x40020428
 8008380:	40020440 	.word	0x40020440
 8008384:	40020458 	.word	0x40020458
 8008388:	40020470 	.word	0x40020470
 800838c:	40020488 	.word	0x40020488
 8008390:	400204a0 	.word	0x400204a0
 8008394:	400204b8 	.word	0x400204b8
 8008398:	58025408 	.word	0x58025408
 800839c:	5802541c 	.word	0x5802541c
 80083a0:	58025430 	.word	0x58025430
 80083a4:	58025444 	.word	0x58025444
 80083a8:	58025458 	.word	0x58025458
 80083ac:	5802546c 	.word	0x5802546c
 80083b0:	58025480 	.word	0x58025480
 80083b4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f003 0320 	and.w	r3, r3, #32
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d160      	bne.n	8008484 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a7f      	ldr	r2, [pc, #508]	; (80085c4 <HAL_DMA_IRQHandler+0xc74>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d04a      	beq.n	8008462 <HAL_DMA_IRQHandler+0xb12>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a7d      	ldr	r2, [pc, #500]	; (80085c8 <HAL_DMA_IRQHandler+0xc78>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d045      	beq.n	8008462 <HAL_DMA_IRQHandler+0xb12>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a7c      	ldr	r2, [pc, #496]	; (80085cc <HAL_DMA_IRQHandler+0xc7c>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d040      	beq.n	8008462 <HAL_DMA_IRQHandler+0xb12>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a7a      	ldr	r2, [pc, #488]	; (80085d0 <HAL_DMA_IRQHandler+0xc80>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d03b      	beq.n	8008462 <HAL_DMA_IRQHandler+0xb12>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a79      	ldr	r2, [pc, #484]	; (80085d4 <HAL_DMA_IRQHandler+0xc84>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d036      	beq.n	8008462 <HAL_DMA_IRQHandler+0xb12>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a77      	ldr	r2, [pc, #476]	; (80085d8 <HAL_DMA_IRQHandler+0xc88>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d031      	beq.n	8008462 <HAL_DMA_IRQHandler+0xb12>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a76      	ldr	r2, [pc, #472]	; (80085dc <HAL_DMA_IRQHandler+0xc8c>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d02c      	beq.n	8008462 <HAL_DMA_IRQHandler+0xb12>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a74      	ldr	r2, [pc, #464]	; (80085e0 <HAL_DMA_IRQHandler+0xc90>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d027      	beq.n	8008462 <HAL_DMA_IRQHandler+0xb12>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a73      	ldr	r2, [pc, #460]	; (80085e4 <HAL_DMA_IRQHandler+0xc94>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d022      	beq.n	8008462 <HAL_DMA_IRQHandler+0xb12>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a71      	ldr	r2, [pc, #452]	; (80085e8 <HAL_DMA_IRQHandler+0xc98>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d01d      	beq.n	8008462 <HAL_DMA_IRQHandler+0xb12>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a70      	ldr	r2, [pc, #448]	; (80085ec <HAL_DMA_IRQHandler+0xc9c>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d018      	beq.n	8008462 <HAL_DMA_IRQHandler+0xb12>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a6e      	ldr	r2, [pc, #440]	; (80085f0 <HAL_DMA_IRQHandler+0xca0>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d013      	beq.n	8008462 <HAL_DMA_IRQHandler+0xb12>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a6d      	ldr	r2, [pc, #436]	; (80085f4 <HAL_DMA_IRQHandler+0xca4>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d00e      	beq.n	8008462 <HAL_DMA_IRQHandler+0xb12>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a6b      	ldr	r2, [pc, #428]	; (80085f8 <HAL_DMA_IRQHandler+0xca8>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d009      	beq.n	8008462 <HAL_DMA_IRQHandler+0xb12>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a6a      	ldr	r2, [pc, #424]	; (80085fc <HAL_DMA_IRQHandler+0xcac>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d004      	beq.n	8008462 <HAL_DMA_IRQHandler+0xb12>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a68      	ldr	r2, [pc, #416]	; (8008600 <HAL_DMA_IRQHandler+0xcb0>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d108      	bne.n	8008474 <HAL_DMA_IRQHandler+0xb24>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 0208 	bic.w	r2, r2, #8
 8008470:	601a      	str	r2, [r3, #0]
 8008472:	e007      	b.n	8008484 <HAL_DMA_IRQHandler+0xb34>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f022 0204 	bic.w	r2, r2, #4
 8008482:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 8165 	beq.w	8008758 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008496:	e15f      	b.n	8008758 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800849c:	f003 031f 	and.w	r3, r3, #31
 80084a0:	2202      	movs	r2, #2
 80084a2:	409a      	lsls	r2, r3
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	4013      	ands	r3, r2
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 80c5 	beq.w	8008638 <HAL_DMA_IRQHandler+0xce8>
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	f003 0302 	and.w	r3, r3, #2
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 80bf 	beq.w	8008638 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084be:	f003 031f 	and.w	r3, r3, #31
 80084c2:	2202      	movs	r2, #2
 80084c4:	409a      	lsls	r2, r3
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d018      	beq.n	8008506 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d109      	bne.n	80084f2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 813a 	beq.w	800875c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084f0:	e134      	b.n	800875c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 8130 	beq.w	800875c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008504:	e12a      	b.n	800875c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f003 0320 	and.w	r3, r3, #32
 800850c:	2b00      	cmp	r3, #0
 800850e:	f040 8089 	bne.w	8008624 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a2b      	ldr	r2, [pc, #172]	; (80085c4 <HAL_DMA_IRQHandler+0xc74>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d04a      	beq.n	80085b2 <HAL_DMA_IRQHandler+0xc62>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a29      	ldr	r2, [pc, #164]	; (80085c8 <HAL_DMA_IRQHandler+0xc78>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d045      	beq.n	80085b2 <HAL_DMA_IRQHandler+0xc62>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a28      	ldr	r2, [pc, #160]	; (80085cc <HAL_DMA_IRQHandler+0xc7c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d040      	beq.n	80085b2 <HAL_DMA_IRQHandler+0xc62>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a26      	ldr	r2, [pc, #152]	; (80085d0 <HAL_DMA_IRQHandler+0xc80>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d03b      	beq.n	80085b2 <HAL_DMA_IRQHandler+0xc62>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a25      	ldr	r2, [pc, #148]	; (80085d4 <HAL_DMA_IRQHandler+0xc84>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d036      	beq.n	80085b2 <HAL_DMA_IRQHandler+0xc62>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a23      	ldr	r2, [pc, #140]	; (80085d8 <HAL_DMA_IRQHandler+0xc88>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d031      	beq.n	80085b2 <HAL_DMA_IRQHandler+0xc62>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a22      	ldr	r2, [pc, #136]	; (80085dc <HAL_DMA_IRQHandler+0xc8c>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d02c      	beq.n	80085b2 <HAL_DMA_IRQHandler+0xc62>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a20      	ldr	r2, [pc, #128]	; (80085e0 <HAL_DMA_IRQHandler+0xc90>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d027      	beq.n	80085b2 <HAL_DMA_IRQHandler+0xc62>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a1f      	ldr	r2, [pc, #124]	; (80085e4 <HAL_DMA_IRQHandler+0xc94>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d022      	beq.n	80085b2 <HAL_DMA_IRQHandler+0xc62>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1d      	ldr	r2, [pc, #116]	; (80085e8 <HAL_DMA_IRQHandler+0xc98>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d01d      	beq.n	80085b2 <HAL_DMA_IRQHandler+0xc62>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a1c      	ldr	r2, [pc, #112]	; (80085ec <HAL_DMA_IRQHandler+0xc9c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d018      	beq.n	80085b2 <HAL_DMA_IRQHandler+0xc62>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a1a      	ldr	r2, [pc, #104]	; (80085f0 <HAL_DMA_IRQHandler+0xca0>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d013      	beq.n	80085b2 <HAL_DMA_IRQHandler+0xc62>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a19      	ldr	r2, [pc, #100]	; (80085f4 <HAL_DMA_IRQHandler+0xca4>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d00e      	beq.n	80085b2 <HAL_DMA_IRQHandler+0xc62>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a17      	ldr	r2, [pc, #92]	; (80085f8 <HAL_DMA_IRQHandler+0xca8>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d009      	beq.n	80085b2 <HAL_DMA_IRQHandler+0xc62>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a16      	ldr	r2, [pc, #88]	; (80085fc <HAL_DMA_IRQHandler+0xcac>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d004      	beq.n	80085b2 <HAL_DMA_IRQHandler+0xc62>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a14      	ldr	r2, [pc, #80]	; (8008600 <HAL_DMA_IRQHandler+0xcb0>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d128      	bne.n	8008604 <HAL_DMA_IRQHandler+0xcb4>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f022 0214 	bic.w	r2, r2, #20
 80085c0:	601a      	str	r2, [r3, #0]
 80085c2:	e027      	b.n	8008614 <HAL_DMA_IRQHandler+0xcc4>
 80085c4:	40020010 	.word	0x40020010
 80085c8:	40020028 	.word	0x40020028
 80085cc:	40020040 	.word	0x40020040
 80085d0:	40020058 	.word	0x40020058
 80085d4:	40020070 	.word	0x40020070
 80085d8:	40020088 	.word	0x40020088
 80085dc:	400200a0 	.word	0x400200a0
 80085e0:	400200b8 	.word	0x400200b8
 80085e4:	40020410 	.word	0x40020410
 80085e8:	40020428 	.word	0x40020428
 80085ec:	40020440 	.word	0x40020440
 80085f0:	40020458 	.word	0x40020458
 80085f4:	40020470 	.word	0x40020470
 80085f8:	40020488 	.word	0x40020488
 80085fc:	400204a0 	.word	0x400204a0
 8008600:	400204b8 	.word	0x400204b8
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f022 020a 	bic.w	r2, r2, #10
 8008612:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 8097 	beq.w	800875c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008636:	e091      	b.n	800875c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800863c:	f003 031f 	and.w	r3, r3, #31
 8008640:	2208      	movs	r2, #8
 8008642:	409a      	lsls	r2, r3
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	4013      	ands	r3, r2
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 8088 	beq.w	800875e <HAL_DMA_IRQHandler+0xe0e>
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f003 0308 	and.w	r3, r3, #8
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 8082 	beq.w	800875e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a41      	ldr	r2, [pc, #260]	; (8008764 <HAL_DMA_IRQHandler+0xe14>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d04a      	beq.n	80086fa <HAL_DMA_IRQHandler+0xdaa>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a3f      	ldr	r2, [pc, #252]	; (8008768 <HAL_DMA_IRQHandler+0xe18>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d045      	beq.n	80086fa <HAL_DMA_IRQHandler+0xdaa>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a3e      	ldr	r2, [pc, #248]	; (800876c <HAL_DMA_IRQHandler+0xe1c>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d040      	beq.n	80086fa <HAL_DMA_IRQHandler+0xdaa>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a3c      	ldr	r2, [pc, #240]	; (8008770 <HAL_DMA_IRQHandler+0xe20>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d03b      	beq.n	80086fa <HAL_DMA_IRQHandler+0xdaa>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a3b      	ldr	r2, [pc, #236]	; (8008774 <HAL_DMA_IRQHandler+0xe24>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d036      	beq.n	80086fa <HAL_DMA_IRQHandler+0xdaa>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a39      	ldr	r2, [pc, #228]	; (8008778 <HAL_DMA_IRQHandler+0xe28>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d031      	beq.n	80086fa <HAL_DMA_IRQHandler+0xdaa>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a38      	ldr	r2, [pc, #224]	; (800877c <HAL_DMA_IRQHandler+0xe2c>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d02c      	beq.n	80086fa <HAL_DMA_IRQHandler+0xdaa>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a36      	ldr	r2, [pc, #216]	; (8008780 <HAL_DMA_IRQHandler+0xe30>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d027      	beq.n	80086fa <HAL_DMA_IRQHandler+0xdaa>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a35      	ldr	r2, [pc, #212]	; (8008784 <HAL_DMA_IRQHandler+0xe34>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d022      	beq.n	80086fa <HAL_DMA_IRQHandler+0xdaa>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a33      	ldr	r2, [pc, #204]	; (8008788 <HAL_DMA_IRQHandler+0xe38>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d01d      	beq.n	80086fa <HAL_DMA_IRQHandler+0xdaa>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a32      	ldr	r2, [pc, #200]	; (800878c <HAL_DMA_IRQHandler+0xe3c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d018      	beq.n	80086fa <HAL_DMA_IRQHandler+0xdaa>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a30      	ldr	r2, [pc, #192]	; (8008790 <HAL_DMA_IRQHandler+0xe40>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d013      	beq.n	80086fa <HAL_DMA_IRQHandler+0xdaa>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a2f      	ldr	r2, [pc, #188]	; (8008794 <HAL_DMA_IRQHandler+0xe44>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d00e      	beq.n	80086fa <HAL_DMA_IRQHandler+0xdaa>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a2d      	ldr	r2, [pc, #180]	; (8008798 <HAL_DMA_IRQHandler+0xe48>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d009      	beq.n	80086fa <HAL_DMA_IRQHandler+0xdaa>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a2c      	ldr	r2, [pc, #176]	; (800879c <HAL_DMA_IRQHandler+0xe4c>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d004      	beq.n	80086fa <HAL_DMA_IRQHandler+0xdaa>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a2a      	ldr	r2, [pc, #168]	; (80087a0 <HAL_DMA_IRQHandler+0xe50>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d108      	bne.n	800870c <HAL_DMA_IRQHandler+0xdbc>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 021c 	bic.w	r2, r2, #28
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	e007      	b.n	800871c <HAL_DMA_IRQHandler+0xdcc>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f022 020e 	bic.w	r2, r2, #14
 800871a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008720:	f003 031f 	and.w	r3, r3, #31
 8008724:	2201      	movs	r2, #1
 8008726:	409a      	lsls	r2, r3
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008746:	2b00      	cmp	r3, #0
 8008748:	d009      	beq.n	800875e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	4798      	blx	r3
 8008752:	e004      	b.n	800875e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008754:	bf00      	nop
 8008756:	e002      	b.n	800875e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008758:	bf00      	nop
 800875a:	e000      	b.n	800875e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800875c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800875e:	3728      	adds	r7, #40	; 0x28
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	40020010 	.word	0x40020010
 8008768:	40020028 	.word	0x40020028
 800876c:	40020040 	.word	0x40020040
 8008770:	40020058 	.word	0x40020058
 8008774:	40020070 	.word	0x40020070
 8008778:	40020088 	.word	0x40020088
 800877c:	400200a0 	.word	0x400200a0
 8008780:	400200b8 	.word	0x400200b8
 8008784:	40020410 	.word	0x40020410
 8008788:	40020428 	.word	0x40020428
 800878c:	40020440 	.word	0x40020440
 8008790:	40020458 	.word	0x40020458
 8008794:	40020470 	.word	0x40020470
 8008798:	40020488 	.word	0x40020488
 800879c:	400204a0 	.word	0x400204a0
 80087a0:	400204b8 	.word	0x400204b8

080087a4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087bc:	b480      	push	{r7}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ce:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a7f      	ldr	r2, [pc, #508]	; (80089d8 <DMA_SetConfig+0x21c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d072      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a7d      	ldr	r2, [pc, #500]	; (80089dc <DMA_SetConfig+0x220>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d06d      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a7c      	ldr	r2, [pc, #496]	; (80089e0 <DMA_SetConfig+0x224>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d068      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a7a      	ldr	r2, [pc, #488]	; (80089e4 <DMA_SetConfig+0x228>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d063      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a79      	ldr	r2, [pc, #484]	; (80089e8 <DMA_SetConfig+0x22c>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d05e      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a77      	ldr	r2, [pc, #476]	; (80089ec <DMA_SetConfig+0x230>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d059      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a76      	ldr	r2, [pc, #472]	; (80089f0 <DMA_SetConfig+0x234>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d054      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a74      	ldr	r2, [pc, #464]	; (80089f4 <DMA_SetConfig+0x238>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d04f      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a73      	ldr	r2, [pc, #460]	; (80089f8 <DMA_SetConfig+0x23c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d04a      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a71      	ldr	r2, [pc, #452]	; (80089fc <DMA_SetConfig+0x240>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d045      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a70      	ldr	r2, [pc, #448]	; (8008a00 <DMA_SetConfig+0x244>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d040      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a6e      	ldr	r2, [pc, #440]	; (8008a04 <DMA_SetConfig+0x248>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d03b      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a6d      	ldr	r2, [pc, #436]	; (8008a08 <DMA_SetConfig+0x24c>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d036      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a6b      	ldr	r2, [pc, #428]	; (8008a0c <DMA_SetConfig+0x250>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d031      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a6a      	ldr	r2, [pc, #424]	; (8008a10 <DMA_SetConfig+0x254>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d02c      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a68      	ldr	r2, [pc, #416]	; (8008a14 <DMA_SetConfig+0x258>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d027      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a67      	ldr	r2, [pc, #412]	; (8008a18 <DMA_SetConfig+0x25c>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d022      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a65      	ldr	r2, [pc, #404]	; (8008a1c <DMA_SetConfig+0x260>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d01d      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a64      	ldr	r2, [pc, #400]	; (8008a20 <DMA_SetConfig+0x264>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d018      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a62      	ldr	r2, [pc, #392]	; (8008a24 <DMA_SetConfig+0x268>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d013      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a61      	ldr	r2, [pc, #388]	; (8008a28 <DMA_SetConfig+0x26c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d00e      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a5f      	ldr	r2, [pc, #380]	; (8008a2c <DMA_SetConfig+0x270>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d009      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a5e      	ldr	r2, [pc, #376]	; (8008a30 <DMA_SetConfig+0x274>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d004      	beq.n	80088c6 <DMA_SetConfig+0x10a>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a5c      	ldr	r2, [pc, #368]	; (8008a34 <DMA_SetConfig+0x278>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d101      	bne.n	80088ca <DMA_SetConfig+0x10e>
 80088c6:	2301      	movs	r3, #1
 80088c8:	e000      	b.n	80088cc <DMA_SetConfig+0x110>
 80088ca:	2300      	movs	r3, #0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00d      	beq.n	80088ec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80088d8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d004      	beq.n	80088ec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80088ea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a39      	ldr	r2, [pc, #228]	; (80089d8 <DMA_SetConfig+0x21c>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d04a      	beq.n	800898c <DMA_SetConfig+0x1d0>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a38      	ldr	r2, [pc, #224]	; (80089dc <DMA_SetConfig+0x220>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d045      	beq.n	800898c <DMA_SetConfig+0x1d0>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a36      	ldr	r2, [pc, #216]	; (80089e0 <DMA_SetConfig+0x224>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d040      	beq.n	800898c <DMA_SetConfig+0x1d0>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a35      	ldr	r2, [pc, #212]	; (80089e4 <DMA_SetConfig+0x228>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d03b      	beq.n	800898c <DMA_SetConfig+0x1d0>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a33      	ldr	r2, [pc, #204]	; (80089e8 <DMA_SetConfig+0x22c>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d036      	beq.n	800898c <DMA_SetConfig+0x1d0>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a32      	ldr	r2, [pc, #200]	; (80089ec <DMA_SetConfig+0x230>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d031      	beq.n	800898c <DMA_SetConfig+0x1d0>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a30      	ldr	r2, [pc, #192]	; (80089f0 <DMA_SetConfig+0x234>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d02c      	beq.n	800898c <DMA_SetConfig+0x1d0>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a2f      	ldr	r2, [pc, #188]	; (80089f4 <DMA_SetConfig+0x238>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d027      	beq.n	800898c <DMA_SetConfig+0x1d0>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a2d      	ldr	r2, [pc, #180]	; (80089f8 <DMA_SetConfig+0x23c>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d022      	beq.n	800898c <DMA_SetConfig+0x1d0>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a2c      	ldr	r2, [pc, #176]	; (80089fc <DMA_SetConfig+0x240>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d01d      	beq.n	800898c <DMA_SetConfig+0x1d0>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a2a      	ldr	r2, [pc, #168]	; (8008a00 <DMA_SetConfig+0x244>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d018      	beq.n	800898c <DMA_SetConfig+0x1d0>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a29      	ldr	r2, [pc, #164]	; (8008a04 <DMA_SetConfig+0x248>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d013      	beq.n	800898c <DMA_SetConfig+0x1d0>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a27      	ldr	r2, [pc, #156]	; (8008a08 <DMA_SetConfig+0x24c>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d00e      	beq.n	800898c <DMA_SetConfig+0x1d0>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a26      	ldr	r2, [pc, #152]	; (8008a0c <DMA_SetConfig+0x250>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d009      	beq.n	800898c <DMA_SetConfig+0x1d0>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a24      	ldr	r2, [pc, #144]	; (8008a10 <DMA_SetConfig+0x254>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d004      	beq.n	800898c <DMA_SetConfig+0x1d0>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a23      	ldr	r2, [pc, #140]	; (8008a14 <DMA_SetConfig+0x258>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d101      	bne.n	8008990 <DMA_SetConfig+0x1d4>
 800898c:	2301      	movs	r3, #1
 800898e:	e000      	b.n	8008992 <DMA_SetConfig+0x1d6>
 8008990:	2300      	movs	r3, #0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d059      	beq.n	8008a4a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800899a:	f003 031f 	and.w	r3, r3, #31
 800899e:	223f      	movs	r2, #63	; 0x3f
 80089a0:	409a      	lsls	r2, r3
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089b4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	2b40      	cmp	r3, #64	; 0x40
 80089c4:	d138      	bne.n	8008a38 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80089d6:	e086      	b.n	8008ae6 <DMA_SetConfig+0x32a>
 80089d8:	40020010 	.word	0x40020010
 80089dc:	40020028 	.word	0x40020028
 80089e0:	40020040 	.word	0x40020040
 80089e4:	40020058 	.word	0x40020058
 80089e8:	40020070 	.word	0x40020070
 80089ec:	40020088 	.word	0x40020088
 80089f0:	400200a0 	.word	0x400200a0
 80089f4:	400200b8 	.word	0x400200b8
 80089f8:	40020410 	.word	0x40020410
 80089fc:	40020428 	.word	0x40020428
 8008a00:	40020440 	.word	0x40020440
 8008a04:	40020458 	.word	0x40020458
 8008a08:	40020470 	.word	0x40020470
 8008a0c:	40020488 	.word	0x40020488
 8008a10:	400204a0 	.word	0x400204a0
 8008a14:	400204b8 	.word	0x400204b8
 8008a18:	58025408 	.word	0x58025408
 8008a1c:	5802541c 	.word	0x5802541c
 8008a20:	58025430 	.word	0x58025430
 8008a24:	58025444 	.word	0x58025444
 8008a28:	58025458 	.word	0x58025458
 8008a2c:	5802546c 	.word	0x5802546c
 8008a30:	58025480 	.word	0x58025480
 8008a34:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	60da      	str	r2, [r3, #12]
}
 8008a48:	e04d      	b.n	8008ae6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a29      	ldr	r2, [pc, #164]	; (8008af4 <DMA_SetConfig+0x338>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d022      	beq.n	8008a9a <DMA_SetConfig+0x2de>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a27      	ldr	r2, [pc, #156]	; (8008af8 <DMA_SetConfig+0x33c>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d01d      	beq.n	8008a9a <DMA_SetConfig+0x2de>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a26      	ldr	r2, [pc, #152]	; (8008afc <DMA_SetConfig+0x340>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d018      	beq.n	8008a9a <DMA_SetConfig+0x2de>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a24      	ldr	r2, [pc, #144]	; (8008b00 <DMA_SetConfig+0x344>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d013      	beq.n	8008a9a <DMA_SetConfig+0x2de>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a23      	ldr	r2, [pc, #140]	; (8008b04 <DMA_SetConfig+0x348>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d00e      	beq.n	8008a9a <DMA_SetConfig+0x2de>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a21      	ldr	r2, [pc, #132]	; (8008b08 <DMA_SetConfig+0x34c>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d009      	beq.n	8008a9a <DMA_SetConfig+0x2de>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a20      	ldr	r2, [pc, #128]	; (8008b0c <DMA_SetConfig+0x350>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d004      	beq.n	8008a9a <DMA_SetConfig+0x2de>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a1e      	ldr	r2, [pc, #120]	; (8008b10 <DMA_SetConfig+0x354>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d101      	bne.n	8008a9e <DMA_SetConfig+0x2e2>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e000      	b.n	8008aa0 <DMA_SetConfig+0x2e4>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d020      	beq.n	8008ae6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aa8:	f003 031f 	and.w	r3, r3, #31
 8008aac:	2201      	movs	r2, #1
 8008aae:	409a      	lsls	r2, r3
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	2b40      	cmp	r3, #64	; 0x40
 8008ac2:	d108      	bne.n	8008ad6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	60da      	str	r2, [r3, #12]
}
 8008ad4:	e007      	b.n	8008ae6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	60da      	str	r2, [r3, #12]
}
 8008ae6:	bf00      	nop
 8008ae8:	371c      	adds	r7, #28
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	58025408 	.word	0x58025408
 8008af8:	5802541c 	.word	0x5802541c
 8008afc:	58025430 	.word	0x58025430
 8008b00:	58025444 	.word	0x58025444
 8008b04:	58025458 	.word	0x58025458
 8008b08:	5802546c 	.word	0x5802546c
 8008b0c:	58025480 	.word	0x58025480
 8008b10:	58025494 	.word	0x58025494

08008b14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a42      	ldr	r2, [pc, #264]	; (8008c2c <DMA_CalcBaseAndBitshift+0x118>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d04a      	beq.n	8008bbc <DMA_CalcBaseAndBitshift+0xa8>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a41      	ldr	r2, [pc, #260]	; (8008c30 <DMA_CalcBaseAndBitshift+0x11c>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d045      	beq.n	8008bbc <DMA_CalcBaseAndBitshift+0xa8>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a3f      	ldr	r2, [pc, #252]	; (8008c34 <DMA_CalcBaseAndBitshift+0x120>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d040      	beq.n	8008bbc <DMA_CalcBaseAndBitshift+0xa8>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a3e      	ldr	r2, [pc, #248]	; (8008c38 <DMA_CalcBaseAndBitshift+0x124>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d03b      	beq.n	8008bbc <DMA_CalcBaseAndBitshift+0xa8>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a3c      	ldr	r2, [pc, #240]	; (8008c3c <DMA_CalcBaseAndBitshift+0x128>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d036      	beq.n	8008bbc <DMA_CalcBaseAndBitshift+0xa8>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a3b      	ldr	r2, [pc, #236]	; (8008c40 <DMA_CalcBaseAndBitshift+0x12c>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d031      	beq.n	8008bbc <DMA_CalcBaseAndBitshift+0xa8>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a39      	ldr	r2, [pc, #228]	; (8008c44 <DMA_CalcBaseAndBitshift+0x130>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d02c      	beq.n	8008bbc <DMA_CalcBaseAndBitshift+0xa8>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a38      	ldr	r2, [pc, #224]	; (8008c48 <DMA_CalcBaseAndBitshift+0x134>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d027      	beq.n	8008bbc <DMA_CalcBaseAndBitshift+0xa8>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a36      	ldr	r2, [pc, #216]	; (8008c4c <DMA_CalcBaseAndBitshift+0x138>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d022      	beq.n	8008bbc <DMA_CalcBaseAndBitshift+0xa8>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a35      	ldr	r2, [pc, #212]	; (8008c50 <DMA_CalcBaseAndBitshift+0x13c>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d01d      	beq.n	8008bbc <DMA_CalcBaseAndBitshift+0xa8>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a33      	ldr	r2, [pc, #204]	; (8008c54 <DMA_CalcBaseAndBitshift+0x140>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d018      	beq.n	8008bbc <DMA_CalcBaseAndBitshift+0xa8>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a32      	ldr	r2, [pc, #200]	; (8008c58 <DMA_CalcBaseAndBitshift+0x144>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d013      	beq.n	8008bbc <DMA_CalcBaseAndBitshift+0xa8>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a30      	ldr	r2, [pc, #192]	; (8008c5c <DMA_CalcBaseAndBitshift+0x148>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d00e      	beq.n	8008bbc <DMA_CalcBaseAndBitshift+0xa8>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a2f      	ldr	r2, [pc, #188]	; (8008c60 <DMA_CalcBaseAndBitshift+0x14c>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d009      	beq.n	8008bbc <DMA_CalcBaseAndBitshift+0xa8>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a2d      	ldr	r2, [pc, #180]	; (8008c64 <DMA_CalcBaseAndBitshift+0x150>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d004      	beq.n	8008bbc <DMA_CalcBaseAndBitshift+0xa8>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a2c      	ldr	r2, [pc, #176]	; (8008c68 <DMA_CalcBaseAndBitshift+0x154>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d101      	bne.n	8008bc0 <DMA_CalcBaseAndBitshift+0xac>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e000      	b.n	8008bc2 <DMA_CalcBaseAndBitshift+0xae>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d024      	beq.n	8008c10 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	3b10      	subs	r3, #16
 8008bce:	4a27      	ldr	r2, [pc, #156]	; (8008c6c <DMA_CalcBaseAndBitshift+0x158>)
 8008bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd4:	091b      	lsrs	r3, r3, #4
 8008bd6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f003 0307 	and.w	r3, r3, #7
 8008bde:	4a24      	ldr	r2, [pc, #144]	; (8008c70 <DMA_CalcBaseAndBitshift+0x15c>)
 8008be0:	5cd3      	ldrb	r3, [r2, r3]
 8008be2:	461a      	mov	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d908      	bls.n	8008c00 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	4b1f      	ldr	r3, [pc, #124]	; (8008c74 <DMA_CalcBaseAndBitshift+0x160>)
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	1d1a      	adds	r2, r3, #4
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	659a      	str	r2, [r3, #88]	; 0x58
 8008bfe:	e00d      	b.n	8008c1c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	461a      	mov	r2, r3
 8008c06:	4b1b      	ldr	r3, [pc, #108]	; (8008c74 <DMA_CalcBaseAndBitshift+0x160>)
 8008c08:	4013      	ands	r3, r2
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8008c0e:	e005      	b.n	8008c1c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	40020010 	.word	0x40020010
 8008c30:	40020028 	.word	0x40020028
 8008c34:	40020040 	.word	0x40020040
 8008c38:	40020058 	.word	0x40020058
 8008c3c:	40020070 	.word	0x40020070
 8008c40:	40020088 	.word	0x40020088
 8008c44:	400200a0 	.word	0x400200a0
 8008c48:	400200b8 	.word	0x400200b8
 8008c4c:	40020410 	.word	0x40020410
 8008c50:	40020428 	.word	0x40020428
 8008c54:	40020440 	.word	0x40020440
 8008c58:	40020458 	.word	0x40020458
 8008c5c:	40020470 	.word	0x40020470
 8008c60:	40020488 	.word	0x40020488
 8008c64:	400204a0 	.word	0x400204a0
 8008c68:	400204b8 	.word	0x400204b8
 8008c6c:	aaaaaaab 	.word	0xaaaaaaab
 8008c70:	080179f4 	.word	0x080179f4
 8008c74:	fffffc00 	.word	0xfffffc00

08008c78 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d120      	bne.n	8008cce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c90:	2b03      	cmp	r3, #3
 8008c92:	d858      	bhi.n	8008d46 <DMA_CheckFifoParam+0xce>
 8008c94:	a201      	add	r2, pc, #4	; (adr r2, 8008c9c <DMA_CheckFifoParam+0x24>)
 8008c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9a:	bf00      	nop
 8008c9c:	08008cad 	.word	0x08008cad
 8008ca0:	08008cbf 	.word	0x08008cbf
 8008ca4:	08008cad 	.word	0x08008cad
 8008ca8:	08008d47 	.word	0x08008d47
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d048      	beq.n	8008d4a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008cbc:	e045      	b.n	8008d4a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008cc6:	d142      	bne.n	8008d4e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ccc:	e03f      	b.n	8008d4e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cd6:	d123      	bne.n	8008d20 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cdc:	2b03      	cmp	r3, #3
 8008cde:	d838      	bhi.n	8008d52 <DMA_CheckFifoParam+0xda>
 8008ce0:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <DMA_CheckFifoParam+0x70>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008cf9 	.word	0x08008cf9
 8008cec:	08008cff 	.word	0x08008cff
 8008cf0:	08008cf9 	.word	0x08008cf9
 8008cf4:	08008d11 	.word	0x08008d11
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	73fb      	strb	r3, [r7, #15]
        break;
 8008cfc:	e030      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d025      	beq.n	8008d56 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d0e:	e022      	b.n	8008d56 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008d18:	d11f      	bne.n	8008d5a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d1e:	e01c      	b.n	8008d5a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d902      	bls.n	8008d2e <DMA_CheckFifoParam+0xb6>
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d003      	beq.n	8008d34 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008d2c:	e018      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	73fb      	strb	r3, [r7, #15]
        break;
 8008d32:	e015      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00e      	beq.n	8008d5e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	73fb      	strb	r3, [r7, #15]
    break;
 8008d44:	e00b      	b.n	8008d5e <DMA_CheckFifoParam+0xe6>
        break;
 8008d46:	bf00      	nop
 8008d48:	e00a      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>
        break;
 8008d4a:	bf00      	nop
 8008d4c:	e008      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>
        break;
 8008d4e:	bf00      	nop
 8008d50:	e006      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>
        break;
 8008d52:	bf00      	nop
 8008d54:	e004      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>
        break;
 8008d56:	bf00      	nop
 8008d58:	e002      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>
        break;
 8008d5a:	bf00      	nop
 8008d5c:	e000      	b.n	8008d60 <DMA_CheckFifoParam+0xe8>
    break;
 8008d5e:	bf00      	nop
    }
  }

  return status;
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop

08008d70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a38      	ldr	r2, [pc, #224]	; (8008e64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d022      	beq.n	8008dce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a36      	ldr	r2, [pc, #216]	; (8008e68 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d01d      	beq.n	8008dce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a35      	ldr	r2, [pc, #212]	; (8008e6c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d018      	beq.n	8008dce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a33      	ldr	r2, [pc, #204]	; (8008e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d013      	beq.n	8008dce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a32      	ldr	r2, [pc, #200]	; (8008e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d00e      	beq.n	8008dce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a30      	ldr	r2, [pc, #192]	; (8008e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d009      	beq.n	8008dce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a2f      	ldr	r2, [pc, #188]	; (8008e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d004      	beq.n	8008dce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a2d      	ldr	r2, [pc, #180]	; (8008e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d101      	bne.n	8008dd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e000      	b.n	8008dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d01a      	beq.n	8008e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	3b08      	subs	r3, #8
 8008de0:	4a28      	ldr	r2, [pc, #160]	; (8008e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008de2:	fba2 2303 	umull	r2, r3, r2, r3
 8008de6:	091b      	lsrs	r3, r3, #4
 8008de8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	4b26      	ldr	r3, [pc, #152]	; (8008e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008dee:	4413      	add	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	461a      	mov	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a24      	ldr	r2, [pc, #144]	; (8008e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008dfc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f003 031f 	and.w	r3, r3, #31
 8008e04:	2201      	movs	r2, #1
 8008e06:	409a      	lsls	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008e0c:	e024      	b.n	8008e58 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	3b10      	subs	r3, #16
 8008e16:	4a1e      	ldr	r2, [pc, #120]	; (8008e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008e18:	fba2 2303 	umull	r2, r3, r2, r3
 8008e1c:	091b      	lsrs	r3, r3, #4
 8008e1e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	4a1c      	ldr	r2, [pc, #112]	; (8008e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d806      	bhi.n	8008e36 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	4a1b      	ldr	r2, [pc, #108]	; (8008e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d902      	bls.n	8008e36 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	3308      	adds	r3, #8
 8008e34:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	4b18      	ldr	r3, [pc, #96]	; (8008e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008e3a:	4413      	add	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	461a      	mov	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a16      	ldr	r2, [pc, #88]	; (8008ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008e48:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f003 031f 	and.w	r3, r3, #31
 8008e50:	2201      	movs	r2, #1
 8008e52:	409a      	lsls	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008e58:	bf00      	nop
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	58025408 	.word	0x58025408
 8008e68:	5802541c 	.word	0x5802541c
 8008e6c:	58025430 	.word	0x58025430
 8008e70:	58025444 	.word	0x58025444
 8008e74:	58025458 	.word	0x58025458
 8008e78:	5802546c 	.word	0x5802546c
 8008e7c:	58025480 	.word	0x58025480
 8008e80:	58025494 	.word	0x58025494
 8008e84:	cccccccd 	.word	0xcccccccd
 8008e88:	16009600 	.word	0x16009600
 8008e8c:	58025880 	.word	0x58025880
 8008e90:	aaaaaaab 	.word	0xaaaaaaab
 8008e94:	400204b8 	.word	0x400204b8
 8008e98:	4002040f 	.word	0x4002040f
 8008e9c:	10008200 	.word	0x10008200
 8008ea0:	40020880 	.word	0x40020880

08008ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d04a      	beq.n	8008f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2b08      	cmp	r3, #8
 8008ebe:	d847      	bhi.n	8008f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a25      	ldr	r2, [pc, #148]	; (8008f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d022      	beq.n	8008f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a24      	ldr	r2, [pc, #144]	; (8008f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d01d      	beq.n	8008f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a22      	ldr	r2, [pc, #136]	; (8008f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d018      	beq.n	8008f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a21      	ldr	r2, [pc, #132]	; (8008f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d013      	beq.n	8008f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a1f      	ldr	r2, [pc, #124]	; (8008f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d00e      	beq.n	8008f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a1e      	ldr	r2, [pc, #120]	; (8008f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d009      	beq.n	8008f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a1c      	ldr	r2, [pc, #112]	; (8008f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d004      	beq.n	8008f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a1b      	ldr	r2, [pc, #108]	; (8008f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d101      	bne.n	8008f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008f10:	2301      	movs	r3, #1
 8008f12:	e000      	b.n	8008f16 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008f14:	2300      	movs	r3, #0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00a      	beq.n	8008f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	4b17      	ldr	r3, [pc, #92]	; (8008f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008f1e:	4413      	add	r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	461a      	mov	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a15      	ldr	r2, [pc, #84]	; (8008f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008f2c:	671a      	str	r2, [r3, #112]	; 0x70
 8008f2e:	e009      	b.n	8008f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	4b14      	ldr	r3, [pc, #80]	; (8008f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008f34:	4413      	add	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	461a      	mov	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a11      	ldr	r2, [pc, #68]	; (8008f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008f42:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	2201      	movs	r2, #1
 8008f4a:	409a      	lsls	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008f50:	bf00      	nop
 8008f52:	3714      	adds	r7, #20
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	58025408 	.word	0x58025408
 8008f60:	5802541c 	.word	0x5802541c
 8008f64:	58025430 	.word	0x58025430
 8008f68:	58025444 	.word	0x58025444
 8008f6c:	58025458 	.word	0x58025458
 8008f70:	5802546c 	.word	0x5802546c
 8008f74:	58025480 	.word	0x58025480
 8008f78:	58025494 	.word	0x58025494
 8008f7c:	1600963f 	.word	0x1600963f
 8008f80:	58025940 	.word	0x58025940
 8008f84:	1000823f 	.word	0x1000823f
 8008f88:	40020940 	.word	0x40020940

08008f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b089      	sub	sp, #36	; 0x24
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008f9a:	4b89      	ldr	r3, [pc, #548]	; (80091c0 <HAL_GPIO_Init+0x234>)
 8008f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f9e:	e194      	b.n	80092ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fac:	4013      	ands	r3, r2
 8008fae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f000 8186 	beq.w	80092c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f003 0303 	and.w	r3, r3, #3
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d005      	beq.n	8008fd0 <HAL_GPIO_Init+0x44>
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f003 0303 	and.w	r3, r3, #3
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d130      	bne.n	8009032 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	005b      	lsls	r3, r3, #1
 8008fda:	2203      	movs	r2, #3
 8008fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe0:	43db      	mvns	r3, r3
 8008fe2:	69ba      	ldr	r2, [r7, #24]
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	68da      	ldr	r2, [r3, #12]
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	005b      	lsls	r3, r3, #1
 8008ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	69ba      	ldr	r2, [r7, #24]
 8008ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009006:	2201      	movs	r2, #1
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	fa02 f303 	lsl.w	r3, r2, r3
 800900e:	43db      	mvns	r3, r3
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	4013      	ands	r3, r2
 8009014:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	091b      	lsrs	r3, r3, #4
 800901c:	f003 0201 	and.w	r2, r3, #1
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	fa02 f303 	lsl.w	r3, r2, r3
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	4313      	orrs	r3, r2
 800902a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	69ba      	ldr	r2, [r7, #24]
 8009030:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f003 0303 	and.w	r3, r3, #3
 800903a:	2b03      	cmp	r3, #3
 800903c:	d017      	beq.n	800906e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	005b      	lsls	r3, r3, #1
 8009048:	2203      	movs	r2, #3
 800904a:	fa02 f303 	lsl.w	r3, r2, r3
 800904e:	43db      	mvns	r3, r3
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	4013      	ands	r3, r2
 8009054:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	689a      	ldr	r2, [r3, #8]
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	005b      	lsls	r3, r3, #1
 800905e:	fa02 f303 	lsl.w	r3, r2, r3
 8009062:	69ba      	ldr	r2, [r7, #24]
 8009064:	4313      	orrs	r3, r2
 8009066:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	69ba      	ldr	r2, [r7, #24]
 800906c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f003 0303 	and.w	r3, r3, #3
 8009076:	2b02      	cmp	r3, #2
 8009078:	d123      	bne.n	80090c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	08da      	lsrs	r2, r3, #3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	3208      	adds	r2, #8
 8009082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	f003 0307 	and.w	r3, r3, #7
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	220f      	movs	r2, #15
 8009092:	fa02 f303 	lsl.w	r3, r2, r3
 8009096:	43db      	mvns	r3, r3
 8009098:	69ba      	ldr	r2, [r7, #24]
 800909a:	4013      	ands	r3, r2
 800909c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	691a      	ldr	r2, [r3, #16]
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	f003 0307 	and.w	r3, r3, #7
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	fa02 f303 	lsl.w	r3, r2, r3
 80090ae:	69ba      	ldr	r2, [r7, #24]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	08da      	lsrs	r2, r3, #3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	3208      	adds	r2, #8
 80090bc:	69b9      	ldr	r1, [r7, #24]
 80090be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	005b      	lsls	r3, r3, #1
 80090cc:	2203      	movs	r2, #3
 80090ce:	fa02 f303 	lsl.w	r3, r2, r3
 80090d2:	43db      	mvns	r3, r3
 80090d4:	69ba      	ldr	r2, [r7, #24]
 80090d6:	4013      	ands	r3, r2
 80090d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f003 0203 	and.w	r2, r3, #3
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	fa02 f303 	lsl.w	r3, r2, r3
 80090ea:	69ba      	ldr	r2, [r7, #24]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	69ba      	ldr	r2, [r7, #24]
 80090f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f000 80e0 	beq.w	80092c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009104:	4b2f      	ldr	r3, [pc, #188]	; (80091c4 <HAL_GPIO_Init+0x238>)
 8009106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800910a:	4a2e      	ldr	r2, [pc, #184]	; (80091c4 <HAL_GPIO_Init+0x238>)
 800910c:	f043 0302 	orr.w	r3, r3, #2
 8009110:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009114:	4b2b      	ldr	r3, [pc, #172]	; (80091c4 <HAL_GPIO_Init+0x238>)
 8009116:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800911a:	f003 0302 	and.w	r3, r3, #2
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009122:	4a29      	ldr	r2, [pc, #164]	; (80091c8 <HAL_GPIO_Init+0x23c>)
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	089b      	lsrs	r3, r3, #2
 8009128:	3302      	adds	r3, #2
 800912a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800912e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	f003 0303 	and.w	r3, r3, #3
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	220f      	movs	r2, #15
 800913a:	fa02 f303 	lsl.w	r3, r2, r3
 800913e:	43db      	mvns	r3, r3
 8009140:	69ba      	ldr	r2, [r7, #24]
 8009142:	4013      	ands	r3, r2
 8009144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a20      	ldr	r2, [pc, #128]	; (80091cc <HAL_GPIO_Init+0x240>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d052      	beq.n	80091f4 <HAL_GPIO_Init+0x268>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a1f      	ldr	r2, [pc, #124]	; (80091d0 <HAL_GPIO_Init+0x244>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d031      	beq.n	80091ba <HAL_GPIO_Init+0x22e>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a1e      	ldr	r2, [pc, #120]	; (80091d4 <HAL_GPIO_Init+0x248>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d02b      	beq.n	80091b6 <HAL_GPIO_Init+0x22a>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a1d      	ldr	r2, [pc, #116]	; (80091d8 <HAL_GPIO_Init+0x24c>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d025      	beq.n	80091b2 <HAL_GPIO_Init+0x226>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a1c      	ldr	r2, [pc, #112]	; (80091dc <HAL_GPIO_Init+0x250>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d01f      	beq.n	80091ae <HAL_GPIO_Init+0x222>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a1b      	ldr	r2, [pc, #108]	; (80091e0 <HAL_GPIO_Init+0x254>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d019      	beq.n	80091aa <HAL_GPIO_Init+0x21e>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a1a      	ldr	r2, [pc, #104]	; (80091e4 <HAL_GPIO_Init+0x258>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d013      	beq.n	80091a6 <HAL_GPIO_Init+0x21a>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a19      	ldr	r2, [pc, #100]	; (80091e8 <HAL_GPIO_Init+0x25c>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d00d      	beq.n	80091a2 <HAL_GPIO_Init+0x216>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a18      	ldr	r2, [pc, #96]	; (80091ec <HAL_GPIO_Init+0x260>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d007      	beq.n	800919e <HAL_GPIO_Init+0x212>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a17      	ldr	r2, [pc, #92]	; (80091f0 <HAL_GPIO_Init+0x264>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d101      	bne.n	800919a <HAL_GPIO_Init+0x20e>
 8009196:	2309      	movs	r3, #9
 8009198:	e02d      	b.n	80091f6 <HAL_GPIO_Init+0x26a>
 800919a:	230a      	movs	r3, #10
 800919c:	e02b      	b.n	80091f6 <HAL_GPIO_Init+0x26a>
 800919e:	2308      	movs	r3, #8
 80091a0:	e029      	b.n	80091f6 <HAL_GPIO_Init+0x26a>
 80091a2:	2307      	movs	r3, #7
 80091a4:	e027      	b.n	80091f6 <HAL_GPIO_Init+0x26a>
 80091a6:	2306      	movs	r3, #6
 80091a8:	e025      	b.n	80091f6 <HAL_GPIO_Init+0x26a>
 80091aa:	2305      	movs	r3, #5
 80091ac:	e023      	b.n	80091f6 <HAL_GPIO_Init+0x26a>
 80091ae:	2304      	movs	r3, #4
 80091b0:	e021      	b.n	80091f6 <HAL_GPIO_Init+0x26a>
 80091b2:	2303      	movs	r3, #3
 80091b4:	e01f      	b.n	80091f6 <HAL_GPIO_Init+0x26a>
 80091b6:	2302      	movs	r3, #2
 80091b8:	e01d      	b.n	80091f6 <HAL_GPIO_Init+0x26a>
 80091ba:	2301      	movs	r3, #1
 80091bc:	e01b      	b.n	80091f6 <HAL_GPIO_Init+0x26a>
 80091be:	bf00      	nop
 80091c0:	58000080 	.word	0x58000080
 80091c4:	58024400 	.word	0x58024400
 80091c8:	58000400 	.word	0x58000400
 80091cc:	58020000 	.word	0x58020000
 80091d0:	58020400 	.word	0x58020400
 80091d4:	58020800 	.word	0x58020800
 80091d8:	58020c00 	.word	0x58020c00
 80091dc:	58021000 	.word	0x58021000
 80091e0:	58021400 	.word	0x58021400
 80091e4:	58021800 	.word	0x58021800
 80091e8:	58021c00 	.word	0x58021c00
 80091ec:	58022000 	.word	0x58022000
 80091f0:	58022400 	.word	0x58022400
 80091f4:	2300      	movs	r3, #0
 80091f6:	69fa      	ldr	r2, [r7, #28]
 80091f8:	f002 0203 	and.w	r2, r2, #3
 80091fc:	0092      	lsls	r2, r2, #2
 80091fe:	4093      	lsls	r3, r2
 8009200:	69ba      	ldr	r2, [r7, #24]
 8009202:	4313      	orrs	r3, r2
 8009204:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009206:	4938      	ldr	r1, [pc, #224]	; (80092e8 <HAL_GPIO_Init+0x35c>)
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	089b      	lsrs	r3, r3, #2
 800920c:	3302      	adds	r3, #2
 800920e:	69ba      	ldr	r2, [r7, #24]
 8009210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	43db      	mvns	r3, r3
 8009220:	69ba      	ldr	r2, [r7, #24]
 8009222:	4013      	ands	r3, r2
 8009224:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009232:	69ba      	ldr	r2, [r7, #24]
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	4313      	orrs	r3, r2
 8009238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800923a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	43db      	mvns	r3, r3
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	4013      	ands	r3, r2
 8009252:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800925c:	2b00      	cmp	r3, #0
 800925e:	d003      	beq.n	8009268 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009260:	69ba      	ldr	r2, [r7, #24]
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	4313      	orrs	r3, r2
 8009266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	43db      	mvns	r3, r3
 800927a:	69ba      	ldr	r2, [r7, #24]
 800927c:	4013      	ands	r3, r2
 800927e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d003      	beq.n	8009294 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800928c:	69ba      	ldr	r2, [r7, #24]
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	4313      	orrs	r3, r2
 8009292:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	69ba      	ldr	r2, [r7, #24]
 8009298:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	43db      	mvns	r3, r3
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	4013      	ands	r3, r2
 80092a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d003      	beq.n	80092be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80092b6:	69ba      	ldr	r2, [r7, #24]
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	69ba      	ldr	r2, [r7, #24]
 80092c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	3301      	adds	r3, #1
 80092c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	fa22 f303 	lsr.w	r3, r2, r3
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f47f ae63 	bne.w	8008fa0 <HAL_GPIO_Init+0x14>
  }
}
 80092da:	bf00      	nop
 80092dc:	bf00      	nop
 80092de:	3724      	adds	r7, #36	; 0x24
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	58000400 	.word	0x58000400

080092ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	460b      	mov	r3, r1
 80092f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	691a      	ldr	r2, [r3, #16]
 80092fc:	887b      	ldrh	r3, [r7, #2]
 80092fe:	4013      	ands	r3, r2
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009304:	2301      	movs	r3, #1
 8009306:	73fb      	strb	r3, [r7, #15]
 8009308:	e001      	b.n	800930e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800930a:	2300      	movs	r3, #0
 800930c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800930e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3714      	adds	r7, #20
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	807b      	strh	r3, [r7, #2]
 8009328:	4613      	mov	r3, r2
 800932a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800932c:	787b      	ldrb	r3, [r7, #1]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009332:	887a      	ldrh	r2, [r7, #2]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009338:	e003      	b.n	8009342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800933a:	887b      	ldrh	r3, [r7, #2]
 800933c:	041a      	lsls	r2, r3, #16
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	619a      	str	r2, [r3, #24]
}
 8009342:	bf00      	nop
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
	...

08009350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e08b      	b.n	800947a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d106      	bne.n	800937c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7fa f8f0 	bl	800355c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2224      	movs	r2, #36	; 0x24
 8009380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f022 0201 	bic.w	r2, r2, #1
 8009392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80093a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689a      	ldr	r2, [r3, #8]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d107      	bne.n	80093ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	689a      	ldr	r2, [r3, #8]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093c6:	609a      	str	r2, [r3, #8]
 80093c8:	e006      	b.n	80093d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	689a      	ldr	r2, [r3, #8]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80093d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d108      	bne.n	80093f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093ee:	605a      	str	r2, [r3, #4]
 80093f0:	e007      	b.n	8009402 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009400:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	6859      	ldr	r1, [r3, #4]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	4b1d      	ldr	r3, [pc, #116]	; (8009484 <HAL_I2C_Init+0x134>)
 800940e:	430b      	orrs	r3, r1
 8009410:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009420:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	691a      	ldr	r2, [r3, #16]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	430a      	orrs	r2, r1
 800943a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	69d9      	ldr	r1, [r3, #28]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a1a      	ldr	r2, [r3, #32]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	430a      	orrs	r2, r1
 800944a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f042 0201 	orr.w	r2, r2, #1
 800945a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2220      	movs	r2, #32
 8009466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2200      	movs	r2, #0
 800946e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	02008000 	.word	0x02008000

08009488 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b088      	sub	sp, #32
 800948c:	af02      	add	r7, sp, #8
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	607a      	str	r2, [r7, #4]
 8009492:	461a      	mov	r2, r3
 8009494:	460b      	mov	r3, r1
 8009496:	817b      	strh	r3, [r7, #10]
 8009498:	4613      	mov	r3, r2
 800949a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b20      	cmp	r3, #32
 80094a6:	f040 80fd 	bne.w	80096a4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d101      	bne.n	80094b8 <HAL_I2C_Master_Transmit+0x30>
 80094b4:	2302      	movs	r3, #2
 80094b6:	e0f6      	b.n	80096a6 <HAL_I2C_Master_Transmit+0x21e>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80094c0:	f7fa fdf4 	bl	80040ac <HAL_GetTick>
 80094c4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	2319      	movs	r3, #25
 80094cc:	2201      	movs	r2, #1
 80094ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f000 fa0a 	bl	80098ec <I2C_WaitOnFlagUntilTimeout>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e0e1      	b.n	80096a6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2221      	movs	r2, #33	; 0x21
 80094e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2210      	movs	r2, #16
 80094ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	893a      	ldrh	r2, [r7, #8]
 8009502:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800950e:	b29b      	uxth	r3, r3
 8009510:	2bff      	cmp	r3, #255	; 0xff
 8009512:	d906      	bls.n	8009522 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	22ff      	movs	r2, #255	; 0xff
 8009518:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800951a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800951e:	617b      	str	r3, [r7, #20]
 8009520:	e007      	b.n	8009532 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009526:	b29a      	uxth	r2, r3
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800952c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009530:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009536:	2b00      	cmp	r3, #0
 8009538:	d024      	beq.n	8009584 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953e:	781a      	ldrb	r2, [r3, #0]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954a:	1c5a      	adds	r2, r3, #1
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009554:	b29b      	uxth	r3, r3
 8009556:	3b01      	subs	r3, #1
 8009558:	b29a      	uxth	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009562:	3b01      	subs	r3, #1
 8009564:	b29a      	uxth	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800956e:	b2db      	uxtb	r3, r3
 8009570:	3301      	adds	r3, #1
 8009572:	b2da      	uxtb	r2, r3
 8009574:	8979      	ldrh	r1, [r7, #10]
 8009576:	4b4e      	ldr	r3, [pc, #312]	; (80096b0 <HAL_I2C_Master_Transmit+0x228>)
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f000 fc05 	bl	8009d8c <I2C_TransferConfig>
 8009582:	e066      	b.n	8009652 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009588:	b2da      	uxtb	r2, r3
 800958a:	8979      	ldrh	r1, [r7, #10]
 800958c:	4b48      	ldr	r3, [pc, #288]	; (80096b0 <HAL_I2C_Master_Transmit+0x228>)
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f000 fbfa 	bl	8009d8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009598:	e05b      	b.n	8009652 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	6a39      	ldr	r1, [r7, #32]
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f000 f9fd 	bl	800999e <I2C_WaitOnTXISFlagUntilTimeout>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e07b      	b.n	80096a6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b2:	781a      	ldrb	r2, [r3, #0]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095be:	1c5a      	adds	r2, r3, #1
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	3b01      	subs	r3, #1
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d6:	3b01      	subs	r3, #1
 80095d8:	b29a      	uxth	r2, r3
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d034      	beq.n	8009652 <HAL_I2C_Master_Transmit+0x1ca>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d130      	bne.n	8009652 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	6a3b      	ldr	r3, [r7, #32]
 80095f6:	2200      	movs	r2, #0
 80095f8:	2180      	movs	r1, #128	; 0x80
 80095fa:	68f8      	ldr	r0, [r7, #12]
 80095fc:	f000 f976 	bl	80098ec <I2C_WaitOnFlagUntilTimeout>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e04d      	b.n	80096a6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800960e:	b29b      	uxth	r3, r3
 8009610:	2bff      	cmp	r3, #255	; 0xff
 8009612:	d90e      	bls.n	8009632 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	22ff      	movs	r2, #255	; 0xff
 8009618:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800961e:	b2da      	uxtb	r2, r3
 8009620:	8979      	ldrh	r1, [r7, #10]
 8009622:	2300      	movs	r3, #0
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f000 fbae 	bl	8009d8c <I2C_TransferConfig>
 8009630:	e00f      	b.n	8009652 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009636:	b29a      	uxth	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009640:	b2da      	uxtb	r2, r3
 8009642:	8979      	ldrh	r1, [r7, #10]
 8009644:	2300      	movs	r3, #0
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f000 fb9d 	bl	8009d8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009656:	b29b      	uxth	r3, r3
 8009658:	2b00      	cmp	r3, #0
 800965a:	d19e      	bne.n	800959a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	6a39      	ldr	r1, [r7, #32]
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f000 f9e3 	bl	8009a2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e01a      	b.n	80096a6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2220      	movs	r2, #32
 8009676:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	6859      	ldr	r1, [r3, #4]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	4b0c      	ldr	r3, [pc, #48]	; (80096b4 <HAL_I2C_Master_Transmit+0x22c>)
 8009684:	400b      	ands	r3, r1
 8009686:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2220      	movs	r2, #32
 800968c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	e000      	b.n	80096a6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80096a4:	2302      	movs	r3, #2
  }
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	80002000 	.word	0x80002000
 80096b4:	fe00e800 	.word	0xfe00e800

080096b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af02      	add	r7, sp, #8
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	607a      	str	r2, [r7, #4]
 80096c2:	461a      	mov	r2, r3
 80096c4:	460b      	mov	r3, r1
 80096c6:	817b      	strh	r3, [r7, #10]
 80096c8:	4613      	mov	r3, r2
 80096ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	2b20      	cmp	r3, #32
 80096d6:	f040 80db 	bne.w	8009890 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d101      	bne.n	80096e8 <HAL_I2C_Master_Receive+0x30>
 80096e4:	2302      	movs	r3, #2
 80096e6:	e0d4      	b.n	8009892 <HAL_I2C_Master_Receive+0x1da>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80096f0:	f7fa fcdc 	bl	80040ac <HAL_GetTick>
 80096f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	2319      	movs	r3, #25
 80096fc:	2201      	movs	r2, #1
 80096fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 f8f2 	bl	80098ec <I2C_WaitOnFlagUntilTimeout>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e0bf      	b.n	8009892 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2222      	movs	r2, #34	; 0x22
 8009716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2210      	movs	r2, #16
 800971e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	893a      	ldrh	r2, [r7, #8]
 8009732:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800973e:	b29b      	uxth	r3, r3
 8009740:	2bff      	cmp	r3, #255	; 0xff
 8009742:	d90e      	bls.n	8009762 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	22ff      	movs	r2, #255	; 0xff
 8009748:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800974e:	b2da      	uxtb	r2, r3
 8009750:	8979      	ldrh	r1, [r7, #10]
 8009752:	4b52      	ldr	r3, [pc, #328]	; (800989c <HAL_I2C_Master_Receive+0x1e4>)
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 fb16 	bl	8009d8c <I2C_TransferConfig>
 8009760:	e06d      	b.n	800983e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009766:	b29a      	uxth	r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009770:	b2da      	uxtb	r2, r3
 8009772:	8979      	ldrh	r1, [r7, #10]
 8009774:	4b49      	ldr	r3, [pc, #292]	; (800989c <HAL_I2C_Master_Receive+0x1e4>)
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f000 fb05 	bl	8009d8c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009782:	e05c      	b.n	800983e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	6a39      	ldr	r1, [r7, #32]
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f000 f993 	bl	8009ab4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e07c      	b.n	8009892 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a2:	b2d2      	uxtb	r2, r2
 80097a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b4:	3b01      	subs	r3, #1
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	3b01      	subs	r3, #1
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d034      	beq.n	800983e <HAL_I2C_Master_Receive+0x186>
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d130      	bne.n	800983e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	6a3b      	ldr	r3, [r7, #32]
 80097e2:	2200      	movs	r2, #0
 80097e4:	2180      	movs	r1, #128	; 0x80
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 f880 	bl	80098ec <I2C_WaitOnFlagUntilTimeout>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d001      	beq.n	80097f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e04d      	b.n	8009892 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	2bff      	cmp	r3, #255	; 0xff
 80097fe:	d90e      	bls.n	800981e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	22ff      	movs	r2, #255	; 0xff
 8009804:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800980a:	b2da      	uxtb	r2, r3
 800980c:	8979      	ldrh	r1, [r7, #10]
 800980e:	2300      	movs	r3, #0
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 fab8 	bl	8009d8c <I2C_TransferConfig>
 800981c:	e00f      	b.n	800983e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009822:	b29a      	uxth	r2, r3
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800982c:	b2da      	uxtb	r2, r3
 800982e:	8979      	ldrh	r1, [r7, #10]
 8009830:	2300      	movs	r3, #0
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f000 faa7 	bl	8009d8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009842:	b29b      	uxth	r3, r3
 8009844:	2b00      	cmp	r3, #0
 8009846:	d19d      	bne.n	8009784 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	6a39      	ldr	r1, [r7, #32]
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	f000 f8ed 	bl	8009a2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d001      	beq.n	800985c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	e01a      	b.n	8009892 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2220      	movs	r2, #32
 8009862:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6859      	ldr	r1, [r3, #4]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	4b0c      	ldr	r3, [pc, #48]	; (80098a0 <HAL_I2C_Master_Receive+0x1e8>)
 8009870:	400b      	ands	r3, r1
 8009872:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2220      	movs	r2, #32
 8009878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800988c:	2300      	movs	r3, #0
 800988e:	e000      	b.n	8009892 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009890:	2302      	movs	r3, #2
  }
}
 8009892:	4618      	mov	r0, r3
 8009894:	3718      	adds	r7, #24
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	80002400 	.word	0x80002400
 80098a0:	fe00e800 	.word	0xfe00e800

080098a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	f003 0302 	and.w	r3, r3, #2
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d103      	bne.n	80098c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2200      	movs	r2, #0
 80098c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	f003 0301 	and.w	r3, r3, #1
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d007      	beq.n	80098e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	699a      	ldr	r2, [r3, #24]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f042 0201 	orr.w	r2, r2, #1
 80098de:	619a      	str	r2, [r3, #24]
  }
}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	603b      	str	r3, [r7, #0]
 80098f8:	4613      	mov	r3, r2
 80098fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098fc:	e03b      	b.n	8009976 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098fe:	69ba      	ldr	r2, [r7, #24]
 8009900:	6839      	ldr	r1, [r7, #0]
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 f962 	bl	8009bcc <I2C_IsErrorOccurred>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e041      	b.n	8009996 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009918:	d02d      	beq.n	8009976 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800991a:	f7fa fbc7 	bl	80040ac <HAL_GetTick>
 800991e:	4602      	mov	r2, r0
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	1ad3      	subs	r3, r2, r3
 8009924:	683a      	ldr	r2, [r7, #0]
 8009926:	429a      	cmp	r2, r3
 8009928:	d302      	bcc.n	8009930 <I2C_WaitOnFlagUntilTimeout+0x44>
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d122      	bne.n	8009976 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	699a      	ldr	r2, [r3, #24]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	4013      	ands	r3, r2
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	429a      	cmp	r2, r3
 800993e:	bf0c      	ite	eq
 8009940:	2301      	moveq	r3, #1
 8009942:	2300      	movne	r3, #0
 8009944:	b2db      	uxtb	r3, r3
 8009946:	461a      	mov	r2, r3
 8009948:	79fb      	ldrb	r3, [r7, #7]
 800994a:	429a      	cmp	r2, r3
 800994c:	d113      	bne.n	8009976 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009952:	f043 0220 	orr.w	r2, r3, #32
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2220      	movs	r2, #32
 800995e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e00f      	b.n	8009996 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	699a      	ldr	r2, [r3, #24]
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	4013      	ands	r3, r2
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	429a      	cmp	r2, r3
 8009984:	bf0c      	ite	eq
 8009986:	2301      	moveq	r3, #1
 8009988:	2300      	movne	r3, #0
 800998a:	b2db      	uxtb	r3, r3
 800998c:	461a      	mov	r2, r3
 800998e:	79fb      	ldrb	r3, [r7, #7]
 8009990:	429a      	cmp	r2, r3
 8009992:	d0b4      	beq.n	80098fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b084      	sub	sp, #16
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	60f8      	str	r0, [r7, #12]
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80099aa:	e033      	b.n	8009a14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	68b9      	ldr	r1, [r7, #8]
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 f90b 	bl	8009bcc <I2C_IsErrorOccurred>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e031      	b.n	8009a24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099c6:	d025      	beq.n	8009a14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099c8:	f7fa fb70 	bl	80040ac <HAL_GetTick>
 80099cc:	4602      	mov	r2, r0
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	1ad3      	subs	r3, r2, r3
 80099d2:	68ba      	ldr	r2, [r7, #8]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d302      	bcc.n	80099de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d11a      	bne.n	8009a14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	f003 0302 	and.w	r3, r3, #2
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d013      	beq.n	8009a14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099f0:	f043 0220 	orr.w	r2, r3, #32
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2220      	movs	r2, #32
 80099fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e007      	b.n	8009a24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	f003 0302 	and.w	r3, r3, #2
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d1c4      	bne.n	80099ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a38:	e02f      	b.n	8009a9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	68b9      	ldr	r1, [r7, #8]
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 f8c4 	bl	8009bcc <I2C_IsErrorOccurred>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e02d      	b.n	8009aaa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a4e:	f7fa fb2d 	bl	80040ac <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	68ba      	ldr	r2, [r7, #8]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d302      	bcc.n	8009a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d11a      	bne.n	8009a9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	f003 0320 	and.w	r3, r3, #32
 8009a6e:	2b20      	cmp	r3, #32
 8009a70:	d013      	beq.n	8009a9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a76:	f043 0220 	orr.w	r2, r3, #32
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2220      	movs	r2, #32
 8009a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e007      	b.n	8009aaa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	699b      	ldr	r3, [r3, #24]
 8009aa0:	f003 0320 	and.w	r3, r3, #32
 8009aa4:	2b20      	cmp	r3, #32
 8009aa6:	d1c8      	bne.n	8009a3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
	...

08009ab4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b086      	sub	sp, #24
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009ac4:	e071      	b.n	8009baa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	68b9      	ldr	r1, [r7, #8]
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f000 f87e 	bl	8009bcc <I2C_IsErrorOccurred>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	f003 0320 	and.w	r3, r3, #32
 8009ae4:	2b20      	cmp	r3, #32
 8009ae6:	d13b      	bne.n	8009b60 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009ae8:	7dfb      	ldrb	r3, [r7, #23]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d138      	bne.n	8009b60 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	f003 0304 	and.w	r3, r3, #4
 8009af8:	2b04      	cmp	r3, #4
 8009afa:	d105      	bne.n	8009b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	f003 0310 	and.w	r3, r3, #16
 8009b12:	2b10      	cmp	r3, #16
 8009b14:	d121      	bne.n	8009b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2210      	movs	r2, #16
 8009b1c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2204      	movs	r2, #4
 8009b22:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2220      	movs	r2, #32
 8009b2a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6859      	ldr	r1, [r3, #4]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	4b24      	ldr	r3, [pc, #144]	; (8009bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009b38:	400b      	ands	r3, r1
 8009b3a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2220      	movs	r2, #32
 8009b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	75fb      	strb	r3, [r7, #23]
 8009b58:	e002      	b.n	8009b60 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009b60:	f7fa faa4 	bl	80040ac <HAL_GetTick>
 8009b64:	4602      	mov	r2, r0
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d302      	bcc.n	8009b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d119      	bne.n	8009baa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009b76:	7dfb      	ldrb	r3, [r7, #23]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d116      	bne.n	8009baa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	699b      	ldr	r3, [r3, #24]
 8009b82:	f003 0304 	and.w	r3, r3, #4
 8009b86:	2b04      	cmp	r3, #4
 8009b88:	d00f      	beq.n	8009baa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b8e:	f043 0220 	orr.w	r2, r3, #32
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2220      	movs	r2, #32
 8009b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	f003 0304 	and.w	r3, r3, #4
 8009bb4:	2b04      	cmp	r3, #4
 8009bb6:	d002      	beq.n	8009bbe <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d083      	beq.n	8009ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3718      	adds	r7, #24
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	fe00e800 	.word	0xfe00e800

08009bcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b08a      	sub	sp, #40	; 0x28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009be6:	2300      	movs	r3, #0
 8009be8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	f003 0310 	and.w	r3, r3, #16
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d068      	beq.n	8009cca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2210      	movs	r2, #16
 8009bfe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c00:	e049      	b.n	8009c96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c08:	d045      	beq.n	8009c96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009c0a:	f7fa fa4f 	bl	80040ac <HAL_GetTick>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	1ad3      	subs	r3, r2, r3
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d302      	bcc.n	8009c20 <I2C_IsErrorOccurred+0x54>
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d13a      	bne.n	8009c96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c42:	d121      	bne.n	8009c88 <I2C_IsErrorOccurred+0xbc>
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c4a:	d01d      	beq.n	8009c88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009c4c:	7cfb      	ldrb	r3, [r7, #19]
 8009c4e:	2b20      	cmp	r3, #32
 8009c50:	d01a      	beq.n	8009c88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009c62:	f7fa fa23 	bl	80040ac <HAL_GetTick>
 8009c66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c68:	e00e      	b.n	8009c88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009c6a:	f7fa fa1f 	bl	80040ac <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	2b19      	cmp	r3, #25
 8009c76:	d907      	bls.n	8009c88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009c78:	6a3b      	ldr	r3, [r7, #32]
 8009c7a:	f043 0320 	orr.w	r3, r3, #32
 8009c7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009c86:	e006      	b.n	8009c96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	699b      	ldr	r3, [r3, #24]
 8009c8e:	f003 0320 	and.w	r3, r3, #32
 8009c92:	2b20      	cmp	r3, #32
 8009c94:	d1e9      	bne.n	8009c6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	f003 0320 	and.w	r3, r3, #32
 8009ca0:	2b20      	cmp	r3, #32
 8009ca2:	d003      	beq.n	8009cac <I2C_IsErrorOccurred+0xe0>
 8009ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d0aa      	beq.n	8009c02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d103      	bne.n	8009cbc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2220      	movs	r2, #32
 8009cba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009cbc:	6a3b      	ldr	r3, [r7, #32]
 8009cbe:	f043 0304 	orr.w	r3, r3, #4
 8009cc2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00b      	beq.n	8009cf4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	f043 0301 	orr.w	r3, r3, #1
 8009ce2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00b      	beq.n	8009d16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	f043 0308 	orr.w	r3, r3, #8
 8009d04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d00b      	beq.n	8009d38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	f043 0302 	orr.w	r3, r3, #2
 8009d26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d01c      	beq.n	8009d7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f7ff fdaf 	bl	80098a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	6859      	ldr	r1, [r3, #4]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	4b0d      	ldr	r3, [pc, #52]	; (8009d88 <I2C_IsErrorOccurred+0x1bc>)
 8009d52:	400b      	ands	r3, r1
 8009d54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	431a      	orrs	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2220      	movs	r2, #32
 8009d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3728      	adds	r7, #40	; 0x28
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	fe00e800 	.word	0xfe00e800

08009d8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b087      	sub	sp, #28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	607b      	str	r3, [r7, #4]
 8009d96:	460b      	mov	r3, r1
 8009d98:	817b      	strh	r3, [r7, #10]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d9e:	897b      	ldrh	r3, [r7, #10]
 8009da0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009da4:	7a7b      	ldrb	r3, [r7, #9]
 8009da6:	041b      	lsls	r3, r3, #16
 8009da8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009dac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009db2:	6a3b      	ldr	r3, [r7, #32]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	6a3b      	ldr	r3, [r7, #32]
 8009dc4:	0d5b      	lsrs	r3, r3, #21
 8009dc6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009dca:	4b08      	ldr	r3, [pc, #32]	; (8009dec <I2C_TransferConfig+0x60>)
 8009dcc:	430b      	orrs	r3, r1
 8009dce:	43db      	mvns	r3, r3
 8009dd0:	ea02 0103 	and.w	r1, r2, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	697a      	ldr	r2, [r7, #20]
 8009dda:	430a      	orrs	r2, r1
 8009ddc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009dde:	bf00      	nop
 8009de0:	371c      	adds	r7, #28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	03ff63ff 	.word	0x03ff63ff

08009df0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b20      	cmp	r3, #32
 8009e04:	d138      	bne.n	8009e78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d101      	bne.n	8009e14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009e10:	2302      	movs	r3, #2
 8009e12:	e032      	b.n	8009e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2224      	movs	r2, #36	; 0x24
 8009e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f022 0201 	bic.w	r2, r2, #1
 8009e32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6819      	ldr	r1, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	430a      	orrs	r2, r1
 8009e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f042 0201 	orr.w	r2, r2, #1
 8009e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2220      	movs	r2, #32
 8009e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	e000      	b.n	8009e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009e78:	2302      	movs	r3, #2
  }
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	370c      	adds	r7, #12
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e86:	b480      	push	{r7}
 8009e88:	b085      	sub	sp, #20
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	2b20      	cmp	r3, #32
 8009e9a:	d139      	bne.n	8009f10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d101      	bne.n	8009eaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009ea6:	2302      	movs	r3, #2
 8009ea8:	e033      	b.n	8009f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2201      	movs	r2, #1
 8009eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2224      	movs	r2, #36	; 0x24
 8009eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f022 0201 	bic.w	r2, r2, #1
 8009ec8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009ed8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	021b      	lsls	r3, r3, #8
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f042 0201 	orr.w	r2, r2, #1
 8009efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2220      	movs	r2, #32
 8009f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	e000      	b.n	8009f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009f10:	2302      	movs	r3, #2
  }
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
	...

08009f20 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f28:	4b0d      	ldr	r3, [pc, #52]	; (8009f60 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f2e:	4a0c      	ldr	r2, [pc, #48]	; (8009f60 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f30:	f043 0302 	orr.w	r3, r3, #2
 8009f34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009f38:	4b09      	ldr	r3, [pc, #36]	; (8009f60 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009f3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f3e:	f003 0302 	and.w	r3, r3, #2
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009f46:	4b07      	ldr	r3, [pc, #28]	; (8009f64 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009f48:	685a      	ldr	r2, [r3, #4]
 8009f4a:	4906      	ldr	r1, [pc, #24]	; (8009f64 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	604b      	str	r3, [r1, #4]
}
 8009f52:	bf00      	nop
 8009f54:	3714      	adds	r7, #20
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	58024400 	.word	0x58024400
 8009f64:	58000400 	.word	0x58000400

08009f68 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8009f74:	4b18      	ldr	r3, [pc, #96]	; (8009fd8 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f023 0201 	bic.w	r2, r3, #1
 8009f7c:	4916      	ldr	r1, [pc, #88]	; (8009fd8 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 8009f84:	4b14      	ldr	r3, [pc, #80]	; (8009fd8 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	4a13      	ldr	r2, [pc, #76]	; (8009fd8 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f8a:	f023 0305 	bic.w	r3, r3, #5
 8009f8e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 8009f90:	4b11      	ldr	r3, [pc, #68]	; (8009fd8 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	4a10      	ldr	r2, [pc, #64]	; (8009fd8 <HAL_PWR_EnterSTOPMode+0x70>)
 8009f96:	f023 0302 	bic.w	r3, r3, #2
 8009f9a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009f9c:	4b0f      	ldr	r3, [pc, #60]	; (8009fdc <HAL_PWR_EnterSTOPMode+0x74>)
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	4a0e      	ldr	r2, [pc, #56]	; (8009fdc <HAL_PWR_EnterSTOPMode+0x74>)
 8009fa2:	f043 0304 	orr.w	r3, r3, #4
 8009fa6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8009fa8:	f3bf 8f4f 	dsb	sy
}
 8009fac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009fae:	f3bf 8f6f 	isb	sy
}
 8009fb2:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009fb4:	78fb      	ldrb	r3, [r7, #3]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d101      	bne.n	8009fbe <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 8009fba:	bf30      	wfi
 8009fbc:	e000      	b.n	8009fc0 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 8009fbe:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8009fc0:	4b06      	ldr	r3, [pc, #24]	; (8009fdc <HAL_PWR_EnterSTOPMode+0x74>)
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	4a05      	ldr	r2, [pc, #20]	; (8009fdc <HAL_PWR_EnterSTOPMode+0x74>)
 8009fc6:	f023 0304 	bic.w	r3, r3, #4
 8009fca:	6113      	str	r3, [r2, #16]
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	58024800 	.word	0x58024800
 8009fdc:	e000ed00 	.word	0xe000ed00

08009fe0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009fe8:	4b19      	ldr	r3, [pc, #100]	; (800a050 <HAL_PWREx_ConfigSupply+0x70>)
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	f003 0304 	and.w	r3, r3, #4
 8009ff0:	2b04      	cmp	r3, #4
 8009ff2:	d00a      	beq.n	800a00a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009ff4:	4b16      	ldr	r3, [pc, #88]	; (800a050 <HAL_PWREx_ConfigSupply+0x70>)
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	f003 0307 	and.w	r3, r3, #7
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d001      	beq.n	800a006 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e01f      	b.n	800a046 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a006:	2300      	movs	r3, #0
 800a008:	e01d      	b.n	800a046 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a00a:	4b11      	ldr	r3, [pc, #68]	; (800a050 <HAL_PWREx_ConfigSupply+0x70>)
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	f023 0207 	bic.w	r2, r3, #7
 800a012:	490f      	ldr	r1, [pc, #60]	; (800a050 <HAL_PWREx_ConfigSupply+0x70>)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4313      	orrs	r3, r2
 800a018:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a01a:	f7fa f847 	bl	80040ac <HAL_GetTick>
 800a01e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a020:	e009      	b.n	800a036 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a022:	f7fa f843 	bl	80040ac <HAL_GetTick>
 800a026:	4602      	mov	r2, r0
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a030:	d901      	bls.n	800a036 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e007      	b.n	800a046 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a036:	4b06      	ldr	r3, [pc, #24]	; (800a050 <HAL_PWREx_ConfigSupply+0x70>)
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a03e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a042:	d1ee      	bne.n	800a022 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	58024800 	.word	0x58024800

0800a054 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b08c      	sub	sp, #48	; 0x30
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d102      	bne.n	800a068 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	f000 bc48 	b.w	800a8f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 0301 	and.w	r3, r3, #1
 800a070:	2b00      	cmp	r3, #0
 800a072:	f000 8088 	beq.w	800a186 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a076:	4b99      	ldr	r3, [pc, #612]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a07e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a080:	4b96      	ldr	r3, [pc, #600]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a084:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a088:	2b10      	cmp	r3, #16
 800a08a:	d007      	beq.n	800a09c <HAL_RCC_OscConfig+0x48>
 800a08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08e:	2b18      	cmp	r3, #24
 800a090:	d111      	bne.n	800a0b6 <HAL_RCC_OscConfig+0x62>
 800a092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a094:	f003 0303 	and.w	r3, r3, #3
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d10c      	bne.n	800a0b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a09c:	4b8f      	ldr	r3, [pc, #572]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d06d      	beq.n	800a184 <HAL_RCC_OscConfig+0x130>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d169      	bne.n	800a184 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	f000 bc21 	b.w	800a8f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0be:	d106      	bne.n	800a0ce <HAL_RCC_OscConfig+0x7a>
 800a0c0:	4b86      	ldr	r3, [pc, #536]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a85      	ldr	r2, [pc, #532]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a0c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0ca:	6013      	str	r3, [r2, #0]
 800a0cc:	e02e      	b.n	800a12c <HAL_RCC_OscConfig+0xd8>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10c      	bne.n	800a0f0 <HAL_RCC_OscConfig+0x9c>
 800a0d6:	4b81      	ldr	r3, [pc, #516]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a80      	ldr	r2, [pc, #512]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a0dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0e0:	6013      	str	r3, [r2, #0]
 800a0e2:	4b7e      	ldr	r3, [pc, #504]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a7d      	ldr	r2, [pc, #500]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a0e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0ec:	6013      	str	r3, [r2, #0]
 800a0ee:	e01d      	b.n	800a12c <HAL_RCC_OscConfig+0xd8>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0f8:	d10c      	bne.n	800a114 <HAL_RCC_OscConfig+0xc0>
 800a0fa:	4b78      	ldr	r3, [pc, #480]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a77      	ldr	r2, [pc, #476]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a104:	6013      	str	r3, [r2, #0]
 800a106:	4b75      	ldr	r3, [pc, #468]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a74      	ldr	r2, [pc, #464]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a10c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a110:	6013      	str	r3, [r2, #0]
 800a112:	e00b      	b.n	800a12c <HAL_RCC_OscConfig+0xd8>
 800a114:	4b71      	ldr	r3, [pc, #452]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a70      	ldr	r2, [pc, #448]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a11a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a11e:	6013      	str	r3, [r2, #0]
 800a120:	4b6e      	ldr	r3, [pc, #440]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a6d      	ldr	r2, [pc, #436]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a12a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d013      	beq.n	800a15c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a134:	f7f9 ffba 	bl	80040ac <HAL_GetTick>
 800a138:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a13a:	e008      	b.n	800a14e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a13c:	f7f9 ffb6 	bl	80040ac <HAL_GetTick>
 800a140:	4602      	mov	r2, r0
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	2b64      	cmp	r3, #100	; 0x64
 800a148:	d901      	bls.n	800a14e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a14a:	2303      	movs	r3, #3
 800a14c:	e3d4      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a14e:	4b63      	ldr	r3, [pc, #396]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a156:	2b00      	cmp	r3, #0
 800a158:	d0f0      	beq.n	800a13c <HAL_RCC_OscConfig+0xe8>
 800a15a:	e014      	b.n	800a186 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a15c:	f7f9 ffa6 	bl	80040ac <HAL_GetTick>
 800a160:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a162:	e008      	b.n	800a176 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a164:	f7f9 ffa2 	bl	80040ac <HAL_GetTick>
 800a168:	4602      	mov	r2, r0
 800a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16c:	1ad3      	subs	r3, r2, r3
 800a16e:	2b64      	cmp	r3, #100	; 0x64
 800a170:	d901      	bls.n	800a176 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a172:	2303      	movs	r3, #3
 800a174:	e3c0      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a176:	4b59      	ldr	r3, [pc, #356]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1f0      	bne.n	800a164 <HAL_RCC_OscConfig+0x110>
 800a182:	e000      	b.n	800a186 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 0302 	and.w	r3, r3, #2
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f000 80ca 	beq.w	800a328 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a194:	4b51      	ldr	r3, [pc, #324]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a19c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a19e:	4b4f      	ldr	r3, [pc, #316]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a1a4:	6a3b      	ldr	r3, [r7, #32]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d007      	beq.n	800a1ba <HAL_RCC_OscConfig+0x166>
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	2b18      	cmp	r3, #24
 800a1ae:	d156      	bne.n	800a25e <HAL_RCC_OscConfig+0x20a>
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	f003 0303 	and.w	r3, r3, #3
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d151      	bne.n	800a25e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a1ba:	4b48      	ldr	r3, [pc, #288]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 0304 	and.w	r3, r3, #4
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <HAL_RCC_OscConfig+0x17e>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e392      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a1d2:	4b42      	ldr	r3, [pc, #264]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f023 0219 	bic.w	r2, r3, #25
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	68db      	ldr	r3, [r3, #12]
 800a1de:	493f      	ldr	r1, [pc, #252]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1e4:	f7f9 ff62 	bl	80040ac <HAL_GetTick>
 800a1e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1ea:	e008      	b.n	800a1fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1ec:	f7f9 ff5e 	bl	80040ac <HAL_GetTick>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f4:	1ad3      	subs	r3, r2, r3
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d901      	bls.n	800a1fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	e37c      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1fe:	4b37      	ldr	r3, [pc, #220]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 0304 	and.w	r3, r3, #4
 800a206:	2b00      	cmp	r3, #0
 800a208:	d0f0      	beq.n	800a1ec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a20a:	f7f9 ff5b 	bl	80040c4 <HAL_GetREVID>
 800a20e:	4603      	mov	r3, r0
 800a210:	f241 0203 	movw	r2, #4099	; 0x1003
 800a214:	4293      	cmp	r3, r2
 800a216:	d817      	bhi.n	800a248 <HAL_RCC_OscConfig+0x1f4>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	2b40      	cmp	r3, #64	; 0x40
 800a21e:	d108      	bne.n	800a232 <HAL_RCC_OscConfig+0x1de>
 800a220:	4b2e      	ldr	r3, [pc, #184]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a228:	4a2c      	ldr	r2, [pc, #176]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a22a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a22e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a230:	e07a      	b.n	800a328 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a232:	4b2a      	ldr	r3, [pc, #168]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	031b      	lsls	r3, r3, #12
 800a240:	4926      	ldr	r1, [pc, #152]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a242:	4313      	orrs	r3, r2
 800a244:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a246:	e06f      	b.n	800a328 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a248:	4b24      	ldr	r3, [pc, #144]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	061b      	lsls	r3, r3, #24
 800a256:	4921      	ldr	r1, [pc, #132]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a258:	4313      	orrs	r3, r2
 800a25a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a25c:	e064      	b.n	800a328 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d047      	beq.n	800a2f6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a266:	4b1d      	ldr	r3, [pc, #116]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f023 0219 	bic.w	r2, r3, #25
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	491a      	ldr	r1, [pc, #104]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a274:	4313      	orrs	r3, r2
 800a276:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a278:	f7f9 ff18 	bl	80040ac <HAL_GetTick>
 800a27c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a27e:	e008      	b.n	800a292 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a280:	f7f9 ff14 	bl	80040ac <HAL_GetTick>
 800a284:	4602      	mov	r2, r0
 800a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d901      	bls.n	800a292 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a28e:	2303      	movs	r3, #3
 800a290:	e332      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a292:	4b12      	ldr	r3, [pc, #72]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 0304 	and.w	r3, r3, #4
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d0f0      	beq.n	800a280 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a29e:	f7f9 ff11 	bl	80040c4 <HAL_GetREVID>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	f241 0203 	movw	r2, #4099	; 0x1003
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d819      	bhi.n	800a2e0 <HAL_RCC_OscConfig+0x28c>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	2b40      	cmp	r3, #64	; 0x40
 800a2b2:	d108      	bne.n	800a2c6 <HAL_RCC_OscConfig+0x272>
 800a2b4:	4b09      	ldr	r3, [pc, #36]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a2bc:	4a07      	ldr	r2, [pc, #28]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a2be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2c2:	6053      	str	r3, [r2, #4]
 800a2c4:	e030      	b.n	800a328 <HAL_RCC_OscConfig+0x2d4>
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	031b      	lsls	r3, r3, #12
 800a2d4:	4901      	ldr	r1, [pc, #4]	; (800a2dc <HAL_RCC_OscConfig+0x288>)
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	604b      	str	r3, [r1, #4]
 800a2da:	e025      	b.n	800a328 <HAL_RCC_OscConfig+0x2d4>
 800a2dc:	58024400 	.word	0x58024400
 800a2e0:	4b9a      	ldr	r3, [pc, #616]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	061b      	lsls	r3, r3, #24
 800a2ee:	4997      	ldr	r1, [pc, #604]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	604b      	str	r3, [r1, #4]
 800a2f4:	e018      	b.n	800a328 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a2f6:	4b95      	ldr	r3, [pc, #596]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a94      	ldr	r2, [pc, #592]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a2fc:	f023 0301 	bic.w	r3, r3, #1
 800a300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a302:	f7f9 fed3 	bl	80040ac <HAL_GetTick>
 800a306:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a308:	e008      	b.n	800a31c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a30a:	f7f9 fecf 	bl	80040ac <HAL_GetTick>
 800a30e:	4602      	mov	r2, r0
 800a310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	2b02      	cmp	r3, #2
 800a316:	d901      	bls.n	800a31c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a318:	2303      	movs	r3, #3
 800a31a:	e2ed      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a31c:	4b8b      	ldr	r3, [pc, #556]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 0304 	and.w	r3, r3, #4
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1f0      	bne.n	800a30a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 0310 	and.w	r3, r3, #16
 800a330:	2b00      	cmp	r3, #0
 800a332:	f000 80a9 	beq.w	800a488 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a336:	4b85      	ldr	r3, [pc, #532]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a33e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a340:	4b82      	ldr	r3, [pc, #520]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a344:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	2b08      	cmp	r3, #8
 800a34a:	d007      	beq.n	800a35c <HAL_RCC_OscConfig+0x308>
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	2b18      	cmp	r3, #24
 800a350:	d13a      	bne.n	800a3c8 <HAL_RCC_OscConfig+0x374>
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f003 0303 	and.w	r3, r3, #3
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d135      	bne.n	800a3c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a35c:	4b7b      	ldr	r3, [pc, #492]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a364:	2b00      	cmp	r3, #0
 800a366:	d005      	beq.n	800a374 <HAL_RCC_OscConfig+0x320>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	69db      	ldr	r3, [r3, #28]
 800a36c:	2b80      	cmp	r3, #128	; 0x80
 800a36e:	d001      	beq.n	800a374 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	e2c1      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a374:	f7f9 fea6 	bl	80040c4 <HAL_GetREVID>
 800a378:	4603      	mov	r3, r0
 800a37a:	f241 0203 	movw	r2, #4099	; 0x1003
 800a37e:	4293      	cmp	r3, r2
 800a380:	d817      	bhi.n	800a3b2 <HAL_RCC_OscConfig+0x35e>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a1b      	ldr	r3, [r3, #32]
 800a386:	2b20      	cmp	r3, #32
 800a388:	d108      	bne.n	800a39c <HAL_RCC_OscConfig+0x348>
 800a38a:	4b70      	ldr	r3, [pc, #448]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a392:	4a6e      	ldr	r2, [pc, #440]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a398:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a39a:	e075      	b.n	800a488 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a39c:	4b6b      	ldr	r3, [pc, #428]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a1b      	ldr	r3, [r3, #32]
 800a3a8:	069b      	lsls	r3, r3, #26
 800a3aa:	4968      	ldr	r1, [pc, #416]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3b0:	e06a      	b.n	800a488 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3b2:	4b66      	ldr	r3, [pc, #408]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a1b      	ldr	r3, [r3, #32]
 800a3be:	061b      	lsls	r3, r3, #24
 800a3c0:	4962      	ldr	r1, [pc, #392]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3c6:	e05f      	b.n	800a488 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	69db      	ldr	r3, [r3, #28]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d042      	beq.n	800a456 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a3d0:	4b5e      	ldr	r3, [pc, #376]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a5d      	ldr	r2, [pc, #372]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a3d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3dc:	f7f9 fe66 	bl	80040ac <HAL_GetTick>
 800a3e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3e2:	e008      	b.n	800a3f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a3e4:	f7f9 fe62 	bl	80040ac <HAL_GetTick>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	1ad3      	subs	r3, r2, r3
 800a3ee:	2b02      	cmp	r3, #2
 800a3f0:	d901      	bls.n	800a3f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e280      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3f6:	4b55      	ldr	r3, [pc, #340]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d0f0      	beq.n	800a3e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a402:	f7f9 fe5f 	bl	80040c4 <HAL_GetREVID>
 800a406:	4603      	mov	r3, r0
 800a408:	f241 0203 	movw	r2, #4099	; 0x1003
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d817      	bhi.n	800a440 <HAL_RCC_OscConfig+0x3ec>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a1b      	ldr	r3, [r3, #32]
 800a414:	2b20      	cmp	r3, #32
 800a416:	d108      	bne.n	800a42a <HAL_RCC_OscConfig+0x3d6>
 800a418:	4b4c      	ldr	r3, [pc, #304]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a420:	4a4a      	ldr	r2, [pc, #296]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a422:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a426:	6053      	str	r3, [r2, #4]
 800a428:	e02e      	b.n	800a488 <HAL_RCC_OscConfig+0x434>
 800a42a:	4b48      	ldr	r3, [pc, #288]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a1b      	ldr	r3, [r3, #32]
 800a436:	069b      	lsls	r3, r3, #26
 800a438:	4944      	ldr	r1, [pc, #272]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a43a:	4313      	orrs	r3, r2
 800a43c:	604b      	str	r3, [r1, #4]
 800a43e:	e023      	b.n	800a488 <HAL_RCC_OscConfig+0x434>
 800a440:	4b42      	ldr	r3, [pc, #264]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a1b      	ldr	r3, [r3, #32]
 800a44c:	061b      	lsls	r3, r3, #24
 800a44e:	493f      	ldr	r1, [pc, #252]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a450:	4313      	orrs	r3, r2
 800a452:	60cb      	str	r3, [r1, #12]
 800a454:	e018      	b.n	800a488 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a456:	4b3d      	ldr	r3, [pc, #244]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a3c      	ldr	r2, [pc, #240]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a45c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a462:	f7f9 fe23 	bl	80040ac <HAL_GetTick>
 800a466:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a468:	e008      	b.n	800a47c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a46a:	f7f9 fe1f 	bl	80040ac <HAL_GetTick>
 800a46e:	4602      	mov	r2, r0
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	2b02      	cmp	r3, #2
 800a476:	d901      	bls.n	800a47c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a478:	2303      	movs	r3, #3
 800a47a:	e23d      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a47c:	4b33      	ldr	r3, [pc, #204]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1f0      	bne.n	800a46a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 0308 	and.w	r3, r3, #8
 800a490:	2b00      	cmp	r3, #0
 800a492:	d036      	beq.n	800a502 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d019      	beq.n	800a4d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a49c:	4b2b      	ldr	r3, [pc, #172]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a49e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4a0:	4a2a      	ldr	r2, [pc, #168]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a4a2:	f043 0301 	orr.w	r3, r3, #1
 800a4a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4a8:	f7f9 fe00 	bl	80040ac <HAL_GetTick>
 800a4ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a4ae:	e008      	b.n	800a4c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4b0:	f7f9 fdfc 	bl	80040ac <HAL_GetTick>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	1ad3      	subs	r3, r2, r3
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	d901      	bls.n	800a4c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a4be:	2303      	movs	r3, #3
 800a4c0:	e21a      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a4c2:	4b22      	ldr	r3, [pc, #136]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a4c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4c6:	f003 0302 	and.w	r3, r3, #2
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d0f0      	beq.n	800a4b0 <HAL_RCC_OscConfig+0x45c>
 800a4ce:	e018      	b.n	800a502 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a4d0:	4b1e      	ldr	r3, [pc, #120]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a4d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4d4:	4a1d      	ldr	r2, [pc, #116]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a4d6:	f023 0301 	bic.w	r3, r3, #1
 800a4da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4dc:	f7f9 fde6 	bl	80040ac <HAL_GetTick>
 800a4e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4e2:	e008      	b.n	800a4f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4e4:	f7f9 fde2 	bl	80040ac <HAL_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d901      	bls.n	800a4f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e200      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4f6:	4b15      	ldr	r3, [pc, #84]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a4f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1f0      	bne.n	800a4e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f003 0320 	and.w	r3, r3, #32
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d039      	beq.n	800a582 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d01c      	beq.n	800a550 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a516:	4b0d      	ldr	r3, [pc, #52]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a0c      	ldr	r2, [pc, #48]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a51c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a520:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a522:	f7f9 fdc3 	bl	80040ac <HAL_GetTick>
 800a526:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a528:	e008      	b.n	800a53c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a52a:	f7f9 fdbf 	bl	80040ac <HAL_GetTick>
 800a52e:	4602      	mov	r2, r0
 800a530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a532:	1ad3      	subs	r3, r2, r3
 800a534:	2b02      	cmp	r3, #2
 800a536:	d901      	bls.n	800a53c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a538:	2303      	movs	r3, #3
 800a53a:	e1dd      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a53c:	4b03      	ldr	r3, [pc, #12]	; (800a54c <HAL_RCC_OscConfig+0x4f8>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a544:	2b00      	cmp	r3, #0
 800a546:	d0f0      	beq.n	800a52a <HAL_RCC_OscConfig+0x4d6>
 800a548:	e01b      	b.n	800a582 <HAL_RCC_OscConfig+0x52e>
 800a54a:	bf00      	nop
 800a54c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a550:	4b9b      	ldr	r3, [pc, #620]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a9a      	ldr	r2, [pc, #616]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a55a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a55c:	f7f9 fda6 	bl	80040ac <HAL_GetTick>
 800a560:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a562:	e008      	b.n	800a576 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a564:	f7f9 fda2 	bl	80040ac <HAL_GetTick>
 800a568:	4602      	mov	r2, r0
 800a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d901      	bls.n	800a576 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	e1c0      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a576:	4b92      	ldr	r3, [pc, #584]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1f0      	bne.n	800a564 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 0304 	and.w	r3, r3, #4
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f000 8081 	beq.w	800a692 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a590:	4b8c      	ldr	r3, [pc, #560]	; (800a7c4 <HAL_RCC_OscConfig+0x770>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a8b      	ldr	r2, [pc, #556]	; (800a7c4 <HAL_RCC_OscConfig+0x770>)
 800a596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a59a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a59c:	f7f9 fd86 	bl	80040ac <HAL_GetTick>
 800a5a0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5a2:	e008      	b.n	800a5b6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5a4:	f7f9 fd82 	bl	80040ac <HAL_GetTick>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	2b64      	cmp	r3, #100	; 0x64
 800a5b0:	d901      	bls.n	800a5b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a5b2:	2303      	movs	r3, #3
 800a5b4:	e1a0      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5b6:	4b83      	ldr	r3, [pc, #524]	; (800a7c4 <HAL_RCC_OscConfig+0x770>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d0f0      	beq.n	800a5a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d106      	bne.n	800a5d8 <HAL_RCC_OscConfig+0x584>
 800a5ca:	4b7d      	ldr	r3, [pc, #500]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a5cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ce:	4a7c      	ldr	r2, [pc, #496]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a5d0:	f043 0301 	orr.w	r3, r3, #1
 800a5d4:	6713      	str	r3, [r2, #112]	; 0x70
 800a5d6:	e02d      	b.n	800a634 <HAL_RCC_OscConfig+0x5e0>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d10c      	bne.n	800a5fa <HAL_RCC_OscConfig+0x5a6>
 800a5e0:	4b77      	ldr	r3, [pc, #476]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a5e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5e4:	4a76      	ldr	r2, [pc, #472]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a5e6:	f023 0301 	bic.w	r3, r3, #1
 800a5ea:	6713      	str	r3, [r2, #112]	; 0x70
 800a5ec:	4b74      	ldr	r3, [pc, #464]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a5ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5f0:	4a73      	ldr	r2, [pc, #460]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a5f2:	f023 0304 	bic.w	r3, r3, #4
 800a5f6:	6713      	str	r3, [r2, #112]	; 0x70
 800a5f8:	e01c      	b.n	800a634 <HAL_RCC_OscConfig+0x5e0>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	2b05      	cmp	r3, #5
 800a600:	d10c      	bne.n	800a61c <HAL_RCC_OscConfig+0x5c8>
 800a602:	4b6f      	ldr	r3, [pc, #444]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a606:	4a6e      	ldr	r2, [pc, #440]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a608:	f043 0304 	orr.w	r3, r3, #4
 800a60c:	6713      	str	r3, [r2, #112]	; 0x70
 800a60e:	4b6c      	ldr	r3, [pc, #432]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a612:	4a6b      	ldr	r2, [pc, #428]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a614:	f043 0301 	orr.w	r3, r3, #1
 800a618:	6713      	str	r3, [r2, #112]	; 0x70
 800a61a:	e00b      	b.n	800a634 <HAL_RCC_OscConfig+0x5e0>
 800a61c:	4b68      	ldr	r3, [pc, #416]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a61e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a620:	4a67      	ldr	r2, [pc, #412]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a622:	f023 0301 	bic.w	r3, r3, #1
 800a626:	6713      	str	r3, [r2, #112]	; 0x70
 800a628:	4b65      	ldr	r3, [pc, #404]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a62a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a62c:	4a64      	ldr	r2, [pc, #400]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a62e:	f023 0304 	bic.w	r3, r3, #4
 800a632:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d015      	beq.n	800a668 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a63c:	f7f9 fd36 	bl	80040ac <HAL_GetTick>
 800a640:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a642:	e00a      	b.n	800a65a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a644:	f7f9 fd32 	bl	80040ac <HAL_GetTick>
 800a648:	4602      	mov	r2, r0
 800a64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a652:	4293      	cmp	r3, r2
 800a654:	d901      	bls.n	800a65a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a656:	2303      	movs	r3, #3
 800a658:	e14e      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a65a:	4b59      	ldr	r3, [pc, #356]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a65e:	f003 0302 	and.w	r3, r3, #2
 800a662:	2b00      	cmp	r3, #0
 800a664:	d0ee      	beq.n	800a644 <HAL_RCC_OscConfig+0x5f0>
 800a666:	e014      	b.n	800a692 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a668:	f7f9 fd20 	bl	80040ac <HAL_GetTick>
 800a66c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a66e:	e00a      	b.n	800a686 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a670:	f7f9 fd1c 	bl	80040ac <HAL_GetTick>
 800a674:	4602      	mov	r2, r0
 800a676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a67e:	4293      	cmp	r3, r2
 800a680:	d901      	bls.n	800a686 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e138      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a686:	4b4e      	ldr	r3, [pc, #312]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a68a:	f003 0302 	and.w	r3, r3, #2
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1ee      	bne.n	800a670 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a696:	2b00      	cmp	r3, #0
 800a698:	f000 812d 	beq.w	800a8f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a69c:	4b48      	ldr	r3, [pc, #288]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6a4:	2b18      	cmp	r3, #24
 800a6a6:	f000 80bd 	beq.w	800a824 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	f040 809e 	bne.w	800a7f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6b4:	4b42      	ldr	r3, [pc, #264]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a41      	ldr	r2, [pc, #260]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a6ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6c0:	f7f9 fcf4 	bl	80040ac <HAL_GetTick>
 800a6c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6c6:	e008      	b.n	800a6da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6c8:	f7f9 fcf0 	bl	80040ac <HAL_GetTick>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d0:	1ad3      	subs	r3, r2, r3
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d901      	bls.n	800a6da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a6d6:	2303      	movs	r3, #3
 800a6d8:	e10e      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6da:	4b39      	ldr	r3, [pc, #228]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1f0      	bne.n	800a6c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a6e6:	4b36      	ldr	r3, [pc, #216]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a6e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6ea:	4b37      	ldr	r3, [pc, #220]	; (800a7c8 <HAL_RCC_OscConfig+0x774>)
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a6f6:	0112      	lsls	r2, r2, #4
 800a6f8:	430a      	orrs	r2, r1
 800a6fa:	4931      	ldr	r1, [pc, #196]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	628b      	str	r3, [r1, #40]	; 0x28
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a704:	3b01      	subs	r3, #1
 800a706:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a70e:	3b01      	subs	r3, #1
 800a710:	025b      	lsls	r3, r3, #9
 800a712:	b29b      	uxth	r3, r3
 800a714:	431a      	orrs	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71a:	3b01      	subs	r3, #1
 800a71c:	041b      	lsls	r3, r3, #16
 800a71e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a722:	431a      	orrs	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a728:	3b01      	subs	r3, #1
 800a72a:	061b      	lsls	r3, r3, #24
 800a72c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a730:	4923      	ldr	r1, [pc, #140]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a732:	4313      	orrs	r3, r2
 800a734:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a736:	4b22      	ldr	r3, [pc, #136]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73a:	4a21      	ldr	r2, [pc, #132]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a73c:	f023 0301 	bic.w	r3, r3, #1
 800a740:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a742:	4b1f      	ldr	r3, [pc, #124]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a746:	4b21      	ldr	r3, [pc, #132]	; (800a7cc <HAL_RCC_OscConfig+0x778>)
 800a748:	4013      	ands	r3, r2
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a74e:	00d2      	lsls	r2, r2, #3
 800a750:	491b      	ldr	r1, [pc, #108]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a752:	4313      	orrs	r3, r2
 800a754:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a756:	4b1a      	ldr	r3, [pc, #104]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75a:	f023 020c 	bic.w	r2, r3, #12
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a762:	4917      	ldr	r1, [pc, #92]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a764:	4313      	orrs	r3, r2
 800a766:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a768:	4b15      	ldr	r3, [pc, #84]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76c:	f023 0202 	bic.w	r2, r3, #2
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a774:	4912      	ldr	r1, [pc, #72]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a776:	4313      	orrs	r3, r2
 800a778:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a77a:	4b11      	ldr	r3, [pc, #68]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77e:	4a10      	ldr	r2, [pc, #64]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a784:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a786:	4b0e      	ldr	r3, [pc, #56]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78a:	4a0d      	ldr	r2, [pc, #52]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a78c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a790:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a792:	4b0b      	ldr	r3, [pc, #44]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a796:	4a0a      	ldr	r2, [pc, #40]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a79c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a79e:	4b08      	ldr	r3, [pc, #32]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a2:	4a07      	ldr	r2, [pc, #28]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a7a4:	f043 0301 	orr.w	r3, r3, #1
 800a7a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a7aa:	4b05      	ldr	r3, [pc, #20]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a04      	ldr	r2, [pc, #16]	; (800a7c0 <HAL_RCC_OscConfig+0x76c>)
 800a7b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7b6:	f7f9 fc79 	bl	80040ac <HAL_GetTick>
 800a7ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7bc:	e011      	b.n	800a7e2 <HAL_RCC_OscConfig+0x78e>
 800a7be:	bf00      	nop
 800a7c0:	58024400 	.word	0x58024400
 800a7c4:	58024800 	.word	0x58024800
 800a7c8:	fffffc0c 	.word	0xfffffc0c
 800a7cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7d0:	f7f9 fc6c 	bl	80040ac <HAL_GetTick>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	2b02      	cmp	r3, #2
 800a7dc:	d901      	bls.n	800a7e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	e08a      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a7e2:	4b47      	ldr	r3, [pc, #284]	; (800a900 <HAL_RCC_OscConfig+0x8ac>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d0f0      	beq.n	800a7d0 <HAL_RCC_OscConfig+0x77c>
 800a7ee:	e082      	b.n	800a8f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7f0:	4b43      	ldr	r3, [pc, #268]	; (800a900 <HAL_RCC_OscConfig+0x8ac>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a42      	ldr	r2, [pc, #264]	; (800a900 <HAL_RCC_OscConfig+0x8ac>)
 800a7f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7fc:	f7f9 fc56 	bl	80040ac <HAL_GetTick>
 800a800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a802:	e008      	b.n	800a816 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a804:	f7f9 fc52 	bl	80040ac <HAL_GetTick>
 800a808:	4602      	mov	r2, r0
 800a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d901      	bls.n	800a816 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a812:	2303      	movs	r3, #3
 800a814:	e070      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a816:	4b3a      	ldr	r3, [pc, #232]	; (800a900 <HAL_RCC_OscConfig+0x8ac>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1f0      	bne.n	800a804 <HAL_RCC_OscConfig+0x7b0>
 800a822:	e068      	b.n	800a8f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a824:	4b36      	ldr	r3, [pc, #216]	; (800a900 <HAL_RCC_OscConfig+0x8ac>)
 800a826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a828:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a82a:	4b35      	ldr	r3, [pc, #212]	; (800a900 <HAL_RCC_OscConfig+0x8ac>)
 800a82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a834:	2b01      	cmp	r3, #1
 800a836:	d031      	beq.n	800a89c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	f003 0203 	and.w	r2, r3, #3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a842:	429a      	cmp	r2, r3
 800a844:	d12a      	bne.n	800a89c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	091b      	lsrs	r3, r3, #4
 800a84a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a852:	429a      	cmp	r2, r3
 800a854:	d122      	bne.n	800a89c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a860:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a862:	429a      	cmp	r2, r3
 800a864:	d11a      	bne.n	800a89c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	0a5b      	lsrs	r3, r3, #9
 800a86a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a872:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a874:	429a      	cmp	r2, r3
 800a876:	d111      	bne.n	800a89c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	0c1b      	lsrs	r3, r3, #16
 800a87c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a884:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a886:	429a      	cmp	r2, r3
 800a888:	d108      	bne.n	800a89c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	0e1b      	lsrs	r3, r3, #24
 800a88e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a896:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a898:	429a      	cmp	r2, r3
 800a89a:	d001      	beq.n	800a8a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	e02b      	b.n	800a8f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a8a0:	4b17      	ldr	r3, [pc, #92]	; (800a900 <HAL_RCC_OscConfig+0x8ac>)
 800a8a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8a4:	08db      	lsrs	r3, r3, #3
 800a8a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d01f      	beq.n	800a8f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a8b6:	4b12      	ldr	r3, [pc, #72]	; (800a900 <HAL_RCC_OscConfig+0x8ac>)
 800a8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ba:	4a11      	ldr	r2, [pc, #68]	; (800a900 <HAL_RCC_OscConfig+0x8ac>)
 800a8bc:	f023 0301 	bic.w	r3, r3, #1
 800a8c0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a8c2:	f7f9 fbf3 	bl	80040ac <HAL_GetTick>
 800a8c6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a8c8:	bf00      	nop
 800a8ca:	f7f9 fbef 	bl	80040ac <HAL_GetTick>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d0f9      	beq.n	800a8ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a8d6:	4b0a      	ldr	r3, [pc, #40]	; (800a900 <HAL_RCC_OscConfig+0x8ac>)
 800a8d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8da:	4b0a      	ldr	r3, [pc, #40]	; (800a904 <HAL_RCC_OscConfig+0x8b0>)
 800a8dc:	4013      	ands	r3, r2
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a8e2:	00d2      	lsls	r2, r2, #3
 800a8e4:	4906      	ldr	r1, [pc, #24]	; (800a900 <HAL_RCC_OscConfig+0x8ac>)
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a8ea:	4b05      	ldr	r3, [pc, #20]	; (800a900 <HAL_RCC_OscConfig+0x8ac>)
 800a8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ee:	4a04      	ldr	r2, [pc, #16]	; (800a900 <HAL_RCC_OscConfig+0x8ac>)
 800a8f0:	f043 0301 	orr.w	r3, r3, #1
 800a8f4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3730      	adds	r7, #48	; 0x30
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	58024400 	.word	0x58024400
 800a904:	ffff0007 	.word	0xffff0007

0800a908 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d101      	bne.n	800a91c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	e19c      	b.n	800ac56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a91c:	4b8a      	ldr	r3, [pc, #552]	; (800ab48 <HAL_RCC_ClockConfig+0x240>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 030f 	and.w	r3, r3, #15
 800a924:	683a      	ldr	r2, [r7, #0]
 800a926:	429a      	cmp	r2, r3
 800a928:	d910      	bls.n	800a94c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a92a:	4b87      	ldr	r3, [pc, #540]	; (800ab48 <HAL_RCC_ClockConfig+0x240>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f023 020f 	bic.w	r2, r3, #15
 800a932:	4985      	ldr	r1, [pc, #532]	; (800ab48 <HAL_RCC_ClockConfig+0x240>)
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	4313      	orrs	r3, r2
 800a938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a93a:	4b83      	ldr	r3, [pc, #524]	; (800ab48 <HAL_RCC_ClockConfig+0x240>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f003 030f 	and.w	r3, r3, #15
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	429a      	cmp	r2, r3
 800a946:	d001      	beq.n	800a94c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	e184      	b.n	800ac56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f003 0304 	and.w	r3, r3, #4
 800a954:	2b00      	cmp	r3, #0
 800a956:	d010      	beq.n	800a97a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	691a      	ldr	r2, [r3, #16]
 800a95c:	4b7b      	ldr	r3, [pc, #492]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800a95e:	699b      	ldr	r3, [r3, #24]
 800a960:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a964:	429a      	cmp	r2, r3
 800a966:	d908      	bls.n	800a97a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a968:	4b78      	ldr	r3, [pc, #480]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800a96a:	699b      	ldr	r3, [r3, #24]
 800a96c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	691b      	ldr	r3, [r3, #16]
 800a974:	4975      	ldr	r1, [pc, #468]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800a976:	4313      	orrs	r3, r2
 800a978:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f003 0308 	and.w	r3, r3, #8
 800a982:	2b00      	cmp	r3, #0
 800a984:	d010      	beq.n	800a9a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	695a      	ldr	r2, [r3, #20]
 800a98a:	4b70      	ldr	r3, [pc, #448]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800a98c:	69db      	ldr	r3, [r3, #28]
 800a98e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a992:	429a      	cmp	r2, r3
 800a994:	d908      	bls.n	800a9a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a996:	4b6d      	ldr	r3, [pc, #436]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800a998:	69db      	ldr	r3, [r3, #28]
 800a99a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	695b      	ldr	r3, [r3, #20]
 800a9a2:	496a      	ldr	r1, [pc, #424]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 0310 	and.w	r3, r3, #16
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d010      	beq.n	800a9d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	699a      	ldr	r2, [r3, #24]
 800a9b8:	4b64      	ldr	r3, [pc, #400]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800a9ba:	69db      	ldr	r3, [r3, #28]
 800a9bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d908      	bls.n	800a9d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a9c4:	4b61      	ldr	r3, [pc, #388]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800a9c6:	69db      	ldr	r3, [r3, #28]
 800a9c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	495e      	ldr	r1, [pc, #376]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 0320 	and.w	r3, r3, #32
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d010      	beq.n	800aa04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	69da      	ldr	r2, [r3, #28]
 800a9e6:	4b59      	ldr	r3, [pc, #356]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800a9e8:	6a1b      	ldr	r3, [r3, #32]
 800a9ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d908      	bls.n	800aa04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a9f2:	4b56      	ldr	r3, [pc, #344]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	69db      	ldr	r3, [r3, #28]
 800a9fe:	4953      	ldr	r1, [pc, #332]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800aa00:	4313      	orrs	r3, r2
 800aa02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f003 0302 	and.w	r3, r3, #2
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d010      	beq.n	800aa32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	68da      	ldr	r2, [r3, #12]
 800aa14:	4b4d      	ldr	r3, [pc, #308]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	f003 030f 	and.w	r3, r3, #15
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d908      	bls.n	800aa32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa20:	4b4a      	ldr	r3, [pc, #296]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800aa22:	699b      	ldr	r3, [r3, #24]
 800aa24:	f023 020f 	bic.w	r2, r3, #15
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	4947      	ldr	r1, [pc, #284]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 0301 	and.w	r3, r3, #1
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d055      	beq.n	800aaea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aa3e:	4b43      	ldr	r3, [pc, #268]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	4940      	ldr	r1, [pc, #256]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d107      	bne.n	800aa68 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa58:	4b3c      	ldr	r3, [pc, #240]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d121      	bne.n	800aaa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa64:	2301      	movs	r3, #1
 800aa66:	e0f6      	b.n	800ac56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	2b03      	cmp	r3, #3
 800aa6e:	d107      	bne.n	800aa80 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa70:	4b36      	ldr	r3, [pc, #216]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d115      	bne.n	800aaa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e0ea      	b.n	800ac56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d107      	bne.n	800aa98 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aa88:	4b30      	ldr	r3, [pc, #192]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d109      	bne.n	800aaa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	e0de      	b.n	800ac56 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa98:	4b2c      	ldr	r3, [pc, #176]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 0304 	and.w	r3, r3, #4
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d101      	bne.n	800aaa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e0d6      	b.n	800ac56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aaa8:	4b28      	ldr	r3, [pc, #160]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	f023 0207 	bic.w	r2, r3, #7
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	4925      	ldr	r1, [pc, #148]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800aab6:	4313      	orrs	r3, r2
 800aab8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aaba:	f7f9 faf7 	bl	80040ac <HAL_GetTick>
 800aabe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aac0:	e00a      	b.n	800aad8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aac2:	f7f9 faf3 	bl	80040ac <HAL_GetTick>
 800aac6:	4602      	mov	r2, r0
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	1ad3      	subs	r3, r2, r3
 800aacc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d901      	bls.n	800aad8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800aad4:	2303      	movs	r3, #3
 800aad6:	e0be      	b.n	800ac56 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aad8:	4b1c      	ldr	r3, [pc, #112]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	00db      	lsls	r3, r3, #3
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d1eb      	bne.n	800aac2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 0302 	and.w	r3, r3, #2
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d010      	beq.n	800ab18 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	68da      	ldr	r2, [r3, #12]
 800aafa:	4b14      	ldr	r3, [pc, #80]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800aafc:	699b      	ldr	r3, [r3, #24]
 800aafe:	f003 030f 	and.w	r3, r3, #15
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d208      	bcs.n	800ab18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab06:	4b11      	ldr	r3, [pc, #68]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800ab08:	699b      	ldr	r3, [r3, #24]
 800ab0a:	f023 020f 	bic.w	r2, r3, #15
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	490e      	ldr	r1, [pc, #56]	; (800ab4c <HAL_RCC_ClockConfig+0x244>)
 800ab14:	4313      	orrs	r3, r2
 800ab16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab18:	4b0b      	ldr	r3, [pc, #44]	; (800ab48 <HAL_RCC_ClockConfig+0x240>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 030f 	and.w	r3, r3, #15
 800ab20:	683a      	ldr	r2, [r7, #0]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d214      	bcs.n	800ab50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab26:	4b08      	ldr	r3, [pc, #32]	; (800ab48 <HAL_RCC_ClockConfig+0x240>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f023 020f 	bic.w	r2, r3, #15
 800ab2e:	4906      	ldr	r1, [pc, #24]	; (800ab48 <HAL_RCC_ClockConfig+0x240>)
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab36:	4b04      	ldr	r3, [pc, #16]	; (800ab48 <HAL_RCC_ClockConfig+0x240>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f003 030f 	and.w	r3, r3, #15
 800ab3e:	683a      	ldr	r2, [r7, #0]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d005      	beq.n	800ab50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e086      	b.n	800ac56 <HAL_RCC_ClockConfig+0x34e>
 800ab48:	52002000 	.word	0x52002000
 800ab4c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f003 0304 	and.w	r3, r3, #4
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d010      	beq.n	800ab7e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	691a      	ldr	r2, [r3, #16]
 800ab60:	4b3f      	ldr	r3, [pc, #252]	; (800ac60 <HAL_RCC_ClockConfig+0x358>)
 800ab62:	699b      	ldr	r3, [r3, #24]
 800ab64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d208      	bcs.n	800ab7e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab6c:	4b3c      	ldr	r3, [pc, #240]	; (800ac60 <HAL_RCC_ClockConfig+0x358>)
 800ab6e:	699b      	ldr	r3, [r3, #24]
 800ab70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	4939      	ldr	r1, [pc, #228]	; (800ac60 <HAL_RCC_ClockConfig+0x358>)
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f003 0308 	and.w	r3, r3, #8
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d010      	beq.n	800abac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	695a      	ldr	r2, [r3, #20]
 800ab8e:	4b34      	ldr	r3, [pc, #208]	; (800ac60 <HAL_RCC_ClockConfig+0x358>)
 800ab90:	69db      	ldr	r3, [r3, #28]
 800ab92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d208      	bcs.n	800abac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ab9a:	4b31      	ldr	r3, [pc, #196]	; (800ac60 <HAL_RCC_ClockConfig+0x358>)
 800ab9c:	69db      	ldr	r3, [r3, #28]
 800ab9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	492e      	ldr	r1, [pc, #184]	; (800ac60 <HAL_RCC_ClockConfig+0x358>)
 800aba8:	4313      	orrs	r3, r2
 800abaa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 0310 	and.w	r3, r3, #16
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d010      	beq.n	800abda <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	699a      	ldr	r2, [r3, #24]
 800abbc:	4b28      	ldr	r3, [pc, #160]	; (800ac60 <HAL_RCC_ClockConfig+0x358>)
 800abbe:	69db      	ldr	r3, [r3, #28]
 800abc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d208      	bcs.n	800abda <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800abc8:	4b25      	ldr	r3, [pc, #148]	; (800ac60 <HAL_RCC_ClockConfig+0x358>)
 800abca:	69db      	ldr	r3, [r3, #28]
 800abcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	699b      	ldr	r3, [r3, #24]
 800abd4:	4922      	ldr	r1, [pc, #136]	; (800ac60 <HAL_RCC_ClockConfig+0x358>)
 800abd6:	4313      	orrs	r3, r2
 800abd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f003 0320 	and.w	r3, r3, #32
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d010      	beq.n	800ac08 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	69da      	ldr	r2, [r3, #28]
 800abea:	4b1d      	ldr	r3, [pc, #116]	; (800ac60 <HAL_RCC_ClockConfig+0x358>)
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d208      	bcs.n	800ac08 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800abf6:	4b1a      	ldr	r3, [pc, #104]	; (800ac60 <HAL_RCC_ClockConfig+0x358>)
 800abf8:	6a1b      	ldr	r3, [r3, #32]
 800abfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	69db      	ldr	r3, [r3, #28]
 800ac02:	4917      	ldr	r1, [pc, #92]	; (800ac60 <HAL_RCC_ClockConfig+0x358>)
 800ac04:	4313      	orrs	r3, r2
 800ac06:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ac08:	f000 f834 	bl	800ac74 <HAL_RCC_GetSysClockFreq>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	4b14      	ldr	r3, [pc, #80]	; (800ac60 <HAL_RCC_ClockConfig+0x358>)
 800ac10:	699b      	ldr	r3, [r3, #24]
 800ac12:	0a1b      	lsrs	r3, r3, #8
 800ac14:	f003 030f 	and.w	r3, r3, #15
 800ac18:	4912      	ldr	r1, [pc, #72]	; (800ac64 <HAL_RCC_ClockConfig+0x35c>)
 800ac1a:	5ccb      	ldrb	r3, [r1, r3]
 800ac1c:	f003 031f 	and.w	r3, r3, #31
 800ac20:	fa22 f303 	lsr.w	r3, r2, r3
 800ac24:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac26:	4b0e      	ldr	r3, [pc, #56]	; (800ac60 <HAL_RCC_ClockConfig+0x358>)
 800ac28:	699b      	ldr	r3, [r3, #24]
 800ac2a:	f003 030f 	and.w	r3, r3, #15
 800ac2e:	4a0d      	ldr	r2, [pc, #52]	; (800ac64 <HAL_RCC_ClockConfig+0x35c>)
 800ac30:	5cd3      	ldrb	r3, [r2, r3]
 800ac32:	f003 031f 	and.w	r3, r3, #31
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	fa22 f303 	lsr.w	r3, r2, r3
 800ac3c:	4a0a      	ldr	r2, [pc, #40]	; (800ac68 <HAL_RCC_ClockConfig+0x360>)
 800ac3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ac40:	4a0a      	ldr	r2, [pc, #40]	; (800ac6c <HAL_RCC_ClockConfig+0x364>)
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ac46:	4b0a      	ldr	r3, [pc, #40]	; (800ac70 <HAL_RCC_ClockConfig+0x368>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7f8 ff5c 	bl	8003b08 <HAL_InitTick>
 800ac50:	4603      	mov	r3, r0
 800ac52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3718      	adds	r7, #24
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	58024400 	.word	0x58024400
 800ac64:	080179e4 	.word	0x080179e4
 800ac68:	24000090 	.word	0x24000090
 800ac6c:	2400008c 	.word	0x2400008c
 800ac70:	24000094 	.word	0x24000094

0800ac74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b089      	sub	sp, #36	; 0x24
 800ac78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac7a:	4bb3      	ldr	r3, [pc, #716]	; (800af48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac82:	2b18      	cmp	r3, #24
 800ac84:	f200 8155 	bhi.w	800af32 <HAL_RCC_GetSysClockFreq+0x2be>
 800ac88:	a201      	add	r2, pc, #4	; (adr r2, 800ac90 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ac8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac8e:	bf00      	nop
 800ac90:	0800acf5 	.word	0x0800acf5
 800ac94:	0800af33 	.word	0x0800af33
 800ac98:	0800af33 	.word	0x0800af33
 800ac9c:	0800af33 	.word	0x0800af33
 800aca0:	0800af33 	.word	0x0800af33
 800aca4:	0800af33 	.word	0x0800af33
 800aca8:	0800af33 	.word	0x0800af33
 800acac:	0800af33 	.word	0x0800af33
 800acb0:	0800ad1b 	.word	0x0800ad1b
 800acb4:	0800af33 	.word	0x0800af33
 800acb8:	0800af33 	.word	0x0800af33
 800acbc:	0800af33 	.word	0x0800af33
 800acc0:	0800af33 	.word	0x0800af33
 800acc4:	0800af33 	.word	0x0800af33
 800acc8:	0800af33 	.word	0x0800af33
 800accc:	0800af33 	.word	0x0800af33
 800acd0:	0800ad21 	.word	0x0800ad21
 800acd4:	0800af33 	.word	0x0800af33
 800acd8:	0800af33 	.word	0x0800af33
 800acdc:	0800af33 	.word	0x0800af33
 800ace0:	0800af33 	.word	0x0800af33
 800ace4:	0800af33 	.word	0x0800af33
 800ace8:	0800af33 	.word	0x0800af33
 800acec:	0800af33 	.word	0x0800af33
 800acf0:	0800ad27 	.word	0x0800ad27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acf4:	4b94      	ldr	r3, [pc, #592]	; (800af48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f003 0320 	and.w	r3, r3, #32
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d009      	beq.n	800ad14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad00:	4b91      	ldr	r3, [pc, #580]	; (800af48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	08db      	lsrs	r3, r3, #3
 800ad06:	f003 0303 	and.w	r3, r3, #3
 800ad0a:	4a90      	ldr	r2, [pc, #576]	; (800af4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad0c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ad12:	e111      	b.n	800af38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ad14:	4b8d      	ldr	r3, [pc, #564]	; (800af4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad16:	61bb      	str	r3, [r7, #24]
      break;
 800ad18:	e10e      	b.n	800af38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ad1a:	4b8d      	ldr	r3, [pc, #564]	; (800af50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ad1c:	61bb      	str	r3, [r7, #24]
      break;
 800ad1e:	e10b      	b.n	800af38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ad20:	4b8c      	ldr	r3, [pc, #560]	; (800af54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ad22:	61bb      	str	r3, [r7, #24]
      break;
 800ad24:	e108      	b.n	800af38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad26:	4b88      	ldr	r3, [pc, #544]	; (800af48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad2a:	f003 0303 	and.w	r3, r3, #3
 800ad2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ad30:	4b85      	ldr	r3, [pc, #532]	; (800af48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad34:	091b      	lsrs	r3, r3, #4
 800ad36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ad3c:	4b82      	ldr	r3, [pc, #520]	; (800af48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad40:	f003 0301 	and.w	r3, r3, #1
 800ad44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ad46:	4b80      	ldr	r3, [pc, #512]	; (800af48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad4a:	08db      	lsrs	r3, r3, #3
 800ad4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	fb02 f303 	mul.w	r3, r2, r3
 800ad56:	ee07 3a90 	vmov	s15, r3
 800ad5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f000 80e1 	beq.w	800af2c <HAL_RCC_GetSysClockFreq+0x2b8>
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	f000 8083 	beq.w	800ae78 <HAL_RCC_GetSysClockFreq+0x204>
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	f200 80a1 	bhi.w	800aebc <HAL_RCC_GetSysClockFreq+0x248>
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d003      	beq.n	800ad88 <HAL_RCC_GetSysClockFreq+0x114>
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d056      	beq.n	800ae34 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ad86:	e099      	b.n	800aebc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad88:	4b6f      	ldr	r3, [pc, #444]	; (800af48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f003 0320 	and.w	r3, r3, #32
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d02d      	beq.n	800adf0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad94:	4b6c      	ldr	r3, [pc, #432]	; (800af48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	08db      	lsrs	r3, r3, #3
 800ad9a:	f003 0303 	and.w	r3, r3, #3
 800ad9e:	4a6b      	ldr	r2, [pc, #428]	; (800af4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ada0:	fa22 f303 	lsr.w	r3, r2, r3
 800ada4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	ee07 3a90 	vmov	s15, r3
 800adac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	ee07 3a90 	vmov	s15, r3
 800adb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adbe:	4b62      	ldr	r3, [pc, #392]	; (800af48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adc6:	ee07 3a90 	vmov	s15, r3
 800adca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adce:	ed97 6a02 	vldr	s12, [r7, #8]
 800add2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800af58 <HAL_RCC_GetSysClockFreq+0x2e4>
 800add6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ade2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ade6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800adee:	e087      	b.n	800af00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	ee07 3a90 	vmov	s15, r3
 800adf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adfa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800af5c <HAL_RCC_GetSysClockFreq+0x2e8>
 800adfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae02:	4b51      	ldr	r3, [pc, #324]	; (800af48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae0a:	ee07 3a90 	vmov	s15, r3
 800ae0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae12:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae16:	eddf 5a50 	vldr	s11, [pc, #320]	; 800af58 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae32:	e065      	b.n	800af00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	ee07 3a90 	vmov	s15, r3
 800ae3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae3e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800af60 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ae42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae46:	4b40      	ldr	r3, [pc, #256]	; (800af48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae4e:	ee07 3a90 	vmov	s15, r3
 800ae52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae56:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae5a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800af58 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae76:	e043      	b.n	800af00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae82:	eddf 6a38 	vldr	s13, [pc, #224]	; 800af64 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ae86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae8a:	4b2f      	ldr	r3, [pc, #188]	; (800af48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae92:	ee07 3a90 	vmov	s15, r3
 800ae96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae9a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae9e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800af58 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aeba:	e021      	b.n	800af00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	ee07 3a90 	vmov	s15, r3
 800aec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800af60 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aeca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aece:	4b1e      	ldr	r3, [pc, #120]	; (800af48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aed6:	ee07 3a90 	vmov	s15, r3
 800aeda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aede:	ed97 6a02 	vldr	s12, [r7, #8]
 800aee2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800af58 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aefa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aefe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800af00:	4b11      	ldr	r3, [pc, #68]	; (800af48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af04:	0a5b      	lsrs	r3, r3, #9
 800af06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af0a:	3301      	adds	r3, #1
 800af0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	ee07 3a90 	vmov	s15, r3
 800af14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800af18:	edd7 6a07 	vldr	s13, [r7, #28]
 800af1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af24:	ee17 3a90 	vmov	r3, s15
 800af28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800af2a:	e005      	b.n	800af38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	61bb      	str	r3, [r7, #24]
      break;
 800af30:	e002      	b.n	800af38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800af32:	4b07      	ldr	r3, [pc, #28]	; (800af50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800af34:	61bb      	str	r3, [r7, #24]
      break;
 800af36:	bf00      	nop
  }

  return sysclockfreq;
 800af38:	69bb      	ldr	r3, [r7, #24]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3724      	adds	r7, #36	; 0x24
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	58024400 	.word	0x58024400
 800af4c:	03d09000 	.word	0x03d09000
 800af50:	003d0900 	.word	0x003d0900
 800af54:	017d7840 	.word	0x017d7840
 800af58:	46000000 	.word	0x46000000
 800af5c:	4c742400 	.word	0x4c742400
 800af60:	4a742400 	.word	0x4a742400
 800af64:	4bbebc20 	.word	0x4bbebc20

0800af68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800af6e:	f7ff fe81 	bl	800ac74 <HAL_RCC_GetSysClockFreq>
 800af72:	4602      	mov	r2, r0
 800af74:	4b10      	ldr	r3, [pc, #64]	; (800afb8 <HAL_RCC_GetHCLKFreq+0x50>)
 800af76:	699b      	ldr	r3, [r3, #24]
 800af78:	0a1b      	lsrs	r3, r3, #8
 800af7a:	f003 030f 	and.w	r3, r3, #15
 800af7e:	490f      	ldr	r1, [pc, #60]	; (800afbc <HAL_RCC_GetHCLKFreq+0x54>)
 800af80:	5ccb      	ldrb	r3, [r1, r3]
 800af82:	f003 031f 	and.w	r3, r3, #31
 800af86:	fa22 f303 	lsr.w	r3, r2, r3
 800af8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800af8c:	4b0a      	ldr	r3, [pc, #40]	; (800afb8 <HAL_RCC_GetHCLKFreq+0x50>)
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	f003 030f 	and.w	r3, r3, #15
 800af94:	4a09      	ldr	r2, [pc, #36]	; (800afbc <HAL_RCC_GetHCLKFreq+0x54>)
 800af96:	5cd3      	ldrb	r3, [r2, r3]
 800af98:	f003 031f 	and.w	r3, r3, #31
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	fa22 f303 	lsr.w	r3, r2, r3
 800afa2:	4a07      	ldr	r2, [pc, #28]	; (800afc0 <HAL_RCC_GetHCLKFreq+0x58>)
 800afa4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800afa6:	4a07      	ldr	r2, [pc, #28]	; (800afc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800afac:	4b04      	ldr	r3, [pc, #16]	; (800afc0 <HAL_RCC_GetHCLKFreq+0x58>)
 800afae:	681b      	ldr	r3, [r3, #0]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	58024400 	.word	0x58024400
 800afbc:	080179e4 	.word	0x080179e4
 800afc0:	24000090 	.word	0x24000090
 800afc4:	2400008c 	.word	0x2400008c

0800afc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800afcc:	f7ff ffcc 	bl	800af68 <HAL_RCC_GetHCLKFreq>
 800afd0:	4602      	mov	r2, r0
 800afd2:	4b06      	ldr	r3, [pc, #24]	; (800afec <HAL_RCC_GetPCLK1Freq+0x24>)
 800afd4:	69db      	ldr	r3, [r3, #28]
 800afd6:	091b      	lsrs	r3, r3, #4
 800afd8:	f003 0307 	and.w	r3, r3, #7
 800afdc:	4904      	ldr	r1, [pc, #16]	; (800aff0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800afde:	5ccb      	ldrb	r3, [r1, r3]
 800afe0:	f003 031f 	and.w	r3, r3, #31
 800afe4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800afe8:	4618      	mov	r0, r3
 800afea:	bd80      	pop	{r7, pc}
 800afec:	58024400 	.word	0x58024400
 800aff0:	080179e4 	.word	0x080179e4

0800aff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aff8:	f7ff ffb6 	bl	800af68 <HAL_RCC_GetHCLKFreq>
 800affc:	4602      	mov	r2, r0
 800affe:	4b06      	ldr	r3, [pc, #24]	; (800b018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b000:	69db      	ldr	r3, [r3, #28]
 800b002:	0a1b      	lsrs	r3, r3, #8
 800b004:	f003 0307 	and.w	r3, r3, #7
 800b008:	4904      	ldr	r1, [pc, #16]	; (800b01c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b00a:	5ccb      	ldrb	r3, [r1, r3]
 800b00c:	f003 031f 	and.w	r3, r3, #31
 800b010:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b014:	4618      	mov	r0, r3
 800b016:	bd80      	pop	{r7, pc}
 800b018:	58024400 	.word	0x58024400
 800b01c:	080179e4 	.word	0x080179e4

0800b020 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	223f      	movs	r2, #63	; 0x3f
 800b02e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b030:	4b1a      	ldr	r3, [pc, #104]	; (800b09c <HAL_RCC_GetClockConfig+0x7c>)
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	f003 0207 	and.w	r2, r3, #7
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b03c:	4b17      	ldr	r3, [pc, #92]	; (800b09c <HAL_RCC_GetClockConfig+0x7c>)
 800b03e:	699b      	ldr	r3, [r3, #24]
 800b040:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b048:	4b14      	ldr	r3, [pc, #80]	; (800b09c <HAL_RCC_GetClockConfig+0x7c>)
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	f003 020f 	and.w	r2, r3, #15
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b054:	4b11      	ldr	r3, [pc, #68]	; (800b09c <HAL_RCC_GetClockConfig+0x7c>)
 800b056:	699b      	ldr	r3, [r3, #24]
 800b058:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b060:	4b0e      	ldr	r3, [pc, #56]	; (800b09c <HAL_RCC_GetClockConfig+0x7c>)
 800b062:	69db      	ldr	r3, [r3, #28]
 800b064:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b06c:	4b0b      	ldr	r3, [pc, #44]	; (800b09c <HAL_RCC_GetClockConfig+0x7c>)
 800b06e:	69db      	ldr	r3, [r3, #28]
 800b070:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b078:	4b08      	ldr	r3, [pc, #32]	; (800b09c <HAL_RCC_GetClockConfig+0x7c>)
 800b07a:	6a1b      	ldr	r3, [r3, #32]
 800b07c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b084:	4b06      	ldr	r3, [pc, #24]	; (800b0a0 <HAL_RCC_GetClockConfig+0x80>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 020f 	and.w	r2, r3, #15
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	601a      	str	r2, [r3, #0]
}
 800b090:	bf00      	nop
 800b092:	370c      	adds	r7, #12
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr
 800b09c:	58024400 	.word	0x58024400
 800b0a0:	52002000 	.word	0x52002000

0800b0a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b0a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0a8:	b0ca      	sub	sp, #296	; 0x128
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b0bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b0c8:	2500      	movs	r5, #0
 800b0ca:	ea54 0305 	orrs.w	r3, r4, r5
 800b0ce:	d049      	beq.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0da:	d02f      	beq.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b0dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b0e0:	d828      	bhi.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b0e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0e6:	d01a      	beq.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b0e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0ec:	d822      	bhi.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d003      	beq.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b0f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0f6:	d007      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b0f8:	e01c      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0fa:	4bb8      	ldr	r3, [pc, #736]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fe:	4ab7      	ldr	r2, [pc, #732]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b104:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b106:	e01a      	b.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b10c:	3308      	adds	r3, #8
 800b10e:	2102      	movs	r1, #2
 800b110:	4618      	mov	r0, r3
 800b112:	f002 fb61 	bl	800d7d8 <RCCEx_PLL2_Config>
 800b116:	4603      	mov	r3, r0
 800b118:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b11c:	e00f      	b.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b11e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b122:	3328      	adds	r3, #40	; 0x28
 800b124:	2102      	movs	r1, #2
 800b126:	4618      	mov	r0, r3
 800b128:	f002 fc08 	bl	800d93c <RCCEx_PLL3_Config>
 800b12c:	4603      	mov	r3, r0
 800b12e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b132:	e004      	b.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b13a:	e000      	b.n	800b13e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b13c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b13e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b142:	2b00      	cmp	r3, #0
 800b144:	d10a      	bne.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b146:	4ba5      	ldr	r3, [pc, #660]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b14a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b14e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b154:	4aa1      	ldr	r2, [pc, #644]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b156:	430b      	orrs	r3, r1
 800b158:	6513      	str	r3, [r2, #80]	; 0x50
 800b15a:	e003      	b.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b15c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b160:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b170:	f04f 0900 	mov.w	r9, #0
 800b174:	ea58 0309 	orrs.w	r3, r8, r9
 800b178:	d047      	beq.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b17e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b180:	2b04      	cmp	r3, #4
 800b182:	d82a      	bhi.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b184:	a201      	add	r2, pc, #4	; (adr r2, 800b18c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b18a:	bf00      	nop
 800b18c:	0800b1a1 	.word	0x0800b1a1
 800b190:	0800b1af 	.word	0x0800b1af
 800b194:	0800b1c5 	.word	0x0800b1c5
 800b198:	0800b1e3 	.word	0x0800b1e3
 800b19c:	0800b1e3 	.word	0x0800b1e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1a0:	4b8e      	ldr	r3, [pc, #568]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a4:	4a8d      	ldr	r2, [pc, #564]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1ac:	e01a      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1b2:	3308      	adds	r3, #8
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f002 fb0e 	bl	800d7d8 <RCCEx_PLL2_Config>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1c2:	e00f      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1c8:	3328      	adds	r3, #40	; 0x28
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f002 fbb5 	bl	800d93c <RCCEx_PLL3_Config>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1d8:	e004      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1e0:	e000      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b1e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d10a      	bne.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b1ec:	4b7b      	ldr	r3, [pc, #492]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1f0:	f023 0107 	bic.w	r1, r3, #7
 800b1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1fa:	4a78      	ldr	r2, [pc, #480]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1fc:	430b      	orrs	r3, r1
 800b1fe:	6513      	str	r3, [r2, #80]	; 0x50
 800b200:	e003      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b206:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b212:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b216:	f04f 0b00 	mov.w	fp, #0
 800b21a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b21e:	d04c      	beq.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b22a:	d030      	beq.n	800b28e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b22c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b230:	d829      	bhi.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b232:	2bc0      	cmp	r3, #192	; 0xc0
 800b234:	d02d      	beq.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b236:	2bc0      	cmp	r3, #192	; 0xc0
 800b238:	d825      	bhi.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b23a:	2b80      	cmp	r3, #128	; 0x80
 800b23c:	d018      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b23e:	2b80      	cmp	r3, #128	; 0x80
 800b240:	d821      	bhi.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b242:	2b00      	cmp	r3, #0
 800b244:	d002      	beq.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b246:	2b40      	cmp	r3, #64	; 0x40
 800b248:	d007      	beq.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b24a:	e01c      	b.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b24c:	4b63      	ldr	r3, [pc, #396]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b250:	4a62      	ldr	r2, [pc, #392]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b256:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b258:	e01c      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b25e:	3308      	adds	r3, #8
 800b260:	2100      	movs	r1, #0
 800b262:	4618      	mov	r0, r3
 800b264:	f002 fab8 	bl	800d7d8 <RCCEx_PLL2_Config>
 800b268:	4603      	mov	r3, r0
 800b26a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b26e:	e011      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b274:	3328      	adds	r3, #40	; 0x28
 800b276:	2100      	movs	r1, #0
 800b278:	4618      	mov	r0, r3
 800b27a:	f002 fb5f 	bl	800d93c <RCCEx_PLL3_Config>
 800b27e:	4603      	mov	r3, r0
 800b280:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b284:	e006      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b28c:	e002      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b28e:	bf00      	nop
 800b290:	e000      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b292:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b294:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10a      	bne.n	800b2b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b29c:	4b4f      	ldr	r3, [pc, #316]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b29e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2a0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2aa:	4a4c      	ldr	r2, [pc, #304]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2ac:	430b      	orrs	r3, r1
 800b2ae:	6513      	str	r3, [r2, #80]	; 0x50
 800b2b0:	e003      	b.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b2c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b2d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	d053      	beq.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b2e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b2e6:	d035      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b2e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b2ec:	d82e      	bhi.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b2ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b2f2:	d031      	beq.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b2f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b2f8:	d828      	bhi.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b2fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2fe:	d01a      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b304:	d822      	bhi.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b30a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b30e:	d007      	beq.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b310:	e01c      	b.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b312:	4b32      	ldr	r3, [pc, #200]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b316:	4a31      	ldr	r2, [pc, #196]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b31c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b31e:	e01c      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b324:	3308      	adds	r3, #8
 800b326:	2100      	movs	r1, #0
 800b328:	4618      	mov	r0, r3
 800b32a:	f002 fa55 	bl	800d7d8 <RCCEx_PLL2_Config>
 800b32e:	4603      	mov	r3, r0
 800b330:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b334:	e011      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b33a:	3328      	adds	r3, #40	; 0x28
 800b33c:	2100      	movs	r1, #0
 800b33e:	4618      	mov	r0, r3
 800b340:	f002 fafc 	bl	800d93c <RCCEx_PLL3_Config>
 800b344:	4603      	mov	r3, r0
 800b346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b34a:	e006      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b352:	e002      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b354:	bf00      	nop
 800b356:	e000      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b35a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10b      	bne.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b362:	4b1e      	ldr	r3, [pc, #120]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b366:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b36e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b372:	4a1a      	ldr	r2, [pc, #104]	; (800b3dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b374:	430b      	orrs	r3, r1
 800b376:	6593      	str	r3, [r2, #88]	; 0x58
 800b378:	e003      	b.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b37a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b37e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b38e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b392:	2300      	movs	r3, #0
 800b394:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b398:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b39c:	460b      	mov	r3, r1
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	d056      	beq.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b3aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3ae:	d038      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b3b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3b4:	d831      	bhi.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3ba:	d034      	beq.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b3bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3c0:	d82b      	bhi.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3c6:	d01d      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b3c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3cc:	d825      	bhi.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d006      	beq.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b3d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b3d6:	d00a      	beq.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b3d8:	e01f      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b3da:	bf00      	nop
 800b3dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3e0:	4ba2      	ldr	r3, [pc, #648]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e4:	4aa1      	ldr	r2, [pc, #644]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b3ec:	e01c      	b.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f2:	3308      	adds	r3, #8
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f002 f9ee 	bl	800d7d8 <RCCEx_PLL2_Config>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b402:	e011      	b.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b408:	3328      	adds	r3, #40	; 0x28
 800b40a:	2100      	movs	r1, #0
 800b40c:	4618      	mov	r0, r3
 800b40e:	f002 fa95 	bl	800d93c <RCCEx_PLL3_Config>
 800b412:	4603      	mov	r3, r0
 800b414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b418:	e006      	b.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b420:	e002      	b.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b422:	bf00      	nop
 800b424:	e000      	b.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b426:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b428:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10b      	bne.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b430:	4b8e      	ldr	r3, [pc, #568]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b434:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b43c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b440:	4a8a      	ldr	r2, [pc, #552]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b442:	430b      	orrs	r3, r1
 800b444:	6593      	str	r3, [r2, #88]	; 0x58
 800b446:	e003      	b.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b448:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b44c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b458:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b45c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b460:	2300      	movs	r3, #0
 800b462:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b466:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b46a:	460b      	mov	r3, r1
 800b46c:	4313      	orrs	r3, r2
 800b46e:	d03a      	beq.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b476:	2b30      	cmp	r3, #48	; 0x30
 800b478:	d01f      	beq.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b47a:	2b30      	cmp	r3, #48	; 0x30
 800b47c:	d819      	bhi.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b47e:	2b20      	cmp	r3, #32
 800b480:	d00c      	beq.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b482:	2b20      	cmp	r3, #32
 800b484:	d815      	bhi.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b486:	2b00      	cmp	r3, #0
 800b488:	d019      	beq.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b48a:	2b10      	cmp	r3, #16
 800b48c:	d111      	bne.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b48e:	4b77      	ldr	r3, [pc, #476]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b492:	4a76      	ldr	r2, [pc, #472]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b498:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b49a:	e011      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a0:	3308      	adds	r3, #8
 800b4a2:	2102      	movs	r1, #2
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f002 f997 	bl	800d7d8 <RCCEx_PLL2_Config>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b4b0:	e006      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4b8:	e002      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b4ba:	bf00      	nop
 800b4bc:	e000      	b.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b4be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d10a      	bne.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b4c8:	4b68      	ldr	r3, [pc, #416]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4cc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b4d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4d6:	4a65      	ldr	r2, [pc, #404]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4d8:	430b      	orrs	r3, r1
 800b4da:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4dc:	e003      	b.n	800b4e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b4f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b4fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b500:	460b      	mov	r3, r1
 800b502:	4313      	orrs	r3, r2
 800b504:	d051      	beq.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b50a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b50c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b510:	d035      	beq.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b512:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b516:	d82e      	bhi.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b518:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b51c:	d031      	beq.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b51e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b522:	d828      	bhi.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b528:	d01a      	beq.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b52a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b52e:	d822      	bhi.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b530:	2b00      	cmp	r3, #0
 800b532:	d003      	beq.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b538:	d007      	beq.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b53a:	e01c      	b.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b53c:	4b4b      	ldr	r3, [pc, #300]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b540:	4a4a      	ldr	r2, [pc, #296]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b548:	e01c      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b54e:	3308      	adds	r3, #8
 800b550:	2100      	movs	r1, #0
 800b552:	4618      	mov	r0, r3
 800b554:	f002 f940 	bl	800d7d8 <RCCEx_PLL2_Config>
 800b558:	4603      	mov	r3, r0
 800b55a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b55e:	e011      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b564:	3328      	adds	r3, #40	; 0x28
 800b566:	2100      	movs	r1, #0
 800b568:	4618      	mov	r0, r3
 800b56a:	f002 f9e7 	bl	800d93c <RCCEx_PLL3_Config>
 800b56e:	4603      	mov	r3, r0
 800b570:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b574:	e006      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b576:	2301      	movs	r3, #1
 800b578:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b57c:	e002      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b57e:	bf00      	nop
 800b580:	e000      	b.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b582:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b584:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10a      	bne.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b58c:	4b37      	ldr	r3, [pc, #220]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b58e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b590:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b59a:	4a34      	ldr	r2, [pc, #208]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b59c:	430b      	orrs	r3, r1
 800b59e:	6513      	str	r3, [r2, #80]	; 0x50
 800b5a0:	e003      	b.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b5b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b5c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	d056      	beq.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5d4:	d033      	beq.n	800b63e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b5d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b5da:	d82c      	bhi.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b5dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5e0:	d02f      	beq.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b5e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5e6:	d826      	bhi.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b5e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b5ec:	d02b      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b5ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b5f2:	d820      	bhi.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b5f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5f8:	d012      	beq.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b5fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5fe:	d81a      	bhi.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b600:	2b00      	cmp	r3, #0
 800b602:	d022      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b608:	d115      	bne.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b60e:	3308      	adds	r3, #8
 800b610:	2101      	movs	r1, #1
 800b612:	4618      	mov	r0, r3
 800b614:	f002 f8e0 	bl	800d7d8 <RCCEx_PLL2_Config>
 800b618:	4603      	mov	r3, r0
 800b61a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b61e:	e015      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b624:	3328      	adds	r3, #40	; 0x28
 800b626:	2101      	movs	r1, #1
 800b628:	4618      	mov	r0, r3
 800b62a:	f002 f987 	bl	800d93c <RCCEx_PLL3_Config>
 800b62e:	4603      	mov	r3, r0
 800b630:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b634:	e00a      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b63c:	e006      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b63e:	bf00      	nop
 800b640:	e004      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b642:	bf00      	nop
 800b644:	e002      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b646:	bf00      	nop
 800b648:	e000      	b.n	800b64c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b64a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b64c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10d      	bne.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b654:	4b05      	ldr	r3, [pc, #20]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b658:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b662:	4a02      	ldr	r2, [pc, #8]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b664:	430b      	orrs	r3, r1
 800b666:	6513      	str	r3, [r2, #80]	; 0x50
 800b668:	e006      	b.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b66a:	bf00      	nop
 800b66c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b674:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b680:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b688:	2300      	movs	r3, #0
 800b68a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b68e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b692:	460b      	mov	r3, r1
 800b694:	4313      	orrs	r3, r2
 800b696:	d055      	beq.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b69c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b6a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6a4:	d033      	beq.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b6a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6aa:	d82c      	bhi.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6b0:	d02f      	beq.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6b6:	d826      	bhi.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6bc:	d02b      	beq.n	800b716 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b6be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6c2:	d820      	bhi.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6c8:	d012      	beq.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b6ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6ce:	d81a      	bhi.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d022      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b6d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6d8:	d115      	bne.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6de:	3308      	adds	r3, #8
 800b6e0:	2101      	movs	r1, #1
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f002 f878 	bl	800d7d8 <RCCEx_PLL2_Config>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b6ee:	e015      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f4:	3328      	adds	r3, #40	; 0x28
 800b6f6:	2101      	movs	r1, #1
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f002 f91f 	bl	800d93c <RCCEx_PLL3_Config>
 800b6fe:	4603      	mov	r3, r0
 800b700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b704:	e00a      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b70c:	e006      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b70e:	bf00      	nop
 800b710:	e004      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b712:	bf00      	nop
 800b714:	e002      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b716:	bf00      	nop
 800b718:	e000      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b71a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b71c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10b      	bne.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b724:	4ba3      	ldr	r3, [pc, #652]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b728:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b730:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b734:	4a9f      	ldr	r2, [pc, #636]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b736:	430b      	orrs	r3, r1
 800b738:	6593      	str	r3, [r2, #88]	; 0x58
 800b73a:	e003      	b.n	800b744 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b73c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b740:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b754:	2300      	movs	r3, #0
 800b756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b75a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b75e:	460b      	mov	r3, r1
 800b760:	4313      	orrs	r3, r2
 800b762:	d037      	beq.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b76a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b76e:	d00e      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b774:	d816      	bhi.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b776:	2b00      	cmp	r3, #0
 800b778:	d018      	beq.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b77a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b77e:	d111      	bne.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b780:	4b8c      	ldr	r3, [pc, #560]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b784:	4a8b      	ldr	r2, [pc, #556]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b78a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b78c:	e00f      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b792:	3308      	adds	r3, #8
 800b794:	2101      	movs	r1, #1
 800b796:	4618      	mov	r0, r3
 800b798:	f002 f81e 	bl	800d7d8 <RCCEx_PLL2_Config>
 800b79c:	4603      	mov	r3, r0
 800b79e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b7a2:	e004      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7aa:	e000      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b7ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d10a      	bne.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b7b6:	4b7f      	ldr	r3, [pc, #508]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7c4:	4a7b      	ldr	r2, [pc, #492]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7c6:	430b      	orrs	r3, r1
 800b7c8:	6513      	str	r3, [r2, #80]	; 0x50
 800b7ca:	e003      	b.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b7d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b7e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b7ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	d039      	beq.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7fa:	2b03      	cmp	r3, #3
 800b7fc:	d81c      	bhi.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b7fe:	a201      	add	r2, pc, #4	; (adr r2, 800b804 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b804:	0800b841 	.word	0x0800b841
 800b808:	0800b815 	.word	0x0800b815
 800b80c:	0800b823 	.word	0x0800b823
 800b810:	0800b841 	.word	0x0800b841
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b814:	4b67      	ldr	r3, [pc, #412]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b818:	4a66      	ldr	r2, [pc, #408]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b81a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b81e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b820:	e00f      	b.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b826:	3308      	adds	r3, #8
 800b828:	2102      	movs	r1, #2
 800b82a:	4618      	mov	r0, r3
 800b82c:	f001 ffd4 	bl	800d7d8 <RCCEx_PLL2_Config>
 800b830:	4603      	mov	r3, r0
 800b832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b836:	e004      	b.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b838:	2301      	movs	r3, #1
 800b83a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b83e:	e000      	b.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b840:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b842:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b846:	2b00      	cmp	r3, #0
 800b848:	d10a      	bne.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b84a:	4b5a      	ldr	r3, [pc, #360]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b84c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b84e:	f023 0103 	bic.w	r1, r3, #3
 800b852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b858:	4a56      	ldr	r2, [pc, #344]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b85a:	430b      	orrs	r3, r1
 800b85c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b85e:	e003      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b864:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b874:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b878:	2300      	movs	r3, #0
 800b87a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b87e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b882:	460b      	mov	r3, r1
 800b884:	4313      	orrs	r3, r2
 800b886:	f000 809f 	beq.w	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b88a:	4b4b      	ldr	r3, [pc, #300]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a4a      	ldr	r2, [pc, #296]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b894:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b896:	f7f8 fc09 	bl	80040ac <HAL_GetTick>
 800b89a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b89e:	e00b      	b.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8a0:	f7f8 fc04 	bl	80040ac <HAL_GetTick>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	2b64      	cmp	r3, #100	; 0x64
 800b8ae:	d903      	bls.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b8b0:	2303      	movs	r3, #3
 800b8b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8b6:	e005      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8b8:	4b3f      	ldr	r3, [pc, #252]	; (800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d0ed      	beq.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b8c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d179      	bne.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b8cc:	4b39      	ldr	r3, [pc, #228]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8d8:	4053      	eors	r3, r2
 800b8da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d015      	beq.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b8e2:	4b34      	ldr	r3, [pc, #208]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b8ee:	4b31      	ldr	r3, [pc, #196]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8f2:	4a30      	ldr	r2, [pc, #192]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8f8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b8fa:	4b2e      	ldr	r3, [pc, #184]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8fe:	4a2d      	ldr	r2, [pc, #180]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b904:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b906:	4a2b      	ldr	r2, [pc, #172]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b908:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b90c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b90e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b912:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b91a:	d118      	bne.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b91c:	f7f8 fbc6 	bl	80040ac <HAL_GetTick>
 800b920:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b924:	e00d      	b.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b926:	f7f8 fbc1 	bl	80040ac <HAL_GetTick>
 800b92a:	4602      	mov	r2, r0
 800b92c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b930:	1ad2      	subs	r2, r2, r3
 800b932:	f241 3388 	movw	r3, #5000	; 0x1388
 800b936:	429a      	cmp	r2, r3
 800b938:	d903      	bls.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b93a:	2303      	movs	r3, #3
 800b93c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b940:	e005      	b.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b942:	4b1c      	ldr	r3, [pc, #112]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b946:	f003 0302 	and.w	r3, r3, #2
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d0eb      	beq.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b94e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b952:	2b00      	cmp	r3, #0
 800b954:	d129      	bne.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b95a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b95e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b966:	d10e      	bne.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b968:	4b12      	ldr	r3, [pc, #72]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b974:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b978:	091a      	lsrs	r2, r3, #4
 800b97a:	4b10      	ldr	r3, [pc, #64]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b97c:	4013      	ands	r3, r2
 800b97e:	4a0d      	ldr	r2, [pc, #52]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b980:	430b      	orrs	r3, r1
 800b982:	6113      	str	r3, [r2, #16]
 800b984:	e005      	b.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b986:	4b0b      	ldr	r3, [pc, #44]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b988:	691b      	ldr	r3, [r3, #16]
 800b98a:	4a0a      	ldr	r2, [pc, #40]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b98c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b990:	6113      	str	r3, [r2, #16]
 800b992:	4b08      	ldr	r3, [pc, #32]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b994:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b99a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b99e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9a2:	4a04      	ldr	r2, [pc, #16]	; (800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9a4:	430b      	orrs	r3, r1
 800b9a6:	6713      	str	r3, [r2, #112]	; 0x70
 800b9a8:	e00e      	b.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b9aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b9b2:	e009      	b.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b9b4:	58024400 	.word	0x58024400
 800b9b8:	58024800 	.word	0x58024800
 800b9bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d0:	f002 0301 	and.w	r3, r2, #1
 800b9d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9d8:	2300      	movs	r3, #0
 800b9da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	f000 8089 	beq.w	800bafc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b9ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9f0:	2b28      	cmp	r3, #40	; 0x28
 800b9f2:	d86b      	bhi.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b9f4:	a201      	add	r2, pc, #4	; (adr r2, 800b9fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b9f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9fa:	bf00      	nop
 800b9fc:	0800bad5 	.word	0x0800bad5
 800ba00:	0800bacd 	.word	0x0800bacd
 800ba04:	0800bacd 	.word	0x0800bacd
 800ba08:	0800bacd 	.word	0x0800bacd
 800ba0c:	0800bacd 	.word	0x0800bacd
 800ba10:	0800bacd 	.word	0x0800bacd
 800ba14:	0800bacd 	.word	0x0800bacd
 800ba18:	0800bacd 	.word	0x0800bacd
 800ba1c:	0800baa1 	.word	0x0800baa1
 800ba20:	0800bacd 	.word	0x0800bacd
 800ba24:	0800bacd 	.word	0x0800bacd
 800ba28:	0800bacd 	.word	0x0800bacd
 800ba2c:	0800bacd 	.word	0x0800bacd
 800ba30:	0800bacd 	.word	0x0800bacd
 800ba34:	0800bacd 	.word	0x0800bacd
 800ba38:	0800bacd 	.word	0x0800bacd
 800ba3c:	0800bab7 	.word	0x0800bab7
 800ba40:	0800bacd 	.word	0x0800bacd
 800ba44:	0800bacd 	.word	0x0800bacd
 800ba48:	0800bacd 	.word	0x0800bacd
 800ba4c:	0800bacd 	.word	0x0800bacd
 800ba50:	0800bacd 	.word	0x0800bacd
 800ba54:	0800bacd 	.word	0x0800bacd
 800ba58:	0800bacd 	.word	0x0800bacd
 800ba5c:	0800bad5 	.word	0x0800bad5
 800ba60:	0800bacd 	.word	0x0800bacd
 800ba64:	0800bacd 	.word	0x0800bacd
 800ba68:	0800bacd 	.word	0x0800bacd
 800ba6c:	0800bacd 	.word	0x0800bacd
 800ba70:	0800bacd 	.word	0x0800bacd
 800ba74:	0800bacd 	.word	0x0800bacd
 800ba78:	0800bacd 	.word	0x0800bacd
 800ba7c:	0800bad5 	.word	0x0800bad5
 800ba80:	0800bacd 	.word	0x0800bacd
 800ba84:	0800bacd 	.word	0x0800bacd
 800ba88:	0800bacd 	.word	0x0800bacd
 800ba8c:	0800bacd 	.word	0x0800bacd
 800ba90:	0800bacd 	.word	0x0800bacd
 800ba94:	0800bacd 	.word	0x0800bacd
 800ba98:	0800bacd 	.word	0x0800bacd
 800ba9c:	0800bad5 	.word	0x0800bad5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800baa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa4:	3308      	adds	r3, #8
 800baa6:	2101      	movs	r1, #1
 800baa8:	4618      	mov	r0, r3
 800baaa:	f001 fe95 	bl	800d7d8 <RCCEx_PLL2_Config>
 800baae:	4603      	mov	r3, r0
 800bab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bab4:	e00f      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baba:	3328      	adds	r3, #40	; 0x28
 800babc:	2101      	movs	r1, #1
 800babe:	4618      	mov	r0, r3
 800bac0:	f001 ff3c 	bl	800d93c <RCCEx_PLL3_Config>
 800bac4:	4603      	mov	r3, r0
 800bac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800baca:	e004      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bacc:	2301      	movs	r3, #1
 800bace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bad2:	e000      	b.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800bad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bada:	2b00      	cmp	r3, #0
 800badc:	d10a      	bne.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bade:	4bbf      	ldr	r3, [pc, #764]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bae2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800baec:	4abb      	ldr	r2, [pc, #748]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800baee:	430b      	orrs	r3, r1
 800baf0:	6553      	str	r3, [r2, #84]	; 0x54
 800baf2:	e003      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bafc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb04:	f002 0302 	and.w	r3, r2, #2
 800bb08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bb12:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bb16:	460b      	mov	r3, r1
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	d041      	beq.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bb1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb22:	2b05      	cmp	r3, #5
 800bb24:	d824      	bhi.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800bb26:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800bb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2c:	0800bb79 	.word	0x0800bb79
 800bb30:	0800bb45 	.word	0x0800bb45
 800bb34:	0800bb5b 	.word	0x0800bb5b
 800bb38:	0800bb79 	.word	0x0800bb79
 800bb3c:	0800bb79 	.word	0x0800bb79
 800bb40:	0800bb79 	.word	0x0800bb79
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb48:	3308      	adds	r3, #8
 800bb4a:	2101      	movs	r1, #1
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f001 fe43 	bl	800d7d8 <RCCEx_PLL2_Config>
 800bb52:	4603      	mov	r3, r0
 800bb54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bb58:	e00f      	b.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb5e:	3328      	adds	r3, #40	; 0x28
 800bb60:	2101      	movs	r1, #1
 800bb62:	4618      	mov	r0, r3
 800bb64:	f001 feea 	bl	800d93c <RCCEx_PLL3_Config>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bb6e:	e004      	b.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb76:	e000      	b.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bb78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10a      	bne.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bb82:	4b96      	ldr	r3, [pc, #600]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb86:	f023 0107 	bic.w	r1, r3, #7
 800bb8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb90:	4a92      	ldr	r2, [pc, #584]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb92:	430b      	orrs	r3, r1
 800bb94:	6553      	str	r3, [r2, #84]	; 0x54
 800bb96:	e003      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	f002 0304 	and.w	r3, r2, #4
 800bbac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bbb6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	d044      	beq.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bbc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbc8:	2b05      	cmp	r3, #5
 800bbca:	d825      	bhi.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bbcc:	a201      	add	r2, pc, #4	; (adr r2, 800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd2:	bf00      	nop
 800bbd4:	0800bc21 	.word	0x0800bc21
 800bbd8:	0800bbed 	.word	0x0800bbed
 800bbdc:	0800bc03 	.word	0x0800bc03
 800bbe0:	0800bc21 	.word	0x0800bc21
 800bbe4:	0800bc21 	.word	0x0800bc21
 800bbe8:	0800bc21 	.word	0x0800bc21
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf0:	3308      	adds	r3, #8
 800bbf2:	2101      	movs	r1, #1
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f001 fdef 	bl	800d7d8 <RCCEx_PLL2_Config>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bc00:	e00f      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc06:	3328      	adds	r3, #40	; 0x28
 800bc08:	2101      	movs	r1, #1
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f001 fe96 	bl	800d93c <RCCEx_PLL3_Config>
 800bc10:	4603      	mov	r3, r0
 800bc12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bc16:	e004      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc1e:	e000      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bc20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10b      	bne.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bc2a:	4b6c      	ldr	r3, [pc, #432]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc2e:	f023 0107 	bic.w	r1, r3, #7
 800bc32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc3a:	4a68      	ldr	r2, [pc, #416]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc3c:	430b      	orrs	r3, r1
 800bc3e:	6593      	str	r3, [r2, #88]	; 0x58
 800bc40:	e003      	b.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bc4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc52:	f002 0320 	and.w	r3, r2, #32
 800bc56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bc60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bc64:	460b      	mov	r3, r1
 800bc66:	4313      	orrs	r3, r2
 800bc68:	d055      	beq.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bc6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc76:	d033      	beq.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bc78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bc7c:	d82c      	bhi.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc82:	d02f      	beq.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bc84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc88:	d826      	bhi.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc8e:	d02b      	beq.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bc90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc94:	d820      	bhi.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bc96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc9a:	d012      	beq.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bc9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bca0:	d81a      	bhi.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d022      	beq.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcaa:	d115      	bne.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcb0:	3308      	adds	r3, #8
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f001 fd8f 	bl	800d7d8 <RCCEx_PLL2_Config>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bcc0:	e015      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bcc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc6:	3328      	adds	r3, #40	; 0x28
 800bcc8:	2102      	movs	r1, #2
 800bcca:	4618      	mov	r0, r3
 800bccc:	f001 fe36 	bl	800d93c <RCCEx_PLL3_Config>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bcd6:	e00a      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcde:	e006      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bce0:	bf00      	nop
 800bce2:	e004      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bce4:	bf00      	nop
 800bce6:	e002      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bce8:	bf00      	nop
 800bcea:	e000      	b.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bcec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10b      	bne.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bcf6:	4b39      	ldr	r3, [pc, #228]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bcf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcfa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bcfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd06:	4a35      	ldr	r2, [pc, #212]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd08:	430b      	orrs	r3, r1
 800bd0a:	6553      	str	r3, [r2, #84]	; 0x54
 800bd0c:	e003      	b.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bd16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bd22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bd26:	2300      	movs	r3, #0
 800bd28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bd2c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bd30:	460b      	mov	r3, r1
 800bd32:	4313      	orrs	r3, r2
 800bd34:	d058      	beq.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bd36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd3e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd42:	d033      	beq.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bd44:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bd48:	d82c      	bhi.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd4e:	d02f      	beq.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bd50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd54:	d826      	bhi.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd5a:	d02b      	beq.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bd5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd60:	d820      	bhi.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd66:	d012      	beq.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bd68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd6c:	d81a      	bhi.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d022      	beq.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bd72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd76:	d115      	bne.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd7c:	3308      	adds	r3, #8
 800bd7e:	2100      	movs	r1, #0
 800bd80:	4618      	mov	r0, r3
 800bd82:	f001 fd29 	bl	800d7d8 <RCCEx_PLL2_Config>
 800bd86:	4603      	mov	r3, r0
 800bd88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bd8c:	e015      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd92:	3328      	adds	r3, #40	; 0x28
 800bd94:	2102      	movs	r1, #2
 800bd96:	4618      	mov	r0, r3
 800bd98:	f001 fdd0 	bl	800d93c <RCCEx_PLL3_Config>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bda2:	e00a      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bdaa:	e006      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdac:	bf00      	nop
 800bdae:	e004      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdb0:	bf00      	nop
 800bdb2:	e002      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdb4:	bf00      	nop
 800bdb6:	e000      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bdb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d10e      	bne.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bdc2:	4b06      	ldr	r3, [pc, #24]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bdc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdc6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bdca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdd2:	4a02      	ldr	r2, [pc, #8]	; (800bddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bdd4:	430b      	orrs	r3, r1
 800bdd6:	6593      	str	r3, [r2, #88]	; 0x58
 800bdd8:	e006      	b.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bdda:	bf00      	nop
 800bddc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bde0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bde4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bde8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bdf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bdfe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800be02:	460b      	mov	r3, r1
 800be04:	4313      	orrs	r3, r2
 800be06:	d055      	beq.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800be08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be10:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800be14:	d033      	beq.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800be16:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800be1a:	d82c      	bhi.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be20:	d02f      	beq.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800be22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be26:	d826      	bhi.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be28:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be2c:	d02b      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800be2e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800be32:	d820      	bhi.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be38:	d012      	beq.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800be3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be3e:	d81a      	bhi.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800be40:	2b00      	cmp	r3, #0
 800be42:	d022      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800be44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be48:	d115      	bne.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be4e:	3308      	adds	r3, #8
 800be50:	2100      	movs	r1, #0
 800be52:	4618      	mov	r0, r3
 800be54:	f001 fcc0 	bl	800d7d8 <RCCEx_PLL2_Config>
 800be58:	4603      	mov	r3, r0
 800be5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800be5e:	e015      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be64:	3328      	adds	r3, #40	; 0x28
 800be66:	2102      	movs	r1, #2
 800be68:	4618      	mov	r0, r3
 800be6a:	f001 fd67 	bl	800d93c <RCCEx_PLL3_Config>
 800be6e:	4603      	mov	r3, r0
 800be70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800be74:	e00a      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be76:	2301      	movs	r3, #1
 800be78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be7c:	e006      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be7e:	bf00      	nop
 800be80:	e004      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be82:	bf00      	nop
 800be84:	e002      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be86:	bf00      	nop
 800be88:	e000      	b.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800be8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be90:	2b00      	cmp	r3, #0
 800be92:	d10b      	bne.n	800beac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800be94:	4ba1      	ldr	r3, [pc, #644]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be98:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800be9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bea0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bea4:	4a9d      	ldr	r2, [pc, #628]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bea6:	430b      	orrs	r3, r1
 800bea8:	6593      	str	r3, [r2, #88]	; 0x58
 800beaa:	e003      	b.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800beb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800beb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebc:	f002 0308 	and.w	r3, r2, #8
 800bec0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bec4:	2300      	movs	r3, #0
 800bec6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800beca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bece:	460b      	mov	r3, r1
 800bed0:	4313      	orrs	r3, r2
 800bed2:	d01e      	beq.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bedc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bee0:	d10c      	bne.n	800befc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bee6:	3328      	adds	r3, #40	; 0x28
 800bee8:	2102      	movs	r1, #2
 800beea:	4618      	mov	r0, r3
 800beec:	f001 fd26 	bl	800d93c <RCCEx_PLL3_Config>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d002      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800befc:	4b87      	ldr	r3, [pc, #540]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800befe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bf04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf0c:	4a83      	ldr	r2, [pc, #524]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf0e:	430b      	orrs	r3, r1
 800bf10:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bf12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1a:	f002 0310 	and.w	r3, r2, #16
 800bf1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bf22:	2300      	movs	r3, #0
 800bf24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bf28:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	d01e      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bf32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf3e:	d10c      	bne.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bf40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf44:	3328      	adds	r3, #40	; 0x28
 800bf46:	2102      	movs	r1, #2
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f001 fcf7 	bl	800d93c <RCCEx_PLL3_Config>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d002      	beq.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bf5a:	4b70      	ldr	r3, [pc, #448]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf6a:	4a6c      	ldr	r2, [pc, #432]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf6c:	430b      	orrs	r3, r1
 800bf6e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf78:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bf7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf80:	2300      	movs	r3, #0
 800bf82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bf86:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	d03e      	beq.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bf90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf9c:	d022      	beq.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bf9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfa2:	d81b      	bhi.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d003      	beq.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bfa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfac:	d00b      	beq.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bfae:	e015      	b.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb4:	3308      	adds	r3, #8
 800bfb6:	2100      	movs	r1, #0
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f001 fc0d 	bl	800d7d8 <RCCEx_PLL2_Config>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bfc4:	e00f      	b.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfca:	3328      	adds	r3, #40	; 0x28
 800bfcc:	2102      	movs	r1, #2
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f001 fcb4 	bl	800d93c <RCCEx_PLL3_Config>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bfda:	e004      	b.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bfe2:	e000      	b.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bfe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d10b      	bne.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bfee:	4b4b      	ldr	r3, [pc, #300]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bff2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bffa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bffe:	4a47      	ldr	r2, [pc, #284]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c000:	430b      	orrs	r3, r1
 800c002:	6593      	str	r3, [r2, #88]	; 0x58
 800c004:	e003      	b.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c00a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c016:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c01a:	67bb      	str	r3, [r7, #120]	; 0x78
 800c01c:	2300      	movs	r3, #0
 800c01e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c020:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c024:	460b      	mov	r3, r1
 800c026:	4313      	orrs	r3, r2
 800c028:	d03b      	beq.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c032:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c036:	d01f      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c038:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c03c:	d818      	bhi.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c03e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c042:	d003      	beq.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c044:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c048:	d007      	beq.n	800c05a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c04a:	e011      	b.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c04c:	4b33      	ldr	r3, [pc, #204]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c050:	4a32      	ldr	r2, [pc, #200]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c056:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c058:	e00f      	b.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c05e:	3328      	adds	r3, #40	; 0x28
 800c060:	2101      	movs	r1, #1
 800c062:	4618      	mov	r0, r3
 800c064:	f001 fc6a 	bl	800d93c <RCCEx_PLL3_Config>
 800c068:	4603      	mov	r3, r0
 800c06a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c06e:	e004      	b.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c070:	2301      	movs	r3, #1
 800c072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c076:	e000      	b.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c07a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d10b      	bne.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c082:	4b26      	ldr	r3, [pc, #152]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c086:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c092:	4a22      	ldr	r2, [pc, #136]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c094:	430b      	orrs	r3, r1
 800c096:	6553      	str	r3, [r2, #84]	; 0x54
 800c098:	e003      	b.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c09a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c09e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c0ae:	673b      	str	r3, [r7, #112]	; 0x70
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	677b      	str	r3, [r7, #116]	; 0x74
 800c0b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	d034      	beq.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d003      	beq.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c0c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0cc:	d007      	beq.n	800c0de <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c0ce:	e011      	b.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0d0:	4b12      	ldr	r3, [pc, #72]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d4:	4a11      	ldr	r2, [pc, #68]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c0dc:	e00e      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0e2:	3308      	adds	r3, #8
 800c0e4:	2102      	movs	r1, #2
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f001 fb76 	bl	800d7d8 <RCCEx_PLL2_Config>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c0f2:	e003      	b.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c0fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10d      	bne.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c104:	4b05      	ldr	r3, [pc, #20]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c108:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c112:	4a02      	ldr	r2, [pc, #8]	; (800c11c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c114:	430b      	orrs	r3, r1
 800c116:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c118:	e006      	b.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c11a:	bf00      	nop
 800c11c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c120:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c124:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c130:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c134:	66bb      	str	r3, [r7, #104]	; 0x68
 800c136:	2300      	movs	r3, #0
 800c138:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c13a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c13e:	460b      	mov	r3, r1
 800c140:	4313      	orrs	r3, r2
 800c142:	d00c      	beq.n	800c15e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c148:	3328      	adds	r3, #40	; 0x28
 800c14a:	2102      	movs	r1, #2
 800c14c:	4618      	mov	r0, r3
 800c14e:	f001 fbf5 	bl	800d93c <RCCEx_PLL3_Config>
 800c152:	4603      	mov	r3, r0
 800c154:	2b00      	cmp	r3, #0
 800c156:	d002      	beq.n	800c15e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c158:	2301      	movs	r3, #1
 800c15a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c166:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c16a:	663b      	str	r3, [r7, #96]	; 0x60
 800c16c:	2300      	movs	r3, #0
 800c16e:	667b      	str	r3, [r7, #100]	; 0x64
 800c170:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c174:	460b      	mov	r3, r1
 800c176:	4313      	orrs	r3, r2
 800c178:	d038      	beq.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c17e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c186:	d018      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c188:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c18c:	d811      	bhi.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c18e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c192:	d014      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c198:	d80b      	bhi.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d011      	beq.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c19e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1a2:	d106      	bne.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1a4:	4bc3      	ldr	r3, [pc, #780]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a8:	4ac2      	ldr	r2, [pc, #776]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c1b0:	e008      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c1b8:	e004      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1ba:	bf00      	nop
 800c1bc:	e002      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1be:	bf00      	nop
 800c1c0:	e000      	b.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c1c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10b      	bne.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c1cc:	4bb9      	ldr	r3, [pc, #740]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1dc:	4ab5      	ldr	r2, [pc, #724]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1de:	430b      	orrs	r3, r1
 800c1e0:	6553      	str	r3, [r2, #84]	; 0x54
 800c1e2:	e003      	b.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c1f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c202:	460b      	mov	r3, r1
 800c204:	4313      	orrs	r3, r2
 800c206:	d009      	beq.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c208:	4baa      	ldr	r3, [pc, #680]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c20a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c20c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c216:	4aa7      	ldr	r2, [pc, #668]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c218:	430b      	orrs	r3, r1
 800c21a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c224:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c228:	653b      	str	r3, [r7, #80]	; 0x50
 800c22a:	2300      	movs	r3, #0
 800c22c:	657b      	str	r3, [r7, #84]	; 0x54
 800c22e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c232:	460b      	mov	r3, r1
 800c234:	4313      	orrs	r3, r2
 800c236:	d00a      	beq.n	800c24e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c238:	4b9e      	ldr	r3, [pc, #632]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c244:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c248:	4a9a      	ldr	r2, [pc, #616]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c24a:	430b      	orrs	r3, r1
 800c24c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c24e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c256:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c25a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c25c:	2300      	movs	r3, #0
 800c25e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c260:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c264:	460b      	mov	r3, r1
 800c266:	4313      	orrs	r3, r2
 800c268:	d009      	beq.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c26a:	4b92      	ldr	r3, [pc, #584]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c26c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c26e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c278:	4a8e      	ldr	r2, [pc, #568]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c27a:	430b      	orrs	r3, r1
 800c27c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c27e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c286:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c28a:	643b      	str	r3, [r7, #64]	; 0x40
 800c28c:	2300      	movs	r3, #0
 800c28e:	647b      	str	r3, [r7, #68]	; 0x44
 800c290:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c294:	460b      	mov	r3, r1
 800c296:	4313      	orrs	r3, r2
 800c298:	d00e      	beq.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c29a:	4b86      	ldr	r3, [pc, #536]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c29c:	691b      	ldr	r3, [r3, #16]
 800c29e:	4a85      	ldr	r2, [pc, #532]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c2a4:	6113      	str	r3, [r2, #16]
 800c2a6:	4b83      	ldr	r3, [pc, #524]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2a8:	6919      	ldr	r1, [r3, #16]
 800c2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c2b2:	4a80      	ldr	r2, [pc, #512]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2b4:	430b      	orrs	r3, r1
 800c2b6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c2c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	d009      	beq.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c2d4:	4b77      	ldr	r3, [pc, #476]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2d8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2e2:	4a74      	ldr	r2, [pc, #464]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c2e4:	430b      	orrs	r3, r1
 800c2e6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c2f4:	633b      	str	r3, [r7, #48]	; 0x30
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	637b      	str	r3, [r7, #52]	; 0x34
 800c2fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c2fe:	460b      	mov	r3, r1
 800c300:	4313      	orrs	r3, r2
 800c302:	d00a      	beq.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c304:	4b6b      	ldr	r3, [pc, #428]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c308:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c314:	4a67      	ldr	r2, [pc, #412]	; (800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c316:	430b      	orrs	r3, r1
 800c318:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c322:	2100      	movs	r1, #0
 800c324:	62b9      	str	r1, [r7, #40]	; 0x28
 800c326:	f003 0301 	and.w	r3, r3, #1
 800c32a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c32c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c330:	460b      	mov	r3, r1
 800c332:	4313      	orrs	r3, r2
 800c334:	d011      	beq.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c33a:	3308      	adds	r3, #8
 800c33c:	2100      	movs	r1, #0
 800c33e:	4618      	mov	r0, r3
 800c340:	f001 fa4a 	bl	800d7d8 <RCCEx_PLL2_Config>
 800c344:	4603      	mov	r3, r0
 800c346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c34a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d003      	beq.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c356:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c362:	2100      	movs	r1, #0
 800c364:	6239      	str	r1, [r7, #32]
 800c366:	f003 0302 	and.w	r3, r3, #2
 800c36a:	627b      	str	r3, [r7, #36]	; 0x24
 800c36c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c370:	460b      	mov	r3, r1
 800c372:	4313      	orrs	r3, r2
 800c374:	d011      	beq.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c37a:	3308      	adds	r3, #8
 800c37c:	2101      	movs	r1, #1
 800c37e:	4618      	mov	r0, r3
 800c380:	f001 fa2a 	bl	800d7d8 <RCCEx_PLL2_Config>
 800c384:	4603      	mov	r3, r0
 800c386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c38a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	61b9      	str	r1, [r7, #24]
 800c3a6:	f003 0304 	and.w	r3, r3, #4
 800c3aa:	61fb      	str	r3, [r7, #28]
 800c3ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	d011      	beq.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3ba:	3308      	adds	r3, #8
 800c3bc:	2102      	movs	r1, #2
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f001 fa0a 	bl	800d7d8 <RCCEx_PLL2_Config>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c3ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d003      	beq.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	6139      	str	r1, [r7, #16]
 800c3e6:	f003 0308 	and.w	r3, r3, #8
 800c3ea:	617b      	str	r3, [r7, #20]
 800c3ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	d011      	beq.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3fa:	3328      	adds	r3, #40	; 0x28
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	4618      	mov	r0, r3
 800c400:	f001 fa9c 	bl	800d93c <RCCEx_PLL3_Config>
 800c404:	4603      	mov	r3, r0
 800c406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c40a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d003      	beq.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c416:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c422:	2100      	movs	r1, #0
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	f003 0310 	and.w	r3, r3, #16
 800c42a:	60fb      	str	r3, [r7, #12]
 800c42c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c430:	460b      	mov	r3, r1
 800c432:	4313      	orrs	r3, r2
 800c434:	d011      	beq.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c43a:	3328      	adds	r3, #40	; 0x28
 800c43c:	2101      	movs	r1, #1
 800c43e:	4618      	mov	r0, r3
 800c440:	f001 fa7c 	bl	800d93c <RCCEx_PLL3_Config>
 800c444:	4603      	mov	r3, r0
 800c446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c44a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d003      	beq.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c456:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c462:	2100      	movs	r1, #0
 800c464:	6039      	str	r1, [r7, #0]
 800c466:	f003 0320 	and.w	r3, r3, #32
 800c46a:	607b      	str	r3, [r7, #4]
 800c46c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c470:	460b      	mov	r3, r1
 800c472:	4313      	orrs	r3, r2
 800c474:	d011      	beq.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c47a:	3328      	adds	r3, #40	; 0x28
 800c47c:	2102      	movs	r1, #2
 800c47e:	4618      	mov	r0, r3
 800c480:	f001 fa5c 	bl	800d93c <RCCEx_PLL3_Config>
 800c484:	4603      	mov	r3, r0
 800c486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c48a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d003      	beq.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c492:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c496:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c49a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d101      	bne.n	800c4a6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	e000      	b.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c4a6:	2301      	movs	r3, #1
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4b4:	58024400 	.word	0x58024400

0800c4b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b090      	sub	sp, #64	; 0x40
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c4c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4c6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c4ca:	430b      	orrs	r3, r1
 800c4cc:	f040 8094 	bne.w	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c4d0:	4b9e      	ldr	r3, [pc, #632]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4d4:	f003 0307 	and.w	r3, r3, #7
 800c4d8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4dc:	2b04      	cmp	r3, #4
 800c4de:	f200 8087 	bhi.w	800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c4e2:	a201      	add	r2, pc, #4	; (adr r2, 800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e8:	0800c4fd 	.word	0x0800c4fd
 800c4ec:	0800c525 	.word	0x0800c525
 800c4f0:	0800c54d 	.word	0x0800c54d
 800c4f4:	0800c5e9 	.word	0x0800c5e9
 800c4f8:	0800c575 	.word	0x0800c575
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4fc:	4b93      	ldr	r3, [pc, #588]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c504:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c508:	d108      	bne.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c50a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c50e:	4618      	mov	r0, r3
 800c510:	f001 f810 	bl	800d534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c518:	f000 bd45 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c51c:	2300      	movs	r3, #0
 800c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c520:	f000 bd41 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c524:	4b89      	ldr	r3, [pc, #548]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c52c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c530:	d108      	bne.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c532:	f107 0318 	add.w	r3, r7, #24
 800c536:	4618      	mov	r0, r3
 800c538:	f000 fd54 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c53c:	69bb      	ldr	r3, [r7, #24]
 800c53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c540:	f000 bd31 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c544:	2300      	movs	r3, #0
 800c546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c548:	f000 bd2d 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c54c:	4b7f      	ldr	r3, [pc, #508]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c558:	d108      	bne.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c55a:	f107 030c 	add.w	r3, r7, #12
 800c55e:	4618      	mov	r0, r3
 800c560:	f000 fe94 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c568:	f000 bd1d 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c56c:	2300      	movs	r3, #0
 800c56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c570:	f000 bd19 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c574:	4b75      	ldr	r3, [pc, #468]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c578:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c57c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c57e:	4b73      	ldr	r3, [pc, #460]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f003 0304 	and.w	r3, r3, #4
 800c586:	2b04      	cmp	r3, #4
 800c588:	d10c      	bne.n	800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d109      	bne.n	800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c590:	4b6e      	ldr	r3, [pc, #440]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	08db      	lsrs	r3, r3, #3
 800c596:	f003 0303 	and.w	r3, r3, #3
 800c59a:	4a6d      	ldr	r2, [pc, #436]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c59c:	fa22 f303 	lsr.w	r3, r2, r3
 800c5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5a2:	e01f      	b.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5a4:	4b69      	ldr	r3, [pc, #420]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5b0:	d106      	bne.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5b8:	d102      	bne.n	800c5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5ba:	4b66      	ldr	r3, [pc, #408]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5be:	e011      	b.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c5c0:	4b62      	ldr	r3, [pc, #392]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5cc:	d106      	bne.n	800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5d4:	d102      	bne.n	800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c5d6:	4b60      	ldr	r3, [pc, #384]	; (800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5da:	e003      	b.n	800c5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c5e0:	f000 bce1 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c5e4:	f000 bcdf 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c5e8:	4b5c      	ldr	r3, [pc, #368]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ec:	f000 bcdb 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f4:	f000 bcd7 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c5f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5fc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c600:	430b      	orrs	r3, r1
 800c602:	f040 80ad 	bne.w	800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c606:	4b51      	ldr	r3, [pc, #324]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c60a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c60e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c616:	d056      	beq.n	800c6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c61e:	f200 8090 	bhi.w	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c624:	2bc0      	cmp	r3, #192	; 0xc0
 800c626:	f000 8088 	beq.w	800c73a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62c:	2bc0      	cmp	r3, #192	; 0xc0
 800c62e:	f200 8088 	bhi.w	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	2b80      	cmp	r3, #128	; 0x80
 800c636:	d032      	beq.n	800c69e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63a:	2b80      	cmp	r3, #128	; 0x80
 800c63c:	f200 8081 	bhi.w	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c642:	2b00      	cmp	r3, #0
 800c644:	d003      	beq.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c648:	2b40      	cmp	r3, #64	; 0x40
 800c64a:	d014      	beq.n	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c64c:	e079      	b.n	800c742 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c64e:	4b3f      	ldr	r3, [pc, #252]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c656:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c65a:	d108      	bne.n	800c66e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c65c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c660:	4618      	mov	r0, r3
 800c662:	f000 ff67 	bl	800d534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c668:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c66a:	f000 bc9c 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c66e:	2300      	movs	r3, #0
 800c670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c672:	f000 bc98 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c676:	4b35      	ldr	r3, [pc, #212]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c67e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c682:	d108      	bne.n	800c696 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c684:	f107 0318 	add.w	r3, r7, #24
 800c688:	4618      	mov	r0, r3
 800c68a:	f000 fcab 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c692:	f000 bc88 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c696:	2300      	movs	r3, #0
 800c698:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c69a:	f000 bc84 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c69e:	4b2b      	ldr	r3, [pc, #172]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6aa:	d108      	bne.n	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6ac:	f107 030c 	add.w	r3, r7, #12
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f000 fdeb 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ba:	f000 bc74 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c2:	f000 bc70 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6c6:	4b21      	ldr	r3, [pc, #132]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6d0:	4b1e      	ldr	r3, [pc, #120]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f003 0304 	and.w	r3, r3, #4
 800c6d8:	2b04      	cmp	r3, #4
 800c6da:	d10c      	bne.n	800c6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d109      	bne.n	800c6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6e2:	4b1a      	ldr	r3, [pc, #104]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	08db      	lsrs	r3, r3, #3
 800c6e8:	f003 0303 	and.w	r3, r3, #3
 800c6ec:	4a18      	ldr	r2, [pc, #96]	; (800c750 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c6ee:	fa22 f303 	lsr.w	r3, r2, r3
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f4:	e01f      	b.n	800c736 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6f6:	4b15      	ldr	r3, [pc, #84]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c702:	d106      	bne.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c70a:	d102      	bne.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c70c:	4b11      	ldr	r3, [pc, #68]	; (800c754 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c70e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c710:	e011      	b.n	800c736 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c712:	4b0e      	ldr	r3, [pc, #56]	; (800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c71a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c71e:	d106      	bne.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c726:	d102      	bne.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c728:	4b0b      	ldr	r3, [pc, #44]	; (800c758 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c72a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c72c:	e003      	b.n	800c736 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c732:	f000 bc38 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c736:	f000 bc36 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c73a:	4b08      	ldr	r3, [pc, #32]	; (800c75c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c73c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c73e:	f000 bc32 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c742:	2300      	movs	r3, #0
 800c744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c746:	f000 bc2e 	b.w	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c74a:	bf00      	nop
 800c74c:	58024400 	.word	0x58024400
 800c750:	03d09000 	.word	0x03d09000
 800c754:	003d0900 	.word	0x003d0900
 800c758:	017d7840 	.word	0x017d7840
 800c75c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c760:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c764:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c768:	430b      	orrs	r3, r1
 800c76a:	f040 809c 	bne.w	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c76e:	4b9e      	ldr	r3, [pc, #632]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c772:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c776:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c77e:	d054      	beq.n	800c82a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c782:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c786:	f200 808b 	bhi.w	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c790:	f000 8083 	beq.w	800c89a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c796:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c79a:	f200 8081 	bhi.w	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7a4:	d02f      	beq.n	800c806 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7ac:	d878      	bhi.n	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d004      	beq.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c7ba:	d012      	beq.n	800c7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c7bc:	e070      	b.n	800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7be:	4b8a      	ldr	r3, [pc, #552]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7ca:	d107      	bne.n	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f000 feaf 	bl	800d534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7da:	e3e4      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7e0:	e3e1      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7e2:	4b81      	ldr	r3, [pc, #516]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7ee:	d107      	bne.n	800c800 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7f0:	f107 0318 	add.w	r3, r7, #24
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f000 fbf5 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7fe:	e3d2      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c800:	2300      	movs	r3, #0
 800c802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c804:	e3cf      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c806:	4b78      	ldr	r3, [pc, #480]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c80e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c812:	d107      	bne.n	800c824 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c814:	f107 030c 	add.w	r3, r7, #12
 800c818:	4618      	mov	r0, r3
 800c81a:	f000 fd37 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c822:	e3c0      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c824:	2300      	movs	r3, #0
 800c826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c828:	e3bd      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c82a:	4b6f      	ldr	r3, [pc, #444]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c82c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c82e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c832:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c834:	4b6c      	ldr	r3, [pc, #432]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f003 0304 	and.w	r3, r3, #4
 800c83c:	2b04      	cmp	r3, #4
 800c83e:	d10c      	bne.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c842:	2b00      	cmp	r3, #0
 800c844:	d109      	bne.n	800c85a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c846:	4b68      	ldr	r3, [pc, #416]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	08db      	lsrs	r3, r3, #3
 800c84c:	f003 0303 	and.w	r3, r3, #3
 800c850:	4a66      	ldr	r2, [pc, #408]	; (800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c852:	fa22 f303 	lsr.w	r3, r2, r3
 800c856:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c858:	e01e      	b.n	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c85a:	4b63      	ldr	r3, [pc, #396]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c866:	d106      	bne.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c86a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c86e:	d102      	bne.n	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c870:	4b5f      	ldr	r3, [pc, #380]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c872:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c874:	e010      	b.n	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c876:	4b5c      	ldr	r3, [pc, #368]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c87e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c882:	d106      	bne.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c88a:	d102      	bne.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c88c:	4b59      	ldr	r3, [pc, #356]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c88e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c890:	e002      	b.n	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c892:	2300      	movs	r3, #0
 800c894:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c896:	e386      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c898:	e385      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c89a:	4b57      	ldr	r3, [pc, #348]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c89c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c89e:	e382      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8a4:	e37f      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c8a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8aa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c8ae:	430b      	orrs	r3, r1
 800c8b0:	f040 80a7 	bne.w	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c8b4:	4b4c      	ldr	r3, [pc, #304]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8b8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c8bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8c4:	d055      	beq.n	800c972 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8cc:	f200 8096 	bhi.w	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c8d6:	f000 8084 	beq.w	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c8e0:	f200 808c 	bhi.w	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8ea:	d030      	beq.n	800c94e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8f2:	f200 8083 	bhi.w	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d004      	beq.n	800c906 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c902:	d012      	beq.n	800c92a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c904:	e07a      	b.n	800c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c906:	4b38      	ldr	r3, [pc, #224]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c90e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c912:	d107      	bne.n	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c918:	4618      	mov	r0, r3
 800c91a:	f000 fe0b 	bl	800d534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c920:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c922:	e340      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c924:	2300      	movs	r3, #0
 800c926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c928:	e33d      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c92a:	4b2f      	ldr	r3, [pc, #188]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c936:	d107      	bne.n	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c938:	f107 0318 	add.w	r3, r7, #24
 800c93c:	4618      	mov	r0, r3
 800c93e:	f000 fb51 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c946:	e32e      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c948:	2300      	movs	r3, #0
 800c94a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c94c:	e32b      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c94e:	4b26      	ldr	r3, [pc, #152]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c956:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c95a:	d107      	bne.n	800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c95c:	f107 030c 	add.w	r3, r7, #12
 800c960:	4618      	mov	r0, r3
 800c962:	f000 fc93 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c96a:	e31c      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c96c:	2300      	movs	r3, #0
 800c96e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c970:	e319      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c972:	4b1d      	ldr	r3, [pc, #116]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c976:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c97a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c97c:	4b1a      	ldr	r3, [pc, #104]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f003 0304 	and.w	r3, r3, #4
 800c984:	2b04      	cmp	r3, #4
 800c986:	d10c      	bne.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d109      	bne.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c98e:	4b16      	ldr	r3, [pc, #88]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	08db      	lsrs	r3, r3, #3
 800c994:	f003 0303 	and.w	r3, r3, #3
 800c998:	4a14      	ldr	r2, [pc, #80]	; (800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c99a:	fa22 f303 	lsr.w	r3, r2, r3
 800c99e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9a0:	e01e      	b.n	800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9a2:	4b11      	ldr	r3, [pc, #68]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9ae:	d106      	bne.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9b6:	d102      	bne.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9b8:	4b0d      	ldr	r3, [pc, #52]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9bc:	e010      	b.n	800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9be:	4b0a      	ldr	r3, [pc, #40]	; (800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9ca:	d106      	bne.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9d2:	d102      	bne.n	800c9da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9d4:	4b07      	ldr	r3, [pc, #28]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9d8:	e002      	b.n	800c9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c9de:	e2e2      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9e0:	e2e1      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c9e2:	4b05      	ldr	r3, [pc, #20]	; (800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e6:	e2de      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9e8:	58024400 	.word	0x58024400
 800c9ec:	03d09000 	.word	0x03d09000
 800c9f0:	003d0900 	.word	0x003d0900
 800c9f4:	017d7840 	.word	0x017d7840
 800c9f8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca00:	e2d1      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ca02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca06:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ca0a:	430b      	orrs	r3, r1
 800ca0c:	f040 809c 	bne.w	800cb48 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ca10:	4b93      	ldr	r3, [pc, #588]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca14:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ca18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca20:	d054      	beq.n	800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ca22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca28:	f200 808b 	bhi.w	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca32:	f000 8083 	beq.w	800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ca36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca3c:	f200 8081 	bhi.w	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca46:	d02f      	beq.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ca48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca4e:	d878      	bhi.n	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ca50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d004      	beq.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ca56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca5c:	d012      	beq.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ca5e:	e070      	b.n	800cb42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca60:	4b7f      	ldr	r3, [pc, #508]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca6c:	d107      	bne.n	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca72:	4618      	mov	r0, r3
 800ca74:	f000 fd5e 	bl	800d534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca7c:	e293      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca82:	e290      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca84:	4b76      	ldr	r3, [pc, #472]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca90:	d107      	bne.n	800caa2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca92:	f107 0318 	add.w	r3, r7, #24
 800ca96:	4618      	mov	r0, r3
 800ca98:	f000 faa4 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caa0:	e281      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caa2:	2300      	movs	r3, #0
 800caa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caa6:	e27e      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800caa8:	4b6d      	ldr	r3, [pc, #436]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cab4:	d107      	bne.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cab6:	f107 030c 	add.w	r3, r7, #12
 800caba:	4618      	mov	r0, r3
 800cabc:	f000 fbe6 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cac4:	e26f      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cac6:	2300      	movs	r3, #0
 800cac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caca:	e26c      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cacc:	4b64      	ldr	r3, [pc, #400]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cad4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cad6:	4b62      	ldr	r3, [pc, #392]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f003 0304 	and.w	r3, r3, #4
 800cade:	2b04      	cmp	r3, #4
 800cae0:	d10c      	bne.n	800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800cae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d109      	bne.n	800cafc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cae8:	4b5d      	ldr	r3, [pc, #372]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	08db      	lsrs	r3, r3, #3
 800caee:	f003 0303 	and.w	r3, r3, #3
 800caf2:	4a5c      	ldr	r2, [pc, #368]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800caf4:	fa22 f303 	lsr.w	r3, r2, r3
 800caf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cafa:	e01e      	b.n	800cb3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cafc:	4b58      	ldr	r3, [pc, #352]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb08:	d106      	bne.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800cb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb10:	d102      	bne.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb12:	4b55      	ldr	r3, [pc, #340]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cb14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb16:	e010      	b.n	800cb3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb18:	4b51      	ldr	r3, [pc, #324]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb24:	d106      	bne.n	800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800cb26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb2c:	d102      	bne.n	800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb2e:	4b4f      	ldr	r3, [pc, #316]	; (800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cb30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb32:	e002      	b.n	800cb3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb34:	2300      	movs	r3, #0
 800cb36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cb38:	e235      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb3a:	e234      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb3c:	4b4c      	ldr	r3, [pc, #304]	; (800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800cb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb40:	e231      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cb42:	2300      	movs	r3, #0
 800cb44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb46:	e22e      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cb48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb4c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cb50:	430b      	orrs	r3, r1
 800cb52:	f040 808f 	bne.w	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cb56:	4b42      	ldr	r3, [pc, #264]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb5a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cb5e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb66:	d06b      	beq.n	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb6e:	d874      	bhi.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb76:	d056      	beq.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb7e:	d86c      	bhi.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb86:	d03b      	beq.n	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb8e:	d864      	bhi.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb96:	d021      	beq.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb9e:	d85c      	bhi.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d004      	beq.n	800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbac:	d004      	beq.n	800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cbae:	e054      	b.n	800cc5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cbb0:	f7fe fa0a 	bl	800afc8 <HAL_RCC_GetPCLK1Freq>
 800cbb4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbb6:	e1f6      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbb8:	4b29      	ldr	r3, [pc, #164]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbc4:	d107      	bne.n	800cbd6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbc6:	f107 0318 	add.w	r3, r7, #24
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f000 fa0a 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbd4:	e1e7      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbda:	e1e4      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbdc:	4b20      	ldr	r3, [pc, #128]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbe8:	d107      	bne.n	800cbfa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbea:	f107 030c 	add.w	r3, r7, #12
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f000 fb4c 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbf8:	e1d5      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbfe:	e1d2      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cc00:	4b17      	ldr	r3, [pc, #92]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f003 0304 	and.w	r3, r3, #4
 800cc08:	2b04      	cmp	r3, #4
 800cc0a:	d109      	bne.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc0c:	4b14      	ldr	r3, [pc, #80]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	08db      	lsrs	r3, r3, #3
 800cc12:	f003 0303 	and.w	r3, r3, #3
 800cc16:	4a13      	ldr	r2, [pc, #76]	; (800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cc18:	fa22 f303 	lsr.w	r3, r2, r3
 800cc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc1e:	e1c2      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc20:	2300      	movs	r3, #0
 800cc22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc24:	e1bf      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cc26:	4b0e      	ldr	r3, [pc, #56]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc32:	d102      	bne.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cc34:	4b0c      	ldr	r3, [pc, #48]	; (800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cc36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc38:	e1b5      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc3e:	e1b2      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cc40:	4b07      	ldr	r3, [pc, #28]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc4c:	d102      	bne.n	800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cc4e:	4b07      	ldr	r3, [pc, #28]	; (800cc6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cc50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc52:	e1a8      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc54:	2300      	movs	r3, #0
 800cc56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc58:	e1a5      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc5e:	e1a2      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc60:	58024400 	.word	0x58024400
 800cc64:	03d09000 	.word	0x03d09000
 800cc68:	003d0900 	.word	0x003d0900
 800cc6c:	017d7840 	.word	0x017d7840
 800cc70:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cc74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc78:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cc7c:	430b      	orrs	r3, r1
 800cc7e:	d173      	bne.n	800cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cc80:	4b9c      	ldr	r3, [pc, #624]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cc88:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc90:	d02f      	beq.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc98:	d863      	bhi.n	800cd62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d004      	beq.n	800ccaa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cca6:	d012      	beq.n	800ccce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cca8:	e05b      	b.n	800cd62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccaa:	4b92      	ldr	r3, [pc, #584]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccb6:	d107      	bne.n	800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccb8:	f107 0318 	add.w	r3, r7, #24
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f000 f991 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ccc2:	69bb      	ldr	r3, [r7, #24]
 800ccc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccc6:	e16e      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cccc:	e16b      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccce:	4b89      	ldr	r3, [pc, #548]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccda:	d107      	bne.n	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccdc:	f107 030c 	add.w	r3, r7, #12
 800cce0:	4618      	mov	r0, r3
 800cce2:	f000 fad3 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccea:	e15c      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccec:	2300      	movs	r3, #0
 800ccee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccf0:	e159      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ccf2:	4b80      	ldr	r3, [pc, #512]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccf6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ccfa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ccfc:	4b7d      	ldr	r3, [pc, #500]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f003 0304 	and.w	r3, r3, #4
 800cd04:	2b04      	cmp	r3, #4
 800cd06:	d10c      	bne.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cd08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d109      	bne.n	800cd22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd0e:	4b79      	ldr	r3, [pc, #484]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	08db      	lsrs	r3, r3, #3
 800cd14:	f003 0303 	and.w	r3, r3, #3
 800cd18:	4a77      	ldr	r2, [pc, #476]	; (800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cd1a:	fa22 f303 	lsr.w	r3, r2, r3
 800cd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd20:	e01e      	b.n	800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd22:	4b74      	ldr	r3, [pc, #464]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd2e:	d106      	bne.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cd30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd36:	d102      	bne.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd38:	4b70      	ldr	r3, [pc, #448]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd3c:	e010      	b.n	800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd3e:	4b6d      	ldr	r3, [pc, #436]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd4a:	d106      	bne.n	800cd5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cd4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd52:	d102      	bne.n	800cd5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd54:	4b6a      	ldr	r3, [pc, #424]	; (800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cd56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd58:	e002      	b.n	800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd5e:	e122      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd60:	e121      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cd62:	2300      	movs	r3, #0
 800cd64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd66:	e11e      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cd68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd6c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cd70:	430b      	orrs	r3, r1
 800cd72:	d133      	bne.n	800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cd74:	4b5f      	ldr	r3, [pc, #380]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd7c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d004      	beq.n	800cd8e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd8a:	d012      	beq.n	800cdb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cd8c:	e023      	b.n	800cdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd8e:	4b59      	ldr	r3, [pc, #356]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd9a:	d107      	bne.n	800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cda0:	4618      	mov	r0, r3
 800cda2:	f000 fbc7 	bl	800d534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdaa:	e0fc      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdac:	2300      	movs	r3, #0
 800cdae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb0:	e0f9      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdb2:	4b50      	ldr	r3, [pc, #320]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cdbe:	d107      	bne.n	800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdc0:	f107 0318 	add.w	r3, r7, #24
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f000 f90d 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cdca:	6a3b      	ldr	r3, [r7, #32]
 800cdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdce:	e0ea      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdd4:	e0e7      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdda:	e0e4      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cde0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cde4:	430b      	orrs	r3, r1
 800cde6:	f040 808d 	bne.w	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cdea:	4b42      	ldr	r3, [pc, #264]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cdf2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cdfa:	d06b      	beq.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce02:	d874      	bhi.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce0a:	d056      	beq.n	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce12:	d86c      	bhi.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce1a:	d03b      	beq.n	800ce94 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ce1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce22:	d864      	bhi.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce2a:	d021      	beq.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ce2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce32:	d85c      	bhi.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ce34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d004      	beq.n	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce40:	d004      	beq.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ce42:	e054      	b.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ce44:	f000 f8b8 	bl	800cfb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce48:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce4a:	e0ac      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce4c:	4b29      	ldr	r3, [pc, #164]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce58:	d107      	bne.n	800ce6a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce5a:	f107 0318 	add.w	r3, r7, #24
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f000 f8c0 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce68:	e09d      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce6e:	e09a      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce70:	4b20      	ldr	r3, [pc, #128]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce7c:	d107      	bne.n	800ce8e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce7e:	f107 030c 	add.w	r3, r7, #12
 800ce82:	4618      	mov	r0, r3
 800ce84:	f000 fa02 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce8c:	e08b      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce92:	e088      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ce94:	4b17      	ldr	r3, [pc, #92]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f003 0304 	and.w	r3, r3, #4
 800ce9c:	2b04      	cmp	r3, #4
 800ce9e:	d109      	bne.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cea0:	4b14      	ldr	r3, [pc, #80]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	08db      	lsrs	r3, r3, #3
 800cea6:	f003 0303 	and.w	r3, r3, #3
 800ceaa:	4a13      	ldr	r2, [pc, #76]	; (800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ceac:	fa22 f303 	lsr.w	r3, r2, r3
 800ceb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceb2:	e078      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceb8:	e075      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ceba:	4b0e      	ldr	r3, [pc, #56]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cec6:	d102      	bne.n	800cece <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cec8:	4b0c      	ldr	r3, [pc, #48]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ceca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cecc:	e06b      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cece:	2300      	movs	r3, #0
 800ced0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ced2:	e068      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ced4:	4b07      	ldr	r3, [pc, #28]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cedc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cee0:	d102      	bne.n	800cee8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cee2:	4b07      	ldr	r3, [pc, #28]	; (800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cee6:	e05e      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cee8:	2300      	movs	r3, #0
 800ceea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceec:	e05b      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ceee:	2300      	movs	r3, #0
 800cef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cef2:	e058      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cef4:	58024400 	.word	0x58024400
 800cef8:	03d09000 	.word	0x03d09000
 800cefc:	003d0900 	.word	0x003d0900
 800cf00:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cf04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf08:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cf0c:	430b      	orrs	r3, r1
 800cf0e:	d148      	bne.n	800cfa2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cf10:	4b27      	ldr	r3, [pc, #156]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cf18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf20:	d02a      	beq.n	800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf28:	d838      	bhi.n	800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d004      	beq.n	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf36:	d00d      	beq.n	800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cf38:	e030      	b.n	800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf3a:	4b1d      	ldr	r3, [pc, #116]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf46:	d102      	bne.n	800cf4e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cf48:	4b1a      	ldr	r3, [pc, #104]	; (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf4c:	e02b      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf52:	e028      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf54:	4b16      	ldr	r3, [pc, #88]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf60:	d107      	bne.n	800cf72 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 fae4 	bl	800d534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf70:	e019      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf72:	2300      	movs	r3, #0
 800cf74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf76:	e016      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf78:	4b0d      	ldr	r3, [pc, #52]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf84:	d107      	bne.n	800cf96 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf86:	f107 0318 	add.w	r3, r7, #24
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f000 f82a 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cf90:	69fb      	ldr	r3, [r7, #28]
 800cf92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf94:	e007      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf96:	2300      	movs	r3, #0
 800cf98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf9a:	e004      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfa0:	e001      	b.n	800cfa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cfa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3740      	adds	r7, #64	; 0x40
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	58024400 	.word	0x58024400
 800cfb4:	017d7840 	.word	0x017d7840

0800cfb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cfbc:	f7fd ffd4 	bl	800af68 <HAL_RCC_GetHCLKFreq>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	4b06      	ldr	r3, [pc, #24]	; (800cfdc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cfc4:	6a1b      	ldr	r3, [r3, #32]
 800cfc6:	091b      	lsrs	r3, r3, #4
 800cfc8:	f003 0307 	and.w	r3, r3, #7
 800cfcc:	4904      	ldr	r1, [pc, #16]	; (800cfe0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cfce:	5ccb      	ldrb	r3, [r1, r3]
 800cfd0:	f003 031f 	and.w	r3, r3, #31
 800cfd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	58024400 	.word	0x58024400
 800cfe0:	080179e4 	.word	0x080179e4

0800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b089      	sub	sp, #36	; 0x24
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cfec:	4ba1      	ldr	r3, [pc, #644]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff0:	f003 0303 	and.w	r3, r3, #3
 800cff4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cff6:	4b9f      	ldr	r3, [pc, #636]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cffa:	0b1b      	lsrs	r3, r3, #12
 800cffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d000:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d002:	4b9c      	ldr	r3, [pc, #624]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d006:	091b      	lsrs	r3, r3, #4
 800d008:	f003 0301 	and.w	r3, r3, #1
 800d00c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d00e:	4b99      	ldr	r3, [pc, #612]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d012:	08db      	lsrs	r3, r3, #3
 800d014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d018:	693a      	ldr	r2, [r7, #16]
 800d01a:	fb02 f303 	mul.w	r3, r2, r3
 800d01e:	ee07 3a90 	vmov	s15, r3
 800d022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d026:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	f000 8111 	beq.w	800d254 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	2b02      	cmp	r3, #2
 800d036:	f000 8083 	beq.w	800d140 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	2b02      	cmp	r3, #2
 800d03e:	f200 80a1 	bhi.w	800d184 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d003      	beq.n	800d050 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d048:	69bb      	ldr	r3, [r7, #24]
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d056      	beq.n	800d0fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d04e:	e099      	b.n	800d184 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d050:	4b88      	ldr	r3, [pc, #544]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f003 0320 	and.w	r3, r3, #32
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d02d      	beq.n	800d0b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d05c:	4b85      	ldr	r3, [pc, #532]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	08db      	lsrs	r3, r3, #3
 800d062:	f003 0303 	and.w	r3, r3, #3
 800d066:	4a84      	ldr	r2, [pc, #528]	; (800d278 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d068:	fa22 f303 	lsr.w	r3, r2, r3
 800d06c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	ee07 3a90 	vmov	s15, r3
 800d074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	ee07 3a90 	vmov	s15, r3
 800d07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d086:	4b7b      	ldr	r3, [pc, #492]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d08e:	ee07 3a90 	vmov	s15, r3
 800d092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d096:	ed97 6a03 	vldr	s12, [r7, #12]
 800d09a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d0b6:	e087      	b.n	800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	ee07 3a90 	vmov	s15, r3
 800d0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d280 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0ca:	4b6a      	ldr	r3, [pc, #424]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0d2:	ee07 3a90 	vmov	s15, r3
 800d0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0da:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0fa:	e065      	b.n	800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	ee07 3a90 	vmov	s15, r3
 800d102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d106:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d10e:	4b59      	ldr	r3, [pc, #356]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d116:	ee07 3a90 	vmov	s15, r3
 800d11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d11e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d122:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d12e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d13a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d13e:	e043      	b.n	800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	ee07 3a90 	vmov	s15, r3
 800d146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d14a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d152:	4b48      	ldr	r3, [pc, #288]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d15a:	ee07 3a90 	vmov	s15, r3
 800d15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d162:	ed97 6a03 	vldr	s12, [r7, #12]
 800d166:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d17e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d182:	e021      	b.n	800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	ee07 3a90 	vmov	s15, r3
 800d18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d18e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d196:	4b37      	ldr	r3, [pc, #220]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d19e:	ee07 3a90 	vmov	s15, r3
 800d1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d1c8:	4b2a      	ldr	r3, [pc, #168]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1cc:	0a5b      	lsrs	r3, r3, #9
 800d1ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1d2:	ee07 3a90 	vmov	s15, r3
 800d1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1ee:	ee17 2a90 	vmov	r2, s15
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d1f6:	4b1f      	ldr	r3, [pc, #124]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1fa:	0c1b      	lsrs	r3, r3, #16
 800d1fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d200:	ee07 3a90 	vmov	s15, r3
 800d204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d20c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d210:	edd7 6a07 	vldr	s13, [r7, #28]
 800d214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d21c:	ee17 2a90 	vmov	r2, s15
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d224:	4b13      	ldr	r3, [pc, #76]	; (800d274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d228:	0e1b      	lsrs	r3, r3, #24
 800d22a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d22e:	ee07 3a90 	vmov	s15, r3
 800d232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d23a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d23e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d24a:	ee17 2a90 	vmov	r2, s15
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d252:	e008      	b.n	800d266 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2200      	movs	r2, #0
 800d25e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2200      	movs	r2, #0
 800d264:	609a      	str	r2, [r3, #8]
}
 800d266:	bf00      	nop
 800d268:	3724      	adds	r7, #36	; 0x24
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr
 800d272:	bf00      	nop
 800d274:	58024400 	.word	0x58024400
 800d278:	03d09000 	.word	0x03d09000
 800d27c:	46000000 	.word	0x46000000
 800d280:	4c742400 	.word	0x4c742400
 800d284:	4a742400 	.word	0x4a742400
 800d288:	4bbebc20 	.word	0x4bbebc20

0800d28c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b089      	sub	sp, #36	; 0x24
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d294:	4ba1      	ldr	r3, [pc, #644]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d298:	f003 0303 	and.w	r3, r3, #3
 800d29c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d29e:	4b9f      	ldr	r3, [pc, #636]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2a2:	0d1b      	lsrs	r3, r3, #20
 800d2a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d2aa:	4b9c      	ldr	r3, [pc, #624]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ae:	0a1b      	lsrs	r3, r3, #8
 800d2b0:	f003 0301 	and.w	r3, r3, #1
 800d2b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d2b6:	4b99      	ldr	r3, [pc, #612]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ba:	08db      	lsrs	r3, r3, #3
 800d2bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2c0:	693a      	ldr	r2, [r7, #16]
 800d2c2:	fb02 f303 	mul.w	r3, r2, r3
 800d2c6:	ee07 3a90 	vmov	s15, r3
 800d2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	f000 8111 	beq.w	800d4fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d2da:	69bb      	ldr	r3, [r7, #24]
 800d2dc:	2b02      	cmp	r3, #2
 800d2de:	f000 8083 	beq.w	800d3e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	f200 80a1 	bhi.w	800d42c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d2ea:	69bb      	ldr	r3, [r7, #24]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d003      	beq.n	800d2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d2f0:	69bb      	ldr	r3, [r7, #24]
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d056      	beq.n	800d3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d2f6:	e099      	b.n	800d42c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2f8:	4b88      	ldr	r3, [pc, #544]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 0320 	and.w	r3, r3, #32
 800d300:	2b00      	cmp	r3, #0
 800d302:	d02d      	beq.n	800d360 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d304:	4b85      	ldr	r3, [pc, #532]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	08db      	lsrs	r3, r3, #3
 800d30a:	f003 0303 	and.w	r3, r3, #3
 800d30e:	4a84      	ldr	r2, [pc, #528]	; (800d520 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d310:	fa22 f303 	lsr.w	r3, r2, r3
 800d314:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	ee07 3a90 	vmov	s15, r3
 800d31c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	ee07 3a90 	vmov	s15, r3
 800d326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d32a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d32e:	4b7b      	ldr	r3, [pc, #492]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d336:	ee07 3a90 	vmov	s15, r3
 800d33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d33e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d342:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d34e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d35a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d35e:	e087      	b.n	800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	ee07 3a90 	vmov	s15, r3
 800d366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d36a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d528 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d36e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d372:	4b6a      	ldr	r3, [pc, #424]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d37a:	ee07 3a90 	vmov	s15, r3
 800d37e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d382:	ed97 6a03 	vldr	s12, [r7, #12]
 800d386:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d38a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d38e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d39e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3a2:	e065      	b.n	800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	ee07 3a90 	vmov	s15, r3
 800d3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d52c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d3b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3b6:	4b59      	ldr	r3, [pc, #356]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3be:	ee07 3a90 	vmov	s15, r3
 800d3c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3e6:	e043      	b.n	800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	ee07 3a90 	vmov	s15, r3
 800d3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d3f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3fa:	4b48      	ldr	r3, [pc, #288]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d402:	ee07 3a90 	vmov	s15, r3
 800d406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d40a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d40e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d41a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d41e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d422:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d42a:	e021      	b.n	800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	ee07 3a90 	vmov	s15, r3
 800d432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d436:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d52c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d43a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d43e:	4b37      	ldr	r3, [pc, #220]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d446:	ee07 3a90 	vmov	s15, r3
 800d44a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d44e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d452:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d45a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d45e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d46a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d46e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d470:	4b2a      	ldr	r3, [pc, #168]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d474:	0a5b      	lsrs	r3, r3, #9
 800d476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d47a:	ee07 3a90 	vmov	s15, r3
 800d47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d48a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d48e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d496:	ee17 2a90 	vmov	r2, s15
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d49e:	4b1f      	ldr	r3, [pc, #124]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a2:	0c1b      	lsrs	r3, r3, #16
 800d4a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4a8:	ee07 3a90 	vmov	s15, r3
 800d4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4c4:	ee17 2a90 	vmov	r2, s15
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d4cc:	4b13      	ldr	r3, [pc, #76]	; (800d51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d0:	0e1b      	lsrs	r3, r3, #24
 800d4d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4d6:	ee07 3a90 	vmov	s15, r3
 800d4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4f2:	ee17 2a90 	vmov	r2, s15
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d4fa:	e008      	b.n	800d50e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2200      	movs	r2, #0
 800d500:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2200      	movs	r2, #0
 800d506:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2200      	movs	r2, #0
 800d50c:	609a      	str	r2, [r3, #8]
}
 800d50e:	bf00      	nop
 800d510:	3724      	adds	r7, #36	; 0x24
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr
 800d51a:	bf00      	nop
 800d51c:	58024400 	.word	0x58024400
 800d520:	03d09000 	.word	0x03d09000
 800d524:	46000000 	.word	0x46000000
 800d528:	4c742400 	.word	0x4c742400
 800d52c:	4a742400 	.word	0x4a742400
 800d530:	4bbebc20 	.word	0x4bbebc20

0800d534 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d534:	b480      	push	{r7}
 800d536:	b089      	sub	sp, #36	; 0x24
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d53c:	4ba0      	ldr	r3, [pc, #640]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d540:	f003 0303 	and.w	r3, r3, #3
 800d544:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d546:	4b9e      	ldr	r3, [pc, #632]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d54a:	091b      	lsrs	r3, r3, #4
 800d54c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d550:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d552:	4b9b      	ldr	r3, [pc, #620]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d556:	f003 0301 	and.w	r3, r3, #1
 800d55a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d55c:	4b98      	ldr	r3, [pc, #608]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d560:	08db      	lsrs	r3, r3, #3
 800d562:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d566:	693a      	ldr	r2, [r7, #16]
 800d568:	fb02 f303 	mul.w	r3, r2, r3
 800d56c:	ee07 3a90 	vmov	s15, r3
 800d570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d574:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	f000 8111 	beq.w	800d7a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d580:	69bb      	ldr	r3, [r7, #24]
 800d582:	2b02      	cmp	r3, #2
 800d584:	f000 8083 	beq.w	800d68e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d588:	69bb      	ldr	r3, [r7, #24]
 800d58a:	2b02      	cmp	r3, #2
 800d58c:	f200 80a1 	bhi.w	800d6d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d003      	beq.n	800d59e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d056      	beq.n	800d64a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d59c:	e099      	b.n	800d6d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d59e:	4b88      	ldr	r3, [pc, #544]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f003 0320 	and.w	r3, r3, #32
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d02d      	beq.n	800d606 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d5aa:	4b85      	ldr	r3, [pc, #532]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	08db      	lsrs	r3, r3, #3
 800d5b0:	f003 0303 	and.w	r3, r3, #3
 800d5b4:	4a83      	ldr	r2, [pc, #524]	; (800d7c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d5b6:	fa22 f303 	lsr.w	r3, r2, r3
 800d5ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	ee07 3a90 	vmov	s15, r3
 800d5c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	ee07 3a90 	vmov	s15, r3
 800d5cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5d4:	4b7a      	ldr	r3, [pc, #488]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5dc:	ee07 3a90 	vmov	s15, r3
 800d5e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d600:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d604:	e087      	b.n	800d716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	ee07 3a90 	vmov	s15, r3
 800d60c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d610:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d7cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d618:	4b69      	ldr	r3, [pc, #420]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d61a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d61c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d620:	ee07 3a90 	vmov	s15, r3
 800d624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d628:	ed97 6a03 	vldr	s12, [r7, #12]
 800d62c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d630:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d634:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d638:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d63c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d640:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d644:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d648:	e065      	b.n	800d716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	ee07 3a90 	vmov	s15, r3
 800d650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d654:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d65c:	4b58      	ldr	r3, [pc, #352]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d664:	ee07 3a90 	vmov	s15, r3
 800d668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d66c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d670:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d674:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d67c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d684:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d688:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d68c:	e043      	b.n	800d716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	ee07 3a90 	vmov	s15, r3
 800d694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d698:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d69c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6a0:	4b47      	ldr	r3, [pc, #284]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6a8:	ee07 3a90 	vmov	s15, r3
 800d6ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6d0:	e021      	b.n	800d716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	ee07 3a90 	vmov	s15, r3
 800d6d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6dc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d7cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d6e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6e4:	4b36      	ldr	r3, [pc, #216]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6ec:	ee07 3a90 	vmov	s15, r3
 800d6f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d70c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d710:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d714:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d716:	4b2a      	ldr	r3, [pc, #168]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d71a:	0a5b      	lsrs	r3, r3, #9
 800d71c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d720:	ee07 3a90 	vmov	s15, r3
 800d724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d72c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d730:	edd7 6a07 	vldr	s13, [r7, #28]
 800d734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d73c:	ee17 2a90 	vmov	r2, s15
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d744:	4b1e      	ldr	r3, [pc, #120]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d748:	0c1b      	lsrs	r3, r3, #16
 800d74a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d74e:	ee07 3a90 	vmov	s15, r3
 800d752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d75a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d75e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d76a:	ee17 2a90 	vmov	r2, s15
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d772:	4b13      	ldr	r3, [pc, #76]	; (800d7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d776:	0e1b      	lsrs	r3, r3, #24
 800d778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d77c:	ee07 3a90 	vmov	s15, r3
 800d780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d788:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d78c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d798:	ee17 2a90 	vmov	r2, s15
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d7a0:	e008      	b.n	800d7b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	609a      	str	r2, [r3, #8]
}
 800d7b4:	bf00      	nop
 800d7b6:	3724      	adds	r7, #36	; 0x24
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr
 800d7c0:	58024400 	.word	0x58024400
 800d7c4:	03d09000 	.word	0x03d09000
 800d7c8:	46000000 	.word	0x46000000
 800d7cc:	4c742400 	.word	0x4c742400
 800d7d0:	4a742400 	.word	0x4a742400
 800d7d4:	4bbebc20 	.word	0x4bbebc20

0800d7d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d7e6:	4b53      	ldr	r3, [pc, #332]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ea:	f003 0303 	and.w	r3, r3, #3
 800d7ee:	2b03      	cmp	r3, #3
 800d7f0:	d101      	bne.n	800d7f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e099      	b.n	800d92a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d7f6:	4b4f      	ldr	r3, [pc, #316]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	4a4e      	ldr	r2, [pc, #312]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d7fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d802:	f7f6 fc53 	bl	80040ac <HAL_GetTick>
 800d806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d808:	e008      	b.n	800d81c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d80a:	f7f6 fc4f 	bl	80040ac <HAL_GetTick>
 800d80e:	4602      	mov	r2, r0
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	2b02      	cmp	r3, #2
 800d816:	d901      	bls.n	800d81c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d818:	2303      	movs	r3, #3
 800d81a:	e086      	b.n	800d92a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d81c:	4b45      	ldr	r3, [pc, #276]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d824:	2b00      	cmp	r3, #0
 800d826:	d1f0      	bne.n	800d80a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d828:	4b42      	ldr	r3, [pc, #264]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d82c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	031b      	lsls	r3, r3, #12
 800d836:	493f      	ldr	r1, [pc, #252]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d838:	4313      	orrs	r3, r2
 800d83a:	628b      	str	r3, [r1, #40]	; 0x28
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	3b01      	subs	r3, #1
 800d842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	689b      	ldr	r3, [r3, #8]
 800d84a:	3b01      	subs	r3, #1
 800d84c:	025b      	lsls	r3, r3, #9
 800d84e:	b29b      	uxth	r3, r3
 800d850:	431a      	orrs	r2, r3
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	68db      	ldr	r3, [r3, #12]
 800d856:	3b01      	subs	r3, #1
 800d858:	041b      	lsls	r3, r3, #16
 800d85a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d85e:	431a      	orrs	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	691b      	ldr	r3, [r3, #16]
 800d864:	3b01      	subs	r3, #1
 800d866:	061b      	lsls	r3, r3, #24
 800d868:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d86c:	4931      	ldr	r1, [pc, #196]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d86e:	4313      	orrs	r3, r2
 800d870:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d872:	4b30      	ldr	r3, [pc, #192]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d876:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	695b      	ldr	r3, [r3, #20]
 800d87e:	492d      	ldr	r1, [pc, #180]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d880:	4313      	orrs	r3, r2
 800d882:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d884:	4b2b      	ldr	r3, [pc, #172]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d888:	f023 0220 	bic.w	r2, r3, #32
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	699b      	ldr	r3, [r3, #24]
 800d890:	4928      	ldr	r1, [pc, #160]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d892:	4313      	orrs	r3, r2
 800d894:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d896:	4b27      	ldr	r3, [pc, #156]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d89a:	4a26      	ldr	r2, [pc, #152]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d89c:	f023 0310 	bic.w	r3, r3, #16
 800d8a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d8a2:	4b24      	ldr	r3, [pc, #144]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d8a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8a6:	4b24      	ldr	r3, [pc, #144]	; (800d938 <RCCEx_PLL2_Config+0x160>)
 800d8a8:	4013      	ands	r3, r2
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	69d2      	ldr	r2, [r2, #28]
 800d8ae:	00d2      	lsls	r2, r2, #3
 800d8b0:	4920      	ldr	r1, [pc, #128]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d8b6:	4b1f      	ldr	r3, [pc, #124]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ba:	4a1e      	ldr	r2, [pc, #120]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d8bc:	f043 0310 	orr.w	r3, r3, #16
 800d8c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d106      	bne.n	800d8d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d8c8:	4b1a      	ldr	r3, [pc, #104]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8cc:	4a19      	ldr	r2, [pc, #100]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d8ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8d4:	e00f      	b.n	800d8f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d106      	bne.n	800d8ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d8dc:	4b15      	ldr	r3, [pc, #84]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e0:	4a14      	ldr	r2, [pc, #80]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d8e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8e8:	e005      	b.n	800d8f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d8ea:	4b12      	ldr	r3, [pc, #72]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d8ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ee:	4a11      	ldr	r2, [pc, #68]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d8f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d8f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d8f6:	4b0f      	ldr	r3, [pc, #60]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a0e      	ldr	r2, [pc, #56]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d8fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d902:	f7f6 fbd3 	bl	80040ac <HAL_GetTick>
 800d906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d908:	e008      	b.n	800d91c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d90a:	f7f6 fbcf 	bl	80040ac <HAL_GetTick>
 800d90e:	4602      	mov	r2, r0
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	1ad3      	subs	r3, r2, r3
 800d914:	2b02      	cmp	r3, #2
 800d916:	d901      	bls.n	800d91c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d918:	2303      	movs	r3, #3
 800d91a:	e006      	b.n	800d92a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d91c:	4b05      	ldr	r3, [pc, #20]	; (800d934 <RCCEx_PLL2_Config+0x15c>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d924:	2b00      	cmp	r3, #0
 800d926:	d0f0      	beq.n	800d90a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d928:	7bfb      	ldrb	r3, [r7, #15]
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}
 800d932:	bf00      	nop
 800d934:	58024400 	.word	0x58024400
 800d938:	ffff0007 	.word	0xffff0007

0800d93c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d946:	2300      	movs	r3, #0
 800d948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d94a:	4b53      	ldr	r3, [pc, #332]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800d94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d94e:	f003 0303 	and.w	r3, r3, #3
 800d952:	2b03      	cmp	r3, #3
 800d954:	d101      	bne.n	800d95a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d956:	2301      	movs	r3, #1
 800d958:	e099      	b.n	800da8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d95a:	4b4f      	ldr	r3, [pc, #316]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4a4e      	ldr	r2, [pc, #312]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800d960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d966:	f7f6 fba1 	bl	80040ac <HAL_GetTick>
 800d96a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d96c:	e008      	b.n	800d980 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d96e:	f7f6 fb9d 	bl	80040ac <HAL_GetTick>
 800d972:	4602      	mov	r2, r0
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	1ad3      	subs	r3, r2, r3
 800d978:	2b02      	cmp	r3, #2
 800d97a:	d901      	bls.n	800d980 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d97c:	2303      	movs	r3, #3
 800d97e:	e086      	b.n	800da8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d980:	4b45      	ldr	r3, [pc, #276]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d1f0      	bne.n	800d96e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d98c:	4b42      	ldr	r3, [pc, #264]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800d98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d990:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	051b      	lsls	r3, r3, #20
 800d99a:	493f      	ldr	r1, [pc, #252]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800d99c:	4313      	orrs	r3, r2
 800d99e:	628b      	str	r3, [r1, #40]	; 0x28
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	3b01      	subs	r3, #1
 800d9a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	689b      	ldr	r3, [r3, #8]
 800d9ae:	3b01      	subs	r3, #1
 800d9b0:	025b      	lsls	r3, r3, #9
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	431a      	orrs	r2, r3
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	3b01      	subs	r3, #1
 800d9bc:	041b      	lsls	r3, r3, #16
 800d9be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d9c2:	431a      	orrs	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	691b      	ldr	r3, [r3, #16]
 800d9c8:	3b01      	subs	r3, #1
 800d9ca:	061b      	lsls	r3, r3, #24
 800d9cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d9d0:	4931      	ldr	r1, [pc, #196]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d9d6:	4b30      	ldr	r3, [pc, #192]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800d9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	695b      	ldr	r3, [r3, #20]
 800d9e2:	492d      	ldr	r1, [pc, #180]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d9e8:	4b2b      	ldr	r3, [pc, #172]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800d9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	699b      	ldr	r3, [r3, #24]
 800d9f4:	4928      	ldr	r1, [pc, #160]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d9fa:	4b27      	ldr	r3, [pc, #156]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800d9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9fe:	4a26      	ldr	r2, [pc, #152]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800da00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800da04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800da06:	4b24      	ldr	r3, [pc, #144]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800da08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da0a:	4b24      	ldr	r3, [pc, #144]	; (800da9c <RCCEx_PLL3_Config+0x160>)
 800da0c:	4013      	ands	r3, r2
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	69d2      	ldr	r2, [r2, #28]
 800da12:	00d2      	lsls	r2, r2, #3
 800da14:	4920      	ldr	r1, [pc, #128]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800da16:	4313      	orrs	r3, r2
 800da18:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800da1a:	4b1f      	ldr	r3, [pc, #124]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800da1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da1e:	4a1e      	ldr	r2, [pc, #120]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800da20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d106      	bne.n	800da3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800da2c:	4b1a      	ldr	r3, [pc, #104]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800da2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da30:	4a19      	ldr	r2, [pc, #100]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800da32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800da36:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da38:	e00f      	b.n	800da5a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d106      	bne.n	800da4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800da40:	4b15      	ldr	r3, [pc, #84]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800da42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da44:	4a14      	ldr	r2, [pc, #80]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800da46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800da4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da4c:	e005      	b.n	800da5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800da4e:	4b12      	ldr	r3, [pc, #72]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800da50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da52:	4a11      	ldr	r2, [pc, #68]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800da54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800da58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800da5a:	4b0f      	ldr	r3, [pc, #60]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4a0e      	ldr	r2, [pc, #56]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800da60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da66:	f7f6 fb21 	bl	80040ac <HAL_GetTick>
 800da6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da6c:	e008      	b.n	800da80 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800da6e:	f7f6 fb1d 	bl	80040ac <HAL_GetTick>
 800da72:	4602      	mov	r2, r0
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	1ad3      	subs	r3, r2, r3
 800da78:	2b02      	cmp	r3, #2
 800da7a:	d901      	bls.n	800da80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da7c:	2303      	movs	r3, #3
 800da7e:	e006      	b.n	800da8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da80:	4b05      	ldr	r3, [pc, #20]	; (800da98 <RCCEx_PLL3_Config+0x15c>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d0f0      	beq.n	800da6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800da8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3710      	adds	r7, #16
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	58024400 	.word	0x58024400
 800da9c:	ffff0007 	.word	0xffff0007

0800daa0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800daa8:	2301      	movs	r3, #1
 800daaa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d071      	beq.n	800db96 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800dab8:	b2db      	uxtb	r3, r3
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d106      	bne.n	800dacc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f7f5 fdb2 	bl	8003630 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2202      	movs	r2, #2
 800dad0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	68db      	ldr	r3, [r3, #12]
 800dada:	f003 0310 	and.w	r3, r3, #16
 800dade:	2b10      	cmp	r3, #16
 800dae0:	d050      	beq.n	800db84 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	22ca      	movs	r2, #202	; 0xca
 800dae8:	625a      	str	r2, [r3, #36]	; 0x24
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2253      	movs	r2, #83	; 0x53
 800daf0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 fa4a 	bl	800df8c <RTC_EnterInitMode>
 800daf8:	4603      	mov	r3, r0
 800dafa:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800dafc:	7bfb      	ldrb	r3, [r7, #15]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d124      	bne.n	800db4c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	6899      	ldr	r1, [r3, #8]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	4b24      	ldr	r3, [pc, #144]	; (800dba0 <HAL_RTC_Init+0x100>)
 800db0e:	400b      	ands	r3, r1
 800db10:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	6899      	ldr	r1, [r3, #8]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	685a      	ldr	r2, [r3, #4]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	691b      	ldr	r3, [r3, #16]
 800db20:	431a      	orrs	r2, r3
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	699b      	ldr	r3, [r3, #24]
 800db26:	431a      	orrs	r2, r3
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	430a      	orrs	r2, r1
 800db2e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	689b      	ldr	r3, [r3, #8]
 800db34:	0419      	lsls	r1, r3, #16
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	68da      	ldr	r2, [r3, #12]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	430a      	orrs	r2, r1
 800db40:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 fa56 	bl	800dff4 <RTC_ExitInitMode>
 800db48:	4603      	mov	r3, r0
 800db4a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800db4c:	7bfb      	ldrb	r3, [r7, #15]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d113      	bne.n	800db7a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f022 0203 	bic.w	r2, r2, #3
 800db60:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	69da      	ldr	r2, [r3, #28]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	695b      	ldr	r3, [r3, #20]
 800db70:	431a      	orrs	r2, r3
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	430a      	orrs	r2, r1
 800db78:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	22ff      	movs	r2, #255	; 0xff
 800db80:	625a      	str	r2, [r3, #36]	; 0x24
 800db82:	e001      	b.n	800db88 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800db84:	2300      	movs	r3, #0
 800db86:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800db88:	7bfb      	ldrb	r3, [r7, #15]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d103      	bne.n	800db96 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2201      	movs	r2, #1
 800db92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800db96:	7bfb      	ldrb	r3, [r7, #15]
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3710      	adds	r7, #16
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	ff8fffbf 	.word	0xff8fffbf

0800dba4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dba4:	b590      	push	{r4, r7, lr}
 800dba6:	b087      	sub	sp, #28
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d101      	bne.n	800dbbe <HAL_RTC_SetTime+0x1a>
 800dbba:	2302      	movs	r3, #2
 800dbbc:	e089      	b.n	800dcd2 <HAL_RTC_SetTime+0x12e>
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2202      	movs	r2, #2
 800dbca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	22ca      	movs	r2, #202	; 0xca
 800dbd4:	625a      	str	r2, [r3, #36]	; 0x24
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2253      	movs	r2, #83	; 0x53
 800dbdc:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f000 f9d4 	bl	800df8c <RTC_EnterInitMode>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dbe8:	7cfb      	ldrb	r3, [r7, #19]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d161      	bne.n	800dcb2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d126      	bne.n	800dc42 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	689b      	ldr	r3, [r3, #8]
 800dbfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d102      	bne.n	800dc08 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	2200      	movs	r2, #0
 800dc06:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	781b      	ldrb	r3, [r3, #0]
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f000 fa2f 	bl	800e070 <RTC_ByteToBcd2>
 800dc12:	4603      	mov	r3, r0
 800dc14:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	785b      	ldrb	r3, [r3, #1]
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f000 fa28 	bl	800e070 <RTC_ByteToBcd2>
 800dc20:	4603      	mov	r3, r0
 800dc22:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc24:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	789b      	ldrb	r3, [r3, #2]
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f000 fa20 	bl	800e070 <RTC_ByteToBcd2>
 800dc30:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc32:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	78db      	ldrb	r3, [r3, #3]
 800dc3a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	617b      	str	r3, [r7, #20]
 800dc40:	e018      	b.n	800dc74 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d102      	bne.n	800dc56 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	2200      	movs	r2, #0
 800dc54:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	785b      	ldrb	r3, [r3, #1]
 800dc60:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc62:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dc64:	68ba      	ldr	r2, [r7, #8]
 800dc66:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dc68:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	78db      	ldrb	r3, [r3, #3]
 800dc6e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dc70:	4313      	orrs	r3, r2
 800dc72:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	6979      	ldr	r1, [r7, #20]
 800dc7a:	4b18      	ldr	r3, [pc, #96]	; (800dcdc <HAL_RTC_SetTime+0x138>)
 800dc7c:	400b      	ands	r3, r1
 800dc7e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	689a      	ldr	r2, [r3, #8]
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dc8e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	6899      	ldr	r1, [r3, #8]
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	68da      	ldr	r2, [r3, #12]
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	691b      	ldr	r3, [r3, #16]
 800dc9e:	431a      	orrs	r2, r3
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	430a      	orrs	r2, r1
 800dca6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dca8:	68f8      	ldr	r0, [r7, #12]
 800dcaa:	f000 f9a3 	bl	800dff4 <RTC_ExitInitMode>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	22ff      	movs	r2, #255	; 0xff
 800dcb8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dcba:	7cfb      	ldrb	r3, [r7, #19]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d103      	bne.n	800dcc8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2200      	movs	r2, #0
 800dccc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dcd0:	7cfb      	ldrb	r3, [r7, #19]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	371c      	adds	r7, #28
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd90      	pop	{r4, r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	007f7f7f 	.word	0x007f7f7f

0800dce0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b086      	sub	sp, #24
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	60b9      	str	r1, [r7, #8]
 800dcea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	691b      	ldr	r3, [r3, #16]
 800dcfc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	4b22      	ldr	r3, [pc, #136]	; (800dd94 <HAL_RTC_GetTime+0xb4>)
 800dd0c:	4013      	ands	r3, r2
 800dd0e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	0c1b      	lsrs	r3, r3, #16
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd1a:	b2da      	uxtb	r2, r3
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	0a1b      	lsrs	r3, r3, #8
 800dd24:	b2db      	uxtb	r3, r3
 800dd26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd2a:	b2da      	uxtb	r2, r3
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd38:	b2da      	uxtb	r2, r3
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	0d9b      	lsrs	r3, r3, #22
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	f003 0301 	and.w	r3, r3, #1
 800dd48:	b2da      	uxtb	r2, r3
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d11a      	bne.n	800dd8a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f000 f9a9 	bl	800e0b0 <RTC_Bcd2ToByte>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	461a      	mov	r2, r3
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	785b      	ldrb	r3, [r3, #1]
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f000 f9a0 	bl	800e0b0 <RTC_Bcd2ToByte>
 800dd70:	4603      	mov	r3, r0
 800dd72:	461a      	mov	r2, r3
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	789b      	ldrb	r3, [r3, #2]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f000 f997 	bl	800e0b0 <RTC_Bcd2ToByte>
 800dd82:	4603      	mov	r3, r0
 800dd84:	461a      	mov	r2, r3
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dd8a:	2300      	movs	r3, #0
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3718      	adds	r7, #24
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	007f7f7f 	.word	0x007f7f7f

0800dd98 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dd98:	b590      	push	{r4, r7, lr}
 800dd9a:	b087      	sub	sp, #28
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	60f8      	str	r0, [r7, #12]
 800dda0:	60b9      	str	r1, [r7, #8]
 800dda2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d101      	bne.n	800ddb2 <HAL_RTC_SetDate+0x1a>
 800ddae:	2302      	movs	r3, #2
 800ddb0:	e073      	b.n	800de9a <HAL_RTC_SetDate+0x102>
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2202      	movs	r2, #2
 800ddbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d10e      	bne.n	800dde6 <HAL_RTC_SetDate+0x4e>
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	785b      	ldrb	r3, [r3, #1]
 800ddcc:	f003 0310 	and.w	r3, r3, #16
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d008      	beq.n	800dde6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	785b      	ldrb	r3, [r3, #1]
 800ddd8:	f023 0310 	bic.w	r3, r3, #16
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	330a      	adds	r3, #10
 800dde0:	b2da      	uxtb	r2, r3
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d11c      	bne.n	800de26 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	78db      	ldrb	r3, [r3, #3]
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f000 f93d 	bl	800e070 <RTC_ByteToBcd2>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	785b      	ldrb	r3, [r3, #1]
 800ddfe:	4618      	mov	r0, r3
 800de00:	f000 f936 	bl	800e070 <RTC_ByteToBcd2>
 800de04:	4603      	mov	r3, r0
 800de06:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800de08:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	789b      	ldrb	r3, [r3, #2]
 800de0e:	4618      	mov	r0, r3
 800de10:	f000 f92e 	bl	800e070 <RTC_ByteToBcd2>
 800de14:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800de16:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800de20:	4313      	orrs	r3, r2
 800de22:	617b      	str	r3, [r7, #20]
 800de24:	e00e      	b.n	800de44 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	78db      	ldrb	r3, [r3, #3]
 800de2a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	785b      	ldrb	r3, [r3, #1]
 800de30:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800de32:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800de34:	68ba      	ldr	r2, [r7, #8]
 800de36:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800de38:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800de40:	4313      	orrs	r3, r2
 800de42:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	22ca      	movs	r2, #202	; 0xca
 800de4a:	625a      	str	r2, [r3, #36]	; 0x24
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2253      	movs	r2, #83	; 0x53
 800de52:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800de54:	68f8      	ldr	r0, [r7, #12]
 800de56:	f000 f899 	bl	800df8c <RTC_EnterInitMode>
 800de5a:	4603      	mov	r3, r0
 800de5c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800de5e:	7cfb      	ldrb	r3, [r7, #19]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d10a      	bne.n	800de7a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681a      	ldr	r2, [r3, #0]
 800de68:	6979      	ldr	r1, [r7, #20]
 800de6a:	4b0e      	ldr	r3, [pc, #56]	; (800dea4 <HAL_RTC_SetDate+0x10c>)
 800de6c:	400b      	ands	r3, r1
 800de6e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800de70:	68f8      	ldr	r0, [r7, #12]
 800de72:	f000 f8bf 	bl	800dff4 <RTC_ExitInitMode>
 800de76:	4603      	mov	r3, r0
 800de78:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	22ff      	movs	r2, #255	; 0xff
 800de80:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800de82:	7cfb      	ldrb	r3, [r7, #19]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d103      	bne.n	800de90 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2200      	movs	r2, #0
 800de94:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800de98:	7cfb      	ldrb	r3, [r7, #19]


}
 800de9a:	4618      	mov	r0, r3
 800de9c:	371c      	adds	r7, #28
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd90      	pop	{r4, r7, pc}
 800dea2:	bf00      	nop
 800dea4:	00ffff3f 	.word	0x00ffff3f

0800dea8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b086      	sub	sp, #24
 800deac:	af00      	add	r7, sp, #0
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	60b9      	str	r1, [r7, #8]
 800deb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	685a      	ldr	r2, [r3, #4]
 800deba:	4b21      	ldr	r3, [pc, #132]	; (800df40 <HAL_RTC_GetDate+0x98>)
 800debc:	4013      	ands	r3, r2
 800debe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	0c1b      	lsrs	r3, r3, #16
 800dec4:	b2da      	uxtb	r2, r3
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	0a1b      	lsrs	r3, r3, #8
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	f003 031f 	and.w	r3, r3, #31
 800ded4:	b2da      	uxtb	r2, r3
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dee2:	b2da      	uxtb	r2, r3
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	0b5b      	lsrs	r3, r3, #13
 800deec:	b2db      	uxtb	r3, r3
 800deee:	f003 0307 	and.w	r3, r3, #7
 800def2:	b2da      	uxtb	r2, r3
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d11a      	bne.n	800df34 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	78db      	ldrb	r3, [r3, #3]
 800df02:	4618      	mov	r0, r3
 800df04:	f000 f8d4 	bl	800e0b0 <RTC_Bcd2ToByte>
 800df08:	4603      	mov	r3, r0
 800df0a:	461a      	mov	r2, r3
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	785b      	ldrb	r3, [r3, #1]
 800df14:	4618      	mov	r0, r3
 800df16:	f000 f8cb 	bl	800e0b0 <RTC_Bcd2ToByte>
 800df1a:	4603      	mov	r3, r0
 800df1c:	461a      	mov	r2, r3
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	789b      	ldrb	r3, [r3, #2]
 800df26:	4618      	mov	r0, r3
 800df28:	f000 f8c2 	bl	800e0b0 <RTC_Bcd2ToByte>
 800df2c:	4603      	mov	r3, r0
 800df2e:	461a      	mov	r2, r3
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800df34:	2300      	movs	r3, #0
}
 800df36:	4618      	mov	r0, r3
 800df38:	3718      	adds	r7, #24
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
 800df3e:	bf00      	nop
 800df40:	00ffff3f 	.word	0x00ffff3f

0800df44 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a0d      	ldr	r2, [pc, #52]	; (800df88 <HAL_RTC_WaitForSynchro+0x44>)
 800df52:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800df54:	f7f6 f8aa 	bl	80040ac <HAL_GetTick>
 800df58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800df5a:	e009      	b.n	800df70 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800df5c:	f7f6 f8a6 	bl	80040ac <HAL_GetTick>
 800df60:	4602      	mov	r2, r0
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	1ad3      	subs	r3, r2, r3
 800df66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df6a:	d901      	bls.n	800df70 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800df6c:	2303      	movs	r3, #3
 800df6e:	e007      	b.n	800df80 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	f003 0320 	and.w	r3, r3, #32
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d0ee      	beq.n	800df5c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800df7e:	2300      	movs	r3, #0
}
 800df80:	4618      	mov	r0, r3
 800df82:	3710      	adds	r7, #16
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	0003ff5f 	.word	0x0003ff5f

0800df8c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b084      	sub	sp, #16
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800df94:	2300      	movs	r3, #0
 800df96:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d120      	bne.n	800dfe8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dfb0:	f7f6 f87c 	bl	80040ac <HAL_GetTick>
 800dfb4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dfb6:	e00d      	b.n	800dfd4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dfb8:	f7f6 f878 	bl	80040ac <HAL_GetTick>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	1ad3      	subs	r3, r2, r3
 800dfc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfc6:	d905      	bls.n	800dfd4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800dfc8:	2303      	movs	r3, #3
 800dfca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2203      	movs	r2, #3
 800dfd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	68db      	ldr	r3, [r3, #12]
 800dfda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d102      	bne.n	800dfe8 <RTC_EnterInitMode+0x5c>
 800dfe2:	7bfb      	ldrb	r3, [r7, #15]
 800dfe4:	2b03      	cmp	r3, #3
 800dfe6:	d1e7      	bne.n	800dfb8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800dfe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3710      	adds	r7, #16
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
	...

0800dff4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dffc:	2300      	movs	r3, #0
 800dffe:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800e000:	4b1a      	ldr	r3, [pc, #104]	; (800e06c <RTC_ExitInitMode+0x78>)
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	4a19      	ldr	r2, [pc, #100]	; (800e06c <RTC_ExitInitMode+0x78>)
 800e006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e00a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e00c:	4b17      	ldr	r3, [pc, #92]	; (800e06c <RTC_ExitInitMode+0x78>)
 800e00e:	689b      	ldr	r3, [r3, #8]
 800e010:	f003 0320 	and.w	r3, r3, #32
 800e014:	2b00      	cmp	r3, #0
 800e016:	d10c      	bne.n	800e032 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f7ff ff93 	bl	800df44 <HAL_RTC_WaitForSynchro>
 800e01e:	4603      	mov	r3, r0
 800e020:	2b00      	cmp	r3, #0
 800e022:	d01e      	beq.n	800e062 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2203      	movs	r2, #3
 800e028:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e02c:	2303      	movs	r3, #3
 800e02e:	73fb      	strb	r3, [r7, #15]
 800e030:	e017      	b.n	800e062 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e032:	4b0e      	ldr	r3, [pc, #56]	; (800e06c <RTC_ExitInitMode+0x78>)
 800e034:	689b      	ldr	r3, [r3, #8]
 800e036:	4a0d      	ldr	r2, [pc, #52]	; (800e06c <RTC_ExitInitMode+0x78>)
 800e038:	f023 0320 	bic.w	r3, r3, #32
 800e03c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f7ff ff80 	bl	800df44 <HAL_RTC_WaitForSynchro>
 800e044:	4603      	mov	r3, r0
 800e046:	2b00      	cmp	r3, #0
 800e048:	d005      	beq.n	800e056 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2203      	movs	r2, #3
 800e04e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e052:	2303      	movs	r3, #3
 800e054:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e056:	4b05      	ldr	r3, [pc, #20]	; (800e06c <RTC_ExitInitMode+0x78>)
 800e058:	689b      	ldr	r3, [r3, #8]
 800e05a:	4a04      	ldr	r2, [pc, #16]	; (800e06c <RTC_ExitInitMode+0x78>)
 800e05c:	f043 0320 	orr.w	r3, r3, #32
 800e060:	6093      	str	r3, [r2, #8]
  }

  return status;
 800e062:	7bfb      	ldrb	r3, [r7, #15]
}
 800e064:	4618      	mov	r0, r3
 800e066:	3710      	adds	r7, #16
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}
 800e06c:	58004000 	.word	0x58004000

0800e070 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e070:	b480      	push	{r7}
 800e072:	b085      	sub	sp, #20
 800e074:	af00      	add	r7, sp, #0
 800e076:	4603      	mov	r3, r0
 800e078:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e07a:	2300      	movs	r3, #0
 800e07c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800e07e:	79fb      	ldrb	r3, [r7, #7]
 800e080:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800e082:	e005      	b.n	800e090 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	3301      	adds	r3, #1
 800e088:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800e08a:	7afb      	ldrb	r3, [r7, #11]
 800e08c:	3b0a      	subs	r3, #10
 800e08e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800e090:	7afb      	ldrb	r3, [r7, #11]
 800e092:	2b09      	cmp	r3, #9
 800e094:	d8f6      	bhi.n	800e084 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	011b      	lsls	r3, r3, #4
 800e09c:	b2da      	uxtb	r2, r3
 800e09e:	7afb      	ldrb	r3, [r7, #11]
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	b2db      	uxtb	r3, r3
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3714      	adds	r7, #20
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b085      	sub	sp, #20
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e0ba:	79fb      	ldrb	r3, [r7, #7]
 800e0bc:	091b      	lsrs	r3, r3, #4
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	0092      	lsls	r2, r2, #2
 800e0c4:	4413      	add	r3, r2
 800e0c6:	005b      	lsls	r3, r3, #1
 800e0c8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e0ca:	79fb      	ldrb	r3, [r7, #7]
 800e0cc:	f003 030f 	and.w	r3, r3, #15
 800e0d0:	b2da      	uxtb	r2, r3
 800e0d2:	7bfb      	ldrb	r3, [r7, #15]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	b2db      	uxtb	r3, r3
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3714      	adds	r7, #20
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d101      	bne.n	800e0f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	e10f      	b.n	800e316 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a87      	ldr	r2, [pc, #540]	; (800e320 <HAL_SPI_Init+0x23c>)
 800e102:	4293      	cmp	r3, r2
 800e104:	d00f      	beq.n	800e126 <HAL_SPI_Init+0x42>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	4a86      	ldr	r2, [pc, #536]	; (800e324 <HAL_SPI_Init+0x240>)
 800e10c:	4293      	cmp	r3, r2
 800e10e:	d00a      	beq.n	800e126 <HAL_SPI_Init+0x42>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4a84      	ldr	r2, [pc, #528]	; (800e328 <HAL_SPI_Init+0x244>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d005      	beq.n	800e126 <HAL_SPI_Init+0x42>
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	2b0f      	cmp	r3, #15
 800e120:	d901      	bls.n	800e126 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e122:	2301      	movs	r3, #1
 800e124:	e0f7      	b.n	800e316 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 fc12 	bl	800e950 <SPI_GetPacketSize>
 800e12c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	4a7b      	ldr	r2, [pc, #492]	; (800e320 <HAL_SPI_Init+0x23c>)
 800e134:	4293      	cmp	r3, r2
 800e136:	d00c      	beq.n	800e152 <HAL_SPI_Init+0x6e>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4a79      	ldr	r2, [pc, #484]	; (800e324 <HAL_SPI_Init+0x240>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d007      	beq.n	800e152 <HAL_SPI_Init+0x6e>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4a78      	ldr	r2, [pc, #480]	; (800e328 <HAL_SPI_Init+0x244>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d002      	beq.n	800e152 <HAL_SPI_Init+0x6e>
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2b08      	cmp	r3, #8
 800e150:	d811      	bhi.n	800e176 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e156:	4a72      	ldr	r2, [pc, #456]	; (800e320 <HAL_SPI_Init+0x23c>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d009      	beq.n	800e170 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a70      	ldr	r2, [pc, #448]	; (800e324 <HAL_SPI_Init+0x240>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d004      	beq.n	800e170 <HAL_SPI_Init+0x8c>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a6f      	ldr	r2, [pc, #444]	; (800e328 <HAL_SPI_Init+0x244>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d104      	bne.n	800e17a <HAL_SPI_Init+0x96>
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	2b10      	cmp	r3, #16
 800e174:	d901      	bls.n	800e17a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e176:	2301      	movs	r3, #1
 800e178:	e0cd      	b.n	800e316 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e180:	b2db      	uxtb	r3, r3
 800e182:	2b00      	cmp	r3, #0
 800e184:	d106      	bne.n	800e194 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2200      	movs	r2, #0
 800e18a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f7f5 fa82 	bl	8003698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2202      	movs	r2, #2
 800e198:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	f022 0201 	bic.w	r2, r2, #1
 800e1aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e1b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	699b      	ldr	r3, [r3, #24]
 800e1bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e1c0:	d119      	bne.n	800e1f6 <HAL_SPI_Init+0x112>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1ca:	d103      	bne.n	800e1d4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d008      	beq.n	800e1e6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d10c      	bne.n	800e1f6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e1e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e1e4:	d107      	bne.n	800e1f6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e1f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d00f      	beq.n	800e222 <HAL_SPI_Init+0x13e>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	68db      	ldr	r3, [r3, #12]
 800e206:	2b06      	cmp	r3, #6
 800e208:	d90b      	bls.n	800e222 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	430a      	orrs	r2, r1
 800e21e:	601a      	str	r2, [r3, #0]
 800e220:	e007      	b.n	800e232 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	681a      	ldr	r2, [r3, #0]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e230:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	69da      	ldr	r2, [r3, #28]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e23a:	431a      	orrs	r2, r3
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	431a      	orrs	r2, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e244:	ea42 0103 	orr.w	r1, r2, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	68da      	ldr	r2, [r3, #12]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	430a      	orrs	r2, r1
 800e252:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e25c:	431a      	orrs	r2, r3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e262:	431a      	orrs	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	699b      	ldr	r3, [r3, #24]
 800e268:	431a      	orrs	r2, r3
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	691b      	ldr	r3, [r3, #16]
 800e26e:	431a      	orrs	r2, r3
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	695b      	ldr	r3, [r3, #20]
 800e274:	431a      	orrs	r2, r3
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6a1b      	ldr	r3, [r3, #32]
 800e27a:	431a      	orrs	r2, r3
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	685b      	ldr	r3, [r3, #4]
 800e280:	431a      	orrs	r2, r3
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e286:	431a      	orrs	r2, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	689b      	ldr	r3, [r3, #8]
 800e28c:	431a      	orrs	r2, r3
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e292:	ea42 0103 	orr.w	r1, r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	430a      	orrs	r2, r1
 800e2a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	685b      	ldr	r3, [r3, #4]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d113      	bne.n	800e2d2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	689b      	ldr	r3, [r3, #8]
 800e2b0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e2bc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e2d0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f022 0201 	bic.w	r2, r2, #1
 800e2e0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	685b      	ldr	r3, [r3, #4]
 800e2e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d00a      	beq.n	800e304 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	430a      	orrs	r2, r1
 800e302:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2200      	movs	r2, #0
 800e308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2201      	movs	r2, #1
 800e310:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e314:	2300      	movs	r3, #0
}
 800e316:	4618      	mov	r0, r3
 800e318:	3710      	adds	r7, #16
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop
 800e320:	40013000 	.word	0x40013000
 800e324:	40003800 	.word	0x40003800
 800e328:	40003c00 	.word	0x40003c00

0800e32c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b088      	sub	sp, #32
 800e330:	af00      	add	r7, sp, #0
 800e332:	60f8      	str	r0, [r7, #12]
 800e334:	60b9      	str	r1, [r7, #8]
 800e336:	603b      	str	r3, [r7, #0]
 800e338:	4613      	mov	r3, r2
 800e33a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e340:	095b      	lsrs	r3, r3, #5
 800e342:	b29b      	uxth	r3, r3
 800e344:	3301      	adds	r3, #1
 800e346:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	3330      	adds	r3, #48	; 0x30
 800e34e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e350:	f7f5 feac 	bl	80040ac <HAL_GetTick>
 800e354:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e35c:	b2db      	uxtb	r3, r3
 800e35e:	2b01      	cmp	r3, #1
 800e360:	d001      	beq.n	800e366 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e362:	2302      	movs	r3, #2
 800e364:	e250      	b.n	800e808 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d002      	beq.n	800e372 <HAL_SPI_Receive+0x46>
 800e36c:	88fb      	ldrh	r3, [r7, #6]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d101      	bne.n	800e376 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e372:	2301      	movs	r3, #1
 800e374:	e248      	b.n	800e808 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d101      	bne.n	800e384 <HAL_SPI_Receive+0x58>
 800e380:	2302      	movs	r3, #2
 800e382:	e241      	b.n	800e808 <HAL_SPI_Receive+0x4dc>
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2201      	movs	r2, #1
 800e388:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2204      	movs	r2, #4
 800e390:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	68ba      	ldr	r2, [r7, #8]
 800e3a0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	88fa      	ldrh	r2, [r7, #6]
 800e3a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	88fa      	ldrh	r2, [r7, #6]
 800e3ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	689b      	ldr	r3, [r3, #8]
 800e3d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e3dc:	d108      	bne.n	800e3f0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e3ec:	601a      	str	r2, [r3, #0]
 800e3ee:	e009      	b.n	800e404 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	68db      	ldr	r3, [r3, #12]
 800e3f6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e402:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	685a      	ldr	r2, [r3, #4]
 800e40a:	4b95      	ldr	r3, [pc, #596]	; (800e660 <HAL_SPI_Receive+0x334>)
 800e40c:	4013      	ands	r3, r2
 800e40e:	88f9      	ldrh	r1, [r7, #6]
 800e410:	68fa      	ldr	r2, [r7, #12]
 800e412:	6812      	ldr	r2, [r2, #0]
 800e414:	430b      	orrs	r3, r1
 800e416:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f042 0201 	orr.w	r2, r2, #1
 800e426:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e430:	d107      	bne.n	800e442 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e440:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	68db      	ldr	r3, [r3, #12]
 800e446:	2b0f      	cmp	r3, #15
 800e448:	d96c      	bls.n	800e524 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e44a:	e064      	b.n	800e516 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	695b      	ldr	r3, [r3, #20]
 800e452:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	695b      	ldr	r3, [r3, #20]
 800e45a:	f003 0301 	and.w	r3, r3, #1
 800e45e:	2b01      	cmp	r3, #1
 800e460:	d114      	bne.n	800e48c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681a      	ldr	r2, [r3, #0]
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e46a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e46c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e472:	1d1a      	adds	r2, r3, #4
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e47e:	b29b      	uxth	r3, r3
 800e480:	3b01      	subs	r3, #1
 800e482:	b29a      	uxth	r2, r3
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e48a:	e044      	b.n	800e516 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e492:	b29b      	uxth	r3, r3
 800e494:	8bfa      	ldrh	r2, [r7, #30]
 800e496:	429a      	cmp	r2, r3
 800e498:	d919      	bls.n	800e4ce <HAL_SPI_Receive+0x1a2>
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d014      	beq.n	800e4ce <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e4ae:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4b4:	1d1a      	adds	r2, r3, #4
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	3b01      	subs	r3, #1
 800e4c4:	b29a      	uxth	r2, r3
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4cc:	e023      	b.n	800e516 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4ce:	f7f5 fded 	bl	80040ac <HAL_GetTick>
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	1ad3      	subs	r3, r2, r3
 800e4d8:	683a      	ldr	r2, [r7, #0]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d803      	bhi.n	800e4e6 <HAL_SPI_Receive+0x1ba>
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4e4:	d102      	bne.n	800e4ec <HAL_SPI_Receive+0x1c0>
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d114      	bne.n	800e516 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	f000 f98f 	bl	800e810 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2201      	movs	r2, #1
 800e506:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2200      	movs	r2, #0
 800e50e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e512:	2303      	movs	r3, #3
 800e514:	e178      	b.n	800e808 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d194      	bne.n	800e44c <HAL_SPI_Receive+0x120>
 800e522:	e15e      	b.n	800e7e2 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	2b07      	cmp	r3, #7
 800e52a:	f240 8153 	bls.w	800e7d4 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e52e:	e08f      	b.n	800e650 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	695b      	ldr	r3, [r3, #20]
 800e536:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	695b      	ldr	r3, [r3, #20]
 800e53e:	f003 0301 	and.w	r3, r3, #1
 800e542:	2b01      	cmp	r3, #1
 800e544:	d114      	bne.n	800e570 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e54a:	69ba      	ldr	r2, [r7, #24]
 800e54c:	8812      	ldrh	r2, [r2, #0]
 800e54e:	b292      	uxth	r2, r2
 800e550:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e556:	1c9a      	adds	r2, r3, #2
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e562:	b29b      	uxth	r3, r3
 800e564:	3b01      	subs	r3, #1
 800e566:	b29a      	uxth	r2, r3
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e56e:	e06f      	b.n	800e650 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e576:	b29b      	uxth	r3, r3
 800e578:	8bfa      	ldrh	r2, [r7, #30]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d924      	bls.n	800e5c8 <HAL_SPI_Receive+0x29c>
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e584:	2b00      	cmp	r3, #0
 800e586:	d01f      	beq.n	800e5c8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e58c:	69ba      	ldr	r2, [r7, #24]
 800e58e:	8812      	ldrh	r2, [r2, #0]
 800e590:	b292      	uxth	r2, r2
 800e592:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e598:	1c9a      	adds	r2, r3, #2
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5a2:	69ba      	ldr	r2, [r7, #24]
 800e5a4:	8812      	ldrh	r2, [r2, #0]
 800e5a6:	b292      	uxth	r2, r2
 800e5a8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5ae:	1c9a      	adds	r2, r3, #2
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	3b02      	subs	r3, #2
 800e5be:	b29a      	uxth	r2, r3
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e5c6:	e043      	b.n	800e650 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d119      	bne.n	800e608 <HAL_SPI_Receive+0x2dc>
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d014      	beq.n	800e608 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5e2:	69ba      	ldr	r2, [r7, #24]
 800e5e4:	8812      	ldrh	r2, [r2, #0]
 800e5e6:	b292      	uxth	r2, r2
 800e5e8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5ee:	1c9a      	adds	r2, r3, #2
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	3b01      	subs	r3, #1
 800e5fe:	b29a      	uxth	r2, r3
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e606:	e023      	b.n	800e650 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e608:	f7f5 fd50 	bl	80040ac <HAL_GetTick>
 800e60c:	4602      	mov	r2, r0
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	1ad3      	subs	r3, r2, r3
 800e612:	683a      	ldr	r2, [r7, #0]
 800e614:	429a      	cmp	r2, r3
 800e616:	d803      	bhi.n	800e620 <HAL_SPI_Receive+0x2f4>
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e61e:	d102      	bne.n	800e626 <HAL_SPI_Receive+0x2fa>
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d114      	bne.n	800e650 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	f000 f8f2 	bl	800e810 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e632:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2201      	movs	r2, #1
 800e640:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2200      	movs	r2, #0
 800e648:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e64c:	2303      	movs	r3, #3
 800e64e:	e0db      	b.n	800e808 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e656:	b29b      	uxth	r3, r3
 800e658:	2b00      	cmp	r3, #0
 800e65a:	f47f af69 	bne.w	800e530 <HAL_SPI_Receive+0x204>
 800e65e:	e0c0      	b.n	800e7e2 <HAL_SPI_Receive+0x4b6>
 800e660:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	695b      	ldr	r3, [r3, #20]
 800e66a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	695b      	ldr	r3, [r3, #20]
 800e672:	f003 0301 	and.w	r3, r3, #1
 800e676:	2b01      	cmp	r3, #1
 800e678:	d117      	bne.n	800e6aa <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e686:	7812      	ldrb	r2, [r2, #0]
 800e688:	b2d2      	uxtb	r2, r2
 800e68a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e690:	1c5a      	adds	r2, r3, #1
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	3b01      	subs	r3, #1
 800e6a0:	b29a      	uxth	r2, r3
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e6a8:	e094      	b.n	800e7d4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	8bfa      	ldrh	r2, [r7, #30]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d946      	bls.n	800e746 <HAL_SPI_Receive+0x41a>
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d041      	beq.n	800e746 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6ce:	7812      	ldrb	r2, [r2, #0]
 800e6d0:	b2d2      	uxtb	r2, r2
 800e6d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6d8:	1c5a      	adds	r2, r3, #1
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6ea:	7812      	ldrb	r2, [r2, #0]
 800e6ec:	b2d2      	uxtb	r2, r2
 800e6ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6f4:	1c5a      	adds	r2, r3, #1
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e706:	7812      	ldrb	r2, [r2, #0]
 800e708:	b2d2      	uxtb	r2, r2
 800e70a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e710:	1c5a      	adds	r2, r3, #1
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e722:	7812      	ldrb	r2, [r2, #0]
 800e724:	b2d2      	uxtb	r2, r2
 800e726:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e72c:	1c5a      	adds	r2, r3, #1
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e738:	b29b      	uxth	r3, r3
 800e73a:	3b04      	subs	r3, #4
 800e73c:	b29a      	uxth	r2, r3
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e744:	e046      	b.n	800e7d4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e74c:	b29b      	uxth	r3, r3
 800e74e:	2b03      	cmp	r3, #3
 800e750:	d81c      	bhi.n	800e78c <HAL_SPI_Receive+0x460>
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d017      	beq.n	800e78c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e768:	7812      	ldrb	r2, [r2, #0]
 800e76a:	b2d2      	uxtb	r2, r2
 800e76c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e772:	1c5a      	adds	r2, r3, #1
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e77e:	b29b      	uxth	r3, r3
 800e780:	3b01      	subs	r3, #1
 800e782:	b29a      	uxth	r2, r3
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e78a:	e023      	b.n	800e7d4 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e78c:	f7f5 fc8e 	bl	80040ac <HAL_GetTick>
 800e790:	4602      	mov	r2, r0
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	1ad3      	subs	r3, r2, r3
 800e796:	683a      	ldr	r2, [r7, #0]
 800e798:	429a      	cmp	r2, r3
 800e79a:	d803      	bhi.n	800e7a4 <HAL_SPI_Receive+0x478>
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7a2:	d102      	bne.n	800e7aa <HAL_SPI_Receive+0x47e>
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d114      	bne.n	800e7d4 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e7aa:	68f8      	ldr	r0, [r7, #12]
 800e7ac:	f000 f830 	bl	800e810 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e7d0:	2303      	movs	r3, #3
 800e7d2:	e019      	b.n	800e808 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7da:	b29b      	uxth	r3, r3
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	f47f af41 	bne.w	800e664 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e7e2:	68f8      	ldr	r0, [r7, #12]
 800e7e4:	f000 f814 	bl	800e810 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d001      	beq.n	800e806 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e802:	2301      	movs	r3, #1
 800e804:	e000      	b.n	800e808 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e806:	2300      	movs	r3, #0
  }
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3720      	adds	r7, #32
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e810:	b480      	push	{r7}
 800e812:	b085      	sub	sp, #20
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	695b      	ldr	r3, [r3, #20]
 800e81e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	699a      	ldr	r2, [r3, #24]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f042 0208 	orr.w	r2, r2, #8
 800e82e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	699a      	ldr	r2, [r3, #24]
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f042 0210 	orr.w	r2, r2, #16
 800e83e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	681a      	ldr	r2, [r3, #0]
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	f022 0201 	bic.w	r2, r2, #1
 800e84e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	6919      	ldr	r1, [r3, #16]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	4b3c      	ldr	r3, [pc, #240]	; (800e94c <SPI_CloseTransfer+0x13c>)
 800e85c:	400b      	ands	r3, r1
 800e85e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	689a      	ldr	r2, [r3, #8]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e86e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e876:	b2db      	uxtb	r3, r3
 800e878:	2b04      	cmp	r3, #4
 800e87a:	d014      	beq.n	800e8a6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f003 0320 	and.w	r3, r3, #32
 800e882:	2b00      	cmp	r3, #0
 800e884:	d00f      	beq.n	800e8a6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e88c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	699a      	ldr	r2, [r3, #24]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f042 0220 	orr.w	r2, r2, #32
 800e8a4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	2b03      	cmp	r3, #3
 800e8b0:	d014      	beq.n	800e8dc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d00f      	beq.n	800e8dc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8c2:	f043 0204 	orr.w	r2, r3, #4
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	699a      	ldr	r2, [r3, #24]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e8da:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d00f      	beq.n	800e906 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8ec:	f043 0201 	orr.w	r2, r3, #1
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	699a      	ldr	r2, [r3, #24]
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e904:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d00f      	beq.n	800e930 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e916:	f043 0208 	orr.w	r2, r3, #8
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	699a      	ldr	r2, [r3, #24]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e92e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2200      	movs	r2, #0
 800e934:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2200      	movs	r2, #0
 800e93c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e940:	bf00      	nop
 800e942:	3714      	adds	r7, #20
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr
 800e94c:	fffffc90 	.word	0xfffffc90

0800e950 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e950:	b480      	push	{r7}
 800e952:	b085      	sub	sp, #20
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e95c:	095b      	lsrs	r3, r3, #5
 800e95e:	3301      	adds	r3, #1
 800e960:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	68db      	ldr	r3, [r3, #12]
 800e966:	3301      	adds	r3, #1
 800e968:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	3307      	adds	r3, #7
 800e96e:	08db      	lsrs	r3, r3, #3
 800e970:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	68fa      	ldr	r2, [r7, #12]
 800e976:	fb02 f303 	mul.w	r3, r2, r3
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	3714      	adds	r7, #20
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr

0800e986 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e986:	b580      	push	{r7, lr}
 800e988:	b082      	sub	sp, #8
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d101      	bne.n	800e998 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e994:	2301      	movs	r3, #1
 800e996:	e049      	b.n	800ea2c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e99e:	b2db      	uxtb	r3, r3
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d106      	bne.n	800e9b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f7f4 ff29 	bl	8003804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2202      	movs	r2, #2
 800e9b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681a      	ldr	r2, [r3, #0]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	3304      	adds	r3, #4
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	4610      	mov	r0, r2
 800e9c6:	f000 fe7d 	bl	800f6c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2201      	movs	r2, #1
 800e9d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2201      	movs	r2, #1
 800e9de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2201      	movs	r2, #1
 800ea06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2201      	movs	r2, #1
 800ea0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2201      	movs	r2, #1
 800ea16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2201      	movs	r2, #1
 800ea26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea2a:	2300      	movs	r3, #0
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3708      	adds	r7, #8
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b085      	sub	sp, #20
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d001      	beq.n	800ea4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ea48:	2301      	movs	r3, #1
 800ea4a:	e054      	b.n	800eaf6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2202      	movs	r2, #2
 800ea50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	68da      	ldr	r2, [r3, #12]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f042 0201 	orr.w	r2, r2, #1
 800ea62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	4a26      	ldr	r2, [pc, #152]	; (800eb04 <HAL_TIM_Base_Start_IT+0xd0>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d022      	beq.n	800eab4 <HAL_TIM_Base_Start_IT+0x80>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea76:	d01d      	beq.n	800eab4 <HAL_TIM_Base_Start_IT+0x80>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	4a22      	ldr	r2, [pc, #136]	; (800eb08 <HAL_TIM_Base_Start_IT+0xd4>)
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	d018      	beq.n	800eab4 <HAL_TIM_Base_Start_IT+0x80>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4a21      	ldr	r2, [pc, #132]	; (800eb0c <HAL_TIM_Base_Start_IT+0xd8>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d013      	beq.n	800eab4 <HAL_TIM_Base_Start_IT+0x80>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a1f      	ldr	r2, [pc, #124]	; (800eb10 <HAL_TIM_Base_Start_IT+0xdc>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d00e      	beq.n	800eab4 <HAL_TIM_Base_Start_IT+0x80>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4a1e      	ldr	r2, [pc, #120]	; (800eb14 <HAL_TIM_Base_Start_IT+0xe0>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d009      	beq.n	800eab4 <HAL_TIM_Base_Start_IT+0x80>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4a1c      	ldr	r2, [pc, #112]	; (800eb18 <HAL_TIM_Base_Start_IT+0xe4>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d004      	beq.n	800eab4 <HAL_TIM_Base_Start_IT+0x80>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4a1b      	ldr	r2, [pc, #108]	; (800eb1c <HAL_TIM_Base_Start_IT+0xe8>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d115      	bne.n	800eae0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	689a      	ldr	r2, [r3, #8]
 800eaba:	4b19      	ldr	r3, [pc, #100]	; (800eb20 <HAL_TIM_Base_Start_IT+0xec>)
 800eabc:	4013      	ands	r3, r2
 800eabe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2b06      	cmp	r3, #6
 800eac4:	d015      	beq.n	800eaf2 <HAL_TIM_Base_Start_IT+0xbe>
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eacc:	d011      	beq.n	800eaf2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f042 0201 	orr.w	r2, r2, #1
 800eadc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eade:	e008      	b.n	800eaf2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	681a      	ldr	r2, [r3, #0]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f042 0201 	orr.w	r2, r2, #1
 800eaee:	601a      	str	r2, [r3, #0]
 800eaf0:	e000      	b.n	800eaf4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eaf2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eaf4:	2300      	movs	r3, #0
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3714      	adds	r7, #20
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	40010000 	.word	0x40010000
 800eb08:	40000400 	.word	0x40000400
 800eb0c:	40000800 	.word	0x40000800
 800eb10:	40000c00 	.word	0x40000c00
 800eb14:	40010400 	.word	0x40010400
 800eb18:	40001800 	.word	0x40001800
 800eb1c:	40014000 	.word	0x40014000
 800eb20:	00010007 	.word	0x00010007

0800eb24 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d109      	bne.n	800eb4c <HAL_TIM_OC_Start_IT+0x28>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	bf14      	ite	ne
 800eb44:	2301      	movne	r3, #1
 800eb46:	2300      	moveq	r3, #0
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	e03c      	b.n	800ebc6 <HAL_TIM_OC_Start_IT+0xa2>
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	2b04      	cmp	r3, #4
 800eb50:	d109      	bne.n	800eb66 <HAL_TIM_OC_Start_IT+0x42>
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	bf14      	ite	ne
 800eb5e:	2301      	movne	r3, #1
 800eb60:	2300      	moveq	r3, #0
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	e02f      	b.n	800ebc6 <HAL_TIM_OC_Start_IT+0xa2>
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	2b08      	cmp	r3, #8
 800eb6a:	d109      	bne.n	800eb80 <HAL_TIM_OC_Start_IT+0x5c>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb72:	b2db      	uxtb	r3, r3
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	bf14      	ite	ne
 800eb78:	2301      	movne	r3, #1
 800eb7a:	2300      	moveq	r3, #0
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	e022      	b.n	800ebc6 <HAL_TIM_OC_Start_IT+0xa2>
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	2b0c      	cmp	r3, #12
 800eb84:	d109      	bne.n	800eb9a <HAL_TIM_OC_Start_IT+0x76>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	bf14      	ite	ne
 800eb92:	2301      	movne	r3, #1
 800eb94:	2300      	moveq	r3, #0
 800eb96:	b2db      	uxtb	r3, r3
 800eb98:	e015      	b.n	800ebc6 <HAL_TIM_OC_Start_IT+0xa2>
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	2b10      	cmp	r3, #16
 800eb9e:	d109      	bne.n	800ebb4 <HAL_TIM_OC_Start_IT+0x90>
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eba6:	b2db      	uxtb	r3, r3
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	bf14      	ite	ne
 800ebac:	2301      	movne	r3, #1
 800ebae:	2300      	moveq	r3, #0
 800ebb0:	b2db      	uxtb	r3, r3
 800ebb2:	e008      	b.n	800ebc6 <HAL_TIM_OC_Start_IT+0xa2>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ebba:	b2db      	uxtb	r3, r3
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	bf14      	ite	ne
 800ebc0:	2301      	movne	r3, #1
 800ebc2:	2300      	moveq	r3, #0
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d001      	beq.n	800ebce <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	e0ec      	b.n	800eda8 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d104      	bne.n	800ebde <HAL_TIM_OC_Start_IT+0xba>
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2202      	movs	r2, #2
 800ebd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ebdc:	e023      	b.n	800ec26 <HAL_TIM_OC_Start_IT+0x102>
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	2b04      	cmp	r3, #4
 800ebe2:	d104      	bne.n	800ebee <HAL_TIM_OC_Start_IT+0xca>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2202      	movs	r2, #2
 800ebe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ebec:	e01b      	b.n	800ec26 <HAL_TIM_OC_Start_IT+0x102>
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	2b08      	cmp	r3, #8
 800ebf2:	d104      	bne.n	800ebfe <HAL_TIM_OC_Start_IT+0xda>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2202      	movs	r2, #2
 800ebf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ebfc:	e013      	b.n	800ec26 <HAL_TIM_OC_Start_IT+0x102>
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	2b0c      	cmp	r3, #12
 800ec02:	d104      	bne.n	800ec0e <HAL_TIM_OC_Start_IT+0xea>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2202      	movs	r2, #2
 800ec08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ec0c:	e00b      	b.n	800ec26 <HAL_TIM_OC_Start_IT+0x102>
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	2b10      	cmp	r3, #16
 800ec12:	d104      	bne.n	800ec1e <HAL_TIM_OC_Start_IT+0xfa>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2202      	movs	r2, #2
 800ec18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec1c:	e003      	b.n	800ec26 <HAL_TIM_OC_Start_IT+0x102>
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2202      	movs	r2, #2
 800ec22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	2b0c      	cmp	r3, #12
 800ec2a:	d841      	bhi.n	800ecb0 <HAL_TIM_OC_Start_IT+0x18c>
 800ec2c:	a201      	add	r2, pc, #4	; (adr r2, 800ec34 <HAL_TIM_OC_Start_IT+0x110>)
 800ec2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec32:	bf00      	nop
 800ec34:	0800ec69 	.word	0x0800ec69
 800ec38:	0800ecb1 	.word	0x0800ecb1
 800ec3c:	0800ecb1 	.word	0x0800ecb1
 800ec40:	0800ecb1 	.word	0x0800ecb1
 800ec44:	0800ec7b 	.word	0x0800ec7b
 800ec48:	0800ecb1 	.word	0x0800ecb1
 800ec4c:	0800ecb1 	.word	0x0800ecb1
 800ec50:	0800ecb1 	.word	0x0800ecb1
 800ec54:	0800ec8d 	.word	0x0800ec8d
 800ec58:	0800ecb1 	.word	0x0800ecb1
 800ec5c:	0800ecb1 	.word	0x0800ecb1
 800ec60:	0800ecb1 	.word	0x0800ecb1
 800ec64:	0800ec9f 	.word	0x0800ec9f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	68da      	ldr	r2, [r3, #12]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	f042 0202 	orr.w	r2, r2, #2
 800ec76:	60da      	str	r2, [r3, #12]
      break;
 800ec78:	e01d      	b.n	800ecb6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	68da      	ldr	r2, [r3, #12]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	f042 0204 	orr.w	r2, r2, #4
 800ec88:	60da      	str	r2, [r3, #12]
      break;
 800ec8a:	e014      	b.n	800ecb6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	68da      	ldr	r2, [r3, #12]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f042 0208 	orr.w	r2, r2, #8
 800ec9a:	60da      	str	r2, [r3, #12]
      break;
 800ec9c:	e00b      	b.n	800ecb6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	68da      	ldr	r2, [r3, #12]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f042 0210 	orr.w	r2, r2, #16
 800ecac:	60da      	str	r2, [r3, #12]
      break;
 800ecae:	e002      	b.n	800ecb6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	73fb      	strb	r3, [r7, #15]
      break;
 800ecb4:	bf00      	nop
  }

  if (status == HAL_OK)
 800ecb6:	7bfb      	ldrb	r3, [r7, #15]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d174      	bne.n	800eda6 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	2201      	movs	r2, #1
 800ecc2:	6839      	ldr	r1, [r7, #0]
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f001 f917 	bl	800fef8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	4a38      	ldr	r2, [pc, #224]	; (800edb0 <HAL_TIM_OC_Start_IT+0x28c>)
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	d013      	beq.n	800ecfc <HAL_TIM_OC_Start_IT+0x1d8>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	4a36      	ldr	r2, [pc, #216]	; (800edb4 <HAL_TIM_OC_Start_IT+0x290>)
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d00e      	beq.n	800ecfc <HAL_TIM_OC_Start_IT+0x1d8>
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	4a35      	ldr	r2, [pc, #212]	; (800edb8 <HAL_TIM_OC_Start_IT+0x294>)
 800ece4:	4293      	cmp	r3, r2
 800ece6:	d009      	beq.n	800ecfc <HAL_TIM_OC_Start_IT+0x1d8>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	4a33      	ldr	r2, [pc, #204]	; (800edbc <HAL_TIM_OC_Start_IT+0x298>)
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d004      	beq.n	800ecfc <HAL_TIM_OC_Start_IT+0x1d8>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	4a32      	ldr	r2, [pc, #200]	; (800edc0 <HAL_TIM_OC_Start_IT+0x29c>)
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	d101      	bne.n	800ed00 <HAL_TIM_OC_Start_IT+0x1dc>
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	e000      	b.n	800ed02 <HAL_TIM_OC_Start_IT+0x1de>
 800ed00:	2300      	movs	r3, #0
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d007      	beq.n	800ed16 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ed14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	4a25      	ldr	r2, [pc, #148]	; (800edb0 <HAL_TIM_OC_Start_IT+0x28c>)
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	d022      	beq.n	800ed66 <HAL_TIM_OC_Start_IT+0x242>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed28:	d01d      	beq.n	800ed66 <HAL_TIM_OC_Start_IT+0x242>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	4a25      	ldr	r2, [pc, #148]	; (800edc4 <HAL_TIM_OC_Start_IT+0x2a0>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d018      	beq.n	800ed66 <HAL_TIM_OC_Start_IT+0x242>
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4a23      	ldr	r2, [pc, #140]	; (800edc8 <HAL_TIM_OC_Start_IT+0x2a4>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d013      	beq.n	800ed66 <HAL_TIM_OC_Start_IT+0x242>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	4a22      	ldr	r2, [pc, #136]	; (800edcc <HAL_TIM_OC_Start_IT+0x2a8>)
 800ed44:	4293      	cmp	r3, r2
 800ed46:	d00e      	beq.n	800ed66 <HAL_TIM_OC_Start_IT+0x242>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4a19      	ldr	r2, [pc, #100]	; (800edb4 <HAL_TIM_OC_Start_IT+0x290>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d009      	beq.n	800ed66 <HAL_TIM_OC_Start_IT+0x242>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	4a1e      	ldr	r2, [pc, #120]	; (800edd0 <HAL_TIM_OC_Start_IT+0x2ac>)
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	d004      	beq.n	800ed66 <HAL_TIM_OC_Start_IT+0x242>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4a15      	ldr	r2, [pc, #84]	; (800edb8 <HAL_TIM_OC_Start_IT+0x294>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d115      	bne.n	800ed92 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	689a      	ldr	r2, [r3, #8]
 800ed6c:	4b19      	ldr	r3, [pc, #100]	; (800edd4 <HAL_TIM_OC_Start_IT+0x2b0>)
 800ed6e:	4013      	ands	r3, r2
 800ed70:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	2b06      	cmp	r3, #6
 800ed76:	d015      	beq.n	800eda4 <HAL_TIM_OC_Start_IT+0x280>
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed7e:	d011      	beq.n	800eda4 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f042 0201 	orr.w	r2, r2, #1
 800ed8e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed90:	e008      	b.n	800eda4 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	681a      	ldr	r2, [r3, #0]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f042 0201 	orr.w	r2, r2, #1
 800eda0:	601a      	str	r2, [r3, #0]
 800eda2:	e000      	b.n	800eda6 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eda4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800eda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3710      	adds	r7, #16
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	40010000 	.word	0x40010000
 800edb4:	40010400 	.word	0x40010400
 800edb8:	40014000 	.word	0x40014000
 800edbc:	40014400 	.word	0x40014400
 800edc0:	40014800 	.word	0x40014800
 800edc4:	40000400 	.word	0x40000400
 800edc8:	40000800 	.word	0x40000800
 800edcc:	40000c00 	.word	0x40000c00
 800edd0:	40001800 	.word	0x40001800
 800edd4:	00010007 	.word	0x00010007

0800edd8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b084      	sub	sp, #16
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ede2:	2300      	movs	r3, #0
 800ede4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	2b0c      	cmp	r3, #12
 800edea:	d841      	bhi.n	800ee70 <HAL_TIM_OC_Stop_IT+0x98>
 800edec:	a201      	add	r2, pc, #4	; (adr r2, 800edf4 <HAL_TIM_OC_Stop_IT+0x1c>)
 800edee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edf2:	bf00      	nop
 800edf4:	0800ee29 	.word	0x0800ee29
 800edf8:	0800ee71 	.word	0x0800ee71
 800edfc:	0800ee71 	.word	0x0800ee71
 800ee00:	0800ee71 	.word	0x0800ee71
 800ee04:	0800ee3b 	.word	0x0800ee3b
 800ee08:	0800ee71 	.word	0x0800ee71
 800ee0c:	0800ee71 	.word	0x0800ee71
 800ee10:	0800ee71 	.word	0x0800ee71
 800ee14:	0800ee4d 	.word	0x0800ee4d
 800ee18:	0800ee71 	.word	0x0800ee71
 800ee1c:	0800ee71 	.word	0x0800ee71
 800ee20:	0800ee71 	.word	0x0800ee71
 800ee24:	0800ee5f 	.word	0x0800ee5f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	68da      	ldr	r2, [r3, #12]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f022 0202 	bic.w	r2, r2, #2
 800ee36:	60da      	str	r2, [r3, #12]
      break;
 800ee38:	e01d      	b.n	800ee76 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	68da      	ldr	r2, [r3, #12]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f022 0204 	bic.w	r2, r2, #4
 800ee48:	60da      	str	r2, [r3, #12]
      break;
 800ee4a:	e014      	b.n	800ee76 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	68da      	ldr	r2, [r3, #12]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	f022 0208 	bic.w	r2, r2, #8
 800ee5a:	60da      	str	r2, [r3, #12]
      break;
 800ee5c:	e00b      	b.n	800ee76 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	68da      	ldr	r2, [r3, #12]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f022 0210 	bic.w	r2, r2, #16
 800ee6c:	60da      	str	r2, [r3, #12]
      break;
 800ee6e:	e002      	b.n	800ee76 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ee70:	2301      	movs	r3, #1
 800ee72:	73fb      	strb	r3, [r7, #15]
      break;
 800ee74:	bf00      	nop
  }

  if (status == HAL_OK)
 800ee76:	7bfb      	ldrb	r3, [r7, #15]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	f040 8081 	bne.w	800ef80 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	2200      	movs	r2, #0
 800ee84:	6839      	ldr	r1, [r7, #0]
 800ee86:	4618      	mov	r0, r3
 800ee88:	f001 f836 	bl	800fef8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4a3e      	ldr	r2, [pc, #248]	; (800ef8c <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d013      	beq.n	800eebe <HAL_TIM_OC_Stop_IT+0xe6>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	4a3d      	ldr	r2, [pc, #244]	; (800ef90 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d00e      	beq.n	800eebe <HAL_TIM_OC_Stop_IT+0xe6>
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4a3b      	ldr	r2, [pc, #236]	; (800ef94 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d009      	beq.n	800eebe <HAL_TIM_OC_Stop_IT+0xe6>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	4a3a      	ldr	r2, [pc, #232]	; (800ef98 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d004      	beq.n	800eebe <HAL_TIM_OC_Stop_IT+0xe6>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4a38      	ldr	r2, [pc, #224]	; (800ef9c <HAL_TIM_OC_Stop_IT+0x1c4>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d101      	bne.n	800eec2 <HAL_TIM_OC_Stop_IT+0xea>
 800eebe:	2301      	movs	r3, #1
 800eec0:	e000      	b.n	800eec4 <HAL_TIM_OC_Stop_IT+0xec>
 800eec2:	2300      	movs	r3, #0
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d017      	beq.n	800eef8 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	6a1a      	ldr	r2, [r3, #32]
 800eece:	f241 1311 	movw	r3, #4369	; 0x1111
 800eed2:	4013      	ands	r3, r2
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d10f      	bne.n	800eef8 <HAL_TIM_OC_Stop_IT+0x120>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	6a1a      	ldr	r2, [r3, #32]
 800eede:	f240 4344 	movw	r3, #1092	; 0x444
 800eee2:	4013      	ands	r3, r2
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d107      	bne.n	800eef8 <HAL_TIM_OC_Stop_IT+0x120>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800eef6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	6a1a      	ldr	r2, [r3, #32]
 800eefe:	f241 1311 	movw	r3, #4369	; 0x1111
 800ef02:	4013      	ands	r3, r2
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d10f      	bne.n	800ef28 <HAL_TIM_OC_Stop_IT+0x150>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	6a1a      	ldr	r2, [r3, #32]
 800ef0e:	f240 4344 	movw	r3, #1092	; 0x444
 800ef12:	4013      	ands	r3, r2
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d107      	bne.n	800ef28 <HAL_TIM_OC_Stop_IT+0x150>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f022 0201 	bic.w	r2, r2, #1
 800ef26:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d104      	bne.n	800ef38 <HAL_TIM_OC_Stop_IT+0x160>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2201      	movs	r2, #1
 800ef32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef36:	e023      	b.n	800ef80 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	2b04      	cmp	r3, #4
 800ef3c:	d104      	bne.n	800ef48 <HAL_TIM_OC_Stop_IT+0x170>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2201      	movs	r2, #1
 800ef42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef46:	e01b      	b.n	800ef80 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	2b08      	cmp	r3, #8
 800ef4c:	d104      	bne.n	800ef58 <HAL_TIM_OC_Stop_IT+0x180>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2201      	movs	r2, #1
 800ef52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef56:	e013      	b.n	800ef80 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	2b0c      	cmp	r3, #12
 800ef5c:	d104      	bne.n	800ef68 <HAL_TIM_OC_Stop_IT+0x190>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2201      	movs	r2, #1
 800ef62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef66:	e00b      	b.n	800ef80 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	2b10      	cmp	r3, #16
 800ef6c:	d104      	bne.n	800ef78 <HAL_TIM_OC_Stop_IT+0x1a0>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2201      	movs	r2, #1
 800ef72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef76:	e003      	b.n	800ef80 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800ef80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	40010000 	.word	0x40010000
 800ef90:	40010400 	.word	0x40010400
 800ef94:	40014000 	.word	0x40014000
 800ef98:	40014400 	.word	0x40014400
 800ef9c:	40014800 	.word	0x40014800

0800efa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b082      	sub	sp, #8
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d101      	bne.n	800efb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800efae:	2301      	movs	r3, #1
 800efb0:	e049      	b.n	800f046 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efb8:	b2db      	uxtb	r3, r3
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d106      	bne.n	800efcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2200      	movs	r2, #0
 800efc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f000 f841 	bl	800f04e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2202      	movs	r2, #2
 800efd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	3304      	adds	r3, #4
 800efdc:	4619      	mov	r1, r3
 800efde:	4610      	mov	r0, r2
 800efe0:	f000 fb70 	bl	800f6c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	2201      	movs	r2, #1
 800efe8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2201      	movs	r2, #1
 800eff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2201      	movs	r2, #1
 800eff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2201      	movs	r2, #1
 800f000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2201      	movs	r2, #1
 800f008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2201      	movs	r2, #1
 800f010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2201      	movs	r2, #1
 800f018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2201      	movs	r2, #1
 800f020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2201      	movs	r2, #1
 800f028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2201      	movs	r2, #1
 800f030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2201      	movs	r2, #1
 800f038:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2201      	movs	r2, #1
 800f040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f044:	2300      	movs	r3, #0
}
 800f046:	4618      	mov	r0, r3
 800f048:	3708      	adds	r7, #8
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}

0800f04e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f04e:	b480      	push	{r7}
 800f050:	b083      	sub	sp, #12
 800f052:	af00      	add	r7, sp, #0
 800f054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f056:	bf00      	nop
 800f058:	370c      	adds	r7, #12
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr

0800f062 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f062:	b580      	push	{r7, lr}
 800f064:	b084      	sub	sp, #16
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	68db      	ldr	r3, [r3, #12]
 800f070:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	691b      	ldr	r3, [r3, #16]
 800f078:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	f003 0302 	and.w	r3, r3, #2
 800f080:	2b00      	cmp	r3, #0
 800f082:	d020      	beq.n	800f0c6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f003 0302 	and.w	r3, r3, #2
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d01b      	beq.n	800f0c6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f06f 0202 	mvn.w	r2, #2
 800f096:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2201      	movs	r2, #1
 800f09c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	699b      	ldr	r3, [r3, #24]
 800f0a4:	f003 0303 	and.w	r3, r3, #3
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d003      	beq.n	800f0b4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f000 faeb 	bl	800f688 <HAL_TIM_IC_CaptureCallback>
 800f0b2:	e005      	b.n	800f0c0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f7f1 faa3 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 faee 	bl	800f69c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	f003 0304 	and.w	r3, r3, #4
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d020      	beq.n	800f112 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f003 0304 	and.w	r3, r3, #4
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d01b      	beq.n	800f112 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	f06f 0204 	mvn.w	r2, #4
 800f0e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2202      	movs	r2, #2
 800f0e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	699b      	ldr	r3, [r3, #24]
 800f0f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d003      	beq.n	800f100 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f000 fac5 	bl	800f688 <HAL_TIM_IC_CaptureCallback>
 800f0fe:	e005      	b.n	800f10c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f7f1 fa7d 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 fac8 	bl	800f69c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	f003 0308 	and.w	r3, r3, #8
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d020      	beq.n	800f15e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f003 0308 	and.w	r3, r3, #8
 800f122:	2b00      	cmp	r3, #0
 800f124:	d01b      	beq.n	800f15e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f06f 0208 	mvn.w	r2, #8
 800f12e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2204      	movs	r2, #4
 800f134:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	69db      	ldr	r3, [r3, #28]
 800f13c:	f003 0303 	and.w	r3, r3, #3
 800f140:	2b00      	cmp	r3, #0
 800f142:	d003      	beq.n	800f14c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f000 fa9f 	bl	800f688 <HAL_TIM_IC_CaptureCallback>
 800f14a:	e005      	b.n	800f158 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f7f1 fa57 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 faa2 	bl	800f69c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2200      	movs	r2, #0
 800f15c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	f003 0310 	and.w	r3, r3, #16
 800f164:	2b00      	cmp	r3, #0
 800f166:	d020      	beq.n	800f1aa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f003 0310 	and.w	r3, r3, #16
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d01b      	beq.n	800f1aa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	f06f 0210 	mvn.w	r2, #16
 800f17a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2208      	movs	r2, #8
 800f180:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	69db      	ldr	r3, [r3, #28]
 800f188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d003      	beq.n	800f198 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f000 fa79 	bl	800f688 <HAL_TIM_IC_CaptureCallback>
 800f196:	e005      	b.n	800f1a4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f7f1 fa31 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 fa7c 	bl	800f69c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	f003 0301 	and.w	r3, r3, #1
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d00c      	beq.n	800f1ce <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	f003 0301 	and.w	r3, r3, #1
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d007      	beq.n	800f1ce <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f06f 0201 	mvn.w	r2, #1
 800f1c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f7f3 fff5 	bl	80031b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d104      	bne.n	800f1e2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d00c      	beq.n	800f1fc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d007      	beq.n	800f1fc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f1f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 ffba 	bl	8010170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f202:	2b00      	cmp	r3, #0
 800f204:	d00c      	beq.n	800f220 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d007      	beq.n	800f220 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f000 ffb2 	bl	8010184 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f226:	2b00      	cmp	r3, #0
 800f228:	d00c      	beq.n	800f244 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f230:	2b00      	cmp	r3, #0
 800f232:	d007      	beq.n	800f244 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f23c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f000 fa36 	bl	800f6b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	f003 0320 	and.w	r3, r3, #32
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d00c      	beq.n	800f268 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f003 0320 	and.w	r3, r3, #32
 800f254:	2b00      	cmp	r3, #0
 800f256:	d007      	beq.n	800f268 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f06f 0220 	mvn.w	r2, #32
 800f260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 ff7a 	bl	801015c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f268:	bf00      	nop
 800f26a:	3710      	adds	r7, #16
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b086      	sub	sp, #24
 800f274:	af00      	add	r7, sp, #0
 800f276:	60f8      	str	r0, [r7, #12]
 800f278:	60b9      	str	r1, [r7, #8]
 800f27a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f27c:	2300      	movs	r3, #0
 800f27e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f286:	2b01      	cmp	r3, #1
 800f288:	d101      	bne.n	800f28e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f28a:	2302      	movs	r3, #2
 800f28c:	e0ff      	b.n	800f48e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	2201      	movs	r2, #1
 800f292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2b14      	cmp	r3, #20
 800f29a:	f200 80f0 	bhi.w	800f47e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f29e:	a201      	add	r2, pc, #4	; (adr r2, 800f2a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2a4:	0800f2f9 	.word	0x0800f2f9
 800f2a8:	0800f47f 	.word	0x0800f47f
 800f2ac:	0800f47f 	.word	0x0800f47f
 800f2b0:	0800f47f 	.word	0x0800f47f
 800f2b4:	0800f339 	.word	0x0800f339
 800f2b8:	0800f47f 	.word	0x0800f47f
 800f2bc:	0800f47f 	.word	0x0800f47f
 800f2c0:	0800f47f 	.word	0x0800f47f
 800f2c4:	0800f37b 	.word	0x0800f37b
 800f2c8:	0800f47f 	.word	0x0800f47f
 800f2cc:	0800f47f 	.word	0x0800f47f
 800f2d0:	0800f47f 	.word	0x0800f47f
 800f2d4:	0800f3bb 	.word	0x0800f3bb
 800f2d8:	0800f47f 	.word	0x0800f47f
 800f2dc:	0800f47f 	.word	0x0800f47f
 800f2e0:	0800f47f 	.word	0x0800f47f
 800f2e4:	0800f3fd 	.word	0x0800f3fd
 800f2e8:	0800f47f 	.word	0x0800f47f
 800f2ec:	0800f47f 	.word	0x0800f47f
 800f2f0:	0800f47f 	.word	0x0800f47f
 800f2f4:	0800f43d 	.word	0x0800f43d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	68b9      	ldr	r1, [r7, #8]
 800f2fe:	4618      	mov	r0, r3
 800f300:	f000 fa86 	bl	800f810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	699a      	ldr	r2, [r3, #24]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f042 0208 	orr.w	r2, r2, #8
 800f312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	699a      	ldr	r2, [r3, #24]
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	f022 0204 	bic.w	r2, r2, #4
 800f322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	6999      	ldr	r1, [r3, #24]
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	691a      	ldr	r2, [r3, #16]
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	430a      	orrs	r2, r1
 800f334:	619a      	str	r2, [r3, #24]
      break;
 800f336:	e0a5      	b.n	800f484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	68b9      	ldr	r1, [r7, #8]
 800f33e:	4618      	mov	r0, r3
 800f340:	f000 faf6 	bl	800f930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	699a      	ldr	r2, [r3, #24]
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	699a      	ldr	r2, [r3, #24]
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	6999      	ldr	r1, [r3, #24]
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	691b      	ldr	r3, [r3, #16]
 800f36e:	021a      	lsls	r2, r3, #8
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	430a      	orrs	r2, r1
 800f376:	619a      	str	r2, [r3, #24]
      break;
 800f378:	e084      	b.n	800f484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	68b9      	ldr	r1, [r7, #8]
 800f380:	4618      	mov	r0, r3
 800f382:	f000 fb5f 	bl	800fa44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	69da      	ldr	r2, [r3, #28]
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f042 0208 	orr.w	r2, r2, #8
 800f394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	69da      	ldr	r2, [r3, #28]
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f022 0204 	bic.w	r2, r2, #4
 800f3a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	69d9      	ldr	r1, [r3, #28]
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	691a      	ldr	r2, [r3, #16]
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	430a      	orrs	r2, r1
 800f3b6:	61da      	str	r2, [r3, #28]
      break;
 800f3b8:	e064      	b.n	800f484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	68b9      	ldr	r1, [r7, #8]
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f000 fbc7 	bl	800fb54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	69da      	ldr	r2, [r3, #28]
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f3d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	69da      	ldr	r2, [r3, #28]
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f3e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	69d9      	ldr	r1, [r3, #28]
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	691b      	ldr	r3, [r3, #16]
 800f3f0:	021a      	lsls	r2, r3, #8
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	430a      	orrs	r2, r1
 800f3f8:	61da      	str	r2, [r3, #28]
      break;
 800f3fa:	e043      	b.n	800f484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	68b9      	ldr	r1, [r7, #8]
 800f402:	4618      	mov	r0, r3
 800f404:	f000 fc10 	bl	800fc28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	f042 0208 	orr.w	r2, r2, #8
 800f416:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f022 0204 	bic.w	r2, r2, #4
 800f426:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	691a      	ldr	r2, [r3, #16]
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	430a      	orrs	r2, r1
 800f438:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f43a:	e023      	b.n	800f484 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	68b9      	ldr	r1, [r7, #8]
 800f442:	4618      	mov	r0, r3
 800f444:	f000 fc54 	bl	800fcf0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f456:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f466:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	691b      	ldr	r3, [r3, #16]
 800f472:	021a      	lsls	r2, r3, #8
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	430a      	orrs	r2, r1
 800f47a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f47c:	e002      	b.n	800f484 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f47e:	2301      	movs	r3, #1
 800f480:	75fb      	strb	r3, [r7, #23]
      break;
 800f482:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2200      	movs	r2, #0
 800f488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f48c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3718      	adds	r7, #24
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop

0800f498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b084      	sub	sp, #16
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d101      	bne.n	800f4b4 <HAL_TIM_ConfigClockSource+0x1c>
 800f4b0:	2302      	movs	r3, #2
 800f4b2:	e0dc      	b.n	800f66e <HAL_TIM_ConfigClockSource+0x1d6>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2202      	movs	r2, #2
 800f4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	689b      	ldr	r3, [r3, #8]
 800f4ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f4cc:	68ba      	ldr	r2, [r7, #8]
 800f4ce:	4b6a      	ldr	r3, [pc, #424]	; (800f678 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f4d0:	4013      	ands	r3, r2
 800f4d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f4da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	68ba      	ldr	r2, [r7, #8]
 800f4e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	4a64      	ldr	r2, [pc, #400]	; (800f67c <HAL_TIM_ConfigClockSource+0x1e4>)
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	f000 80a9 	beq.w	800f642 <HAL_TIM_ConfigClockSource+0x1aa>
 800f4f0:	4a62      	ldr	r2, [pc, #392]	; (800f67c <HAL_TIM_ConfigClockSource+0x1e4>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	f200 80ae 	bhi.w	800f654 <HAL_TIM_ConfigClockSource+0x1bc>
 800f4f8:	4a61      	ldr	r2, [pc, #388]	; (800f680 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	f000 80a1 	beq.w	800f642 <HAL_TIM_ConfigClockSource+0x1aa>
 800f500:	4a5f      	ldr	r2, [pc, #380]	; (800f680 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f502:	4293      	cmp	r3, r2
 800f504:	f200 80a6 	bhi.w	800f654 <HAL_TIM_ConfigClockSource+0x1bc>
 800f508:	4a5e      	ldr	r2, [pc, #376]	; (800f684 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	f000 8099 	beq.w	800f642 <HAL_TIM_ConfigClockSource+0x1aa>
 800f510:	4a5c      	ldr	r2, [pc, #368]	; (800f684 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f512:	4293      	cmp	r3, r2
 800f514:	f200 809e 	bhi.w	800f654 <HAL_TIM_ConfigClockSource+0x1bc>
 800f518:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f51c:	f000 8091 	beq.w	800f642 <HAL_TIM_ConfigClockSource+0x1aa>
 800f520:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f524:	f200 8096 	bhi.w	800f654 <HAL_TIM_ConfigClockSource+0x1bc>
 800f528:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f52c:	f000 8089 	beq.w	800f642 <HAL_TIM_ConfigClockSource+0x1aa>
 800f530:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f534:	f200 808e 	bhi.w	800f654 <HAL_TIM_ConfigClockSource+0x1bc>
 800f538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f53c:	d03e      	beq.n	800f5bc <HAL_TIM_ConfigClockSource+0x124>
 800f53e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f542:	f200 8087 	bhi.w	800f654 <HAL_TIM_ConfigClockSource+0x1bc>
 800f546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f54a:	f000 8086 	beq.w	800f65a <HAL_TIM_ConfigClockSource+0x1c2>
 800f54e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f552:	d87f      	bhi.n	800f654 <HAL_TIM_ConfigClockSource+0x1bc>
 800f554:	2b70      	cmp	r3, #112	; 0x70
 800f556:	d01a      	beq.n	800f58e <HAL_TIM_ConfigClockSource+0xf6>
 800f558:	2b70      	cmp	r3, #112	; 0x70
 800f55a:	d87b      	bhi.n	800f654 <HAL_TIM_ConfigClockSource+0x1bc>
 800f55c:	2b60      	cmp	r3, #96	; 0x60
 800f55e:	d050      	beq.n	800f602 <HAL_TIM_ConfigClockSource+0x16a>
 800f560:	2b60      	cmp	r3, #96	; 0x60
 800f562:	d877      	bhi.n	800f654 <HAL_TIM_ConfigClockSource+0x1bc>
 800f564:	2b50      	cmp	r3, #80	; 0x50
 800f566:	d03c      	beq.n	800f5e2 <HAL_TIM_ConfigClockSource+0x14a>
 800f568:	2b50      	cmp	r3, #80	; 0x50
 800f56a:	d873      	bhi.n	800f654 <HAL_TIM_ConfigClockSource+0x1bc>
 800f56c:	2b40      	cmp	r3, #64	; 0x40
 800f56e:	d058      	beq.n	800f622 <HAL_TIM_ConfigClockSource+0x18a>
 800f570:	2b40      	cmp	r3, #64	; 0x40
 800f572:	d86f      	bhi.n	800f654 <HAL_TIM_ConfigClockSource+0x1bc>
 800f574:	2b30      	cmp	r3, #48	; 0x30
 800f576:	d064      	beq.n	800f642 <HAL_TIM_ConfigClockSource+0x1aa>
 800f578:	2b30      	cmp	r3, #48	; 0x30
 800f57a:	d86b      	bhi.n	800f654 <HAL_TIM_ConfigClockSource+0x1bc>
 800f57c:	2b20      	cmp	r3, #32
 800f57e:	d060      	beq.n	800f642 <HAL_TIM_ConfigClockSource+0x1aa>
 800f580:	2b20      	cmp	r3, #32
 800f582:	d867      	bhi.n	800f654 <HAL_TIM_ConfigClockSource+0x1bc>
 800f584:	2b00      	cmp	r3, #0
 800f586:	d05c      	beq.n	800f642 <HAL_TIM_ConfigClockSource+0x1aa>
 800f588:	2b10      	cmp	r3, #16
 800f58a:	d05a      	beq.n	800f642 <HAL_TIM_ConfigClockSource+0x1aa>
 800f58c:	e062      	b.n	800f654 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6818      	ldr	r0, [r3, #0]
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	6899      	ldr	r1, [r3, #8]
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	685a      	ldr	r2, [r3, #4]
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	68db      	ldr	r3, [r3, #12]
 800f59e:	f000 fc8b 	bl	800feb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	689b      	ldr	r3, [r3, #8]
 800f5a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f5aa:	68bb      	ldr	r3, [r7, #8]
 800f5ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f5b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	68ba      	ldr	r2, [r7, #8]
 800f5b8:	609a      	str	r2, [r3, #8]
      break;
 800f5ba:	e04f      	b.n	800f65c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6818      	ldr	r0, [r3, #0]
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	6899      	ldr	r1, [r3, #8]
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	685a      	ldr	r2, [r3, #4]
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	68db      	ldr	r3, [r3, #12]
 800f5cc:	f000 fc74 	bl	800feb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	689a      	ldr	r2, [r3, #8]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f5de:	609a      	str	r2, [r3, #8]
      break;
 800f5e0:	e03c      	b.n	800f65c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	6818      	ldr	r0, [r3, #0]
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	6859      	ldr	r1, [r3, #4]
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	68db      	ldr	r3, [r3, #12]
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	f000 fbe4 	bl	800fdbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	2150      	movs	r1, #80	; 0x50
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f000 fc3e 	bl	800fe7c <TIM_ITRx_SetConfig>
      break;
 800f600:	e02c      	b.n	800f65c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6818      	ldr	r0, [r3, #0]
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	6859      	ldr	r1, [r3, #4]
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	68db      	ldr	r3, [r3, #12]
 800f60e:	461a      	mov	r2, r3
 800f610:	f000 fc03 	bl	800fe1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	2160      	movs	r1, #96	; 0x60
 800f61a:	4618      	mov	r0, r3
 800f61c:	f000 fc2e 	bl	800fe7c <TIM_ITRx_SetConfig>
      break;
 800f620:	e01c      	b.n	800f65c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6818      	ldr	r0, [r3, #0]
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	6859      	ldr	r1, [r3, #4]
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	461a      	mov	r2, r3
 800f630:	f000 fbc4 	bl	800fdbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	2140      	movs	r1, #64	; 0x40
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 fc1e 	bl	800fe7c <TIM_ITRx_SetConfig>
      break;
 800f640:	e00c      	b.n	800f65c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681a      	ldr	r2, [r3, #0]
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	4619      	mov	r1, r3
 800f64c:	4610      	mov	r0, r2
 800f64e:	f000 fc15 	bl	800fe7c <TIM_ITRx_SetConfig>
      break;
 800f652:	e003      	b.n	800f65c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f654:	2301      	movs	r3, #1
 800f656:	73fb      	strb	r3, [r7, #15]
      break;
 800f658:	e000      	b.n	800f65c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f65a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2201      	movs	r2, #1
 800f660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2200      	movs	r2, #0
 800f668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3710      	adds	r7, #16
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	bf00      	nop
 800f678:	ffceff88 	.word	0xffceff88
 800f67c:	00100040 	.word	0x00100040
 800f680:	00100030 	.word	0x00100030
 800f684:	00100020 	.word	0x00100020

0800f688 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f688:	b480      	push	{r7}
 800f68a:	b083      	sub	sp, #12
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f690:	bf00      	nop
 800f692:	370c      	adds	r7, #12
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr

0800f69c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f69c:	b480      	push	{r7}
 800f69e:	b083      	sub	sp, #12
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f6a4:	bf00      	nop
 800f6a6:	370c      	adds	r7, #12
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr

0800f6b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f6b8:	bf00      	nop
 800f6ba:	370c      	adds	r7, #12
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr

0800f6c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b085      	sub	sp, #20
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	4a46      	ldr	r2, [pc, #280]	; (800f7f0 <TIM_Base_SetConfig+0x12c>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d013      	beq.n	800f704 <TIM_Base_SetConfig+0x40>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6e2:	d00f      	beq.n	800f704 <TIM_Base_SetConfig+0x40>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	4a43      	ldr	r2, [pc, #268]	; (800f7f4 <TIM_Base_SetConfig+0x130>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d00b      	beq.n	800f704 <TIM_Base_SetConfig+0x40>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	4a42      	ldr	r2, [pc, #264]	; (800f7f8 <TIM_Base_SetConfig+0x134>)
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d007      	beq.n	800f704 <TIM_Base_SetConfig+0x40>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	4a41      	ldr	r2, [pc, #260]	; (800f7fc <TIM_Base_SetConfig+0x138>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d003      	beq.n	800f704 <TIM_Base_SetConfig+0x40>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4a40      	ldr	r2, [pc, #256]	; (800f800 <TIM_Base_SetConfig+0x13c>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d108      	bne.n	800f716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f70a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	4313      	orrs	r3, r2
 800f714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	4a35      	ldr	r2, [pc, #212]	; (800f7f0 <TIM_Base_SetConfig+0x12c>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d01f      	beq.n	800f75e <TIM_Base_SetConfig+0x9a>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f724:	d01b      	beq.n	800f75e <TIM_Base_SetConfig+0x9a>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	4a32      	ldr	r2, [pc, #200]	; (800f7f4 <TIM_Base_SetConfig+0x130>)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d017      	beq.n	800f75e <TIM_Base_SetConfig+0x9a>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	4a31      	ldr	r2, [pc, #196]	; (800f7f8 <TIM_Base_SetConfig+0x134>)
 800f732:	4293      	cmp	r3, r2
 800f734:	d013      	beq.n	800f75e <TIM_Base_SetConfig+0x9a>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	4a30      	ldr	r2, [pc, #192]	; (800f7fc <TIM_Base_SetConfig+0x138>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d00f      	beq.n	800f75e <TIM_Base_SetConfig+0x9a>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	4a2f      	ldr	r2, [pc, #188]	; (800f800 <TIM_Base_SetConfig+0x13c>)
 800f742:	4293      	cmp	r3, r2
 800f744:	d00b      	beq.n	800f75e <TIM_Base_SetConfig+0x9a>
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	4a2e      	ldr	r2, [pc, #184]	; (800f804 <TIM_Base_SetConfig+0x140>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d007      	beq.n	800f75e <TIM_Base_SetConfig+0x9a>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	4a2d      	ldr	r2, [pc, #180]	; (800f808 <TIM_Base_SetConfig+0x144>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d003      	beq.n	800f75e <TIM_Base_SetConfig+0x9a>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	4a2c      	ldr	r2, [pc, #176]	; (800f80c <TIM_Base_SetConfig+0x148>)
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d108      	bne.n	800f770 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	68fa      	ldr	r2, [r7, #12]
 800f76c:	4313      	orrs	r3, r2
 800f76e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	695b      	ldr	r3, [r3, #20]
 800f77a:	4313      	orrs	r3, r2
 800f77c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	68fa      	ldr	r2, [r7, #12]
 800f782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	689a      	ldr	r2, [r3, #8]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	681a      	ldr	r2, [r3, #0]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	4a16      	ldr	r2, [pc, #88]	; (800f7f0 <TIM_Base_SetConfig+0x12c>)
 800f798:	4293      	cmp	r3, r2
 800f79a:	d00f      	beq.n	800f7bc <TIM_Base_SetConfig+0xf8>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	4a18      	ldr	r2, [pc, #96]	; (800f800 <TIM_Base_SetConfig+0x13c>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d00b      	beq.n	800f7bc <TIM_Base_SetConfig+0xf8>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	4a17      	ldr	r2, [pc, #92]	; (800f804 <TIM_Base_SetConfig+0x140>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d007      	beq.n	800f7bc <TIM_Base_SetConfig+0xf8>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	4a16      	ldr	r2, [pc, #88]	; (800f808 <TIM_Base_SetConfig+0x144>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d003      	beq.n	800f7bc <TIM_Base_SetConfig+0xf8>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	4a15      	ldr	r2, [pc, #84]	; (800f80c <TIM_Base_SetConfig+0x148>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d103      	bne.n	800f7c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	691a      	ldr	r2, [r3, #16]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	691b      	ldr	r3, [r3, #16]
 800f7ce:	f003 0301 	and.w	r3, r3, #1
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	d105      	bne.n	800f7e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	691b      	ldr	r3, [r3, #16]
 800f7da:	f023 0201 	bic.w	r2, r3, #1
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	611a      	str	r2, [r3, #16]
  }
}
 800f7e2:	bf00      	nop
 800f7e4:	3714      	adds	r7, #20
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr
 800f7ee:	bf00      	nop
 800f7f0:	40010000 	.word	0x40010000
 800f7f4:	40000400 	.word	0x40000400
 800f7f8:	40000800 	.word	0x40000800
 800f7fc:	40000c00 	.word	0x40000c00
 800f800:	40010400 	.word	0x40010400
 800f804:	40014000 	.word	0x40014000
 800f808:	40014400 	.word	0x40014400
 800f80c:	40014800 	.word	0x40014800

0800f810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f810:	b480      	push	{r7}
 800f812:	b087      	sub	sp, #28
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6a1b      	ldr	r3, [r3, #32]
 800f81e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6a1b      	ldr	r3, [r3, #32]
 800f824:	f023 0201 	bic.w	r2, r3, #1
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	699b      	ldr	r3, [r3, #24]
 800f836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f838:	68fa      	ldr	r2, [r7, #12]
 800f83a:	4b37      	ldr	r3, [pc, #220]	; (800f918 <TIM_OC1_SetConfig+0x108>)
 800f83c:	4013      	ands	r3, r2
 800f83e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f023 0303 	bic.w	r3, r3, #3
 800f846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	68fa      	ldr	r2, [r7, #12]
 800f84e:	4313      	orrs	r3, r2
 800f850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	f023 0302 	bic.w	r3, r3, #2
 800f858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	689b      	ldr	r3, [r3, #8]
 800f85e:	697a      	ldr	r2, [r7, #20]
 800f860:	4313      	orrs	r3, r2
 800f862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	4a2d      	ldr	r2, [pc, #180]	; (800f91c <TIM_OC1_SetConfig+0x10c>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d00f      	beq.n	800f88c <TIM_OC1_SetConfig+0x7c>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	4a2c      	ldr	r2, [pc, #176]	; (800f920 <TIM_OC1_SetConfig+0x110>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d00b      	beq.n	800f88c <TIM_OC1_SetConfig+0x7c>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4a2b      	ldr	r2, [pc, #172]	; (800f924 <TIM_OC1_SetConfig+0x114>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d007      	beq.n	800f88c <TIM_OC1_SetConfig+0x7c>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	4a2a      	ldr	r2, [pc, #168]	; (800f928 <TIM_OC1_SetConfig+0x118>)
 800f880:	4293      	cmp	r3, r2
 800f882:	d003      	beq.n	800f88c <TIM_OC1_SetConfig+0x7c>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	4a29      	ldr	r2, [pc, #164]	; (800f92c <TIM_OC1_SetConfig+0x11c>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d10c      	bne.n	800f8a6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	f023 0308 	bic.w	r3, r3, #8
 800f892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	697a      	ldr	r2, [r7, #20]
 800f89a:	4313      	orrs	r3, r2
 800f89c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	f023 0304 	bic.w	r3, r3, #4
 800f8a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	4a1c      	ldr	r2, [pc, #112]	; (800f91c <TIM_OC1_SetConfig+0x10c>)
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d00f      	beq.n	800f8ce <TIM_OC1_SetConfig+0xbe>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4a1b      	ldr	r2, [pc, #108]	; (800f920 <TIM_OC1_SetConfig+0x110>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d00b      	beq.n	800f8ce <TIM_OC1_SetConfig+0xbe>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4a1a      	ldr	r2, [pc, #104]	; (800f924 <TIM_OC1_SetConfig+0x114>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d007      	beq.n	800f8ce <TIM_OC1_SetConfig+0xbe>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4a19      	ldr	r2, [pc, #100]	; (800f928 <TIM_OC1_SetConfig+0x118>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d003      	beq.n	800f8ce <TIM_OC1_SetConfig+0xbe>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	4a18      	ldr	r2, [pc, #96]	; (800f92c <TIM_OC1_SetConfig+0x11c>)
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d111      	bne.n	800f8f2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f8dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	695b      	ldr	r3, [r3, #20]
 800f8e2:	693a      	ldr	r2, [r7, #16]
 800f8e4:	4313      	orrs	r3, r2
 800f8e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	699b      	ldr	r3, [r3, #24]
 800f8ec:	693a      	ldr	r2, [r7, #16]
 800f8ee:	4313      	orrs	r3, r2
 800f8f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	693a      	ldr	r2, [r7, #16]
 800f8f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	68fa      	ldr	r2, [r7, #12]
 800f8fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	685a      	ldr	r2, [r3, #4]
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	697a      	ldr	r2, [r7, #20]
 800f90a:	621a      	str	r2, [r3, #32]
}
 800f90c:	bf00      	nop
 800f90e:	371c      	adds	r7, #28
 800f910:	46bd      	mov	sp, r7
 800f912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f916:	4770      	bx	lr
 800f918:	fffeff8f 	.word	0xfffeff8f
 800f91c:	40010000 	.word	0x40010000
 800f920:	40010400 	.word	0x40010400
 800f924:	40014000 	.word	0x40014000
 800f928:	40014400 	.word	0x40014400
 800f92c:	40014800 	.word	0x40014800

0800f930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f930:	b480      	push	{r7}
 800f932:	b087      	sub	sp, #28
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6a1b      	ldr	r3, [r3, #32]
 800f93e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	6a1b      	ldr	r3, [r3, #32]
 800f944:	f023 0210 	bic.w	r2, r3, #16
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	685b      	ldr	r3, [r3, #4]
 800f950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	699b      	ldr	r3, [r3, #24]
 800f956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f958:	68fa      	ldr	r2, [r7, #12]
 800f95a:	4b34      	ldr	r3, [pc, #208]	; (800fa2c <TIM_OC2_SetConfig+0xfc>)
 800f95c:	4013      	ands	r3, r2
 800f95e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	021b      	lsls	r3, r3, #8
 800f96e:	68fa      	ldr	r2, [r7, #12]
 800f970:	4313      	orrs	r3, r2
 800f972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	f023 0320 	bic.w	r3, r3, #32
 800f97a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	689b      	ldr	r3, [r3, #8]
 800f980:	011b      	lsls	r3, r3, #4
 800f982:	697a      	ldr	r2, [r7, #20]
 800f984:	4313      	orrs	r3, r2
 800f986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	4a29      	ldr	r2, [pc, #164]	; (800fa30 <TIM_OC2_SetConfig+0x100>)
 800f98c:	4293      	cmp	r3, r2
 800f98e:	d003      	beq.n	800f998 <TIM_OC2_SetConfig+0x68>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	4a28      	ldr	r2, [pc, #160]	; (800fa34 <TIM_OC2_SetConfig+0x104>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d10d      	bne.n	800f9b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f99e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	68db      	ldr	r3, [r3, #12]
 800f9a4:	011b      	lsls	r3, r3, #4
 800f9a6:	697a      	ldr	r2, [r7, #20]
 800f9a8:	4313      	orrs	r3, r2
 800f9aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f9b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	4a1e      	ldr	r2, [pc, #120]	; (800fa30 <TIM_OC2_SetConfig+0x100>)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d00f      	beq.n	800f9dc <TIM_OC2_SetConfig+0xac>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	4a1d      	ldr	r2, [pc, #116]	; (800fa34 <TIM_OC2_SetConfig+0x104>)
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	d00b      	beq.n	800f9dc <TIM_OC2_SetConfig+0xac>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	4a1c      	ldr	r2, [pc, #112]	; (800fa38 <TIM_OC2_SetConfig+0x108>)
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d007      	beq.n	800f9dc <TIM_OC2_SetConfig+0xac>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	4a1b      	ldr	r2, [pc, #108]	; (800fa3c <TIM_OC2_SetConfig+0x10c>)
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d003      	beq.n	800f9dc <TIM_OC2_SetConfig+0xac>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	4a1a      	ldr	r2, [pc, #104]	; (800fa40 <TIM_OC2_SetConfig+0x110>)
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	d113      	bne.n	800fa04 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f9dc:	693b      	ldr	r3, [r7, #16]
 800f9de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f9e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f9ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	695b      	ldr	r3, [r3, #20]
 800f9f0:	009b      	lsls	r3, r3, #2
 800f9f2:	693a      	ldr	r2, [r7, #16]
 800f9f4:	4313      	orrs	r3, r2
 800f9f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	699b      	ldr	r3, [r3, #24]
 800f9fc:	009b      	lsls	r3, r3, #2
 800f9fe:	693a      	ldr	r2, [r7, #16]
 800fa00:	4313      	orrs	r3, r2
 800fa02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	693a      	ldr	r2, [r7, #16]
 800fa08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	68fa      	ldr	r2, [r7, #12]
 800fa0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	685a      	ldr	r2, [r3, #4]
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	697a      	ldr	r2, [r7, #20]
 800fa1c:	621a      	str	r2, [r3, #32]
}
 800fa1e:	bf00      	nop
 800fa20:	371c      	adds	r7, #28
 800fa22:	46bd      	mov	sp, r7
 800fa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa28:	4770      	bx	lr
 800fa2a:	bf00      	nop
 800fa2c:	feff8fff 	.word	0xfeff8fff
 800fa30:	40010000 	.word	0x40010000
 800fa34:	40010400 	.word	0x40010400
 800fa38:	40014000 	.word	0x40014000
 800fa3c:	40014400 	.word	0x40014400
 800fa40:	40014800 	.word	0x40014800

0800fa44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b087      	sub	sp, #28
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6a1b      	ldr	r3, [r3, #32]
 800fa52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6a1b      	ldr	r3, [r3, #32]
 800fa58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	685b      	ldr	r3, [r3, #4]
 800fa64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	69db      	ldr	r3, [r3, #28]
 800fa6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fa6c:	68fa      	ldr	r2, [r7, #12]
 800fa6e:	4b33      	ldr	r3, [pc, #204]	; (800fb3c <TIM_OC3_SetConfig+0xf8>)
 800fa70:	4013      	ands	r3, r2
 800fa72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	f023 0303 	bic.w	r3, r3, #3
 800fa7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	68fa      	ldr	r2, [r7, #12]
 800fa82:	4313      	orrs	r3, r2
 800fa84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	689b      	ldr	r3, [r3, #8]
 800fa92:	021b      	lsls	r3, r3, #8
 800fa94:	697a      	ldr	r2, [r7, #20]
 800fa96:	4313      	orrs	r3, r2
 800fa98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	4a28      	ldr	r2, [pc, #160]	; (800fb40 <TIM_OC3_SetConfig+0xfc>)
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d003      	beq.n	800faaa <TIM_OC3_SetConfig+0x66>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	4a27      	ldr	r2, [pc, #156]	; (800fb44 <TIM_OC3_SetConfig+0x100>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d10d      	bne.n	800fac6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	68db      	ldr	r3, [r3, #12]
 800fab6:	021b      	lsls	r3, r3, #8
 800fab8:	697a      	ldr	r2, [r7, #20]
 800faba:	4313      	orrs	r3, r2
 800fabc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	4a1d      	ldr	r2, [pc, #116]	; (800fb40 <TIM_OC3_SetConfig+0xfc>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d00f      	beq.n	800faee <TIM_OC3_SetConfig+0xaa>
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	4a1c      	ldr	r2, [pc, #112]	; (800fb44 <TIM_OC3_SetConfig+0x100>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d00b      	beq.n	800faee <TIM_OC3_SetConfig+0xaa>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4a1b      	ldr	r2, [pc, #108]	; (800fb48 <TIM_OC3_SetConfig+0x104>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d007      	beq.n	800faee <TIM_OC3_SetConfig+0xaa>
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	4a1a      	ldr	r2, [pc, #104]	; (800fb4c <TIM_OC3_SetConfig+0x108>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d003      	beq.n	800faee <TIM_OC3_SetConfig+0xaa>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	4a19      	ldr	r2, [pc, #100]	; (800fb50 <TIM_OC3_SetConfig+0x10c>)
 800faea:	4293      	cmp	r3, r2
 800faec:	d113      	bne.n	800fb16 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800faee:	693b      	ldr	r3, [r7, #16]
 800faf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800faf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fafc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	695b      	ldr	r3, [r3, #20]
 800fb02:	011b      	lsls	r3, r3, #4
 800fb04:	693a      	ldr	r2, [r7, #16]
 800fb06:	4313      	orrs	r3, r2
 800fb08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	699b      	ldr	r3, [r3, #24]
 800fb0e:	011b      	lsls	r3, r3, #4
 800fb10:	693a      	ldr	r2, [r7, #16]
 800fb12:	4313      	orrs	r3, r2
 800fb14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	693a      	ldr	r2, [r7, #16]
 800fb1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	68fa      	ldr	r2, [r7, #12]
 800fb20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	685a      	ldr	r2, [r3, #4]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	697a      	ldr	r2, [r7, #20]
 800fb2e:	621a      	str	r2, [r3, #32]
}
 800fb30:	bf00      	nop
 800fb32:	371c      	adds	r7, #28
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr
 800fb3c:	fffeff8f 	.word	0xfffeff8f
 800fb40:	40010000 	.word	0x40010000
 800fb44:	40010400 	.word	0x40010400
 800fb48:	40014000 	.word	0x40014000
 800fb4c:	40014400 	.word	0x40014400
 800fb50:	40014800 	.word	0x40014800

0800fb54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb54:	b480      	push	{r7}
 800fb56:	b087      	sub	sp, #28
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6a1b      	ldr	r3, [r3, #32]
 800fb62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6a1b      	ldr	r3, [r3, #32]
 800fb68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	69db      	ldr	r3, [r3, #28]
 800fb7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fb7c:	68fa      	ldr	r2, [r7, #12]
 800fb7e:	4b24      	ldr	r3, [pc, #144]	; (800fc10 <TIM_OC4_SetConfig+0xbc>)
 800fb80:	4013      	ands	r3, r2
 800fb82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	021b      	lsls	r3, r3, #8
 800fb92:	68fa      	ldr	r2, [r7, #12]
 800fb94:	4313      	orrs	r3, r2
 800fb96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fb98:	693b      	ldr	r3, [r7, #16]
 800fb9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	689b      	ldr	r3, [r3, #8]
 800fba4:	031b      	lsls	r3, r3, #12
 800fba6:	693a      	ldr	r2, [r7, #16]
 800fba8:	4313      	orrs	r3, r2
 800fbaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	4a19      	ldr	r2, [pc, #100]	; (800fc14 <TIM_OC4_SetConfig+0xc0>)
 800fbb0:	4293      	cmp	r3, r2
 800fbb2:	d00f      	beq.n	800fbd4 <TIM_OC4_SetConfig+0x80>
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	4a18      	ldr	r2, [pc, #96]	; (800fc18 <TIM_OC4_SetConfig+0xc4>)
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d00b      	beq.n	800fbd4 <TIM_OC4_SetConfig+0x80>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	4a17      	ldr	r2, [pc, #92]	; (800fc1c <TIM_OC4_SetConfig+0xc8>)
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	d007      	beq.n	800fbd4 <TIM_OC4_SetConfig+0x80>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	4a16      	ldr	r2, [pc, #88]	; (800fc20 <TIM_OC4_SetConfig+0xcc>)
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	d003      	beq.n	800fbd4 <TIM_OC4_SetConfig+0x80>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	4a15      	ldr	r2, [pc, #84]	; (800fc24 <TIM_OC4_SetConfig+0xd0>)
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d109      	bne.n	800fbe8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fbda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	695b      	ldr	r3, [r3, #20]
 800fbe0:	019b      	lsls	r3, r3, #6
 800fbe2:	697a      	ldr	r2, [r7, #20]
 800fbe4:	4313      	orrs	r3, r2
 800fbe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	697a      	ldr	r2, [r7, #20]
 800fbec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	68fa      	ldr	r2, [r7, #12]
 800fbf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	685a      	ldr	r2, [r3, #4]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	693a      	ldr	r2, [r7, #16]
 800fc00:	621a      	str	r2, [r3, #32]
}
 800fc02:	bf00      	nop
 800fc04:	371c      	adds	r7, #28
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr
 800fc0e:	bf00      	nop
 800fc10:	feff8fff 	.word	0xfeff8fff
 800fc14:	40010000 	.word	0x40010000
 800fc18:	40010400 	.word	0x40010400
 800fc1c:	40014000 	.word	0x40014000
 800fc20:	40014400 	.word	0x40014400
 800fc24:	40014800 	.word	0x40014800

0800fc28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b087      	sub	sp, #28
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	6a1b      	ldr	r3, [r3, #32]
 800fc36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6a1b      	ldr	r3, [r3, #32]
 800fc3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	685b      	ldr	r3, [r3, #4]
 800fc48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fc50:	68fa      	ldr	r2, [r7, #12]
 800fc52:	4b21      	ldr	r3, [pc, #132]	; (800fcd8 <TIM_OC5_SetConfig+0xb0>)
 800fc54:	4013      	ands	r3, r2
 800fc56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	68fa      	ldr	r2, [r7, #12]
 800fc5e:	4313      	orrs	r3, r2
 800fc60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fc68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	689b      	ldr	r3, [r3, #8]
 800fc6e:	041b      	lsls	r3, r3, #16
 800fc70:	693a      	ldr	r2, [r7, #16]
 800fc72:	4313      	orrs	r3, r2
 800fc74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	4a18      	ldr	r2, [pc, #96]	; (800fcdc <TIM_OC5_SetConfig+0xb4>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d00f      	beq.n	800fc9e <TIM_OC5_SetConfig+0x76>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	4a17      	ldr	r2, [pc, #92]	; (800fce0 <TIM_OC5_SetConfig+0xb8>)
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d00b      	beq.n	800fc9e <TIM_OC5_SetConfig+0x76>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	4a16      	ldr	r2, [pc, #88]	; (800fce4 <TIM_OC5_SetConfig+0xbc>)
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	d007      	beq.n	800fc9e <TIM_OC5_SetConfig+0x76>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	4a15      	ldr	r2, [pc, #84]	; (800fce8 <TIM_OC5_SetConfig+0xc0>)
 800fc92:	4293      	cmp	r3, r2
 800fc94:	d003      	beq.n	800fc9e <TIM_OC5_SetConfig+0x76>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	4a14      	ldr	r2, [pc, #80]	; (800fcec <TIM_OC5_SetConfig+0xc4>)
 800fc9a:	4293      	cmp	r3, r2
 800fc9c:	d109      	bne.n	800fcb2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fca4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	695b      	ldr	r3, [r3, #20]
 800fcaa:	021b      	lsls	r3, r3, #8
 800fcac:	697a      	ldr	r2, [r7, #20]
 800fcae:	4313      	orrs	r3, r2
 800fcb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	697a      	ldr	r2, [r7, #20]
 800fcb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	68fa      	ldr	r2, [r7, #12]
 800fcbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	685a      	ldr	r2, [r3, #4]
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	693a      	ldr	r2, [r7, #16]
 800fcca:	621a      	str	r2, [r3, #32]
}
 800fccc:	bf00      	nop
 800fcce:	371c      	adds	r7, #28
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr
 800fcd8:	fffeff8f 	.word	0xfffeff8f
 800fcdc:	40010000 	.word	0x40010000
 800fce0:	40010400 	.word	0x40010400
 800fce4:	40014000 	.word	0x40014000
 800fce8:	40014400 	.word	0x40014400
 800fcec:	40014800 	.word	0x40014800

0800fcf0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b087      	sub	sp, #28
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6a1b      	ldr	r3, [r3, #32]
 800fcfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6a1b      	ldr	r3, [r3, #32]
 800fd04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	685b      	ldr	r3, [r3, #4]
 800fd10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fd18:	68fa      	ldr	r2, [r7, #12]
 800fd1a:	4b22      	ldr	r3, [pc, #136]	; (800fda4 <TIM_OC6_SetConfig+0xb4>)
 800fd1c:	4013      	ands	r3, r2
 800fd1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	021b      	lsls	r3, r3, #8
 800fd26:	68fa      	ldr	r2, [r7, #12]
 800fd28:	4313      	orrs	r3, r2
 800fd2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fd32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	689b      	ldr	r3, [r3, #8]
 800fd38:	051b      	lsls	r3, r3, #20
 800fd3a:	693a      	ldr	r2, [r7, #16]
 800fd3c:	4313      	orrs	r3, r2
 800fd3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	4a19      	ldr	r2, [pc, #100]	; (800fda8 <TIM_OC6_SetConfig+0xb8>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d00f      	beq.n	800fd68 <TIM_OC6_SetConfig+0x78>
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	4a18      	ldr	r2, [pc, #96]	; (800fdac <TIM_OC6_SetConfig+0xbc>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d00b      	beq.n	800fd68 <TIM_OC6_SetConfig+0x78>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	4a17      	ldr	r2, [pc, #92]	; (800fdb0 <TIM_OC6_SetConfig+0xc0>)
 800fd54:	4293      	cmp	r3, r2
 800fd56:	d007      	beq.n	800fd68 <TIM_OC6_SetConfig+0x78>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	4a16      	ldr	r2, [pc, #88]	; (800fdb4 <TIM_OC6_SetConfig+0xc4>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d003      	beq.n	800fd68 <TIM_OC6_SetConfig+0x78>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4a15      	ldr	r2, [pc, #84]	; (800fdb8 <TIM_OC6_SetConfig+0xc8>)
 800fd64:	4293      	cmp	r3, r2
 800fd66:	d109      	bne.n	800fd7c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fd6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	695b      	ldr	r3, [r3, #20]
 800fd74:	029b      	lsls	r3, r3, #10
 800fd76:	697a      	ldr	r2, [r7, #20]
 800fd78:	4313      	orrs	r3, r2
 800fd7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	697a      	ldr	r2, [r7, #20]
 800fd80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	68fa      	ldr	r2, [r7, #12]
 800fd86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	685a      	ldr	r2, [r3, #4]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	693a      	ldr	r2, [r7, #16]
 800fd94:	621a      	str	r2, [r3, #32]
}
 800fd96:	bf00      	nop
 800fd98:	371c      	adds	r7, #28
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda0:	4770      	bx	lr
 800fda2:	bf00      	nop
 800fda4:	feff8fff 	.word	0xfeff8fff
 800fda8:	40010000 	.word	0x40010000
 800fdac:	40010400 	.word	0x40010400
 800fdb0:	40014000 	.word	0x40014000
 800fdb4:	40014400 	.word	0x40014400
 800fdb8:	40014800 	.word	0x40014800

0800fdbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b087      	sub	sp, #28
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	6a1b      	ldr	r3, [r3, #32]
 800fdcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	6a1b      	ldr	r3, [r3, #32]
 800fdd2:	f023 0201 	bic.w	r2, r3, #1
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	699b      	ldr	r3, [r3, #24]
 800fdde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fde6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	011b      	lsls	r3, r3, #4
 800fdec:	693a      	ldr	r2, [r7, #16]
 800fdee:	4313      	orrs	r3, r2
 800fdf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	f023 030a 	bic.w	r3, r3, #10
 800fdf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fdfa:	697a      	ldr	r2, [r7, #20]
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	4313      	orrs	r3, r2
 800fe00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	693a      	ldr	r2, [r7, #16]
 800fe06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	697a      	ldr	r2, [r7, #20]
 800fe0c:	621a      	str	r2, [r3, #32]
}
 800fe0e:	bf00      	nop
 800fe10:	371c      	adds	r7, #28
 800fe12:	46bd      	mov	sp, r7
 800fe14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe18:	4770      	bx	lr

0800fe1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe1a:	b480      	push	{r7}
 800fe1c:	b087      	sub	sp, #28
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	60f8      	str	r0, [r7, #12]
 800fe22:	60b9      	str	r1, [r7, #8]
 800fe24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	6a1b      	ldr	r3, [r3, #32]
 800fe2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	6a1b      	ldr	r3, [r3, #32]
 800fe30:	f023 0210 	bic.w	r2, r3, #16
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	699b      	ldr	r3, [r3, #24]
 800fe3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fe44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	031b      	lsls	r3, r3, #12
 800fe4a:	693a      	ldr	r2, [r7, #16]
 800fe4c:	4313      	orrs	r3, r2
 800fe4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fe56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	011b      	lsls	r3, r3, #4
 800fe5c:	697a      	ldr	r2, [r7, #20]
 800fe5e:	4313      	orrs	r3, r2
 800fe60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	693a      	ldr	r2, [r7, #16]
 800fe66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	697a      	ldr	r2, [r7, #20]
 800fe6c:	621a      	str	r2, [r3, #32]
}
 800fe6e:	bf00      	nop
 800fe70:	371c      	adds	r7, #28
 800fe72:	46bd      	mov	sp, r7
 800fe74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe78:	4770      	bx	lr
	...

0800fe7c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b085      	sub	sp, #20
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	689b      	ldr	r3, [r3, #8]
 800fe8a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fe8c:	68fa      	ldr	r2, [r7, #12]
 800fe8e:	4b09      	ldr	r3, [pc, #36]	; (800feb4 <TIM_ITRx_SetConfig+0x38>)
 800fe90:	4013      	ands	r3, r2
 800fe92:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fe94:	683a      	ldr	r2, [r7, #0]
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	4313      	orrs	r3, r2
 800fe9a:	f043 0307 	orr.w	r3, r3, #7
 800fe9e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	68fa      	ldr	r2, [r7, #12]
 800fea4:	609a      	str	r2, [r3, #8]
}
 800fea6:	bf00      	nop
 800fea8:	3714      	adds	r7, #20
 800feaa:	46bd      	mov	sp, r7
 800feac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb0:	4770      	bx	lr
 800feb2:	bf00      	nop
 800feb4:	ffcfff8f 	.word	0xffcfff8f

0800feb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800feb8:	b480      	push	{r7}
 800feba:	b087      	sub	sp, #28
 800febc:	af00      	add	r7, sp, #0
 800febe:	60f8      	str	r0, [r7, #12]
 800fec0:	60b9      	str	r1, [r7, #8]
 800fec2:	607a      	str	r2, [r7, #4]
 800fec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	689b      	ldr	r3, [r3, #8]
 800feca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fed2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	021a      	lsls	r2, r3, #8
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	431a      	orrs	r2, r3
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	4313      	orrs	r3, r2
 800fee0:	697a      	ldr	r2, [r7, #20]
 800fee2:	4313      	orrs	r3, r2
 800fee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	697a      	ldr	r2, [r7, #20]
 800feea:	609a      	str	r2, [r3, #8]
}
 800feec:	bf00      	nop
 800feee:	371c      	adds	r7, #28
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr

0800fef8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b087      	sub	sp, #28
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	60f8      	str	r0, [r7, #12]
 800ff00:	60b9      	str	r1, [r7, #8]
 800ff02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	f003 031f 	and.w	r3, r3, #31
 800ff0a:	2201      	movs	r2, #1
 800ff0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ff10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	6a1a      	ldr	r2, [r3, #32]
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	43db      	mvns	r3, r3
 800ff1a:	401a      	ands	r2, r3
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	6a1a      	ldr	r2, [r3, #32]
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	f003 031f 	and.w	r3, r3, #31
 800ff2a:	6879      	ldr	r1, [r7, #4]
 800ff2c:	fa01 f303 	lsl.w	r3, r1, r3
 800ff30:	431a      	orrs	r2, r3
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	621a      	str	r2, [r3, #32]
}
 800ff36:	bf00      	nop
 800ff38:	371c      	adds	r7, #28
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr
	...

0800ff44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b085      	sub	sp, #20
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff54:	2b01      	cmp	r3, #1
 800ff56:	d101      	bne.n	800ff5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ff58:	2302      	movs	r3, #2
 800ff5a:	e06d      	b.n	8010038 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2201      	movs	r2, #1
 800ff60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2202      	movs	r2, #2
 800ff68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	685b      	ldr	r3, [r3, #4]
 800ff72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	689b      	ldr	r3, [r3, #8]
 800ff7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	4a30      	ldr	r2, [pc, #192]	; (8010044 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ff82:	4293      	cmp	r3, r2
 800ff84:	d004      	beq.n	800ff90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	4a2f      	ldr	r2, [pc, #188]	; (8010048 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d108      	bne.n	800ffa2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ff96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	685b      	ldr	r3, [r3, #4]
 800ff9c:	68fa      	ldr	r2, [r7, #12]
 800ff9e:	4313      	orrs	r3, r2
 800ffa0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffa8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	68fa      	ldr	r2, [r7, #12]
 800ffb0:	4313      	orrs	r3, r2
 800ffb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	68fa      	ldr	r2, [r7, #12]
 800ffba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	4a20      	ldr	r2, [pc, #128]	; (8010044 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	d022      	beq.n	801000c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ffce:	d01d      	beq.n	801000c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	4a1d      	ldr	r2, [pc, #116]	; (801004c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ffd6:	4293      	cmp	r3, r2
 800ffd8:	d018      	beq.n	801000c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	4a1c      	ldr	r2, [pc, #112]	; (8010050 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ffe0:	4293      	cmp	r3, r2
 800ffe2:	d013      	beq.n	801000c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	4a1a      	ldr	r2, [pc, #104]	; (8010054 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ffea:	4293      	cmp	r3, r2
 800ffec:	d00e      	beq.n	801000c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	4a15      	ldr	r2, [pc, #84]	; (8010048 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d009      	beq.n	801000c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	4a16      	ldr	r2, [pc, #88]	; (8010058 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fffe:	4293      	cmp	r3, r2
 8010000:	d004      	beq.n	801000c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	4a15      	ldr	r2, [pc, #84]	; (801005c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010008:	4293      	cmp	r3, r2
 801000a:	d10c      	bne.n	8010026 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010012:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	689b      	ldr	r3, [r3, #8]
 8010018:	68ba      	ldr	r2, [r7, #8]
 801001a:	4313      	orrs	r3, r2
 801001c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	68ba      	ldr	r2, [r7, #8]
 8010024:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2201      	movs	r2, #1
 801002a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2200      	movs	r2, #0
 8010032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010036:	2300      	movs	r3, #0
}
 8010038:	4618      	mov	r0, r3
 801003a:	3714      	adds	r7, #20
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr
 8010044:	40010000 	.word	0x40010000
 8010048:	40010400 	.word	0x40010400
 801004c:	40000400 	.word	0x40000400
 8010050:	40000800 	.word	0x40000800
 8010054:	40000c00 	.word	0x40000c00
 8010058:	40001800 	.word	0x40001800
 801005c:	40014000 	.word	0x40014000

08010060 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010060:	b480      	push	{r7}
 8010062:	b085      	sub	sp, #20
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801006a:	2300      	movs	r3, #0
 801006c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010074:	2b01      	cmp	r3, #1
 8010076:	d101      	bne.n	801007c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010078:	2302      	movs	r3, #2
 801007a:	e065      	b.n	8010148 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2201      	movs	r2, #1
 8010080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	68db      	ldr	r3, [r3, #12]
 801008e:	4313      	orrs	r3, r2
 8010090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	689b      	ldr	r3, [r3, #8]
 801009c:	4313      	orrs	r3, r2
 801009e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	685b      	ldr	r3, [r3, #4]
 80100aa:	4313      	orrs	r3, r2
 80100ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	4313      	orrs	r3, r2
 80100ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	691b      	ldr	r3, [r3, #16]
 80100c6:	4313      	orrs	r3, r2
 80100c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	695b      	ldr	r3, [r3, #20]
 80100d4:	4313      	orrs	r3, r2
 80100d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100e2:	4313      	orrs	r3, r2
 80100e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	699b      	ldr	r3, [r3, #24]
 80100f0:	041b      	lsls	r3, r3, #16
 80100f2:	4313      	orrs	r3, r2
 80100f4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	4a16      	ldr	r2, [pc, #88]	; (8010154 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d004      	beq.n	801010a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	4a14      	ldr	r2, [pc, #80]	; (8010158 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010106:	4293      	cmp	r3, r2
 8010108:	d115      	bne.n	8010136 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010114:	051b      	lsls	r3, r3, #20
 8010116:	4313      	orrs	r3, r2
 8010118:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	69db      	ldr	r3, [r3, #28]
 8010124:	4313      	orrs	r3, r2
 8010126:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	6a1b      	ldr	r3, [r3, #32]
 8010132:	4313      	orrs	r3, r2
 8010134:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	68fa      	ldr	r2, [r7, #12]
 801013c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2200      	movs	r2, #0
 8010142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010146:	2300      	movs	r3, #0
}
 8010148:	4618      	mov	r0, r3
 801014a:	3714      	adds	r7, #20
 801014c:	46bd      	mov	sp, r7
 801014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010152:	4770      	bx	lr
 8010154:	40010000 	.word	0x40010000
 8010158:	40010400 	.word	0x40010400

0801015c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801015c:	b480      	push	{r7}
 801015e:	b083      	sub	sp, #12
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010164:	bf00      	nop
 8010166:	370c      	adds	r7, #12
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr

08010170 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010170:	b480      	push	{r7}
 8010172:	b083      	sub	sp, #12
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010178:	bf00      	nop
 801017a:	370c      	adds	r7, #12
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010184:	b480      	push	{r7}
 8010186:	b083      	sub	sp, #12
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801018c:	bf00      	nop
 801018e:	370c      	adds	r7, #12
 8010190:	46bd      	mov	sp, r7
 8010192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010196:	4770      	bx	lr

08010198 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d101      	bne.n	80101aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80101a6:	2301      	movs	r3, #1
 80101a8:	e042      	b.n	8010230 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d106      	bne.n	80101c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2200      	movs	r2, #0
 80101b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f7f3 fc01 	bl	80039c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2224      	movs	r2, #36	; 0x24
 80101c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	681a      	ldr	r2, [r3, #0]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	f022 0201 	bic.w	r2, r2, #1
 80101d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d002      	beq.n	80101e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f001 fc42 	bl	8011a6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f000 fed7 	bl	8010f9c <UART_SetConfig>
 80101ee:	4603      	mov	r3, r0
 80101f0:	2b01      	cmp	r3, #1
 80101f2:	d101      	bne.n	80101f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80101f4:	2301      	movs	r3, #1
 80101f6:	e01b      	b.n	8010230 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	685a      	ldr	r2, [r3, #4]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010206:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	689a      	ldr	r2, [r3, #8]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010216:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	681a      	ldr	r2, [r3, #0]
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	f042 0201 	orr.w	r2, r2, #1
 8010226:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f001 fcc1 	bl	8011bb0 <UART_CheckIdleState>
 801022e:	4603      	mov	r3, r0
}
 8010230:	4618      	mov	r0, r3
 8010232:	3708      	adds	r7, #8
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}

08010238 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b08a      	sub	sp, #40	; 0x28
 801023c:	af02      	add	r7, sp, #8
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	603b      	str	r3, [r7, #0]
 8010244:	4613      	mov	r3, r2
 8010246:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801024e:	2b20      	cmp	r3, #32
 8010250:	d17b      	bne.n	801034a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d002      	beq.n	801025e <HAL_UART_Transmit+0x26>
 8010258:	88fb      	ldrh	r3, [r7, #6]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d101      	bne.n	8010262 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801025e:	2301      	movs	r3, #1
 8010260:	e074      	b.n	801034c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2200      	movs	r2, #0
 8010266:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	2221      	movs	r2, #33	; 0x21
 801026e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010272:	f7f3 ff1b 	bl	80040ac <HAL_GetTick>
 8010276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	88fa      	ldrh	r2, [r7, #6]
 801027c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	88fa      	ldrh	r2, [r7, #6]
 8010284:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	689b      	ldr	r3, [r3, #8]
 801028c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010290:	d108      	bne.n	80102a4 <HAL_UART_Transmit+0x6c>
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	691b      	ldr	r3, [r3, #16]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d104      	bne.n	80102a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801029a:	2300      	movs	r3, #0
 801029c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	61bb      	str	r3, [r7, #24]
 80102a2:	e003      	b.n	80102ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80102a8:	2300      	movs	r3, #0
 80102aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80102ac:	e030      	b.n	8010310 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	9300      	str	r3, [sp, #0]
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	2200      	movs	r2, #0
 80102b6:	2180      	movs	r1, #128	; 0x80
 80102b8:	68f8      	ldr	r0, [r7, #12]
 80102ba:	f001 fd23 	bl	8011d04 <UART_WaitOnFlagUntilTimeout>
 80102be:	4603      	mov	r3, r0
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d005      	beq.n	80102d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	2220      	movs	r2, #32
 80102c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80102cc:	2303      	movs	r3, #3
 80102ce:	e03d      	b.n	801034c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80102d0:	69fb      	ldr	r3, [r7, #28]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d10b      	bne.n	80102ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80102d6:	69bb      	ldr	r3, [r7, #24]
 80102d8:	881b      	ldrh	r3, [r3, #0]
 80102da:	461a      	mov	r2, r3
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80102e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80102e6:	69bb      	ldr	r3, [r7, #24]
 80102e8:	3302      	adds	r3, #2
 80102ea:	61bb      	str	r3, [r7, #24]
 80102ec:	e007      	b.n	80102fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80102ee:	69fb      	ldr	r3, [r7, #28]
 80102f0:	781a      	ldrb	r2, [r3, #0]
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80102f8:	69fb      	ldr	r3, [r7, #28]
 80102fa:	3301      	adds	r3, #1
 80102fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010304:	b29b      	uxth	r3, r3
 8010306:	3b01      	subs	r3, #1
 8010308:	b29a      	uxth	r2, r3
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010316:	b29b      	uxth	r3, r3
 8010318:	2b00      	cmp	r3, #0
 801031a:	d1c8      	bne.n	80102ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	9300      	str	r3, [sp, #0]
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	2200      	movs	r2, #0
 8010324:	2140      	movs	r1, #64	; 0x40
 8010326:	68f8      	ldr	r0, [r7, #12]
 8010328:	f001 fcec 	bl	8011d04 <UART_WaitOnFlagUntilTimeout>
 801032c:	4603      	mov	r3, r0
 801032e:	2b00      	cmp	r3, #0
 8010330:	d005      	beq.n	801033e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	2220      	movs	r2, #32
 8010336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801033a:	2303      	movs	r3, #3
 801033c:	e006      	b.n	801034c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2220      	movs	r2, #32
 8010342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8010346:	2300      	movs	r3, #0
 8010348:	e000      	b.n	801034c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801034a:	2302      	movs	r3, #2
  }
}
 801034c:	4618      	mov	r0, r3
 801034e:	3720      	adds	r7, #32
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b08a      	sub	sp, #40	; 0x28
 8010358:	af02      	add	r7, sp, #8
 801035a:	60f8      	str	r0, [r7, #12]
 801035c:	60b9      	str	r1, [r7, #8]
 801035e:	603b      	str	r3, [r7, #0]
 8010360:	4613      	mov	r3, r2
 8010362:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801036a:	2b20      	cmp	r3, #32
 801036c:	f040 80b5 	bne.w	80104da <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d002      	beq.n	801037c <HAL_UART_Receive+0x28>
 8010376:	88fb      	ldrh	r3, [r7, #6]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d101      	bne.n	8010380 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801037c:	2301      	movs	r3, #1
 801037e:	e0ad      	b.n	80104dc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	2200      	movs	r2, #0
 8010384:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	2222      	movs	r2, #34	; 0x22
 801038c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	2200      	movs	r2, #0
 8010394:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010396:	f7f3 fe89 	bl	80040ac <HAL_GetTick>
 801039a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	88fa      	ldrh	r2, [r7, #6]
 80103a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	88fa      	ldrh	r2, [r7, #6]
 80103a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	689b      	ldr	r3, [r3, #8]
 80103b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103b4:	d10e      	bne.n	80103d4 <HAL_UART_Receive+0x80>
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	691b      	ldr	r3, [r3, #16]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d105      	bne.n	80103ca <HAL_UART_Receive+0x76>
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80103c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103c8:	e02d      	b.n	8010426 <HAL_UART_Receive+0xd2>
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	22ff      	movs	r2, #255	; 0xff
 80103ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103d2:	e028      	b.n	8010426 <HAL_UART_Receive+0xd2>
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	689b      	ldr	r3, [r3, #8]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d10d      	bne.n	80103f8 <HAL_UART_Receive+0xa4>
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	691b      	ldr	r3, [r3, #16]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d104      	bne.n	80103ee <HAL_UART_Receive+0x9a>
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	22ff      	movs	r2, #255	; 0xff
 80103e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103ec:	e01b      	b.n	8010426 <HAL_UART_Receive+0xd2>
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	227f      	movs	r2, #127	; 0x7f
 80103f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80103f6:	e016      	b.n	8010426 <HAL_UART_Receive+0xd2>
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	689b      	ldr	r3, [r3, #8]
 80103fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010400:	d10d      	bne.n	801041e <HAL_UART_Receive+0xca>
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	691b      	ldr	r3, [r3, #16]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d104      	bne.n	8010414 <HAL_UART_Receive+0xc0>
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	227f      	movs	r2, #127	; 0x7f
 801040e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010412:	e008      	b.n	8010426 <HAL_UART_Receive+0xd2>
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	223f      	movs	r2, #63	; 0x3f
 8010418:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801041c:	e003      	b.n	8010426 <HAL_UART_Receive+0xd2>
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2200      	movs	r2, #0
 8010422:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801042c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	689b      	ldr	r3, [r3, #8]
 8010432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010436:	d108      	bne.n	801044a <HAL_UART_Receive+0xf6>
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	691b      	ldr	r3, [r3, #16]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d104      	bne.n	801044a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8010440:	2300      	movs	r3, #0
 8010442:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	61bb      	str	r3, [r7, #24]
 8010448:	e003      	b.n	8010452 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801044e:	2300      	movs	r3, #0
 8010450:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8010452:	e036      	b.n	80104c2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	9300      	str	r3, [sp, #0]
 8010458:	697b      	ldr	r3, [r7, #20]
 801045a:	2200      	movs	r2, #0
 801045c:	2120      	movs	r1, #32
 801045e:	68f8      	ldr	r0, [r7, #12]
 8010460:	f001 fc50 	bl	8011d04 <UART_WaitOnFlagUntilTimeout>
 8010464:	4603      	mov	r3, r0
 8010466:	2b00      	cmp	r3, #0
 8010468:	d005      	beq.n	8010476 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	2220      	movs	r2, #32
 801046e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8010472:	2303      	movs	r3, #3
 8010474:	e032      	b.n	80104dc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8010476:	69fb      	ldr	r3, [r7, #28]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d10c      	bne.n	8010496 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010482:	b29a      	uxth	r2, r3
 8010484:	8a7b      	ldrh	r3, [r7, #18]
 8010486:	4013      	ands	r3, r2
 8010488:	b29a      	uxth	r2, r3
 801048a:	69bb      	ldr	r3, [r7, #24]
 801048c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801048e:	69bb      	ldr	r3, [r7, #24]
 8010490:	3302      	adds	r3, #2
 8010492:	61bb      	str	r3, [r7, #24]
 8010494:	e00c      	b.n	80104b0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801049c:	b2da      	uxtb	r2, r3
 801049e:	8a7b      	ldrh	r3, [r7, #18]
 80104a0:	b2db      	uxtb	r3, r3
 80104a2:	4013      	ands	r3, r2
 80104a4:	b2da      	uxtb	r2, r3
 80104a6:	69fb      	ldr	r3, [r7, #28]
 80104a8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80104aa:	69fb      	ldr	r3, [r7, #28]
 80104ac:	3301      	adds	r3, #1
 80104ae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104b6:	b29b      	uxth	r3, r3
 80104b8:	3b01      	subs	r3, #1
 80104ba:	b29a      	uxth	r2, r3
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104c8:	b29b      	uxth	r3, r3
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d1c2      	bne.n	8010454 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2220      	movs	r2, #32
 80104d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80104d6:	2300      	movs	r3, #0
 80104d8:	e000      	b.n	80104dc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80104da:	2302      	movs	r3, #2
  }
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3720      	adds	r7, #32
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b08a      	sub	sp, #40	; 0x28
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	60f8      	str	r0, [r7, #12]
 80104ec:	60b9      	str	r1, [r7, #8]
 80104ee:	4613      	mov	r3, r2
 80104f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80104f8:	2b20      	cmp	r3, #32
 80104fa:	d137      	bne.n	801056c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d002      	beq.n	8010508 <HAL_UART_Receive_IT+0x24>
 8010502:	88fb      	ldrh	r3, [r7, #6]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d101      	bne.n	801050c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010508:	2301      	movs	r3, #1
 801050a:	e030      	b.n	801056e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	2200      	movs	r2, #0
 8010510:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	4a18      	ldr	r2, [pc, #96]	; (8010578 <HAL_UART_Receive_IT+0x94>)
 8010518:	4293      	cmp	r3, r2
 801051a:	d01f      	beq.n	801055c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	685b      	ldr	r3, [r3, #4]
 8010522:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010526:	2b00      	cmp	r3, #0
 8010528:	d018      	beq.n	801055c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	e853 3f00 	ldrex	r3, [r3]
 8010536:	613b      	str	r3, [r7, #16]
   return(result);
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801053e:	627b      	str	r3, [r7, #36]	; 0x24
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	461a      	mov	r2, r3
 8010546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010548:	623b      	str	r3, [r7, #32]
 801054a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801054c:	69f9      	ldr	r1, [r7, #28]
 801054e:	6a3a      	ldr	r2, [r7, #32]
 8010550:	e841 2300 	strex	r3, r2, [r1]
 8010554:	61bb      	str	r3, [r7, #24]
   return(result);
 8010556:	69bb      	ldr	r3, [r7, #24]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d1e6      	bne.n	801052a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801055c:	88fb      	ldrh	r3, [r7, #6]
 801055e:	461a      	mov	r2, r3
 8010560:	68b9      	ldr	r1, [r7, #8]
 8010562:	68f8      	ldr	r0, [r7, #12]
 8010564:	f001 fc3c 	bl	8011de0 <UART_Start_Receive_IT>
 8010568:	4603      	mov	r3, r0
 801056a:	e000      	b.n	801056e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801056c:	2302      	movs	r3, #2
  }
}
 801056e:	4618      	mov	r0, r3
 8010570:	3728      	adds	r7, #40	; 0x28
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	58000c00 	.word	0x58000c00

0801057c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b08a      	sub	sp, #40	; 0x28
 8010580:	af00      	add	r7, sp, #0
 8010582:	60f8      	str	r0, [r7, #12]
 8010584:	60b9      	str	r1, [r7, #8]
 8010586:	4613      	mov	r3, r2
 8010588:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010590:	2b20      	cmp	r3, #32
 8010592:	d167      	bne.n	8010664 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d002      	beq.n	80105a0 <HAL_UART_Transmit_DMA+0x24>
 801059a:	88fb      	ldrh	r3, [r7, #6]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d101      	bne.n	80105a4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80105a0:	2301      	movs	r3, #1
 80105a2:	e060      	b.n	8010666 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	68ba      	ldr	r2, [r7, #8]
 80105a8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	88fa      	ldrh	r2, [r7, #6]
 80105ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	88fa      	ldrh	r2, [r7, #6]
 80105b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	2200      	movs	r2, #0
 80105be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	2221      	movs	r2, #33	; 0x21
 80105c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d028      	beq.n	8010624 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105d6:	4a26      	ldr	r2, [pc, #152]	; (8010670 <HAL_UART_Transmit_DMA+0xf4>)
 80105d8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105de:	4a25      	ldr	r2, [pc, #148]	; (8010674 <HAL_UART_Transmit_DMA+0xf8>)
 80105e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105e6:	4a24      	ldr	r2, [pc, #144]	; (8010678 <HAL_UART_Transmit_DMA+0xfc>)
 80105e8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105ee:	2200      	movs	r2, #0
 80105f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105fa:	4619      	mov	r1, r3
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	3328      	adds	r3, #40	; 0x28
 8010602:	461a      	mov	r2, r3
 8010604:	88fb      	ldrh	r3, [r7, #6]
 8010606:	f7f6 f9d5 	bl	80069b4 <HAL_DMA_Start_IT>
 801060a:	4603      	mov	r3, r0
 801060c:	2b00      	cmp	r3, #0
 801060e:	d009      	beq.n	8010624 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	2210      	movs	r2, #16
 8010614:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2220      	movs	r2, #32
 801061c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010620:	2301      	movs	r3, #1
 8010622:	e020      	b.n	8010666 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	2240      	movs	r2, #64	; 0x40
 801062a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	3308      	adds	r3, #8
 8010632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	e853 3f00 	ldrex	r3, [r3]
 801063a:	613b      	str	r3, [r7, #16]
   return(result);
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010642:	627b      	str	r3, [r7, #36]	; 0x24
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	3308      	adds	r3, #8
 801064a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801064c:	623a      	str	r2, [r7, #32]
 801064e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010650:	69f9      	ldr	r1, [r7, #28]
 8010652:	6a3a      	ldr	r2, [r7, #32]
 8010654:	e841 2300 	strex	r3, r2, [r1]
 8010658:	61bb      	str	r3, [r7, #24]
   return(result);
 801065a:	69bb      	ldr	r3, [r7, #24]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d1e5      	bne.n	801062c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010660:	2300      	movs	r3, #0
 8010662:	e000      	b.n	8010666 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010664:	2302      	movs	r3, #2
  }
}
 8010666:	4618      	mov	r0, r3
 8010668:	3728      	adds	r7, #40	; 0x28
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	08012175 	.word	0x08012175
 8010674:	0801220b 	.word	0x0801220b
 8010678:	08012227 	.word	0x08012227

0801067c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b09a      	sub	sp, #104	; 0x68
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801068a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801068c:	e853 3f00 	ldrex	r3, [r3]
 8010690:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010694:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010698:	667b      	str	r3, [r7, #100]	; 0x64
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	461a      	mov	r2, r3
 80106a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80106a2:	657b      	str	r3, [r7, #84]	; 0x54
 80106a4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80106a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106aa:	e841 2300 	strex	r3, r2, [r1]
 80106ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80106b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d1e6      	bne.n	8010684 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	3308      	adds	r3, #8
 80106bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106c0:	e853 3f00 	ldrex	r3, [r3]
 80106c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80106c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106c8:	4b46      	ldr	r3, [pc, #280]	; (80107e4 <HAL_UART_AbortReceive+0x168>)
 80106ca:	4013      	ands	r3, r2
 80106cc:	663b      	str	r3, [r7, #96]	; 0x60
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	3308      	adds	r3, #8
 80106d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80106d6:	643a      	str	r2, [r7, #64]	; 0x40
 80106d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80106dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106de:	e841 2300 	strex	r3, r2, [r1]
 80106e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80106e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d1e5      	bne.n	80106b6 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106ee:	2b01      	cmp	r3, #1
 80106f0:	d118      	bne.n	8010724 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106f8:	6a3b      	ldr	r3, [r7, #32]
 80106fa:	e853 3f00 	ldrex	r3, [r3]
 80106fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8010700:	69fb      	ldr	r3, [r7, #28]
 8010702:	f023 0310 	bic.w	r3, r3, #16
 8010706:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	461a      	mov	r2, r3
 801070e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010712:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010718:	e841 2300 	strex	r3, r2, [r1]
 801071c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801071e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010720:	2b00      	cmp	r3, #0
 8010722:	d1e6      	bne.n	80106f2 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	689b      	ldr	r3, [r3, #8]
 801072a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801072e:	2b40      	cmp	r3, #64	; 0x40
 8010730:	d13b      	bne.n	80107aa <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	3308      	adds	r3, #8
 8010738:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	e853 3f00 	ldrex	r3, [r3]
 8010740:	60bb      	str	r3, [r7, #8]
   return(result);
 8010742:	68bb      	ldr	r3, [r7, #8]
 8010744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010748:	65bb      	str	r3, [r7, #88]	; 0x58
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	3308      	adds	r3, #8
 8010750:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010752:	61ba      	str	r2, [r7, #24]
 8010754:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010756:	6979      	ldr	r1, [r7, #20]
 8010758:	69ba      	ldr	r2, [r7, #24]
 801075a:	e841 2300 	strex	r3, r2, [r1]
 801075e:	613b      	str	r3, [r7, #16]
   return(result);
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d1e5      	bne.n	8010732 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801076c:	2b00      	cmp	r3, #0
 801076e:	d01c      	beq.n	80107aa <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010776:	2200      	movs	r2, #0
 8010778:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010780:	4618      	mov	r0, r3
 8010782:	f7f6 fb81 	bl	8006e88 <HAL_DMA_Abort>
 8010786:	4603      	mov	r3, r0
 8010788:	2b00      	cmp	r3, #0
 801078a:	d00e      	beq.n	80107aa <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010792:	4618      	mov	r0, r3
 8010794:	f7f8 f806 	bl	80087a4 <HAL_DMA_GetError>
 8010798:	4603      	mov	r3, r0
 801079a:	2b20      	cmp	r3, #32
 801079c:	d105      	bne.n	80107aa <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2210      	movs	r2, #16
 80107a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80107a6:	2303      	movs	r3, #3
 80107a8:	e017      	b.n	80107da <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2200      	movs	r2, #0
 80107ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	220f      	movs	r2, #15
 80107b8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	699a      	ldr	r2, [r3, #24]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	f042 0208 	orr.w	r2, r2, #8
 80107c8:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2220      	movs	r2, #32
 80107ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	2200      	movs	r2, #0
 80107d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80107d8:	2300      	movs	r3, #0
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3768      	adds	r7, #104	; 0x68
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	effffffe 	.word	0xeffffffe

080107e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b0ba      	sub	sp, #232	; 0xe8
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	69db      	ldr	r3, [r3, #28]
 80107f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	689b      	ldr	r3, [r3, #8]
 801080a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801080e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010812:	f640 030f 	movw	r3, #2063	; 0x80f
 8010816:	4013      	ands	r3, r2
 8010818:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801081c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010820:	2b00      	cmp	r3, #0
 8010822:	d11b      	bne.n	801085c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010828:	f003 0320 	and.w	r3, r3, #32
 801082c:	2b00      	cmp	r3, #0
 801082e:	d015      	beq.n	801085c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010834:	f003 0320 	and.w	r3, r3, #32
 8010838:	2b00      	cmp	r3, #0
 801083a:	d105      	bne.n	8010848 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801083c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010844:	2b00      	cmp	r3, #0
 8010846:	d009      	beq.n	801085c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801084c:	2b00      	cmp	r3, #0
 801084e:	f000 8377 	beq.w	8010f40 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	4798      	blx	r3
      }
      return;
 801085a:	e371      	b.n	8010f40 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801085c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010860:	2b00      	cmp	r3, #0
 8010862:	f000 8123 	beq.w	8010aac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010866:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801086a:	4b8d      	ldr	r3, [pc, #564]	; (8010aa0 <HAL_UART_IRQHandler+0x2b8>)
 801086c:	4013      	ands	r3, r2
 801086e:	2b00      	cmp	r3, #0
 8010870:	d106      	bne.n	8010880 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010872:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010876:	4b8b      	ldr	r3, [pc, #556]	; (8010aa4 <HAL_UART_IRQHandler+0x2bc>)
 8010878:	4013      	ands	r3, r2
 801087a:	2b00      	cmp	r3, #0
 801087c:	f000 8116 	beq.w	8010aac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010884:	f003 0301 	and.w	r3, r3, #1
 8010888:	2b00      	cmp	r3, #0
 801088a:	d011      	beq.n	80108b0 <HAL_UART_IRQHandler+0xc8>
 801088c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010894:	2b00      	cmp	r3, #0
 8010896:	d00b      	beq.n	80108b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	2201      	movs	r2, #1
 801089e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108a6:	f043 0201 	orr.w	r2, r3, #1
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80108b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108b4:	f003 0302 	and.w	r3, r3, #2
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d011      	beq.n	80108e0 <HAL_UART_IRQHandler+0xf8>
 80108bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108c0:	f003 0301 	and.w	r3, r3, #1
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d00b      	beq.n	80108e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	2202      	movs	r2, #2
 80108ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108d6:	f043 0204 	orr.w	r2, r3, #4
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80108e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108e4:	f003 0304 	and.w	r3, r3, #4
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d011      	beq.n	8010910 <HAL_UART_IRQHandler+0x128>
 80108ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108f0:	f003 0301 	and.w	r3, r3, #1
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d00b      	beq.n	8010910 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	2204      	movs	r2, #4
 80108fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010906:	f043 0202 	orr.w	r2, r3, #2
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010914:	f003 0308 	and.w	r3, r3, #8
 8010918:	2b00      	cmp	r3, #0
 801091a:	d017      	beq.n	801094c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801091c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010920:	f003 0320 	and.w	r3, r3, #32
 8010924:	2b00      	cmp	r3, #0
 8010926:	d105      	bne.n	8010934 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010928:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801092c:	4b5c      	ldr	r3, [pc, #368]	; (8010aa0 <HAL_UART_IRQHandler+0x2b8>)
 801092e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010930:	2b00      	cmp	r3, #0
 8010932:	d00b      	beq.n	801094c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	2208      	movs	r2, #8
 801093a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010942:	f043 0208 	orr.w	r2, r3, #8
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801094c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010954:	2b00      	cmp	r3, #0
 8010956:	d012      	beq.n	801097e <HAL_UART_IRQHandler+0x196>
 8010958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801095c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010960:	2b00      	cmp	r3, #0
 8010962:	d00c      	beq.n	801097e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801096c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010974:	f043 0220 	orr.w	r2, r3, #32
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010984:	2b00      	cmp	r3, #0
 8010986:	f000 82dd 	beq.w	8010f44 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801098a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801098e:	f003 0320 	and.w	r3, r3, #32
 8010992:	2b00      	cmp	r3, #0
 8010994:	d013      	beq.n	80109be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801099a:	f003 0320 	and.w	r3, r3, #32
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d105      	bne.n	80109ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80109a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80109a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d007      	beq.n	80109be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d003      	beq.n	80109be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	689b      	ldr	r3, [r3, #8]
 80109ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109d2:	2b40      	cmp	r3, #64	; 0x40
 80109d4:	d005      	beq.n	80109e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80109d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80109da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d054      	beq.n	8010a8c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f001 fb60 	bl	80120a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	689b      	ldr	r3, [r3, #8]
 80109ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109f2:	2b40      	cmp	r3, #64	; 0x40
 80109f4:	d146      	bne.n	8010a84 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	3308      	adds	r3, #8
 80109fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010a04:	e853 3f00 	ldrex	r3, [r3]
 8010a08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	3308      	adds	r3, #8
 8010a1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010a22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010a2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010a32:	e841 2300 	strex	r3, r2, [r1]
 8010a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010a3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d1d9      	bne.n	80109f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d017      	beq.n	8010a7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a52:	4a15      	ldr	r2, [pc, #84]	; (8010aa8 <HAL_UART_IRQHandler+0x2c0>)
 8010a54:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7f6 fd31 	bl	80074c4 <HAL_DMA_Abort_IT>
 8010a62:	4603      	mov	r3, r0
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d019      	beq.n	8010a9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a70:	687a      	ldr	r2, [r7, #4]
 8010a72:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010a76:	4610      	mov	r0, r2
 8010a78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a7a:	e00f      	b.n	8010a9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f000 fa77 	bl	8010f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a82:	e00b      	b.n	8010a9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f000 fa73 	bl	8010f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a8a:	e007      	b.n	8010a9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f000 fa6f 	bl	8010f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2200      	movs	r2, #0
 8010a96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010a9a:	e253      	b.n	8010f44 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a9c:	bf00      	nop
    return;
 8010a9e:	e251      	b.n	8010f44 <HAL_UART_IRQHandler+0x75c>
 8010aa0:	10000001 	.word	0x10000001
 8010aa4:	04000120 	.word	0x04000120
 8010aa8:	080122a7 	.word	0x080122a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ab0:	2b01      	cmp	r3, #1
 8010ab2:	f040 81e7 	bne.w	8010e84 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010aba:	f003 0310 	and.w	r3, r3, #16
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	f000 81e0 	beq.w	8010e84 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ac8:	f003 0310 	and.w	r3, r3, #16
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	f000 81d9 	beq.w	8010e84 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	2210      	movs	r2, #16
 8010ad8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	689b      	ldr	r3, [r3, #8]
 8010ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ae4:	2b40      	cmp	r3, #64	; 0x40
 8010ae6:	f040 8151 	bne.w	8010d8c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	4a96      	ldr	r2, [pc, #600]	; (8010d4c <HAL_UART_IRQHandler+0x564>)
 8010af4:	4293      	cmp	r3, r2
 8010af6:	d068      	beq.n	8010bca <HAL_UART_IRQHandler+0x3e2>
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	4a93      	ldr	r2, [pc, #588]	; (8010d50 <HAL_UART_IRQHandler+0x568>)
 8010b02:	4293      	cmp	r3, r2
 8010b04:	d061      	beq.n	8010bca <HAL_UART_IRQHandler+0x3e2>
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	4a91      	ldr	r2, [pc, #580]	; (8010d54 <HAL_UART_IRQHandler+0x56c>)
 8010b10:	4293      	cmp	r3, r2
 8010b12:	d05a      	beq.n	8010bca <HAL_UART_IRQHandler+0x3e2>
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	4a8e      	ldr	r2, [pc, #568]	; (8010d58 <HAL_UART_IRQHandler+0x570>)
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	d053      	beq.n	8010bca <HAL_UART_IRQHandler+0x3e2>
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	4a8c      	ldr	r2, [pc, #560]	; (8010d5c <HAL_UART_IRQHandler+0x574>)
 8010b2c:	4293      	cmp	r3, r2
 8010b2e:	d04c      	beq.n	8010bca <HAL_UART_IRQHandler+0x3e2>
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	4a89      	ldr	r2, [pc, #548]	; (8010d60 <HAL_UART_IRQHandler+0x578>)
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d045      	beq.n	8010bca <HAL_UART_IRQHandler+0x3e2>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	4a87      	ldr	r2, [pc, #540]	; (8010d64 <HAL_UART_IRQHandler+0x57c>)
 8010b48:	4293      	cmp	r3, r2
 8010b4a:	d03e      	beq.n	8010bca <HAL_UART_IRQHandler+0x3e2>
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	4a84      	ldr	r2, [pc, #528]	; (8010d68 <HAL_UART_IRQHandler+0x580>)
 8010b56:	4293      	cmp	r3, r2
 8010b58:	d037      	beq.n	8010bca <HAL_UART_IRQHandler+0x3e2>
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	4a82      	ldr	r2, [pc, #520]	; (8010d6c <HAL_UART_IRQHandler+0x584>)
 8010b64:	4293      	cmp	r3, r2
 8010b66:	d030      	beq.n	8010bca <HAL_UART_IRQHandler+0x3e2>
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	4a7f      	ldr	r2, [pc, #508]	; (8010d70 <HAL_UART_IRQHandler+0x588>)
 8010b72:	4293      	cmp	r3, r2
 8010b74:	d029      	beq.n	8010bca <HAL_UART_IRQHandler+0x3e2>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	4a7d      	ldr	r2, [pc, #500]	; (8010d74 <HAL_UART_IRQHandler+0x58c>)
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d022      	beq.n	8010bca <HAL_UART_IRQHandler+0x3e2>
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	4a7a      	ldr	r2, [pc, #488]	; (8010d78 <HAL_UART_IRQHandler+0x590>)
 8010b8e:	4293      	cmp	r3, r2
 8010b90:	d01b      	beq.n	8010bca <HAL_UART_IRQHandler+0x3e2>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4a78      	ldr	r2, [pc, #480]	; (8010d7c <HAL_UART_IRQHandler+0x594>)
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	d014      	beq.n	8010bca <HAL_UART_IRQHandler+0x3e2>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	4a75      	ldr	r2, [pc, #468]	; (8010d80 <HAL_UART_IRQHandler+0x598>)
 8010baa:	4293      	cmp	r3, r2
 8010bac:	d00d      	beq.n	8010bca <HAL_UART_IRQHandler+0x3e2>
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	4a73      	ldr	r2, [pc, #460]	; (8010d84 <HAL_UART_IRQHandler+0x59c>)
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d006      	beq.n	8010bca <HAL_UART_IRQHandler+0x3e2>
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	4a70      	ldr	r2, [pc, #448]	; (8010d88 <HAL_UART_IRQHandler+0x5a0>)
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	d106      	bne.n	8010bd8 <HAL_UART_IRQHandler+0x3f0>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	685b      	ldr	r3, [r3, #4]
 8010bd4:	b29b      	uxth	r3, r3
 8010bd6:	e005      	b.n	8010be4 <HAL_UART_IRQHandler+0x3fc>
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	685b      	ldr	r3, [r3, #4]
 8010be2:	b29b      	uxth	r3, r3
 8010be4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010be8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	f000 81ab 	beq.w	8010f48 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010bf8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010bfc:	429a      	cmp	r2, r3
 8010bfe:	f080 81a3 	bcs.w	8010f48 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010c08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c12:	69db      	ldr	r3, [r3, #28]
 8010c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c18:	f000 8087 	beq.w	8010d2a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c28:	e853 3f00 	ldrex	r3, [r3]
 8010c2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	461a      	mov	r2, r3
 8010c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010c46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010c4a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010c52:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010c56:	e841 2300 	strex	r3, r2, [r1]
 8010c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d1da      	bne.n	8010c1c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	3308      	adds	r3, #8
 8010c6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c70:	e853 3f00 	ldrex	r3, [r3]
 8010c74:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010c78:	f023 0301 	bic.w	r3, r3, #1
 8010c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	3308      	adds	r3, #8
 8010c86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010c8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010c8e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c90:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010c92:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010c96:	e841 2300 	strex	r3, r2, [r1]
 8010c9a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d1e1      	bne.n	8010c66 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	3308      	adds	r3, #8
 8010ca8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010cac:	e853 3f00 	ldrex	r3, [r3]
 8010cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	3308      	adds	r3, #8
 8010cc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010cc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010cc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010ccc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010cce:	e841 2300 	strex	r3, r2, [r1]
 8010cd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d1e3      	bne.n	8010ca2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2220      	movs	r2, #32
 8010cde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cf0:	e853 3f00 	ldrex	r3, [r3]
 8010cf4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010cf8:	f023 0310 	bic.w	r3, r3, #16
 8010cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	461a      	mov	r2, r3
 8010d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010d0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8010d0c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010d10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010d12:	e841 2300 	strex	r3, r2, [r1]
 8010d16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010d18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d1e4      	bne.n	8010ce8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7f6 f8af 	bl	8006e88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2202      	movs	r2, #2
 8010d2e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d3c:	b29b      	uxth	r3, r3
 8010d3e:	1ad3      	subs	r3, r2, r3
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	4619      	mov	r1, r3
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f000 f91d 	bl	8010f84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010d4a:	e0fd      	b.n	8010f48 <HAL_UART_IRQHandler+0x760>
 8010d4c:	40020010 	.word	0x40020010
 8010d50:	40020028 	.word	0x40020028
 8010d54:	40020040 	.word	0x40020040
 8010d58:	40020058 	.word	0x40020058
 8010d5c:	40020070 	.word	0x40020070
 8010d60:	40020088 	.word	0x40020088
 8010d64:	400200a0 	.word	0x400200a0
 8010d68:	400200b8 	.word	0x400200b8
 8010d6c:	40020410 	.word	0x40020410
 8010d70:	40020428 	.word	0x40020428
 8010d74:	40020440 	.word	0x40020440
 8010d78:	40020458 	.word	0x40020458
 8010d7c:	40020470 	.word	0x40020470
 8010d80:	40020488 	.word	0x40020488
 8010d84:	400204a0 	.word	0x400204a0
 8010d88:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d98:	b29b      	uxth	r3, r3
 8010d9a:	1ad3      	subs	r3, r2, r3
 8010d9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010da6:	b29b      	uxth	r3, r3
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	f000 80cf 	beq.w	8010f4c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010dae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	f000 80ca 	beq.w	8010f4c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc0:	e853 3f00 	ldrex	r3, [r3]
 8010dc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010dcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	461a      	mov	r2, r3
 8010dd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010dda:	647b      	str	r3, [r7, #68]	; 0x44
 8010ddc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010de0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010de2:	e841 2300 	strex	r3, r2, [r1]
 8010de6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d1e4      	bne.n	8010db8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	3308      	adds	r3, #8
 8010df4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df8:	e853 3f00 	ldrex	r3, [r3]
 8010dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8010dfe:	6a3a      	ldr	r2, [r7, #32]
 8010e00:	4b55      	ldr	r3, [pc, #340]	; (8010f58 <HAL_UART_IRQHandler+0x770>)
 8010e02:	4013      	ands	r3, r2
 8010e04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	3308      	adds	r3, #8
 8010e0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010e12:	633a      	str	r2, [r7, #48]	; 0x30
 8010e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e1a:	e841 2300 	strex	r3, r2, [r1]
 8010e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d1e3      	bne.n	8010dee <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2220      	movs	r2, #32
 8010e2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2200      	movs	r2, #0
 8010e32:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2200      	movs	r2, #0
 8010e38:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e40:	693b      	ldr	r3, [r7, #16]
 8010e42:	e853 3f00 	ldrex	r3, [r3]
 8010e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	f023 0310 	bic.w	r3, r3, #16
 8010e4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	461a      	mov	r2, r3
 8010e58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010e5c:	61fb      	str	r3, [r7, #28]
 8010e5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e60:	69b9      	ldr	r1, [r7, #24]
 8010e62:	69fa      	ldr	r2, [r7, #28]
 8010e64:	e841 2300 	strex	r3, r2, [r1]
 8010e68:	617b      	str	r3, [r7, #20]
   return(result);
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d1e4      	bne.n	8010e3a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2202      	movs	r2, #2
 8010e74:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010e76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f000 f881 	bl	8010f84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010e82:	e063      	b.n	8010f4c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d00e      	beq.n	8010eae <HAL_UART_IRQHandler+0x6c6>
 8010e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d008      	beq.n	8010eae <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010ea4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f001 ff5a 	bl	8012d60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010eac:	e051      	b.n	8010f52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d014      	beq.n	8010ee4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d105      	bne.n	8010ed2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d008      	beq.n	8010ee4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d03a      	beq.n	8010f50 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	4798      	blx	r3
    }
    return;
 8010ee2:	e035      	b.n	8010f50 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d009      	beq.n	8010f04 <HAL_UART_IRQHandler+0x71c>
 8010ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d003      	beq.n	8010f04 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f001 f9e8 	bl	80122d2 <UART_EndTransmit_IT>
    return;
 8010f02:	e026      	b.n	8010f52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d009      	beq.n	8010f24 <HAL_UART_IRQHandler+0x73c>
 8010f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d003      	beq.n	8010f24 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f001 ff33 	bl	8012d88 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010f22:	e016      	b.n	8010f52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d010      	beq.n	8010f52 <HAL_UART_IRQHandler+0x76a>
 8010f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	da0c      	bge.n	8010f52 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f001 ff1b 	bl	8012d74 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010f3e:	e008      	b.n	8010f52 <HAL_UART_IRQHandler+0x76a>
      return;
 8010f40:	bf00      	nop
 8010f42:	e006      	b.n	8010f52 <HAL_UART_IRQHandler+0x76a>
    return;
 8010f44:	bf00      	nop
 8010f46:	e004      	b.n	8010f52 <HAL_UART_IRQHandler+0x76a>
      return;
 8010f48:	bf00      	nop
 8010f4a:	e002      	b.n	8010f52 <HAL_UART_IRQHandler+0x76a>
      return;
 8010f4c:	bf00      	nop
 8010f4e:	e000      	b.n	8010f52 <HAL_UART_IRQHandler+0x76a>
    return;
 8010f50:	bf00      	nop
  }
}
 8010f52:	37e8      	adds	r7, #232	; 0xe8
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}
 8010f58:	effffffe 	.word	0xeffffffe

08010f5c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b083      	sub	sp, #12
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010f64:	bf00      	nop
 8010f66:	370c      	adds	r7, #12
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6e:	4770      	bx	lr

08010f70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010f70:	b480      	push	{r7}
 8010f72:	b083      	sub	sp, #12
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010f78:	bf00      	nop
 8010f7a:	370c      	adds	r7, #12
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f82:	4770      	bx	lr

08010f84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010f84:	b480      	push	{r7}
 8010f86:	b083      	sub	sp, #12
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
 8010f8c:	460b      	mov	r3, r1
 8010f8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010f90:	bf00      	nop
 8010f92:	370c      	adds	r7, #12
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr

08010f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010fa0:	b092      	sub	sp, #72	; 0x48
 8010fa2:	af00      	add	r7, sp, #0
 8010fa4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	689a      	ldr	r2, [r3, #8]
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	691b      	ldr	r3, [r3, #16]
 8010fb4:	431a      	orrs	r2, r3
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	695b      	ldr	r3, [r3, #20]
 8010fba:	431a      	orrs	r2, r3
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	69db      	ldr	r3, [r3, #28]
 8010fc0:	4313      	orrs	r3, r2
 8010fc2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010fc4:	697b      	ldr	r3, [r7, #20]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	681a      	ldr	r2, [r3, #0]
 8010fca:	4bbe      	ldr	r3, [pc, #760]	; (80112c4 <UART_SetConfig+0x328>)
 8010fcc:	4013      	ands	r3, r2
 8010fce:	697a      	ldr	r2, [r7, #20]
 8010fd0:	6812      	ldr	r2, [r2, #0]
 8010fd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010fd4:	430b      	orrs	r3, r1
 8010fd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010fd8:	697b      	ldr	r3, [r7, #20]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	685b      	ldr	r3, [r3, #4]
 8010fde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	68da      	ldr	r2, [r3, #12]
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	430a      	orrs	r2, r1
 8010fec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010fee:	697b      	ldr	r3, [r7, #20]
 8010ff0:	699b      	ldr	r3, [r3, #24]
 8010ff2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	4ab3      	ldr	r2, [pc, #716]	; (80112c8 <UART_SetConfig+0x32c>)
 8010ffa:	4293      	cmp	r3, r2
 8010ffc:	d004      	beq.n	8011008 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010ffe:	697b      	ldr	r3, [r7, #20]
 8011000:	6a1b      	ldr	r3, [r3, #32]
 8011002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011004:	4313      	orrs	r3, r2
 8011006:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	689a      	ldr	r2, [r3, #8]
 801100e:	4baf      	ldr	r3, [pc, #700]	; (80112cc <UART_SetConfig+0x330>)
 8011010:	4013      	ands	r3, r2
 8011012:	697a      	ldr	r2, [r7, #20]
 8011014:	6812      	ldr	r2, [r2, #0]
 8011016:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011018:	430b      	orrs	r3, r1
 801101a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801101c:	697b      	ldr	r3, [r7, #20]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011022:	f023 010f 	bic.w	r1, r3, #15
 8011026:	697b      	ldr	r3, [r7, #20]
 8011028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801102a:	697b      	ldr	r3, [r7, #20]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	430a      	orrs	r2, r1
 8011030:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011032:	697b      	ldr	r3, [r7, #20]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	4aa6      	ldr	r2, [pc, #664]	; (80112d0 <UART_SetConfig+0x334>)
 8011038:	4293      	cmp	r3, r2
 801103a:	d177      	bne.n	801112c <UART_SetConfig+0x190>
 801103c:	4ba5      	ldr	r3, [pc, #660]	; (80112d4 <UART_SetConfig+0x338>)
 801103e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011040:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011044:	2b28      	cmp	r3, #40	; 0x28
 8011046:	d86d      	bhi.n	8011124 <UART_SetConfig+0x188>
 8011048:	a201      	add	r2, pc, #4	; (adr r2, 8011050 <UART_SetConfig+0xb4>)
 801104a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801104e:	bf00      	nop
 8011050:	080110f5 	.word	0x080110f5
 8011054:	08011125 	.word	0x08011125
 8011058:	08011125 	.word	0x08011125
 801105c:	08011125 	.word	0x08011125
 8011060:	08011125 	.word	0x08011125
 8011064:	08011125 	.word	0x08011125
 8011068:	08011125 	.word	0x08011125
 801106c:	08011125 	.word	0x08011125
 8011070:	080110fd 	.word	0x080110fd
 8011074:	08011125 	.word	0x08011125
 8011078:	08011125 	.word	0x08011125
 801107c:	08011125 	.word	0x08011125
 8011080:	08011125 	.word	0x08011125
 8011084:	08011125 	.word	0x08011125
 8011088:	08011125 	.word	0x08011125
 801108c:	08011125 	.word	0x08011125
 8011090:	08011105 	.word	0x08011105
 8011094:	08011125 	.word	0x08011125
 8011098:	08011125 	.word	0x08011125
 801109c:	08011125 	.word	0x08011125
 80110a0:	08011125 	.word	0x08011125
 80110a4:	08011125 	.word	0x08011125
 80110a8:	08011125 	.word	0x08011125
 80110ac:	08011125 	.word	0x08011125
 80110b0:	0801110d 	.word	0x0801110d
 80110b4:	08011125 	.word	0x08011125
 80110b8:	08011125 	.word	0x08011125
 80110bc:	08011125 	.word	0x08011125
 80110c0:	08011125 	.word	0x08011125
 80110c4:	08011125 	.word	0x08011125
 80110c8:	08011125 	.word	0x08011125
 80110cc:	08011125 	.word	0x08011125
 80110d0:	08011115 	.word	0x08011115
 80110d4:	08011125 	.word	0x08011125
 80110d8:	08011125 	.word	0x08011125
 80110dc:	08011125 	.word	0x08011125
 80110e0:	08011125 	.word	0x08011125
 80110e4:	08011125 	.word	0x08011125
 80110e8:	08011125 	.word	0x08011125
 80110ec:	08011125 	.word	0x08011125
 80110f0:	0801111d 	.word	0x0801111d
 80110f4:	2301      	movs	r3, #1
 80110f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110fa:	e222      	b.n	8011542 <UART_SetConfig+0x5a6>
 80110fc:	2304      	movs	r3, #4
 80110fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011102:	e21e      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011104:	2308      	movs	r3, #8
 8011106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801110a:	e21a      	b.n	8011542 <UART_SetConfig+0x5a6>
 801110c:	2310      	movs	r3, #16
 801110e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011112:	e216      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011114:	2320      	movs	r3, #32
 8011116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111a:	e212      	b.n	8011542 <UART_SetConfig+0x5a6>
 801111c:	2340      	movs	r3, #64	; 0x40
 801111e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011122:	e20e      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011124:	2380      	movs	r3, #128	; 0x80
 8011126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112a:	e20a      	b.n	8011542 <UART_SetConfig+0x5a6>
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	4a69      	ldr	r2, [pc, #420]	; (80112d8 <UART_SetConfig+0x33c>)
 8011132:	4293      	cmp	r3, r2
 8011134:	d130      	bne.n	8011198 <UART_SetConfig+0x1fc>
 8011136:	4b67      	ldr	r3, [pc, #412]	; (80112d4 <UART_SetConfig+0x338>)
 8011138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801113a:	f003 0307 	and.w	r3, r3, #7
 801113e:	2b05      	cmp	r3, #5
 8011140:	d826      	bhi.n	8011190 <UART_SetConfig+0x1f4>
 8011142:	a201      	add	r2, pc, #4	; (adr r2, 8011148 <UART_SetConfig+0x1ac>)
 8011144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011148:	08011161 	.word	0x08011161
 801114c:	08011169 	.word	0x08011169
 8011150:	08011171 	.word	0x08011171
 8011154:	08011179 	.word	0x08011179
 8011158:	08011181 	.word	0x08011181
 801115c:	08011189 	.word	0x08011189
 8011160:	2300      	movs	r3, #0
 8011162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011166:	e1ec      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011168:	2304      	movs	r3, #4
 801116a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801116e:	e1e8      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011170:	2308      	movs	r3, #8
 8011172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011176:	e1e4      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011178:	2310      	movs	r3, #16
 801117a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801117e:	e1e0      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011180:	2320      	movs	r3, #32
 8011182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011186:	e1dc      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011188:	2340      	movs	r3, #64	; 0x40
 801118a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118e:	e1d8      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011190:	2380      	movs	r3, #128	; 0x80
 8011192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011196:	e1d4      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	4a4f      	ldr	r2, [pc, #316]	; (80112dc <UART_SetConfig+0x340>)
 801119e:	4293      	cmp	r3, r2
 80111a0:	d130      	bne.n	8011204 <UART_SetConfig+0x268>
 80111a2:	4b4c      	ldr	r3, [pc, #304]	; (80112d4 <UART_SetConfig+0x338>)
 80111a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111a6:	f003 0307 	and.w	r3, r3, #7
 80111aa:	2b05      	cmp	r3, #5
 80111ac:	d826      	bhi.n	80111fc <UART_SetConfig+0x260>
 80111ae:	a201      	add	r2, pc, #4	; (adr r2, 80111b4 <UART_SetConfig+0x218>)
 80111b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111b4:	080111cd 	.word	0x080111cd
 80111b8:	080111d5 	.word	0x080111d5
 80111bc:	080111dd 	.word	0x080111dd
 80111c0:	080111e5 	.word	0x080111e5
 80111c4:	080111ed 	.word	0x080111ed
 80111c8:	080111f5 	.word	0x080111f5
 80111cc:	2300      	movs	r3, #0
 80111ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111d2:	e1b6      	b.n	8011542 <UART_SetConfig+0x5a6>
 80111d4:	2304      	movs	r3, #4
 80111d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111da:	e1b2      	b.n	8011542 <UART_SetConfig+0x5a6>
 80111dc:	2308      	movs	r3, #8
 80111de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111e2:	e1ae      	b.n	8011542 <UART_SetConfig+0x5a6>
 80111e4:	2310      	movs	r3, #16
 80111e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ea:	e1aa      	b.n	8011542 <UART_SetConfig+0x5a6>
 80111ec:	2320      	movs	r3, #32
 80111ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f2:	e1a6      	b.n	8011542 <UART_SetConfig+0x5a6>
 80111f4:	2340      	movs	r3, #64	; 0x40
 80111f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111fa:	e1a2      	b.n	8011542 <UART_SetConfig+0x5a6>
 80111fc:	2380      	movs	r3, #128	; 0x80
 80111fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011202:	e19e      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	4a35      	ldr	r2, [pc, #212]	; (80112e0 <UART_SetConfig+0x344>)
 801120a:	4293      	cmp	r3, r2
 801120c:	d130      	bne.n	8011270 <UART_SetConfig+0x2d4>
 801120e:	4b31      	ldr	r3, [pc, #196]	; (80112d4 <UART_SetConfig+0x338>)
 8011210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011212:	f003 0307 	and.w	r3, r3, #7
 8011216:	2b05      	cmp	r3, #5
 8011218:	d826      	bhi.n	8011268 <UART_SetConfig+0x2cc>
 801121a:	a201      	add	r2, pc, #4	; (adr r2, 8011220 <UART_SetConfig+0x284>)
 801121c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011220:	08011239 	.word	0x08011239
 8011224:	08011241 	.word	0x08011241
 8011228:	08011249 	.word	0x08011249
 801122c:	08011251 	.word	0x08011251
 8011230:	08011259 	.word	0x08011259
 8011234:	08011261 	.word	0x08011261
 8011238:	2300      	movs	r3, #0
 801123a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801123e:	e180      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011240:	2304      	movs	r3, #4
 8011242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011246:	e17c      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011248:	2308      	movs	r3, #8
 801124a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801124e:	e178      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011250:	2310      	movs	r3, #16
 8011252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011256:	e174      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011258:	2320      	movs	r3, #32
 801125a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801125e:	e170      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011260:	2340      	movs	r3, #64	; 0x40
 8011262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011266:	e16c      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011268:	2380      	movs	r3, #128	; 0x80
 801126a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801126e:	e168      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	4a1b      	ldr	r2, [pc, #108]	; (80112e4 <UART_SetConfig+0x348>)
 8011276:	4293      	cmp	r3, r2
 8011278:	d142      	bne.n	8011300 <UART_SetConfig+0x364>
 801127a:	4b16      	ldr	r3, [pc, #88]	; (80112d4 <UART_SetConfig+0x338>)
 801127c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801127e:	f003 0307 	and.w	r3, r3, #7
 8011282:	2b05      	cmp	r3, #5
 8011284:	d838      	bhi.n	80112f8 <UART_SetConfig+0x35c>
 8011286:	a201      	add	r2, pc, #4	; (adr r2, 801128c <UART_SetConfig+0x2f0>)
 8011288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801128c:	080112a5 	.word	0x080112a5
 8011290:	080112ad 	.word	0x080112ad
 8011294:	080112b5 	.word	0x080112b5
 8011298:	080112bd 	.word	0x080112bd
 801129c:	080112e9 	.word	0x080112e9
 80112a0:	080112f1 	.word	0x080112f1
 80112a4:	2300      	movs	r3, #0
 80112a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112aa:	e14a      	b.n	8011542 <UART_SetConfig+0x5a6>
 80112ac:	2304      	movs	r3, #4
 80112ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112b2:	e146      	b.n	8011542 <UART_SetConfig+0x5a6>
 80112b4:	2308      	movs	r3, #8
 80112b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ba:	e142      	b.n	8011542 <UART_SetConfig+0x5a6>
 80112bc:	2310      	movs	r3, #16
 80112be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112c2:	e13e      	b.n	8011542 <UART_SetConfig+0x5a6>
 80112c4:	cfff69f3 	.word	0xcfff69f3
 80112c8:	58000c00 	.word	0x58000c00
 80112cc:	11fff4ff 	.word	0x11fff4ff
 80112d0:	40011000 	.word	0x40011000
 80112d4:	58024400 	.word	0x58024400
 80112d8:	40004400 	.word	0x40004400
 80112dc:	40004800 	.word	0x40004800
 80112e0:	40004c00 	.word	0x40004c00
 80112e4:	40005000 	.word	0x40005000
 80112e8:	2320      	movs	r3, #32
 80112ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ee:	e128      	b.n	8011542 <UART_SetConfig+0x5a6>
 80112f0:	2340      	movs	r3, #64	; 0x40
 80112f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112f6:	e124      	b.n	8011542 <UART_SetConfig+0x5a6>
 80112f8:	2380      	movs	r3, #128	; 0x80
 80112fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112fe:	e120      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	4acb      	ldr	r2, [pc, #812]	; (8011634 <UART_SetConfig+0x698>)
 8011306:	4293      	cmp	r3, r2
 8011308:	d176      	bne.n	80113f8 <UART_SetConfig+0x45c>
 801130a:	4bcb      	ldr	r3, [pc, #812]	; (8011638 <UART_SetConfig+0x69c>)
 801130c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801130e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011312:	2b28      	cmp	r3, #40	; 0x28
 8011314:	d86c      	bhi.n	80113f0 <UART_SetConfig+0x454>
 8011316:	a201      	add	r2, pc, #4	; (adr r2, 801131c <UART_SetConfig+0x380>)
 8011318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801131c:	080113c1 	.word	0x080113c1
 8011320:	080113f1 	.word	0x080113f1
 8011324:	080113f1 	.word	0x080113f1
 8011328:	080113f1 	.word	0x080113f1
 801132c:	080113f1 	.word	0x080113f1
 8011330:	080113f1 	.word	0x080113f1
 8011334:	080113f1 	.word	0x080113f1
 8011338:	080113f1 	.word	0x080113f1
 801133c:	080113c9 	.word	0x080113c9
 8011340:	080113f1 	.word	0x080113f1
 8011344:	080113f1 	.word	0x080113f1
 8011348:	080113f1 	.word	0x080113f1
 801134c:	080113f1 	.word	0x080113f1
 8011350:	080113f1 	.word	0x080113f1
 8011354:	080113f1 	.word	0x080113f1
 8011358:	080113f1 	.word	0x080113f1
 801135c:	080113d1 	.word	0x080113d1
 8011360:	080113f1 	.word	0x080113f1
 8011364:	080113f1 	.word	0x080113f1
 8011368:	080113f1 	.word	0x080113f1
 801136c:	080113f1 	.word	0x080113f1
 8011370:	080113f1 	.word	0x080113f1
 8011374:	080113f1 	.word	0x080113f1
 8011378:	080113f1 	.word	0x080113f1
 801137c:	080113d9 	.word	0x080113d9
 8011380:	080113f1 	.word	0x080113f1
 8011384:	080113f1 	.word	0x080113f1
 8011388:	080113f1 	.word	0x080113f1
 801138c:	080113f1 	.word	0x080113f1
 8011390:	080113f1 	.word	0x080113f1
 8011394:	080113f1 	.word	0x080113f1
 8011398:	080113f1 	.word	0x080113f1
 801139c:	080113e1 	.word	0x080113e1
 80113a0:	080113f1 	.word	0x080113f1
 80113a4:	080113f1 	.word	0x080113f1
 80113a8:	080113f1 	.word	0x080113f1
 80113ac:	080113f1 	.word	0x080113f1
 80113b0:	080113f1 	.word	0x080113f1
 80113b4:	080113f1 	.word	0x080113f1
 80113b8:	080113f1 	.word	0x080113f1
 80113bc:	080113e9 	.word	0x080113e9
 80113c0:	2301      	movs	r3, #1
 80113c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113c6:	e0bc      	b.n	8011542 <UART_SetConfig+0x5a6>
 80113c8:	2304      	movs	r3, #4
 80113ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ce:	e0b8      	b.n	8011542 <UART_SetConfig+0x5a6>
 80113d0:	2308      	movs	r3, #8
 80113d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113d6:	e0b4      	b.n	8011542 <UART_SetConfig+0x5a6>
 80113d8:	2310      	movs	r3, #16
 80113da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113de:	e0b0      	b.n	8011542 <UART_SetConfig+0x5a6>
 80113e0:	2320      	movs	r3, #32
 80113e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113e6:	e0ac      	b.n	8011542 <UART_SetConfig+0x5a6>
 80113e8:	2340      	movs	r3, #64	; 0x40
 80113ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ee:	e0a8      	b.n	8011542 <UART_SetConfig+0x5a6>
 80113f0:	2380      	movs	r3, #128	; 0x80
 80113f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113f6:	e0a4      	b.n	8011542 <UART_SetConfig+0x5a6>
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	4a8f      	ldr	r2, [pc, #572]	; (801163c <UART_SetConfig+0x6a0>)
 80113fe:	4293      	cmp	r3, r2
 8011400:	d130      	bne.n	8011464 <UART_SetConfig+0x4c8>
 8011402:	4b8d      	ldr	r3, [pc, #564]	; (8011638 <UART_SetConfig+0x69c>)
 8011404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011406:	f003 0307 	and.w	r3, r3, #7
 801140a:	2b05      	cmp	r3, #5
 801140c:	d826      	bhi.n	801145c <UART_SetConfig+0x4c0>
 801140e:	a201      	add	r2, pc, #4	; (adr r2, 8011414 <UART_SetConfig+0x478>)
 8011410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011414:	0801142d 	.word	0x0801142d
 8011418:	08011435 	.word	0x08011435
 801141c:	0801143d 	.word	0x0801143d
 8011420:	08011445 	.word	0x08011445
 8011424:	0801144d 	.word	0x0801144d
 8011428:	08011455 	.word	0x08011455
 801142c:	2300      	movs	r3, #0
 801142e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011432:	e086      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011434:	2304      	movs	r3, #4
 8011436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801143a:	e082      	b.n	8011542 <UART_SetConfig+0x5a6>
 801143c:	2308      	movs	r3, #8
 801143e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011442:	e07e      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011444:	2310      	movs	r3, #16
 8011446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801144a:	e07a      	b.n	8011542 <UART_SetConfig+0x5a6>
 801144c:	2320      	movs	r3, #32
 801144e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011452:	e076      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011454:	2340      	movs	r3, #64	; 0x40
 8011456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801145a:	e072      	b.n	8011542 <UART_SetConfig+0x5a6>
 801145c:	2380      	movs	r3, #128	; 0x80
 801145e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011462:	e06e      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011464:	697b      	ldr	r3, [r7, #20]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	4a75      	ldr	r2, [pc, #468]	; (8011640 <UART_SetConfig+0x6a4>)
 801146a:	4293      	cmp	r3, r2
 801146c:	d130      	bne.n	80114d0 <UART_SetConfig+0x534>
 801146e:	4b72      	ldr	r3, [pc, #456]	; (8011638 <UART_SetConfig+0x69c>)
 8011470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011472:	f003 0307 	and.w	r3, r3, #7
 8011476:	2b05      	cmp	r3, #5
 8011478:	d826      	bhi.n	80114c8 <UART_SetConfig+0x52c>
 801147a:	a201      	add	r2, pc, #4	; (adr r2, 8011480 <UART_SetConfig+0x4e4>)
 801147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011480:	08011499 	.word	0x08011499
 8011484:	080114a1 	.word	0x080114a1
 8011488:	080114a9 	.word	0x080114a9
 801148c:	080114b1 	.word	0x080114b1
 8011490:	080114b9 	.word	0x080114b9
 8011494:	080114c1 	.word	0x080114c1
 8011498:	2300      	movs	r3, #0
 801149a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801149e:	e050      	b.n	8011542 <UART_SetConfig+0x5a6>
 80114a0:	2304      	movs	r3, #4
 80114a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114a6:	e04c      	b.n	8011542 <UART_SetConfig+0x5a6>
 80114a8:	2308      	movs	r3, #8
 80114aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ae:	e048      	b.n	8011542 <UART_SetConfig+0x5a6>
 80114b0:	2310      	movs	r3, #16
 80114b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114b6:	e044      	b.n	8011542 <UART_SetConfig+0x5a6>
 80114b8:	2320      	movs	r3, #32
 80114ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114be:	e040      	b.n	8011542 <UART_SetConfig+0x5a6>
 80114c0:	2340      	movs	r3, #64	; 0x40
 80114c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114c6:	e03c      	b.n	8011542 <UART_SetConfig+0x5a6>
 80114c8:	2380      	movs	r3, #128	; 0x80
 80114ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ce:	e038      	b.n	8011542 <UART_SetConfig+0x5a6>
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	4a5b      	ldr	r2, [pc, #364]	; (8011644 <UART_SetConfig+0x6a8>)
 80114d6:	4293      	cmp	r3, r2
 80114d8:	d130      	bne.n	801153c <UART_SetConfig+0x5a0>
 80114da:	4b57      	ldr	r3, [pc, #348]	; (8011638 <UART_SetConfig+0x69c>)
 80114dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80114de:	f003 0307 	and.w	r3, r3, #7
 80114e2:	2b05      	cmp	r3, #5
 80114e4:	d826      	bhi.n	8011534 <UART_SetConfig+0x598>
 80114e6:	a201      	add	r2, pc, #4	; (adr r2, 80114ec <UART_SetConfig+0x550>)
 80114e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ec:	08011505 	.word	0x08011505
 80114f0:	0801150d 	.word	0x0801150d
 80114f4:	08011515 	.word	0x08011515
 80114f8:	0801151d 	.word	0x0801151d
 80114fc:	08011525 	.word	0x08011525
 8011500:	0801152d 	.word	0x0801152d
 8011504:	2302      	movs	r3, #2
 8011506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801150a:	e01a      	b.n	8011542 <UART_SetConfig+0x5a6>
 801150c:	2304      	movs	r3, #4
 801150e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011512:	e016      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011514:	2308      	movs	r3, #8
 8011516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801151a:	e012      	b.n	8011542 <UART_SetConfig+0x5a6>
 801151c:	2310      	movs	r3, #16
 801151e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011522:	e00e      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011524:	2320      	movs	r3, #32
 8011526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801152a:	e00a      	b.n	8011542 <UART_SetConfig+0x5a6>
 801152c:	2340      	movs	r3, #64	; 0x40
 801152e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011532:	e006      	b.n	8011542 <UART_SetConfig+0x5a6>
 8011534:	2380      	movs	r3, #128	; 0x80
 8011536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801153a:	e002      	b.n	8011542 <UART_SetConfig+0x5a6>
 801153c:	2380      	movs	r3, #128	; 0x80
 801153e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	4a3f      	ldr	r2, [pc, #252]	; (8011644 <UART_SetConfig+0x6a8>)
 8011548:	4293      	cmp	r3, r2
 801154a:	f040 80f8 	bne.w	801173e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801154e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011552:	2b20      	cmp	r3, #32
 8011554:	dc46      	bgt.n	80115e4 <UART_SetConfig+0x648>
 8011556:	2b02      	cmp	r3, #2
 8011558:	f2c0 8082 	blt.w	8011660 <UART_SetConfig+0x6c4>
 801155c:	3b02      	subs	r3, #2
 801155e:	2b1e      	cmp	r3, #30
 8011560:	d87e      	bhi.n	8011660 <UART_SetConfig+0x6c4>
 8011562:	a201      	add	r2, pc, #4	; (adr r2, 8011568 <UART_SetConfig+0x5cc>)
 8011564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011568:	080115eb 	.word	0x080115eb
 801156c:	08011661 	.word	0x08011661
 8011570:	080115f3 	.word	0x080115f3
 8011574:	08011661 	.word	0x08011661
 8011578:	08011661 	.word	0x08011661
 801157c:	08011661 	.word	0x08011661
 8011580:	08011603 	.word	0x08011603
 8011584:	08011661 	.word	0x08011661
 8011588:	08011661 	.word	0x08011661
 801158c:	08011661 	.word	0x08011661
 8011590:	08011661 	.word	0x08011661
 8011594:	08011661 	.word	0x08011661
 8011598:	08011661 	.word	0x08011661
 801159c:	08011661 	.word	0x08011661
 80115a0:	08011613 	.word	0x08011613
 80115a4:	08011661 	.word	0x08011661
 80115a8:	08011661 	.word	0x08011661
 80115ac:	08011661 	.word	0x08011661
 80115b0:	08011661 	.word	0x08011661
 80115b4:	08011661 	.word	0x08011661
 80115b8:	08011661 	.word	0x08011661
 80115bc:	08011661 	.word	0x08011661
 80115c0:	08011661 	.word	0x08011661
 80115c4:	08011661 	.word	0x08011661
 80115c8:	08011661 	.word	0x08011661
 80115cc:	08011661 	.word	0x08011661
 80115d0:	08011661 	.word	0x08011661
 80115d4:	08011661 	.word	0x08011661
 80115d8:	08011661 	.word	0x08011661
 80115dc:	08011661 	.word	0x08011661
 80115e0:	08011653 	.word	0x08011653
 80115e4:	2b40      	cmp	r3, #64	; 0x40
 80115e6:	d037      	beq.n	8011658 <UART_SetConfig+0x6bc>
 80115e8:	e03a      	b.n	8011660 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80115ea:	f7fb fce5 	bl	800cfb8 <HAL_RCCEx_GetD3PCLK1Freq>
 80115ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80115f0:	e03c      	b.n	801166c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80115f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7fb fcf4 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80115fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011600:	e034      	b.n	801166c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011602:	f107 0318 	add.w	r3, r7, #24
 8011606:	4618      	mov	r0, r3
 8011608:	f7fb fe40 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801160c:	69fb      	ldr	r3, [r7, #28]
 801160e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011610:	e02c      	b.n	801166c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011612:	4b09      	ldr	r3, [pc, #36]	; (8011638 <UART_SetConfig+0x69c>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	f003 0320 	and.w	r3, r3, #32
 801161a:	2b00      	cmp	r3, #0
 801161c:	d016      	beq.n	801164c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801161e:	4b06      	ldr	r3, [pc, #24]	; (8011638 <UART_SetConfig+0x69c>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	08db      	lsrs	r3, r3, #3
 8011624:	f003 0303 	and.w	r3, r3, #3
 8011628:	4a07      	ldr	r2, [pc, #28]	; (8011648 <UART_SetConfig+0x6ac>)
 801162a:	fa22 f303 	lsr.w	r3, r2, r3
 801162e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011630:	e01c      	b.n	801166c <UART_SetConfig+0x6d0>
 8011632:	bf00      	nop
 8011634:	40011400 	.word	0x40011400
 8011638:	58024400 	.word	0x58024400
 801163c:	40007800 	.word	0x40007800
 8011640:	40007c00 	.word	0x40007c00
 8011644:	58000c00 	.word	0x58000c00
 8011648:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801164c:	4b9d      	ldr	r3, [pc, #628]	; (80118c4 <UART_SetConfig+0x928>)
 801164e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011650:	e00c      	b.n	801166c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011652:	4b9d      	ldr	r3, [pc, #628]	; (80118c8 <UART_SetConfig+0x92c>)
 8011654:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011656:	e009      	b.n	801166c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011658:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801165c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801165e:	e005      	b.n	801166c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011660:	2300      	movs	r3, #0
 8011662:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011664:	2301      	movs	r3, #1
 8011666:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801166a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801166c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801166e:	2b00      	cmp	r3, #0
 8011670:	f000 81de 	beq.w	8011a30 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011678:	4a94      	ldr	r2, [pc, #592]	; (80118cc <UART_SetConfig+0x930>)
 801167a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801167e:	461a      	mov	r2, r3
 8011680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011682:	fbb3 f3f2 	udiv	r3, r3, r2
 8011686:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	685a      	ldr	r2, [r3, #4]
 801168c:	4613      	mov	r3, r2
 801168e:	005b      	lsls	r3, r3, #1
 8011690:	4413      	add	r3, r2
 8011692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011694:	429a      	cmp	r2, r3
 8011696:	d305      	bcc.n	80116a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	685b      	ldr	r3, [r3, #4]
 801169c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801169e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d903      	bls.n	80116ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80116a4:	2301      	movs	r3, #1
 80116a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80116aa:	e1c1      	b.n	8011a30 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80116ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116ae:	2200      	movs	r2, #0
 80116b0:	60bb      	str	r3, [r7, #8]
 80116b2:	60fa      	str	r2, [r7, #12]
 80116b4:	697b      	ldr	r3, [r7, #20]
 80116b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116b8:	4a84      	ldr	r2, [pc, #528]	; (80118cc <UART_SetConfig+0x930>)
 80116ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116be:	b29b      	uxth	r3, r3
 80116c0:	2200      	movs	r2, #0
 80116c2:	603b      	str	r3, [r7, #0]
 80116c4:	607a      	str	r2, [r7, #4]
 80116c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80116ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80116ce:	f7ee fe07 	bl	80002e0 <__aeabi_uldivmod>
 80116d2:	4602      	mov	r2, r0
 80116d4:	460b      	mov	r3, r1
 80116d6:	4610      	mov	r0, r2
 80116d8:	4619      	mov	r1, r3
 80116da:	f04f 0200 	mov.w	r2, #0
 80116de:	f04f 0300 	mov.w	r3, #0
 80116e2:	020b      	lsls	r3, r1, #8
 80116e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80116e8:	0202      	lsls	r2, r0, #8
 80116ea:	6979      	ldr	r1, [r7, #20]
 80116ec:	6849      	ldr	r1, [r1, #4]
 80116ee:	0849      	lsrs	r1, r1, #1
 80116f0:	2000      	movs	r0, #0
 80116f2:	460c      	mov	r4, r1
 80116f4:	4605      	mov	r5, r0
 80116f6:	eb12 0804 	adds.w	r8, r2, r4
 80116fa:	eb43 0905 	adc.w	r9, r3, r5
 80116fe:	697b      	ldr	r3, [r7, #20]
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	2200      	movs	r2, #0
 8011704:	469a      	mov	sl, r3
 8011706:	4693      	mov	fp, r2
 8011708:	4652      	mov	r2, sl
 801170a:	465b      	mov	r3, fp
 801170c:	4640      	mov	r0, r8
 801170e:	4649      	mov	r1, r9
 8011710:	f7ee fde6 	bl	80002e0 <__aeabi_uldivmod>
 8011714:	4602      	mov	r2, r0
 8011716:	460b      	mov	r3, r1
 8011718:	4613      	mov	r3, r2
 801171a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801171c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801171e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011722:	d308      	bcc.n	8011736 <UART_SetConfig+0x79a>
 8011724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801172a:	d204      	bcs.n	8011736 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011732:	60da      	str	r2, [r3, #12]
 8011734:	e17c      	b.n	8011a30 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011736:	2301      	movs	r3, #1
 8011738:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801173c:	e178      	b.n	8011a30 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	69db      	ldr	r3, [r3, #28]
 8011742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011746:	f040 80c5 	bne.w	80118d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801174a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801174e:	2b20      	cmp	r3, #32
 8011750:	dc48      	bgt.n	80117e4 <UART_SetConfig+0x848>
 8011752:	2b00      	cmp	r3, #0
 8011754:	db7b      	blt.n	801184e <UART_SetConfig+0x8b2>
 8011756:	2b20      	cmp	r3, #32
 8011758:	d879      	bhi.n	801184e <UART_SetConfig+0x8b2>
 801175a:	a201      	add	r2, pc, #4	; (adr r2, 8011760 <UART_SetConfig+0x7c4>)
 801175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011760:	080117eb 	.word	0x080117eb
 8011764:	080117f3 	.word	0x080117f3
 8011768:	0801184f 	.word	0x0801184f
 801176c:	0801184f 	.word	0x0801184f
 8011770:	080117fb 	.word	0x080117fb
 8011774:	0801184f 	.word	0x0801184f
 8011778:	0801184f 	.word	0x0801184f
 801177c:	0801184f 	.word	0x0801184f
 8011780:	0801180b 	.word	0x0801180b
 8011784:	0801184f 	.word	0x0801184f
 8011788:	0801184f 	.word	0x0801184f
 801178c:	0801184f 	.word	0x0801184f
 8011790:	0801184f 	.word	0x0801184f
 8011794:	0801184f 	.word	0x0801184f
 8011798:	0801184f 	.word	0x0801184f
 801179c:	0801184f 	.word	0x0801184f
 80117a0:	0801181b 	.word	0x0801181b
 80117a4:	0801184f 	.word	0x0801184f
 80117a8:	0801184f 	.word	0x0801184f
 80117ac:	0801184f 	.word	0x0801184f
 80117b0:	0801184f 	.word	0x0801184f
 80117b4:	0801184f 	.word	0x0801184f
 80117b8:	0801184f 	.word	0x0801184f
 80117bc:	0801184f 	.word	0x0801184f
 80117c0:	0801184f 	.word	0x0801184f
 80117c4:	0801184f 	.word	0x0801184f
 80117c8:	0801184f 	.word	0x0801184f
 80117cc:	0801184f 	.word	0x0801184f
 80117d0:	0801184f 	.word	0x0801184f
 80117d4:	0801184f 	.word	0x0801184f
 80117d8:	0801184f 	.word	0x0801184f
 80117dc:	0801184f 	.word	0x0801184f
 80117e0:	08011841 	.word	0x08011841
 80117e4:	2b40      	cmp	r3, #64	; 0x40
 80117e6:	d02e      	beq.n	8011846 <UART_SetConfig+0x8aa>
 80117e8:	e031      	b.n	801184e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80117ea:	f7f9 fbed 	bl	800afc8 <HAL_RCC_GetPCLK1Freq>
 80117ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117f0:	e033      	b.n	801185a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80117f2:	f7f9 fbff 	bl	800aff4 <HAL_RCC_GetPCLK2Freq>
 80117f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117f8:	e02f      	b.n	801185a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80117fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80117fe:	4618      	mov	r0, r3
 8011800:	f7fb fbf0 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011808:	e027      	b.n	801185a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801180a:	f107 0318 	add.w	r3, r7, #24
 801180e:	4618      	mov	r0, r3
 8011810:	f7fb fd3c 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011814:	69fb      	ldr	r3, [r7, #28]
 8011816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011818:	e01f      	b.n	801185a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801181a:	4b2d      	ldr	r3, [pc, #180]	; (80118d0 <UART_SetConfig+0x934>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	f003 0320 	and.w	r3, r3, #32
 8011822:	2b00      	cmp	r3, #0
 8011824:	d009      	beq.n	801183a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011826:	4b2a      	ldr	r3, [pc, #168]	; (80118d0 <UART_SetConfig+0x934>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	08db      	lsrs	r3, r3, #3
 801182c:	f003 0303 	and.w	r3, r3, #3
 8011830:	4a24      	ldr	r2, [pc, #144]	; (80118c4 <UART_SetConfig+0x928>)
 8011832:	fa22 f303 	lsr.w	r3, r2, r3
 8011836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011838:	e00f      	b.n	801185a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801183a:	4b22      	ldr	r3, [pc, #136]	; (80118c4 <UART_SetConfig+0x928>)
 801183c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801183e:	e00c      	b.n	801185a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011840:	4b21      	ldr	r3, [pc, #132]	; (80118c8 <UART_SetConfig+0x92c>)
 8011842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011844:	e009      	b.n	801185a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801184a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801184c:	e005      	b.n	801185a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801184e:	2300      	movs	r3, #0
 8011850:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011852:	2301      	movs	r3, #1
 8011854:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011858:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801185a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801185c:	2b00      	cmp	r3, #0
 801185e:	f000 80e7 	beq.w	8011a30 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011866:	4a19      	ldr	r2, [pc, #100]	; (80118cc <UART_SetConfig+0x930>)
 8011868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801186c:	461a      	mov	r2, r3
 801186e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011870:	fbb3 f3f2 	udiv	r3, r3, r2
 8011874:	005a      	lsls	r2, r3, #1
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	685b      	ldr	r3, [r3, #4]
 801187a:	085b      	lsrs	r3, r3, #1
 801187c:	441a      	add	r2, r3
 801187e:	697b      	ldr	r3, [r7, #20]
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	fbb2 f3f3 	udiv	r3, r2, r3
 8011886:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188a:	2b0f      	cmp	r3, #15
 801188c:	d916      	bls.n	80118bc <UART_SetConfig+0x920>
 801188e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011894:	d212      	bcs.n	80118bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011898:	b29b      	uxth	r3, r3
 801189a:	f023 030f 	bic.w	r3, r3, #15
 801189e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80118a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118a2:	085b      	lsrs	r3, r3, #1
 80118a4:	b29b      	uxth	r3, r3
 80118a6:	f003 0307 	and.w	r3, r3, #7
 80118aa:	b29a      	uxth	r2, r3
 80118ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80118ae:	4313      	orrs	r3, r2
 80118b0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80118b8:	60da      	str	r2, [r3, #12]
 80118ba:	e0b9      	b.n	8011a30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80118bc:	2301      	movs	r3, #1
 80118be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80118c2:	e0b5      	b.n	8011a30 <UART_SetConfig+0xa94>
 80118c4:	03d09000 	.word	0x03d09000
 80118c8:	003d0900 	.word	0x003d0900
 80118cc:	080179fc 	.word	0x080179fc
 80118d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80118d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80118d8:	2b20      	cmp	r3, #32
 80118da:	dc49      	bgt.n	8011970 <UART_SetConfig+0x9d4>
 80118dc:	2b00      	cmp	r3, #0
 80118de:	db7c      	blt.n	80119da <UART_SetConfig+0xa3e>
 80118e0:	2b20      	cmp	r3, #32
 80118e2:	d87a      	bhi.n	80119da <UART_SetConfig+0xa3e>
 80118e4:	a201      	add	r2, pc, #4	; (adr r2, 80118ec <UART_SetConfig+0x950>)
 80118e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118ea:	bf00      	nop
 80118ec:	08011977 	.word	0x08011977
 80118f0:	0801197f 	.word	0x0801197f
 80118f4:	080119db 	.word	0x080119db
 80118f8:	080119db 	.word	0x080119db
 80118fc:	08011987 	.word	0x08011987
 8011900:	080119db 	.word	0x080119db
 8011904:	080119db 	.word	0x080119db
 8011908:	080119db 	.word	0x080119db
 801190c:	08011997 	.word	0x08011997
 8011910:	080119db 	.word	0x080119db
 8011914:	080119db 	.word	0x080119db
 8011918:	080119db 	.word	0x080119db
 801191c:	080119db 	.word	0x080119db
 8011920:	080119db 	.word	0x080119db
 8011924:	080119db 	.word	0x080119db
 8011928:	080119db 	.word	0x080119db
 801192c:	080119a7 	.word	0x080119a7
 8011930:	080119db 	.word	0x080119db
 8011934:	080119db 	.word	0x080119db
 8011938:	080119db 	.word	0x080119db
 801193c:	080119db 	.word	0x080119db
 8011940:	080119db 	.word	0x080119db
 8011944:	080119db 	.word	0x080119db
 8011948:	080119db 	.word	0x080119db
 801194c:	080119db 	.word	0x080119db
 8011950:	080119db 	.word	0x080119db
 8011954:	080119db 	.word	0x080119db
 8011958:	080119db 	.word	0x080119db
 801195c:	080119db 	.word	0x080119db
 8011960:	080119db 	.word	0x080119db
 8011964:	080119db 	.word	0x080119db
 8011968:	080119db 	.word	0x080119db
 801196c:	080119cd 	.word	0x080119cd
 8011970:	2b40      	cmp	r3, #64	; 0x40
 8011972:	d02e      	beq.n	80119d2 <UART_SetConfig+0xa36>
 8011974:	e031      	b.n	80119da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011976:	f7f9 fb27 	bl	800afc8 <HAL_RCC_GetPCLK1Freq>
 801197a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801197c:	e033      	b.n	80119e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801197e:	f7f9 fb39 	bl	800aff4 <HAL_RCC_GetPCLK2Freq>
 8011982:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011984:	e02f      	b.n	80119e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801198a:	4618      	mov	r0, r3
 801198c:	f7fb fb2a 	bl	800cfe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011994:	e027      	b.n	80119e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011996:	f107 0318 	add.w	r3, r7, #24
 801199a:	4618      	mov	r0, r3
 801199c:	f7fb fc76 	bl	800d28c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80119a0:	69fb      	ldr	r3, [r7, #28]
 80119a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119a4:	e01f      	b.n	80119e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80119a6:	4b2d      	ldr	r3, [pc, #180]	; (8011a5c <UART_SetConfig+0xac0>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	f003 0320 	and.w	r3, r3, #32
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d009      	beq.n	80119c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80119b2:	4b2a      	ldr	r3, [pc, #168]	; (8011a5c <UART_SetConfig+0xac0>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	08db      	lsrs	r3, r3, #3
 80119b8:	f003 0303 	and.w	r3, r3, #3
 80119bc:	4a28      	ldr	r2, [pc, #160]	; (8011a60 <UART_SetConfig+0xac4>)
 80119be:	fa22 f303 	lsr.w	r3, r2, r3
 80119c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80119c4:	e00f      	b.n	80119e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80119c6:	4b26      	ldr	r3, [pc, #152]	; (8011a60 <UART_SetConfig+0xac4>)
 80119c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119ca:	e00c      	b.n	80119e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80119cc:	4b25      	ldr	r3, [pc, #148]	; (8011a64 <UART_SetConfig+0xac8>)
 80119ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119d0:	e009      	b.n	80119e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80119d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80119d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119d8:	e005      	b.n	80119e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80119da:	2300      	movs	r3, #0
 80119dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80119de:	2301      	movs	r3, #1
 80119e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80119e4:	bf00      	nop
    }

    if (pclk != 0U)
 80119e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d021      	beq.n	8011a30 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119f0:	4a1d      	ldr	r2, [pc, #116]	; (8011a68 <UART_SetConfig+0xacc>)
 80119f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80119f6:	461a      	mov	r2, r3
 80119f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	685b      	ldr	r3, [r3, #4]
 8011a02:	085b      	lsrs	r3, r3, #1
 8011a04:	441a      	add	r2, r3
 8011a06:	697b      	ldr	r3, [r7, #20]
 8011a08:	685b      	ldr	r3, [r3, #4]
 8011a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a0e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a12:	2b0f      	cmp	r3, #15
 8011a14:	d909      	bls.n	8011a2a <UART_SetConfig+0xa8e>
 8011a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a1c:	d205      	bcs.n	8011a2a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a20:	b29a      	uxth	r2, r3
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	60da      	str	r2, [r3, #12]
 8011a28:	e002      	b.n	8011a30 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	2201      	movs	r2, #1
 8011a34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	2201      	movs	r2, #1
 8011a3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011a40:	697b      	ldr	r3, [r7, #20]
 8011a42:	2200      	movs	r2, #0
 8011a44:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	2200      	movs	r2, #0
 8011a4a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011a4c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011a50:	4618      	mov	r0, r3
 8011a52:	3748      	adds	r7, #72	; 0x48
 8011a54:	46bd      	mov	sp, r7
 8011a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011a5a:	bf00      	nop
 8011a5c:	58024400 	.word	0x58024400
 8011a60:	03d09000 	.word	0x03d09000
 8011a64:	003d0900 	.word	0x003d0900
 8011a68:	080179fc 	.word	0x080179fc

08011a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b083      	sub	sp, #12
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a78:	f003 0308 	and.w	r3, r3, #8
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d00a      	beq.n	8011a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	685b      	ldr	r3, [r3, #4]
 8011a86:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	430a      	orrs	r2, r1
 8011a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a9a:	f003 0301 	and.w	r3, r3, #1
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d00a      	beq.n	8011ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	685b      	ldr	r3, [r3, #4]
 8011aa8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	430a      	orrs	r2, r1
 8011ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011abc:	f003 0302 	and.w	r3, r3, #2
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d00a      	beq.n	8011ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	430a      	orrs	r2, r1
 8011ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ade:	f003 0304 	and.w	r3, r3, #4
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d00a      	beq.n	8011afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	685b      	ldr	r3, [r3, #4]
 8011aec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	430a      	orrs	r2, r1
 8011afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b00:	f003 0310 	and.w	r3, r3, #16
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d00a      	beq.n	8011b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	689b      	ldr	r3, [r3, #8]
 8011b0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	430a      	orrs	r2, r1
 8011b1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b22:	f003 0320 	and.w	r3, r3, #32
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d00a      	beq.n	8011b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	689b      	ldr	r3, [r3, #8]
 8011b30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	430a      	orrs	r2, r1
 8011b3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d01a      	beq.n	8011b82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	685b      	ldr	r3, [r3, #4]
 8011b52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	430a      	orrs	r2, r1
 8011b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011b6a:	d10a      	bne.n	8011b82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	685b      	ldr	r3, [r3, #4]
 8011b72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	430a      	orrs	r2, r1
 8011b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d00a      	beq.n	8011ba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	685b      	ldr	r3, [r3, #4]
 8011b94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	430a      	orrs	r2, r1
 8011ba2:	605a      	str	r2, [r3, #4]
  }
}
 8011ba4:	bf00      	nop
 8011ba6:	370c      	adds	r7, #12
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bae:	4770      	bx	lr

08011bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b098      	sub	sp, #96	; 0x60
 8011bb4:	af02      	add	r7, sp, #8
 8011bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2200      	movs	r2, #0
 8011bbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011bc0:	f7f2 fa74 	bl	80040ac <HAL_GetTick>
 8011bc4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	f003 0308 	and.w	r3, r3, #8
 8011bd0:	2b08      	cmp	r3, #8
 8011bd2:	d12f      	bne.n	8011c34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011bd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011bd8:	9300      	str	r3, [sp, #0]
 8011bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bdc:	2200      	movs	r2, #0
 8011bde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	f000 f88e 	bl	8011d04 <UART_WaitOnFlagUntilTimeout>
 8011be8:	4603      	mov	r3, r0
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d022      	beq.n	8011c34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bf6:	e853 3f00 	ldrex	r3, [r3]
 8011bfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011c02:	653b      	str	r3, [r7, #80]	; 0x50
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	461a      	mov	r2, r3
 8011c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8011c0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011c12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011c14:	e841 2300 	strex	r3, r2, [r1]
 8011c18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d1e6      	bne.n	8011bee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	2220      	movs	r2, #32
 8011c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011c30:	2303      	movs	r3, #3
 8011c32:	e063      	b.n	8011cfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	f003 0304 	and.w	r3, r3, #4
 8011c3e:	2b04      	cmp	r3, #4
 8011c40:	d149      	bne.n	8011cd6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011c42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011c46:	9300      	str	r3, [sp, #0]
 8011c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f000 f857 	bl	8011d04 <UART_WaitOnFlagUntilTimeout>
 8011c56:	4603      	mov	r3, r0
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d03c      	beq.n	8011cd6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c64:	e853 3f00 	ldrex	r3, [r3]
 8011c68:	623b      	str	r3, [r7, #32]
   return(result);
 8011c6a:	6a3b      	ldr	r3, [r7, #32]
 8011c6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011c70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	461a      	mov	r2, r3
 8011c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c7a:	633b      	str	r3, [r7, #48]	; 0x30
 8011c7c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c82:	e841 2300 	strex	r3, r2, [r1]
 8011c86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d1e6      	bne.n	8011c5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	3308      	adds	r3, #8
 8011c94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c96:	693b      	ldr	r3, [r7, #16]
 8011c98:	e853 3f00 	ldrex	r3, [r3]
 8011c9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	f023 0301 	bic.w	r3, r3, #1
 8011ca4:	64bb      	str	r3, [r7, #72]	; 0x48
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	3308      	adds	r3, #8
 8011cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cae:	61fa      	str	r2, [r7, #28]
 8011cb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cb2:	69b9      	ldr	r1, [r7, #24]
 8011cb4:	69fa      	ldr	r2, [r7, #28]
 8011cb6:	e841 2300 	strex	r3, r2, [r1]
 8011cba:	617b      	str	r3, [r7, #20]
   return(result);
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d1e5      	bne.n	8011c8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	2220      	movs	r2, #32
 8011cc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	2200      	movs	r2, #0
 8011cce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011cd2:	2303      	movs	r3, #3
 8011cd4:	e012      	b.n	8011cfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	2220      	movs	r2, #32
 8011cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2220      	movs	r2, #32
 8011ce2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2200      	movs	r2, #0
 8011cea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2200      	movs	r2, #0
 8011cf0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011cfa:	2300      	movs	r3, #0
}
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	3758      	adds	r7, #88	; 0x58
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}

08011d04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b084      	sub	sp, #16
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	60f8      	str	r0, [r7, #12]
 8011d0c:	60b9      	str	r1, [r7, #8]
 8011d0e:	603b      	str	r3, [r7, #0]
 8011d10:	4613      	mov	r3, r2
 8011d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d14:	e04f      	b.n	8011db6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011d16:	69bb      	ldr	r3, [r7, #24]
 8011d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d1c:	d04b      	beq.n	8011db6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011d1e:	f7f2 f9c5 	bl	80040ac <HAL_GetTick>
 8011d22:	4602      	mov	r2, r0
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	1ad3      	subs	r3, r2, r3
 8011d28:	69ba      	ldr	r2, [r7, #24]
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d302      	bcc.n	8011d34 <UART_WaitOnFlagUntilTimeout+0x30>
 8011d2e:	69bb      	ldr	r3, [r7, #24]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d101      	bne.n	8011d38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011d34:	2303      	movs	r3, #3
 8011d36:	e04e      	b.n	8011dd6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	f003 0304 	and.w	r3, r3, #4
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d037      	beq.n	8011db6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	2b80      	cmp	r3, #128	; 0x80
 8011d4a:	d034      	beq.n	8011db6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	2b40      	cmp	r3, #64	; 0x40
 8011d50:	d031      	beq.n	8011db6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	69db      	ldr	r3, [r3, #28]
 8011d58:	f003 0308 	and.w	r3, r3, #8
 8011d5c:	2b08      	cmp	r3, #8
 8011d5e:	d110      	bne.n	8011d82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	2208      	movs	r2, #8
 8011d66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011d68:	68f8      	ldr	r0, [r7, #12]
 8011d6a:	f000 f99d 	bl	80120a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	2208      	movs	r2, #8
 8011d72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	2200      	movs	r2, #0
 8011d7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011d7e:	2301      	movs	r3, #1
 8011d80:	e029      	b.n	8011dd6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	69db      	ldr	r3, [r3, #28]
 8011d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011d90:	d111      	bne.n	8011db6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011d9c:	68f8      	ldr	r0, [r7, #12]
 8011d9e:	f000 f983 	bl	80120a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	2220      	movs	r2, #32
 8011da6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	2200      	movs	r2, #0
 8011dae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011db2:	2303      	movs	r3, #3
 8011db4:	e00f      	b.n	8011dd6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	69da      	ldr	r2, [r3, #28]
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	4013      	ands	r3, r2
 8011dc0:	68ba      	ldr	r2, [r7, #8]
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	bf0c      	ite	eq
 8011dc6:	2301      	moveq	r3, #1
 8011dc8:	2300      	movne	r3, #0
 8011dca:	b2db      	uxtb	r3, r3
 8011dcc:	461a      	mov	r2, r3
 8011dce:	79fb      	ldrb	r3, [r7, #7]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d0a0      	beq.n	8011d16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011dd4:	2300      	movs	r3, #0
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	3710      	adds	r7, #16
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}
	...

08011de0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011de0:	b480      	push	{r7}
 8011de2:	b0a3      	sub	sp, #140	; 0x8c
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	60f8      	str	r0, [r7, #12]
 8011de8:	60b9      	str	r1, [r7, #8]
 8011dea:	4613      	mov	r3, r2
 8011dec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	68ba      	ldr	r2, [r7, #8]
 8011df2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	88fa      	ldrh	r2, [r7, #6]
 8011df8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	88fa      	ldrh	r2, [r7, #6]
 8011e00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2200      	movs	r2, #0
 8011e08:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	689b      	ldr	r3, [r3, #8]
 8011e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e12:	d10e      	bne.n	8011e32 <UART_Start_Receive_IT+0x52>
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	691b      	ldr	r3, [r3, #16]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d105      	bne.n	8011e28 <UART_Start_Receive_IT+0x48>
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011e22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e26:	e02d      	b.n	8011e84 <UART_Start_Receive_IT+0xa4>
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	22ff      	movs	r2, #255	; 0xff
 8011e2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e30:	e028      	b.n	8011e84 <UART_Start_Receive_IT+0xa4>
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	689b      	ldr	r3, [r3, #8]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d10d      	bne.n	8011e56 <UART_Start_Receive_IT+0x76>
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	691b      	ldr	r3, [r3, #16]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d104      	bne.n	8011e4c <UART_Start_Receive_IT+0x6c>
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	22ff      	movs	r2, #255	; 0xff
 8011e46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e4a:	e01b      	b.n	8011e84 <UART_Start_Receive_IT+0xa4>
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	227f      	movs	r2, #127	; 0x7f
 8011e50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e54:	e016      	b.n	8011e84 <UART_Start_Receive_IT+0xa4>
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	689b      	ldr	r3, [r3, #8]
 8011e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011e5e:	d10d      	bne.n	8011e7c <UART_Start_Receive_IT+0x9c>
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	691b      	ldr	r3, [r3, #16]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d104      	bne.n	8011e72 <UART_Start_Receive_IT+0x92>
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	227f      	movs	r2, #127	; 0x7f
 8011e6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e70:	e008      	b.n	8011e84 <UART_Start_Receive_IT+0xa4>
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	223f      	movs	r2, #63	; 0x3f
 8011e76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011e7a:	e003      	b.n	8011e84 <UART_Start_Receive_IT+0xa4>
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	2200      	movs	r2, #0
 8011e80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	2200      	movs	r2, #0
 8011e88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	2222      	movs	r2, #34	; 0x22
 8011e90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	3308      	adds	r3, #8
 8011e9a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e9e:	e853 3f00 	ldrex	r3, [r3]
 8011ea2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011ea6:	f043 0301 	orr.w	r3, r3, #1
 8011eaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	3308      	adds	r3, #8
 8011eb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011eb8:	673a      	str	r2, [r7, #112]	; 0x70
 8011eba:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ebc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011ebe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011ec0:	e841 2300 	strex	r3, r2, [r1]
 8011ec4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d1e3      	bne.n	8011e94 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011ed4:	d14f      	bne.n	8011f76 <UART_Start_Receive_IT+0x196>
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011edc:	88fa      	ldrh	r2, [r7, #6]
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	d349      	bcc.n	8011f76 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	689b      	ldr	r3, [r3, #8]
 8011ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011eea:	d107      	bne.n	8011efc <UART_Start_Receive_IT+0x11c>
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	691b      	ldr	r3, [r3, #16]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d103      	bne.n	8011efc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	4a47      	ldr	r2, [pc, #284]	; (8012014 <UART_Start_Receive_IT+0x234>)
 8011ef8:	675a      	str	r2, [r3, #116]	; 0x74
 8011efa:	e002      	b.n	8011f02 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	4a46      	ldr	r2, [pc, #280]	; (8012018 <UART_Start_Receive_IT+0x238>)
 8011f00:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	691b      	ldr	r3, [r3, #16]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d01a      	beq.n	8011f40 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f12:	e853 3f00 	ldrex	r3, [r3]
 8011f16:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011f1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	461a      	mov	r2, r3
 8011f28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011f2e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011f32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011f34:	e841 2300 	strex	r3, r2, [r1]
 8011f38:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d1e4      	bne.n	8011f0a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	3308      	adds	r3, #8
 8011f46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f4a:	e853 3f00 	ldrex	r3, [r3]
 8011f4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	3308      	adds	r3, #8
 8011f5e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011f60:	64ba      	str	r2, [r7, #72]	; 0x48
 8011f62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011f66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f68:	e841 2300 	strex	r3, r2, [r1]
 8011f6c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d1e5      	bne.n	8011f40 <UART_Start_Receive_IT+0x160>
 8011f74:	e046      	b.n	8012004 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	689b      	ldr	r3, [r3, #8]
 8011f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011f7e:	d107      	bne.n	8011f90 <UART_Start_Receive_IT+0x1b0>
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	691b      	ldr	r3, [r3, #16]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d103      	bne.n	8011f90 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	4a24      	ldr	r2, [pc, #144]	; (801201c <UART_Start_Receive_IT+0x23c>)
 8011f8c:	675a      	str	r2, [r3, #116]	; 0x74
 8011f8e:	e002      	b.n	8011f96 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	4a23      	ldr	r2, [pc, #140]	; (8012020 <UART_Start_Receive_IT+0x240>)
 8011f94:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	691b      	ldr	r3, [r3, #16]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d019      	beq.n	8011fd2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fa6:	e853 3f00 	ldrex	r3, [r3]
 8011faa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011fb2:	677b      	str	r3, [r7, #116]	; 0x74
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	461a      	mov	r2, r3
 8011fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8011fbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011fc4:	e841 2300 	strex	r3, r2, [r1]
 8011fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d1e6      	bne.n	8011f9e <UART_Start_Receive_IT+0x1be>
 8011fd0:	e018      	b.n	8012004 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	e853 3f00 	ldrex	r3, [r3]
 8011fde:	613b      	str	r3, [r7, #16]
   return(result);
 8011fe0:	693b      	ldr	r3, [r7, #16]
 8011fe2:	f043 0320 	orr.w	r3, r3, #32
 8011fe6:	67bb      	str	r3, [r7, #120]	; 0x78
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	461a      	mov	r2, r3
 8011fee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ff0:	623b      	str	r3, [r7, #32]
 8011ff2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ff4:	69f9      	ldr	r1, [r7, #28]
 8011ff6:	6a3a      	ldr	r2, [r7, #32]
 8011ff8:	e841 2300 	strex	r3, r2, [r1]
 8011ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8011ffe:	69bb      	ldr	r3, [r7, #24]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d1e6      	bne.n	8011fd2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8012004:	2300      	movs	r3, #0
}
 8012006:	4618      	mov	r0, r3
 8012008:	378c      	adds	r7, #140	; 0x8c
 801200a:	46bd      	mov	sp, r7
 801200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012010:	4770      	bx	lr
 8012012:	bf00      	nop
 8012014:	080129f9 	.word	0x080129f9
 8012018:	08012699 	.word	0x08012699
 801201c:	080124e1 	.word	0x080124e1
 8012020:	08012329 	.word	0x08012329

08012024 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012024:	b480      	push	{r7}
 8012026:	b08f      	sub	sp, #60	; 0x3c
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012032:	6a3b      	ldr	r3, [r7, #32]
 8012034:	e853 3f00 	ldrex	r3, [r3]
 8012038:	61fb      	str	r3, [r7, #28]
   return(result);
 801203a:	69fb      	ldr	r3, [r7, #28]
 801203c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012040:	637b      	str	r3, [r7, #52]	; 0x34
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	461a      	mov	r2, r3
 8012048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801204a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801204c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801204e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012052:	e841 2300 	strex	r3, r2, [r1]
 8012056:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801205a:	2b00      	cmp	r3, #0
 801205c:	d1e6      	bne.n	801202c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	3308      	adds	r3, #8
 8012064:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	e853 3f00 	ldrex	r3, [r3]
 801206c:	60bb      	str	r3, [r7, #8]
   return(result);
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8012074:	633b      	str	r3, [r7, #48]	; 0x30
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	3308      	adds	r3, #8
 801207c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801207e:	61ba      	str	r2, [r7, #24]
 8012080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012082:	6979      	ldr	r1, [r7, #20]
 8012084:	69ba      	ldr	r2, [r7, #24]
 8012086:	e841 2300 	strex	r3, r2, [r1]
 801208a:	613b      	str	r3, [r7, #16]
   return(result);
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d1e5      	bne.n	801205e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2220      	movs	r2, #32
 8012096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801209a:	bf00      	nop
 801209c:	373c      	adds	r7, #60	; 0x3c
 801209e:	46bd      	mov	sp, r7
 80120a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a4:	4770      	bx	lr
	...

080120a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80120a8:	b480      	push	{r7}
 80120aa:	b095      	sub	sp, #84	; 0x54
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120b8:	e853 3f00 	ldrex	r3, [r3]
 80120bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80120be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80120c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	461a      	mov	r2, r3
 80120cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120ce:	643b      	str	r3, [r7, #64]	; 0x40
 80120d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80120d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80120d6:	e841 2300 	strex	r3, r2, [r1]
 80120da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80120dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d1e6      	bne.n	80120b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	3308      	adds	r3, #8
 80120e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120ea:	6a3b      	ldr	r3, [r7, #32]
 80120ec:	e853 3f00 	ldrex	r3, [r3]
 80120f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80120f2:	69fa      	ldr	r2, [r7, #28]
 80120f4:	4b1e      	ldr	r3, [pc, #120]	; (8012170 <UART_EndRxTransfer+0xc8>)
 80120f6:	4013      	ands	r3, r2
 80120f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	3308      	adds	r3, #8
 8012100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012102:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012104:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801210a:	e841 2300 	strex	r3, r2, [r1]
 801210e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012112:	2b00      	cmp	r3, #0
 8012114:	d1e5      	bne.n	80120e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801211a:	2b01      	cmp	r3, #1
 801211c:	d118      	bne.n	8012150 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	e853 3f00 	ldrex	r3, [r3]
 801212a:	60bb      	str	r3, [r7, #8]
   return(result);
 801212c:	68bb      	ldr	r3, [r7, #8]
 801212e:	f023 0310 	bic.w	r3, r3, #16
 8012132:	647b      	str	r3, [r7, #68]	; 0x44
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	461a      	mov	r2, r3
 801213a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801213c:	61bb      	str	r3, [r7, #24]
 801213e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012140:	6979      	ldr	r1, [r7, #20]
 8012142:	69ba      	ldr	r2, [r7, #24]
 8012144:	e841 2300 	strex	r3, r2, [r1]
 8012148:	613b      	str	r3, [r7, #16]
   return(result);
 801214a:	693b      	ldr	r3, [r7, #16]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d1e6      	bne.n	801211e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2220      	movs	r2, #32
 8012154:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2200      	movs	r2, #0
 801215c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2200      	movs	r2, #0
 8012162:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012164:	bf00      	nop
 8012166:	3754      	adds	r7, #84	; 0x54
 8012168:	46bd      	mov	sp, r7
 801216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216e:	4770      	bx	lr
 8012170:	effffffe 	.word	0xeffffffe

08012174 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b090      	sub	sp, #64	; 0x40
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012180:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	69db      	ldr	r3, [r3, #28]
 8012186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801218a:	d037      	beq.n	80121fc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 801218c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801218e:	2200      	movs	r2, #0
 8012190:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	3308      	adds	r3, #8
 801219a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801219e:	e853 3f00 	ldrex	r3, [r3]
 80121a2:	623b      	str	r3, [r7, #32]
   return(result);
 80121a4:	6a3b      	ldr	r3, [r7, #32]
 80121a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80121aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80121ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	3308      	adds	r3, #8
 80121b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80121b4:	633a      	str	r2, [r7, #48]	; 0x30
 80121b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80121ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121bc:	e841 2300 	strex	r3, r2, [r1]
 80121c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80121c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d1e5      	bne.n	8012194 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80121c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121ce:	693b      	ldr	r3, [r7, #16]
 80121d0:	e853 3f00 	ldrex	r3, [r3]
 80121d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121dc:	637b      	str	r3, [r7, #52]	; 0x34
 80121de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	461a      	mov	r2, r3
 80121e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121e6:	61fb      	str	r3, [r7, #28]
 80121e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121ea:	69b9      	ldr	r1, [r7, #24]
 80121ec:	69fa      	ldr	r2, [r7, #28]
 80121ee:	e841 2300 	strex	r3, r2, [r1]
 80121f2:	617b      	str	r3, [r7, #20]
   return(result);
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d1e6      	bne.n	80121c8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80121fa:	e002      	b.n	8012202 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80121fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80121fe:	f7f0 f8b9 	bl	8002374 <HAL_UART_TxCpltCallback>
}
 8012202:	bf00      	nop
 8012204:	3740      	adds	r7, #64	; 0x40
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}

0801220a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801220a:	b580      	push	{r7, lr}
 801220c:	b084      	sub	sp, #16
 801220e:	af00      	add	r7, sp, #0
 8012210:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012216:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012218:	68f8      	ldr	r0, [r7, #12]
 801221a:	f7fe fe9f 	bl	8010f5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801221e:	bf00      	nop
 8012220:	3710      	adds	r7, #16
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}

08012226 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012226:	b580      	push	{r7, lr}
 8012228:	b086      	sub	sp, #24
 801222a:	af00      	add	r7, sp, #0
 801222c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012232:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012234:	697b      	ldr	r3, [r7, #20]
 8012236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801223a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012242:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	689b      	ldr	r3, [r3, #8]
 801224a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801224e:	2b80      	cmp	r3, #128	; 0x80
 8012250:	d109      	bne.n	8012266 <UART_DMAError+0x40>
 8012252:	693b      	ldr	r3, [r7, #16]
 8012254:	2b21      	cmp	r3, #33	; 0x21
 8012256:	d106      	bne.n	8012266 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	2200      	movs	r2, #0
 801225c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8012260:	6978      	ldr	r0, [r7, #20]
 8012262:	f7ff fedf 	bl	8012024 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8012266:	697b      	ldr	r3, [r7, #20]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	689b      	ldr	r3, [r3, #8]
 801226c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012270:	2b40      	cmp	r3, #64	; 0x40
 8012272:	d109      	bne.n	8012288 <UART_DMAError+0x62>
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	2b22      	cmp	r3, #34	; 0x22
 8012278:	d106      	bne.n	8012288 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	2200      	movs	r2, #0
 801227e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8012282:	6978      	ldr	r0, [r7, #20]
 8012284:	f7ff ff10 	bl	80120a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801228e:	f043 0210 	orr.w	r2, r3, #16
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012298:	6978      	ldr	r0, [r7, #20]
 801229a:	f7fe fe69 	bl	8010f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801229e:	bf00      	nop
 80122a0:	3718      	adds	r7, #24
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}

080122a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80122a6:	b580      	push	{r7, lr}
 80122a8:	b084      	sub	sp, #16
 80122aa:	af00      	add	r7, sp, #0
 80122ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	2200      	movs	r2, #0
 80122b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	2200      	movs	r2, #0
 80122c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80122c4:	68f8      	ldr	r0, [r7, #12]
 80122c6:	f7fe fe53 	bl	8010f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80122ca:	bf00      	nop
 80122cc:	3710      	adds	r7, #16
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd80      	pop	{r7, pc}

080122d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80122d2:	b580      	push	{r7, lr}
 80122d4:	b088      	sub	sp, #32
 80122d6:	af00      	add	r7, sp, #0
 80122d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	e853 3f00 	ldrex	r3, [r3]
 80122e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80122e8:	68bb      	ldr	r3, [r7, #8]
 80122ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80122ee:	61fb      	str	r3, [r7, #28]
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	461a      	mov	r2, r3
 80122f6:	69fb      	ldr	r3, [r7, #28]
 80122f8:	61bb      	str	r3, [r7, #24]
 80122fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122fc:	6979      	ldr	r1, [r7, #20]
 80122fe:	69ba      	ldr	r2, [r7, #24]
 8012300:	e841 2300 	strex	r3, r2, [r1]
 8012304:	613b      	str	r3, [r7, #16]
   return(result);
 8012306:	693b      	ldr	r3, [r7, #16]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d1e6      	bne.n	80122da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	2220      	movs	r2, #32
 8012310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2200      	movs	r2, #0
 8012318:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f7f0 f82a 	bl	8002374 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012320:	bf00      	nop
 8012322:	3720      	adds	r7, #32
 8012324:	46bd      	mov	sp, r7
 8012326:	bd80      	pop	{r7, pc}

08012328 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b09c      	sub	sp, #112	; 0x70
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012336:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012340:	2b22      	cmp	r3, #34	; 0x22
 8012342:	f040 80be 	bne.w	80124c2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801234c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012350:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012354:	b2d9      	uxtb	r1, r3
 8012356:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801235a:	b2da      	uxtb	r2, r3
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012360:	400a      	ands	r2, r1
 8012362:	b2d2      	uxtb	r2, r2
 8012364:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801236a:	1c5a      	adds	r2, r3, #1
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012376:	b29b      	uxth	r3, r3
 8012378:	3b01      	subs	r3, #1
 801237a:	b29a      	uxth	r2, r3
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012388:	b29b      	uxth	r3, r3
 801238a:	2b00      	cmp	r3, #0
 801238c:	f040 80a1 	bne.w	80124d2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012398:	e853 3f00 	ldrex	r3, [r3]
 801239c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801239e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80123a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	461a      	mov	r2, r3
 80123ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80123ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80123b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80123b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80123b6:	e841 2300 	strex	r3, r2, [r1]
 80123ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80123bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d1e6      	bne.n	8012390 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	3308      	adds	r3, #8
 80123c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123cc:	e853 3f00 	ldrex	r3, [r3]
 80123d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80123d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123d4:	f023 0301 	bic.w	r3, r3, #1
 80123d8:	667b      	str	r3, [r7, #100]	; 0x64
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	3308      	adds	r3, #8
 80123e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80123e2:	647a      	str	r2, [r7, #68]	; 0x44
 80123e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80123e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80123ea:	e841 2300 	strex	r3, r2, [r1]
 80123ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80123f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d1e5      	bne.n	80123c2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2220      	movs	r2, #32
 80123fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2200      	movs	r2, #0
 8012402:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2200      	movs	r2, #0
 8012408:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	4a33      	ldr	r2, [pc, #204]	; (80124dc <UART_RxISR_8BIT+0x1b4>)
 8012410:	4293      	cmp	r3, r2
 8012412:	d01f      	beq.n	8012454 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	685b      	ldr	r3, [r3, #4]
 801241a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801241e:	2b00      	cmp	r3, #0
 8012420:	d018      	beq.n	8012454 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801242a:	e853 3f00 	ldrex	r3, [r3]
 801242e:	623b      	str	r3, [r7, #32]
   return(result);
 8012430:	6a3b      	ldr	r3, [r7, #32]
 8012432:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012436:	663b      	str	r3, [r7, #96]	; 0x60
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	461a      	mov	r2, r3
 801243e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012440:	633b      	str	r3, [r7, #48]	; 0x30
 8012442:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012444:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012448:	e841 2300 	strex	r3, r2, [r1]
 801244c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012450:	2b00      	cmp	r3, #0
 8012452:	d1e6      	bne.n	8012422 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012458:	2b01      	cmp	r3, #1
 801245a:	d12e      	bne.n	80124ba <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2200      	movs	r2, #0
 8012460:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012468:	693b      	ldr	r3, [r7, #16]
 801246a:	e853 3f00 	ldrex	r3, [r3]
 801246e:	60fb      	str	r3, [r7, #12]
   return(result);
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	f023 0310 	bic.w	r3, r3, #16
 8012476:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	461a      	mov	r2, r3
 801247e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012480:	61fb      	str	r3, [r7, #28]
 8012482:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012484:	69b9      	ldr	r1, [r7, #24]
 8012486:	69fa      	ldr	r2, [r7, #28]
 8012488:	e841 2300 	strex	r3, r2, [r1]
 801248c:	617b      	str	r3, [r7, #20]
   return(result);
 801248e:	697b      	ldr	r3, [r7, #20]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d1e6      	bne.n	8012462 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	69db      	ldr	r3, [r3, #28]
 801249a:	f003 0310 	and.w	r3, r3, #16
 801249e:	2b10      	cmp	r3, #16
 80124a0:	d103      	bne.n	80124aa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	2210      	movs	r2, #16
 80124a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80124b0:	4619      	mov	r1, r3
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f7fe fd66 	bl	8010f84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80124b8:	e00b      	b.n	80124d2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f7ee f8dc 	bl	8000678 <HAL_UART_RxCpltCallback>
}
 80124c0:	e007      	b.n	80124d2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	699a      	ldr	r2, [r3, #24]
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	f042 0208 	orr.w	r2, r2, #8
 80124d0:	619a      	str	r2, [r3, #24]
}
 80124d2:	bf00      	nop
 80124d4:	3770      	adds	r7, #112	; 0x70
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}
 80124da:	bf00      	nop
 80124dc:	58000c00 	.word	0x58000c00

080124e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b09c      	sub	sp, #112	; 0x70
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80124ee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80124f8:	2b22      	cmp	r3, #34	; 0x22
 80124fa:	f040 80be 	bne.w	801267a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012504:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801250c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801250e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8012512:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012516:	4013      	ands	r3, r2
 8012518:	b29a      	uxth	r2, r3
 801251a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801251c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012522:	1c9a      	adds	r2, r3, #2
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801252e:	b29b      	uxth	r3, r3
 8012530:	3b01      	subs	r3, #1
 8012532:	b29a      	uxth	r2, r3
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012540:	b29b      	uxth	r3, r3
 8012542:	2b00      	cmp	r3, #0
 8012544:	f040 80a1 	bne.w	801268a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801254e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012550:	e853 3f00 	ldrex	r3, [r3]
 8012554:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012558:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801255c:	667b      	str	r3, [r7, #100]	; 0x64
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	461a      	mov	r2, r3
 8012564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012566:	657b      	str	r3, [r7, #84]	; 0x54
 8012568:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801256a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801256c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801256e:	e841 2300 	strex	r3, r2, [r1]
 8012572:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012576:	2b00      	cmp	r3, #0
 8012578:	d1e6      	bne.n	8012548 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	3308      	adds	r3, #8
 8012580:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012584:	e853 3f00 	ldrex	r3, [r3]
 8012588:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801258c:	f023 0301 	bic.w	r3, r3, #1
 8012590:	663b      	str	r3, [r7, #96]	; 0x60
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	3308      	adds	r3, #8
 8012598:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801259a:	643a      	str	r2, [r7, #64]	; 0x40
 801259c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801259e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80125a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80125a2:	e841 2300 	strex	r3, r2, [r1]
 80125a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80125a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d1e5      	bne.n	801257a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2220      	movs	r2, #32
 80125b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2200      	movs	r2, #0
 80125ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	2200      	movs	r2, #0
 80125c0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	4a33      	ldr	r2, [pc, #204]	; (8012694 <UART_RxISR_16BIT+0x1b4>)
 80125c8:	4293      	cmp	r3, r2
 80125ca:	d01f      	beq.n	801260c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	685b      	ldr	r3, [r3, #4]
 80125d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d018      	beq.n	801260c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125e0:	6a3b      	ldr	r3, [r7, #32]
 80125e2:	e853 3f00 	ldrex	r3, [r3]
 80125e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80125e8:	69fb      	ldr	r3, [r7, #28]
 80125ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80125ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	461a      	mov	r2, r3
 80125f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80125f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125fa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80125fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012600:	e841 2300 	strex	r3, r2, [r1]
 8012604:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012608:	2b00      	cmp	r3, #0
 801260a:	d1e6      	bne.n	80125da <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012610:	2b01      	cmp	r3, #1
 8012612:	d12e      	bne.n	8012672 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2200      	movs	r2, #0
 8012618:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	e853 3f00 	ldrex	r3, [r3]
 8012626:	60bb      	str	r3, [r7, #8]
   return(result);
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	f023 0310 	bic.w	r3, r3, #16
 801262e:	65bb      	str	r3, [r7, #88]	; 0x58
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	461a      	mov	r2, r3
 8012636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012638:	61bb      	str	r3, [r7, #24]
 801263a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801263c:	6979      	ldr	r1, [r7, #20]
 801263e:	69ba      	ldr	r2, [r7, #24]
 8012640:	e841 2300 	strex	r3, r2, [r1]
 8012644:	613b      	str	r3, [r7, #16]
   return(result);
 8012646:	693b      	ldr	r3, [r7, #16]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d1e6      	bne.n	801261a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	69db      	ldr	r3, [r3, #28]
 8012652:	f003 0310 	and.w	r3, r3, #16
 8012656:	2b10      	cmp	r3, #16
 8012658:	d103      	bne.n	8012662 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	2210      	movs	r2, #16
 8012660:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012668:	4619      	mov	r1, r3
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f7fe fc8a 	bl	8010f84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012670:	e00b      	b.n	801268a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f7ee f800 	bl	8000678 <HAL_UART_RxCpltCallback>
}
 8012678:	e007      	b.n	801268a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	699a      	ldr	r2, [r3, #24]
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	f042 0208 	orr.w	r2, r2, #8
 8012688:	619a      	str	r2, [r3, #24]
}
 801268a:	bf00      	nop
 801268c:	3770      	adds	r7, #112	; 0x70
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}
 8012692:	bf00      	nop
 8012694:	58000c00 	.word	0x58000c00

08012698 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b0ac      	sub	sp, #176	; 0xb0
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126a6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	69db      	ldr	r3, [r3, #28]
 80126b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	689b      	ldr	r3, [r3, #8]
 80126c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126ce:	2b22      	cmp	r3, #34	; 0x22
 80126d0:	f040 8180 	bne.w	80129d4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80126da:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80126de:	e123      	b.n	8012928 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126e6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80126ea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80126ee:	b2d9      	uxtb	r1, r3
 80126f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80126f4:	b2da      	uxtb	r2, r3
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126fa:	400a      	ands	r2, r1
 80126fc:	b2d2      	uxtb	r2, r2
 80126fe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012704:	1c5a      	adds	r2, r3, #1
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012710:	b29b      	uxth	r3, r3
 8012712:	3b01      	subs	r3, #1
 8012714:	b29a      	uxth	r2, r3
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	69db      	ldr	r3, [r3, #28]
 8012722:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801272a:	f003 0307 	and.w	r3, r3, #7
 801272e:	2b00      	cmp	r3, #0
 8012730:	d053      	beq.n	80127da <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012736:	f003 0301 	and.w	r3, r3, #1
 801273a:	2b00      	cmp	r3, #0
 801273c:	d011      	beq.n	8012762 <UART_RxISR_8BIT_FIFOEN+0xca>
 801273e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012746:	2b00      	cmp	r3, #0
 8012748:	d00b      	beq.n	8012762 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	2201      	movs	r2, #1
 8012750:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012758:	f043 0201 	orr.w	r2, r3, #1
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012766:	f003 0302 	and.w	r3, r3, #2
 801276a:	2b00      	cmp	r3, #0
 801276c:	d011      	beq.n	8012792 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801276e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012772:	f003 0301 	and.w	r3, r3, #1
 8012776:	2b00      	cmp	r3, #0
 8012778:	d00b      	beq.n	8012792 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	2202      	movs	r2, #2
 8012780:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012788:	f043 0204 	orr.w	r2, r3, #4
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012796:	f003 0304 	and.w	r3, r3, #4
 801279a:	2b00      	cmp	r3, #0
 801279c:	d011      	beq.n	80127c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801279e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80127a2:	f003 0301 	and.w	r3, r3, #1
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d00b      	beq.n	80127c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	2204      	movs	r2, #4
 80127b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127b8:	f043 0202 	orr.w	r2, r3, #2
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d006      	beq.n	80127da <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f7fe fbcf 	bl	8010f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2200      	movs	r2, #0
 80127d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80127e0:	b29b      	uxth	r3, r3
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	f040 80a0 	bne.w	8012928 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80127f0:	e853 3f00 	ldrex	r3, [r3]
 80127f4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80127f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80127f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80127fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	461a      	mov	r2, r3
 8012806:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801280a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801280c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801280e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012810:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012812:	e841 2300 	strex	r3, r2, [r1]
 8012816:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8012818:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801281a:	2b00      	cmp	r3, #0
 801281c:	d1e4      	bne.n	80127e8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	3308      	adds	r3, #8
 8012824:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012828:	e853 3f00 	ldrex	r3, [r3]
 801282c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801282e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012830:	4b6e      	ldr	r3, [pc, #440]	; (80129ec <UART_RxISR_8BIT_FIFOEN+0x354>)
 8012832:	4013      	ands	r3, r2
 8012834:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	3308      	adds	r3, #8
 801283e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012842:	66ba      	str	r2, [r7, #104]	; 0x68
 8012844:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012846:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012848:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801284a:	e841 2300 	strex	r3, r2, [r1]
 801284e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012850:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012852:	2b00      	cmp	r3, #0
 8012854:	d1e3      	bne.n	801281e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	2220      	movs	r2, #32
 801285a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	2200      	movs	r2, #0
 8012862:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	2200      	movs	r2, #0
 8012868:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	4a60      	ldr	r2, [pc, #384]	; (80129f0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012870:	4293      	cmp	r3, r2
 8012872:	d021      	beq.n	80128b8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801287e:	2b00      	cmp	r3, #0
 8012880:	d01a      	beq.n	80128b8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801288a:	e853 3f00 	ldrex	r3, [r3]
 801288e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012892:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	461a      	mov	r2, r3
 80128a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80128a4:	657b      	str	r3, [r7, #84]	; 0x54
 80128a6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80128aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80128ac:	e841 2300 	strex	r3, r2, [r1]
 80128b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80128b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d1e4      	bne.n	8012882 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128bc:	2b01      	cmp	r3, #1
 80128be:	d130      	bne.n	8012922 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2200      	movs	r2, #0
 80128c4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128ce:	e853 3f00 	ldrex	r3, [r3]
 80128d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80128d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d6:	f023 0310 	bic.w	r3, r3, #16
 80128da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	461a      	mov	r2, r3
 80128e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80128e8:	643b      	str	r3, [r7, #64]	; 0x40
 80128ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80128ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80128f0:	e841 2300 	strex	r3, r2, [r1]
 80128f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80128f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d1e4      	bne.n	80128c6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	69db      	ldr	r3, [r3, #28]
 8012902:	f003 0310 	and.w	r3, r3, #16
 8012906:	2b10      	cmp	r3, #16
 8012908:	d103      	bne.n	8012912 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	2210      	movs	r2, #16
 8012910:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012918:	4619      	mov	r1, r3
 801291a:	6878      	ldr	r0, [r7, #4]
 801291c:	f7fe fb32 	bl	8010f84 <HAL_UARTEx_RxEventCallback>
 8012920:	e002      	b.n	8012928 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012922:	6878      	ldr	r0, [r7, #4]
 8012924:	f7ed fea8 	bl	8000678 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012928:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801292c:	2b00      	cmp	r3, #0
 801292e:	d006      	beq.n	801293e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012930:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012934:	f003 0320 	and.w	r3, r3, #32
 8012938:	2b00      	cmp	r3, #0
 801293a:	f47f aed1 	bne.w	80126e0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012944:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012948:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801294c:	2b00      	cmp	r3, #0
 801294e:	d049      	beq.n	80129e4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012956:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801295a:	429a      	cmp	r2, r3
 801295c:	d242      	bcs.n	80129e4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	3308      	adds	r3, #8
 8012964:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012966:	6a3b      	ldr	r3, [r7, #32]
 8012968:	e853 3f00 	ldrex	r3, [r3]
 801296c:	61fb      	str	r3, [r7, #28]
   return(result);
 801296e:	69fb      	ldr	r3, [r7, #28]
 8012970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	3308      	adds	r3, #8
 801297e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012982:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012984:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012986:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801298a:	e841 2300 	strex	r3, r2, [r1]
 801298e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012992:	2b00      	cmp	r3, #0
 8012994:	d1e3      	bne.n	801295e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	4a16      	ldr	r2, [pc, #88]	; (80129f4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801299a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	e853 3f00 	ldrex	r3, [r3]
 80129a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	f043 0320 	orr.w	r3, r3, #32
 80129b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	461a      	mov	r2, r3
 80129ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80129be:	61bb      	str	r3, [r7, #24]
 80129c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129c2:	6979      	ldr	r1, [r7, #20]
 80129c4:	69ba      	ldr	r2, [r7, #24]
 80129c6:	e841 2300 	strex	r3, r2, [r1]
 80129ca:	613b      	str	r3, [r7, #16]
   return(result);
 80129cc:	693b      	ldr	r3, [r7, #16]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d1e4      	bne.n	801299c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80129d2:	e007      	b.n	80129e4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	699a      	ldr	r2, [r3, #24]
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	f042 0208 	orr.w	r2, r2, #8
 80129e2:	619a      	str	r2, [r3, #24]
}
 80129e4:	bf00      	nop
 80129e6:	37b0      	adds	r7, #176	; 0xb0
 80129e8:	46bd      	mov	sp, r7
 80129ea:	bd80      	pop	{r7, pc}
 80129ec:	effffffe 	.word	0xeffffffe
 80129f0:	58000c00 	.word	0x58000c00
 80129f4:	08012329 	.word	0x08012329

080129f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b0ae      	sub	sp, #184	; 0xb8
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012a06:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	69db      	ldr	r3, [r3, #28]
 8012a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	689b      	ldr	r3, [r3, #8]
 8012a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012a2e:	2b22      	cmp	r3, #34	; 0x22
 8012a30:	f040 8184 	bne.w	8012d3c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a3a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012a3e:	e127      	b.n	8012c90 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a46:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012a52:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8012a56:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8012a5a:	4013      	ands	r3, r2
 8012a5c:	b29a      	uxth	r2, r3
 8012a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012a62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a68:	1c9a      	adds	r2, r3, #2
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	3b01      	subs	r3, #1
 8012a78:	b29a      	uxth	r2, r3
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	69db      	ldr	r3, [r3, #28]
 8012a86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012a8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a8e:	f003 0307 	and.w	r3, r3, #7
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d053      	beq.n	8012b3e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012a96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a9a:	f003 0301 	and.w	r3, r3, #1
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d011      	beq.n	8012ac6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8012aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d00b      	beq.n	8012ac6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	2201      	movs	r2, #1
 8012ab4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012abc:	f043 0201 	orr.w	r2, r3, #1
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012ac6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012aca:	f003 0302 	and.w	r3, r3, #2
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d011      	beq.n	8012af6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012ad2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012ad6:	f003 0301 	and.w	r3, r3, #1
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d00b      	beq.n	8012af6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	2202      	movs	r2, #2
 8012ae4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012aec:	f043 0204 	orr.w	r2, r3, #4
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012af6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012afa:	f003 0304 	and.w	r3, r3, #4
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d011      	beq.n	8012b26 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012b02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012b06:	f003 0301 	and.w	r3, r3, #1
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d00b      	beq.n	8012b26 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	2204      	movs	r2, #4
 8012b14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b1c:	f043 0202 	orr.w	r2, r3, #2
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d006      	beq.n	8012b3e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f7fe fa1d 	bl	8010f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	2200      	movs	r2, #0
 8012b3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b44:	b29b      	uxth	r3, r3
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	f040 80a2 	bne.w	8012c90 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012b54:	e853 3f00 	ldrex	r3, [r3]
 8012b58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	461a      	mov	r2, r3
 8012b6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012b6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012b72:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012b76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012b7a:	e841 2300 	strex	r3, r2, [r1]
 8012b7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d1e2      	bne.n	8012b4c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	3308      	adds	r3, #8
 8012b8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b90:	e853 3f00 	ldrex	r3, [r3]
 8012b94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012b96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012b98:	4b6e      	ldr	r3, [pc, #440]	; (8012d54 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012b9a:	4013      	ands	r3, r2
 8012b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	3308      	adds	r3, #8
 8012ba6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012baa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012bac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012bb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012bb2:	e841 2300 	strex	r3, r2, [r1]
 8012bb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d1e3      	bne.n	8012b86 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2220      	movs	r2, #32
 8012bc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2200      	movs	r2, #0
 8012bca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	4a60      	ldr	r2, [pc, #384]	; (8012d58 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012bd8:	4293      	cmp	r3, r2
 8012bda:	d021      	beq.n	8012c20 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	685b      	ldr	r3, [r3, #4]
 8012be2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d01a      	beq.n	8012c20 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bf2:	e853 3f00 	ldrex	r3, [r3]
 8012bf6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012bfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	461a      	mov	r2, r3
 8012c08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012c0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8012c0e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012c12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012c14:	e841 2300 	strex	r3, r2, [r1]
 8012c18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d1e4      	bne.n	8012bea <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c24:	2b01      	cmp	r3, #1
 8012c26:	d130      	bne.n	8012c8a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c36:	e853 3f00 	ldrex	r3, [r3]
 8012c3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c3e:	f023 0310 	bic.w	r3, r3, #16
 8012c42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	461a      	mov	r2, r3
 8012c4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012c50:	647b      	str	r3, [r7, #68]	; 0x44
 8012c52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012c56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c58:	e841 2300 	strex	r3, r2, [r1]
 8012c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d1e4      	bne.n	8012c2e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	69db      	ldr	r3, [r3, #28]
 8012c6a:	f003 0310 	and.w	r3, r3, #16
 8012c6e:	2b10      	cmp	r3, #16
 8012c70:	d103      	bne.n	8012c7a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	2210      	movs	r2, #16
 8012c78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012c80:	4619      	mov	r1, r3
 8012c82:	6878      	ldr	r0, [r7, #4]
 8012c84:	f7fe f97e 	bl	8010f84 <HAL_UARTEx_RxEventCallback>
 8012c88:	e002      	b.n	8012c90 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	f7ed fcf4 	bl	8000678 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012c90:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d006      	beq.n	8012ca6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012c98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012c9c:	f003 0320 	and.w	r3, r3, #32
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	f47f aecd 	bne.w	8012a40 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012cac:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012cb0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d049      	beq.n	8012d4c <UART_RxISR_16BIT_FIFOEN+0x354>
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012cbe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	d242      	bcs.n	8012d4c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	3308      	adds	r3, #8
 8012ccc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd0:	e853 3f00 	ldrex	r3, [r3]
 8012cd4:	623b      	str	r3, [r7, #32]
   return(result);
 8012cd6:	6a3b      	ldr	r3, [r7, #32]
 8012cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	3308      	adds	r3, #8
 8012ce6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012cea:	633a      	str	r2, [r7, #48]	; 0x30
 8012cec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cf2:	e841 2300 	strex	r3, r2, [r1]
 8012cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d1e3      	bne.n	8012cc6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	4a16      	ldr	r2, [pc, #88]	; (8012d5c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012d02:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d0a:	693b      	ldr	r3, [r7, #16]
 8012d0c:	e853 3f00 	ldrex	r3, [r3]
 8012d10:	60fb      	str	r3, [r7, #12]
   return(result);
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	f043 0320 	orr.w	r3, r3, #32
 8012d18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	461a      	mov	r2, r3
 8012d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012d26:	61fb      	str	r3, [r7, #28]
 8012d28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d2a:	69b9      	ldr	r1, [r7, #24]
 8012d2c:	69fa      	ldr	r2, [r7, #28]
 8012d2e:	e841 2300 	strex	r3, r2, [r1]
 8012d32:	617b      	str	r3, [r7, #20]
   return(result);
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d1e4      	bne.n	8012d04 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012d3a:	e007      	b.n	8012d4c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	699a      	ldr	r2, [r3, #24]
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	f042 0208 	orr.w	r2, r2, #8
 8012d4a:	619a      	str	r2, [r3, #24]
}
 8012d4c:	bf00      	nop
 8012d4e:	37b8      	adds	r7, #184	; 0xb8
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd80      	pop	{r7, pc}
 8012d54:	effffffe 	.word	0xeffffffe
 8012d58:	58000c00 	.word	0x58000c00
 8012d5c:	080124e1 	.word	0x080124e1

08012d60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012d60:	b480      	push	{r7}
 8012d62:	b083      	sub	sp, #12
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012d68:	bf00      	nop
 8012d6a:	370c      	adds	r7, #12
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d72:	4770      	bx	lr

08012d74 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012d74:	b480      	push	{r7}
 8012d76:	b083      	sub	sp, #12
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012d7c:	bf00      	nop
 8012d7e:	370c      	adds	r7, #12
 8012d80:	46bd      	mov	sp, r7
 8012d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d86:	4770      	bx	lr

08012d88 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012d88:	b480      	push	{r7}
 8012d8a:	b083      	sub	sp, #12
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012d90:	bf00      	nop
 8012d92:	370c      	adds	r7, #12
 8012d94:	46bd      	mov	sp, r7
 8012d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9a:	4770      	bx	lr

08012d9c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b089      	sub	sp, #36	; 0x24
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012daa:	2b01      	cmp	r3, #1
 8012dac:	d101      	bne.n	8012db2 <HAL_UARTEx_EnableStopMode+0x16>
 8012dae:	2302      	movs	r3, #2
 8012db0:	e021      	b.n	8012df6 <HAL_UARTEx_EnableStopMode+0x5a>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2201      	movs	r2, #1
 8012db6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	e853 3f00 	ldrex	r3, [r3]
 8012dc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8012dc8:	68bb      	ldr	r3, [r7, #8]
 8012dca:	f043 0302 	orr.w	r3, r3, #2
 8012dce:	61fb      	str	r3, [r7, #28]
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	461a      	mov	r2, r3
 8012dd6:	69fb      	ldr	r3, [r7, #28]
 8012dd8:	61bb      	str	r3, [r7, #24]
 8012dda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ddc:	6979      	ldr	r1, [r7, #20]
 8012dde:	69ba      	ldr	r2, [r7, #24]
 8012de0:	e841 2300 	strex	r3, r2, [r1]
 8012de4:	613b      	str	r3, [r7, #16]
   return(result);
 8012de6:	693b      	ldr	r3, [r7, #16]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d1e6      	bne.n	8012dba <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2200      	movs	r2, #0
 8012df0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012df4:	2300      	movs	r3, #0
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	3724      	adds	r7, #36	; 0x24
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e00:	4770      	bx	lr

08012e02 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8012e02:	b580      	push	{r7, lr}
 8012e04:	b084      	sub	sp, #16
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d101      	bne.n	8012e18 <HAL_UARTEx_EnableFifoMode+0x16>
 8012e14:	2302      	movs	r3, #2
 8012e16:	e02b      	b.n	8012e70 <HAL_UARTEx_EnableFifoMode+0x6e>
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	2201      	movs	r2, #1
 8012e1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2224      	movs	r2, #36	; 0x24
 8012e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	f022 0201 	bic.w	r2, r2, #1
 8012e3e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012e46:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8012e4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	68fa      	ldr	r2, [r7, #12]
 8012e56:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012e58:	6878      	ldr	r0, [r7, #4]
 8012e5a:	f000 f8c3 	bl	8012fe4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	2220      	movs	r2, #32
 8012e62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2200      	movs	r2, #0
 8012e6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012e6e:	2300      	movs	r3, #0
}
 8012e70:	4618      	mov	r0, r3
 8012e72:	3710      	adds	r7, #16
 8012e74:	46bd      	mov	sp, r7
 8012e76:	bd80      	pop	{r7, pc}

08012e78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012e78:	b480      	push	{r7}
 8012e7a:	b085      	sub	sp, #20
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012e86:	2b01      	cmp	r3, #1
 8012e88:	d101      	bne.n	8012e8e <HAL_UARTEx_DisableFifoMode+0x16>
 8012e8a:	2302      	movs	r3, #2
 8012e8c:	e027      	b.n	8012ede <HAL_UARTEx_DisableFifoMode+0x66>
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	2201      	movs	r2, #1
 8012e92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	2224      	movs	r2, #36	; 0x24
 8012e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	681a      	ldr	r2, [r3, #0]
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	f022 0201 	bic.w	r2, r2, #1
 8012eb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012ebc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	68fa      	ldr	r2, [r7, #12]
 8012eca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	2220      	movs	r2, #32
 8012ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012edc:	2300      	movs	r3, #0
}
 8012ede:	4618      	mov	r0, r3
 8012ee0:	3714      	adds	r7, #20
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee8:	4770      	bx	lr

08012eea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012eea:	b580      	push	{r7, lr}
 8012eec:	b084      	sub	sp, #16
 8012eee:	af00      	add	r7, sp, #0
 8012ef0:	6078      	str	r0, [r7, #4]
 8012ef2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012efa:	2b01      	cmp	r3, #1
 8012efc:	d101      	bne.n	8012f02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012efe:	2302      	movs	r3, #2
 8012f00:	e02d      	b.n	8012f5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	2201      	movs	r2, #1
 8012f06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	2224      	movs	r2, #36	; 0x24
 8012f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	681a      	ldr	r2, [r3, #0]
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	f022 0201 	bic.w	r2, r2, #1
 8012f28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	689b      	ldr	r3, [r3, #8]
 8012f30:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	683a      	ldr	r2, [r7, #0]
 8012f3a:	430a      	orrs	r2, r1
 8012f3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f000 f850 	bl	8012fe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	68fa      	ldr	r2, [r7, #12]
 8012f4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	2220      	movs	r2, #32
 8012f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	2200      	movs	r2, #0
 8012f58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012f5c:	2300      	movs	r3, #0
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	3710      	adds	r7, #16
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}

08012f66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012f66:	b580      	push	{r7, lr}
 8012f68:	b084      	sub	sp, #16
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	6078      	str	r0, [r7, #4]
 8012f6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012f76:	2b01      	cmp	r3, #1
 8012f78:	d101      	bne.n	8012f7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012f7a:	2302      	movs	r3, #2
 8012f7c:	e02d      	b.n	8012fda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	2201      	movs	r2, #1
 8012f82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2224      	movs	r2, #36	; 0x24
 8012f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	681a      	ldr	r2, [r3, #0]
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	f022 0201 	bic.w	r2, r2, #1
 8012fa4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	689b      	ldr	r3, [r3, #8]
 8012fac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	683a      	ldr	r2, [r7, #0]
 8012fb6:	430a      	orrs	r2, r1
 8012fb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	f000 f812 	bl	8012fe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	68fa      	ldr	r2, [r7, #12]
 8012fc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	2220      	movs	r2, #32
 8012fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012fd8:	2300      	movs	r3, #0
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3710      	adds	r7, #16
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}
	...

08012fe4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012fe4:	b480      	push	{r7}
 8012fe6:	b085      	sub	sp, #20
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d108      	bne.n	8013006 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2201      	movs	r2, #1
 8012ff8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2201      	movs	r2, #1
 8013000:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013004:	e031      	b.n	801306a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013006:	2310      	movs	r3, #16
 8013008:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801300a:	2310      	movs	r3, #16
 801300c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	689b      	ldr	r3, [r3, #8]
 8013014:	0e5b      	lsrs	r3, r3, #25
 8013016:	b2db      	uxtb	r3, r3
 8013018:	f003 0307 	and.w	r3, r3, #7
 801301c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	689b      	ldr	r3, [r3, #8]
 8013024:	0f5b      	lsrs	r3, r3, #29
 8013026:	b2db      	uxtb	r3, r3
 8013028:	f003 0307 	and.w	r3, r3, #7
 801302c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801302e:	7bbb      	ldrb	r3, [r7, #14]
 8013030:	7b3a      	ldrb	r2, [r7, #12]
 8013032:	4911      	ldr	r1, [pc, #68]	; (8013078 <UARTEx_SetNbDataToProcess+0x94>)
 8013034:	5c8a      	ldrb	r2, [r1, r2]
 8013036:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801303a:	7b3a      	ldrb	r2, [r7, #12]
 801303c:	490f      	ldr	r1, [pc, #60]	; (801307c <UARTEx_SetNbDataToProcess+0x98>)
 801303e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013040:	fb93 f3f2 	sdiv	r3, r3, r2
 8013044:	b29a      	uxth	r2, r3
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801304c:	7bfb      	ldrb	r3, [r7, #15]
 801304e:	7b7a      	ldrb	r2, [r7, #13]
 8013050:	4909      	ldr	r1, [pc, #36]	; (8013078 <UARTEx_SetNbDataToProcess+0x94>)
 8013052:	5c8a      	ldrb	r2, [r1, r2]
 8013054:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013058:	7b7a      	ldrb	r2, [r7, #13]
 801305a:	4908      	ldr	r1, [pc, #32]	; (801307c <UARTEx_SetNbDataToProcess+0x98>)
 801305c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801305e:	fb93 f3f2 	sdiv	r3, r3, r2
 8013062:	b29a      	uxth	r2, r3
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801306a:	bf00      	nop
 801306c:	3714      	adds	r7, #20
 801306e:	46bd      	mov	sp, r7
 8013070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013074:	4770      	bx	lr
 8013076:	bf00      	nop
 8013078:	08017a14 	.word	0x08017a14
 801307c:	08017a1c 	.word	0x08017a1c

08013080 <__NVIC_SetPriority>:
{
 8013080:	b480      	push	{r7}
 8013082:	b083      	sub	sp, #12
 8013084:	af00      	add	r7, sp, #0
 8013086:	4603      	mov	r3, r0
 8013088:	6039      	str	r1, [r7, #0]
 801308a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801308c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013090:	2b00      	cmp	r3, #0
 8013092:	db0a      	blt.n	80130aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013094:	683b      	ldr	r3, [r7, #0]
 8013096:	b2da      	uxtb	r2, r3
 8013098:	490c      	ldr	r1, [pc, #48]	; (80130cc <__NVIC_SetPriority+0x4c>)
 801309a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801309e:	0112      	lsls	r2, r2, #4
 80130a0:	b2d2      	uxtb	r2, r2
 80130a2:	440b      	add	r3, r1
 80130a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80130a8:	e00a      	b.n	80130c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80130aa:	683b      	ldr	r3, [r7, #0]
 80130ac:	b2da      	uxtb	r2, r3
 80130ae:	4908      	ldr	r1, [pc, #32]	; (80130d0 <__NVIC_SetPriority+0x50>)
 80130b0:	88fb      	ldrh	r3, [r7, #6]
 80130b2:	f003 030f 	and.w	r3, r3, #15
 80130b6:	3b04      	subs	r3, #4
 80130b8:	0112      	lsls	r2, r2, #4
 80130ba:	b2d2      	uxtb	r2, r2
 80130bc:	440b      	add	r3, r1
 80130be:	761a      	strb	r2, [r3, #24]
}
 80130c0:	bf00      	nop
 80130c2:	370c      	adds	r7, #12
 80130c4:	46bd      	mov	sp, r7
 80130c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ca:	4770      	bx	lr
 80130cc:	e000e100 	.word	0xe000e100
 80130d0:	e000ed00 	.word	0xe000ed00

080130d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80130d4:	b580      	push	{r7, lr}
 80130d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80130d8:	4b05      	ldr	r3, [pc, #20]	; (80130f0 <SysTick_Handler+0x1c>)
 80130da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80130dc:	f002 fc92 	bl	8015a04 <xTaskGetSchedulerState>
 80130e0:	4603      	mov	r3, r0
 80130e2:	2b01      	cmp	r3, #1
 80130e4:	d001      	beq.n	80130ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80130e6:	f003 faaf 	bl	8016648 <xPortSysTickHandler>
  }
}
 80130ea:	bf00      	nop
 80130ec:	bd80      	pop	{r7, pc}
 80130ee:	bf00      	nop
 80130f0:	e000e010 	.word	0xe000e010

080130f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80130f4:	b580      	push	{r7, lr}
 80130f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80130f8:	2100      	movs	r1, #0
 80130fa:	f06f 0004 	mvn.w	r0, #4
 80130fe:	f7ff ffbf 	bl	8013080 <__NVIC_SetPriority>
#endif
}
 8013102:	bf00      	nop
 8013104:	bd80      	pop	{r7, pc}
	...

08013108 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013108:	b480      	push	{r7}
 801310a:	b083      	sub	sp, #12
 801310c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801310e:	f3ef 8305 	mrs	r3, IPSR
 8013112:	603b      	str	r3, [r7, #0]
  return(result);
 8013114:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013116:	2b00      	cmp	r3, #0
 8013118:	d003      	beq.n	8013122 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801311a:	f06f 0305 	mvn.w	r3, #5
 801311e:	607b      	str	r3, [r7, #4]
 8013120:	e00c      	b.n	801313c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013122:	4b0a      	ldr	r3, [pc, #40]	; (801314c <osKernelInitialize+0x44>)
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d105      	bne.n	8013136 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801312a:	4b08      	ldr	r3, [pc, #32]	; (801314c <osKernelInitialize+0x44>)
 801312c:	2201      	movs	r2, #1
 801312e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013130:	2300      	movs	r3, #0
 8013132:	607b      	str	r3, [r7, #4]
 8013134:	e002      	b.n	801313c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8013136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801313a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801313c:	687b      	ldr	r3, [r7, #4]
}
 801313e:	4618      	mov	r0, r3
 8013140:	370c      	adds	r7, #12
 8013142:	46bd      	mov	sp, r7
 8013144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013148:	4770      	bx	lr
 801314a:	bf00      	nop
 801314c:	240010e8 	.word	0x240010e8

08013150 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013150:	b580      	push	{r7, lr}
 8013152:	b082      	sub	sp, #8
 8013154:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013156:	f3ef 8305 	mrs	r3, IPSR
 801315a:	603b      	str	r3, [r7, #0]
  return(result);
 801315c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801315e:	2b00      	cmp	r3, #0
 8013160:	d003      	beq.n	801316a <osKernelStart+0x1a>
    stat = osErrorISR;
 8013162:	f06f 0305 	mvn.w	r3, #5
 8013166:	607b      	str	r3, [r7, #4]
 8013168:	e010      	b.n	801318c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801316a:	4b0b      	ldr	r3, [pc, #44]	; (8013198 <osKernelStart+0x48>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	2b01      	cmp	r3, #1
 8013170:	d109      	bne.n	8013186 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013172:	f7ff ffbf 	bl	80130f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8013176:	4b08      	ldr	r3, [pc, #32]	; (8013198 <osKernelStart+0x48>)
 8013178:	2202      	movs	r2, #2
 801317a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801317c:	f001 ff54 	bl	8015028 <vTaskStartScheduler>
      stat = osOK;
 8013180:	2300      	movs	r3, #0
 8013182:	607b      	str	r3, [r7, #4]
 8013184:	e002      	b.n	801318c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8013186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801318a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801318c:	687b      	ldr	r3, [r7, #4]
}
 801318e:	4618      	mov	r0, r3
 8013190:	3708      	adds	r7, #8
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}
 8013196:	bf00      	nop
 8013198:	240010e8 	.word	0x240010e8

0801319c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801319c:	b580      	push	{r7, lr}
 801319e:	b08e      	sub	sp, #56	; 0x38
 80131a0:	af04      	add	r7, sp, #16
 80131a2:	60f8      	str	r0, [r7, #12]
 80131a4:	60b9      	str	r1, [r7, #8]
 80131a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80131a8:	2300      	movs	r3, #0
 80131aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131ac:	f3ef 8305 	mrs	r3, IPSR
 80131b0:	617b      	str	r3, [r7, #20]
  return(result);
 80131b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d17e      	bne.n	80132b6 <osThreadNew+0x11a>
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d07b      	beq.n	80132b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80131be:	2380      	movs	r3, #128	; 0x80
 80131c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80131c2:	2318      	movs	r3, #24
 80131c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80131c6:	2300      	movs	r3, #0
 80131c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80131ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d045      	beq.n	8013262 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d002      	beq.n	80131e4 <osThreadNew+0x48>
        name = attr->name;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	699b      	ldr	r3, [r3, #24]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d002      	beq.n	80131f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	699b      	ldr	r3, [r3, #24]
 80131f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80131f2:	69fb      	ldr	r3, [r7, #28]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d008      	beq.n	801320a <osThreadNew+0x6e>
 80131f8:	69fb      	ldr	r3, [r7, #28]
 80131fa:	2b38      	cmp	r3, #56	; 0x38
 80131fc:	d805      	bhi.n	801320a <osThreadNew+0x6e>
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	f003 0301 	and.w	r3, r3, #1
 8013206:	2b00      	cmp	r3, #0
 8013208:	d001      	beq.n	801320e <osThreadNew+0x72>
        return (NULL);
 801320a:	2300      	movs	r3, #0
 801320c:	e054      	b.n	80132b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	695b      	ldr	r3, [r3, #20]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d003      	beq.n	801321e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	695b      	ldr	r3, [r3, #20]
 801321a:	089b      	lsrs	r3, r3, #2
 801321c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	689b      	ldr	r3, [r3, #8]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d00e      	beq.n	8013244 <osThreadNew+0xa8>
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	68db      	ldr	r3, [r3, #12]
 801322a:	2b5b      	cmp	r3, #91	; 0x5b
 801322c:	d90a      	bls.n	8013244 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013232:	2b00      	cmp	r3, #0
 8013234:	d006      	beq.n	8013244 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	695b      	ldr	r3, [r3, #20]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d002      	beq.n	8013244 <osThreadNew+0xa8>
        mem = 1;
 801323e:	2301      	movs	r3, #1
 8013240:	61bb      	str	r3, [r7, #24]
 8013242:	e010      	b.n	8013266 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	689b      	ldr	r3, [r3, #8]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d10c      	bne.n	8013266 <osThreadNew+0xca>
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	68db      	ldr	r3, [r3, #12]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d108      	bne.n	8013266 <osThreadNew+0xca>
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	691b      	ldr	r3, [r3, #16]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d104      	bne.n	8013266 <osThreadNew+0xca>
          mem = 0;
 801325c:	2300      	movs	r3, #0
 801325e:	61bb      	str	r3, [r7, #24]
 8013260:	e001      	b.n	8013266 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8013262:	2300      	movs	r3, #0
 8013264:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013266:	69bb      	ldr	r3, [r7, #24]
 8013268:	2b01      	cmp	r3, #1
 801326a:	d110      	bne.n	801328e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8013270:	687a      	ldr	r2, [r7, #4]
 8013272:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013274:	9202      	str	r2, [sp, #8]
 8013276:	9301      	str	r3, [sp, #4]
 8013278:	69fb      	ldr	r3, [r7, #28]
 801327a:	9300      	str	r3, [sp, #0]
 801327c:	68bb      	ldr	r3, [r7, #8]
 801327e:	6a3a      	ldr	r2, [r7, #32]
 8013280:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013282:	68f8      	ldr	r0, [r7, #12]
 8013284:	f001 fbe0 	bl	8014a48 <xTaskCreateStatic>
 8013288:	4603      	mov	r3, r0
 801328a:	613b      	str	r3, [r7, #16]
 801328c:	e013      	b.n	80132b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801328e:	69bb      	ldr	r3, [r7, #24]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d110      	bne.n	80132b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013294:	6a3b      	ldr	r3, [r7, #32]
 8013296:	b29a      	uxth	r2, r3
 8013298:	f107 0310 	add.w	r3, r7, #16
 801329c:	9301      	str	r3, [sp, #4]
 801329e:	69fb      	ldr	r3, [r7, #28]
 80132a0:	9300      	str	r3, [sp, #0]
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80132a6:	68f8      	ldr	r0, [r7, #12]
 80132a8:	f001 fc2b 	bl	8014b02 <xTaskCreate>
 80132ac:	4603      	mov	r3, r0
 80132ae:	2b01      	cmp	r3, #1
 80132b0:	d001      	beq.n	80132b6 <osThreadNew+0x11a>
            hTask = NULL;
 80132b2:	2300      	movs	r3, #0
 80132b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80132b6:	693b      	ldr	r3, [r7, #16]
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3728      	adds	r7, #40	; 0x28
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}

080132c0 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80132c0:	b480      	push	{r7}
 80132c2:	b083      	sub	sp, #12
 80132c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132c6:	f3ef 8305 	mrs	r3, IPSR
 80132ca:	603b      	str	r3, [r7, #0]
  return(result);
 80132cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d003      	beq.n	80132da <osThreadYield+0x1a>
    stat = osErrorISR;
 80132d2:	f06f 0305 	mvn.w	r3, #5
 80132d6:	607b      	str	r3, [r7, #4]
 80132d8:	e009      	b.n	80132ee <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80132da:	2300      	movs	r3, #0
 80132dc:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80132de:	4b07      	ldr	r3, [pc, #28]	; (80132fc <osThreadYield+0x3c>)
 80132e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132e4:	601a      	str	r2, [r3, #0]
 80132e6:	f3bf 8f4f 	dsb	sy
 80132ea:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80132ee:	687b      	ldr	r3, [r7, #4]
}
 80132f0:	4618      	mov	r0, r3
 80132f2:	370c      	adds	r7, #12
 80132f4:	46bd      	mov	sp, r7
 80132f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132fa:	4770      	bx	lr
 80132fc:	e000ed04 	.word	0xe000ed04

08013300 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8013300:	b580      	push	{r7, lr}
 8013302:	b086      	sub	sp, #24
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801330c:	f3ef 8305 	mrs	r3, IPSR
 8013310:	60fb      	str	r3, [r7, #12]
  return(result);
 8013312:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013314:	2b00      	cmp	r3, #0
 8013316:	d003      	beq.n	8013320 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8013318:	f06f 0305 	mvn.w	r3, #5
 801331c:	617b      	str	r3, [r7, #20]
 801331e:	e00b      	b.n	8013338 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8013320:	693b      	ldr	r3, [r7, #16]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d103      	bne.n	801332e <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8013326:	f06f 0303 	mvn.w	r3, #3
 801332a:	617b      	str	r3, [r7, #20]
 801332c:	e004      	b.n	8013338 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 801332e:	2300      	movs	r3, #0
 8013330:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8013332:	6938      	ldr	r0, [r7, #16]
 8013334:	f001 fd5e 	bl	8014df4 <vTaskSuspend>
  }

  return (stat);
 8013338:	697b      	ldr	r3, [r7, #20]
}
 801333a:	4618      	mov	r0, r3
 801333c:	3718      	adds	r7, #24
 801333e:	46bd      	mov	sp, r7
 8013340:	bd80      	pop	{r7, pc}

08013342 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8013342:	b580      	push	{r7, lr}
 8013344:	b084      	sub	sp, #16
 8013346:	af00      	add	r7, sp, #0
 8013348:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801334a:	f3ef 8305 	mrs	r3, IPSR
 801334e:	60bb      	str	r3, [r7, #8]
  return(result);
 8013350:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013352:	2b00      	cmp	r3, #0
 8013354:	d003      	beq.n	801335e <osDelay+0x1c>
    stat = osErrorISR;
 8013356:	f06f 0305 	mvn.w	r3, #5
 801335a:	60fb      	str	r3, [r7, #12]
 801335c:	e007      	b.n	801336e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801335e:	2300      	movs	r3, #0
 8013360:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d002      	beq.n	801336e <osDelay+0x2c>
      vTaskDelay(ticks);
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f001 fd0f 	bl	8014d8c <vTaskDelay>
    }
  }

  return (stat);
 801336e:	68fb      	ldr	r3, [r7, #12]
}
 8013370:	4618      	mov	r0, r3
 8013372:	3710      	adds	r7, #16
 8013374:	46bd      	mov	sp, r7
 8013376:	bd80      	pop	{r7, pc}

08013378 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8013378:	b580      	push	{r7, lr}
 801337a:	b086      	sub	sp, #24
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8013380:	2300      	movs	r3, #0
 8013382:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013384:	f3ef 8305 	mrs	r3, IPSR
 8013388:	60fb      	str	r3, [r7, #12]
  return(result);
 801338a:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 801338c:	2b00      	cmp	r3, #0
 801338e:	d12d      	bne.n	80133ec <osEventFlagsNew+0x74>
    mem = -1;
 8013390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013394:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d015      	beq.n	80133c8 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	689b      	ldr	r3, [r3, #8]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d006      	beq.n	80133b2 <osEventFlagsNew+0x3a>
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	68db      	ldr	r3, [r3, #12]
 80133a8:	2b1f      	cmp	r3, #31
 80133aa:	d902      	bls.n	80133b2 <osEventFlagsNew+0x3a>
        mem = 1;
 80133ac:	2301      	movs	r3, #1
 80133ae:	613b      	str	r3, [r7, #16]
 80133b0:	e00c      	b.n	80133cc <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	689b      	ldr	r3, [r3, #8]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d108      	bne.n	80133cc <osEventFlagsNew+0x54>
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	68db      	ldr	r3, [r3, #12]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d104      	bne.n	80133cc <osEventFlagsNew+0x54>
          mem = 0;
 80133c2:	2300      	movs	r3, #0
 80133c4:	613b      	str	r3, [r7, #16]
 80133c6:	e001      	b.n	80133cc <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80133c8:	2300      	movs	r3, #0
 80133ca:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80133cc:	693b      	ldr	r3, [r7, #16]
 80133ce:	2b01      	cmp	r3, #1
 80133d0:	d106      	bne.n	80133e0 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	689b      	ldr	r3, [r3, #8]
 80133d6:	4618      	mov	r0, r3
 80133d8:	f000 fa70 	bl	80138bc <xEventGroupCreateStatic>
 80133dc:	6178      	str	r0, [r7, #20]
 80133de:	e005      	b.n	80133ec <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80133e0:	693b      	ldr	r3, [r7, #16]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d102      	bne.n	80133ec <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80133e6:	f000 faa0 	bl	801392a <xEventGroupCreate>
 80133ea:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80133ec:	697b      	ldr	r3, [r7, #20]
}
 80133ee:	4618      	mov	r0, r3
 80133f0:	3718      	adds	r7, #24
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}
	...

080133f8 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b086      	sub	sp, #24
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
 8013400:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d004      	beq.n	8013416 <osEventFlagsSet+0x1e>
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013412:	2b00      	cmp	r3, #0
 8013414:	d003      	beq.n	801341e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8013416:	f06f 0303 	mvn.w	r3, #3
 801341a:	617b      	str	r3, [r7, #20]
 801341c:	e028      	b.n	8013470 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801341e:	f3ef 8305 	mrs	r3, IPSR
 8013422:	60fb      	str	r3, [r7, #12]
  return(result);
 8013424:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013426:	2b00      	cmp	r3, #0
 8013428:	d01d      	beq.n	8013466 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801342a:	2300      	movs	r3, #0
 801342c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801342e:	f107 0308 	add.w	r3, r7, #8
 8013432:	461a      	mov	r2, r3
 8013434:	6839      	ldr	r1, [r7, #0]
 8013436:	6938      	ldr	r0, [r7, #16]
 8013438:	f000 fc98 	bl	8013d6c <xEventGroupSetBitsFromISR>
 801343c:	4603      	mov	r3, r0
 801343e:	2b00      	cmp	r3, #0
 8013440:	d103      	bne.n	801344a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8013442:	f06f 0302 	mvn.w	r3, #2
 8013446:	617b      	str	r3, [r7, #20]
 8013448:	e012      	b.n	8013470 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d00d      	beq.n	8013470 <osEventFlagsSet+0x78>
 8013454:	4b09      	ldr	r3, [pc, #36]	; (801347c <osEventFlagsSet+0x84>)
 8013456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801345a:	601a      	str	r2, [r3, #0]
 801345c:	f3bf 8f4f 	dsb	sy
 8013460:	f3bf 8f6f 	isb	sy
 8013464:	e004      	b.n	8013470 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8013466:	6839      	ldr	r1, [r7, #0]
 8013468:	6938      	ldr	r0, [r7, #16]
 801346a:	f000 fbb7 	bl	8013bdc <xEventGroupSetBits>
 801346e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013470:	697b      	ldr	r3, [r7, #20]
}
 8013472:	4618      	mov	r0, r3
 8013474:	3718      	adds	r7, #24
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}
 801347a:	bf00      	nop
 801347c:	e000ed04 	.word	0xe000ed04

08013480 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8013480:	b580      	push	{r7, lr}
 8013482:	b086      	sub	sp, #24
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
 8013488:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801348e:	693b      	ldr	r3, [r7, #16]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d004      	beq.n	801349e <osEventFlagsClear+0x1e>
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801349a:	2b00      	cmp	r3, #0
 801349c:	d003      	beq.n	80134a6 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 801349e:	f06f 0303 	mvn.w	r3, #3
 80134a2:	617b      	str	r3, [r7, #20]
 80134a4:	e019      	b.n	80134da <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134a6:	f3ef 8305 	mrs	r3, IPSR
 80134aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80134ac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d00e      	beq.n	80134d0 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80134b2:	6938      	ldr	r0, [r7, #16]
 80134b4:	f000 fb6e 	bl	8013b94 <xEventGroupGetBitsFromISR>
 80134b8:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80134ba:	6839      	ldr	r1, [r7, #0]
 80134bc:	6938      	ldr	r0, [r7, #16]
 80134be:	f000 fb55 	bl	8013b6c <xEventGroupClearBitsFromISR>
 80134c2:	4603      	mov	r3, r0
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d108      	bne.n	80134da <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80134c8:	f06f 0302 	mvn.w	r3, #2
 80134cc:	617b      	str	r3, [r7, #20]
 80134ce:	e004      	b.n	80134da <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80134d0:	6839      	ldr	r1, [r7, #0]
 80134d2:	6938      	ldr	r0, [r7, #16]
 80134d4:	f000 fb12 	bl	8013afc <xEventGroupClearBits>
 80134d8:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80134da:	697b      	ldr	r3, [r7, #20]
}
 80134dc:	4618      	mov	r0, r3
 80134de:	3718      	adds	r7, #24
 80134e0:	46bd      	mov	sp, r7
 80134e2:	bd80      	pop	{r7, pc}

080134e4 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b086      	sub	sp, #24
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d102      	bne.n	80134fc <osEventFlagsGet+0x18>
    rflags = 0U;
 80134f6:	2300      	movs	r3, #0
 80134f8:	617b      	str	r3, [r7, #20]
 80134fa:	e00f      	b.n	801351c <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134fc:	f3ef 8305 	mrs	r3, IPSR
 8013500:	60fb      	str	r3, [r7, #12]
  return(result);
 8013502:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013504:	2b00      	cmp	r3, #0
 8013506:	d004      	beq.n	8013512 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8013508:	6938      	ldr	r0, [r7, #16]
 801350a:	f000 fb43 	bl	8013b94 <xEventGroupGetBitsFromISR>
 801350e:	6178      	str	r0, [r7, #20]
 8013510:	e004      	b.n	801351c <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8013512:	2100      	movs	r1, #0
 8013514:	6938      	ldr	r0, [r7, #16]
 8013516:	f000 faf1 	bl	8013afc <xEventGroupClearBits>
 801351a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801351c:	697b      	ldr	r3, [r7, #20]
}
 801351e:	4618      	mov	r0, r3
 8013520:	3718      	adds	r7, #24
 8013522:	46bd      	mov	sp, r7
 8013524:	bd80      	pop	{r7, pc}

08013526 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8013526:	b580      	push	{r7, lr}
 8013528:	b08c      	sub	sp, #48	; 0x30
 801352a:	af02      	add	r7, sp, #8
 801352c:	60f8      	str	r0, [r7, #12]
 801352e:	60b9      	str	r1, [r7, #8]
 8013530:	607a      	str	r2, [r7, #4]
 8013532:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013538:	69bb      	ldr	r3, [r7, #24]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d004      	beq.n	8013548 <osEventFlagsWait+0x22>
 801353e:	68bb      	ldr	r3, [r7, #8]
 8013540:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013544:	2b00      	cmp	r3, #0
 8013546:	d003      	beq.n	8013550 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8013548:	f06f 0303 	mvn.w	r3, #3
 801354c:	61fb      	str	r3, [r7, #28]
 801354e:	e04b      	b.n	80135e8 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013550:	f3ef 8305 	mrs	r3, IPSR
 8013554:	617b      	str	r3, [r7, #20]
  return(result);
 8013556:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8013558:	2b00      	cmp	r3, #0
 801355a:	d003      	beq.n	8013564 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801355c:	f06f 0305 	mvn.w	r3, #5
 8013560:	61fb      	str	r3, [r7, #28]
 8013562:	e041      	b.n	80135e8 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	f003 0301 	and.w	r3, r3, #1
 801356a:	2b00      	cmp	r3, #0
 801356c:	d002      	beq.n	8013574 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801356e:	2301      	movs	r3, #1
 8013570:	627b      	str	r3, [r7, #36]	; 0x24
 8013572:	e001      	b.n	8013578 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8013574:	2300      	movs	r3, #0
 8013576:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	f003 0302 	and.w	r3, r3, #2
 801357e:	2b00      	cmp	r3, #0
 8013580:	d002      	beq.n	8013588 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8013582:	2300      	movs	r3, #0
 8013584:	623b      	str	r3, [r7, #32]
 8013586:	e001      	b.n	801358c <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8013588:	2301      	movs	r3, #1
 801358a:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	9300      	str	r3, [sp, #0]
 8013590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013592:	6a3a      	ldr	r2, [r7, #32]
 8013594:	68b9      	ldr	r1, [r7, #8]
 8013596:	69b8      	ldr	r0, [r7, #24]
 8013598:	f000 f9e2 	bl	8013960 <xEventGroupWaitBits>
 801359c:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f003 0301 	and.w	r3, r3, #1
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d010      	beq.n	80135ca <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80135a8:	68ba      	ldr	r2, [r7, #8]
 80135aa:	69fb      	ldr	r3, [r7, #28]
 80135ac:	4013      	ands	r3, r2
 80135ae:	68ba      	ldr	r2, [r7, #8]
 80135b0:	429a      	cmp	r2, r3
 80135b2:	d019      	beq.n	80135e8 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d003      	beq.n	80135c2 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80135ba:	f06f 0301 	mvn.w	r3, #1
 80135be:	61fb      	str	r3, [r7, #28]
 80135c0:	e012      	b.n	80135e8 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80135c2:	f06f 0302 	mvn.w	r3, #2
 80135c6:	61fb      	str	r3, [r7, #28]
 80135c8:	e00e      	b.n	80135e8 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80135ca:	68ba      	ldr	r2, [r7, #8]
 80135cc:	69fb      	ldr	r3, [r7, #28]
 80135ce:	4013      	ands	r3, r2
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d109      	bne.n	80135e8 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d003      	beq.n	80135e2 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80135da:	f06f 0301 	mvn.w	r3, #1
 80135de:	61fb      	str	r3, [r7, #28]
 80135e0:	e002      	b.n	80135e8 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80135e2:	f06f 0302 	mvn.w	r3, #2
 80135e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80135e8:	69fb      	ldr	r3, [r7, #28]
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	3728      	adds	r7, #40	; 0x28
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}

080135f2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80135f2:	b580      	push	{r7, lr}
 80135f4:	b08a      	sub	sp, #40	; 0x28
 80135f6:	af02      	add	r7, sp, #8
 80135f8:	60f8      	str	r0, [r7, #12]
 80135fa:	60b9      	str	r1, [r7, #8]
 80135fc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80135fe:	2300      	movs	r3, #0
 8013600:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013602:	f3ef 8305 	mrs	r3, IPSR
 8013606:	613b      	str	r3, [r7, #16]
  return(result);
 8013608:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801360a:	2b00      	cmp	r3, #0
 801360c:	d15f      	bne.n	80136ce <osMessageQueueNew+0xdc>
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d05c      	beq.n	80136ce <osMessageQueueNew+0xdc>
 8013614:	68bb      	ldr	r3, [r7, #8]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d059      	beq.n	80136ce <osMessageQueueNew+0xdc>
    mem = -1;
 801361a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801361e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d029      	beq.n	801367a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	689b      	ldr	r3, [r3, #8]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d012      	beq.n	8013654 <osMessageQueueNew+0x62>
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	68db      	ldr	r3, [r3, #12]
 8013632:	2b4f      	cmp	r3, #79	; 0x4f
 8013634:	d90e      	bls.n	8013654 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801363a:	2b00      	cmp	r3, #0
 801363c:	d00a      	beq.n	8013654 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	695a      	ldr	r2, [r3, #20]
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	68b9      	ldr	r1, [r7, #8]
 8013646:	fb01 f303 	mul.w	r3, r1, r3
 801364a:	429a      	cmp	r2, r3
 801364c:	d302      	bcc.n	8013654 <osMessageQueueNew+0x62>
        mem = 1;
 801364e:	2301      	movs	r3, #1
 8013650:	61bb      	str	r3, [r7, #24]
 8013652:	e014      	b.n	801367e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	689b      	ldr	r3, [r3, #8]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d110      	bne.n	801367e <osMessageQueueNew+0x8c>
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	68db      	ldr	r3, [r3, #12]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d10c      	bne.n	801367e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013668:	2b00      	cmp	r3, #0
 801366a:	d108      	bne.n	801367e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	695b      	ldr	r3, [r3, #20]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d104      	bne.n	801367e <osMessageQueueNew+0x8c>
          mem = 0;
 8013674:	2300      	movs	r3, #0
 8013676:	61bb      	str	r3, [r7, #24]
 8013678:	e001      	b.n	801367e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801367a:	2300      	movs	r3, #0
 801367c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801367e:	69bb      	ldr	r3, [r7, #24]
 8013680:	2b01      	cmp	r3, #1
 8013682:	d10b      	bne.n	801369c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	691a      	ldr	r2, [r3, #16]
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	689b      	ldr	r3, [r3, #8]
 801368c:	2100      	movs	r1, #0
 801368e:	9100      	str	r1, [sp, #0]
 8013690:	68b9      	ldr	r1, [r7, #8]
 8013692:	68f8      	ldr	r0, [r7, #12]
 8013694:	f000 fc9a 	bl	8013fcc <xQueueGenericCreateStatic>
 8013698:	61f8      	str	r0, [r7, #28]
 801369a:	e008      	b.n	80136ae <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801369c:	69bb      	ldr	r3, [r7, #24]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d105      	bne.n	80136ae <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80136a2:	2200      	movs	r2, #0
 80136a4:	68b9      	ldr	r1, [r7, #8]
 80136a6:	68f8      	ldr	r0, [r7, #12]
 80136a8:	f000 fd08 	bl	80140bc <xQueueGenericCreate>
 80136ac:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80136ae:	69fb      	ldr	r3, [r7, #28]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d00c      	beq.n	80136ce <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d003      	beq.n	80136c2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	617b      	str	r3, [r7, #20]
 80136c0:	e001      	b.n	80136c6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80136c2:	2300      	movs	r3, #0
 80136c4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80136c6:	6979      	ldr	r1, [r7, #20]
 80136c8:	69f8      	ldr	r0, [r7, #28]
 80136ca:	f001 f95f 	bl	801498c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80136ce:	69fb      	ldr	r3, [r7, #28]
}
 80136d0:	4618      	mov	r0, r3
 80136d2:	3720      	adds	r7, #32
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}

080136d8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80136d8:	b580      	push	{r7, lr}
 80136da:	b088      	sub	sp, #32
 80136dc:	af00      	add	r7, sp, #0
 80136de:	60f8      	str	r0, [r7, #12]
 80136e0:	60b9      	str	r1, [r7, #8]
 80136e2:	603b      	str	r3, [r7, #0]
 80136e4:	4613      	mov	r3, r2
 80136e6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80136ec:	2300      	movs	r3, #0
 80136ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80136f0:	f3ef 8305 	mrs	r3, IPSR
 80136f4:	617b      	str	r3, [r7, #20]
  return(result);
 80136f6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d028      	beq.n	801374e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80136fc:	69bb      	ldr	r3, [r7, #24]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d005      	beq.n	801370e <osMessageQueuePut+0x36>
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d002      	beq.n	801370e <osMessageQueuePut+0x36>
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d003      	beq.n	8013716 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801370e:	f06f 0303 	mvn.w	r3, #3
 8013712:	61fb      	str	r3, [r7, #28]
 8013714:	e038      	b.n	8013788 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8013716:	2300      	movs	r3, #0
 8013718:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801371a:	f107 0210 	add.w	r2, r7, #16
 801371e:	2300      	movs	r3, #0
 8013720:	68b9      	ldr	r1, [r7, #8]
 8013722:	69b8      	ldr	r0, [r7, #24]
 8013724:	f000 fe26 	bl	8014374 <xQueueGenericSendFromISR>
 8013728:	4603      	mov	r3, r0
 801372a:	2b01      	cmp	r3, #1
 801372c:	d003      	beq.n	8013736 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801372e:	f06f 0302 	mvn.w	r3, #2
 8013732:	61fb      	str	r3, [r7, #28]
 8013734:	e028      	b.n	8013788 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8013736:	693b      	ldr	r3, [r7, #16]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d025      	beq.n	8013788 <osMessageQueuePut+0xb0>
 801373c:	4b15      	ldr	r3, [pc, #84]	; (8013794 <osMessageQueuePut+0xbc>)
 801373e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013742:	601a      	str	r2, [r3, #0]
 8013744:	f3bf 8f4f 	dsb	sy
 8013748:	f3bf 8f6f 	isb	sy
 801374c:	e01c      	b.n	8013788 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801374e:	69bb      	ldr	r3, [r7, #24]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d002      	beq.n	801375a <osMessageQueuePut+0x82>
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d103      	bne.n	8013762 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801375a:	f06f 0303 	mvn.w	r3, #3
 801375e:	61fb      	str	r3, [r7, #28]
 8013760:	e012      	b.n	8013788 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013762:	2300      	movs	r3, #0
 8013764:	683a      	ldr	r2, [r7, #0]
 8013766:	68b9      	ldr	r1, [r7, #8]
 8013768:	69b8      	ldr	r0, [r7, #24]
 801376a:	f000 fd05 	bl	8014178 <xQueueGenericSend>
 801376e:	4603      	mov	r3, r0
 8013770:	2b01      	cmp	r3, #1
 8013772:	d009      	beq.n	8013788 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8013774:	683b      	ldr	r3, [r7, #0]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d003      	beq.n	8013782 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801377a:	f06f 0301 	mvn.w	r3, #1
 801377e:	61fb      	str	r3, [r7, #28]
 8013780:	e002      	b.n	8013788 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8013782:	f06f 0302 	mvn.w	r3, #2
 8013786:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013788:	69fb      	ldr	r3, [r7, #28]
}
 801378a:	4618      	mov	r0, r3
 801378c:	3720      	adds	r7, #32
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}
 8013792:	bf00      	nop
 8013794:	e000ed04 	.word	0xe000ed04

08013798 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013798:	b580      	push	{r7, lr}
 801379a:	b088      	sub	sp, #32
 801379c:	af00      	add	r7, sp, #0
 801379e:	60f8      	str	r0, [r7, #12]
 80137a0:	60b9      	str	r1, [r7, #8]
 80137a2:	607a      	str	r2, [r7, #4]
 80137a4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80137aa:	2300      	movs	r3, #0
 80137ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80137ae:	f3ef 8305 	mrs	r3, IPSR
 80137b2:	617b      	str	r3, [r7, #20]
  return(result);
 80137b4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d028      	beq.n	801380c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80137ba:	69bb      	ldr	r3, [r7, #24]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d005      	beq.n	80137cc <osMessageQueueGet+0x34>
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d002      	beq.n	80137cc <osMessageQueueGet+0x34>
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d003      	beq.n	80137d4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80137cc:	f06f 0303 	mvn.w	r3, #3
 80137d0:	61fb      	str	r3, [r7, #28]
 80137d2:	e037      	b.n	8013844 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80137d4:	2300      	movs	r3, #0
 80137d6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80137d8:	f107 0310 	add.w	r3, r7, #16
 80137dc:	461a      	mov	r2, r3
 80137de:	68b9      	ldr	r1, [r7, #8]
 80137e0:	69b8      	ldr	r0, [r7, #24]
 80137e2:	f000 ff43 	bl	801466c <xQueueReceiveFromISR>
 80137e6:	4603      	mov	r3, r0
 80137e8:	2b01      	cmp	r3, #1
 80137ea:	d003      	beq.n	80137f4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80137ec:	f06f 0302 	mvn.w	r3, #2
 80137f0:	61fb      	str	r3, [r7, #28]
 80137f2:	e027      	b.n	8013844 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80137f4:	693b      	ldr	r3, [r7, #16]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d024      	beq.n	8013844 <osMessageQueueGet+0xac>
 80137fa:	4b15      	ldr	r3, [pc, #84]	; (8013850 <osMessageQueueGet+0xb8>)
 80137fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013800:	601a      	str	r2, [r3, #0]
 8013802:	f3bf 8f4f 	dsb	sy
 8013806:	f3bf 8f6f 	isb	sy
 801380a:	e01b      	b.n	8013844 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801380c:	69bb      	ldr	r3, [r7, #24]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d002      	beq.n	8013818 <osMessageQueueGet+0x80>
 8013812:	68bb      	ldr	r3, [r7, #8]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d103      	bne.n	8013820 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8013818:	f06f 0303 	mvn.w	r3, #3
 801381c:	61fb      	str	r3, [r7, #28]
 801381e:	e011      	b.n	8013844 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013820:	683a      	ldr	r2, [r7, #0]
 8013822:	68b9      	ldr	r1, [r7, #8]
 8013824:	69b8      	ldr	r0, [r7, #24]
 8013826:	f000 fe41 	bl	80144ac <xQueueReceive>
 801382a:	4603      	mov	r3, r0
 801382c:	2b01      	cmp	r3, #1
 801382e:	d009      	beq.n	8013844 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d003      	beq.n	801383e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8013836:	f06f 0301 	mvn.w	r3, #1
 801383a:	61fb      	str	r3, [r7, #28]
 801383c:	e002      	b.n	8013844 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801383e:	f06f 0302 	mvn.w	r3, #2
 8013842:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013844:	69fb      	ldr	r3, [r7, #28]
}
 8013846:	4618      	mov	r0, r3
 8013848:	3720      	adds	r7, #32
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}
 801384e:	bf00      	nop
 8013850:	e000ed04 	.word	0xe000ed04

08013854 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013854:	b480      	push	{r7}
 8013856:	b085      	sub	sp, #20
 8013858:	af00      	add	r7, sp, #0
 801385a:	60f8      	str	r0, [r7, #12]
 801385c:	60b9      	str	r1, [r7, #8]
 801385e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	4a07      	ldr	r2, [pc, #28]	; (8013880 <vApplicationGetIdleTaskMemory+0x2c>)
 8013864:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013866:	68bb      	ldr	r3, [r7, #8]
 8013868:	4a06      	ldr	r2, [pc, #24]	; (8013884 <vApplicationGetIdleTaskMemory+0x30>)
 801386a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	2280      	movs	r2, #128	; 0x80
 8013870:	601a      	str	r2, [r3, #0]
}
 8013872:	bf00      	nop
 8013874:	3714      	adds	r7, #20
 8013876:	46bd      	mov	sp, r7
 8013878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387c:	4770      	bx	lr
 801387e:	bf00      	nop
 8013880:	240010ec 	.word	0x240010ec
 8013884:	24001148 	.word	0x24001148

08013888 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013888:	b480      	push	{r7}
 801388a:	b085      	sub	sp, #20
 801388c:	af00      	add	r7, sp, #0
 801388e:	60f8      	str	r0, [r7, #12]
 8013890:	60b9      	str	r1, [r7, #8]
 8013892:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	4a07      	ldr	r2, [pc, #28]	; (80138b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8013898:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	4a06      	ldr	r2, [pc, #24]	; (80138b8 <vApplicationGetTimerTaskMemory+0x30>)
 801389e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80138a6:	601a      	str	r2, [r3, #0]
}
 80138a8:	bf00      	nop
 80138aa:	3714      	adds	r7, #20
 80138ac:	46bd      	mov	sp, r7
 80138ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b2:	4770      	bx	lr
 80138b4:	24001348 	.word	0x24001348
 80138b8:	240013a4 	.word	0x240013a4

080138bc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b086      	sub	sp, #24
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d10a      	bne.n	80138e0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80138ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ce:	f383 8811 	msr	BASEPRI, r3
 80138d2:	f3bf 8f6f 	isb	sy
 80138d6:	f3bf 8f4f 	dsb	sy
 80138da:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80138dc:	bf00      	nop
 80138de:	e7fe      	b.n	80138de <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80138e0:	2320      	movs	r3, #32
 80138e2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	2b20      	cmp	r3, #32
 80138e8:	d00a      	beq.n	8013900 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80138ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ee:	f383 8811 	msr	BASEPRI, r3
 80138f2:	f3bf 8f6f 	isb	sy
 80138f6:	f3bf 8f4f 	dsb	sy
 80138fa:	60fb      	str	r3, [r7, #12]
}
 80138fc:	bf00      	nop
 80138fe:	e7fe      	b.n	80138fe <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013904:	697b      	ldr	r3, [r7, #20]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d00a      	beq.n	8013920 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801390a:	697b      	ldr	r3, [r7, #20]
 801390c:	2200      	movs	r2, #0
 801390e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013910:	697b      	ldr	r3, [r7, #20]
 8013912:	3304      	adds	r3, #4
 8013914:	4618      	mov	r0, r3
 8013916:	f000 fa3d 	bl	8013d94 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801391a:	697b      	ldr	r3, [r7, #20]
 801391c:	2201      	movs	r2, #1
 801391e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8013920:	697b      	ldr	r3, [r7, #20]
	}
 8013922:	4618      	mov	r0, r3
 8013924:	3718      	adds	r7, #24
 8013926:	46bd      	mov	sp, r7
 8013928:	bd80      	pop	{r7, pc}

0801392a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801392a:	b580      	push	{r7, lr}
 801392c:	b082      	sub	sp, #8
 801392e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8013930:	2020      	movs	r0, #32
 8013932:	f002 ff19 	bl	8016768 <pvPortMalloc>
 8013936:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d00a      	beq.n	8013954 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	2200      	movs	r2, #0
 8013942:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	3304      	adds	r3, #4
 8013948:	4618      	mov	r0, r3
 801394a:	f000 fa23 	bl	8013d94 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	2200      	movs	r2, #0
 8013952:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013954:	687b      	ldr	r3, [r7, #4]
	}
 8013956:	4618      	mov	r0, r3
 8013958:	3708      	adds	r7, #8
 801395a:	46bd      	mov	sp, r7
 801395c:	bd80      	pop	{r7, pc}
	...

08013960 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b090      	sub	sp, #64	; 0x40
 8013964:	af00      	add	r7, sp, #0
 8013966:	60f8      	str	r0, [r7, #12]
 8013968:	60b9      	str	r1, [r7, #8]
 801396a:	607a      	str	r2, [r7, #4]
 801396c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8013972:	2300      	movs	r3, #0
 8013974:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8013976:	2300      	movs	r3, #0
 8013978:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d10a      	bne.n	8013996 <xEventGroupWaitBits+0x36>
	__asm volatile
 8013980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013984:	f383 8811 	msr	BASEPRI, r3
 8013988:	f3bf 8f6f 	isb	sy
 801398c:	f3bf 8f4f 	dsb	sy
 8013990:	623b      	str	r3, [r7, #32]
}
 8013992:	bf00      	nop
 8013994:	e7fe      	b.n	8013994 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013996:	68bb      	ldr	r3, [r7, #8]
 8013998:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801399c:	2b00      	cmp	r3, #0
 801399e:	d00a      	beq.n	80139b6 <xEventGroupWaitBits+0x56>
	__asm volatile
 80139a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139a4:	f383 8811 	msr	BASEPRI, r3
 80139a8:	f3bf 8f6f 	isb	sy
 80139ac:	f3bf 8f4f 	dsb	sy
 80139b0:	61fb      	str	r3, [r7, #28]
}
 80139b2:	bf00      	nop
 80139b4:	e7fe      	b.n	80139b4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80139b6:	68bb      	ldr	r3, [r7, #8]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d10a      	bne.n	80139d2 <xEventGroupWaitBits+0x72>
	__asm volatile
 80139bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139c0:	f383 8811 	msr	BASEPRI, r3
 80139c4:	f3bf 8f6f 	isb	sy
 80139c8:	f3bf 8f4f 	dsb	sy
 80139cc:	61bb      	str	r3, [r7, #24]
}
 80139ce:	bf00      	nop
 80139d0:	e7fe      	b.n	80139d0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80139d2:	f002 f817 	bl	8015a04 <xTaskGetSchedulerState>
 80139d6:	4603      	mov	r3, r0
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d102      	bne.n	80139e2 <xEventGroupWaitBits+0x82>
 80139dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d101      	bne.n	80139e6 <xEventGroupWaitBits+0x86>
 80139e2:	2301      	movs	r3, #1
 80139e4:	e000      	b.n	80139e8 <xEventGroupWaitBits+0x88>
 80139e6:	2300      	movs	r3, #0
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d10a      	bne.n	8013a02 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80139ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139f0:	f383 8811 	msr	BASEPRI, r3
 80139f4:	f3bf 8f6f 	isb	sy
 80139f8:	f3bf 8f4f 	dsb	sy
 80139fc:	617b      	str	r3, [r7, #20]
}
 80139fe:	bf00      	nop
 8013a00:	e7fe      	b.n	8013a00 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013a02:	f001 fb77 	bl	80150f4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013a0c:	683a      	ldr	r2, [r7, #0]
 8013a0e:	68b9      	ldr	r1, [r7, #8]
 8013a10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013a12:	f000 f988 	bl	8013d26 <prvTestWaitCondition>
 8013a16:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d00e      	beq.n	8013a3c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a20:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013a22:	2300      	movs	r3, #0
 8013a24:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d028      	beq.n	8013a7e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a2e:	681a      	ldr	r2, [r3, #0]
 8013a30:	68bb      	ldr	r3, [r7, #8]
 8013a32:	43db      	mvns	r3, r3
 8013a34:	401a      	ands	r2, r3
 8013a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a38:	601a      	str	r2, [r3, #0]
 8013a3a:	e020      	b.n	8013a7e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d104      	bne.n	8013a4c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a44:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013a46:	2301      	movs	r3, #1
 8013a48:	633b      	str	r3, [r7, #48]	; 0x30
 8013a4a:	e018      	b.n	8013a7e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d003      	beq.n	8013a5a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013a58:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8013a5a:	683b      	ldr	r3, [r7, #0]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d003      	beq.n	8013a68 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013a66:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a6a:	1d18      	adds	r0, r3, #4
 8013a6c:	68ba      	ldr	r2, [r7, #8]
 8013a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a70:	4313      	orrs	r3, r2
 8013a72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a74:	4619      	mov	r1, r3
 8013a76:	f001 fd3d 	bl	80154f4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013a7e:	f001 fb47 	bl	8015110 <xTaskResumeAll>
 8013a82:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d031      	beq.n	8013aee <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8013a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d107      	bne.n	8013aa0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013a90:	4b19      	ldr	r3, [pc, #100]	; (8013af8 <xEventGroupWaitBits+0x198>)
 8013a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a96:	601a      	str	r2, [r3, #0]
 8013a98:	f3bf 8f4f 	dsb	sy
 8013a9c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013aa0:	f002 f83c 	bl	8015b1c <uxTaskResetEventItemValue>
 8013aa4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d11a      	bne.n	8013ae6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013ab0:	f002 fd38 	bl	8016524 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8013aba:	683a      	ldr	r2, [r7, #0]
 8013abc:	68b9      	ldr	r1, [r7, #8]
 8013abe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013ac0:	f000 f931 	bl	8013d26 <prvTestWaitCondition>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d009      	beq.n	8013ade <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d006      	beq.n	8013ade <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ad2:	681a      	ldr	r2, [r3, #0]
 8013ad4:	68bb      	ldr	r3, [r7, #8]
 8013ad6:	43db      	mvns	r3, r3
 8013ad8:	401a      	ands	r2, r3
 8013ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013adc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013ade:	2301      	movs	r3, #1
 8013ae0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013ae2:	f002 fd4f 	bl	8016584 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ae8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013aec:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	3740      	adds	r7, #64	; 0x40
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}
 8013af8:	e000ed04 	.word	0xe000ed04

08013afc <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b086      	sub	sp, #24
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
 8013b04:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d10a      	bne.n	8013b26 <xEventGroupClearBits+0x2a>
	__asm volatile
 8013b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b14:	f383 8811 	msr	BASEPRI, r3
 8013b18:	f3bf 8f6f 	isb	sy
 8013b1c:	f3bf 8f4f 	dsb	sy
 8013b20:	60fb      	str	r3, [r7, #12]
}
 8013b22:	bf00      	nop
 8013b24:	e7fe      	b.n	8013b24 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d00a      	beq.n	8013b46 <xEventGroupClearBits+0x4a>
	__asm volatile
 8013b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b34:	f383 8811 	msr	BASEPRI, r3
 8013b38:	f3bf 8f6f 	isb	sy
 8013b3c:	f3bf 8f4f 	dsb	sy
 8013b40:	60bb      	str	r3, [r7, #8]
}
 8013b42:	bf00      	nop
 8013b44:	e7fe      	b.n	8013b44 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8013b46:	f002 fced 	bl	8016524 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8013b4a:	697b      	ldr	r3, [r7, #20]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	681a      	ldr	r2, [r3, #0]
 8013b54:	683b      	ldr	r3, [r7, #0]
 8013b56:	43db      	mvns	r3, r3
 8013b58:	401a      	ands	r2, r3
 8013b5a:	697b      	ldr	r3, [r7, #20]
 8013b5c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8013b5e:	f002 fd11 	bl	8016584 <vPortExitCritical>

	return uxReturn;
 8013b62:	693b      	ldr	r3, [r7, #16]
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3718      	adds	r7, #24
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}

08013b6c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b084      	sub	sp, #16
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
 8013b74:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013b76:	2300      	movs	r3, #0
 8013b78:	683a      	ldr	r2, [r7, #0]
 8013b7a:	6879      	ldr	r1, [r7, #4]
 8013b7c:	4804      	ldr	r0, [pc, #16]	; (8013b90 <xEventGroupClearBitsFromISR+0x24>)
 8013b7e:	f002 fb87 	bl	8016290 <xTimerPendFunctionCallFromISR>
 8013b82:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8013b84:	68fb      	ldr	r3, [r7, #12]
	}
 8013b86:	4618      	mov	r0, r3
 8013b88:	3710      	adds	r7, #16
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}
 8013b8e:	bf00      	nop
 8013b90:	08013d0d 	.word	0x08013d0d

08013b94 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8013b94:	b480      	push	{r7}
 8013b96:	b089      	sub	sp, #36	; 0x24
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013ba0:	f3ef 8211 	mrs	r2, BASEPRI
 8013ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba8:	f383 8811 	msr	BASEPRI, r3
 8013bac:	f3bf 8f6f 	isb	sy
 8013bb0:	f3bf 8f4f 	dsb	sy
 8013bb4:	60fa      	str	r2, [r7, #12]
 8013bb6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013bb8:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013bba:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8013bbc:	69fb      	ldr	r3, [r7, #28]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	617b      	str	r3, [r7, #20]
 8013bc2:	69bb      	ldr	r3, [r7, #24]
 8013bc4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013bc6:	693b      	ldr	r3, [r7, #16]
 8013bc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013bcc:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8013bce:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	3724      	adds	r7, #36	; 0x24
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bda:	4770      	bx	lr

08013bdc <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013bdc:	b580      	push	{r7, lr}
 8013bde:	b08e      	sub	sp, #56	; 0x38
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
 8013be4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013be6:	2300      	movs	r3, #0
 8013be8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013bee:	2300      	movs	r3, #0
 8013bf0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d10a      	bne.n	8013c0e <xEventGroupSetBits+0x32>
	__asm volatile
 8013bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bfc:	f383 8811 	msr	BASEPRI, r3
 8013c00:	f3bf 8f6f 	isb	sy
 8013c04:	f3bf 8f4f 	dsb	sy
 8013c08:	613b      	str	r3, [r7, #16]
}
 8013c0a:	bf00      	nop
 8013c0c:	e7fe      	b.n	8013c0c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013c0e:	683b      	ldr	r3, [r7, #0]
 8013c10:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d00a      	beq.n	8013c2e <xEventGroupSetBits+0x52>
	__asm volatile
 8013c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c1c:	f383 8811 	msr	BASEPRI, r3
 8013c20:	f3bf 8f6f 	isb	sy
 8013c24:	f3bf 8f4f 	dsb	sy
 8013c28:	60fb      	str	r3, [r7, #12]
}
 8013c2a:	bf00      	nop
 8013c2c:	e7fe      	b.n	8013c2c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c30:	3304      	adds	r3, #4
 8013c32:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c36:	3308      	adds	r3, #8
 8013c38:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013c3a:	f001 fa5b 	bl	80150f4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c40:	68db      	ldr	r3, [r3, #12]
 8013c42:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c46:	681a      	ldr	r2, [r3, #0]
 8013c48:	683b      	ldr	r3, [r7, #0]
 8013c4a:	431a      	orrs	r2, r3
 8013c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c4e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013c50:	e03c      	b.n	8013ccc <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c54:	685b      	ldr	r3, [r3, #4]
 8013c56:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013c5e:	2300      	movs	r3, #0
 8013c60:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013c62:	69bb      	ldr	r3, [r7, #24]
 8013c64:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013c68:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013c6a:	69bb      	ldr	r3, [r7, #24]
 8013c6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013c70:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013c72:	697b      	ldr	r3, [r7, #20]
 8013c74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d108      	bne.n	8013c8e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c7e:	681a      	ldr	r2, [r3, #0]
 8013c80:	69bb      	ldr	r3, [r7, #24]
 8013c82:	4013      	ands	r3, r2
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d00b      	beq.n	8013ca0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013c88:	2301      	movs	r3, #1
 8013c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c8c:	e008      	b.n	8013ca0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c90:	681a      	ldr	r2, [r3, #0]
 8013c92:	69bb      	ldr	r3, [r7, #24]
 8013c94:	4013      	ands	r3, r2
 8013c96:	69ba      	ldr	r2, [r7, #24]
 8013c98:	429a      	cmp	r2, r3
 8013c9a:	d101      	bne.n	8013ca0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013c9c:	2301      	movs	r3, #1
 8013c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d010      	beq.n	8013cc8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013ca6:	697b      	ldr	r3, [r7, #20]
 8013ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d003      	beq.n	8013cb8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cb2:	69bb      	ldr	r3, [r7, #24]
 8013cb4:	4313      	orrs	r3, r2
 8013cb6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013cc0:	4619      	mov	r1, r3
 8013cc2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013cc4:	f001 fce2 	bl	801568c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013cc8:	69fb      	ldr	r3, [r7, #28]
 8013cca:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013ccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013cce:	6a3b      	ldr	r3, [r7, #32]
 8013cd0:	429a      	cmp	r2, r3
 8013cd2:	d1be      	bne.n	8013c52 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd6:	681a      	ldr	r2, [r3, #0]
 8013cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cda:	43db      	mvns	r3, r3
 8013cdc:	401a      	ands	r2, r3
 8013cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013ce2:	f001 fa15 	bl	8015110 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8013ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce8:	681b      	ldr	r3, [r3, #0]
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	3738      	adds	r7, #56	; 0x38
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}

08013cf2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013cf2:	b580      	push	{r7, lr}
 8013cf4:	b082      	sub	sp, #8
 8013cf6:	af00      	add	r7, sp, #0
 8013cf8:	6078      	str	r0, [r7, #4]
 8013cfa:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013cfc:	6839      	ldr	r1, [r7, #0]
 8013cfe:	6878      	ldr	r0, [r7, #4]
 8013d00:	f7ff ff6c 	bl	8013bdc <xEventGroupSetBits>
}
 8013d04:	bf00      	nop
 8013d06:	3708      	adds	r7, #8
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}

08013d0c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b082      	sub	sp, #8
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
 8013d14:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013d16:	6839      	ldr	r1, [r7, #0]
 8013d18:	6878      	ldr	r0, [r7, #4]
 8013d1a:	f7ff feef 	bl	8013afc <xEventGroupClearBits>
}
 8013d1e:	bf00      	nop
 8013d20:	3708      	adds	r7, #8
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bd80      	pop	{r7, pc}

08013d26 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013d26:	b480      	push	{r7}
 8013d28:	b087      	sub	sp, #28
 8013d2a:	af00      	add	r7, sp, #0
 8013d2c:	60f8      	str	r0, [r7, #12]
 8013d2e:	60b9      	str	r1, [r7, #8]
 8013d30:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8013d32:	2300      	movs	r3, #0
 8013d34:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d107      	bne.n	8013d4c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013d3c:	68fa      	ldr	r2, [r7, #12]
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	4013      	ands	r3, r2
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d00a      	beq.n	8013d5c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013d46:	2301      	movs	r3, #1
 8013d48:	617b      	str	r3, [r7, #20]
 8013d4a:	e007      	b.n	8013d5c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013d4c:	68fa      	ldr	r2, [r7, #12]
 8013d4e:	68bb      	ldr	r3, [r7, #8]
 8013d50:	4013      	ands	r3, r2
 8013d52:	68ba      	ldr	r2, [r7, #8]
 8013d54:	429a      	cmp	r2, r3
 8013d56:	d101      	bne.n	8013d5c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013d58:	2301      	movs	r3, #1
 8013d5a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013d5c:	697b      	ldr	r3, [r7, #20]
}
 8013d5e:	4618      	mov	r0, r3
 8013d60:	371c      	adds	r7, #28
 8013d62:	46bd      	mov	sp, r7
 8013d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d68:	4770      	bx	lr
	...

08013d6c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b086      	sub	sp, #24
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	60f8      	str	r0, [r7, #12]
 8013d74:	60b9      	str	r1, [r7, #8]
 8013d76:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	68ba      	ldr	r2, [r7, #8]
 8013d7c:	68f9      	ldr	r1, [r7, #12]
 8013d7e:	4804      	ldr	r0, [pc, #16]	; (8013d90 <xEventGroupSetBitsFromISR+0x24>)
 8013d80:	f002 fa86 	bl	8016290 <xTimerPendFunctionCallFromISR>
 8013d84:	6178      	str	r0, [r7, #20]

		return xReturn;
 8013d86:	697b      	ldr	r3, [r7, #20]
	}
 8013d88:	4618      	mov	r0, r3
 8013d8a:	3718      	adds	r7, #24
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	bd80      	pop	{r7, pc}
 8013d90:	08013cf3 	.word	0x08013cf3

08013d94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013d94:	b480      	push	{r7}
 8013d96:	b083      	sub	sp, #12
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	f103 0208 	add.w	r2, r3, #8
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013dac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	f103 0208 	add.w	r2, r3, #8
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	f103 0208 	add.w	r2, r3, #8
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013dc8:	bf00      	nop
 8013dca:	370c      	adds	r7, #12
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd2:	4770      	bx	lr

08013dd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013dd4:	b480      	push	{r7}
 8013dd6:	b083      	sub	sp, #12
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	2200      	movs	r2, #0
 8013de0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013de2:	bf00      	nop
 8013de4:	370c      	adds	r7, #12
 8013de6:	46bd      	mov	sp, r7
 8013de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dec:	4770      	bx	lr

08013dee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013dee:	b480      	push	{r7}
 8013df0:	b085      	sub	sp, #20
 8013df2:	af00      	add	r7, sp, #0
 8013df4:	6078      	str	r0, [r7, #4]
 8013df6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	685b      	ldr	r3, [r3, #4]
 8013dfc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	68fa      	ldr	r2, [r7, #12]
 8013e02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	689a      	ldr	r2, [r3, #8]
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	689b      	ldr	r3, [r3, #8]
 8013e10:	683a      	ldr	r2, [r7, #0]
 8013e12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	683a      	ldr	r2, [r7, #0]
 8013e18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	687a      	ldr	r2, [r7, #4]
 8013e1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	1c5a      	adds	r2, r3, #1
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	601a      	str	r2, [r3, #0]
}
 8013e2a:	bf00      	nop
 8013e2c:	3714      	adds	r7, #20
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e34:	4770      	bx	lr

08013e36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013e36:	b480      	push	{r7}
 8013e38:	b085      	sub	sp, #20
 8013e3a:	af00      	add	r7, sp, #0
 8013e3c:	6078      	str	r0, [r7, #4]
 8013e3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013e46:	68bb      	ldr	r3, [r7, #8]
 8013e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e4c:	d103      	bne.n	8013e56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	691b      	ldr	r3, [r3, #16]
 8013e52:	60fb      	str	r3, [r7, #12]
 8013e54:	e00c      	b.n	8013e70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	3308      	adds	r3, #8
 8013e5a:	60fb      	str	r3, [r7, #12]
 8013e5c:	e002      	b.n	8013e64 <vListInsert+0x2e>
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	685b      	ldr	r3, [r3, #4]
 8013e62:	60fb      	str	r3, [r7, #12]
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	685b      	ldr	r3, [r3, #4]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	68ba      	ldr	r2, [r7, #8]
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	d2f6      	bcs.n	8013e5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	685a      	ldr	r2, [r3, #4]
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013e78:	683b      	ldr	r3, [r7, #0]
 8013e7a:	685b      	ldr	r3, [r3, #4]
 8013e7c:	683a      	ldr	r2, [r7, #0]
 8013e7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013e80:	683b      	ldr	r3, [r7, #0]
 8013e82:	68fa      	ldr	r2, [r7, #12]
 8013e84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	683a      	ldr	r2, [r7, #0]
 8013e8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013e8c:	683b      	ldr	r3, [r7, #0]
 8013e8e:	687a      	ldr	r2, [r7, #4]
 8013e90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	1c5a      	adds	r2, r3, #1
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	601a      	str	r2, [r3, #0]
}
 8013e9c:	bf00      	nop
 8013e9e:	3714      	adds	r7, #20
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea6:	4770      	bx	lr

08013ea8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013ea8:	b480      	push	{r7}
 8013eaa:	b085      	sub	sp, #20
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	691b      	ldr	r3, [r3, #16]
 8013eb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	685b      	ldr	r3, [r3, #4]
 8013eba:	687a      	ldr	r2, [r7, #4]
 8013ebc:	6892      	ldr	r2, [r2, #8]
 8013ebe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	689b      	ldr	r3, [r3, #8]
 8013ec4:	687a      	ldr	r2, [r7, #4]
 8013ec6:	6852      	ldr	r2, [r2, #4]
 8013ec8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	685b      	ldr	r3, [r3, #4]
 8013ece:	687a      	ldr	r2, [r7, #4]
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d103      	bne.n	8013edc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	689a      	ldr	r2, [r3, #8]
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	2200      	movs	r2, #0
 8013ee0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	1e5a      	subs	r2, r3, #1
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	681b      	ldr	r3, [r3, #0]
}
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	3714      	adds	r7, #20
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efa:	4770      	bx	lr

08013efc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b084      	sub	sp, #16
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
 8013f04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d10a      	bne.n	8013f26 <xQueueGenericReset+0x2a>
	__asm volatile
 8013f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f14:	f383 8811 	msr	BASEPRI, r3
 8013f18:	f3bf 8f6f 	isb	sy
 8013f1c:	f3bf 8f4f 	dsb	sy
 8013f20:	60bb      	str	r3, [r7, #8]
}
 8013f22:	bf00      	nop
 8013f24:	e7fe      	b.n	8013f24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013f26:	f002 fafd 	bl	8016524 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	681a      	ldr	r2, [r3, #0]
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f32:	68f9      	ldr	r1, [r7, #12]
 8013f34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013f36:	fb01 f303 	mul.w	r3, r1, r3
 8013f3a:	441a      	add	r2, r3
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	2200      	movs	r2, #0
 8013f44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	681a      	ldr	r2, [r3, #0]
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	681a      	ldr	r2, [r3, #0]
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f56:	3b01      	subs	r3, #1
 8013f58:	68f9      	ldr	r1, [r7, #12]
 8013f5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013f5c:	fb01 f303 	mul.w	r3, r1, r3
 8013f60:	441a      	add	r2, r3
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	22ff      	movs	r2, #255	; 0xff
 8013f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	22ff      	movs	r2, #255	; 0xff
 8013f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d114      	bne.n	8013fa6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	691b      	ldr	r3, [r3, #16]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d01a      	beq.n	8013fba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	3310      	adds	r3, #16
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f001 fb1b 	bl	80155c4 <xTaskRemoveFromEventList>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d012      	beq.n	8013fba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013f94:	4b0c      	ldr	r3, [pc, #48]	; (8013fc8 <xQueueGenericReset+0xcc>)
 8013f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f9a:	601a      	str	r2, [r3, #0]
 8013f9c:	f3bf 8f4f 	dsb	sy
 8013fa0:	f3bf 8f6f 	isb	sy
 8013fa4:	e009      	b.n	8013fba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	3310      	adds	r3, #16
 8013faa:	4618      	mov	r0, r3
 8013fac:	f7ff fef2 	bl	8013d94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	3324      	adds	r3, #36	; 0x24
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f7ff feed 	bl	8013d94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013fba:	f002 fae3 	bl	8016584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013fbe:	2301      	movs	r3, #1
}
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	3710      	adds	r7, #16
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}
 8013fc8:	e000ed04 	.word	0xe000ed04

08013fcc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b08e      	sub	sp, #56	; 0x38
 8013fd0:	af02      	add	r7, sp, #8
 8013fd2:	60f8      	str	r0, [r7, #12]
 8013fd4:	60b9      	str	r1, [r7, #8]
 8013fd6:	607a      	str	r2, [r7, #4]
 8013fd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d10a      	bne.n	8013ff6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fe4:	f383 8811 	msr	BASEPRI, r3
 8013fe8:	f3bf 8f6f 	isb	sy
 8013fec:	f3bf 8f4f 	dsb	sy
 8013ff0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013ff2:	bf00      	nop
 8013ff4:	e7fe      	b.n	8013ff4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013ff6:	683b      	ldr	r3, [r7, #0]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d10a      	bne.n	8014012 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014000:	f383 8811 	msr	BASEPRI, r3
 8014004:	f3bf 8f6f 	isb	sy
 8014008:	f3bf 8f4f 	dsb	sy
 801400c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801400e:	bf00      	nop
 8014010:	e7fe      	b.n	8014010 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d002      	beq.n	801401e <xQueueGenericCreateStatic+0x52>
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d001      	beq.n	8014022 <xQueueGenericCreateStatic+0x56>
 801401e:	2301      	movs	r3, #1
 8014020:	e000      	b.n	8014024 <xQueueGenericCreateStatic+0x58>
 8014022:	2300      	movs	r3, #0
 8014024:	2b00      	cmp	r3, #0
 8014026:	d10a      	bne.n	801403e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801402c:	f383 8811 	msr	BASEPRI, r3
 8014030:	f3bf 8f6f 	isb	sy
 8014034:	f3bf 8f4f 	dsb	sy
 8014038:	623b      	str	r3, [r7, #32]
}
 801403a:	bf00      	nop
 801403c:	e7fe      	b.n	801403c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d102      	bne.n	801404a <xQueueGenericCreateStatic+0x7e>
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d101      	bne.n	801404e <xQueueGenericCreateStatic+0x82>
 801404a:	2301      	movs	r3, #1
 801404c:	e000      	b.n	8014050 <xQueueGenericCreateStatic+0x84>
 801404e:	2300      	movs	r3, #0
 8014050:	2b00      	cmp	r3, #0
 8014052:	d10a      	bne.n	801406a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014058:	f383 8811 	msr	BASEPRI, r3
 801405c:	f3bf 8f6f 	isb	sy
 8014060:	f3bf 8f4f 	dsb	sy
 8014064:	61fb      	str	r3, [r7, #28]
}
 8014066:	bf00      	nop
 8014068:	e7fe      	b.n	8014068 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801406a:	2350      	movs	r3, #80	; 0x50
 801406c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801406e:	697b      	ldr	r3, [r7, #20]
 8014070:	2b50      	cmp	r3, #80	; 0x50
 8014072:	d00a      	beq.n	801408a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8014074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014078:	f383 8811 	msr	BASEPRI, r3
 801407c:	f3bf 8f6f 	isb	sy
 8014080:	f3bf 8f4f 	dsb	sy
 8014084:	61bb      	str	r3, [r7, #24]
}
 8014086:	bf00      	nop
 8014088:	e7fe      	b.n	8014088 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801408a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801408c:	683b      	ldr	r3, [r7, #0]
 801408e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014092:	2b00      	cmp	r3, #0
 8014094:	d00d      	beq.n	80140b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014098:	2201      	movs	r2, #1
 801409a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801409e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80140a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a4:	9300      	str	r3, [sp, #0]
 80140a6:	4613      	mov	r3, r2
 80140a8:	687a      	ldr	r2, [r7, #4]
 80140aa:	68b9      	ldr	r1, [r7, #8]
 80140ac:	68f8      	ldr	r0, [r7, #12]
 80140ae:	f000 f83f 	bl	8014130 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80140b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80140b4:	4618      	mov	r0, r3
 80140b6:	3730      	adds	r7, #48	; 0x30
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}

080140bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b08a      	sub	sp, #40	; 0x28
 80140c0:	af02      	add	r7, sp, #8
 80140c2:	60f8      	str	r0, [r7, #12]
 80140c4:	60b9      	str	r1, [r7, #8]
 80140c6:	4613      	mov	r3, r2
 80140c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d10a      	bne.n	80140e6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80140d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140d4:	f383 8811 	msr	BASEPRI, r3
 80140d8:	f3bf 8f6f 	isb	sy
 80140dc:	f3bf 8f4f 	dsb	sy
 80140e0:	613b      	str	r3, [r7, #16]
}
 80140e2:	bf00      	nop
 80140e4:	e7fe      	b.n	80140e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	68ba      	ldr	r2, [r7, #8]
 80140ea:	fb02 f303 	mul.w	r3, r2, r3
 80140ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80140f0:	69fb      	ldr	r3, [r7, #28]
 80140f2:	3350      	adds	r3, #80	; 0x50
 80140f4:	4618      	mov	r0, r3
 80140f6:	f002 fb37 	bl	8016768 <pvPortMalloc>
 80140fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80140fc:	69bb      	ldr	r3, [r7, #24]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d011      	beq.n	8014126 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014102:	69bb      	ldr	r3, [r7, #24]
 8014104:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014106:	697b      	ldr	r3, [r7, #20]
 8014108:	3350      	adds	r3, #80	; 0x50
 801410a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801410c:	69bb      	ldr	r3, [r7, #24]
 801410e:	2200      	movs	r2, #0
 8014110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014114:	79fa      	ldrb	r2, [r7, #7]
 8014116:	69bb      	ldr	r3, [r7, #24]
 8014118:	9300      	str	r3, [sp, #0]
 801411a:	4613      	mov	r3, r2
 801411c:	697a      	ldr	r2, [r7, #20]
 801411e:	68b9      	ldr	r1, [r7, #8]
 8014120:	68f8      	ldr	r0, [r7, #12]
 8014122:	f000 f805 	bl	8014130 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014126:	69bb      	ldr	r3, [r7, #24]
	}
 8014128:	4618      	mov	r0, r3
 801412a:	3720      	adds	r7, #32
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}

08014130 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b084      	sub	sp, #16
 8014134:	af00      	add	r7, sp, #0
 8014136:	60f8      	str	r0, [r7, #12]
 8014138:	60b9      	str	r1, [r7, #8]
 801413a:	607a      	str	r2, [r7, #4]
 801413c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d103      	bne.n	801414c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014144:	69bb      	ldr	r3, [r7, #24]
 8014146:	69ba      	ldr	r2, [r7, #24]
 8014148:	601a      	str	r2, [r3, #0]
 801414a:	e002      	b.n	8014152 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801414c:	69bb      	ldr	r3, [r7, #24]
 801414e:	687a      	ldr	r2, [r7, #4]
 8014150:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014152:	69bb      	ldr	r3, [r7, #24]
 8014154:	68fa      	ldr	r2, [r7, #12]
 8014156:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014158:	69bb      	ldr	r3, [r7, #24]
 801415a:	68ba      	ldr	r2, [r7, #8]
 801415c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801415e:	2101      	movs	r1, #1
 8014160:	69b8      	ldr	r0, [r7, #24]
 8014162:	f7ff fecb 	bl	8013efc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014166:	69bb      	ldr	r3, [r7, #24]
 8014168:	78fa      	ldrb	r2, [r7, #3]
 801416a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801416e:	bf00      	nop
 8014170:	3710      	adds	r7, #16
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}
	...

08014178 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b08e      	sub	sp, #56	; 0x38
 801417c:	af00      	add	r7, sp, #0
 801417e:	60f8      	str	r0, [r7, #12]
 8014180:	60b9      	str	r1, [r7, #8]
 8014182:	607a      	str	r2, [r7, #4]
 8014184:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014186:	2300      	movs	r3, #0
 8014188:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014190:	2b00      	cmp	r3, #0
 8014192:	d10a      	bne.n	80141aa <xQueueGenericSend+0x32>
	__asm volatile
 8014194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014198:	f383 8811 	msr	BASEPRI, r3
 801419c:	f3bf 8f6f 	isb	sy
 80141a0:	f3bf 8f4f 	dsb	sy
 80141a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80141a6:	bf00      	nop
 80141a8:	e7fe      	b.n	80141a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d103      	bne.n	80141b8 <xQueueGenericSend+0x40>
 80141b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d101      	bne.n	80141bc <xQueueGenericSend+0x44>
 80141b8:	2301      	movs	r3, #1
 80141ba:	e000      	b.n	80141be <xQueueGenericSend+0x46>
 80141bc:	2300      	movs	r3, #0
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d10a      	bne.n	80141d8 <xQueueGenericSend+0x60>
	__asm volatile
 80141c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c6:	f383 8811 	msr	BASEPRI, r3
 80141ca:	f3bf 8f6f 	isb	sy
 80141ce:	f3bf 8f4f 	dsb	sy
 80141d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80141d4:	bf00      	nop
 80141d6:	e7fe      	b.n	80141d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	2b02      	cmp	r3, #2
 80141dc:	d103      	bne.n	80141e6 <xQueueGenericSend+0x6e>
 80141de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80141e2:	2b01      	cmp	r3, #1
 80141e4:	d101      	bne.n	80141ea <xQueueGenericSend+0x72>
 80141e6:	2301      	movs	r3, #1
 80141e8:	e000      	b.n	80141ec <xQueueGenericSend+0x74>
 80141ea:	2300      	movs	r3, #0
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d10a      	bne.n	8014206 <xQueueGenericSend+0x8e>
	__asm volatile
 80141f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141f4:	f383 8811 	msr	BASEPRI, r3
 80141f8:	f3bf 8f6f 	isb	sy
 80141fc:	f3bf 8f4f 	dsb	sy
 8014200:	623b      	str	r3, [r7, #32]
}
 8014202:	bf00      	nop
 8014204:	e7fe      	b.n	8014204 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014206:	f001 fbfd 	bl	8015a04 <xTaskGetSchedulerState>
 801420a:	4603      	mov	r3, r0
 801420c:	2b00      	cmp	r3, #0
 801420e:	d102      	bne.n	8014216 <xQueueGenericSend+0x9e>
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d101      	bne.n	801421a <xQueueGenericSend+0xa2>
 8014216:	2301      	movs	r3, #1
 8014218:	e000      	b.n	801421c <xQueueGenericSend+0xa4>
 801421a:	2300      	movs	r3, #0
 801421c:	2b00      	cmp	r3, #0
 801421e:	d10a      	bne.n	8014236 <xQueueGenericSend+0xbe>
	__asm volatile
 8014220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014224:	f383 8811 	msr	BASEPRI, r3
 8014228:	f3bf 8f6f 	isb	sy
 801422c:	f3bf 8f4f 	dsb	sy
 8014230:	61fb      	str	r3, [r7, #28]
}
 8014232:	bf00      	nop
 8014234:	e7fe      	b.n	8014234 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014236:	f002 f975 	bl	8016524 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801423a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801423c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014242:	429a      	cmp	r2, r3
 8014244:	d302      	bcc.n	801424c <xQueueGenericSend+0xd4>
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	2b02      	cmp	r3, #2
 801424a:	d129      	bne.n	80142a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801424c:	683a      	ldr	r2, [r7, #0]
 801424e:	68b9      	ldr	r1, [r7, #8]
 8014250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014252:	f000 fa8b 	bl	801476c <prvCopyDataToQueue>
 8014256:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801425c:	2b00      	cmp	r3, #0
 801425e:	d010      	beq.n	8014282 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014262:	3324      	adds	r3, #36	; 0x24
 8014264:	4618      	mov	r0, r3
 8014266:	f001 f9ad 	bl	80155c4 <xTaskRemoveFromEventList>
 801426a:	4603      	mov	r3, r0
 801426c:	2b00      	cmp	r3, #0
 801426e:	d013      	beq.n	8014298 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014270:	4b3f      	ldr	r3, [pc, #252]	; (8014370 <xQueueGenericSend+0x1f8>)
 8014272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014276:	601a      	str	r2, [r3, #0]
 8014278:	f3bf 8f4f 	dsb	sy
 801427c:	f3bf 8f6f 	isb	sy
 8014280:	e00a      	b.n	8014298 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014284:	2b00      	cmp	r3, #0
 8014286:	d007      	beq.n	8014298 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014288:	4b39      	ldr	r3, [pc, #228]	; (8014370 <xQueueGenericSend+0x1f8>)
 801428a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801428e:	601a      	str	r2, [r3, #0]
 8014290:	f3bf 8f4f 	dsb	sy
 8014294:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014298:	f002 f974 	bl	8016584 <vPortExitCritical>
				return pdPASS;
 801429c:	2301      	movs	r3, #1
 801429e:	e063      	b.n	8014368 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d103      	bne.n	80142ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80142a6:	f002 f96d 	bl	8016584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80142aa:	2300      	movs	r3, #0
 80142ac:	e05c      	b.n	8014368 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80142ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d106      	bne.n	80142c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80142b4:	f107 0314 	add.w	r3, r7, #20
 80142b8:	4618      	mov	r0, r3
 80142ba:	f001 fa49 	bl	8015750 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80142be:	2301      	movs	r3, #1
 80142c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80142c2:	f002 f95f 	bl	8016584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80142c6:	f000 ff15 	bl	80150f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80142ca:	f002 f92b 	bl	8016524 <vPortEnterCritical>
 80142ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80142d4:	b25b      	sxtb	r3, r3
 80142d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142da:	d103      	bne.n	80142e4 <xQueueGenericSend+0x16c>
 80142dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142de:	2200      	movs	r2, #0
 80142e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80142e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80142ea:	b25b      	sxtb	r3, r3
 80142ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142f0:	d103      	bne.n	80142fa <xQueueGenericSend+0x182>
 80142f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142f4:	2200      	movs	r2, #0
 80142f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80142fa:	f002 f943 	bl	8016584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80142fe:	1d3a      	adds	r2, r7, #4
 8014300:	f107 0314 	add.w	r3, r7, #20
 8014304:	4611      	mov	r1, r2
 8014306:	4618      	mov	r0, r3
 8014308:	f001 fa38 	bl	801577c <xTaskCheckForTimeOut>
 801430c:	4603      	mov	r3, r0
 801430e:	2b00      	cmp	r3, #0
 8014310:	d124      	bne.n	801435c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014314:	f000 fb22 	bl	801495c <prvIsQueueFull>
 8014318:	4603      	mov	r3, r0
 801431a:	2b00      	cmp	r3, #0
 801431c:	d018      	beq.n	8014350 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014320:	3310      	adds	r3, #16
 8014322:	687a      	ldr	r2, [r7, #4]
 8014324:	4611      	mov	r1, r2
 8014326:	4618      	mov	r0, r3
 8014328:	f001 f8c0 	bl	80154ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801432c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801432e:	f000 faad 	bl	801488c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014332:	f000 feed 	bl	8015110 <xTaskResumeAll>
 8014336:	4603      	mov	r3, r0
 8014338:	2b00      	cmp	r3, #0
 801433a:	f47f af7c 	bne.w	8014236 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801433e:	4b0c      	ldr	r3, [pc, #48]	; (8014370 <xQueueGenericSend+0x1f8>)
 8014340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014344:	601a      	str	r2, [r3, #0]
 8014346:	f3bf 8f4f 	dsb	sy
 801434a:	f3bf 8f6f 	isb	sy
 801434e:	e772      	b.n	8014236 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014352:	f000 fa9b 	bl	801488c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014356:	f000 fedb 	bl	8015110 <xTaskResumeAll>
 801435a:	e76c      	b.n	8014236 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801435c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801435e:	f000 fa95 	bl	801488c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014362:	f000 fed5 	bl	8015110 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014366:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014368:	4618      	mov	r0, r3
 801436a:	3738      	adds	r7, #56	; 0x38
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}
 8014370:	e000ed04 	.word	0xe000ed04

08014374 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b090      	sub	sp, #64	; 0x40
 8014378:	af00      	add	r7, sp, #0
 801437a:	60f8      	str	r0, [r7, #12]
 801437c:	60b9      	str	r1, [r7, #8]
 801437e:	607a      	str	r2, [r7, #4]
 8014380:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8014386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014388:	2b00      	cmp	r3, #0
 801438a:	d10a      	bne.n	80143a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014390:	f383 8811 	msr	BASEPRI, r3
 8014394:	f3bf 8f6f 	isb	sy
 8014398:	f3bf 8f4f 	dsb	sy
 801439c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801439e:	bf00      	nop
 80143a0:	e7fe      	b.n	80143a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80143a2:	68bb      	ldr	r3, [r7, #8]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d103      	bne.n	80143b0 <xQueueGenericSendFromISR+0x3c>
 80143a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d101      	bne.n	80143b4 <xQueueGenericSendFromISR+0x40>
 80143b0:	2301      	movs	r3, #1
 80143b2:	e000      	b.n	80143b6 <xQueueGenericSendFromISR+0x42>
 80143b4:	2300      	movs	r3, #0
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d10a      	bne.n	80143d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80143ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143be:	f383 8811 	msr	BASEPRI, r3
 80143c2:	f3bf 8f6f 	isb	sy
 80143c6:	f3bf 8f4f 	dsb	sy
 80143ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80143cc:	bf00      	nop
 80143ce:	e7fe      	b.n	80143ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80143d0:	683b      	ldr	r3, [r7, #0]
 80143d2:	2b02      	cmp	r3, #2
 80143d4:	d103      	bne.n	80143de <xQueueGenericSendFromISR+0x6a>
 80143d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143da:	2b01      	cmp	r3, #1
 80143dc:	d101      	bne.n	80143e2 <xQueueGenericSendFromISR+0x6e>
 80143de:	2301      	movs	r3, #1
 80143e0:	e000      	b.n	80143e4 <xQueueGenericSendFromISR+0x70>
 80143e2:	2300      	movs	r3, #0
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d10a      	bne.n	80143fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80143e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ec:	f383 8811 	msr	BASEPRI, r3
 80143f0:	f3bf 8f6f 	isb	sy
 80143f4:	f3bf 8f4f 	dsb	sy
 80143f8:	623b      	str	r3, [r7, #32]
}
 80143fa:	bf00      	nop
 80143fc:	e7fe      	b.n	80143fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80143fe:	f002 f973 	bl	80166e8 <vPortValidateInterruptPriority>
	__asm volatile
 8014402:	f3ef 8211 	mrs	r2, BASEPRI
 8014406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801440a:	f383 8811 	msr	BASEPRI, r3
 801440e:	f3bf 8f6f 	isb	sy
 8014412:	f3bf 8f4f 	dsb	sy
 8014416:	61fa      	str	r2, [r7, #28]
 8014418:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801441a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801441c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801441e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014426:	429a      	cmp	r2, r3
 8014428:	d302      	bcc.n	8014430 <xQueueGenericSendFromISR+0xbc>
 801442a:	683b      	ldr	r3, [r7, #0]
 801442c:	2b02      	cmp	r3, #2
 801442e:	d12f      	bne.n	8014490 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014432:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801443e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014440:	683a      	ldr	r2, [r7, #0]
 8014442:	68b9      	ldr	r1, [r7, #8]
 8014444:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014446:	f000 f991 	bl	801476c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801444a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801444e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014452:	d112      	bne.n	801447a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014458:	2b00      	cmp	r3, #0
 801445a:	d016      	beq.n	801448a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801445c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801445e:	3324      	adds	r3, #36	; 0x24
 8014460:	4618      	mov	r0, r3
 8014462:	f001 f8af 	bl	80155c4 <xTaskRemoveFromEventList>
 8014466:	4603      	mov	r3, r0
 8014468:	2b00      	cmp	r3, #0
 801446a:	d00e      	beq.n	801448a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d00b      	beq.n	801448a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	2201      	movs	r2, #1
 8014476:	601a      	str	r2, [r3, #0]
 8014478:	e007      	b.n	801448a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801447a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801447e:	3301      	adds	r3, #1
 8014480:	b2db      	uxtb	r3, r3
 8014482:	b25a      	sxtb	r2, r3
 8014484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801448a:	2301      	movs	r3, #1
 801448c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801448e:	e001      	b.n	8014494 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014490:	2300      	movs	r3, #0
 8014492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014496:	617b      	str	r3, [r7, #20]
	__asm volatile
 8014498:	697b      	ldr	r3, [r7, #20]
 801449a:	f383 8811 	msr	BASEPRI, r3
}
 801449e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80144a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80144a2:	4618      	mov	r0, r3
 80144a4:	3740      	adds	r7, #64	; 0x40
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}
	...

080144ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b08c      	sub	sp, #48	; 0x30
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	60f8      	str	r0, [r7, #12]
 80144b4:	60b9      	str	r1, [r7, #8]
 80144b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80144b8:	2300      	movs	r3, #0
 80144ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80144c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d10a      	bne.n	80144dc <xQueueReceive+0x30>
	__asm volatile
 80144c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ca:	f383 8811 	msr	BASEPRI, r3
 80144ce:	f3bf 8f6f 	isb	sy
 80144d2:	f3bf 8f4f 	dsb	sy
 80144d6:	623b      	str	r3, [r7, #32]
}
 80144d8:	bf00      	nop
 80144da:	e7fe      	b.n	80144da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80144dc:	68bb      	ldr	r3, [r7, #8]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d103      	bne.n	80144ea <xQueueReceive+0x3e>
 80144e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d101      	bne.n	80144ee <xQueueReceive+0x42>
 80144ea:	2301      	movs	r3, #1
 80144ec:	e000      	b.n	80144f0 <xQueueReceive+0x44>
 80144ee:	2300      	movs	r3, #0
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d10a      	bne.n	801450a <xQueueReceive+0x5e>
	__asm volatile
 80144f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144f8:	f383 8811 	msr	BASEPRI, r3
 80144fc:	f3bf 8f6f 	isb	sy
 8014500:	f3bf 8f4f 	dsb	sy
 8014504:	61fb      	str	r3, [r7, #28]
}
 8014506:	bf00      	nop
 8014508:	e7fe      	b.n	8014508 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801450a:	f001 fa7b 	bl	8015a04 <xTaskGetSchedulerState>
 801450e:	4603      	mov	r3, r0
 8014510:	2b00      	cmp	r3, #0
 8014512:	d102      	bne.n	801451a <xQueueReceive+0x6e>
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d101      	bne.n	801451e <xQueueReceive+0x72>
 801451a:	2301      	movs	r3, #1
 801451c:	e000      	b.n	8014520 <xQueueReceive+0x74>
 801451e:	2300      	movs	r3, #0
 8014520:	2b00      	cmp	r3, #0
 8014522:	d10a      	bne.n	801453a <xQueueReceive+0x8e>
	__asm volatile
 8014524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014528:	f383 8811 	msr	BASEPRI, r3
 801452c:	f3bf 8f6f 	isb	sy
 8014530:	f3bf 8f4f 	dsb	sy
 8014534:	61bb      	str	r3, [r7, #24]
}
 8014536:	bf00      	nop
 8014538:	e7fe      	b.n	8014538 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801453a:	f001 fff3 	bl	8016524 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801453e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014542:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014546:	2b00      	cmp	r3, #0
 8014548:	d01f      	beq.n	801458a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801454a:	68b9      	ldr	r1, [r7, #8]
 801454c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801454e:	f000 f977 	bl	8014840 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014554:	1e5a      	subs	r2, r3, #1
 8014556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014558:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801455c:	691b      	ldr	r3, [r3, #16]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d00f      	beq.n	8014582 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014564:	3310      	adds	r3, #16
 8014566:	4618      	mov	r0, r3
 8014568:	f001 f82c 	bl	80155c4 <xTaskRemoveFromEventList>
 801456c:	4603      	mov	r3, r0
 801456e:	2b00      	cmp	r3, #0
 8014570:	d007      	beq.n	8014582 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014572:	4b3d      	ldr	r3, [pc, #244]	; (8014668 <xQueueReceive+0x1bc>)
 8014574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014578:	601a      	str	r2, [r3, #0]
 801457a:	f3bf 8f4f 	dsb	sy
 801457e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014582:	f001 ffff 	bl	8016584 <vPortExitCritical>
				return pdPASS;
 8014586:	2301      	movs	r3, #1
 8014588:	e069      	b.n	801465e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d103      	bne.n	8014598 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014590:	f001 fff8 	bl	8016584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014594:	2300      	movs	r3, #0
 8014596:	e062      	b.n	801465e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801459a:	2b00      	cmp	r3, #0
 801459c:	d106      	bne.n	80145ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801459e:	f107 0310 	add.w	r3, r7, #16
 80145a2:	4618      	mov	r0, r3
 80145a4:	f001 f8d4 	bl	8015750 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80145a8:	2301      	movs	r3, #1
 80145aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80145ac:	f001 ffea 	bl	8016584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80145b0:	f000 fda0 	bl	80150f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80145b4:	f001 ffb6 	bl	8016524 <vPortEnterCritical>
 80145b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80145be:	b25b      	sxtb	r3, r3
 80145c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145c4:	d103      	bne.n	80145ce <xQueueReceive+0x122>
 80145c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145c8:	2200      	movs	r2, #0
 80145ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80145ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80145d4:	b25b      	sxtb	r3, r3
 80145d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145da:	d103      	bne.n	80145e4 <xQueueReceive+0x138>
 80145dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145de:	2200      	movs	r2, #0
 80145e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80145e4:	f001 ffce 	bl	8016584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80145e8:	1d3a      	adds	r2, r7, #4
 80145ea:	f107 0310 	add.w	r3, r7, #16
 80145ee:	4611      	mov	r1, r2
 80145f0:	4618      	mov	r0, r3
 80145f2:	f001 f8c3 	bl	801577c <xTaskCheckForTimeOut>
 80145f6:	4603      	mov	r3, r0
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d123      	bne.n	8014644 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80145fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145fe:	f000 f997 	bl	8014930 <prvIsQueueEmpty>
 8014602:	4603      	mov	r3, r0
 8014604:	2b00      	cmp	r3, #0
 8014606:	d017      	beq.n	8014638 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801460a:	3324      	adds	r3, #36	; 0x24
 801460c:	687a      	ldr	r2, [r7, #4]
 801460e:	4611      	mov	r1, r2
 8014610:	4618      	mov	r0, r3
 8014612:	f000 ff4b 	bl	80154ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014618:	f000 f938 	bl	801488c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801461c:	f000 fd78 	bl	8015110 <xTaskResumeAll>
 8014620:	4603      	mov	r3, r0
 8014622:	2b00      	cmp	r3, #0
 8014624:	d189      	bne.n	801453a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8014626:	4b10      	ldr	r3, [pc, #64]	; (8014668 <xQueueReceive+0x1bc>)
 8014628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801462c:	601a      	str	r2, [r3, #0]
 801462e:	f3bf 8f4f 	dsb	sy
 8014632:	f3bf 8f6f 	isb	sy
 8014636:	e780      	b.n	801453a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801463a:	f000 f927 	bl	801488c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801463e:	f000 fd67 	bl	8015110 <xTaskResumeAll>
 8014642:	e77a      	b.n	801453a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014646:	f000 f921 	bl	801488c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801464a:	f000 fd61 	bl	8015110 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801464e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014650:	f000 f96e 	bl	8014930 <prvIsQueueEmpty>
 8014654:	4603      	mov	r3, r0
 8014656:	2b00      	cmp	r3, #0
 8014658:	f43f af6f 	beq.w	801453a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801465c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801465e:	4618      	mov	r0, r3
 8014660:	3730      	adds	r7, #48	; 0x30
 8014662:	46bd      	mov	sp, r7
 8014664:	bd80      	pop	{r7, pc}
 8014666:	bf00      	nop
 8014668:	e000ed04 	.word	0xe000ed04

0801466c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b08e      	sub	sp, #56	; 0x38
 8014670:	af00      	add	r7, sp, #0
 8014672:	60f8      	str	r0, [r7, #12]
 8014674:	60b9      	str	r1, [r7, #8]
 8014676:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801467c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801467e:	2b00      	cmp	r3, #0
 8014680:	d10a      	bne.n	8014698 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8014682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014686:	f383 8811 	msr	BASEPRI, r3
 801468a:	f3bf 8f6f 	isb	sy
 801468e:	f3bf 8f4f 	dsb	sy
 8014692:	623b      	str	r3, [r7, #32]
}
 8014694:	bf00      	nop
 8014696:	e7fe      	b.n	8014696 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014698:	68bb      	ldr	r3, [r7, #8]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d103      	bne.n	80146a6 <xQueueReceiveFromISR+0x3a>
 801469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d101      	bne.n	80146aa <xQueueReceiveFromISR+0x3e>
 80146a6:	2301      	movs	r3, #1
 80146a8:	e000      	b.n	80146ac <xQueueReceiveFromISR+0x40>
 80146aa:	2300      	movs	r3, #0
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d10a      	bne.n	80146c6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80146b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146b4:	f383 8811 	msr	BASEPRI, r3
 80146b8:	f3bf 8f6f 	isb	sy
 80146bc:	f3bf 8f4f 	dsb	sy
 80146c0:	61fb      	str	r3, [r7, #28]
}
 80146c2:	bf00      	nop
 80146c4:	e7fe      	b.n	80146c4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80146c6:	f002 f80f 	bl	80166e8 <vPortValidateInterruptPriority>
	__asm volatile
 80146ca:	f3ef 8211 	mrs	r2, BASEPRI
 80146ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146d2:	f383 8811 	msr	BASEPRI, r3
 80146d6:	f3bf 8f6f 	isb	sy
 80146da:	f3bf 8f4f 	dsb	sy
 80146de:	61ba      	str	r2, [r7, #24]
 80146e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80146e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80146e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80146e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80146ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d02f      	beq.n	8014752 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80146f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80146f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80146fc:	68b9      	ldr	r1, [r7, #8]
 80146fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014700:	f000 f89e 	bl	8014840 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014706:	1e5a      	subs	r2, r3, #1
 8014708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801470a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801470c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014714:	d112      	bne.n	801473c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014718:	691b      	ldr	r3, [r3, #16]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d016      	beq.n	801474c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014720:	3310      	adds	r3, #16
 8014722:	4618      	mov	r0, r3
 8014724:	f000 ff4e 	bl	80155c4 <xTaskRemoveFromEventList>
 8014728:	4603      	mov	r3, r0
 801472a:	2b00      	cmp	r3, #0
 801472c:	d00e      	beq.n	801474c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d00b      	beq.n	801474c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	2201      	movs	r2, #1
 8014738:	601a      	str	r2, [r3, #0]
 801473a:	e007      	b.n	801474c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801473c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014740:	3301      	adds	r3, #1
 8014742:	b2db      	uxtb	r3, r3
 8014744:	b25a      	sxtb	r2, r3
 8014746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801474c:	2301      	movs	r3, #1
 801474e:	637b      	str	r3, [r7, #52]	; 0x34
 8014750:	e001      	b.n	8014756 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8014752:	2300      	movs	r3, #0
 8014754:	637b      	str	r3, [r7, #52]	; 0x34
 8014756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014758:	613b      	str	r3, [r7, #16]
	__asm volatile
 801475a:	693b      	ldr	r3, [r7, #16]
 801475c:	f383 8811 	msr	BASEPRI, r3
}
 8014760:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014764:	4618      	mov	r0, r3
 8014766:	3738      	adds	r7, #56	; 0x38
 8014768:	46bd      	mov	sp, r7
 801476a:	bd80      	pop	{r7, pc}

0801476c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b086      	sub	sp, #24
 8014770:	af00      	add	r7, sp, #0
 8014772:	60f8      	str	r0, [r7, #12]
 8014774:	60b9      	str	r1, [r7, #8]
 8014776:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014778:	2300      	movs	r3, #0
 801477a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014780:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014786:	2b00      	cmp	r3, #0
 8014788:	d10d      	bne.n	80147a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d14d      	bne.n	801482e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	689b      	ldr	r3, [r3, #8]
 8014796:	4618      	mov	r0, r3
 8014798:	f001 f952 	bl	8015a40 <xTaskPriorityDisinherit>
 801479c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	2200      	movs	r2, #0
 80147a2:	609a      	str	r2, [r3, #8]
 80147a4:	e043      	b.n	801482e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d119      	bne.n	80147e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	6858      	ldr	r0, [r3, #4]
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147b4:	461a      	mov	r2, r3
 80147b6:	68b9      	ldr	r1, [r7, #8]
 80147b8:	f002 f9fa 	bl	8016bb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	685a      	ldr	r2, [r3, #4]
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147c4:	441a      	add	r2, r3
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	685a      	ldr	r2, [r3, #4]
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	689b      	ldr	r3, [r3, #8]
 80147d2:	429a      	cmp	r2, r3
 80147d4:	d32b      	bcc.n	801482e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	681a      	ldr	r2, [r3, #0]
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	605a      	str	r2, [r3, #4]
 80147de:	e026      	b.n	801482e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	68d8      	ldr	r0, [r3, #12]
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147e8:	461a      	mov	r2, r3
 80147ea:	68b9      	ldr	r1, [r7, #8]
 80147ec:	f002 f9e0 	bl	8016bb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	68da      	ldr	r2, [r3, #12]
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147f8:	425b      	negs	r3, r3
 80147fa:	441a      	add	r2, r3
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	68da      	ldr	r2, [r3, #12]
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	429a      	cmp	r2, r3
 801480a:	d207      	bcs.n	801481c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801480c:	68fb      	ldr	r3, [r7, #12]
 801480e:	689a      	ldr	r2, [r3, #8]
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014814:	425b      	negs	r3, r3
 8014816:	441a      	add	r2, r3
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2b02      	cmp	r3, #2
 8014820:	d105      	bne.n	801482e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014822:	693b      	ldr	r3, [r7, #16]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d002      	beq.n	801482e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014828:	693b      	ldr	r3, [r7, #16]
 801482a:	3b01      	subs	r3, #1
 801482c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	1c5a      	adds	r2, r3, #1
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014836:	697b      	ldr	r3, [r7, #20]
}
 8014838:	4618      	mov	r0, r3
 801483a:	3718      	adds	r7, #24
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}

08014840 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b082      	sub	sp, #8
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
 8014848:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801484e:	2b00      	cmp	r3, #0
 8014850:	d018      	beq.n	8014884 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	68da      	ldr	r2, [r3, #12]
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801485a:	441a      	add	r2, r3
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	68da      	ldr	r2, [r3, #12]
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	689b      	ldr	r3, [r3, #8]
 8014868:	429a      	cmp	r2, r3
 801486a:	d303      	bcc.n	8014874 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	681a      	ldr	r2, [r3, #0]
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	68d9      	ldr	r1, [r3, #12]
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801487c:	461a      	mov	r2, r3
 801487e:	6838      	ldr	r0, [r7, #0]
 8014880:	f002 f996 	bl	8016bb0 <memcpy>
	}
}
 8014884:	bf00      	nop
 8014886:	3708      	adds	r7, #8
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}

0801488c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b084      	sub	sp, #16
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014894:	f001 fe46 	bl	8016524 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801489e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80148a0:	e011      	b.n	80148c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d012      	beq.n	80148d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	3324      	adds	r3, #36	; 0x24
 80148ae:	4618      	mov	r0, r3
 80148b0:	f000 fe88 	bl	80155c4 <xTaskRemoveFromEventList>
 80148b4:	4603      	mov	r3, r0
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d001      	beq.n	80148be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80148ba:	f000 ffc1 	bl	8015840 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80148be:	7bfb      	ldrb	r3, [r7, #15]
 80148c0:	3b01      	subs	r3, #1
 80148c2:	b2db      	uxtb	r3, r3
 80148c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80148c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	dce9      	bgt.n	80148a2 <prvUnlockQueue+0x16>
 80148ce:	e000      	b.n	80148d2 <prvUnlockQueue+0x46>
					break;
 80148d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	22ff      	movs	r2, #255	; 0xff
 80148d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80148da:	f001 fe53 	bl	8016584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80148de:	f001 fe21 	bl	8016524 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80148e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80148ea:	e011      	b.n	8014910 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	691b      	ldr	r3, [r3, #16]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d012      	beq.n	801491a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	3310      	adds	r3, #16
 80148f8:	4618      	mov	r0, r3
 80148fa:	f000 fe63 	bl	80155c4 <xTaskRemoveFromEventList>
 80148fe:	4603      	mov	r3, r0
 8014900:	2b00      	cmp	r3, #0
 8014902:	d001      	beq.n	8014908 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014904:	f000 ff9c 	bl	8015840 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014908:	7bbb      	ldrb	r3, [r7, #14]
 801490a:	3b01      	subs	r3, #1
 801490c:	b2db      	uxtb	r3, r3
 801490e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014914:	2b00      	cmp	r3, #0
 8014916:	dce9      	bgt.n	80148ec <prvUnlockQueue+0x60>
 8014918:	e000      	b.n	801491c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801491a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	22ff      	movs	r2, #255	; 0xff
 8014920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014924:	f001 fe2e 	bl	8016584 <vPortExitCritical>
}
 8014928:	bf00      	nop
 801492a:	3710      	adds	r7, #16
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}

08014930 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b084      	sub	sp, #16
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014938:	f001 fdf4 	bl	8016524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014940:	2b00      	cmp	r3, #0
 8014942:	d102      	bne.n	801494a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014944:	2301      	movs	r3, #1
 8014946:	60fb      	str	r3, [r7, #12]
 8014948:	e001      	b.n	801494e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801494a:	2300      	movs	r3, #0
 801494c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801494e:	f001 fe19 	bl	8016584 <vPortExitCritical>

	return xReturn;
 8014952:	68fb      	ldr	r3, [r7, #12]
}
 8014954:	4618      	mov	r0, r3
 8014956:	3710      	adds	r7, #16
 8014958:	46bd      	mov	sp, r7
 801495a:	bd80      	pop	{r7, pc}

0801495c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b084      	sub	sp, #16
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014964:	f001 fdde 	bl	8016524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014970:	429a      	cmp	r2, r3
 8014972:	d102      	bne.n	801497a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014974:	2301      	movs	r3, #1
 8014976:	60fb      	str	r3, [r7, #12]
 8014978:	e001      	b.n	801497e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801497a:	2300      	movs	r3, #0
 801497c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801497e:	f001 fe01 	bl	8016584 <vPortExitCritical>

	return xReturn;
 8014982:	68fb      	ldr	r3, [r7, #12]
}
 8014984:	4618      	mov	r0, r3
 8014986:	3710      	adds	r7, #16
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}

0801498c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801498c:	b480      	push	{r7}
 801498e:	b085      	sub	sp, #20
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
 8014994:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014996:	2300      	movs	r3, #0
 8014998:	60fb      	str	r3, [r7, #12]
 801499a:	e014      	b.n	80149c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801499c:	4a0f      	ldr	r2, [pc, #60]	; (80149dc <vQueueAddToRegistry+0x50>)
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d10b      	bne.n	80149c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80149a8:	490c      	ldr	r1, [pc, #48]	; (80149dc <vQueueAddToRegistry+0x50>)
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	683a      	ldr	r2, [r7, #0]
 80149ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80149b2:	4a0a      	ldr	r2, [pc, #40]	; (80149dc <vQueueAddToRegistry+0x50>)
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	00db      	lsls	r3, r3, #3
 80149b8:	4413      	add	r3, r2
 80149ba:	687a      	ldr	r2, [r7, #4]
 80149bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80149be:	e006      	b.n	80149ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	3301      	adds	r3, #1
 80149c4:	60fb      	str	r3, [r7, #12]
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	2b07      	cmp	r3, #7
 80149ca:	d9e7      	bls.n	801499c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80149cc:	bf00      	nop
 80149ce:	bf00      	nop
 80149d0:	3714      	adds	r7, #20
 80149d2:	46bd      	mov	sp, r7
 80149d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d8:	4770      	bx	lr
 80149da:	bf00      	nop
 80149dc:	240017a4 	.word	0x240017a4

080149e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b086      	sub	sp, #24
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	60f8      	str	r0, [r7, #12]
 80149e8:	60b9      	str	r1, [r7, #8]
 80149ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80149f0:	f001 fd98 	bl	8016524 <vPortEnterCritical>
 80149f4:	697b      	ldr	r3, [r7, #20]
 80149f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80149fa:	b25b      	sxtb	r3, r3
 80149fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a00:	d103      	bne.n	8014a0a <vQueueWaitForMessageRestricted+0x2a>
 8014a02:	697b      	ldr	r3, [r7, #20]
 8014a04:	2200      	movs	r2, #0
 8014a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014a0a:	697b      	ldr	r3, [r7, #20]
 8014a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014a10:	b25b      	sxtb	r3, r3
 8014a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a16:	d103      	bne.n	8014a20 <vQueueWaitForMessageRestricted+0x40>
 8014a18:	697b      	ldr	r3, [r7, #20]
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014a20:	f001 fdb0 	bl	8016584 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014a24:	697b      	ldr	r3, [r7, #20]
 8014a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d106      	bne.n	8014a3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014a2c:	697b      	ldr	r3, [r7, #20]
 8014a2e:	3324      	adds	r3, #36	; 0x24
 8014a30:	687a      	ldr	r2, [r7, #4]
 8014a32:	68b9      	ldr	r1, [r7, #8]
 8014a34:	4618      	mov	r0, r3
 8014a36:	f000 fd99 	bl	801556c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014a3a:	6978      	ldr	r0, [r7, #20]
 8014a3c:	f7ff ff26 	bl	801488c <prvUnlockQueue>
	}
 8014a40:	bf00      	nop
 8014a42:	3718      	adds	r7, #24
 8014a44:	46bd      	mov	sp, r7
 8014a46:	bd80      	pop	{r7, pc}

08014a48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b08e      	sub	sp, #56	; 0x38
 8014a4c:	af04      	add	r7, sp, #16
 8014a4e:	60f8      	str	r0, [r7, #12]
 8014a50:	60b9      	str	r1, [r7, #8]
 8014a52:	607a      	str	r2, [r7, #4]
 8014a54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d10a      	bne.n	8014a72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8014a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a60:	f383 8811 	msr	BASEPRI, r3
 8014a64:	f3bf 8f6f 	isb	sy
 8014a68:	f3bf 8f4f 	dsb	sy
 8014a6c:	623b      	str	r3, [r7, #32]
}
 8014a6e:	bf00      	nop
 8014a70:	e7fe      	b.n	8014a70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d10a      	bne.n	8014a8e <xTaskCreateStatic+0x46>
	__asm volatile
 8014a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a7c:	f383 8811 	msr	BASEPRI, r3
 8014a80:	f3bf 8f6f 	isb	sy
 8014a84:	f3bf 8f4f 	dsb	sy
 8014a88:	61fb      	str	r3, [r7, #28]
}
 8014a8a:	bf00      	nop
 8014a8c:	e7fe      	b.n	8014a8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014a8e:	235c      	movs	r3, #92	; 0x5c
 8014a90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014a92:	693b      	ldr	r3, [r7, #16]
 8014a94:	2b5c      	cmp	r3, #92	; 0x5c
 8014a96:	d00a      	beq.n	8014aae <xTaskCreateStatic+0x66>
	__asm volatile
 8014a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a9c:	f383 8811 	msr	BASEPRI, r3
 8014aa0:	f3bf 8f6f 	isb	sy
 8014aa4:	f3bf 8f4f 	dsb	sy
 8014aa8:	61bb      	str	r3, [r7, #24]
}
 8014aaa:	bf00      	nop
 8014aac:	e7fe      	b.n	8014aac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014aae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d01e      	beq.n	8014af4 <xTaskCreateStatic+0xac>
 8014ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d01b      	beq.n	8014af4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014abe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ac4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ac8:	2202      	movs	r2, #2
 8014aca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014ace:	2300      	movs	r3, #0
 8014ad0:	9303      	str	r3, [sp, #12]
 8014ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ad4:	9302      	str	r3, [sp, #8]
 8014ad6:	f107 0314 	add.w	r3, r7, #20
 8014ada:	9301      	str	r3, [sp, #4]
 8014adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ade:	9300      	str	r3, [sp, #0]
 8014ae0:	683b      	ldr	r3, [r7, #0]
 8014ae2:	687a      	ldr	r2, [r7, #4]
 8014ae4:	68b9      	ldr	r1, [r7, #8]
 8014ae6:	68f8      	ldr	r0, [r7, #12]
 8014ae8:	f000 f850 	bl	8014b8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014aee:	f000 f8dd 	bl	8014cac <prvAddNewTaskToReadyList>
 8014af2:	e001      	b.n	8014af8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014af4:	2300      	movs	r3, #0
 8014af6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014af8:	697b      	ldr	r3, [r7, #20]
	}
 8014afa:	4618      	mov	r0, r3
 8014afc:	3728      	adds	r7, #40	; 0x28
 8014afe:	46bd      	mov	sp, r7
 8014b00:	bd80      	pop	{r7, pc}

08014b02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014b02:	b580      	push	{r7, lr}
 8014b04:	b08c      	sub	sp, #48	; 0x30
 8014b06:	af04      	add	r7, sp, #16
 8014b08:	60f8      	str	r0, [r7, #12]
 8014b0a:	60b9      	str	r1, [r7, #8]
 8014b0c:	603b      	str	r3, [r7, #0]
 8014b0e:	4613      	mov	r3, r2
 8014b10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014b12:	88fb      	ldrh	r3, [r7, #6]
 8014b14:	009b      	lsls	r3, r3, #2
 8014b16:	4618      	mov	r0, r3
 8014b18:	f001 fe26 	bl	8016768 <pvPortMalloc>
 8014b1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014b1e:	697b      	ldr	r3, [r7, #20]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d00e      	beq.n	8014b42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014b24:	205c      	movs	r0, #92	; 0x5c
 8014b26:	f001 fe1f 	bl	8016768 <pvPortMalloc>
 8014b2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014b2c:	69fb      	ldr	r3, [r7, #28]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d003      	beq.n	8014b3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014b32:	69fb      	ldr	r3, [r7, #28]
 8014b34:	697a      	ldr	r2, [r7, #20]
 8014b36:	631a      	str	r2, [r3, #48]	; 0x30
 8014b38:	e005      	b.n	8014b46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014b3a:	6978      	ldr	r0, [r7, #20]
 8014b3c:	f001 fee0 	bl	8016900 <vPortFree>
 8014b40:	e001      	b.n	8014b46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014b42:	2300      	movs	r3, #0
 8014b44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014b46:	69fb      	ldr	r3, [r7, #28]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d017      	beq.n	8014b7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014b4c:	69fb      	ldr	r3, [r7, #28]
 8014b4e:	2200      	movs	r2, #0
 8014b50:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014b54:	88fa      	ldrh	r2, [r7, #6]
 8014b56:	2300      	movs	r3, #0
 8014b58:	9303      	str	r3, [sp, #12]
 8014b5a:	69fb      	ldr	r3, [r7, #28]
 8014b5c:	9302      	str	r3, [sp, #8]
 8014b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b60:	9301      	str	r3, [sp, #4]
 8014b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b64:	9300      	str	r3, [sp, #0]
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	68b9      	ldr	r1, [r7, #8]
 8014b6a:	68f8      	ldr	r0, [r7, #12]
 8014b6c:	f000 f80e 	bl	8014b8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014b70:	69f8      	ldr	r0, [r7, #28]
 8014b72:	f000 f89b 	bl	8014cac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014b76:	2301      	movs	r3, #1
 8014b78:	61bb      	str	r3, [r7, #24]
 8014b7a:	e002      	b.n	8014b82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014b82:	69bb      	ldr	r3, [r7, #24]
	}
 8014b84:	4618      	mov	r0, r3
 8014b86:	3720      	adds	r7, #32
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bd80      	pop	{r7, pc}

08014b8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b088      	sub	sp, #32
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	60f8      	str	r0, [r7, #12]
 8014b94:	60b9      	str	r1, [r7, #8]
 8014b96:	607a      	str	r2, [r7, #4]
 8014b98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	009b      	lsls	r3, r3, #2
 8014ba2:	461a      	mov	r2, r3
 8014ba4:	21a5      	movs	r1, #165	; 0xa5
 8014ba6:	f002 f811 	bl	8016bcc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014bae:	6879      	ldr	r1, [r7, #4]
 8014bb0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014bb4:	440b      	add	r3, r1
 8014bb6:	009b      	lsls	r3, r3, #2
 8014bb8:	4413      	add	r3, r2
 8014bba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014bbc:	69bb      	ldr	r3, [r7, #24]
 8014bbe:	f023 0307 	bic.w	r3, r3, #7
 8014bc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014bc4:	69bb      	ldr	r3, [r7, #24]
 8014bc6:	f003 0307 	and.w	r3, r3, #7
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d00a      	beq.n	8014be4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8014bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bd2:	f383 8811 	msr	BASEPRI, r3
 8014bd6:	f3bf 8f6f 	isb	sy
 8014bda:	f3bf 8f4f 	dsb	sy
 8014bde:	617b      	str	r3, [r7, #20]
}
 8014be0:	bf00      	nop
 8014be2:	e7fe      	b.n	8014be2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014be4:	68bb      	ldr	r3, [r7, #8]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d01f      	beq.n	8014c2a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014bea:	2300      	movs	r3, #0
 8014bec:	61fb      	str	r3, [r7, #28]
 8014bee:	e012      	b.n	8014c16 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014bf0:	68ba      	ldr	r2, [r7, #8]
 8014bf2:	69fb      	ldr	r3, [r7, #28]
 8014bf4:	4413      	add	r3, r2
 8014bf6:	7819      	ldrb	r1, [r3, #0]
 8014bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bfa:	69fb      	ldr	r3, [r7, #28]
 8014bfc:	4413      	add	r3, r2
 8014bfe:	3334      	adds	r3, #52	; 0x34
 8014c00:	460a      	mov	r2, r1
 8014c02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014c04:	68ba      	ldr	r2, [r7, #8]
 8014c06:	69fb      	ldr	r3, [r7, #28]
 8014c08:	4413      	add	r3, r2
 8014c0a:	781b      	ldrb	r3, [r3, #0]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d006      	beq.n	8014c1e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014c10:	69fb      	ldr	r3, [r7, #28]
 8014c12:	3301      	adds	r3, #1
 8014c14:	61fb      	str	r3, [r7, #28]
 8014c16:	69fb      	ldr	r3, [r7, #28]
 8014c18:	2b0f      	cmp	r3, #15
 8014c1a:	d9e9      	bls.n	8014bf0 <prvInitialiseNewTask+0x64>
 8014c1c:	e000      	b.n	8014c20 <prvInitialiseNewTask+0x94>
			{
				break;
 8014c1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c22:	2200      	movs	r2, #0
 8014c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014c28:	e003      	b.n	8014c32 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c34:	2b37      	cmp	r3, #55	; 0x37
 8014c36:	d901      	bls.n	8014c3c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014c38:	2337      	movs	r3, #55	; 0x37
 8014c3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c50:	3304      	adds	r3, #4
 8014c52:	4618      	mov	r0, r3
 8014c54:	f7ff f8be 	bl	8013dd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c5a:	3318      	adds	r3, #24
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	f7ff f8b9 	bl	8013dd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c80:	2200      	movs	r2, #0
 8014c82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014c86:	683a      	ldr	r2, [r7, #0]
 8014c88:	68f9      	ldr	r1, [r7, #12]
 8014c8a:	69b8      	ldr	r0, [r7, #24]
 8014c8c:	f001 fb20 	bl	80162d0 <pxPortInitialiseStack>
 8014c90:	4602      	mov	r2, r0
 8014c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d002      	beq.n	8014ca2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ca0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014ca2:	bf00      	nop
 8014ca4:	3720      	adds	r7, #32
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	bd80      	pop	{r7, pc}
	...

08014cac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b082      	sub	sp, #8
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014cb4:	f001 fc36 	bl	8016524 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014cb8:	4b2d      	ldr	r3, [pc, #180]	; (8014d70 <prvAddNewTaskToReadyList+0xc4>)
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	3301      	adds	r3, #1
 8014cbe:	4a2c      	ldr	r2, [pc, #176]	; (8014d70 <prvAddNewTaskToReadyList+0xc4>)
 8014cc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014cc2:	4b2c      	ldr	r3, [pc, #176]	; (8014d74 <prvAddNewTaskToReadyList+0xc8>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d109      	bne.n	8014cde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014cca:	4a2a      	ldr	r2, [pc, #168]	; (8014d74 <prvAddNewTaskToReadyList+0xc8>)
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014cd0:	4b27      	ldr	r3, [pc, #156]	; (8014d70 <prvAddNewTaskToReadyList+0xc4>)
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	2b01      	cmp	r3, #1
 8014cd6:	d110      	bne.n	8014cfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014cd8:	f000 fdd6 	bl	8015888 <prvInitialiseTaskLists>
 8014cdc:	e00d      	b.n	8014cfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014cde:	4b26      	ldr	r3, [pc, #152]	; (8014d78 <prvAddNewTaskToReadyList+0xcc>)
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d109      	bne.n	8014cfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014ce6:	4b23      	ldr	r3, [pc, #140]	; (8014d74 <prvAddNewTaskToReadyList+0xc8>)
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cf0:	429a      	cmp	r2, r3
 8014cf2:	d802      	bhi.n	8014cfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014cf4:	4a1f      	ldr	r2, [pc, #124]	; (8014d74 <prvAddNewTaskToReadyList+0xc8>)
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014cfa:	4b20      	ldr	r3, [pc, #128]	; (8014d7c <prvAddNewTaskToReadyList+0xd0>)
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	3301      	adds	r3, #1
 8014d00:	4a1e      	ldr	r2, [pc, #120]	; (8014d7c <prvAddNewTaskToReadyList+0xd0>)
 8014d02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014d04:	4b1d      	ldr	r3, [pc, #116]	; (8014d7c <prvAddNewTaskToReadyList+0xd0>)
 8014d06:	681a      	ldr	r2, [r3, #0]
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d10:	4b1b      	ldr	r3, [pc, #108]	; (8014d80 <prvAddNewTaskToReadyList+0xd4>)
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	429a      	cmp	r2, r3
 8014d16:	d903      	bls.n	8014d20 <prvAddNewTaskToReadyList+0x74>
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d1c:	4a18      	ldr	r2, [pc, #96]	; (8014d80 <prvAddNewTaskToReadyList+0xd4>)
 8014d1e:	6013      	str	r3, [r2, #0]
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d24:	4613      	mov	r3, r2
 8014d26:	009b      	lsls	r3, r3, #2
 8014d28:	4413      	add	r3, r2
 8014d2a:	009b      	lsls	r3, r3, #2
 8014d2c:	4a15      	ldr	r2, [pc, #84]	; (8014d84 <prvAddNewTaskToReadyList+0xd8>)
 8014d2e:	441a      	add	r2, r3
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	3304      	adds	r3, #4
 8014d34:	4619      	mov	r1, r3
 8014d36:	4610      	mov	r0, r2
 8014d38:	f7ff f859 	bl	8013dee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014d3c:	f001 fc22 	bl	8016584 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014d40:	4b0d      	ldr	r3, [pc, #52]	; (8014d78 <prvAddNewTaskToReadyList+0xcc>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d00e      	beq.n	8014d66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014d48:	4b0a      	ldr	r3, [pc, #40]	; (8014d74 <prvAddNewTaskToReadyList+0xc8>)
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d52:	429a      	cmp	r2, r3
 8014d54:	d207      	bcs.n	8014d66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014d56:	4b0c      	ldr	r3, [pc, #48]	; (8014d88 <prvAddNewTaskToReadyList+0xdc>)
 8014d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d5c:	601a      	str	r2, [r3, #0]
 8014d5e:	f3bf 8f4f 	dsb	sy
 8014d62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014d66:	bf00      	nop
 8014d68:	3708      	adds	r7, #8
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bd80      	pop	{r7, pc}
 8014d6e:	bf00      	nop
 8014d70:	24001cb8 	.word	0x24001cb8
 8014d74:	240017e4 	.word	0x240017e4
 8014d78:	24001cc4 	.word	0x24001cc4
 8014d7c:	24001cd4 	.word	0x24001cd4
 8014d80:	24001cc0 	.word	0x24001cc0
 8014d84:	240017e8 	.word	0x240017e8
 8014d88:	e000ed04 	.word	0xe000ed04

08014d8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b084      	sub	sp, #16
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014d94:	2300      	movs	r3, #0
 8014d96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d017      	beq.n	8014dce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014d9e:	4b13      	ldr	r3, [pc, #76]	; (8014dec <vTaskDelay+0x60>)
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d00a      	beq.n	8014dbc <vTaskDelay+0x30>
	__asm volatile
 8014da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014daa:	f383 8811 	msr	BASEPRI, r3
 8014dae:	f3bf 8f6f 	isb	sy
 8014db2:	f3bf 8f4f 	dsb	sy
 8014db6:	60bb      	str	r3, [r7, #8]
}
 8014db8:	bf00      	nop
 8014dba:	e7fe      	b.n	8014dba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014dbc:	f000 f99a 	bl	80150f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014dc0:	2100      	movs	r1, #0
 8014dc2:	6878      	ldr	r0, [r7, #4]
 8014dc4:	f000 fec2 	bl	8015b4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014dc8:	f000 f9a2 	bl	8015110 <xTaskResumeAll>
 8014dcc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d107      	bne.n	8014de4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014dd4:	4b06      	ldr	r3, [pc, #24]	; (8014df0 <vTaskDelay+0x64>)
 8014dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014dda:	601a      	str	r2, [r3, #0]
 8014ddc:	f3bf 8f4f 	dsb	sy
 8014de0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014de4:	bf00      	nop
 8014de6:	3710      	adds	r7, #16
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd80      	pop	{r7, pc}
 8014dec:	24001ce0 	.word	0x24001ce0
 8014df0:	e000ed04 	.word	0xe000ed04

08014df4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b084      	sub	sp, #16
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014dfc:	f001 fb92 	bl	8016524 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d102      	bne.n	8014e0c <vTaskSuspend+0x18>
 8014e06:	4b30      	ldr	r3, [pc, #192]	; (8014ec8 <vTaskSuspend+0xd4>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	e000      	b.n	8014e0e <vTaskSuspend+0x1a>
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	3304      	adds	r3, #4
 8014e14:	4618      	mov	r0, r3
 8014e16:	f7ff f847 	bl	8013ea8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d004      	beq.n	8014e2c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	3318      	adds	r3, #24
 8014e26:	4618      	mov	r0, r3
 8014e28:	f7ff f83e 	bl	8013ea8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	3304      	adds	r3, #4
 8014e30:	4619      	mov	r1, r3
 8014e32:	4826      	ldr	r0, [pc, #152]	; (8014ecc <vTaskSuspend+0xd8>)
 8014e34:	f7fe ffdb 	bl	8013dee <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014e3e:	b2db      	uxtb	r3, r3
 8014e40:	2b01      	cmp	r3, #1
 8014e42:	d103      	bne.n	8014e4c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	2200      	movs	r2, #0
 8014e48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014e4c:	f001 fb9a 	bl	8016584 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014e50:	4b1f      	ldr	r3, [pc, #124]	; (8014ed0 <vTaskSuspend+0xdc>)
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d005      	beq.n	8014e64 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014e58:	f001 fb64 	bl	8016524 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014e5c:	f000 fdb2 	bl	80159c4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014e60:	f001 fb90 	bl	8016584 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014e64:	4b18      	ldr	r3, [pc, #96]	; (8014ec8 <vTaskSuspend+0xd4>)
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	68fa      	ldr	r2, [r7, #12]
 8014e6a:	429a      	cmp	r2, r3
 8014e6c:	d127      	bne.n	8014ebe <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8014e6e:	4b18      	ldr	r3, [pc, #96]	; (8014ed0 <vTaskSuspend+0xdc>)
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d017      	beq.n	8014ea6 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014e76:	4b17      	ldr	r3, [pc, #92]	; (8014ed4 <vTaskSuspend+0xe0>)
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d00a      	beq.n	8014e94 <vTaskSuspend+0xa0>
	__asm volatile
 8014e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e82:	f383 8811 	msr	BASEPRI, r3
 8014e86:	f3bf 8f6f 	isb	sy
 8014e8a:	f3bf 8f4f 	dsb	sy
 8014e8e:	60bb      	str	r3, [r7, #8]
}
 8014e90:	bf00      	nop
 8014e92:	e7fe      	b.n	8014e92 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8014e94:	4b10      	ldr	r3, [pc, #64]	; (8014ed8 <vTaskSuspend+0xe4>)
 8014e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e9a:	601a      	str	r2, [r3, #0]
 8014e9c:	f3bf 8f4f 	dsb	sy
 8014ea0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014ea4:	e00b      	b.n	8014ebe <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014ea6:	4b09      	ldr	r3, [pc, #36]	; (8014ecc <vTaskSuspend+0xd8>)
 8014ea8:	681a      	ldr	r2, [r3, #0]
 8014eaa:	4b0c      	ldr	r3, [pc, #48]	; (8014edc <vTaskSuspend+0xe8>)
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	429a      	cmp	r2, r3
 8014eb0:	d103      	bne.n	8014eba <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8014eb2:	4b05      	ldr	r3, [pc, #20]	; (8014ec8 <vTaskSuspend+0xd4>)
 8014eb4:	2200      	movs	r2, #0
 8014eb6:	601a      	str	r2, [r3, #0]
	}
 8014eb8:	e001      	b.n	8014ebe <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8014eba:	f000 fa99 	bl	80153f0 <vTaskSwitchContext>
	}
 8014ebe:	bf00      	nop
 8014ec0:	3710      	adds	r7, #16
 8014ec2:	46bd      	mov	sp, r7
 8014ec4:	bd80      	pop	{r7, pc}
 8014ec6:	bf00      	nop
 8014ec8:	240017e4 	.word	0x240017e4
 8014ecc:	24001ca4 	.word	0x24001ca4
 8014ed0:	24001cc4 	.word	0x24001cc4
 8014ed4:	24001ce0 	.word	0x24001ce0
 8014ed8:	e000ed04 	.word	0xe000ed04
 8014edc:	24001cb8 	.word	0x24001cb8

08014ee0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014ee0:	b480      	push	{r7}
 8014ee2:	b087      	sub	sp, #28
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014ee8:	2300      	movs	r3, #0
 8014eea:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d10a      	bne.n	8014f0c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8014ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014efa:	f383 8811 	msr	BASEPRI, r3
 8014efe:	f3bf 8f6f 	isb	sy
 8014f02:	f3bf 8f4f 	dsb	sy
 8014f06:	60fb      	str	r3, [r7, #12]
}
 8014f08:	bf00      	nop
 8014f0a:	e7fe      	b.n	8014f0a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014f0c:	693b      	ldr	r3, [r7, #16]
 8014f0e:	695b      	ldr	r3, [r3, #20]
 8014f10:	4a0a      	ldr	r2, [pc, #40]	; (8014f3c <prvTaskIsTaskSuspended+0x5c>)
 8014f12:	4293      	cmp	r3, r2
 8014f14:	d10a      	bne.n	8014f2c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014f16:	693b      	ldr	r3, [r7, #16]
 8014f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f1a:	4a09      	ldr	r2, [pc, #36]	; (8014f40 <prvTaskIsTaskSuspended+0x60>)
 8014f1c:	4293      	cmp	r3, r2
 8014f1e:	d005      	beq.n	8014f2c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014f20:	693b      	ldr	r3, [r7, #16]
 8014f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d101      	bne.n	8014f2c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8014f28:	2301      	movs	r3, #1
 8014f2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014f2c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014f2e:	4618      	mov	r0, r3
 8014f30:	371c      	adds	r7, #28
 8014f32:	46bd      	mov	sp, r7
 8014f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f38:	4770      	bx	lr
 8014f3a:	bf00      	nop
 8014f3c:	24001ca4 	.word	0x24001ca4
 8014f40:	24001c78 	.word	0x24001c78

08014f44 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b08a      	sub	sp, #40	; 0x28
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d10a      	bne.n	8014f70 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8014f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f5e:	f383 8811 	msr	BASEPRI, r3
 8014f62:	f3bf 8f6f 	isb	sy
 8014f66:	f3bf 8f4f 	dsb	sy
 8014f6a:	61bb      	str	r3, [r7, #24]
}
 8014f6c:	bf00      	nop
 8014f6e:	e7fe      	b.n	8014f6e <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014f70:	f001 fbba 	bl	80166e8 <vPortValidateInterruptPriority>
	__asm volatile
 8014f74:	f3ef 8211 	mrs	r2, BASEPRI
 8014f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f7c:	f383 8811 	msr	BASEPRI, r3
 8014f80:	f3bf 8f6f 	isb	sy
 8014f84:	f3bf 8f4f 	dsb	sy
 8014f88:	617a      	str	r2, [r7, #20]
 8014f8a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014f8c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014f8e:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014f90:	6a38      	ldr	r0, [r7, #32]
 8014f92:	f7ff ffa5 	bl	8014ee0 <prvTaskIsTaskSuspended>
 8014f96:	4603      	mov	r3, r0
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d030      	beq.n	8014ffe <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014f9c:	4b1d      	ldr	r3, [pc, #116]	; (8015014 <xTaskResumeFromISR+0xd0>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d126      	bne.n	8014ff2 <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014fa4:	6a3b      	ldr	r3, [r7, #32]
 8014fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fa8:	4b1b      	ldr	r3, [pc, #108]	; (8015018 <xTaskResumeFromISR+0xd4>)
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	d301      	bcc.n	8014fb6 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8014fb2:	2301      	movs	r3, #1
 8014fb4:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014fb6:	6a3b      	ldr	r3, [r7, #32]
 8014fb8:	3304      	adds	r3, #4
 8014fba:	4618      	mov	r0, r3
 8014fbc:	f7fe ff74 	bl	8013ea8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014fc0:	6a3b      	ldr	r3, [r7, #32]
 8014fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fc4:	4b15      	ldr	r3, [pc, #84]	; (801501c <xTaskResumeFromISR+0xd8>)
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	429a      	cmp	r2, r3
 8014fca:	d903      	bls.n	8014fd4 <xTaskResumeFromISR+0x90>
 8014fcc:	6a3b      	ldr	r3, [r7, #32]
 8014fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fd0:	4a12      	ldr	r2, [pc, #72]	; (801501c <xTaskResumeFromISR+0xd8>)
 8014fd2:	6013      	str	r3, [r2, #0]
 8014fd4:	6a3b      	ldr	r3, [r7, #32]
 8014fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fd8:	4613      	mov	r3, r2
 8014fda:	009b      	lsls	r3, r3, #2
 8014fdc:	4413      	add	r3, r2
 8014fde:	009b      	lsls	r3, r3, #2
 8014fe0:	4a0f      	ldr	r2, [pc, #60]	; (8015020 <xTaskResumeFromISR+0xdc>)
 8014fe2:	441a      	add	r2, r3
 8014fe4:	6a3b      	ldr	r3, [r7, #32]
 8014fe6:	3304      	adds	r3, #4
 8014fe8:	4619      	mov	r1, r3
 8014fea:	4610      	mov	r0, r2
 8014fec:	f7fe feff 	bl	8013dee <vListInsertEnd>
 8014ff0:	e005      	b.n	8014ffe <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014ff2:	6a3b      	ldr	r3, [r7, #32]
 8014ff4:	3318      	adds	r3, #24
 8014ff6:	4619      	mov	r1, r3
 8014ff8:	480a      	ldr	r0, [pc, #40]	; (8015024 <xTaskResumeFromISR+0xe0>)
 8014ffa:	f7fe fef8 	bl	8013dee <vListInsertEnd>
 8014ffe:	69fb      	ldr	r3, [r7, #28]
 8015000:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	f383 8811 	msr	BASEPRI, r3
}
 8015008:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 801500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801500c:	4618      	mov	r0, r3
 801500e:	3728      	adds	r7, #40	; 0x28
 8015010:	46bd      	mov	sp, r7
 8015012:	bd80      	pop	{r7, pc}
 8015014:	24001ce0 	.word	0x24001ce0
 8015018:	240017e4 	.word	0x240017e4
 801501c:	24001cc0 	.word	0x24001cc0
 8015020:	240017e8 	.word	0x240017e8
 8015024:	24001c78 	.word	0x24001c78

08015028 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b08a      	sub	sp, #40	; 0x28
 801502c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801502e:	2300      	movs	r3, #0
 8015030:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015032:	2300      	movs	r3, #0
 8015034:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015036:	463a      	mov	r2, r7
 8015038:	1d39      	adds	r1, r7, #4
 801503a:	f107 0308 	add.w	r3, r7, #8
 801503e:	4618      	mov	r0, r3
 8015040:	f7fe fc08 	bl	8013854 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015044:	6839      	ldr	r1, [r7, #0]
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	68ba      	ldr	r2, [r7, #8]
 801504a:	9202      	str	r2, [sp, #8]
 801504c:	9301      	str	r3, [sp, #4]
 801504e:	2300      	movs	r3, #0
 8015050:	9300      	str	r3, [sp, #0]
 8015052:	2300      	movs	r3, #0
 8015054:	460a      	mov	r2, r1
 8015056:	4921      	ldr	r1, [pc, #132]	; (80150dc <vTaskStartScheduler+0xb4>)
 8015058:	4821      	ldr	r0, [pc, #132]	; (80150e0 <vTaskStartScheduler+0xb8>)
 801505a:	f7ff fcf5 	bl	8014a48 <xTaskCreateStatic>
 801505e:	4603      	mov	r3, r0
 8015060:	4a20      	ldr	r2, [pc, #128]	; (80150e4 <vTaskStartScheduler+0xbc>)
 8015062:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015064:	4b1f      	ldr	r3, [pc, #124]	; (80150e4 <vTaskStartScheduler+0xbc>)
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d002      	beq.n	8015072 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801506c:	2301      	movs	r3, #1
 801506e:	617b      	str	r3, [r7, #20]
 8015070:	e001      	b.n	8015076 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015072:	2300      	movs	r3, #0
 8015074:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8015076:	697b      	ldr	r3, [r7, #20]
 8015078:	2b01      	cmp	r3, #1
 801507a:	d102      	bne.n	8015082 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801507c:	f000 fdba 	bl	8015bf4 <xTimerCreateTimerTask>
 8015080:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015082:	697b      	ldr	r3, [r7, #20]
 8015084:	2b01      	cmp	r3, #1
 8015086:	d116      	bne.n	80150b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8015088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801508c:	f383 8811 	msr	BASEPRI, r3
 8015090:	f3bf 8f6f 	isb	sy
 8015094:	f3bf 8f4f 	dsb	sy
 8015098:	613b      	str	r3, [r7, #16]
}
 801509a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801509c:	4b12      	ldr	r3, [pc, #72]	; (80150e8 <vTaskStartScheduler+0xc0>)
 801509e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80150a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80150a4:	4b11      	ldr	r3, [pc, #68]	; (80150ec <vTaskStartScheduler+0xc4>)
 80150a6:	2201      	movs	r2, #1
 80150a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80150aa:	4b11      	ldr	r3, [pc, #68]	; (80150f0 <vTaskStartScheduler+0xc8>)
 80150ac:	2200      	movs	r2, #0
 80150ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80150b0:	f001 f996 	bl	80163e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80150b4:	e00e      	b.n	80150d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80150b6:	697b      	ldr	r3, [r7, #20]
 80150b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80150bc:	d10a      	bne.n	80150d4 <vTaskStartScheduler+0xac>
	__asm volatile
 80150be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150c2:	f383 8811 	msr	BASEPRI, r3
 80150c6:	f3bf 8f6f 	isb	sy
 80150ca:	f3bf 8f4f 	dsb	sy
 80150ce:	60fb      	str	r3, [r7, #12]
}
 80150d0:	bf00      	nop
 80150d2:	e7fe      	b.n	80150d2 <vTaskStartScheduler+0xaa>
}
 80150d4:	bf00      	nop
 80150d6:	3718      	adds	r7, #24
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}
 80150dc:	08017864 	.word	0x08017864
 80150e0:	08015859 	.word	0x08015859
 80150e4:	24001cdc 	.word	0x24001cdc
 80150e8:	24001cd8 	.word	0x24001cd8
 80150ec:	24001cc4 	.word	0x24001cc4
 80150f0:	24001cbc 	.word	0x24001cbc

080150f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80150f4:	b480      	push	{r7}
 80150f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80150f8:	4b04      	ldr	r3, [pc, #16]	; (801510c <vTaskSuspendAll+0x18>)
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	3301      	adds	r3, #1
 80150fe:	4a03      	ldr	r2, [pc, #12]	; (801510c <vTaskSuspendAll+0x18>)
 8015100:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015102:	bf00      	nop
 8015104:	46bd      	mov	sp, r7
 8015106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510a:	4770      	bx	lr
 801510c:	24001ce0 	.word	0x24001ce0

08015110 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b084      	sub	sp, #16
 8015114:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015116:	2300      	movs	r3, #0
 8015118:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801511a:	2300      	movs	r3, #0
 801511c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801511e:	4b42      	ldr	r3, [pc, #264]	; (8015228 <xTaskResumeAll+0x118>)
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d10a      	bne.n	801513c <xTaskResumeAll+0x2c>
	__asm volatile
 8015126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801512a:	f383 8811 	msr	BASEPRI, r3
 801512e:	f3bf 8f6f 	isb	sy
 8015132:	f3bf 8f4f 	dsb	sy
 8015136:	603b      	str	r3, [r7, #0]
}
 8015138:	bf00      	nop
 801513a:	e7fe      	b.n	801513a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801513c:	f001 f9f2 	bl	8016524 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015140:	4b39      	ldr	r3, [pc, #228]	; (8015228 <xTaskResumeAll+0x118>)
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	3b01      	subs	r3, #1
 8015146:	4a38      	ldr	r2, [pc, #224]	; (8015228 <xTaskResumeAll+0x118>)
 8015148:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801514a:	4b37      	ldr	r3, [pc, #220]	; (8015228 <xTaskResumeAll+0x118>)
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d162      	bne.n	8015218 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015152:	4b36      	ldr	r3, [pc, #216]	; (801522c <xTaskResumeAll+0x11c>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d05e      	beq.n	8015218 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801515a:	e02f      	b.n	80151bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801515c:	4b34      	ldr	r3, [pc, #208]	; (8015230 <xTaskResumeAll+0x120>)
 801515e:	68db      	ldr	r3, [r3, #12]
 8015160:	68db      	ldr	r3, [r3, #12]
 8015162:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	3318      	adds	r3, #24
 8015168:	4618      	mov	r0, r3
 801516a:	f7fe fe9d 	bl	8013ea8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	3304      	adds	r3, #4
 8015172:	4618      	mov	r0, r3
 8015174:	f7fe fe98 	bl	8013ea8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801517c:	4b2d      	ldr	r3, [pc, #180]	; (8015234 <xTaskResumeAll+0x124>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	429a      	cmp	r2, r3
 8015182:	d903      	bls.n	801518c <xTaskResumeAll+0x7c>
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015188:	4a2a      	ldr	r2, [pc, #168]	; (8015234 <xTaskResumeAll+0x124>)
 801518a:	6013      	str	r3, [r2, #0]
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015190:	4613      	mov	r3, r2
 8015192:	009b      	lsls	r3, r3, #2
 8015194:	4413      	add	r3, r2
 8015196:	009b      	lsls	r3, r3, #2
 8015198:	4a27      	ldr	r2, [pc, #156]	; (8015238 <xTaskResumeAll+0x128>)
 801519a:	441a      	add	r2, r3
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	3304      	adds	r3, #4
 80151a0:	4619      	mov	r1, r3
 80151a2:	4610      	mov	r0, r2
 80151a4:	f7fe fe23 	bl	8013dee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151ac:	4b23      	ldr	r3, [pc, #140]	; (801523c <xTaskResumeAll+0x12c>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151b2:	429a      	cmp	r2, r3
 80151b4:	d302      	bcc.n	80151bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80151b6:	4b22      	ldr	r3, [pc, #136]	; (8015240 <xTaskResumeAll+0x130>)
 80151b8:	2201      	movs	r2, #1
 80151ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80151bc:	4b1c      	ldr	r3, [pc, #112]	; (8015230 <xTaskResumeAll+0x120>)
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d1cb      	bne.n	801515c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d001      	beq.n	80151ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80151ca:	f000 fbfb 	bl	80159c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80151ce:	4b1d      	ldr	r3, [pc, #116]	; (8015244 <xTaskResumeAll+0x134>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d010      	beq.n	80151fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80151da:	f000 f847 	bl	801526c <xTaskIncrementTick>
 80151de:	4603      	mov	r3, r0
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d002      	beq.n	80151ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80151e4:	4b16      	ldr	r3, [pc, #88]	; (8015240 <xTaskResumeAll+0x130>)
 80151e6:	2201      	movs	r2, #1
 80151e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	3b01      	subs	r3, #1
 80151ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d1f1      	bne.n	80151da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80151f6:	4b13      	ldr	r3, [pc, #76]	; (8015244 <xTaskResumeAll+0x134>)
 80151f8:	2200      	movs	r2, #0
 80151fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80151fc:	4b10      	ldr	r3, [pc, #64]	; (8015240 <xTaskResumeAll+0x130>)
 80151fe:	681b      	ldr	r3, [r3, #0]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d009      	beq.n	8015218 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015204:	2301      	movs	r3, #1
 8015206:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015208:	4b0f      	ldr	r3, [pc, #60]	; (8015248 <xTaskResumeAll+0x138>)
 801520a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801520e:	601a      	str	r2, [r3, #0]
 8015210:	f3bf 8f4f 	dsb	sy
 8015214:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015218:	f001 f9b4 	bl	8016584 <vPortExitCritical>

	return xAlreadyYielded;
 801521c:	68bb      	ldr	r3, [r7, #8]
}
 801521e:	4618      	mov	r0, r3
 8015220:	3710      	adds	r7, #16
 8015222:	46bd      	mov	sp, r7
 8015224:	bd80      	pop	{r7, pc}
 8015226:	bf00      	nop
 8015228:	24001ce0 	.word	0x24001ce0
 801522c:	24001cb8 	.word	0x24001cb8
 8015230:	24001c78 	.word	0x24001c78
 8015234:	24001cc0 	.word	0x24001cc0
 8015238:	240017e8 	.word	0x240017e8
 801523c:	240017e4 	.word	0x240017e4
 8015240:	24001ccc 	.word	0x24001ccc
 8015244:	24001cc8 	.word	0x24001cc8
 8015248:	e000ed04 	.word	0xe000ed04

0801524c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801524c:	b480      	push	{r7}
 801524e:	b083      	sub	sp, #12
 8015250:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015252:	4b05      	ldr	r3, [pc, #20]	; (8015268 <xTaskGetTickCount+0x1c>)
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015258:	687b      	ldr	r3, [r7, #4]
}
 801525a:	4618      	mov	r0, r3
 801525c:	370c      	adds	r7, #12
 801525e:	46bd      	mov	sp, r7
 8015260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015264:	4770      	bx	lr
 8015266:	bf00      	nop
 8015268:	24001cbc 	.word	0x24001cbc

0801526c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b086      	sub	sp, #24
 8015270:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015272:	2300      	movs	r3, #0
 8015274:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015276:	4b53      	ldr	r3, [pc, #332]	; (80153c4 <xTaskIncrementTick+0x158>)
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	2b00      	cmp	r3, #0
 801527c:	f040 8095 	bne.w	80153aa <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015280:	4b51      	ldr	r3, [pc, #324]	; (80153c8 <xTaskIncrementTick+0x15c>)
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	3301      	adds	r3, #1
 8015286:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015288:	4a4f      	ldr	r2, [pc, #316]	; (80153c8 <xTaskIncrementTick+0x15c>)
 801528a:	693b      	ldr	r3, [r7, #16]
 801528c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801528e:	693b      	ldr	r3, [r7, #16]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d120      	bne.n	80152d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8015294:	4b4d      	ldr	r3, [pc, #308]	; (80153cc <xTaskIncrementTick+0x160>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d00a      	beq.n	80152b4 <xTaskIncrementTick+0x48>
	__asm volatile
 801529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152a2:	f383 8811 	msr	BASEPRI, r3
 80152a6:	f3bf 8f6f 	isb	sy
 80152aa:	f3bf 8f4f 	dsb	sy
 80152ae:	603b      	str	r3, [r7, #0]
}
 80152b0:	bf00      	nop
 80152b2:	e7fe      	b.n	80152b2 <xTaskIncrementTick+0x46>
 80152b4:	4b45      	ldr	r3, [pc, #276]	; (80153cc <xTaskIncrementTick+0x160>)
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	60fb      	str	r3, [r7, #12]
 80152ba:	4b45      	ldr	r3, [pc, #276]	; (80153d0 <xTaskIncrementTick+0x164>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	4a43      	ldr	r2, [pc, #268]	; (80153cc <xTaskIncrementTick+0x160>)
 80152c0:	6013      	str	r3, [r2, #0]
 80152c2:	4a43      	ldr	r2, [pc, #268]	; (80153d0 <xTaskIncrementTick+0x164>)
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	6013      	str	r3, [r2, #0]
 80152c8:	4b42      	ldr	r3, [pc, #264]	; (80153d4 <xTaskIncrementTick+0x168>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	3301      	adds	r3, #1
 80152ce:	4a41      	ldr	r2, [pc, #260]	; (80153d4 <xTaskIncrementTick+0x168>)
 80152d0:	6013      	str	r3, [r2, #0]
 80152d2:	f000 fb77 	bl	80159c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80152d6:	4b40      	ldr	r3, [pc, #256]	; (80153d8 <xTaskIncrementTick+0x16c>)
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	693a      	ldr	r2, [r7, #16]
 80152dc:	429a      	cmp	r2, r3
 80152de:	d349      	bcc.n	8015374 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80152e0:	4b3a      	ldr	r3, [pc, #232]	; (80153cc <xTaskIncrementTick+0x160>)
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d104      	bne.n	80152f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80152ea:	4b3b      	ldr	r3, [pc, #236]	; (80153d8 <xTaskIncrementTick+0x16c>)
 80152ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80152f0:	601a      	str	r2, [r3, #0]
					break;
 80152f2:	e03f      	b.n	8015374 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152f4:	4b35      	ldr	r3, [pc, #212]	; (80153cc <xTaskIncrementTick+0x160>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	68db      	ldr	r3, [r3, #12]
 80152fa:	68db      	ldr	r3, [r3, #12]
 80152fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80152fe:	68bb      	ldr	r3, [r7, #8]
 8015300:	685b      	ldr	r3, [r3, #4]
 8015302:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015304:	693a      	ldr	r2, [r7, #16]
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	429a      	cmp	r2, r3
 801530a:	d203      	bcs.n	8015314 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801530c:	4a32      	ldr	r2, [pc, #200]	; (80153d8 <xTaskIncrementTick+0x16c>)
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015312:	e02f      	b.n	8015374 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015314:	68bb      	ldr	r3, [r7, #8]
 8015316:	3304      	adds	r3, #4
 8015318:	4618      	mov	r0, r3
 801531a:	f7fe fdc5 	bl	8013ea8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801531e:	68bb      	ldr	r3, [r7, #8]
 8015320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015322:	2b00      	cmp	r3, #0
 8015324:	d004      	beq.n	8015330 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015326:	68bb      	ldr	r3, [r7, #8]
 8015328:	3318      	adds	r3, #24
 801532a:	4618      	mov	r0, r3
 801532c:	f7fe fdbc 	bl	8013ea8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015330:	68bb      	ldr	r3, [r7, #8]
 8015332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015334:	4b29      	ldr	r3, [pc, #164]	; (80153dc <xTaskIncrementTick+0x170>)
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	429a      	cmp	r2, r3
 801533a:	d903      	bls.n	8015344 <xTaskIncrementTick+0xd8>
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015340:	4a26      	ldr	r2, [pc, #152]	; (80153dc <xTaskIncrementTick+0x170>)
 8015342:	6013      	str	r3, [r2, #0]
 8015344:	68bb      	ldr	r3, [r7, #8]
 8015346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015348:	4613      	mov	r3, r2
 801534a:	009b      	lsls	r3, r3, #2
 801534c:	4413      	add	r3, r2
 801534e:	009b      	lsls	r3, r3, #2
 8015350:	4a23      	ldr	r2, [pc, #140]	; (80153e0 <xTaskIncrementTick+0x174>)
 8015352:	441a      	add	r2, r3
 8015354:	68bb      	ldr	r3, [r7, #8]
 8015356:	3304      	adds	r3, #4
 8015358:	4619      	mov	r1, r3
 801535a:	4610      	mov	r0, r2
 801535c:	f7fe fd47 	bl	8013dee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015360:	68bb      	ldr	r3, [r7, #8]
 8015362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015364:	4b1f      	ldr	r3, [pc, #124]	; (80153e4 <xTaskIncrementTick+0x178>)
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801536a:	429a      	cmp	r2, r3
 801536c:	d3b8      	bcc.n	80152e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801536e:	2301      	movs	r3, #1
 8015370:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015372:	e7b5      	b.n	80152e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015374:	4b1b      	ldr	r3, [pc, #108]	; (80153e4 <xTaskIncrementTick+0x178>)
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801537a:	4919      	ldr	r1, [pc, #100]	; (80153e0 <xTaskIncrementTick+0x174>)
 801537c:	4613      	mov	r3, r2
 801537e:	009b      	lsls	r3, r3, #2
 8015380:	4413      	add	r3, r2
 8015382:	009b      	lsls	r3, r3, #2
 8015384:	440b      	add	r3, r1
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	2b01      	cmp	r3, #1
 801538a:	d901      	bls.n	8015390 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801538c:	2301      	movs	r3, #1
 801538e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8015390:	4b15      	ldr	r3, [pc, #84]	; (80153e8 <xTaskIncrementTick+0x17c>)
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d101      	bne.n	801539c <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8015398:	f7eb f924 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801539c:	4b13      	ldr	r3, [pc, #76]	; (80153ec <xTaskIncrementTick+0x180>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d009      	beq.n	80153b8 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80153a4:	2301      	movs	r3, #1
 80153a6:	617b      	str	r3, [r7, #20]
 80153a8:	e006      	b.n	80153b8 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80153aa:	4b0f      	ldr	r3, [pc, #60]	; (80153e8 <xTaskIncrementTick+0x17c>)
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	3301      	adds	r3, #1
 80153b0:	4a0d      	ldr	r2, [pc, #52]	; (80153e8 <xTaskIncrementTick+0x17c>)
 80153b2:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80153b4:	f7eb f916 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80153b8:	697b      	ldr	r3, [r7, #20]
}
 80153ba:	4618      	mov	r0, r3
 80153bc:	3718      	adds	r7, #24
 80153be:	46bd      	mov	sp, r7
 80153c0:	bd80      	pop	{r7, pc}
 80153c2:	bf00      	nop
 80153c4:	24001ce0 	.word	0x24001ce0
 80153c8:	24001cbc 	.word	0x24001cbc
 80153cc:	24001c70 	.word	0x24001c70
 80153d0:	24001c74 	.word	0x24001c74
 80153d4:	24001cd0 	.word	0x24001cd0
 80153d8:	24001cd8 	.word	0x24001cd8
 80153dc:	24001cc0 	.word	0x24001cc0
 80153e0:	240017e8 	.word	0x240017e8
 80153e4:	240017e4 	.word	0x240017e4
 80153e8:	24001cc8 	.word	0x24001cc8
 80153ec:	24001ccc 	.word	0x24001ccc

080153f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80153f0:	b480      	push	{r7}
 80153f2:	b085      	sub	sp, #20
 80153f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80153f6:	4b28      	ldr	r3, [pc, #160]	; (8015498 <vTaskSwitchContext+0xa8>)
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d003      	beq.n	8015406 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80153fe:	4b27      	ldr	r3, [pc, #156]	; (801549c <vTaskSwitchContext+0xac>)
 8015400:	2201      	movs	r2, #1
 8015402:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015404:	e041      	b.n	801548a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8015406:	4b25      	ldr	r3, [pc, #148]	; (801549c <vTaskSwitchContext+0xac>)
 8015408:	2200      	movs	r2, #0
 801540a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801540c:	4b24      	ldr	r3, [pc, #144]	; (80154a0 <vTaskSwitchContext+0xb0>)
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	60fb      	str	r3, [r7, #12]
 8015412:	e010      	b.n	8015436 <vTaskSwitchContext+0x46>
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d10a      	bne.n	8015430 <vTaskSwitchContext+0x40>
	__asm volatile
 801541a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801541e:	f383 8811 	msr	BASEPRI, r3
 8015422:	f3bf 8f6f 	isb	sy
 8015426:	f3bf 8f4f 	dsb	sy
 801542a:	607b      	str	r3, [r7, #4]
}
 801542c:	bf00      	nop
 801542e:	e7fe      	b.n	801542e <vTaskSwitchContext+0x3e>
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	3b01      	subs	r3, #1
 8015434:	60fb      	str	r3, [r7, #12]
 8015436:	491b      	ldr	r1, [pc, #108]	; (80154a4 <vTaskSwitchContext+0xb4>)
 8015438:	68fa      	ldr	r2, [r7, #12]
 801543a:	4613      	mov	r3, r2
 801543c:	009b      	lsls	r3, r3, #2
 801543e:	4413      	add	r3, r2
 8015440:	009b      	lsls	r3, r3, #2
 8015442:	440b      	add	r3, r1
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d0e4      	beq.n	8015414 <vTaskSwitchContext+0x24>
 801544a:	68fa      	ldr	r2, [r7, #12]
 801544c:	4613      	mov	r3, r2
 801544e:	009b      	lsls	r3, r3, #2
 8015450:	4413      	add	r3, r2
 8015452:	009b      	lsls	r3, r3, #2
 8015454:	4a13      	ldr	r2, [pc, #76]	; (80154a4 <vTaskSwitchContext+0xb4>)
 8015456:	4413      	add	r3, r2
 8015458:	60bb      	str	r3, [r7, #8]
 801545a:	68bb      	ldr	r3, [r7, #8]
 801545c:	685b      	ldr	r3, [r3, #4]
 801545e:	685a      	ldr	r2, [r3, #4]
 8015460:	68bb      	ldr	r3, [r7, #8]
 8015462:	605a      	str	r2, [r3, #4]
 8015464:	68bb      	ldr	r3, [r7, #8]
 8015466:	685a      	ldr	r2, [r3, #4]
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	3308      	adds	r3, #8
 801546c:	429a      	cmp	r2, r3
 801546e:	d104      	bne.n	801547a <vTaskSwitchContext+0x8a>
 8015470:	68bb      	ldr	r3, [r7, #8]
 8015472:	685b      	ldr	r3, [r3, #4]
 8015474:	685a      	ldr	r2, [r3, #4]
 8015476:	68bb      	ldr	r3, [r7, #8]
 8015478:	605a      	str	r2, [r3, #4]
 801547a:	68bb      	ldr	r3, [r7, #8]
 801547c:	685b      	ldr	r3, [r3, #4]
 801547e:	68db      	ldr	r3, [r3, #12]
 8015480:	4a09      	ldr	r2, [pc, #36]	; (80154a8 <vTaskSwitchContext+0xb8>)
 8015482:	6013      	str	r3, [r2, #0]
 8015484:	4a06      	ldr	r2, [pc, #24]	; (80154a0 <vTaskSwitchContext+0xb0>)
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	6013      	str	r3, [r2, #0]
}
 801548a:	bf00      	nop
 801548c:	3714      	adds	r7, #20
 801548e:	46bd      	mov	sp, r7
 8015490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015494:	4770      	bx	lr
 8015496:	bf00      	nop
 8015498:	24001ce0 	.word	0x24001ce0
 801549c:	24001ccc 	.word	0x24001ccc
 80154a0:	24001cc0 	.word	0x24001cc0
 80154a4:	240017e8 	.word	0x240017e8
 80154a8:	240017e4 	.word	0x240017e4

080154ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b084      	sub	sp, #16
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
 80154b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d10a      	bne.n	80154d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80154bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154c0:	f383 8811 	msr	BASEPRI, r3
 80154c4:	f3bf 8f6f 	isb	sy
 80154c8:	f3bf 8f4f 	dsb	sy
 80154cc:	60fb      	str	r3, [r7, #12]
}
 80154ce:	bf00      	nop
 80154d0:	e7fe      	b.n	80154d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80154d2:	4b07      	ldr	r3, [pc, #28]	; (80154f0 <vTaskPlaceOnEventList+0x44>)
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	3318      	adds	r3, #24
 80154d8:	4619      	mov	r1, r3
 80154da:	6878      	ldr	r0, [r7, #4]
 80154dc:	f7fe fcab 	bl	8013e36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80154e0:	2101      	movs	r1, #1
 80154e2:	6838      	ldr	r0, [r7, #0]
 80154e4:	f000 fb32 	bl	8015b4c <prvAddCurrentTaskToDelayedList>
}
 80154e8:	bf00      	nop
 80154ea:	3710      	adds	r7, #16
 80154ec:	46bd      	mov	sp, r7
 80154ee:	bd80      	pop	{r7, pc}
 80154f0:	240017e4 	.word	0x240017e4

080154f4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b086      	sub	sp, #24
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	60f8      	str	r0, [r7, #12]
 80154fc:	60b9      	str	r1, [r7, #8]
 80154fe:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d10a      	bne.n	801551c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8015506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801550a:	f383 8811 	msr	BASEPRI, r3
 801550e:	f3bf 8f6f 	isb	sy
 8015512:	f3bf 8f4f 	dsb	sy
 8015516:	617b      	str	r3, [r7, #20]
}
 8015518:	bf00      	nop
 801551a:	e7fe      	b.n	801551a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801551c:	4b11      	ldr	r3, [pc, #68]	; (8015564 <vTaskPlaceOnUnorderedEventList+0x70>)
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d10a      	bne.n	801553a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8015524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015528:	f383 8811 	msr	BASEPRI, r3
 801552c:	f3bf 8f6f 	isb	sy
 8015530:	f3bf 8f4f 	dsb	sy
 8015534:	613b      	str	r3, [r7, #16]
}
 8015536:	bf00      	nop
 8015538:	e7fe      	b.n	8015538 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801553a:	4b0b      	ldr	r3, [pc, #44]	; (8015568 <vTaskPlaceOnUnorderedEventList+0x74>)
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	68ba      	ldr	r2, [r7, #8]
 8015540:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8015544:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015546:	4b08      	ldr	r3, [pc, #32]	; (8015568 <vTaskPlaceOnUnorderedEventList+0x74>)
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	3318      	adds	r3, #24
 801554c:	4619      	mov	r1, r3
 801554e:	68f8      	ldr	r0, [r7, #12]
 8015550:	f7fe fc4d 	bl	8013dee <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015554:	2101      	movs	r1, #1
 8015556:	6878      	ldr	r0, [r7, #4]
 8015558:	f000 faf8 	bl	8015b4c <prvAddCurrentTaskToDelayedList>
}
 801555c:	bf00      	nop
 801555e:	3718      	adds	r7, #24
 8015560:	46bd      	mov	sp, r7
 8015562:	bd80      	pop	{r7, pc}
 8015564:	24001ce0 	.word	0x24001ce0
 8015568:	240017e4 	.word	0x240017e4

0801556c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801556c:	b580      	push	{r7, lr}
 801556e:	b086      	sub	sp, #24
 8015570:	af00      	add	r7, sp, #0
 8015572:	60f8      	str	r0, [r7, #12]
 8015574:	60b9      	str	r1, [r7, #8]
 8015576:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d10a      	bne.n	8015594 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015582:	f383 8811 	msr	BASEPRI, r3
 8015586:	f3bf 8f6f 	isb	sy
 801558a:	f3bf 8f4f 	dsb	sy
 801558e:	617b      	str	r3, [r7, #20]
}
 8015590:	bf00      	nop
 8015592:	e7fe      	b.n	8015592 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015594:	4b0a      	ldr	r3, [pc, #40]	; (80155c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	3318      	adds	r3, #24
 801559a:	4619      	mov	r1, r3
 801559c:	68f8      	ldr	r0, [r7, #12]
 801559e:	f7fe fc26 	bl	8013dee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d002      	beq.n	80155ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80155a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80155ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80155ae:	6879      	ldr	r1, [r7, #4]
 80155b0:	68b8      	ldr	r0, [r7, #8]
 80155b2:	f000 facb 	bl	8015b4c <prvAddCurrentTaskToDelayedList>
	}
 80155b6:	bf00      	nop
 80155b8:	3718      	adds	r7, #24
 80155ba:	46bd      	mov	sp, r7
 80155bc:	bd80      	pop	{r7, pc}
 80155be:	bf00      	nop
 80155c0:	240017e4 	.word	0x240017e4

080155c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b086      	sub	sp, #24
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	68db      	ldr	r3, [r3, #12]
 80155d0:	68db      	ldr	r3, [r3, #12]
 80155d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80155d4:	693b      	ldr	r3, [r7, #16]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d10a      	bne.n	80155f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80155da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155de:	f383 8811 	msr	BASEPRI, r3
 80155e2:	f3bf 8f6f 	isb	sy
 80155e6:	f3bf 8f4f 	dsb	sy
 80155ea:	60fb      	str	r3, [r7, #12]
}
 80155ec:	bf00      	nop
 80155ee:	e7fe      	b.n	80155ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80155f0:	693b      	ldr	r3, [r7, #16]
 80155f2:	3318      	adds	r3, #24
 80155f4:	4618      	mov	r0, r3
 80155f6:	f7fe fc57 	bl	8013ea8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80155fa:	4b1e      	ldr	r3, [pc, #120]	; (8015674 <xTaskRemoveFromEventList+0xb0>)
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d11d      	bne.n	801563e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015602:	693b      	ldr	r3, [r7, #16]
 8015604:	3304      	adds	r3, #4
 8015606:	4618      	mov	r0, r3
 8015608:	f7fe fc4e 	bl	8013ea8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801560c:	693b      	ldr	r3, [r7, #16]
 801560e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015610:	4b19      	ldr	r3, [pc, #100]	; (8015678 <xTaskRemoveFromEventList+0xb4>)
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	429a      	cmp	r2, r3
 8015616:	d903      	bls.n	8015620 <xTaskRemoveFromEventList+0x5c>
 8015618:	693b      	ldr	r3, [r7, #16]
 801561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801561c:	4a16      	ldr	r2, [pc, #88]	; (8015678 <xTaskRemoveFromEventList+0xb4>)
 801561e:	6013      	str	r3, [r2, #0]
 8015620:	693b      	ldr	r3, [r7, #16]
 8015622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015624:	4613      	mov	r3, r2
 8015626:	009b      	lsls	r3, r3, #2
 8015628:	4413      	add	r3, r2
 801562a:	009b      	lsls	r3, r3, #2
 801562c:	4a13      	ldr	r2, [pc, #76]	; (801567c <xTaskRemoveFromEventList+0xb8>)
 801562e:	441a      	add	r2, r3
 8015630:	693b      	ldr	r3, [r7, #16]
 8015632:	3304      	adds	r3, #4
 8015634:	4619      	mov	r1, r3
 8015636:	4610      	mov	r0, r2
 8015638:	f7fe fbd9 	bl	8013dee <vListInsertEnd>
 801563c:	e005      	b.n	801564a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801563e:	693b      	ldr	r3, [r7, #16]
 8015640:	3318      	adds	r3, #24
 8015642:	4619      	mov	r1, r3
 8015644:	480e      	ldr	r0, [pc, #56]	; (8015680 <xTaskRemoveFromEventList+0xbc>)
 8015646:	f7fe fbd2 	bl	8013dee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801564a:	693b      	ldr	r3, [r7, #16]
 801564c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801564e:	4b0d      	ldr	r3, [pc, #52]	; (8015684 <xTaskRemoveFromEventList+0xc0>)
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015654:	429a      	cmp	r2, r3
 8015656:	d905      	bls.n	8015664 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015658:	2301      	movs	r3, #1
 801565a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801565c:	4b0a      	ldr	r3, [pc, #40]	; (8015688 <xTaskRemoveFromEventList+0xc4>)
 801565e:	2201      	movs	r2, #1
 8015660:	601a      	str	r2, [r3, #0]
 8015662:	e001      	b.n	8015668 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015664:	2300      	movs	r3, #0
 8015666:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015668:	697b      	ldr	r3, [r7, #20]
}
 801566a:	4618      	mov	r0, r3
 801566c:	3718      	adds	r7, #24
 801566e:	46bd      	mov	sp, r7
 8015670:	bd80      	pop	{r7, pc}
 8015672:	bf00      	nop
 8015674:	24001ce0 	.word	0x24001ce0
 8015678:	24001cc0 	.word	0x24001cc0
 801567c:	240017e8 	.word	0x240017e8
 8015680:	24001c78 	.word	0x24001c78
 8015684:	240017e4 	.word	0x240017e4
 8015688:	24001ccc 	.word	0x24001ccc

0801568c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b086      	sub	sp, #24
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
 8015694:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8015696:	4b29      	ldr	r3, [pc, #164]	; (801573c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d10a      	bne.n	80156b4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156a2:	f383 8811 	msr	BASEPRI, r3
 80156a6:	f3bf 8f6f 	isb	sy
 80156aa:	f3bf 8f4f 	dsb	sy
 80156ae:	613b      	str	r3, [r7, #16]
}
 80156b0:	bf00      	nop
 80156b2:	e7fe      	b.n	80156b2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80156b4:	683b      	ldr	r3, [r7, #0]
 80156b6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	68db      	ldr	r3, [r3, #12]
 80156c2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80156c4:	697b      	ldr	r3, [r7, #20]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d10a      	bne.n	80156e0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80156ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156ce:	f383 8811 	msr	BASEPRI, r3
 80156d2:	f3bf 8f6f 	isb	sy
 80156d6:	f3bf 8f4f 	dsb	sy
 80156da:	60fb      	str	r3, [r7, #12]
}
 80156dc:	bf00      	nop
 80156de:	e7fe      	b.n	80156de <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80156e0:	6878      	ldr	r0, [r7, #4]
 80156e2:	f7fe fbe1 	bl	8013ea8 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	3304      	adds	r3, #4
 80156ea:	4618      	mov	r0, r3
 80156ec:	f7fe fbdc 	bl	8013ea8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80156f0:	697b      	ldr	r3, [r7, #20]
 80156f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156f4:	4b12      	ldr	r3, [pc, #72]	; (8015740 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	429a      	cmp	r2, r3
 80156fa:	d903      	bls.n	8015704 <vTaskRemoveFromUnorderedEventList+0x78>
 80156fc:	697b      	ldr	r3, [r7, #20]
 80156fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015700:	4a0f      	ldr	r2, [pc, #60]	; (8015740 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015702:	6013      	str	r3, [r2, #0]
 8015704:	697b      	ldr	r3, [r7, #20]
 8015706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015708:	4613      	mov	r3, r2
 801570a:	009b      	lsls	r3, r3, #2
 801570c:	4413      	add	r3, r2
 801570e:	009b      	lsls	r3, r3, #2
 8015710:	4a0c      	ldr	r2, [pc, #48]	; (8015744 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8015712:	441a      	add	r2, r3
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	3304      	adds	r3, #4
 8015718:	4619      	mov	r1, r3
 801571a:	4610      	mov	r0, r2
 801571c:	f7fe fb67 	bl	8013dee <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015720:	697b      	ldr	r3, [r7, #20]
 8015722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015724:	4b08      	ldr	r3, [pc, #32]	; (8015748 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801572a:	429a      	cmp	r2, r3
 801572c:	d902      	bls.n	8015734 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801572e:	4b07      	ldr	r3, [pc, #28]	; (801574c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8015730:	2201      	movs	r2, #1
 8015732:	601a      	str	r2, [r3, #0]
	}
}
 8015734:	bf00      	nop
 8015736:	3718      	adds	r7, #24
 8015738:	46bd      	mov	sp, r7
 801573a:	bd80      	pop	{r7, pc}
 801573c:	24001ce0 	.word	0x24001ce0
 8015740:	24001cc0 	.word	0x24001cc0
 8015744:	240017e8 	.word	0x240017e8
 8015748:	240017e4 	.word	0x240017e4
 801574c:	24001ccc 	.word	0x24001ccc

08015750 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015750:	b480      	push	{r7}
 8015752:	b083      	sub	sp, #12
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015758:	4b06      	ldr	r3, [pc, #24]	; (8015774 <vTaskInternalSetTimeOutState+0x24>)
 801575a:	681a      	ldr	r2, [r3, #0]
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015760:	4b05      	ldr	r3, [pc, #20]	; (8015778 <vTaskInternalSetTimeOutState+0x28>)
 8015762:	681a      	ldr	r2, [r3, #0]
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	605a      	str	r2, [r3, #4]
}
 8015768:	bf00      	nop
 801576a:	370c      	adds	r7, #12
 801576c:	46bd      	mov	sp, r7
 801576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015772:	4770      	bx	lr
 8015774:	24001cd0 	.word	0x24001cd0
 8015778:	24001cbc 	.word	0x24001cbc

0801577c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b088      	sub	sp, #32
 8015780:	af00      	add	r7, sp, #0
 8015782:	6078      	str	r0, [r7, #4]
 8015784:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d10a      	bne.n	80157a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801578c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015790:	f383 8811 	msr	BASEPRI, r3
 8015794:	f3bf 8f6f 	isb	sy
 8015798:	f3bf 8f4f 	dsb	sy
 801579c:	613b      	str	r3, [r7, #16]
}
 801579e:	bf00      	nop
 80157a0:	e7fe      	b.n	80157a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80157a2:	683b      	ldr	r3, [r7, #0]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d10a      	bne.n	80157be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80157a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157ac:	f383 8811 	msr	BASEPRI, r3
 80157b0:	f3bf 8f6f 	isb	sy
 80157b4:	f3bf 8f4f 	dsb	sy
 80157b8:	60fb      	str	r3, [r7, #12]
}
 80157ba:	bf00      	nop
 80157bc:	e7fe      	b.n	80157bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80157be:	f000 feb1 	bl	8016524 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80157c2:	4b1d      	ldr	r3, [pc, #116]	; (8015838 <xTaskCheckForTimeOut+0xbc>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	685b      	ldr	r3, [r3, #4]
 80157cc:	69ba      	ldr	r2, [r7, #24]
 80157ce:	1ad3      	subs	r3, r2, r3
 80157d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80157da:	d102      	bne.n	80157e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80157dc:	2300      	movs	r3, #0
 80157de:	61fb      	str	r3, [r7, #28]
 80157e0:	e023      	b.n	801582a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	681a      	ldr	r2, [r3, #0]
 80157e6:	4b15      	ldr	r3, [pc, #84]	; (801583c <xTaskCheckForTimeOut+0xc0>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	429a      	cmp	r2, r3
 80157ec:	d007      	beq.n	80157fe <xTaskCheckForTimeOut+0x82>
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	685b      	ldr	r3, [r3, #4]
 80157f2:	69ba      	ldr	r2, [r7, #24]
 80157f4:	429a      	cmp	r2, r3
 80157f6:	d302      	bcc.n	80157fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80157f8:	2301      	movs	r3, #1
 80157fa:	61fb      	str	r3, [r7, #28]
 80157fc:	e015      	b.n	801582a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80157fe:	683b      	ldr	r3, [r7, #0]
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	697a      	ldr	r2, [r7, #20]
 8015804:	429a      	cmp	r2, r3
 8015806:	d20b      	bcs.n	8015820 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015808:	683b      	ldr	r3, [r7, #0]
 801580a:	681a      	ldr	r2, [r3, #0]
 801580c:	697b      	ldr	r3, [r7, #20]
 801580e:	1ad2      	subs	r2, r2, r3
 8015810:	683b      	ldr	r3, [r7, #0]
 8015812:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015814:	6878      	ldr	r0, [r7, #4]
 8015816:	f7ff ff9b 	bl	8015750 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801581a:	2300      	movs	r3, #0
 801581c:	61fb      	str	r3, [r7, #28]
 801581e:	e004      	b.n	801582a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015820:	683b      	ldr	r3, [r7, #0]
 8015822:	2200      	movs	r2, #0
 8015824:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015826:	2301      	movs	r3, #1
 8015828:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801582a:	f000 feab 	bl	8016584 <vPortExitCritical>

	return xReturn;
 801582e:	69fb      	ldr	r3, [r7, #28]
}
 8015830:	4618      	mov	r0, r3
 8015832:	3720      	adds	r7, #32
 8015834:	46bd      	mov	sp, r7
 8015836:	bd80      	pop	{r7, pc}
 8015838:	24001cbc 	.word	0x24001cbc
 801583c:	24001cd0 	.word	0x24001cd0

08015840 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015840:	b480      	push	{r7}
 8015842:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015844:	4b03      	ldr	r3, [pc, #12]	; (8015854 <vTaskMissedYield+0x14>)
 8015846:	2201      	movs	r2, #1
 8015848:	601a      	str	r2, [r3, #0]
}
 801584a:	bf00      	nop
 801584c:	46bd      	mov	sp, r7
 801584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015852:	4770      	bx	lr
 8015854:	24001ccc 	.word	0x24001ccc

08015858 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b082      	sub	sp, #8
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015860:	f000 f852 	bl	8015908 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015864:	4b06      	ldr	r3, [pc, #24]	; (8015880 <prvIdleTask+0x28>)
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	2b01      	cmp	r3, #1
 801586a:	d9f9      	bls.n	8015860 <prvIdleTask+0x8>
			{
				taskYIELD();
 801586c:	4b05      	ldr	r3, [pc, #20]	; (8015884 <prvIdleTask+0x2c>)
 801586e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015872:	601a      	str	r2, [r3, #0]
 8015874:	f3bf 8f4f 	dsb	sy
 8015878:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801587c:	e7f0      	b.n	8015860 <prvIdleTask+0x8>
 801587e:	bf00      	nop
 8015880:	240017e8 	.word	0x240017e8
 8015884:	e000ed04 	.word	0xe000ed04

08015888 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b082      	sub	sp, #8
 801588c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801588e:	2300      	movs	r3, #0
 8015890:	607b      	str	r3, [r7, #4]
 8015892:	e00c      	b.n	80158ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015894:	687a      	ldr	r2, [r7, #4]
 8015896:	4613      	mov	r3, r2
 8015898:	009b      	lsls	r3, r3, #2
 801589a:	4413      	add	r3, r2
 801589c:	009b      	lsls	r3, r3, #2
 801589e:	4a12      	ldr	r2, [pc, #72]	; (80158e8 <prvInitialiseTaskLists+0x60>)
 80158a0:	4413      	add	r3, r2
 80158a2:	4618      	mov	r0, r3
 80158a4:	f7fe fa76 	bl	8013d94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	3301      	adds	r3, #1
 80158ac:	607b      	str	r3, [r7, #4]
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	2b37      	cmp	r3, #55	; 0x37
 80158b2:	d9ef      	bls.n	8015894 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80158b4:	480d      	ldr	r0, [pc, #52]	; (80158ec <prvInitialiseTaskLists+0x64>)
 80158b6:	f7fe fa6d 	bl	8013d94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80158ba:	480d      	ldr	r0, [pc, #52]	; (80158f0 <prvInitialiseTaskLists+0x68>)
 80158bc:	f7fe fa6a 	bl	8013d94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80158c0:	480c      	ldr	r0, [pc, #48]	; (80158f4 <prvInitialiseTaskLists+0x6c>)
 80158c2:	f7fe fa67 	bl	8013d94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80158c6:	480c      	ldr	r0, [pc, #48]	; (80158f8 <prvInitialiseTaskLists+0x70>)
 80158c8:	f7fe fa64 	bl	8013d94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80158cc:	480b      	ldr	r0, [pc, #44]	; (80158fc <prvInitialiseTaskLists+0x74>)
 80158ce:	f7fe fa61 	bl	8013d94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80158d2:	4b0b      	ldr	r3, [pc, #44]	; (8015900 <prvInitialiseTaskLists+0x78>)
 80158d4:	4a05      	ldr	r2, [pc, #20]	; (80158ec <prvInitialiseTaskLists+0x64>)
 80158d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80158d8:	4b0a      	ldr	r3, [pc, #40]	; (8015904 <prvInitialiseTaskLists+0x7c>)
 80158da:	4a05      	ldr	r2, [pc, #20]	; (80158f0 <prvInitialiseTaskLists+0x68>)
 80158dc:	601a      	str	r2, [r3, #0]
}
 80158de:	bf00      	nop
 80158e0:	3708      	adds	r7, #8
 80158e2:	46bd      	mov	sp, r7
 80158e4:	bd80      	pop	{r7, pc}
 80158e6:	bf00      	nop
 80158e8:	240017e8 	.word	0x240017e8
 80158ec:	24001c48 	.word	0x24001c48
 80158f0:	24001c5c 	.word	0x24001c5c
 80158f4:	24001c78 	.word	0x24001c78
 80158f8:	24001c8c 	.word	0x24001c8c
 80158fc:	24001ca4 	.word	0x24001ca4
 8015900:	24001c70 	.word	0x24001c70
 8015904:	24001c74 	.word	0x24001c74

08015908 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b082      	sub	sp, #8
 801590c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801590e:	e019      	b.n	8015944 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015910:	f000 fe08 	bl	8016524 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015914:	4b10      	ldr	r3, [pc, #64]	; (8015958 <prvCheckTasksWaitingTermination+0x50>)
 8015916:	68db      	ldr	r3, [r3, #12]
 8015918:	68db      	ldr	r3, [r3, #12]
 801591a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	3304      	adds	r3, #4
 8015920:	4618      	mov	r0, r3
 8015922:	f7fe fac1 	bl	8013ea8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015926:	4b0d      	ldr	r3, [pc, #52]	; (801595c <prvCheckTasksWaitingTermination+0x54>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	3b01      	subs	r3, #1
 801592c:	4a0b      	ldr	r2, [pc, #44]	; (801595c <prvCheckTasksWaitingTermination+0x54>)
 801592e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015930:	4b0b      	ldr	r3, [pc, #44]	; (8015960 <prvCheckTasksWaitingTermination+0x58>)
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	3b01      	subs	r3, #1
 8015936:	4a0a      	ldr	r2, [pc, #40]	; (8015960 <prvCheckTasksWaitingTermination+0x58>)
 8015938:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801593a:	f000 fe23 	bl	8016584 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801593e:	6878      	ldr	r0, [r7, #4]
 8015940:	f000 f810 	bl	8015964 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015944:	4b06      	ldr	r3, [pc, #24]	; (8015960 <prvCheckTasksWaitingTermination+0x58>)
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d1e1      	bne.n	8015910 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801594c:	bf00      	nop
 801594e:	bf00      	nop
 8015950:	3708      	adds	r7, #8
 8015952:	46bd      	mov	sp, r7
 8015954:	bd80      	pop	{r7, pc}
 8015956:	bf00      	nop
 8015958:	24001c8c 	.word	0x24001c8c
 801595c:	24001cb8 	.word	0x24001cb8
 8015960:	24001ca0 	.word	0x24001ca0

08015964 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015964:	b580      	push	{r7, lr}
 8015966:	b084      	sub	sp, #16
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015972:	2b00      	cmp	r3, #0
 8015974:	d108      	bne.n	8015988 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801597a:	4618      	mov	r0, r3
 801597c:	f000 ffc0 	bl	8016900 <vPortFree>
				vPortFree( pxTCB );
 8015980:	6878      	ldr	r0, [r7, #4]
 8015982:	f000 ffbd 	bl	8016900 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015986:	e018      	b.n	80159ba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801598e:	2b01      	cmp	r3, #1
 8015990:	d103      	bne.n	801599a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015992:	6878      	ldr	r0, [r7, #4]
 8015994:	f000 ffb4 	bl	8016900 <vPortFree>
	}
 8015998:	e00f      	b.n	80159ba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80159a0:	2b02      	cmp	r3, #2
 80159a2:	d00a      	beq.n	80159ba <prvDeleteTCB+0x56>
	__asm volatile
 80159a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159a8:	f383 8811 	msr	BASEPRI, r3
 80159ac:	f3bf 8f6f 	isb	sy
 80159b0:	f3bf 8f4f 	dsb	sy
 80159b4:	60fb      	str	r3, [r7, #12]
}
 80159b6:	bf00      	nop
 80159b8:	e7fe      	b.n	80159b8 <prvDeleteTCB+0x54>
	}
 80159ba:	bf00      	nop
 80159bc:	3710      	adds	r7, #16
 80159be:	46bd      	mov	sp, r7
 80159c0:	bd80      	pop	{r7, pc}
	...

080159c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80159c4:	b480      	push	{r7}
 80159c6:	b083      	sub	sp, #12
 80159c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80159ca:	4b0c      	ldr	r3, [pc, #48]	; (80159fc <prvResetNextTaskUnblockTime+0x38>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d104      	bne.n	80159de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80159d4:	4b0a      	ldr	r3, [pc, #40]	; (8015a00 <prvResetNextTaskUnblockTime+0x3c>)
 80159d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80159da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80159dc:	e008      	b.n	80159f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80159de:	4b07      	ldr	r3, [pc, #28]	; (80159fc <prvResetNextTaskUnblockTime+0x38>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	68db      	ldr	r3, [r3, #12]
 80159e4:	68db      	ldr	r3, [r3, #12]
 80159e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	685b      	ldr	r3, [r3, #4]
 80159ec:	4a04      	ldr	r2, [pc, #16]	; (8015a00 <prvResetNextTaskUnblockTime+0x3c>)
 80159ee:	6013      	str	r3, [r2, #0]
}
 80159f0:	bf00      	nop
 80159f2:	370c      	adds	r7, #12
 80159f4:	46bd      	mov	sp, r7
 80159f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fa:	4770      	bx	lr
 80159fc:	24001c70 	.word	0x24001c70
 8015a00:	24001cd8 	.word	0x24001cd8

08015a04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015a04:	b480      	push	{r7}
 8015a06:	b083      	sub	sp, #12
 8015a08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015a0a:	4b0b      	ldr	r3, [pc, #44]	; (8015a38 <xTaskGetSchedulerState+0x34>)
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d102      	bne.n	8015a18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015a12:	2301      	movs	r3, #1
 8015a14:	607b      	str	r3, [r7, #4]
 8015a16:	e008      	b.n	8015a2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015a18:	4b08      	ldr	r3, [pc, #32]	; (8015a3c <xTaskGetSchedulerState+0x38>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d102      	bne.n	8015a26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015a20:	2302      	movs	r3, #2
 8015a22:	607b      	str	r3, [r7, #4]
 8015a24:	e001      	b.n	8015a2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015a26:	2300      	movs	r3, #0
 8015a28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015a2a:	687b      	ldr	r3, [r7, #4]
	}
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	370c      	adds	r7, #12
 8015a30:	46bd      	mov	sp, r7
 8015a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a36:	4770      	bx	lr
 8015a38:	24001cc4 	.word	0x24001cc4
 8015a3c:	24001ce0 	.word	0x24001ce0

08015a40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b086      	sub	sp, #24
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d056      	beq.n	8015b04 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015a56:	4b2e      	ldr	r3, [pc, #184]	; (8015b10 <xTaskPriorityDisinherit+0xd0>)
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	693a      	ldr	r2, [r7, #16]
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	d00a      	beq.n	8015a76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a64:	f383 8811 	msr	BASEPRI, r3
 8015a68:	f3bf 8f6f 	isb	sy
 8015a6c:	f3bf 8f4f 	dsb	sy
 8015a70:	60fb      	str	r3, [r7, #12]
}
 8015a72:	bf00      	nop
 8015a74:	e7fe      	b.n	8015a74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015a76:	693b      	ldr	r3, [r7, #16]
 8015a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d10a      	bne.n	8015a94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a82:	f383 8811 	msr	BASEPRI, r3
 8015a86:	f3bf 8f6f 	isb	sy
 8015a8a:	f3bf 8f4f 	dsb	sy
 8015a8e:	60bb      	str	r3, [r7, #8]
}
 8015a90:	bf00      	nop
 8015a92:	e7fe      	b.n	8015a92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015a94:	693b      	ldr	r3, [r7, #16]
 8015a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a98:	1e5a      	subs	r2, r3, #1
 8015a9a:	693b      	ldr	r3, [r7, #16]
 8015a9c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015a9e:	693b      	ldr	r3, [r7, #16]
 8015aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015aa2:	693b      	ldr	r3, [r7, #16]
 8015aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015aa6:	429a      	cmp	r2, r3
 8015aa8:	d02c      	beq.n	8015b04 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015aaa:	693b      	ldr	r3, [r7, #16]
 8015aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d128      	bne.n	8015b04 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015ab2:	693b      	ldr	r3, [r7, #16]
 8015ab4:	3304      	adds	r3, #4
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	f7fe f9f6 	bl	8013ea8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015abc:	693b      	ldr	r3, [r7, #16]
 8015abe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015ac0:	693b      	ldr	r3, [r7, #16]
 8015ac2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015ac4:	693b      	ldr	r3, [r7, #16]
 8015ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ac8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015acc:	693b      	ldr	r3, [r7, #16]
 8015ace:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ad4:	4b0f      	ldr	r3, [pc, #60]	; (8015b14 <xTaskPriorityDisinherit+0xd4>)
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	429a      	cmp	r2, r3
 8015ada:	d903      	bls.n	8015ae4 <xTaskPriorityDisinherit+0xa4>
 8015adc:	693b      	ldr	r3, [r7, #16]
 8015ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ae0:	4a0c      	ldr	r2, [pc, #48]	; (8015b14 <xTaskPriorityDisinherit+0xd4>)
 8015ae2:	6013      	str	r3, [r2, #0]
 8015ae4:	693b      	ldr	r3, [r7, #16]
 8015ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ae8:	4613      	mov	r3, r2
 8015aea:	009b      	lsls	r3, r3, #2
 8015aec:	4413      	add	r3, r2
 8015aee:	009b      	lsls	r3, r3, #2
 8015af0:	4a09      	ldr	r2, [pc, #36]	; (8015b18 <xTaskPriorityDisinherit+0xd8>)
 8015af2:	441a      	add	r2, r3
 8015af4:	693b      	ldr	r3, [r7, #16]
 8015af6:	3304      	adds	r3, #4
 8015af8:	4619      	mov	r1, r3
 8015afa:	4610      	mov	r0, r2
 8015afc:	f7fe f977 	bl	8013dee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015b00:	2301      	movs	r3, #1
 8015b02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015b04:	697b      	ldr	r3, [r7, #20]
	}
 8015b06:	4618      	mov	r0, r3
 8015b08:	3718      	adds	r7, #24
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bd80      	pop	{r7, pc}
 8015b0e:	bf00      	nop
 8015b10:	240017e4 	.word	0x240017e4
 8015b14:	24001cc0 	.word	0x24001cc0
 8015b18:	240017e8 	.word	0x240017e8

08015b1c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015b1c:	b480      	push	{r7}
 8015b1e:	b083      	sub	sp, #12
 8015b20:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015b22:	4b09      	ldr	r3, [pc, #36]	; (8015b48 <uxTaskResetEventItemValue+0x2c>)
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	699b      	ldr	r3, [r3, #24]
 8015b28:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b2a:	4b07      	ldr	r3, [pc, #28]	; (8015b48 <uxTaskResetEventItemValue+0x2c>)
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b30:	4b05      	ldr	r3, [pc, #20]	; (8015b48 <uxTaskResetEventItemValue+0x2c>)
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015b38:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015b3a:	687b      	ldr	r3, [r7, #4]
}
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	370c      	adds	r7, #12
 8015b40:	46bd      	mov	sp, r7
 8015b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b46:	4770      	bx	lr
 8015b48:	240017e4 	.word	0x240017e4

08015b4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b084      	sub	sp, #16
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
 8015b54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015b56:	4b21      	ldr	r3, [pc, #132]	; (8015bdc <prvAddCurrentTaskToDelayedList+0x90>)
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015b5c:	4b20      	ldr	r3, [pc, #128]	; (8015be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	3304      	adds	r3, #4
 8015b62:	4618      	mov	r0, r3
 8015b64:	f7fe f9a0 	bl	8013ea8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015b6e:	d10a      	bne.n	8015b86 <prvAddCurrentTaskToDelayedList+0x3a>
 8015b70:	683b      	ldr	r3, [r7, #0]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d007      	beq.n	8015b86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015b76:	4b1a      	ldr	r3, [pc, #104]	; (8015be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	3304      	adds	r3, #4
 8015b7c:	4619      	mov	r1, r3
 8015b7e:	4819      	ldr	r0, [pc, #100]	; (8015be4 <prvAddCurrentTaskToDelayedList+0x98>)
 8015b80:	f7fe f935 	bl	8013dee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015b84:	e026      	b.n	8015bd4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015b86:	68fa      	ldr	r2, [r7, #12]
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	4413      	add	r3, r2
 8015b8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015b8e:	4b14      	ldr	r3, [pc, #80]	; (8015be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	68ba      	ldr	r2, [r7, #8]
 8015b94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015b96:	68ba      	ldr	r2, [r7, #8]
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	429a      	cmp	r2, r3
 8015b9c:	d209      	bcs.n	8015bb2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015b9e:	4b12      	ldr	r3, [pc, #72]	; (8015be8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015ba0:	681a      	ldr	r2, [r3, #0]
 8015ba2:	4b0f      	ldr	r3, [pc, #60]	; (8015be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	3304      	adds	r3, #4
 8015ba8:	4619      	mov	r1, r3
 8015baa:	4610      	mov	r0, r2
 8015bac:	f7fe f943 	bl	8013e36 <vListInsert>
}
 8015bb0:	e010      	b.n	8015bd4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015bb2:	4b0e      	ldr	r3, [pc, #56]	; (8015bec <prvAddCurrentTaskToDelayedList+0xa0>)
 8015bb4:	681a      	ldr	r2, [r3, #0]
 8015bb6:	4b0a      	ldr	r3, [pc, #40]	; (8015be0 <prvAddCurrentTaskToDelayedList+0x94>)
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	3304      	adds	r3, #4
 8015bbc:	4619      	mov	r1, r3
 8015bbe:	4610      	mov	r0, r2
 8015bc0:	f7fe f939 	bl	8013e36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015bc4:	4b0a      	ldr	r3, [pc, #40]	; (8015bf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	68ba      	ldr	r2, [r7, #8]
 8015bca:	429a      	cmp	r2, r3
 8015bcc:	d202      	bcs.n	8015bd4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015bce:	4a08      	ldr	r2, [pc, #32]	; (8015bf0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015bd0:	68bb      	ldr	r3, [r7, #8]
 8015bd2:	6013      	str	r3, [r2, #0]
}
 8015bd4:	bf00      	nop
 8015bd6:	3710      	adds	r7, #16
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}
 8015bdc:	24001cbc 	.word	0x24001cbc
 8015be0:	240017e4 	.word	0x240017e4
 8015be4:	24001ca4 	.word	0x24001ca4
 8015be8:	24001c74 	.word	0x24001c74
 8015bec:	24001c70 	.word	0x24001c70
 8015bf0:	24001cd8 	.word	0x24001cd8

08015bf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b08a      	sub	sp, #40	; 0x28
 8015bf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015bfe:	f000 fb07 	bl	8016210 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015c02:	4b1c      	ldr	r3, [pc, #112]	; (8015c74 <xTimerCreateTimerTask+0x80>)
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d021      	beq.n	8015c4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015c12:	1d3a      	adds	r2, r7, #4
 8015c14:	f107 0108 	add.w	r1, r7, #8
 8015c18:	f107 030c 	add.w	r3, r7, #12
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	f7fd fe33 	bl	8013888 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015c22:	6879      	ldr	r1, [r7, #4]
 8015c24:	68bb      	ldr	r3, [r7, #8]
 8015c26:	68fa      	ldr	r2, [r7, #12]
 8015c28:	9202      	str	r2, [sp, #8]
 8015c2a:	9301      	str	r3, [sp, #4]
 8015c2c:	2302      	movs	r3, #2
 8015c2e:	9300      	str	r3, [sp, #0]
 8015c30:	2300      	movs	r3, #0
 8015c32:	460a      	mov	r2, r1
 8015c34:	4910      	ldr	r1, [pc, #64]	; (8015c78 <xTimerCreateTimerTask+0x84>)
 8015c36:	4811      	ldr	r0, [pc, #68]	; (8015c7c <xTimerCreateTimerTask+0x88>)
 8015c38:	f7fe ff06 	bl	8014a48 <xTaskCreateStatic>
 8015c3c:	4603      	mov	r3, r0
 8015c3e:	4a10      	ldr	r2, [pc, #64]	; (8015c80 <xTimerCreateTimerTask+0x8c>)
 8015c40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015c42:	4b0f      	ldr	r3, [pc, #60]	; (8015c80 <xTimerCreateTimerTask+0x8c>)
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d001      	beq.n	8015c4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015c4a:	2301      	movs	r3, #1
 8015c4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015c4e:	697b      	ldr	r3, [r7, #20]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d10a      	bne.n	8015c6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c58:	f383 8811 	msr	BASEPRI, r3
 8015c5c:	f3bf 8f6f 	isb	sy
 8015c60:	f3bf 8f4f 	dsb	sy
 8015c64:	613b      	str	r3, [r7, #16]
}
 8015c66:	bf00      	nop
 8015c68:	e7fe      	b.n	8015c68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015c6a:	697b      	ldr	r3, [r7, #20]
}
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	3718      	adds	r7, #24
 8015c70:	46bd      	mov	sp, r7
 8015c72:	bd80      	pop	{r7, pc}
 8015c74:	24001d14 	.word	0x24001d14
 8015c78:	0801786c 	.word	0x0801786c
 8015c7c:	08015db9 	.word	0x08015db9
 8015c80:	24001d18 	.word	0x24001d18

08015c84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b08a      	sub	sp, #40	; 0x28
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	60f8      	str	r0, [r7, #12]
 8015c8c:	60b9      	str	r1, [r7, #8]
 8015c8e:	607a      	str	r2, [r7, #4]
 8015c90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015c92:	2300      	movs	r3, #0
 8015c94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d10a      	bne.n	8015cb2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8015c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ca0:	f383 8811 	msr	BASEPRI, r3
 8015ca4:	f3bf 8f6f 	isb	sy
 8015ca8:	f3bf 8f4f 	dsb	sy
 8015cac:	623b      	str	r3, [r7, #32]
}
 8015cae:	bf00      	nop
 8015cb0:	e7fe      	b.n	8015cb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015cb2:	4b1a      	ldr	r3, [pc, #104]	; (8015d1c <xTimerGenericCommand+0x98>)
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d02a      	beq.n	8015d10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015cba:	68bb      	ldr	r3, [r7, #8]
 8015cbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015cc6:	68bb      	ldr	r3, [r7, #8]
 8015cc8:	2b05      	cmp	r3, #5
 8015cca:	dc18      	bgt.n	8015cfe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015ccc:	f7ff fe9a 	bl	8015a04 <xTaskGetSchedulerState>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	2b02      	cmp	r3, #2
 8015cd4:	d109      	bne.n	8015cea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015cd6:	4b11      	ldr	r3, [pc, #68]	; (8015d1c <xTimerGenericCommand+0x98>)
 8015cd8:	6818      	ldr	r0, [r3, #0]
 8015cda:	f107 0110 	add.w	r1, r7, #16
 8015cde:	2300      	movs	r3, #0
 8015ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ce2:	f7fe fa49 	bl	8014178 <xQueueGenericSend>
 8015ce6:	6278      	str	r0, [r7, #36]	; 0x24
 8015ce8:	e012      	b.n	8015d10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015cea:	4b0c      	ldr	r3, [pc, #48]	; (8015d1c <xTimerGenericCommand+0x98>)
 8015cec:	6818      	ldr	r0, [r3, #0]
 8015cee:	f107 0110 	add.w	r1, r7, #16
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	f7fe fa3f 	bl	8014178 <xQueueGenericSend>
 8015cfa:	6278      	str	r0, [r7, #36]	; 0x24
 8015cfc:	e008      	b.n	8015d10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015cfe:	4b07      	ldr	r3, [pc, #28]	; (8015d1c <xTimerGenericCommand+0x98>)
 8015d00:	6818      	ldr	r0, [r3, #0]
 8015d02:	f107 0110 	add.w	r1, r7, #16
 8015d06:	2300      	movs	r3, #0
 8015d08:	683a      	ldr	r2, [r7, #0]
 8015d0a:	f7fe fb33 	bl	8014374 <xQueueGenericSendFromISR>
 8015d0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015d12:	4618      	mov	r0, r3
 8015d14:	3728      	adds	r7, #40	; 0x28
 8015d16:	46bd      	mov	sp, r7
 8015d18:	bd80      	pop	{r7, pc}
 8015d1a:	bf00      	nop
 8015d1c:	24001d14 	.word	0x24001d14

08015d20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b088      	sub	sp, #32
 8015d24:	af02      	add	r7, sp, #8
 8015d26:	6078      	str	r0, [r7, #4]
 8015d28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d2a:	4b22      	ldr	r3, [pc, #136]	; (8015db4 <prvProcessExpiredTimer+0x94>)
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	68db      	ldr	r3, [r3, #12]
 8015d30:	68db      	ldr	r3, [r3, #12]
 8015d32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015d34:	697b      	ldr	r3, [r7, #20]
 8015d36:	3304      	adds	r3, #4
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f7fe f8b5 	bl	8013ea8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015d3e:	697b      	ldr	r3, [r7, #20]
 8015d40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d44:	f003 0304 	and.w	r3, r3, #4
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d022      	beq.n	8015d92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015d4c:	697b      	ldr	r3, [r7, #20]
 8015d4e:	699a      	ldr	r2, [r3, #24]
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	18d1      	adds	r1, r2, r3
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	683a      	ldr	r2, [r7, #0]
 8015d58:	6978      	ldr	r0, [r7, #20]
 8015d5a:	f000 f8d1 	bl	8015f00 <prvInsertTimerInActiveList>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d01f      	beq.n	8015da4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015d64:	2300      	movs	r3, #0
 8015d66:	9300      	str	r3, [sp, #0]
 8015d68:	2300      	movs	r3, #0
 8015d6a:	687a      	ldr	r2, [r7, #4]
 8015d6c:	2100      	movs	r1, #0
 8015d6e:	6978      	ldr	r0, [r7, #20]
 8015d70:	f7ff ff88 	bl	8015c84 <xTimerGenericCommand>
 8015d74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015d76:	693b      	ldr	r3, [r7, #16]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d113      	bne.n	8015da4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d80:	f383 8811 	msr	BASEPRI, r3
 8015d84:	f3bf 8f6f 	isb	sy
 8015d88:	f3bf 8f4f 	dsb	sy
 8015d8c:	60fb      	str	r3, [r7, #12]
}
 8015d8e:	bf00      	nop
 8015d90:	e7fe      	b.n	8015d90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015d92:	697b      	ldr	r3, [r7, #20]
 8015d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015d98:	f023 0301 	bic.w	r3, r3, #1
 8015d9c:	b2da      	uxtb	r2, r3
 8015d9e:	697b      	ldr	r3, [r7, #20]
 8015da0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015da4:	697b      	ldr	r3, [r7, #20]
 8015da6:	6a1b      	ldr	r3, [r3, #32]
 8015da8:	6978      	ldr	r0, [r7, #20]
 8015daa:	4798      	blx	r3
}
 8015dac:	bf00      	nop
 8015dae:	3718      	adds	r7, #24
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bd80      	pop	{r7, pc}
 8015db4:	24001d0c 	.word	0x24001d0c

08015db8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b084      	sub	sp, #16
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015dc0:	f107 0308 	add.w	r3, r7, #8
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f000 f857 	bl	8015e78 <prvGetNextExpireTime>
 8015dca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015dcc:	68bb      	ldr	r3, [r7, #8]
 8015dce:	4619      	mov	r1, r3
 8015dd0:	68f8      	ldr	r0, [r7, #12]
 8015dd2:	f000 f803 	bl	8015ddc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015dd6:	f000 f8d5 	bl	8015f84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015dda:	e7f1      	b.n	8015dc0 <prvTimerTask+0x8>

08015ddc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b084      	sub	sp, #16
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	6078      	str	r0, [r7, #4]
 8015de4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015de6:	f7ff f985 	bl	80150f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015dea:	f107 0308 	add.w	r3, r7, #8
 8015dee:	4618      	mov	r0, r3
 8015df0:	f000 f866 	bl	8015ec0 <prvSampleTimeNow>
 8015df4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015df6:	68bb      	ldr	r3, [r7, #8]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d130      	bne.n	8015e5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015dfc:	683b      	ldr	r3, [r7, #0]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d10a      	bne.n	8015e18 <prvProcessTimerOrBlockTask+0x3c>
 8015e02:	687a      	ldr	r2, [r7, #4]
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	429a      	cmp	r2, r3
 8015e08:	d806      	bhi.n	8015e18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015e0a:	f7ff f981 	bl	8015110 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015e0e:	68f9      	ldr	r1, [r7, #12]
 8015e10:	6878      	ldr	r0, [r7, #4]
 8015e12:	f7ff ff85 	bl	8015d20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015e16:	e024      	b.n	8015e62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015e18:	683b      	ldr	r3, [r7, #0]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d008      	beq.n	8015e30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015e1e:	4b13      	ldr	r3, [pc, #76]	; (8015e6c <prvProcessTimerOrBlockTask+0x90>)
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d101      	bne.n	8015e2c <prvProcessTimerOrBlockTask+0x50>
 8015e28:	2301      	movs	r3, #1
 8015e2a:	e000      	b.n	8015e2e <prvProcessTimerOrBlockTask+0x52>
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015e30:	4b0f      	ldr	r3, [pc, #60]	; (8015e70 <prvProcessTimerOrBlockTask+0x94>)
 8015e32:	6818      	ldr	r0, [r3, #0]
 8015e34:	687a      	ldr	r2, [r7, #4]
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	1ad3      	subs	r3, r2, r3
 8015e3a:	683a      	ldr	r2, [r7, #0]
 8015e3c:	4619      	mov	r1, r3
 8015e3e:	f7fe fdcf 	bl	80149e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015e42:	f7ff f965 	bl	8015110 <xTaskResumeAll>
 8015e46:	4603      	mov	r3, r0
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d10a      	bne.n	8015e62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015e4c:	4b09      	ldr	r3, [pc, #36]	; (8015e74 <prvProcessTimerOrBlockTask+0x98>)
 8015e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e52:	601a      	str	r2, [r3, #0]
 8015e54:	f3bf 8f4f 	dsb	sy
 8015e58:	f3bf 8f6f 	isb	sy
}
 8015e5c:	e001      	b.n	8015e62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015e5e:	f7ff f957 	bl	8015110 <xTaskResumeAll>
}
 8015e62:	bf00      	nop
 8015e64:	3710      	adds	r7, #16
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}
 8015e6a:	bf00      	nop
 8015e6c:	24001d10 	.word	0x24001d10
 8015e70:	24001d14 	.word	0x24001d14
 8015e74:	e000ed04 	.word	0xe000ed04

08015e78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015e78:	b480      	push	{r7}
 8015e7a:	b085      	sub	sp, #20
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015e80:	4b0e      	ldr	r3, [pc, #56]	; (8015ebc <prvGetNextExpireTime+0x44>)
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d101      	bne.n	8015e8e <prvGetNextExpireTime+0x16>
 8015e8a:	2201      	movs	r2, #1
 8015e8c:	e000      	b.n	8015e90 <prvGetNextExpireTime+0x18>
 8015e8e:	2200      	movs	r2, #0
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d105      	bne.n	8015ea8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015e9c:	4b07      	ldr	r3, [pc, #28]	; (8015ebc <prvGetNextExpireTime+0x44>)
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	68db      	ldr	r3, [r3, #12]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	60fb      	str	r3, [r7, #12]
 8015ea6:	e001      	b.n	8015eac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015eac:	68fb      	ldr	r3, [r7, #12]
}
 8015eae:	4618      	mov	r0, r3
 8015eb0:	3714      	adds	r7, #20
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb8:	4770      	bx	lr
 8015eba:	bf00      	nop
 8015ebc:	24001d0c 	.word	0x24001d0c

08015ec0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b084      	sub	sp, #16
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015ec8:	f7ff f9c0 	bl	801524c <xTaskGetTickCount>
 8015ecc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015ece:	4b0b      	ldr	r3, [pc, #44]	; (8015efc <prvSampleTimeNow+0x3c>)
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	68fa      	ldr	r2, [r7, #12]
 8015ed4:	429a      	cmp	r2, r3
 8015ed6:	d205      	bcs.n	8015ee4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015ed8:	f000 f936 	bl	8016148 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	2201      	movs	r2, #1
 8015ee0:	601a      	str	r2, [r3, #0]
 8015ee2:	e002      	b.n	8015eea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015eea:	4a04      	ldr	r2, [pc, #16]	; (8015efc <prvSampleTimeNow+0x3c>)
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015ef0:	68fb      	ldr	r3, [r7, #12]
}
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	3710      	adds	r7, #16
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	bd80      	pop	{r7, pc}
 8015efa:	bf00      	nop
 8015efc:	24001d1c 	.word	0x24001d1c

08015f00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b086      	sub	sp, #24
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	60f8      	str	r0, [r7, #12]
 8015f08:	60b9      	str	r1, [r7, #8]
 8015f0a:	607a      	str	r2, [r7, #4]
 8015f0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015f0e:	2300      	movs	r3, #0
 8015f10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	68ba      	ldr	r2, [r7, #8]
 8015f16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	68fa      	ldr	r2, [r7, #12]
 8015f1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015f1e:	68ba      	ldr	r2, [r7, #8]
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	429a      	cmp	r2, r3
 8015f24:	d812      	bhi.n	8015f4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015f26:	687a      	ldr	r2, [r7, #4]
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	1ad2      	subs	r2, r2, r3
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	699b      	ldr	r3, [r3, #24]
 8015f30:	429a      	cmp	r2, r3
 8015f32:	d302      	bcc.n	8015f3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015f34:	2301      	movs	r3, #1
 8015f36:	617b      	str	r3, [r7, #20]
 8015f38:	e01b      	b.n	8015f72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015f3a:	4b10      	ldr	r3, [pc, #64]	; (8015f7c <prvInsertTimerInActiveList+0x7c>)
 8015f3c:	681a      	ldr	r2, [r3, #0]
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	3304      	adds	r3, #4
 8015f42:	4619      	mov	r1, r3
 8015f44:	4610      	mov	r0, r2
 8015f46:	f7fd ff76 	bl	8013e36 <vListInsert>
 8015f4a:	e012      	b.n	8015f72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015f4c:	687a      	ldr	r2, [r7, #4]
 8015f4e:	683b      	ldr	r3, [r7, #0]
 8015f50:	429a      	cmp	r2, r3
 8015f52:	d206      	bcs.n	8015f62 <prvInsertTimerInActiveList+0x62>
 8015f54:	68ba      	ldr	r2, [r7, #8]
 8015f56:	683b      	ldr	r3, [r7, #0]
 8015f58:	429a      	cmp	r2, r3
 8015f5a:	d302      	bcc.n	8015f62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015f5c:	2301      	movs	r3, #1
 8015f5e:	617b      	str	r3, [r7, #20]
 8015f60:	e007      	b.n	8015f72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015f62:	4b07      	ldr	r3, [pc, #28]	; (8015f80 <prvInsertTimerInActiveList+0x80>)
 8015f64:	681a      	ldr	r2, [r3, #0]
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	3304      	adds	r3, #4
 8015f6a:	4619      	mov	r1, r3
 8015f6c:	4610      	mov	r0, r2
 8015f6e:	f7fd ff62 	bl	8013e36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015f72:	697b      	ldr	r3, [r7, #20]
}
 8015f74:	4618      	mov	r0, r3
 8015f76:	3718      	adds	r7, #24
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}
 8015f7c:	24001d10 	.word	0x24001d10
 8015f80:	24001d0c 	.word	0x24001d0c

08015f84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b08e      	sub	sp, #56	; 0x38
 8015f88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015f8a:	e0ca      	b.n	8016122 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	da18      	bge.n	8015fc4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015f92:	1d3b      	adds	r3, r7, #4
 8015f94:	3304      	adds	r3, #4
 8015f96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d10a      	bne.n	8015fb4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fa2:	f383 8811 	msr	BASEPRI, r3
 8015fa6:	f3bf 8f6f 	isb	sy
 8015faa:	f3bf 8f4f 	dsb	sy
 8015fae:	61fb      	str	r3, [r7, #28]
}
 8015fb0:	bf00      	nop
 8015fb2:	e7fe      	b.n	8015fb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fba:	6850      	ldr	r0, [r2, #4]
 8015fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fbe:	6892      	ldr	r2, [r2, #8]
 8015fc0:	4611      	mov	r1, r2
 8015fc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	f2c0 80aa 	blt.w	8016120 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fd2:	695b      	ldr	r3, [r3, #20]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d004      	beq.n	8015fe2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fda:	3304      	adds	r3, #4
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f7fd ff63 	bl	8013ea8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015fe2:	463b      	mov	r3, r7
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	f7ff ff6b 	bl	8015ec0 <prvSampleTimeNow>
 8015fea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	2b09      	cmp	r3, #9
 8015ff0:	f200 8097 	bhi.w	8016122 <prvProcessReceivedCommands+0x19e>
 8015ff4:	a201      	add	r2, pc, #4	; (adr r2, 8015ffc <prvProcessReceivedCommands+0x78>)
 8015ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ffa:	bf00      	nop
 8015ffc:	08016025 	.word	0x08016025
 8016000:	08016025 	.word	0x08016025
 8016004:	08016025 	.word	0x08016025
 8016008:	08016099 	.word	0x08016099
 801600c:	080160ad 	.word	0x080160ad
 8016010:	080160f7 	.word	0x080160f7
 8016014:	08016025 	.word	0x08016025
 8016018:	08016025 	.word	0x08016025
 801601c:	08016099 	.word	0x08016099
 8016020:	080160ad 	.word	0x080160ad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801602a:	f043 0301 	orr.w	r3, r3, #1
 801602e:	b2da      	uxtb	r2, r3
 8016030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016036:	68ba      	ldr	r2, [r7, #8]
 8016038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801603a:	699b      	ldr	r3, [r3, #24]
 801603c:	18d1      	adds	r1, r2, r3
 801603e:	68bb      	ldr	r3, [r7, #8]
 8016040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016044:	f7ff ff5c 	bl	8015f00 <prvInsertTimerInActiveList>
 8016048:	4603      	mov	r3, r0
 801604a:	2b00      	cmp	r3, #0
 801604c:	d069      	beq.n	8016122 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016050:	6a1b      	ldr	r3, [r3, #32]
 8016052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016054:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801605c:	f003 0304 	and.w	r3, r3, #4
 8016060:	2b00      	cmp	r3, #0
 8016062:	d05e      	beq.n	8016122 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016064:	68ba      	ldr	r2, [r7, #8]
 8016066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016068:	699b      	ldr	r3, [r3, #24]
 801606a:	441a      	add	r2, r3
 801606c:	2300      	movs	r3, #0
 801606e:	9300      	str	r3, [sp, #0]
 8016070:	2300      	movs	r3, #0
 8016072:	2100      	movs	r1, #0
 8016074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016076:	f7ff fe05 	bl	8015c84 <xTimerGenericCommand>
 801607a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801607c:	6a3b      	ldr	r3, [r7, #32]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d14f      	bne.n	8016122 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8016082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016086:	f383 8811 	msr	BASEPRI, r3
 801608a:	f3bf 8f6f 	isb	sy
 801608e:	f3bf 8f4f 	dsb	sy
 8016092:	61bb      	str	r3, [r7, #24]
}
 8016094:	bf00      	nop
 8016096:	e7fe      	b.n	8016096 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801609a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801609e:	f023 0301 	bic.w	r3, r3, #1
 80160a2:	b2da      	uxtb	r2, r3
 80160a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80160aa:	e03a      	b.n	8016122 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80160ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80160b2:	f043 0301 	orr.w	r3, r3, #1
 80160b6:	b2da      	uxtb	r2, r3
 80160b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80160be:	68ba      	ldr	r2, [r7, #8]
 80160c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80160c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160c6:	699b      	ldr	r3, [r3, #24]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d10a      	bne.n	80160e2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80160cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160d0:	f383 8811 	msr	BASEPRI, r3
 80160d4:	f3bf 8f6f 	isb	sy
 80160d8:	f3bf 8f4f 	dsb	sy
 80160dc:	617b      	str	r3, [r7, #20]
}
 80160de:	bf00      	nop
 80160e0:	e7fe      	b.n	80160e0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80160e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160e4:	699a      	ldr	r2, [r3, #24]
 80160e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160e8:	18d1      	adds	r1, r2, r3
 80160ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80160f0:	f7ff ff06 	bl	8015f00 <prvInsertTimerInActiveList>
					break;
 80160f4:	e015      	b.n	8016122 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80160f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80160fc:	f003 0302 	and.w	r3, r3, #2
 8016100:	2b00      	cmp	r3, #0
 8016102:	d103      	bne.n	801610c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8016104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016106:	f000 fbfb 	bl	8016900 <vPortFree>
 801610a:	e00a      	b.n	8016122 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801610c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801610e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016112:	f023 0301 	bic.w	r3, r3, #1
 8016116:	b2da      	uxtb	r2, r3
 8016118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801611a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801611e:	e000      	b.n	8016122 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8016120:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016122:	4b08      	ldr	r3, [pc, #32]	; (8016144 <prvProcessReceivedCommands+0x1c0>)
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	1d39      	adds	r1, r7, #4
 8016128:	2200      	movs	r2, #0
 801612a:	4618      	mov	r0, r3
 801612c:	f7fe f9be 	bl	80144ac <xQueueReceive>
 8016130:	4603      	mov	r3, r0
 8016132:	2b00      	cmp	r3, #0
 8016134:	f47f af2a 	bne.w	8015f8c <prvProcessReceivedCommands+0x8>
	}
}
 8016138:	bf00      	nop
 801613a:	bf00      	nop
 801613c:	3730      	adds	r7, #48	; 0x30
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}
 8016142:	bf00      	nop
 8016144:	24001d14 	.word	0x24001d14

08016148 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b088      	sub	sp, #32
 801614c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801614e:	e048      	b.n	80161e2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016150:	4b2d      	ldr	r3, [pc, #180]	; (8016208 <prvSwitchTimerLists+0xc0>)
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	68db      	ldr	r3, [r3, #12]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801615a:	4b2b      	ldr	r3, [pc, #172]	; (8016208 <prvSwitchTimerLists+0xc0>)
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	68db      	ldr	r3, [r3, #12]
 8016160:	68db      	ldr	r3, [r3, #12]
 8016162:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	3304      	adds	r3, #4
 8016168:	4618      	mov	r0, r3
 801616a:	f7fd fe9d 	bl	8013ea8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	6a1b      	ldr	r3, [r3, #32]
 8016172:	68f8      	ldr	r0, [r7, #12]
 8016174:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801617c:	f003 0304 	and.w	r3, r3, #4
 8016180:	2b00      	cmp	r3, #0
 8016182:	d02e      	beq.n	80161e2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	699b      	ldr	r3, [r3, #24]
 8016188:	693a      	ldr	r2, [r7, #16]
 801618a:	4413      	add	r3, r2
 801618c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801618e:	68ba      	ldr	r2, [r7, #8]
 8016190:	693b      	ldr	r3, [r7, #16]
 8016192:	429a      	cmp	r2, r3
 8016194:	d90e      	bls.n	80161b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	68ba      	ldr	r2, [r7, #8]
 801619a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	68fa      	ldr	r2, [r7, #12]
 80161a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80161a2:	4b19      	ldr	r3, [pc, #100]	; (8016208 <prvSwitchTimerLists+0xc0>)
 80161a4:	681a      	ldr	r2, [r3, #0]
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	3304      	adds	r3, #4
 80161aa:	4619      	mov	r1, r3
 80161ac:	4610      	mov	r0, r2
 80161ae:	f7fd fe42 	bl	8013e36 <vListInsert>
 80161b2:	e016      	b.n	80161e2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80161b4:	2300      	movs	r3, #0
 80161b6:	9300      	str	r3, [sp, #0]
 80161b8:	2300      	movs	r3, #0
 80161ba:	693a      	ldr	r2, [r7, #16]
 80161bc:	2100      	movs	r1, #0
 80161be:	68f8      	ldr	r0, [r7, #12]
 80161c0:	f7ff fd60 	bl	8015c84 <xTimerGenericCommand>
 80161c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d10a      	bne.n	80161e2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80161cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161d0:	f383 8811 	msr	BASEPRI, r3
 80161d4:	f3bf 8f6f 	isb	sy
 80161d8:	f3bf 8f4f 	dsb	sy
 80161dc:	603b      	str	r3, [r7, #0]
}
 80161de:	bf00      	nop
 80161e0:	e7fe      	b.n	80161e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80161e2:	4b09      	ldr	r3, [pc, #36]	; (8016208 <prvSwitchTimerLists+0xc0>)
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d1b1      	bne.n	8016150 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80161ec:	4b06      	ldr	r3, [pc, #24]	; (8016208 <prvSwitchTimerLists+0xc0>)
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80161f2:	4b06      	ldr	r3, [pc, #24]	; (801620c <prvSwitchTimerLists+0xc4>)
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	4a04      	ldr	r2, [pc, #16]	; (8016208 <prvSwitchTimerLists+0xc0>)
 80161f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80161fa:	4a04      	ldr	r2, [pc, #16]	; (801620c <prvSwitchTimerLists+0xc4>)
 80161fc:	697b      	ldr	r3, [r7, #20]
 80161fe:	6013      	str	r3, [r2, #0]
}
 8016200:	bf00      	nop
 8016202:	3718      	adds	r7, #24
 8016204:	46bd      	mov	sp, r7
 8016206:	bd80      	pop	{r7, pc}
 8016208:	24001d0c 	.word	0x24001d0c
 801620c:	24001d10 	.word	0x24001d10

08016210 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016210:	b580      	push	{r7, lr}
 8016212:	b082      	sub	sp, #8
 8016214:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8016216:	f000 f985 	bl	8016524 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801621a:	4b15      	ldr	r3, [pc, #84]	; (8016270 <prvCheckForValidListAndQueue+0x60>)
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d120      	bne.n	8016264 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8016222:	4814      	ldr	r0, [pc, #80]	; (8016274 <prvCheckForValidListAndQueue+0x64>)
 8016224:	f7fd fdb6 	bl	8013d94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016228:	4813      	ldr	r0, [pc, #76]	; (8016278 <prvCheckForValidListAndQueue+0x68>)
 801622a:	f7fd fdb3 	bl	8013d94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801622e:	4b13      	ldr	r3, [pc, #76]	; (801627c <prvCheckForValidListAndQueue+0x6c>)
 8016230:	4a10      	ldr	r2, [pc, #64]	; (8016274 <prvCheckForValidListAndQueue+0x64>)
 8016232:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016234:	4b12      	ldr	r3, [pc, #72]	; (8016280 <prvCheckForValidListAndQueue+0x70>)
 8016236:	4a10      	ldr	r2, [pc, #64]	; (8016278 <prvCheckForValidListAndQueue+0x68>)
 8016238:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801623a:	2300      	movs	r3, #0
 801623c:	9300      	str	r3, [sp, #0]
 801623e:	4b11      	ldr	r3, [pc, #68]	; (8016284 <prvCheckForValidListAndQueue+0x74>)
 8016240:	4a11      	ldr	r2, [pc, #68]	; (8016288 <prvCheckForValidListAndQueue+0x78>)
 8016242:	2110      	movs	r1, #16
 8016244:	200a      	movs	r0, #10
 8016246:	f7fd fec1 	bl	8013fcc <xQueueGenericCreateStatic>
 801624a:	4603      	mov	r3, r0
 801624c:	4a08      	ldr	r2, [pc, #32]	; (8016270 <prvCheckForValidListAndQueue+0x60>)
 801624e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8016250:	4b07      	ldr	r3, [pc, #28]	; (8016270 <prvCheckForValidListAndQueue+0x60>)
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d005      	beq.n	8016264 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016258:	4b05      	ldr	r3, [pc, #20]	; (8016270 <prvCheckForValidListAndQueue+0x60>)
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	490b      	ldr	r1, [pc, #44]	; (801628c <prvCheckForValidListAndQueue+0x7c>)
 801625e:	4618      	mov	r0, r3
 8016260:	f7fe fb94 	bl	801498c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016264:	f000 f98e 	bl	8016584 <vPortExitCritical>
}
 8016268:	bf00      	nop
 801626a:	46bd      	mov	sp, r7
 801626c:	bd80      	pop	{r7, pc}
 801626e:	bf00      	nop
 8016270:	24001d14 	.word	0x24001d14
 8016274:	24001ce4 	.word	0x24001ce4
 8016278:	24001cf8 	.word	0x24001cf8
 801627c:	24001d0c 	.word	0x24001d0c
 8016280:	24001d10 	.word	0x24001d10
 8016284:	24001dc0 	.word	0x24001dc0
 8016288:	24001d20 	.word	0x24001d20
 801628c:	08017874 	.word	0x08017874

08016290 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8016290:	b580      	push	{r7, lr}
 8016292:	b08a      	sub	sp, #40	; 0x28
 8016294:	af00      	add	r7, sp, #0
 8016296:	60f8      	str	r0, [r7, #12]
 8016298:	60b9      	str	r1, [r7, #8]
 801629a:	607a      	str	r2, [r7, #4]
 801629c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801629e:	f06f 0301 	mvn.w	r3, #1
 80162a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80162b0:	4b06      	ldr	r3, [pc, #24]	; (80162cc <xTimerPendFunctionCallFromISR+0x3c>)
 80162b2:	6818      	ldr	r0, [r3, #0]
 80162b4:	f107 0114 	add.w	r1, r7, #20
 80162b8:	2300      	movs	r3, #0
 80162ba:	683a      	ldr	r2, [r7, #0]
 80162bc:	f7fe f85a 	bl	8014374 <xQueueGenericSendFromISR>
 80162c0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80162c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80162c4:	4618      	mov	r0, r3
 80162c6:	3728      	adds	r7, #40	; 0x28
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}
 80162cc:	24001d14 	.word	0x24001d14

080162d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80162d0:	b480      	push	{r7}
 80162d2:	b085      	sub	sp, #20
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	60f8      	str	r0, [r7, #12]
 80162d8:	60b9      	str	r1, [r7, #8]
 80162da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	3b04      	subs	r3, #4
 80162e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80162e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	3b04      	subs	r3, #4
 80162ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80162f0:	68bb      	ldr	r3, [r7, #8]
 80162f2:	f023 0201 	bic.w	r2, r3, #1
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	3b04      	subs	r3, #4
 80162fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016300:	4a0c      	ldr	r2, [pc, #48]	; (8016334 <pxPortInitialiseStack+0x64>)
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	3b14      	subs	r3, #20
 801630a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801630c:	687a      	ldr	r2, [r7, #4]
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	3b04      	subs	r3, #4
 8016316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	f06f 0202 	mvn.w	r2, #2
 801631e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	3b20      	subs	r3, #32
 8016324:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016326:	68fb      	ldr	r3, [r7, #12]
}
 8016328:	4618      	mov	r0, r3
 801632a:	3714      	adds	r7, #20
 801632c:	46bd      	mov	sp, r7
 801632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016332:	4770      	bx	lr
 8016334:	08016339 	.word	0x08016339

08016338 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016338:	b480      	push	{r7}
 801633a:	b085      	sub	sp, #20
 801633c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801633e:	2300      	movs	r3, #0
 8016340:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016342:	4b12      	ldr	r3, [pc, #72]	; (801638c <prvTaskExitError+0x54>)
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801634a:	d00a      	beq.n	8016362 <prvTaskExitError+0x2a>
	__asm volatile
 801634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016350:	f383 8811 	msr	BASEPRI, r3
 8016354:	f3bf 8f6f 	isb	sy
 8016358:	f3bf 8f4f 	dsb	sy
 801635c:	60fb      	str	r3, [r7, #12]
}
 801635e:	bf00      	nop
 8016360:	e7fe      	b.n	8016360 <prvTaskExitError+0x28>
	__asm volatile
 8016362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016366:	f383 8811 	msr	BASEPRI, r3
 801636a:	f3bf 8f6f 	isb	sy
 801636e:	f3bf 8f4f 	dsb	sy
 8016372:	60bb      	str	r3, [r7, #8]
}
 8016374:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016376:	bf00      	nop
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d0fc      	beq.n	8016378 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801637e:	bf00      	nop
 8016380:	bf00      	nop
 8016382:	3714      	adds	r7, #20
 8016384:	46bd      	mov	sp, r7
 8016386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638a:	4770      	bx	lr
 801638c:	2400009c 	.word	0x2400009c

08016390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016390:	4b07      	ldr	r3, [pc, #28]	; (80163b0 <pxCurrentTCBConst2>)
 8016392:	6819      	ldr	r1, [r3, #0]
 8016394:	6808      	ldr	r0, [r1, #0]
 8016396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801639a:	f380 8809 	msr	PSP, r0
 801639e:	f3bf 8f6f 	isb	sy
 80163a2:	f04f 0000 	mov.w	r0, #0
 80163a6:	f380 8811 	msr	BASEPRI, r0
 80163aa:	4770      	bx	lr
 80163ac:	f3af 8000 	nop.w

080163b0 <pxCurrentTCBConst2>:
 80163b0:	240017e4 	.word	0x240017e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80163b4:	bf00      	nop
 80163b6:	bf00      	nop

080163b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80163b8:	4808      	ldr	r0, [pc, #32]	; (80163dc <prvPortStartFirstTask+0x24>)
 80163ba:	6800      	ldr	r0, [r0, #0]
 80163bc:	6800      	ldr	r0, [r0, #0]
 80163be:	f380 8808 	msr	MSP, r0
 80163c2:	f04f 0000 	mov.w	r0, #0
 80163c6:	f380 8814 	msr	CONTROL, r0
 80163ca:	b662      	cpsie	i
 80163cc:	b661      	cpsie	f
 80163ce:	f3bf 8f4f 	dsb	sy
 80163d2:	f3bf 8f6f 	isb	sy
 80163d6:	df00      	svc	0
 80163d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80163da:	bf00      	nop
 80163dc:	e000ed08 	.word	0xe000ed08

080163e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b086      	sub	sp, #24
 80163e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80163e6:	4b46      	ldr	r3, [pc, #280]	; (8016500 <xPortStartScheduler+0x120>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	4a46      	ldr	r2, [pc, #280]	; (8016504 <xPortStartScheduler+0x124>)
 80163ec:	4293      	cmp	r3, r2
 80163ee:	d10a      	bne.n	8016406 <xPortStartScheduler+0x26>
	__asm volatile
 80163f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163f4:	f383 8811 	msr	BASEPRI, r3
 80163f8:	f3bf 8f6f 	isb	sy
 80163fc:	f3bf 8f4f 	dsb	sy
 8016400:	613b      	str	r3, [r7, #16]
}
 8016402:	bf00      	nop
 8016404:	e7fe      	b.n	8016404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016406:	4b3e      	ldr	r3, [pc, #248]	; (8016500 <xPortStartScheduler+0x120>)
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	4a3f      	ldr	r2, [pc, #252]	; (8016508 <xPortStartScheduler+0x128>)
 801640c:	4293      	cmp	r3, r2
 801640e:	d10a      	bne.n	8016426 <xPortStartScheduler+0x46>
	__asm volatile
 8016410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016414:	f383 8811 	msr	BASEPRI, r3
 8016418:	f3bf 8f6f 	isb	sy
 801641c:	f3bf 8f4f 	dsb	sy
 8016420:	60fb      	str	r3, [r7, #12]
}
 8016422:	bf00      	nop
 8016424:	e7fe      	b.n	8016424 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016426:	4b39      	ldr	r3, [pc, #228]	; (801650c <xPortStartScheduler+0x12c>)
 8016428:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801642a:	697b      	ldr	r3, [r7, #20]
 801642c:	781b      	ldrb	r3, [r3, #0]
 801642e:	b2db      	uxtb	r3, r3
 8016430:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016432:	697b      	ldr	r3, [r7, #20]
 8016434:	22ff      	movs	r2, #255	; 0xff
 8016436:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016438:	697b      	ldr	r3, [r7, #20]
 801643a:	781b      	ldrb	r3, [r3, #0]
 801643c:	b2db      	uxtb	r3, r3
 801643e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016440:	78fb      	ldrb	r3, [r7, #3]
 8016442:	b2db      	uxtb	r3, r3
 8016444:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016448:	b2da      	uxtb	r2, r3
 801644a:	4b31      	ldr	r3, [pc, #196]	; (8016510 <xPortStartScheduler+0x130>)
 801644c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801644e:	4b31      	ldr	r3, [pc, #196]	; (8016514 <xPortStartScheduler+0x134>)
 8016450:	2207      	movs	r2, #7
 8016452:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016454:	e009      	b.n	801646a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8016456:	4b2f      	ldr	r3, [pc, #188]	; (8016514 <xPortStartScheduler+0x134>)
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	3b01      	subs	r3, #1
 801645c:	4a2d      	ldr	r2, [pc, #180]	; (8016514 <xPortStartScheduler+0x134>)
 801645e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016460:	78fb      	ldrb	r3, [r7, #3]
 8016462:	b2db      	uxtb	r3, r3
 8016464:	005b      	lsls	r3, r3, #1
 8016466:	b2db      	uxtb	r3, r3
 8016468:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801646a:	78fb      	ldrb	r3, [r7, #3]
 801646c:	b2db      	uxtb	r3, r3
 801646e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016472:	2b80      	cmp	r3, #128	; 0x80
 8016474:	d0ef      	beq.n	8016456 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016476:	4b27      	ldr	r3, [pc, #156]	; (8016514 <xPortStartScheduler+0x134>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	f1c3 0307 	rsb	r3, r3, #7
 801647e:	2b04      	cmp	r3, #4
 8016480:	d00a      	beq.n	8016498 <xPortStartScheduler+0xb8>
	__asm volatile
 8016482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016486:	f383 8811 	msr	BASEPRI, r3
 801648a:	f3bf 8f6f 	isb	sy
 801648e:	f3bf 8f4f 	dsb	sy
 8016492:	60bb      	str	r3, [r7, #8]
}
 8016494:	bf00      	nop
 8016496:	e7fe      	b.n	8016496 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016498:	4b1e      	ldr	r3, [pc, #120]	; (8016514 <xPortStartScheduler+0x134>)
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	021b      	lsls	r3, r3, #8
 801649e:	4a1d      	ldr	r2, [pc, #116]	; (8016514 <xPortStartScheduler+0x134>)
 80164a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80164a2:	4b1c      	ldr	r3, [pc, #112]	; (8016514 <xPortStartScheduler+0x134>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80164aa:	4a1a      	ldr	r2, [pc, #104]	; (8016514 <xPortStartScheduler+0x134>)
 80164ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	b2da      	uxtb	r2, r3
 80164b2:	697b      	ldr	r3, [r7, #20]
 80164b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80164b6:	4b18      	ldr	r3, [pc, #96]	; (8016518 <xPortStartScheduler+0x138>)
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	4a17      	ldr	r2, [pc, #92]	; (8016518 <xPortStartScheduler+0x138>)
 80164bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80164c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80164c2:	4b15      	ldr	r3, [pc, #84]	; (8016518 <xPortStartScheduler+0x138>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	4a14      	ldr	r2, [pc, #80]	; (8016518 <xPortStartScheduler+0x138>)
 80164c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80164cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80164ce:	f000 f8dd 	bl	801668c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80164d2:	4b12      	ldr	r3, [pc, #72]	; (801651c <xPortStartScheduler+0x13c>)
 80164d4:	2200      	movs	r2, #0
 80164d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80164d8:	f000 f8fc 	bl	80166d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80164dc:	4b10      	ldr	r3, [pc, #64]	; (8016520 <xPortStartScheduler+0x140>)
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	4a0f      	ldr	r2, [pc, #60]	; (8016520 <xPortStartScheduler+0x140>)
 80164e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80164e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80164e8:	f7ff ff66 	bl	80163b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80164ec:	f7fe ff80 	bl	80153f0 <vTaskSwitchContext>
	prvTaskExitError();
 80164f0:	f7ff ff22 	bl	8016338 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80164f4:	2300      	movs	r3, #0
}
 80164f6:	4618      	mov	r0, r3
 80164f8:	3718      	adds	r7, #24
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}
 80164fe:	bf00      	nop
 8016500:	e000ed00 	.word	0xe000ed00
 8016504:	410fc271 	.word	0x410fc271
 8016508:	410fc270 	.word	0x410fc270
 801650c:	e000e400 	.word	0xe000e400
 8016510:	24001e10 	.word	0x24001e10
 8016514:	24001e14 	.word	0x24001e14
 8016518:	e000ed20 	.word	0xe000ed20
 801651c:	2400009c 	.word	0x2400009c
 8016520:	e000ef34 	.word	0xe000ef34

08016524 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016524:	b480      	push	{r7}
 8016526:	b083      	sub	sp, #12
 8016528:	af00      	add	r7, sp, #0
	__asm volatile
 801652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801652e:	f383 8811 	msr	BASEPRI, r3
 8016532:	f3bf 8f6f 	isb	sy
 8016536:	f3bf 8f4f 	dsb	sy
 801653a:	607b      	str	r3, [r7, #4]
}
 801653c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801653e:	4b0f      	ldr	r3, [pc, #60]	; (801657c <vPortEnterCritical+0x58>)
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	3301      	adds	r3, #1
 8016544:	4a0d      	ldr	r2, [pc, #52]	; (801657c <vPortEnterCritical+0x58>)
 8016546:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016548:	4b0c      	ldr	r3, [pc, #48]	; (801657c <vPortEnterCritical+0x58>)
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	2b01      	cmp	r3, #1
 801654e:	d10f      	bne.n	8016570 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016550:	4b0b      	ldr	r3, [pc, #44]	; (8016580 <vPortEnterCritical+0x5c>)
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	b2db      	uxtb	r3, r3
 8016556:	2b00      	cmp	r3, #0
 8016558:	d00a      	beq.n	8016570 <vPortEnterCritical+0x4c>
	__asm volatile
 801655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801655e:	f383 8811 	msr	BASEPRI, r3
 8016562:	f3bf 8f6f 	isb	sy
 8016566:	f3bf 8f4f 	dsb	sy
 801656a:	603b      	str	r3, [r7, #0]
}
 801656c:	bf00      	nop
 801656e:	e7fe      	b.n	801656e <vPortEnterCritical+0x4a>
	}
}
 8016570:	bf00      	nop
 8016572:	370c      	adds	r7, #12
 8016574:	46bd      	mov	sp, r7
 8016576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657a:	4770      	bx	lr
 801657c:	2400009c 	.word	0x2400009c
 8016580:	e000ed04 	.word	0xe000ed04

08016584 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016584:	b480      	push	{r7}
 8016586:	b083      	sub	sp, #12
 8016588:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801658a:	4b12      	ldr	r3, [pc, #72]	; (80165d4 <vPortExitCritical+0x50>)
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d10a      	bne.n	80165a8 <vPortExitCritical+0x24>
	__asm volatile
 8016592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016596:	f383 8811 	msr	BASEPRI, r3
 801659a:	f3bf 8f6f 	isb	sy
 801659e:	f3bf 8f4f 	dsb	sy
 80165a2:	607b      	str	r3, [r7, #4]
}
 80165a4:	bf00      	nop
 80165a6:	e7fe      	b.n	80165a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80165a8:	4b0a      	ldr	r3, [pc, #40]	; (80165d4 <vPortExitCritical+0x50>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	3b01      	subs	r3, #1
 80165ae:	4a09      	ldr	r2, [pc, #36]	; (80165d4 <vPortExitCritical+0x50>)
 80165b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80165b2:	4b08      	ldr	r3, [pc, #32]	; (80165d4 <vPortExitCritical+0x50>)
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d105      	bne.n	80165c6 <vPortExitCritical+0x42>
 80165ba:	2300      	movs	r3, #0
 80165bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80165be:	683b      	ldr	r3, [r7, #0]
 80165c0:	f383 8811 	msr	BASEPRI, r3
}
 80165c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80165c6:	bf00      	nop
 80165c8:	370c      	adds	r7, #12
 80165ca:	46bd      	mov	sp, r7
 80165cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165d0:	4770      	bx	lr
 80165d2:	bf00      	nop
 80165d4:	2400009c 	.word	0x2400009c
	...

080165e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80165e0:	f3ef 8009 	mrs	r0, PSP
 80165e4:	f3bf 8f6f 	isb	sy
 80165e8:	4b15      	ldr	r3, [pc, #84]	; (8016640 <pxCurrentTCBConst>)
 80165ea:	681a      	ldr	r2, [r3, #0]
 80165ec:	f01e 0f10 	tst.w	lr, #16
 80165f0:	bf08      	it	eq
 80165f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80165f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165fa:	6010      	str	r0, [r2, #0]
 80165fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016600:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016604:	f380 8811 	msr	BASEPRI, r0
 8016608:	f3bf 8f4f 	dsb	sy
 801660c:	f3bf 8f6f 	isb	sy
 8016610:	f7fe feee 	bl	80153f0 <vTaskSwitchContext>
 8016614:	f04f 0000 	mov.w	r0, #0
 8016618:	f380 8811 	msr	BASEPRI, r0
 801661c:	bc09      	pop	{r0, r3}
 801661e:	6819      	ldr	r1, [r3, #0]
 8016620:	6808      	ldr	r0, [r1, #0]
 8016622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016626:	f01e 0f10 	tst.w	lr, #16
 801662a:	bf08      	it	eq
 801662c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016630:	f380 8809 	msr	PSP, r0
 8016634:	f3bf 8f6f 	isb	sy
 8016638:	4770      	bx	lr
 801663a:	bf00      	nop
 801663c:	f3af 8000 	nop.w

08016640 <pxCurrentTCBConst>:
 8016640:	240017e4 	.word	0x240017e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016644:	bf00      	nop
 8016646:	bf00      	nop

08016648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b082      	sub	sp, #8
 801664c:	af00      	add	r7, sp, #0
	__asm volatile
 801664e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016652:	f383 8811 	msr	BASEPRI, r3
 8016656:	f3bf 8f6f 	isb	sy
 801665a:	f3bf 8f4f 	dsb	sy
 801665e:	607b      	str	r3, [r7, #4]
}
 8016660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016662:	f7fe fe03 	bl	801526c <xTaskIncrementTick>
 8016666:	4603      	mov	r3, r0
 8016668:	2b00      	cmp	r3, #0
 801666a:	d003      	beq.n	8016674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801666c:	4b06      	ldr	r3, [pc, #24]	; (8016688 <xPortSysTickHandler+0x40>)
 801666e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016672:	601a      	str	r2, [r3, #0]
 8016674:	2300      	movs	r3, #0
 8016676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016678:	683b      	ldr	r3, [r7, #0]
 801667a:	f383 8811 	msr	BASEPRI, r3
}
 801667e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016680:	bf00      	nop
 8016682:	3708      	adds	r7, #8
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}
 8016688:	e000ed04 	.word	0xe000ed04

0801668c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801668c:	b480      	push	{r7}
 801668e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016690:	4b0b      	ldr	r3, [pc, #44]	; (80166c0 <vPortSetupTimerInterrupt+0x34>)
 8016692:	2200      	movs	r2, #0
 8016694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016696:	4b0b      	ldr	r3, [pc, #44]	; (80166c4 <vPortSetupTimerInterrupt+0x38>)
 8016698:	2200      	movs	r2, #0
 801669a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801669c:	4b0a      	ldr	r3, [pc, #40]	; (80166c8 <vPortSetupTimerInterrupt+0x3c>)
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	4a0a      	ldr	r2, [pc, #40]	; (80166cc <vPortSetupTimerInterrupt+0x40>)
 80166a2:	fba2 2303 	umull	r2, r3, r2, r3
 80166a6:	099b      	lsrs	r3, r3, #6
 80166a8:	4a09      	ldr	r2, [pc, #36]	; (80166d0 <vPortSetupTimerInterrupt+0x44>)
 80166aa:	3b01      	subs	r3, #1
 80166ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80166ae:	4b04      	ldr	r3, [pc, #16]	; (80166c0 <vPortSetupTimerInterrupt+0x34>)
 80166b0:	2207      	movs	r2, #7
 80166b2:	601a      	str	r2, [r3, #0]
}
 80166b4:	bf00      	nop
 80166b6:	46bd      	mov	sp, r7
 80166b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166bc:	4770      	bx	lr
 80166be:	bf00      	nop
 80166c0:	e000e010 	.word	0xe000e010
 80166c4:	e000e018 	.word	0xe000e018
 80166c8:	2400008c 	.word	0x2400008c
 80166cc:	10624dd3 	.word	0x10624dd3
 80166d0:	e000e014 	.word	0xe000e014

080166d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80166d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80166e4 <vPortEnableVFP+0x10>
 80166d8:	6801      	ldr	r1, [r0, #0]
 80166da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80166de:	6001      	str	r1, [r0, #0]
 80166e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80166e2:	bf00      	nop
 80166e4:	e000ed88 	.word	0xe000ed88

080166e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80166e8:	b480      	push	{r7}
 80166ea:	b085      	sub	sp, #20
 80166ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80166ee:	f3ef 8305 	mrs	r3, IPSR
 80166f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	2b0f      	cmp	r3, #15
 80166f8:	d914      	bls.n	8016724 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80166fa:	4a17      	ldr	r2, [pc, #92]	; (8016758 <vPortValidateInterruptPriority+0x70>)
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	4413      	add	r3, r2
 8016700:	781b      	ldrb	r3, [r3, #0]
 8016702:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016704:	4b15      	ldr	r3, [pc, #84]	; (801675c <vPortValidateInterruptPriority+0x74>)
 8016706:	781b      	ldrb	r3, [r3, #0]
 8016708:	7afa      	ldrb	r2, [r7, #11]
 801670a:	429a      	cmp	r2, r3
 801670c:	d20a      	bcs.n	8016724 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016712:	f383 8811 	msr	BASEPRI, r3
 8016716:	f3bf 8f6f 	isb	sy
 801671a:	f3bf 8f4f 	dsb	sy
 801671e:	607b      	str	r3, [r7, #4]
}
 8016720:	bf00      	nop
 8016722:	e7fe      	b.n	8016722 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016724:	4b0e      	ldr	r3, [pc, #56]	; (8016760 <vPortValidateInterruptPriority+0x78>)
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801672c:	4b0d      	ldr	r3, [pc, #52]	; (8016764 <vPortValidateInterruptPriority+0x7c>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	429a      	cmp	r2, r3
 8016732:	d90a      	bls.n	801674a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016738:	f383 8811 	msr	BASEPRI, r3
 801673c:	f3bf 8f6f 	isb	sy
 8016740:	f3bf 8f4f 	dsb	sy
 8016744:	603b      	str	r3, [r7, #0]
}
 8016746:	bf00      	nop
 8016748:	e7fe      	b.n	8016748 <vPortValidateInterruptPriority+0x60>
	}
 801674a:	bf00      	nop
 801674c:	3714      	adds	r7, #20
 801674e:	46bd      	mov	sp, r7
 8016750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016754:	4770      	bx	lr
 8016756:	bf00      	nop
 8016758:	e000e3f0 	.word	0xe000e3f0
 801675c:	24001e10 	.word	0x24001e10
 8016760:	e000ed0c 	.word	0xe000ed0c
 8016764:	24001e14 	.word	0x24001e14

08016768 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b08a      	sub	sp, #40	; 0x28
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016770:	2300      	movs	r3, #0
 8016772:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016774:	f7fe fcbe 	bl	80150f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016778:	4b5b      	ldr	r3, [pc, #364]	; (80168e8 <pvPortMalloc+0x180>)
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d101      	bne.n	8016784 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016780:	f000 f920 	bl	80169c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016784:	4b59      	ldr	r3, [pc, #356]	; (80168ec <pvPortMalloc+0x184>)
 8016786:	681a      	ldr	r2, [r3, #0]
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	4013      	ands	r3, r2
 801678c:	2b00      	cmp	r3, #0
 801678e:	f040 8093 	bne.w	80168b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d01d      	beq.n	80167d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016798:	2208      	movs	r2, #8
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	4413      	add	r3, r2
 801679e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	f003 0307 	and.w	r3, r3, #7
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d014      	beq.n	80167d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	f023 0307 	bic.w	r3, r3, #7
 80167b0:	3308      	adds	r3, #8
 80167b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	f003 0307 	and.w	r3, r3, #7
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d00a      	beq.n	80167d4 <pvPortMalloc+0x6c>
	__asm volatile
 80167be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167c2:	f383 8811 	msr	BASEPRI, r3
 80167c6:	f3bf 8f6f 	isb	sy
 80167ca:	f3bf 8f4f 	dsb	sy
 80167ce:	617b      	str	r3, [r7, #20]
}
 80167d0:	bf00      	nop
 80167d2:	e7fe      	b.n	80167d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d06e      	beq.n	80168b8 <pvPortMalloc+0x150>
 80167da:	4b45      	ldr	r3, [pc, #276]	; (80168f0 <pvPortMalloc+0x188>)
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	687a      	ldr	r2, [r7, #4]
 80167e0:	429a      	cmp	r2, r3
 80167e2:	d869      	bhi.n	80168b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80167e4:	4b43      	ldr	r3, [pc, #268]	; (80168f4 <pvPortMalloc+0x18c>)
 80167e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80167e8:	4b42      	ldr	r3, [pc, #264]	; (80168f4 <pvPortMalloc+0x18c>)
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80167ee:	e004      	b.n	80167fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80167f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80167f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80167fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167fc:	685b      	ldr	r3, [r3, #4]
 80167fe:	687a      	ldr	r2, [r7, #4]
 8016800:	429a      	cmp	r2, r3
 8016802:	d903      	bls.n	801680c <pvPortMalloc+0xa4>
 8016804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d1f1      	bne.n	80167f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801680c:	4b36      	ldr	r3, [pc, #216]	; (80168e8 <pvPortMalloc+0x180>)
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016812:	429a      	cmp	r2, r3
 8016814:	d050      	beq.n	80168b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016816:	6a3b      	ldr	r3, [r7, #32]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	2208      	movs	r2, #8
 801681c:	4413      	add	r3, r2
 801681e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016822:	681a      	ldr	r2, [r3, #0]
 8016824:	6a3b      	ldr	r3, [r7, #32]
 8016826:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801682a:	685a      	ldr	r2, [r3, #4]
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	1ad2      	subs	r2, r2, r3
 8016830:	2308      	movs	r3, #8
 8016832:	005b      	lsls	r3, r3, #1
 8016834:	429a      	cmp	r2, r3
 8016836:	d91f      	bls.n	8016878 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	4413      	add	r3, r2
 801683e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016840:	69bb      	ldr	r3, [r7, #24]
 8016842:	f003 0307 	and.w	r3, r3, #7
 8016846:	2b00      	cmp	r3, #0
 8016848:	d00a      	beq.n	8016860 <pvPortMalloc+0xf8>
	__asm volatile
 801684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801684e:	f383 8811 	msr	BASEPRI, r3
 8016852:	f3bf 8f6f 	isb	sy
 8016856:	f3bf 8f4f 	dsb	sy
 801685a:	613b      	str	r3, [r7, #16]
}
 801685c:	bf00      	nop
 801685e:	e7fe      	b.n	801685e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016862:	685a      	ldr	r2, [r3, #4]
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	1ad2      	subs	r2, r2, r3
 8016868:	69bb      	ldr	r3, [r7, #24]
 801686a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801686e:	687a      	ldr	r2, [r7, #4]
 8016870:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016872:	69b8      	ldr	r0, [r7, #24]
 8016874:	f000 f908 	bl	8016a88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016878:	4b1d      	ldr	r3, [pc, #116]	; (80168f0 <pvPortMalloc+0x188>)
 801687a:	681a      	ldr	r2, [r3, #0]
 801687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801687e:	685b      	ldr	r3, [r3, #4]
 8016880:	1ad3      	subs	r3, r2, r3
 8016882:	4a1b      	ldr	r2, [pc, #108]	; (80168f0 <pvPortMalloc+0x188>)
 8016884:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016886:	4b1a      	ldr	r3, [pc, #104]	; (80168f0 <pvPortMalloc+0x188>)
 8016888:	681a      	ldr	r2, [r3, #0]
 801688a:	4b1b      	ldr	r3, [pc, #108]	; (80168f8 <pvPortMalloc+0x190>)
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	429a      	cmp	r2, r3
 8016890:	d203      	bcs.n	801689a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016892:	4b17      	ldr	r3, [pc, #92]	; (80168f0 <pvPortMalloc+0x188>)
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	4a18      	ldr	r2, [pc, #96]	; (80168f8 <pvPortMalloc+0x190>)
 8016898:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801689c:	685a      	ldr	r2, [r3, #4]
 801689e:	4b13      	ldr	r3, [pc, #76]	; (80168ec <pvPortMalloc+0x184>)
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	431a      	orrs	r2, r3
 80168a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80168a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168aa:	2200      	movs	r2, #0
 80168ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80168ae:	4b13      	ldr	r3, [pc, #76]	; (80168fc <pvPortMalloc+0x194>)
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	3301      	adds	r3, #1
 80168b4:	4a11      	ldr	r2, [pc, #68]	; (80168fc <pvPortMalloc+0x194>)
 80168b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80168b8:	f7fe fc2a 	bl	8015110 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80168bc:	69fb      	ldr	r3, [r7, #28]
 80168be:	f003 0307 	and.w	r3, r3, #7
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d00a      	beq.n	80168dc <pvPortMalloc+0x174>
	__asm volatile
 80168c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168ca:	f383 8811 	msr	BASEPRI, r3
 80168ce:	f3bf 8f6f 	isb	sy
 80168d2:	f3bf 8f4f 	dsb	sy
 80168d6:	60fb      	str	r3, [r7, #12]
}
 80168d8:	bf00      	nop
 80168da:	e7fe      	b.n	80168da <pvPortMalloc+0x172>
	return pvReturn;
 80168dc:	69fb      	ldr	r3, [r7, #28]
}
 80168de:	4618      	mov	r0, r3
 80168e0:	3728      	adds	r7, #40	; 0x28
 80168e2:	46bd      	mov	sp, r7
 80168e4:	bd80      	pop	{r7, pc}
 80168e6:	bf00      	nop
 80168e8:	24005a20 	.word	0x24005a20
 80168ec:	24005a34 	.word	0x24005a34
 80168f0:	24005a24 	.word	0x24005a24
 80168f4:	24005a18 	.word	0x24005a18
 80168f8:	24005a28 	.word	0x24005a28
 80168fc:	24005a2c 	.word	0x24005a2c

08016900 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b086      	sub	sp, #24
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d04d      	beq.n	80169ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016912:	2308      	movs	r3, #8
 8016914:	425b      	negs	r3, r3
 8016916:	697a      	ldr	r2, [r7, #20]
 8016918:	4413      	add	r3, r2
 801691a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801691c:	697b      	ldr	r3, [r7, #20]
 801691e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016920:	693b      	ldr	r3, [r7, #16]
 8016922:	685a      	ldr	r2, [r3, #4]
 8016924:	4b24      	ldr	r3, [pc, #144]	; (80169b8 <vPortFree+0xb8>)
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	4013      	ands	r3, r2
 801692a:	2b00      	cmp	r3, #0
 801692c:	d10a      	bne.n	8016944 <vPortFree+0x44>
	__asm volatile
 801692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016932:	f383 8811 	msr	BASEPRI, r3
 8016936:	f3bf 8f6f 	isb	sy
 801693a:	f3bf 8f4f 	dsb	sy
 801693e:	60fb      	str	r3, [r7, #12]
}
 8016940:	bf00      	nop
 8016942:	e7fe      	b.n	8016942 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016944:	693b      	ldr	r3, [r7, #16]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	2b00      	cmp	r3, #0
 801694a:	d00a      	beq.n	8016962 <vPortFree+0x62>
	__asm volatile
 801694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016950:	f383 8811 	msr	BASEPRI, r3
 8016954:	f3bf 8f6f 	isb	sy
 8016958:	f3bf 8f4f 	dsb	sy
 801695c:	60bb      	str	r3, [r7, #8]
}
 801695e:	bf00      	nop
 8016960:	e7fe      	b.n	8016960 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016962:	693b      	ldr	r3, [r7, #16]
 8016964:	685a      	ldr	r2, [r3, #4]
 8016966:	4b14      	ldr	r3, [pc, #80]	; (80169b8 <vPortFree+0xb8>)
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	4013      	ands	r3, r2
 801696c:	2b00      	cmp	r3, #0
 801696e:	d01e      	beq.n	80169ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016970:	693b      	ldr	r3, [r7, #16]
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d11a      	bne.n	80169ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016978:	693b      	ldr	r3, [r7, #16]
 801697a:	685a      	ldr	r2, [r3, #4]
 801697c:	4b0e      	ldr	r3, [pc, #56]	; (80169b8 <vPortFree+0xb8>)
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	43db      	mvns	r3, r3
 8016982:	401a      	ands	r2, r3
 8016984:	693b      	ldr	r3, [r7, #16]
 8016986:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016988:	f7fe fbb4 	bl	80150f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801698c:	693b      	ldr	r3, [r7, #16]
 801698e:	685a      	ldr	r2, [r3, #4]
 8016990:	4b0a      	ldr	r3, [pc, #40]	; (80169bc <vPortFree+0xbc>)
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	4413      	add	r3, r2
 8016996:	4a09      	ldr	r2, [pc, #36]	; (80169bc <vPortFree+0xbc>)
 8016998:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801699a:	6938      	ldr	r0, [r7, #16]
 801699c:	f000 f874 	bl	8016a88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80169a0:	4b07      	ldr	r3, [pc, #28]	; (80169c0 <vPortFree+0xc0>)
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	3301      	adds	r3, #1
 80169a6:	4a06      	ldr	r2, [pc, #24]	; (80169c0 <vPortFree+0xc0>)
 80169a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80169aa:	f7fe fbb1 	bl	8015110 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80169ae:	bf00      	nop
 80169b0:	3718      	adds	r7, #24
 80169b2:	46bd      	mov	sp, r7
 80169b4:	bd80      	pop	{r7, pc}
 80169b6:	bf00      	nop
 80169b8:	24005a34 	.word	0x24005a34
 80169bc:	24005a24 	.word	0x24005a24
 80169c0:	24005a30 	.word	0x24005a30

080169c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80169c4:	b480      	push	{r7}
 80169c6:	b085      	sub	sp, #20
 80169c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80169ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80169ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80169d0:	4b27      	ldr	r3, [pc, #156]	; (8016a70 <prvHeapInit+0xac>)
 80169d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	f003 0307 	and.w	r3, r3, #7
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d00c      	beq.n	80169f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	3307      	adds	r3, #7
 80169e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	f023 0307 	bic.w	r3, r3, #7
 80169ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80169ec:	68ba      	ldr	r2, [r7, #8]
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	1ad3      	subs	r3, r2, r3
 80169f2:	4a1f      	ldr	r2, [pc, #124]	; (8016a70 <prvHeapInit+0xac>)
 80169f4:	4413      	add	r3, r2
 80169f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80169fc:	4a1d      	ldr	r2, [pc, #116]	; (8016a74 <prvHeapInit+0xb0>)
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016a02:	4b1c      	ldr	r3, [pc, #112]	; (8016a74 <prvHeapInit+0xb0>)
 8016a04:	2200      	movs	r2, #0
 8016a06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	68ba      	ldr	r2, [r7, #8]
 8016a0c:	4413      	add	r3, r2
 8016a0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016a10:	2208      	movs	r2, #8
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	1a9b      	subs	r3, r3, r2
 8016a16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	f023 0307 	bic.w	r3, r3, #7
 8016a1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	4a15      	ldr	r2, [pc, #84]	; (8016a78 <prvHeapInit+0xb4>)
 8016a24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016a26:	4b14      	ldr	r3, [pc, #80]	; (8016a78 <prvHeapInit+0xb4>)
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016a2e:	4b12      	ldr	r3, [pc, #72]	; (8016a78 <prvHeapInit+0xb4>)
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	2200      	movs	r2, #0
 8016a34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016a3a:	683b      	ldr	r3, [r7, #0]
 8016a3c:	68fa      	ldr	r2, [r7, #12]
 8016a3e:	1ad2      	subs	r2, r2, r3
 8016a40:	683b      	ldr	r3, [r7, #0]
 8016a42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016a44:	4b0c      	ldr	r3, [pc, #48]	; (8016a78 <prvHeapInit+0xb4>)
 8016a46:	681a      	ldr	r2, [r3, #0]
 8016a48:	683b      	ldr	r3, [r7, #0]
 8016a4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016a4c:	683b      	ldr	r3, [r7, #0]
 8016a4e:	685b      	ldr	r3, [r3, #4]
 8016a50:	4a0a      	ldr	r2, [pc, #40]	; (8016a7c <prvHeapInit+0xb8>)
 8016a52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016a54:	683b      	ldr	r3, [r7, #0]
 8016a56:	685b      	ldr	r3, [r3, #4]
 8016a58:	4a09      	ldr	r2, [pc, #36]	; (8016a80 <prvHeapInit+0xbc>)
 8016a5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016a5c:	4b09      	ldr	r3, [pc, #36]	; (8016a84 <prvHeapInit+0xc0>)
 8016a5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016a62:	601a      	str	r2, [r3, #0]
}
 8016a64:	bf00      	nop
 8016a66:	3714      	adds	r7, #20
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a6e:	4770      	bx	lr
 8016a70:	24001e18 	.word	0x24001e18
 8016a74:	24005a18 	.word	0x24005a18
 8016a78:	24005a20 	.word	0x24005a20
 8016a7c:	24005a28 	.word	0x24005a28
 8016a80:	24005a24 	.word	0x24005a24
 8016a84:	24005a34 	.word	0x24005a34

08016a88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016a88:	b480      	push	{r7}
 8016a8a:	b085      	sub	sp, #20
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016a90:	4b28      	ldr	r3, [pc, #160]	; (8016b34 <prvInsertBlockIntoFreeList+0xac>)
 8016a92:	60fb      	str	r3, [r7, #12]
 8016a94:	e002      	b.n	8016a9c <prvInsertBlockIntoFreeList+0x14>
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	60fb      	str	r3, [r7, #12]
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	687a      	ldr	r2, [r7, #4]
 8016aa2:	429a      	cmp	r2, r3
 8016aa4:	d8f7      	bhi.n	8016a96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	685b      	ldr	r3, [r3, #4]
 8016aae:	68ba      	ldr	r2, [r7, #8]
 8016ab0:	4413      	add	r3, r2
 8016ab2:	687a      	ldr	r2, [r7, #4]
 8016ab4:	429a      	cmp	r2, r3
 8016ab6:	d108      	bne.n	8016aca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	685a      	ldr	r2, [r3, #4]
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	685b      	ldr	r3, [r3, #4]
 8016ac0:	441a      	add	r2, r3
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	685b      	ldr	r3, [r3, #4]
 8016ad2:	68ba      	ldr	r2, [r7, #8]
 8016ad4:	441a      	add	r2, r3
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	429a      	cmp	r2, r3
 8016adc:	d118      	bne.n	8016b10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	681a      	ldr	r2, [r3, #0]
 8016ae2:	4b15      	ldr	r3, [pc, #84]	; (8016b38 <prvInsertBlockIntoFreeList+0xb0>)
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	d00d      	beq.n	8016b06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	685a      	ldr	r2, [r3, #4]
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	685b      	ldr	r3, [r3, #4]
 8016af4:	441a      	add	r2, r3
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	681a      	ldr	r2, [r3, #0]
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	601a      	str	r2, [r3, #0]
 8016b04:	e008      	b.n	8016b18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016b06:	4b0c      	ldr	r3, [pc, #48]	; (8016b38 <prvInsertBlockIntoFreeList+0xb0>)
 8016b08:	681a      	ldr	r2, [r3, #0]
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	601a      	str	r2, [r3, #0]
 8016b0e:	e003      	b.n	8016b18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	681a      	ldr	r2, [r3, #0]
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016b18:	68fa      	ldr	r2, [r7, #12]
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	429a      	cmp	r2, r3
 8016b1e:	d002      	beq.n	8016b26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	687a      	ldr	r2, [r7, #4]
 8016b24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016b26:	bf00      	nop
 8016b28:	3714      	adds	r7, #20
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b30:	4770      	bx	lr
 8016b32:	bf00      	nop
 8016b34:	24005a18 	.word	0x24005a18
 8016b38:	24005a20 	.word	0x24005a20

08016b3c <__errno>:
 8016b3c:	4b01      	ldr	r3, [pc, #4]	; (8016b44 <__errno+0x8>)
 8016b3e:	6818      	ldr	r0, [r3, #0]
 8016b40:	4770      	bx	lr
 8016b42:	bf00      	nop
 8016b44:	240000a0 	.word	0x240000a0

08016b48 <__libc_init_array>:
 8016b48:	b570      	push	{r4, r5, r6, lr}
 8016b4a:	4d0d      	ldr	r5, [pc, #52]	; (8016b80 <__libc_init_array+0x38>)
 8016b4c:	4c0d      	ldr	r4, [pc, #52]	; (8016b84 <__libc_init_array+0x3c>)
 8016b4e:	1b64      	subs	r4, r4, r5
 8016b50:	10a4      	asrs	r4, r4, #2
 8016b52:	2600      	movs	r6, #0
 8016b54:	42a6      	cmp	r6, r4
 8016b56:	d109      	bne.n	8016b6c <__libc_init_array+0x24>
 8016b58:	4d0b      	ldr	r5, [pc, #44]	; (8016b88 <__libc_init_array+0x40>)
 8016b5a:	4c0c      	ldr	r4, [pc, #48]	; (8016b8c <__libc_init_array+0x44>)
 8016b5c:	f000 fd3c 	bl	80175d8 <_init>
 8016b60:	1b64      	subs	r4, r4, r5
 8016b62:	10a4      	asrs	r4, r4, #2
 8016b64:	2600      	movs	r6, #0
 8016b66:	42a6      	cmp	r6, r4
 8016b68:	d105      	bne.n	8016b76 <__libc_init_array+0x2e>
 8016b6a:	bd70      	pop	{r4, r5, r6, pc}
 8016b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b70:	4798      	blx	r3
 8016b72:	3601      	adds	r6, #1
 8016b74:	e7ee      	b.n	8016b54 <__libc_init_array+0xc>
 8016b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8016b7a:	4798      	blx	r3
 8016b7c:	3601      	adds	r6, #1
 8016b7e:	e7f2      	b.n	8016b66 <__libc_init_array+0x1e>
 8016b80:	08017a90 	.word	0x08017a90
 8016b84:	08017a90 	.word	0x08017a90
 8016b88:	08017a90 	.word	0x08017a90
 8016b8c:	08017a94 	.word	0x08017a94

08016b90 <malloc>:
 8016b90:	4b02      	ldr	r3, [pc, #8]	; (8016b9c <malloc+0xc>)
 8016b92:	4601      	mov	r1, r0
 8016b94:	6818      	ldr	r0, [r3, #0]
 8016b96:	f000 b88d 	b.w	8016cb4 <_malloc_r>
 8016b9a:	bf00      	nop
 8016b9c:	240000a0 	.word	0x240000a0

08016ba0 <free>:
 8016ba0:	4b02      	ldr	r3, [pc, #8]	; (8016bac <free+0xc>)
 8016ba2:	4601      	mov	r1, r0
 8016ba4:	6818      	ldr	r0, [r3, #0]
 8016ba6:	f000 b819 	b.w	8016bdc <_free_r>
 8016baa:	bf00      	nop
 8016bac:	240000a0 	.word	0x240000a0

08016bb0 <memcpy>:
 8016bb0:	440a      	add	r2, r1
 8016bb2:	4291      	cmp	r1, r2
 8016bb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016bb8:	d100      	bne.n	8016bbc <memcpy+0xc>
 8016bba:	4770      	bx	lr
 8016bbc:	b510      	push	{r4, lr}
 8016bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016bc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016bc6:	4291      	cmp	r1, r2
 8016bc8:	d1f9      	bne.n	8016bbe <memcpy+0xe>
 8016bca:	bd10      	pop	{r4, pc}

08016bcc <memset>:
 8016bcc:	4402      	add	r2, r0
 8016bce:	4603      	mov	r3, r0
 8016bd0:	4293      	cmp	r3, r2
 8016bd2:	d100      	bne.n	8016bd6 <memset+0xa>
 8016bd4:	4770      	bx	lr
 8016bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8016bda:	e7f9      	b.n	8016bd0 <memset+0x4>

08016bdc <_free_r>:
 8016bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016bde:	2900      	cmp	r1, #0
 8016be0:	d044      	beq.n	8016c6c <_free_r+0x90>
 8016be2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016be6:	9001      	str	r0, [sp, #4]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	f1a1 0404 	sub.w	r4, r1, #4
 8016bee:	bfb8      	it	lt
 8016bf0:	18e4      	addlt	r4, r4, r3
 8016bf2:	f000 fc39 	bl	8017468 <__malloc_lock>
 8016bf6:	4a1e      	ldr	r2, [pc, #120]	; (8016c70 <_free_r+0x94>)
 8016bf8:	9801      	ldr	r0, [sp, #4]
 8016bfa:	6813      	ldr	r3, [r2, #0]
 8016bfc:	b933      	cbnz	r3, 8016c0c <_free_r+0x30>
 8016bfe:	6063      	str	r3, [r4, #4]
 8016c00:	6014      	str	r4, [r2, #0]
 8016c02:	b003      	add	sp, #12
 8016c04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c08:	f000 bc34 	b.w	8017474 <__malloc_unlock>
 8016c0c:	42a3      	cmp	r3, r4
 8016c0e:	d908      	bls.n	8016c22 <_free_r+0x46>
 8016c10:	6825      	ldr	r5, [r4, #0]
 8016c12:	1961      	adds	r1, r4, r5
 8016c14:	428b      	cmp	r3, r1
 8016c16:	bf01      	itttt	eq
 8016c18:	6819      	ldreq	r1, [r3, #0]
 8016c1a:	685b      	ldreq	r3, [r3, #4]
 8016c1c:	1949      	addeq	r1, r1, r5
 8016c1e:	6021      	streq	r1, [r4, #0]
 8016c20:	e7ed      	b.n	8016bfe <_free_r+0x22>
 8016c22:	461a      	mov	r2, r3
 8016c24:	685b      	ldr	r3, [r3, #4]
 8016c26:	b10b      	cbz	r3, 8016c2c <_free_r+0x50>
 8016c28:	42a3      	cmp	r3, r4
 8016c2a:	d9fa      	bls.n	8016c22 <_free_r+0x46>
 8016c2c:	6811      	ldr	r1, [r2, #0]
 8016c2e:	1855      	adds	r5, r2, r1
 8016c30:	42a5      	cmp	r5, r4
 8016c32:	d10b      	bne.n	8016c4c <_free_r+0x70>
 8016c34:	6824      	ldr	r4, [r4, #0]
 8016c36:	4421      	add	r1, r4
 8016c38:	1854      	adds	r4, r2, r1
 8016c3a:	42a3      	cmp	r3, r4
 8016c3c:	6011      	str	r1, [r2, #0]
 8016c3e:	d1e0      	bne.n	8016c02 <_free_r+0x26>
 8016c40:	681c      	ldr	r4, [r3, #0]
 8016c42:	685b      	ldr	r3, [r3, #4]
 8016c44:	6053      	str	r3, [r2, #4]
 8016c46:	4421      	add	r1, r4
 8016c48:	6011      	str	r1, [r2, #0]
 8016c4a:	e7da      	b.n	8016c02 <_free_r+0x26>
 8016c4c:	d902      	bls.n	8016c54 <_free_r+0x78>
 8016c4e:	230c      	movs	r3, #12
 8016c50:	6003      	str	r3, [r0, #0]
 8016c52:	e7d6      	b.n	8016c02 <_free_r+0x26>
 8016c54:	6825      	ldr	r5, [r4, #0]
 8016c56:	1961      	adds	r1, r4, r5
 8016c58:	428b      	cmp	r3, r1
 8016c5a:	bf04      	itt	eq
 8016c5c:	6819      	ldreq	r1, [r3, #0]
 8016c5e:	685b      	ldreq	r3, [r3, #4]
 8016c60:	6063      	str	r3, [r4, #4]
 8016c62:	bf04      	itt	eq
 8016c64:	1949      	addeq	r1, r1, r5
 8016c66:	6021      	streq	r1, [r4, #0]
 8016c68:	6054      	str	r4, [r2, #4]
 8016c6a:	e7ca      	b.n	8016c02 <_free_r+0x26>
 8016c6c:	b003      	add	sp, #12
 8016c6e:	bd30      	pop	{r4, r5, pc}
 8016c70:	24005a38 	.word	0x24005a38

08016c74 <sbrk_aligned>:
 8016c74:	b570      	push	{r4, r5, r6, lr}
 8016c76:	4e0e      	ldr	r6, [pc, #56]	; (8016cb0 <sbrk_aligned+0x3c>)
 8016c78:	460c      	mov	r4, r1
 8016c7a:	6831      	ldr	r1, [r6, #0]
 8016c7c:	4605      	mov	r5, r0
 8016c7e:	b911      	cbnz	r1, 8016c86 <sbrk_aligned+0x12>
 8016c80:	f000 f902 	bl	8016e88 <_sbrk_r>
 8016c84:	6030      	str	r0, [r6, #0]
 8016c86:	4621      	mov	r1, r4
 8016c88:	4628      	mov	r0, r5
 8016c8a:	f000 f8fd 	bl	8016e88 <_sbrk_r>
 8016c8e:	1c43      	adds	r3, r0, #1
 8016c90:	d00a      	beq.n	8016ca8 <sbrk_aligned+0x34>
 8016c92:	1cc4      	adds	r4, r0, #3
 8016c94:	f024 0403 	bic.w	r4, r4, #3
 8016c98:	42a0      	cmp	r0, r4
 8016c9a:	d007      	beq.n	8016cac <sbrk_aligned+0x38>
 8016c9c:	1a21      	subs	r1, r4, r0
 8016c9e:	4628      	mov	r0, r5
 8016ca0:	f000 f8f2 	bl	8016e88 <_sbrk_r>
 8016ca4:	3001      	adds	r0, #1
 8016ca6:	d101      	bne.n	8016cac <sbrk_aligned+0x38>
 8016ca8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016cac:	4620      	mov	r0, r4
 8016cae:	bd70      	pop	{r4, r5, r6, pc}
 8016cb0:	24005a3c 	.word	0x24005a3c

08016cb4 <_malloc_r>:
 8016cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cb8:	1ccd      	adds	r5, r1, #3
 8016cba:	f025 0503 	bic.w	r5, r5, #3
 8016cbe:	3508      	adds	r5, #8
 8016cc0:	2d0c      	cmp	r5, #12
 8016cc2:	bf38      	it	cc
 8016cc4:	250c      	movcc	r5, #12
 8016cc6:	2d00      	cmp	r5, #0
 8016cc8:	4607      	mov	r7, r0
 8016cca:	db01      	blt.n	8016cd0 <_malloc_r+0x1c>
 8016ccc:	42a9      	cmp	r1, r5
 8016cce:	d905      	bls.n	8016cdc <_malloc_r+0x28>
 8016cd0:	230c      	movs	r3, #12
 8016cd2:	603b      	str	r3, [r7, #0]
 8016cd4:	2600      	movs	r6, #0
 8016cd6:	4630      	mov	r0, r6
 8016cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cdc:	4e2e      	ldr	r6, [pc, #184]	; (8016d98 <_malloc_r+0xe4>)
 8016cde:	f000 fbc3 	bl	8017468 <__malloc_lock>
 8016ce2:	6833      	ldr	r3, [r6, #0]
 8016ce4:	461c      	mov	r4, r3
 8016ce6:	bb34      	cbnz	r4, 8016d36 <_malloc_r+0x82>
 8016ce8:	4629      	mov	r1, r5
 8016cea:	4638      	mov	r0, r7
 8016cec:	f7ff ffc2 	bl	8016c74 <sbrk_aligned>
 8016cf0:	1c43      	adds	r3, r0, #1
 8016cf2:	4604      	mov	r4, r0
 8016cf4:	d14d      	bne.n	8016d92 <_malloc_r+0xde>
 8016cf6:	6834      	ldr	r4, [r6, #0]
 8016cf8:	4626      	mov	r6, r4
 8016cfa:	2e00      	cmp	r6, #0
 8016cfc:	d140      	bne.n	8016d80 <_malloc_r+0xcc>
 8016cfe:	6823      	ldr	r3, [r4, #0]
 8016d00:	4631      	mov	r1, r6
 8016d02:	4638      	mov	r0, r7
 8016d04:	eb04 0803 	add.w	r8, r4, r3
 8016d08:	f000 f8be 	bl	8016e88 <_sbrk_r>
 8016d0c:	4580      	cmp	r8, r0
 8016d0e:	d13a      	bne.n	8016d86 <_malloc_r+0xd2>
 8016d10:	6821      	ldr	r1, [r4, #0]
 8016d12:	3503      	adds	r5, #3
 8016d14:	1a6d      	subs	r5, r5, r1
 8016d16:	f025 0503 	bic.w	r5, r5, #3
 8016d1a:	3508      	adds	r5, #8
 8016d1c:	2d0c      	cmp	r5, #12
 8016d1e:	bf38      	it	cc
 8016d20:	250c      	movcc	r5, #12
 8016d22:	4629      	mov	r1, r5
 8016d24:	4638      	mov	r0, r7
 8016d26:	f7ff ffa5 	bl	8016c74 <sbrk_aligned>
 8016d2a:	3001      	adds	r0, #1
 8016d2c:	d02b      	beq.n	8016d86 <_malloc_r+0xd2>
 8016d2e:	6823      	ldr	r3, [r4, #0]
 8016d30:	442b      	add	r3, r5
 8016d32:	6023      	str	r3, [r4, #0]
 8016d34:	e00e      	b.n	8016d54 <_malloc_r+0xa0>
 8016d36:	6822      	ldr	r2, [r4, #0]
 8016d38:	1b52      	subs	r2, r2, r5
 8016d3a:	d41e      	bmi.n	8016d7a <_malloc_r+0xc6>
 8016d3c:	2a0b      	cmp	r2, #11
 8016d3e:	d916      	bls.n	8016d6e <_malloc_r+0xba>
 8016d40:	1961      	adds	r1, r4, r5
 8016d42:	42a3      	cmp	r3, r4
 8016d44:	6025      	str	r5, [r4, #0]
 8016d46:	bf18      	it	ne
 8016d48:	6059      	strne	r1, [r3, #4]
 8016d4a:	6863      	ldr	r3, [r4, #4]
 8016d4c:	bf08      	it	eq
 8016d4e:	6031      	streq	r1, [r6, #0]
 8016d50:	5162      	str	r2, [r4, r5]
 8016d52:	604b      	str	r3, [r1, #4]
 8016d54:	4638      	mov	r0, r7
 8016d56:	f104 060b 	add.w	r6, r4, #11
 8016d5a:	f000 fb8b 	bl	8017474 <__malloc_unlock>
 8016d5e:	f026 0607 	bic.w	r6, r6, #7
 8016d62:	1d23      	adds	r3, r4, #4
 8016d64:	1af2      	subs	r2, r6, r3
 8016d66:	d0b6      	beq.n	8016cd6 <_malloc_r+0x22>
 8016d68:	1b9b      	subs	r3, r3, r6
 8016d6a:	50a3      	str	r3, [r4, r2]
 8016d6c:	e7b3      	b.n	8016cd6 <_malloc_r+0x22>
 8016d6e:	6862      	ldr	r2, [r4, #4]
 8016d70:	42a3      	cmp	r3, r4
 8016d72:	bf0c      	ite	eq
 8016d74:	6032      	streq	r2, [r6, #0]
 8016d76:	605a      	strne	r2, [r3, #4]
 8016d78:	e7ec      	b.n	8016d54 <_malloc_r+0xa0>
 8016d7a:	4623      	mov	r3, r4
 8016d7c:	6864      	ldr	r4, [r4, #4]
 8016d7e:	e7b2      	b.n	8016ce6 <_malloc_r+0x32>
 8016d80:	4634      	mov	r4, r6
 8016d82:	6876      	ldr	r6, [r6, #4]
 8016d84:	e7b9      	b.n	8016cfa <_malloc_r+0x46>
 8016d86:	230c      	movs	r3, #12
 8016d88:	603b      	str	r3, [r7, #0]
 8016d8a:	4638      	mov	r0, r7
 8016d8c:	f000 fb72 	bl	8017474 <__malloc_unlock>
 8016d90:	e7a1      	b.n	8016cd6 <_malloc_r+0x22>
 8016d92:	6025      	str	r5, [r4, #0]
 8016d94:	e7de      	b.n	8016d54 <_malloc_r+0xa0>
 8016d96:	bf00      	nop
 8016d98:	24005a38 	.word	0x24005a38

08016d9c <_puts_r>:
 8016d9c:	b570      	push	{r4, r5, r6, lr}
 8016d9e:	460e      	mov	r6, r1
 8016da0:	4605      	mov	r5, r0
 8016da2:	b118      	cbz	r0, 8016dac <_puts_r+0x10>
 8016da4:	6983      	ldr	r3, [r0, #24]
 8016da6:	b90b      	cbnz	r3, 8016dac <_puts_r+0x10>
 8016da8:	f000 fa58 	bl	801725c <__sinit>
 8016dac:	69ab      	ldr	r3, [r5, #24]
 8016dae:	68ac      	ldr	r4, [r5, #8]
 8016db0:	b913      	cbnz	r3, 8016db8 <_puts_r+0x1c>
 8016db2:	4628      	mov	r0, r5
 8016db4:	f000 fa52 	bl	801725c <__sinit>
 8016db8:	4b2c      	ldr	r3, [pc, #176]	; (8016e6c <_puts_r+0xd0>)
 8016dba:	429c      	cmp	r4, r3
 8016dbc:	d120      	bne.n	8016e00 <_puts_r+0x64>
 8016dbe:	686c      	ldr	r4, [r5, #4]
 8016dc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016dc2:	07db      	lsls	r3, r3, #31
 8016dc4:	d405      	bmi.n	8016dd2 <_puts_r+0x36>
 8016dc6:	89a3      	ldrh	r3, [r4, #12]
 8016dc8:	0598      	lsls	r0, r3, #22
 8016dca:	d402      	bmi.n	8016dd2 <_puts_r+0x36>
 8016dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016dce:	f000 fae3 	bl	8017398 <__retarget_lock_acquire_recursive>
 8016dd2:	89a3      	ldrh	r3, [r4, #12]
 8016dd4:	0719      	lsls	r1, r3, #28
 8016dd6:	d51d      	bpl.n	8016e14 <_puts_r+0x78>
 8016dd8:	6923      	ldr	r3, [r4, #16]
 8016dda:	b1db      	cbz	r3, 8016e14 <_puts_r+0x78>
 8016ddc:	3e01      	subs	r6, #1
 8016dde:	68a3      	ldr	r3, [r4, #8]
 8016de0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016de4:	3b01      	subs	r3, #1
 8016de6:	60a3      	str	r3, [r4, #8]
 8016de8:	bb39      	cbnz	r1, 8016e3a <_puts_r+0x9e>
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	da38      	bge.n	8016e60 <_puts_r+0xc4>
 8016dee:	4622      	mov	r2, r4
 8016df0:	210a      	movs	r1, #10
 8016df2:	4628      	mov	r0, r5
 8016df4:	f000 f858 	bl	8016ea8 <__swbuf_r>
 8016df8:	3001      	adds	r0, #1
 8016dfa:	d011      	beq.n	8016e20 <_puts_r+0x84>
 8016dfc:	250a      	movs	r5, #10
 8016dfe:	e011      	b.n	8016e24 <_puts_r+0x88>
 8016e00:	4b1b      	ldr	r3, [pc, #108]	; (8016e70 <_puts_r+0xd4>)
 8016e02:	429c      	cmp	r4, r3
 8016e04:	d101      	bne.n	8016e0a <_puts_r+0x6e>
 8016e06:	68ac      	ldr	r4, [r5, #8]
 8016e08:	e7da      	b.n	8016dc0 <_puts_r+0x24>
 8016e0a:	4b1a      	ldr	r3, [pc, #104]	; (8016e74 <_puts_r+0xd8>)
 8016e0c:	429c      	cmp	r4, r3
 8016e0e:	bf08      	it	eq
 8016e10:	68ec      	ldreq	r4, [r5, #12]
 8016e12:	e7d5      	b.n	8016dc0 <_puts_r+0x24>
 8016e14:	4621      	mov	r1, r4
 8016e16:	4628      	mov	r0, r5
 8016e18:	f000 f898 	bl	8016f4c <__swsetup_r>
 8016e1c:	2800      	cmp	r0, #0
 8016e1e:	d0dd      	beq.n	8016ddc <_puts_r+0x40>
 8016e20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016e24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e26:	07da      	lsls	r2, r3, #31
 8016e28:	d405      	bmi.n	8016e36 <_puts_r+0x9a>
 8016e2a:	89a3      	ldrh	r3, [r4, #12]
 8016e2c:	059b      	lsls	r3, r3, #22
 8016e2e:	d402      	bmi.n	8016e36 <_puts_r+0x9a>
 8016e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e32:	f000 fab2 	bl	801739a <__retarget_lock_release_recursive>
 8016e36:	4628      	mov	r0, r5
 8016e38:	bd70      	pop	{r4, r5, r6, pc}
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	da04      	bge.n	8016e48 <_puts_r+0xac>
 8016e3e:	69a2      	ldr	r2, [r4, #24]
 8016e40:	429a      	cmp	r2, r3
 8016e42:	dc06      	bgt.n	8016e52 <_puts_r+0xb6>
 8016e44:	290a      	cmp	r1, #10
 8016e46:	d004      	beq.n	8016e52 <_puts_r+0xb6>
 8016e48:	6823      	ldr	r3, [r4, #0]
 8016e4a:	1c5a      	adds	r2, r3, #1
 8016e4c:	6022      	str	r2, [r4, #0]
 8016e4e:	7019      	strb	r1, [r3, #0]
 8016e50:	e7c5      	b.n	8016dde <_puts_r+0x42>
 8016e52:	4622      	mov	r2, r4
 8016e54:	4628      	mov	r0, r5
 8016e56:	f000 f827 	bl	8016ea8 <__swbuf_r>
 8016e5a:	3001      	adds	r0, #1
 8016e5c:	d1bf      	bne.n	8016dde <_puts_r+0x42>
 8016e5e:	e7df      	b.n	8016e20 <_puts_r+0x84>
 8016e60:	6823      	ldr	r3, [r4, #0]
 8016e62:	250a      	movs	r5, #10
 8016e64:	1c5a      	adds	r2, r3, #1
 8016e66:	6022      	str	r2, [r4, #0]
 8016e68:	701d      	strb	r5, [r3, #0]
 8016e6a:	e7db      	b.n	8016e24 <_puts_r+0x88>
 8016e6c:	08017a48 	.word	0x08017a48
 8016e70:	08017a68 	.word	0x08017a68
 8016e74:	08017a28 	.word	0x08017a28

08016e78 <puts>:
 8016e78:	4b02      	ldr	r3, [pc, #8]	; (8016e84 <puts+0xc>)
 8016e7a:	4601      	mov	r1, r0
 8016e7c:	6818      	ldr	r0, [r3, #0]
 8016e7e:	f7ff bf8d 	b.w	8016d9c <_puts_r>
 8016e82:	bf00      	nop
 8016e84:	240000a0 	.word	0x240000a0

08016e88 <_sbrk_r>:
 8016e88:	b538      	push	{r3, r4, r5, lr}
 8016e8a:	4d06      	ldr	r5, [pc, #24]	; (8016ea4 <_sbrk_r+0x1c>)
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	4604      	mov	r4, r0
 8016e90:	4608      	mov	r0, r1
 8016e92:	602b      	str	r3, [r5, #0]
 8016e94:	f7ec ffd2 	bl	8003e3c <_sbrk>
 8016e98:	1c43      	adds	r3, r0, #1
 8016e9a:	d102      	bne.n	8016ea2 <_sbrk_r+0x1a>
 8016e9c:	682b      	ldr	r3, [r5, #0]
 8016e9e:	b103      	cbz	r3, 8016ea2 <_sbrk_r+0x1a>
 8016ea0:	6023      	str	r3, [r4, #0]
 8016ea2:	bd38      	pop	{r3, r4, r5, pc}
 8016ea4:	24005a44 	.word	0x24005a44

08016ea8 <__swbuf_r>:
 8016ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eaa:	460e      	mov	r6, r1
 8016eac:	4614      	mov	r4, r2
 8016eae:	4605      	mov	r5, r0
 8016eb0:	b118      	cbz	r0, 8016eba <__swbuf_r+0x12>
 8016eb2:	6983      	ldr	r3, [r0, #24]
 8016eb4:	b90b      	cbnz	r3, 8016eba <__swbuf_r+0x12>
 8016eb6:	f000 f9d1 	bl	801725c <__sinit>
 8016eba:	4b21      	ldr	r3, [pc, #132]	; (8016f40 <__swbuf_r+0x98>)
 8016ebc:	429c      	cmp	r4, r3
 8016ebe:	d12b      	bne.n	8016f18 <__swbuf_r+0x70>
 8016ec0:	686c      	ldr	r4, [r5, #4]
 8016ec2:	69a3      	ldr	r3, [r4, #24]
 8016ec4:	60a3      	str	r3, [r4, #8]
 8016ec6:	89a3      	ldrh	r3, [r4, #12]
 8016ec8:	071a      	lsls	r2, r3, #28
 8016eca:	d52f      	bpl.n	8016f2c <__swbuf_r+0x84>
 8016ecc:	6923      	ldr	r3, [r4, #16]
 8016ece:	b36b      	cbz	r3, 8016f2c <__swbuf_r+0x84>
 8016ed0:	6923      	ldr	r3, [r4, #16]
 8016ed2:	6820      	ldr	r0, [r4, #0]
 8016ed4:	1ac0      	subs	r0, r0, r3
 8016ed6:	6963      	ldr	r3, [r4, #20]
 8016ed8:	b2f6      	uxtb	r6, r6
 8016eda:	4283      	cmp	r3, r0
 8016edc:	4637      	mov	r7, r6
 8016ede:	dc04      	bgt.n	8016eea <__swbuf_r+0x42>
 8016ee0:	4621      	mov	r1, r4
 8016ee2:	4628      	mov	r0, r5
 8016ee4:	f000 f926 	bl	8017134 <_fflush_r>
 8016ee8:	bb30      	cbnz	r0, 8016f38 <__swbuf_r+0x90>
 8016eea:	68a3      	ldr	r3, [r4, #8]
 8016eec:	3b01      	subs	r3, #1
 8016eee:	60a3      	str	r3, [r4, #8]
 8016ef0:	6823      	ldr	r3, [r4, #0]
 8016ef2:	1c5a      	adds	r2, r3, #1
 8016ef4:	6022      	str	r2, [r4, #0]
 8016ef6:	701e      	strb	r6, [r3, #0]
 8016ef8:	6963      	ldr	r3, [r4, #20]
 8016efa:	3001      	adds	r0, #1
 8016efc:	4283      	cmp	r3, r0
 8016efe:	d004      	beq.n	8016f0a <__swbuf_r+0x62>
 8016f00:	89a3      	ldrh	r3, [r4, #12]
 8016f02:	07db      	lsls	r3, r3, #31
 8016f04:	d506      	bpl.n	8016f14 <__swbuf_r+0x6c>
 8016f06:	2e0a      	cmp	r6, #10
 8016f08:	d104      	bne.n	8016f14 <__swbuf_r+0x6c>
 8016f0a:	4621      	mov	r1, r4
 8016f0c:	4628      	mov	r0, r5
 8016f0e:	f000 f911 	bl	8017134 <_fflush_r>
 8016f12:	b988      	cbnz	r0, 8016f38 <__swbuf_r+0x90>
 8016f14:	4638      	mov	r0, r7
 8016f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f18:	4b0a      	ldr	r3, [pc, #40]	; (8016f44 <__swbuf_r+0x9c>)
 8016f1a:	429c      	cmp	r4, r3
 8016f1c:	d101      	bne.n	8016f22 <__swbuf_r+0x7a>
 8016f1e:	68ac      	ldr	r4, [r5, #8]
 8016f20:	e7cf      	b.n	8016ec2 <__swbuf_r+0x1a>
 8016f22:	4b09      	ldr	r3, [pc, #36]	; (8016f48 <__swbuf_r+0xa0>)
 8016f24:	429c      	cmp	r4, r3
 8016f26:	bf08      	it	eq
 8016f28:	68ec      	ldreq	r4, [r5, #12]
 8016f2a:	e7ca      	b.n	8016ec2 <__swbuf_r+0x1a>
 8016f2c:	4621      	mov	r1, r4
 8016f2e:	4628      	mov	r0, r5
 8016f30:	f000 f80c 	bl	8016f4c <__swsetup_r>
 8016f34:	2800      	cmp	r0, #0
 8016f36:	d0cb      	beq.n	8016ed0 <__swbuf_r+0x28>
 8016f38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016f3c:	e7ea      	b.n	8016f14 <__swbuf_r+0x6c>
 8016f3e:	bf00      	nop
 8016f40:	08017a48 	.word	0x08017a48
 8016f44:	08017a68 	.word	0x08017a68
 8016f48:	08017a28 	.word	0x08017a28

08016f4c <__swsetup_r>:
 8016f4c:	4b32      	ldr	r3, [pc, #200]	; (8017018 <__swsetup_r+0xcc>)
 8016f4e:	b570      	push	{r4, r5, r6, lr}
 8016f50:	681d      	ldr	r5, [r3, #0]
 8016f52:	4606      	mov	r6, r0
 8016f54:	460c      	mov	r4, r1
 8016f56:	b125      	cbz	r5, 8016f62 <__swsetup_r+0x16>
 8016f58:	69ab      	ldr	r3, [r5, #24]
 8016f5a:	b913      	cbnz	r3, 8016f62 <__swsetup_r+0x16>
 8016f5c:	4628      	mov	r0, r5
 8016f5e:	f000 f97d 	bl	801725c <__sinit>
 8016f62:	4b2e      	ldr	r3, [pc, #184]	; (801701c <__swsetup_r+0xd0>)
 8016f64:	429c      	cmp	r4, r3
 8016f66:	d10f      	bne.n	8016f88 <__swsetup_r+0x3c>
 8016f68:	686c      	ldr	r4, [r5, #4]
 8016f6a:	89a3      	ldrh	r3, [r4, #12]
 8016f6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016f70:	0719      	lsls	r1, r3, #28
 8016f72:	d42c      	bmi.n	8016fce <__swsetup_r+0x82>
 8016f74:	06dd      	lsls	r5, r3, #27
 8016f76:	d411      	bmi.n	8016f9c <__swsetup_r+0x50>
 8016f78:	2309      	movs	r3, #9
 8016f7a:	6033      	str	r3, [r6, #0]
 8016f7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016f80:	81a3      	strh	r3, [r4, #12]
 8016f82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f86:	e03e      	b.n	8017006 <__swsetup_r+0xba>
 8016f88:	4b25      	ldr	r3, [pc, #148]	; (8017020 <__swsetup_r+0xd4>)
 8016f8a:	429c      	cmp	r4, r3
 8016f8c:	d101      	bne.n	8016f92 <__swsetup_r+0x46>
 8016f8e:	68ac      	ldr	r4, [r5, #8]
 8016f90:	e7eb      	b.n	8016f6a <__swsetup_r+0x1e>
 8016f92:	4b24      	ldr	r3, [pc, #144]	; (8017024 <__swsetup_r+0xd8>)
 8016f94:	429c      	cmp	r4, r3
 8016f96:	bf08      	it	eq
 8016f98:	68ec      	ldreq	r4, [r5, #12]
 8016f9a:	e7e6      	b.n	8016f6a <__swsetup_r+0x1e>
 8016f9c:	0758      	lsls	r0, r3, #29
 8016f9e:	d512      	bpl.n	8016fc6 <__swsetup_r+0x7a>
 8016fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016fa2:	b141      	cbz	r1, 8016fb6 <__swsetup_r+0x6a>
 8016fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016fa8:	4299      	cmp	r1, r3
 8016faa:	d002      	beq.n	8016fb2 <__swsetup_r+0x66>
 8016fac:	4630      	mov	r0, r6
 8016fae:	f7ff fe15 	bl	8016bdc <_free_r>
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	6363      	str	r3, [r4, #52]	; 0x34
 8016fb6:	89a3      	ldrh	r3, [r4, #12]
 8016fb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016fbc:	81a3      	strh	r3, [r4, #12]
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	6063      	str	r3, [r4, #4]
 8016fc2:	6923      	ldr	r3, [r4, #16]
 8016fc4:	6023      	str	r3, [r4, #0]
 8016fc6:	89a3      	ldrh	r3, [r4, #12]
 8016fc8:	f043 0308 	orr.w	r3, r3, #8
 8016fcc:	81a3      	strh	r3, [r4, #12]
 8016fce:	6923      	ldr	r3, [r4, #16]
 8016fd0:	b94b      	cbnz	r3, 8016fe6 <__swsetup_r+0x9a>
 8016fd2:	89a3      	ldrh	r3, [r4, #12]
 8016fd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016fdc:	d003      	beq.n	8016fe6 <__swsetup_r+0x9a>
 8016fde:	4621      	mov	r1, r4
 8016fe0:	4630      	mov	r0, r6
 8016fe2:	f000 fa01 	bl	80173e8 <__smakebuf_r>
 8016fe6:	89a0      	ldrh	r0, [r4, #12]
 8016fe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016fec:	f010 0301 	ands.w	r3, r0, #1
 8016ff0:	d00a      	beq.n	8017008 <__swsetup_r+0xbc>
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	60a3      	str	r3, [r4, #8]
 8016ff6:	6963      	ldr	r3, [r4, #20]
 8016ff8:	425b      	negs	r3, r3
 8016ffa:	61a3      	str	r3, [r4, #24]
 8016ffc:	6923      	ldr	r3, [r4, #16]
 8016ffe:	b943      	cbnz	r3, 8017012 <__swsetup_r+0xc6>
 8017000:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017004:	d1ba      	bne.n	8016f7c <__swsetup_r+0x30>
 8017006:	bd70      	pop	{r4, r5, r6, pc}
 8017008:	0781      	lsls	r1, r0, #30
 801700a:	bf58      	it	pl
 801700c:	6963      	ldrpl	r3, [r4, #20]
 801700e:	60a3      	str	r3, [r4, #8]
 8017010:	e7f4      	b.n	8016ffc <__swsetup_r+0xb0>
 8017012:	2000      	movs	r0, #0
 8017014:	e7f7      	b.n	8017006 <__swsetup_r+0xba>
 8017016:	bf00      	nop
 8017018:	240000a0 	.word	0x240000a0
 801701c:	08017a48 	.word	0x08017a48
 8017020:	08017a68 	.word	0x08017a68
 8017024:	08017a28 	.word	0x08017a28

08017028 <__sflush_r>:
 8017028:	898a      	ldrh	r2, [r1, #12]
 801702a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801702e:	4605      	mov	r5, r0
 8017030:	0710      	lsls	r0, r2, #28
 8017032:	460c      	mov	r4, r1
 8017034:	d458      	bmi.n	80170e8 <__sflush_r+0xc0>
 8017036:	684b      	ldr	r3, [r1, #4]
 8017038:	2b00      	cmp	r3, #0
 801703a:	dc05      	bgt.n	8017048 <__sflush_r+0x20>
 801703c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801703e:	2b00      	cmp	r3, #0
 8017040:	dc02      	bgt.n	8017048 <__sflush_r+0x20>
 8017042:	2000      	movs	r0, #0
 8017044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801704a:	2e00      	cmp	r6, #0
 801704c:	d0f9      	beq.n	8017042 <__sflush_r+0x1a>
 801704e:	2300      	movs	r3, #0
 8017050:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017054:	682f      	ldr	r7, [r5, #0]
 8017056:	602b      	str	r3, [r5, #0]
 8017058:	d032      	beq.n	80170c0 <__sflush_r+0x98>
 801705a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801705c:	89a3      	ldrh	r3, [r4, #12]
 801705e:	075a      	lsls	r2, r3, #29
 8017060:	d505      	bpl.n	801706e <__sflush_r+0x46>
 8017062:	6863      	ldr	r3, [r4, #4]
 8017064:	1ac0      	subs	r0, r0, r3
 8017066:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017068:	b10b      	cbz	r3, 801706e <__sflush_r+0x46>
 801706a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801706c:	1ac0      	subs	r0, r0, r3
 801706e:	2300      	movs	r3, #0
 8017070:	4602      	mov	r2, r0
 8017072:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017074:	6a21      	ldr	r1, [r4, #32]
 8017076:	4628      	mov	r0, r5
 8017078:	47b0      	blx	r6
 801707a:	1c43      	adds	r3, r0, #1
 801707c:	89a3      	ldrh	r3, [r4, #12]
 801707e:	d106      	bne.n	801708e <__sflush_r+0x66>
 8017080:	6829      	ldr	r1, [r5, #0]
 8017082:	291d      	cmp	r1, #29
 8017084:	d82c      	bhi.n	80170e0 <__sflush_r+0xb8>
 8017086:	4a2a      	ldr	r2, [pc, #168]	; (8017130 <__sflush_r+0x108>)
 8017088:	40ca      	lsrs	r2, r1
 801708a:	07d6      	lsls	r6, r2, #31
 801708c:	d528      	bpl.n	80170e0 <__sflush_r+0xb8>
 801708e:	2200      	movs	r2, #0
 8017090:	6062      	str	r2, [r4, #4]
 8017092:	04d9      	lsls	r1, r3, #19
 8017094:	6922      	ldr	r2, [r4, #16]
 8017096:	6022      	str	r2, [r4, #0]
 8017098:	d504      	bpl.n	80170a4 <__sflush_r+0x7c>
 801709a:	1c42      	adds	r2, r0, #1
 801709c:	d101      	bne.n	80170a2 <__sflush_r+0x7a>
 801709e:	682b      	ldr	r3, [r5, #0]
 80170a0:	b903      	cbnz	r3, 80170a4 <__sflush_r+0x7c>
 80170a2:	6560      	str	r0, [r4, #84]	; 0x54
 80170a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80170a6:	602f      	str	r7, [r5, #0]
 80170a8:	2900      	cmp	r1, #0
 80170aa:	d0ca      	beq.n	8017042 <__sflush_r+0x1a>
 80170ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80170b0:	4299      	cmp	r1, r3
 80170b2:	d002      	beq.n	80170ba <__sflush_r+0x92>
 80170b4:	4628      	mov	r0, r5
 80170b6:	f7ff fd91 	bl	8016bdc <_free_r>
 80170ba:	2000      	movs	r0, #0
 80170bc:	6360      	str	r0, [r4, #52]	; 0x34
 80170be:	e7c1      	b.n	8017044 <__sflush_r+0x1c>
 80170c0:	6a21      	ldr	r1, [r4, #32]
 80170c2:	2301      	movs	r3, #1
 80170c4:	4628      	mov	r0, r5
 80170c6:	47b0      	blx	r6
 80170c8:	1c41      	adds	r1, r0, #1
 80170ca:	d1c7      	bne.n	801705c <__sflush_r+0x34>
 80170cc:	682b      	ldr	r3, [r5, #0]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d0c4      	beq.n	801705c <__sflush_r+0x34>
 80170d2:	2b1d      	cmp	r3, #29
 80170d4:	d001      	beq.n	80170da <__sflush_r+0xb2>
 80170d6:	2b16      	cmp	r3, #22
 80170d8:	d101      	bne.n	80170de <__sflush_r+0xb6>
 80170da:	602f      	str	r7, [r5, #0]
 80170dc:	e7b1      	b.n	8017042 <__sflush_r+0x1a>
 80170de:	89a3      	ldrh	r3, [r4, #12]
 80170e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170e4:	81a3      	strh	r3, [r4, #12]
 80170e6:	e7ad      	b.n	8017044 <__sflush_r+0x1c>
 80170e8:	690f      	ldr	r7, [r1, #16]
 80170ea:	2f00      	cmp	r7, #0
 80170ec:	d0a9      	beq.n	8017042 <__sflush_r+0x1a>
 80170ee:	0793      	lsls	r3, r2, #30
 80170f0:	680e      	ldr	r6, [r1, #0]
 80170f2:	bf08      	it	eq
 80170f4:	694b      	ldreq	r3, [r1, #20]
 80170f6:	600f      	str	r7, [r1, #0]
 80170f8:	bf18      	it	ne
 80170fa:	2300      	movne	r3, #0
 80170fc:	eba6 0807 	sub.w	r8, r6, r7
 8017100:	608b      	str	r3, [r1, #8]
 8017102:	f1b8 0f00 	cmp.w	r8, #0
 8017106:	dd9c      	ble.n	8017042 <__sflush_r+0x1a>
 8017108:	6a21      	ldr	r1, [r4, #32]
 801710a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801710c:	4643      	mov	r3, r8
 801710e:	463a      	mov	r2, r7
 8017110:	4628      	mov	r0, r5
 8017112:	47b0      	blx	r6
 8017114:	2800      	cmp	r0, #0
 8017116:	dc06      	bgt.n	8017126 <__sflush_r+0xfe>
 8017118:	89a3      	ldrh	r3, [r4, #12]
 801711a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801711e:	81a3      	strh	r3, [r4, #12]
 8017120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017124:	e78e      	b.n	8017044 <__sflush_r+0x1c>
 8017126:	4407      	add	r7, r0
 8017128:	eba8 0800 	sub.w	r8, r8, r0
 801712c:	e7e9      	b.n	8017102 <__sflush_r+0xda>
 801712e:	bf00      	nop
 8017130:	20400001 	.word	0x20400001

08017134 <_fflush_r>:
 8017134:	b538      	push	{r3, r4, r5, lr}
 8017136:	690b      	ldr	r3, [r1, #16]
 8017138:	4605      	mov	r5, r0
 801713a:	460c      	mov	r4, r1
 801713c:	b913      	cbnz	r3, 8017144 <_fflush_r+0x10>
 801713e:	2500      	movs	r5, #0
 8017140:	4628      	mov	r0, r5
 8017142:	bd38      	pop	{r3, r4, r5, pc}
 8017144:	b118      	cbz	r0, 801714e <_fflush_r+0x1a>
 8017146:	6983      	ldr	r3, [r0, #24]
 8017148:	b90b      	cbnz	r3, 801714e <_fflush_r+0x1a>
 801714a:	f000 f887 	bl	801725c <__sinit>
 801714e:	4b14      	ldr	r3, [pc, #80]	; (80171a0 <_fflush_r+0x6c>)
 8017150:	429c      	cmp	r4, r3
 8017152:	d11b      	bne.n	801718c <_fflush_r+0x58>
 8017154:	686c      	ldr	r4, [r5, #4]
 8017156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d0ef      	beq.n	801713e <_fflush_r+0xa>
 801715e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017160:	07d0      	lsls	r0, r2, #31
 8017162:	d404      	bmi.n	801716e <_fflush_r+0x3a>
 8017164:	0599      	lsls	r1, r3, #22
 8017166:	d402      	bmi.n	801716e <_fflush_r+0x3a>
 8017168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801716a:	f000 f915 	bl	8017398 <__retarget_lock_acquire_recursive>
 801716e:	4628      	mov	r0, r5
 8017170:	4621      	mov	r1, r4
 8017172:	f7ff ff59 	bl	8017028 <__sflush_r>
 8017176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017178:	07da      	lsls	r2, r3, #31
 801717a:	4605      	mov	r5, r0
 801717c:	d4e0      	bmi.n	8017140 <_fflush_r+0xc>
 801717e:	89a3      	ldrh	r3, [r4, #12]
 8017180:	059b      	lsls	r3, r3, #22
 8017182:	d4dd      	bmi.n	8017140 <_fflush_r+0xc>
 8017184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017186:	f000 f908 	bl	801739a <__retarget_lock_release_recursive>
 801718a:	e7d9      	b.n	8017140 <_fflush_r+0xc>
 801718c:	4b05      	ldr	r3, [pc, #20]	; (80171a4 <_fflush_r+0x70>)
 801718e:	429c      	cmp	r4, r3
 8017190:	d101      	bne.n	8017196 <_fflush_r+0x62>
 8017192:	68ac      	ldr	r4, [r5, #8]
 8017194:	e7df      	b.n	8017156 <_fflush_r+0x22>
 8017196:	4b04      	ldr	r3, [pc, #16]	; (80171a8 <_fflush_r+0x74>)
 8017198:	429c      	cmp	r4, r3
 801719a:	bf08      	it	eq
 801719c:	68ec      	ldreq	r4, [r5, #12]
 801719e:	e7da      	b.n	8017156 <_fflush_r+0x22>
 80171a0:	08017a48 	.word	0x08017a48
 80171a4:	08017a68 	.word	0x08017a68
 80171a8:	08017a28 	.word	0x08017a28

080171ac <std>:
 80171ac:	2300      	movs	r3, #0
 80171ae:	b510      	push	{r4, lr}
 80171b0:	4604      	mov	r4, r0
 80171b2:	e9c0 3300 	strd	r3, r3, [r0]
 80171b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80171ba:	6083      	str	r3, [r0, #8]
 80171bc:	8181      	strh	r1, [r0, #12]
 80171be:	6643      	str	r3, [r0, #100]	; 0x64
 80171c0:	81c2      	strh	r2, [r0, #14]
 80171c2:	6183      	str	r3, [r0, #24]
 80171c4:	4619      	mov	r1, r3
 80171c6:	2208      	movs	r2, #8
 80171c8:	305c      	adds	r0, #92	; 0x5c
 80171ca:	f7ff fcff 	bl	8016bcc <memset>
 80171ce:	4b05      	ldr	r3, [pc, #20]	; (80171e4 <std+0x38>)
 80171d0:	6263      	str	r3, [r4, #36]	; 0x24
 80171d2:	4b05      	ldr	r3, [pc, #20]	; (80171e8 <std+0x3c>)
 80171d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80171d6:	4b05      	ldr	r3, [pc, #20]	; (80171ec <std+0x40>)
 80171d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80171da:	4b05      	ldr	r3, [pc, #20]	; (80171f0 <std+0x44>)
 80171dc:	6224      	str	r4, [r4, #32]
 80171de:	6323      	str	r3, [r4, #48]	; 0x30
 80171e0:	bd10      	pop	{r4, pc}
 80171e2:	bf00      	nop
 80171e4:	08017481 	.word	0x08017481
 80171e8:	080174a3 	.word	0x080174a3
 80171ec:	080174db 	.word	0x080174db
 80171f0:	080174ff 	.word	0x080174ff

080171f4 <_cleanup_r>:
 80171f4:	4901      	ldr	r1, [pc, #4]	; (80171fc <_cleanup_r+0x8>)
 80171f6:	f000 b8af 	b.w	8017358 <_fwalk_reent>
 80171fa:	bf00      	nop
 80171fc:	08017135 	.word	0x08017135

08017200 <__sfmoreglue>:
 8017200:	b570      	push	{r4, r5, r6, lr}
 8017202:	2268      	movs	r2, #104	; 0x68
 8017204:	1e4d      	subs	r5, r1, #1
 8017206:	4355      	muls	r5, r2
 8017208:	460e      	mov	r6, r1
 801720a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801720e:	f7ff fd51 	bl	8016cb4 <_malloc_r>
 8017212:	4604      	mov	r4, r0
 8017214:	b140      	cbz	r0, 8017228 <__sfmoreglue+0x28>
 8017216:	2100      	movs	r1, #0
 8017218:	e9c0 1600 	strd	r1, r6, [r0]
 801721c:	300c      	adds	r0, #12
 801721e:	60a0      	str	r0, [r4, #8]
 8017220:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017224:	f7ff fcd2 	bl	8016bcc <memset>
 8017228:	4620      	mov	r0, r4
 801722a:	bd70      	pop	{r4, r5, r6, pc}

0801722c <__sfp_lock_acquire>:
 801722c:	4801      	ldr	r0, [pc, #4]	; (8017234 <__sfp_lock_acquire+0x8>)
 801722e:	f000 b8b3 	b.w	8017398 <__retarget_lock_acquire_recursive>
 8017232:	bf00      	nop
 8017234:	24005a41 	.word	0x24005a41

08017238 <__sfp_lock_release>:
 8017238:	4801      	ldr	r0, [pc, #4]	; (8017240 <__sfp_lock_release+0x8>)
 801723a:	f000 b8ae 	b.w	801739a <__retarget_lock_release_recursive>
 801723e:	bf00      	nop
 8017240:	24005a41 	.word	0x24005a41

08017244 <__sinit_lock_acquire>:
 8017244:	4801      	ldr	r0, [pc, #4]	; (801724c <__sinit_lock_acquire+0x8>)
 8017246:	f000 b8a7 	b.w	8017398 <__retarget_lock_acquire_recursive>
 801724a:	bf00      	nop
 801724c:	24005a42 	.word	0x24005a42

08017250 <__sinit_lock_release>:
 8017250:	4801      	ldr	r0, [pc, #4]	; (8017258 <__sinit_lock_release+0x8>)
 8017252:	f000 b8a2 	b.w	801739a <__retarget_lock_release_recursive>
 8017256:	bf00      	nop
 8017258:	24005a42 	.word	0x24005a42

0801725c <__sinit>:
 801725c:	b510      	push	{r4, lr}
 801725e:	4604      	mov	r4, r0
 8017260:	f7ff fff0 	bl	8017244 <__sinit_lock_acquire>
 8017264:	69a3      	ldr	r3, [r4, #24]
 8017266:	b11b      	cbz	r3, 8017270 <__sinit+0x14>
 8017268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801726c:	f7ff bff0 	b.w	8017250 <__sinit_lock_release>
 8017270:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017274:	6523      	str	r3, [r4, #80]	; 0x50
 8017276:	4b13      	ldr	r3, [pc, #76]	; (80172c4 <__sinit+0x68>)
 8017278:	4a13      	ldr	r2, [pc, #76]	; (80172c8 <__sinit+0x6c>)
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	62a2      	str	r2, [r4, #40]	; 0x28
 801727e:	42a3      	cmp	r3, r4
 8017280:	bf04      	itt	eq
 8017282:	2301      	moveq	r3, #1
 8017284:	61a3      	streq	r3, [r4, #24]
 8017286:	4620      	mov	r0, r4
 8017288:	f000 f820 	bl	80172cc <__sfp>
 801728c:	6060      	str	r0, [r4, #4]
 801728e:	4620      	mov	r0, r4
 8017290:	f000 f81c 	bl	80172cc <__sfp>
 8017294:	60a0      	str	r0, [r4, #8]
 8017296:	4620      	mov	r0, r4
 8017298:	f000 f818 	bl	80172cc <__sfp>
 801729c:	2200      	movs	r2, #0
 801729e:	60e0      	str	r0, [r4, #12]
 80172a0:	2104      	movs	r1, #4
 80172a2:	6860      	ldr	r0, [r4, #4]
 80172a4:	f7ff ff82 	bl	80171ac <std>
 80172a8:	68a0      	ldr	r0, [r4, #8]
 80172aa:	2201      	movs	r2, #1
 80172ac:	2109      	movs	r1, #9
 80172ae:	f7ff ff7d 	bl	80171ac <std>
 80172b2:	68e0      	ldr	r0, [r4, #12]
 80172b4:	2202      	movs	r2, #2
 80172b6:	2112      	movs	r1, #18
 80172b8:	f7ff ff78 	bl	80171ac <std>
 80172bc:	2301      	movs	r3, #1
 80172be:	61a3      	str	r3, [r4, #24]
 80172c0:	e7d2      	b.n	8017268 <__sinit+0xc>
 80172c2:	bf00      	nop
 80172c4:	08017a24 	.word	0x08017a24
 80172c8:	080171f5 	.word	0x080171f5

080172cc <__sfp>:
 80172cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172ce:	4607      	mov	r7, r0
 80172d0:	f7ff ffac 	bl	801722c <__sfp_lock_acquire>
 80172d4:	4b1e      	ldr	r3, [pc, #120]	; (8017350 <__sfp+0x84>)
 80172d6:	681e      	ldr	r6, [r3, #0]
 80172d8:	69b3      	ldr	r3, [r6, #24]
 80172da:	b913      	cbnz	r3, 80172e2 <__sfp+0x16>
 80172dc:	4630      	mov	r0, r6
 80172de:	f7ff ffbd 	bl	801725c <__sinit>
 80172e2:	3648      	adds	r6, #72	; 0x48
 80172e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80172e8:	3b01      	subs	r3, #1
 80172ea:	d503      	bpl.n	80172f4 <__sfp+0x28>
 80172ec:	6833      	ldr	r3, [r6, #0]
 80172ee:	b30b      	cbz	r3, 8017334 <__sfp+0x68>
 80172f0:	6836      	ldr	r6, [r6, #0]
 80172f2:	e7f7      	b.n	80172e4 <__sfp+0x18>
 80172f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80172f8:	b9d5      	cbnz	r5, 8017330 <__sfp+0x64>
 80172fa:	4b16      	ldr	r3, [pc, #88]	; (8017354 <__sfp+0x88>)
 80172fc:	60e3      	str	r3, [r4, #12]
 80172fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017302:	6665      	str	r5, [r4, #100]	; 0x64
 8017304:	f000 f847 	bl	8017396 <__retarget_lock_init_recursive>
 8017308:	f7ff ff96 	bl	8017238 <__sfp_lock_release>
 801730c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017310:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017314:	6025      	str	r5, [r4, #0]
 8017316:	61a5      	str	r5, [r4, #24]
 8017318:	2208      	movs	r2, #8
 801731a:	4629      	mov	r1, r5
 801731c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017320:	f7ff fc54 	bl	8016bcc <memset>
 8017324:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017328:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801732c:	4620      	mov	r0, r4
 801732e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017330:	3468      	adds	r4, #104	; 0x68
 8017332:	e7d9      	b.n	80172e8 <__sfp+0x1c>
 8017334:	2104      	movs	r1, #4
 8017336:	4638      	mov	r0, r7
 8017338:	f7ff ff62 	bl	8017200 <__sfmoreglue>
 801733c:	4604      	mov	r4, r0
 801733e:	6030      	str	r0, [r6, #0]
 8017340:	2800      	cmp	r0, #0
 8017342:	d1d5      	bne.n	80172f0 <__sfp+0x24>
 8017344:	f7ff ff78 	bl	8017238 <__sfp_lock_release>
 8017348:	230c      	movs	r3, #12
 801734a:	603b      	str	r3, [r7, #0]
 801734c:	e7ee      	b.n	801732c <__sfp+0x60>
 801734e:	bf00      	nop
 8017350:	08017a24 	.word	0x08017a24
 8017354:	ffff0001 	.word	0xffff0001

08017358 <_fwalk_reent>:
 8017358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801735c:	4606      	mov	r6, r0
 801735e:	4688      	mov	r8, r1
 8017360:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017364:	2700      	movs	r7, #0
 8017366:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801736a:	f1b9 0901 	subs.w	r9, r9, #1
 801736e:	d505      	bpl.n	801737c <_fwalk_reent+0x24>
 8017370:	6824      	ldr	r4, [r4, #0]
 8017372:	2c00      	cmp	r4, #0
 8017374:	d1f7      	bne.n	8017366 <_fwalk_reent+0xe>
 8017376:	4638      	mov	r0, r7
 8017378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801737c:	89ab      	ldrh	r3, [r5, #12]
 801737e:	2b01      	cmp	r3, #1
 8017380:	d907      	bls.n	8017392 <_fwalk_reent+0x3a>
 8017382:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017386:	3301      	adds	r3, #1
 8017388:	d003      	beq.n	8017392 <_fwalk_reent+0x3a>
 801738a:	4629      	mov	r1, r5
 801738c:	4630      	mov	r0, r6
 801738e:	47c0      	blx	r8
 8017390:	4307      	orrs	r7, r0
 8017392:	3568      	adds	r5, #104	; 0x68
 8017394:	e7e9      	b.n	801736a <_fwalk_reent+0x12>

08017396 <__retarget_lock_init_recursive>:
 8017396:	4770      	bx	lr

08017398 <__retarget_lock_acquire_recursive>:
 8017398:	4770      	bx	lr

0801739a <__retarget_lock_release_recursive>:
 801739a:	4770      	bx	lr

0801739c <__swhatbuf_r>:
 801739c:	b570      	push	{r4, r5, r6, lr}
 801739e:	460e      	mov	r6, r1
 80173a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173a4:	2900      	cmp	r1, #0
 80173a6:	b096      	sub	sp, #88	; 0x58
 80173a8:	4614      	mov	r4, r2
 80173aa:	461d      	mov	r5, r3
 80173ac:	da08      	bge.n	80173c0 <__swhatbuf_r+0x24>
 80173ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80173b2:	2200      	movs	r2, #0
 80173b4:	602a      	str	r2, [r5, #0]
 80173b6:	061a      	lsls	r2, r3, #24
 80173b8:	d410      	bmi.n	80173dc <__swhatbuf_r+0x40>
 80173ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80173be:	e00e      	b.n	80173de <__swhatbuf_r+0x42>
 80173c0:	466a      	mov	r2, sp
 80173c2:	f000 f8c3 	bl	801754c <_fstat_r>
 80173c6:	2800      	cmp	r0, #0
 80173c8:	dbf1      	blt.n	80173ae <__swhatbuf_r+0x12>
 80173ca:	9a01      	ldr	r2, [sp, #4]
 80173cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80173d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80173d4:	425a      	negs	r2, r3
 80173d6:	415a      	adcs	r2, r3
 80173d8:	602a      	str	r2, [r5, #0]
 80173da:	e7ee      	b.n	80173ba <__swhatbuf_r+0x1e>
 80173dc:	2340      	movs	r3, #64	; 0x40
 80173de:	2000      	movs	r0, #0
 80173e0:	6023      	str	r3, [r4, #0]
 80173e2:	b016      	add	sp, #88	; 0x58
 80173e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080173e8 <__smakebuf_r>:
 80173e8:	898b      	ldrh	r3, [r1, #12]
 80173ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80173ec:	079d      	lsls	r5, r3, #30
 80173ee:	4606      	mov	r6, r0
 80173f0:	460c      	mov	r4, r1
 80173f2:	d507      	bpl.n	8017404 <__smakebuf_r+0x1c>
 80173f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80173f8:	6023      	str	r3, [r4, #0]
 80173fa:	6123      	str	r3, [r4, #16]
 80173fc:	2301      	movs	r3, #1
 80173fe:	6163      	str	r3, [r4, #20]
 8017400:	b002      	add	sp, #8
 8017402:	bd70      	pop	{r4, r5, r6, pc}
 8017404:	ab01      	add	r3, sp, #4
 8017406:	466a      	mov	r2, sp
 8017408:	f7ff ffc8 	bl	801739c <__swhatbuf_r>
 801740c:	9900      	ldr	r1, [sp, #0]
 801740e:	4605      	mov	r5, r0
 8017410:	4630      	mov	r0, r6
 8017412:	f7ff fc4f 	bl	8016cb4 <_malloc_r>
 8017416:	b948      	cbnz	r0, 801742c <__smakebuf_r+0x44>
 8017418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801741c:	059a      	lsls	r2, r3, #22
 801741e:	d4ef      	bmi.n	8017400 <__smakebuf_r+0x18>
 8017420:	f023 0303 	bic.w	r3, r3, #3
 8017424:	f043 0302 	orr.w	r3, r3, #2
 8017428:	81a3      	strh	r3, [r4, #12]
 801742a:	e7e3      	b.n	80173f4 <__smakebuf_r+0xc>
 801742c:	4b0d      	ldr	r3, [pc, #52]	; (8017464 <__smakebuf_r+0x7c>)
 801742e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017430:	89a3      	ldrh	r3, [r4, #12]
 8017432:	6020      	str	r0, [r4, #0]
 8017434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017438:	81a3      	strh	r3, [r4, #12]
 801743a:	9b00      	ldr	r3, [sp, #0]
 801743c:	6163      	str	r3, [r4, #20]
 801743e:	9b01      	ldr	r3, [sp, #4]
 8017440:	6120      	str	r0, [r4, #16]
 8017442:	b15b      	cbz	r3, 801745c <__smakebuf_r+0x74>
 8017444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017448:	4630      	mov	r0, r6
 801744a:	f000 f891 	bl	8017570 <_isatty_r>
 801744e:	b128      	cbz	r0, 801745c <__smakebuf_r+0x74>
 8017450:	89a3      	ldrh	r3, [r4, #12]
 8017452:	f023 0303 	bic.w	r3, r3, #3
 8017456:	f043 0301 	orr.w	r3, r3, #1
 801745a:	81a3      	strh	r3, [r4, #12]
 801745c:	89a0      	ldrh	r0, [r4, #12]
 801745e:	4305      	orrs	r5, r0
 8017460:	81a5      	strh	r5, [r4, #12]
 8017462:	e7cd      	b.n	8017400 <__smakebuf_r+0x18>
 8017464:	080171f5 	.word	0x080171f5

08017468 <__malloc_lock>:
 8017468:	4801      	ldr	r0, [pc, #4]	; (8017470 <__malloc_lock+0x8>)
 801746a:	f7ff bf95 	b.w	8017398 <__retarget_lock_acquire_recursive>
 801746e:	bf00      	nop
 8017470:	24005a40 	.word	0x24005a40

08017474 <__malloc_unlock>:
 8017474:	4801      	ldr	r0, [pc, #4]	; (801747c <__malloc_unlock+0x8>)
 8017476:	f7ff bf90 	b.w	801739a <__retarget_lock_release_recursive>
 801747a:	bf00      	nop
 801747c:	24005a40 	.word	0x24005a40

08017480 <__sread>:
 8017480:	b510      	push	{r4, lr}
 8017482:	460c      	mov	r4, r1
 8017484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017488:	f000 f894 	bl	80175b4 <_read_r>
 801748c:	2800      	cmp	r0, #0
 801748e:	bfab      	itete	ge
 8017490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017492:	89a3      	ldrhlt	r3, [r4, #12]
 8017494:	181b      	addge	r3, r3, r0
 8017496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801749a:	bfac      	ite	ge
 801749c:	6563      	strge	r3, [r4, #84]	; 0x54
 801749e:	81a3      	strhlt	r3, [r4, #12]
 80174a0:	bd10      	pop	{r4, pc}

080174a2 <__swrite>:
 80174a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174a6:	461f      	mov	r7, r3
 80174a8:	898b      	ldrh	r3, [r1, #12]
 80174aa:	05db      	lsls	r3, r3, #23
 80174ac:	4605      	mov	r5, r0
 80174ae:	460c      	mov	r4, r1
 80174b0:	4616      	mov	r6, r2
 80174b2:	d505      	bpl.n	80174c0 <__swrite+0x1e>
 80174b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174b8:	2302      	movs	r3, #2
 80174ba:	2200      	movs	r2, #0
 80174bc:	f000 f868 	bl	8017590 <_lseek_r>
 80174c0:	89a3      	ldrh	r3, [r4, #12]
 80174c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80174ca:	81a3      	strh	r3, [r4, #12]
 80174cc:	4632      	mov	r2, r6
 80174ce:	463b      	mov	r3, r7
 80174d0:	4628      	mov	r0, r5
 80174d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174d6:	f000 b817 	b.w	8017508 <_write_r>

080174da <__sseek>:
 80174da:	b510      	push	{r4, lr}
 80174dc:	460c      	mov	r4, r1
 80174de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174e2:	f000 f855 	bl	8017590 <_lseek_r>
 80174e6:	1c43      	adds	r3, r0, #1
 80174e8:	89a3      	ldrh	r3, [r4, #12]
 80174ea:	bf15      	itete	ne
 80174ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80174ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80174f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80174f6:	81a3      	strheq	r3, [r4, #12]
 80174f8:	bf18      	it	ne
 80174fa:	81a3      	strhne	r3, [r4, #12]
 80174fc:	bd10      	pop	{r4, pc}

080174fe <__sclose>:
 80174fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017502:	f000 b813 	b.w	801752c <_close_r>
	...

08017508 <_write_r>:
 8017508:	b538      	push	{r3, r4, r5, lr}
 801750a:	4d07      	ldr	r5, [pc, #28]	; (8017528 <_write_r+0x20>)
 801750c:	4604      	mov	r4, r0
 801750e:	4608      	mov	r0, r1
 8017510:	4611      	mov	r1, r2
 8017512:	2200      	movs	r2, #0
 8017514:	602a      	str	r2, [r5, #0]
 8017516:	461a      	mov	r2, r3
 8017518:	f7ec fc3f 	bl	8003d9a <_write>
 801751c:	1c43      	adds	r3, r0, #1
 801751e:	d102      	bne.n	8017526 <_write_r+0x1e>
 8017520:	682b      	ldr	r3, [r5, #0]
 8017522:	b103      	cbz	r3, 8017526 <_write_r+0x1e>
 8017524:	6023      	str	r3, [r4, #0]
 8017526:	bd38      	pop	{r3, r4, r5, pc}
 8017528:	24005a44 	.word	0x24005a44

0801752c <_close_r>:
 801752c:	b538      	push	{r3, r4, r5, lr}
 801752e:	4d06      	ldr	r5, [pc, #24]	; (8017548 <_close_r+0x1c>)
 8017530:	2300      	movs	r3, #0
 8017532:	4604      	mov	r4, r0
 8017534:	4608      	mov	r0, r1
 8017536:	602b      	str	r3, [r5, #0]
 8017538:	f7ec fc4b 	bl	8003dd2 <_close>
 801753c:	1c43      	adds	r3, r0, #1
 801753e:	d102      	bne.n	8017546 <_close_r+0x1a>
 8017540:	682b      	ldr	r3, [r5, #0]
 8017542:	b103      	cbz	r3, 8017546 <_close_r+0x1a>
 8017544:	6023      	str	r3, [r4, #0]
 8017546:	bd38      	pop	{r3, r4, r5, pc}
 8017548:	24005a44 	.word	0x24005a44

0801754c <_fstat_r>:
 801754c:	b538      	push	{r3, r4, r5, lr}
 801754e:	4d07      	ldr	r5, [pc, #28]	; (801756c <_fstat_r+0x20>)
 8017550:	2300      	movs	r3, #0
 8017552:	4604      	mov	r4, r0
 8017554:	4608      	mov	r0, r1
 8017556:	4611      	mov	r1, r2
 8017558:	602b      	str	r3, [r5, #0]
 801755a:	f7ec fc46 	bl	8003dea <_fstat>
 801755e:	1c43      	adds	r3, r0, #1
 8017560:	d102      	bne.n	8017568 <_fstat_r+0x1c>
 8017562:	682b      	ldr	r3, [r5, #0]
 8017564:	b103      	cbz	r3, 8017568 <_fstat_r+0x1c>
 8017566:	6023      	str	r3, [r4, #0]
 8017568:	bd38      	pop	{r3, r4, r5, pc}
 801756a:	bf00      	nop
 801756c:	24005a44 	.word	0x24005a44

08017570 <_isatty_r>:
 8017570:	b538      	push	{r3, r4, r5, lr}
 8017572:	4d06      	ldr	r5, [pc, #24]	; (801758c <_isatty_r+0x1c>)
 8017574:	2300      	movs	r3, #0
 8017576:	4604      	mov	r4, r0
 8017578:	4608      	mov	r0, r1
 801757a:	602b      	str	r3, [r5, #0]
 801757c:	f7ec fc45 	bl	8003e0a <_isatty>
 8017580:	1c43      	adds	r3, r0, #1
 8017582:	d102      	bne.n	801758a <_isatty_r+0x1a>
 8017584:	682b      	ldr	r3, [r5, #0]
 8017586:	b103      	cbz	r3, 801758a <_isatty_r+0x1a>
 8017588:	6023      	str	r3, [r4, #0]
 801758a:	bd38      	pop	{r3, r4, r5, pc}
 801758c:	24005a44 	.word	0x24005a44

08017590 <_lseek_r>:
 8017590:	b538      	push	{r3, r4, r5, lr}
 8017592:	4d07      	ldr	r5, [pc, #28]	; (80175b0 <_lseek_r+0x20>)
 8017594:	4604      	mov	r4, r0
 8017596:	4608      	mov	r0, r1
 8017598:	4611      	mov	r1, r2
 801759a:	2200      	movs	r2, #0
 801759c:	602a      	str	r2, [r5, #0]
 801759e:	461a      	mov	r2, r3
 80175a0:	f7ec fc3e 	bl	8003e20 <_lseek>
 80175a4:	1c43      	adds	r3, r0, #1
 80175a6:	d102      	bne.n	80175ae <_lseek_r+0x1e>
 80175a8:	682b      	ldr	r3, [r5, #0]
 80175aa:	b103      	cbz	r3, 80175ae <_lseek_r+0x1e>
 80175ac:	6023      	str	r3, [r4, #0]
 80175ae:	bd38      	pop	{r3, r4, r5, pc}
 80175b0:	24005a44 	.word	0x24005a44

080175b4 <_read_r>:
 80175b4:	b538      	push	{r3, r4, r5, lr}
 80175b6:	4d07      	ldr	r5, [pc, #28]	; (80175d4 <_read_r+0x20>)
 80175b8:	4604      	mov	r4, r0
 80175ba:	4608      	mov	r0, r1
 80175bc:	4611      	mov	r1, r2
 80175be:	2200      	movs	r2, #0
 80175c0:	602a      	str	r2, [r5, #0]
 80175c2:	461a      	mov	r2, r3
 80175c4:	f7ec fbcc 	bl	8003d60 <_read>
 80175c8:	1c43      	adds	r3, r0, #1
 80175ca:	d102      	bne.n	80175d2 <_read_r+0x1e>
 80175cc:	682b      	ldr	r3, [r5, #0]
 80175ce:	b103      	cbz	r3, 80175d2 <_read_r+0x1e>
 80175d0:	6023      	str	r3, [r4, #0]
 80175d2:	bd38      	pop	{r3, r4, r5, pc}
 80175d4:	24005a44 	.word	0x24005a44

080175d8 <_init>:
 80175d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175da:	bf00      	nop
 80175dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175de:	bc08      	pop	{r3}
 80175e0:	469e      	mov	lr, r3
 80175e2:	4770      	bx	lr

080175e4 <_fini>:
 80175e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175e6:	bf00      	nop
 80175e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80175ea:	bc08      	pop	{r3}
 80175ec:	469e      	mov	lr, r3
 80175ee:	4770      	bx	lr
