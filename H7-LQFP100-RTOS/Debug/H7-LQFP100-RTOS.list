
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bfc8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  0801c268  0801c268  0002c268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c504  0801c504  0002c504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c50c  0801c50c  0002c50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c510  0801c510  0002c510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000f4  24000000  0801c514  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000070ec  24000100  0801c608  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240071ec  0801c608  000371ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000439e6  00000000  00000000  00030122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000081bc  00000000  00000000  00073b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ce8  00000000  00000000  0007bcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000029a8  00000000  00000000  0007e9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046df6  00000000  00000000  00081358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00045979  00000000  00000000  000c814e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001975ec  00000000  00000000  0010dac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002a50b3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bb24  00000000  00000000  002a5104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801c250 	.word	0x0801c250

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	0801c250 	.word	0x0801c250

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f006 fcbd 	bl	8006fe8 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 fa18 	bl	8003aa8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f007 fdd8 	bl	8008238 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 fa0b 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f006 ff1b 	bl	80074f0 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 f9f2 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f006 ff0d 	bl	80074f0 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 f9e4 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f006 feff 	bl	80074f0 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 f9d6 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f006 fef1 	bl	80074f0 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 f9c8 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f006 fee2 	bl	80074f0 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 f9b9 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f006 fed3 	bl	80074f0 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 f9aa 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f006 fec4 	bl	80074f0 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 f99b 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f006 feb5 	bl	80074f0 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f003 f98c 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f006 fea6 	bl	80074f0 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f003 f97d 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f006 fe97 	bl	80074f0 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f003 f96e 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f006 fe88 	bl	80074f0 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f003 f95f 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400011c 	.word	0x2400011c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f006 fba5 	bl	8006fe8 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f003 f900 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f006 fe10 	bl	80074f0 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f003 f8e7 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f006 fe02 	bl	80074f0 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f003 f8d9 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f006 fdf4 	bl	80074f0 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f003 f8cb 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f006 fde6 	bl	80074f0 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f003 f8bd 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000180 	.word	0x24000180
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00b fd06 	bl	800c40c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00b fcfa 	bl	800c40c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00b fcee 	bl	800c40c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f008 f9a3 	bl	8008dc0 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f003 f812 	bl	8003aa8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f006 f85e 	bl	8006ba0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f006 f858 	bl	8006ba0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f008 f943 	bl	8008dc0 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 ffb2 	bl	8003aa8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	240001e4 	.word	0x240001e4
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400025c 	.word	0x2400025c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f01b fb57 	bl	801c240 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f007 fd0b 	bl	80085b4 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 ff80 	bl	8003aa8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f007 ff26 	bl	8008a14 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 ff6b 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002d4 	.word	0x240002d4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00b fbd9 	bl	800c40c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f008 f88e 	bl	8008dc0 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 fefd 	bl	8003aa8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f007 fc50 	bl	8008564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f007 fc67 	bl	8008598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240002e8 	.word	0x240002e8
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f007 fc27 	bl	8008564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f007 fc3e 	bl	8008598 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f007 fc1f 	bl	8008564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f007 fc36 	bl	8008598 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f007 fc17 	bl	8008564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f007 fc2e 	bl	8008598 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f007 fc0f 	bl	8008564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f007 fc26 	bl	8008598 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f007 fc07 	bl	8008564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f007 fc1e 	bl	8008598 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f007 fbff 	bl	8008564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f007 fc16 	bl	8008598 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f007 fbf7 	bl	8008564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f007 fc0e 	bl	8008598 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f007 fbef 	bl	8008564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f007 fc06 	bl	8008598 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f01b fa38 	bl	801c240 <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00b f92c 	bl	800c0c8 <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00b f8d1 	bl	800c0c8 <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f00a fd58 	bl	800ba6c <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	24000360 	.word	0x24000360
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b1e      	cmp	r3, #30
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f00a fcac 	bl	800ba6c <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00a ff7e 	bl	800c0c8 <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f00a ff1b 	bl	800c0c8 <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f00a fba2 	bl	800ba6c <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f00a fe46 	bl	800c0c8 <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b1e      	cmp	r3, #30
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f00a fa8b 	bl	800ba6c <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f00a fd5e 	bl	800c0c8 <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	24000360 	.word	0x24000360
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f01a fd24 	bl	801c240 <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f00a fc39 	bl	800c0c8 <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f00a f8c1 	bl	800ba6c <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f00a fb9b 	bl	800c0c8 <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f01a fbbf 	bl	801c240 <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f01a fbb6 	bl	801c240 <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f009 ff8d 	bl	800ba6c <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f009 ff7a 	bl	800ba6c <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f01a fb01 	bl	801c240 <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f01a fafa 	bl	801c240 <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f009 fed3 	bl	800ba6c <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b1e      	cmp	r3, #30
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f00a f8b1 	bl	800bf1c <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f00a f959 	bl	800c0c8 <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f009 fddf 	bl	800ba6c <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	24000360 	.word	0x24000360
 8001f2c:	52002000 	.word	0x52002000

08001f30 <handle_error>:
 *        Initiates an emergency shutdown, manages Flash ECC-related errors, and sends error packets.
 *
 * @param error The error structure containing the error category and details.
 */
void handle_error(ERROR_STRUCT error)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	463b      	mov	r3, r7
 8001f38:	e883 0003 	stmia.w	r3, {r0, r1}
#ifdef ERROR_HANDLING_ENABLED
	emergency_shutdown();
 8001f3c:	f000 f9e0 	bl	8002300 <emergency_shutdown>

	// If error was caused by flash ECC...
	if ((error.detail == ED_single_bit_error_flash) || (error.detail == ED_double_bit_error_flash))
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	2b18      	cmp	r3, #24
 8001f44:	d002      	beq.n	8001f4c <handle_error+0x1c>
 8001f46:	787b      	ldrb	r3, [r7, #1]
 8001f48:	2b19      	cmp	r3, #25
 8001f4a:	d11f      	bne.n	8001f8c <handle_error+0x5c>
	{
		// Erase user flash, reinit EE, reset error counters, increment error counter, set previous error
		local_cpy[error.category]++;
 8001f4c:	783b      	ldrb	r3, [r7, #0]
 8001f4e:	4a1e      	ldr	r2, [pc, #120]	; (8001fc8 <handle_error+0x98>)
 8001f50:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f54:	3201      	adds	r2, #1
 8001f56:	b291      	uxth	r1, r2
 8001f58:	4a1b      	ldr	r2, [pc, #108]	; (8001fc8 <handle_error+0x98>)
 8001f5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		local_cpy[error.detail]++;
 8001f5e:	787b      	ldrb	r3, [r7, #1]
 8001f60:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <handle_error+0x98>)
 8001f62:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f66:	3201      	adds	r2, #1
 8001f68:	b291      	uxth	r1, r2
 8001f6a:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <handle_error+0x98>)
 8001f6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		flash_mass_erase();
 8001f70:	f000 f830 	bl	8001fd4 <flash_mass_erase>
		EE_Init();
 8001f74:	f7fe ff10 	bl	8000d98 <EE_Init>
		reset_error_counters();
 8001f78:	f000 f8c8 	bl	800210c <reset_error_counters>
		update_error_counter();
 8001f7c:	f000 f8a0 	bl	80020c0 <update_error_counter>
		set_previous_error(error);
 8001f80:	463b      	mov	r3, r7
 8001f82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f86:	f000 f8e1 	bl	800214c <set_previous_error>
 8001f8a:	e009      	b.n	8001fa0 <handle_error+0x70>
	}
	// Otherwise, just increment error counter and set previous error
	else
	{
		increment_error_counter(error);
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f92:	f000 f875 	bl	8002080 <increment_error_counter>
		set_previous_error(error);
 8001f96:	463b      	mov	r3, r7
 8001f98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f9c:	f000 f8d6 	bl	800214c <set_previous_error>
	}

	// Wait until all power supply rails are off, then send current error packet + junk data
	while(!IDLING){};
 8001fa0:	bf00      	nop
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <handle_error+0x9c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0fa      	beq.n	8001fa2 <handle_error+0x72>
	send_current_error_packet(error);
 8001fac:	463b      	mov	r3, r7
 8001fae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fb2:	f000 f93f 	bl	8002234 <send_current_error_packet>
	send_junk_packet();
 8001fb6:	f000 f979 	bl	80022ac <send_junk_packet>

	HAL_TIM_Base_Start_IT(&htim3);
 8001fba:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <handle_error+0xa0>)
 8001fbc:	f011 ff8c 	bl	8013ed8 <HAL_TIM_Base_Start_IT>
#endif
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	24000364 	.word	0x24000364
 8001fcc:	240000c4 	.word	0x240000c4
 8001fd0:	240025b8 	.word	0x240025b8

08001fd4 <flash_mass_erase>:
/**
 * @brief Performs a mass erase of Flash memory.
 *        Unlocks Flash and erases all sectors in Bank 2, handling errors if the erase fails.
 */
void flash_mass_erase()
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001fda:	f009 ff9f 	bl	800bf1c <HAL_FLASH_Unlock>

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <flash_mass_erase+0x48>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <flash_mass_erase+0x48>)
 8001fea:	2220      	movs	r2, #32
 8001fec:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Banks = FLASH_BANK_2;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <flash_mass_erase+0x48>)
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Sector = FLASH_SECTOR_0;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <flash_mass_erase+0x48>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = FLASH_SECTOR_TOTAL;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <flash_mass_erase+0x48>)
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	60da      	str	r2, [r3, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	4619      	mov	r1, r3
 8002004:	4805      	ldr	r0, [pc, #20]	; (800201c <flash_mass_erase+0x48>)
 8002006:	f00a f85f 	bl	800c0c8 <HAL_FLASHEx_Erase>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <flash_mass_erase+0x40>
	{
		Error_Handler();
 8002010:	f001 fd4a 	bl	8003aa8 <Error_Handler>
	}
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	240003a0 	.word	0x240003a0

08002020 <error_counter_init>:

/**
 * @breif Initializes the EE, reads the error counters from the EE, and stores them in local_cpy.
 */
void error_counter_init()
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8002026:	f009 ff79 	bl	800bf1c <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK)
 800202a:	f7fe feb5 	bl	8000d98 <EE_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <error_counter_init+0x18>
	{
		Error_Handler();
 8002034:	f001 fd38 	bl	8003aa8 <Error_Handler>
	}

	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 8002038:	2300      	movs	r3, #0
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	e013      	b.n	8002066 <error_counter_init+0x46>
	{
		if ((EE_ReadVariable(VirtAddVarTab[i], &local_cpy[i])) != HAL_OK)
 800203e:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <error_counter_init+0x58>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	490c      	ldr	r1, [pc, #48]	; (800207c <error_counter_init+0x5c>)
 800204c:	440b      	add	r3, r1
 800204e:	4619      	mov	r1, r3
 8002050:	4610      	mov	r0, r2
 8002052:	f7ff fb59 	bl	8001708 <EE_ReadVariable>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <error_counter_init+0x40>
		{
			Error_Handler();
 800205c:	f001 fd24 	bl	8003aa8 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3301      	adds	r3, #1
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b1c      	cmp	r3, #28
 800206a:	dde8      	ble.n	800203e <error_counter_init+0x1e>
		}
	}
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	24000000 	.word	0x24000000
 800207c:	24000364 	.word	0x24000364

08002080 <increment_error_counter>:
 *        Updates both the category and detail counters and saves the updated values.
 *
 * @param error The error structure containing the error category and details.
 */
void increment_error_counter(ERROR_STRUCT error)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	463b      	mov	r3, r7
 8002088:	e883 0003 	stmia.w	r3, {r0, r1}
	local_cpy[error.category]++;
 800208c:	783b      	ldrb	r3, [r7, #0]
 800208e:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <increment_error_counter+0x3c>)
 8002090:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002094:	3201      	adds	r2, #1
 8002096:	b291      	uxth	r1, r2
 8002098:	4a08      	ldr	r2, [pc, #32]	; (80020bc <increment_error_counter+0x3c>)
 800209a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	local_cpy[error.detail]++;
 800209e:	787b      	ldrb	r3, [r7, #1]
 80020a0:	4a06      	ldr	r2, [pc, #24]	; (80020bc <increment_error_counter+0x3c>)
 80020a2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020a6:	3201      	adds	r2, #1
 80020a8:	b291      	uxth	r1, r2
 80020aa:	4a04      	ldr	r2, [pc, #16]	; (80020bc <increment_error_counter+0x3c>)
 80020ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	update_error_counter();
 80020b0:	f000 f806 	bl	80020c0 <update_error_counter>
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	24000364 	.word	0x24000364

080020c0 <update_error_counter>:

/**
 * @brief Writes the contents of local_cpy to the EE, excluding the previous error codes.
 */
void update_error_counter()
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	e013      	b.n	80020f4 <update_error_counter+0x34>
	{
		if ((EE_WriteVariable(VirtAddVarTab[i], local_cpy[i])) != HAL_OK)
 80020cc:	4a0d      	ldr	r2, [pc, #52]	; (8002104 <update_error_counter+0x44>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020d4:	490c      	ldr	r1, [pc, #48]	; (8002108 <update_error_counter+0x48>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80020dc:	4619      	mov	r1, r3
 80020de:	4610      	mov	r0, r2
 80020e0:	f7ff fb5a 	bl	8001798 <EE_WriteVariable>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <update_error_counter+0x2e>
		{
			Error_Handler();
 80020ea:	f001 fcdd 	bl	8003aa8 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3301      	adds	r3, #1
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b1c      	cmp	r3, #28
 80020f8:	dde8      	ble.n	80020cc <update_error_counter+0xc>
		}
	}
}
 80020fa:	bf00      	nop
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	24000000 	.word	0x24000000
 8002108:	24000364 	.word	0x24000364

0800210c <reset_error_counters>:

/**
 * @brief Resets all error counters in the EE to 0.
 */
void reset_error_counters()
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	e00f      	b.n	8002138 <reset_error_counters+0x2c>
	{
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK)
 8002118:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <reset_error_counters+0x3c>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fb38 	bl	8001798 <EE_WriteVariable>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <reset_error_counters+0x26>
		{
			Error_Handler();
 800212e:	f001 fcbb 	bl	8003aa8 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3301      	adds	r3, #1
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b1c      	cmp	r3, #28
 800213c:	ddec      	ble.n	8002118 <reset_error_counters+0xc>
		}
	}
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	24000000 	.word	0x24000000

0800214c <set_previous_error>:
 * @brief Sets previous error code in the EE.
 *
 * @param error Previous error code in EE is set to this.
 */
void set_previous_error(ERROR_STRUCT error)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	463b      	mov	r3, r7
 8002154:	e883 0003 	stmia.w	r3, {r0, r1}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], error.category)) != HAL_OK)
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <set_previous_error+0x48>)
 800215a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800215c:	783a      	ldrb	r2, [r7, #0]
 800215e:	b292      	uxth	r2, r2
 8002160:	4611      	mov	r1, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fb18 	bl	8001798 <EE_WriteVariable>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <set_previous_error+0x26>
	{
		Error_Handler();
 800216e:	f001 fc9b 	bl	8003aa8 <Error_Handler>
	}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], error.detail)) != HAL_OK)
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <set_previous_error+0x48>)
 8002174:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002176:	787a      	ldrb	r2, [r7, #1]
 8002178:	b292      	uxth	r2, r2
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fb0b 	bl	8001798 <EE_WriteVariable>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <set_previous_error+0x40>
	{
		Error_Handler();
 8002188:	f001 fc8e 	bl	8003aa8 <Error_Handler>
	}
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	24000000 	.word	0x24000000

08002198 <get_previous_error>:
 * @brief Reads the previous error codes from EE
 *
 * @return Error populated with retrieved category and detail.
 */
ERROR_STRUCT get_previous_error()
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	ERROR_STRUCT prev_error;
	uint16_t category;
	uint16_t detail;

	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], &category)) != HAL_OK)
 80021a0:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <get_previous_error+0x60>)
 80021a2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80021a4:	f107 020e 	add.w	r2, r7, #14
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff faac 	bl	8001708 <EE_ReadVariable>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <get_previous_error+0x22>
	{
		Error_Handler();
 80021b6:	f001 fc77 	bl	8003aa8 <Error_Handler>
	}
	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], &detail)) != HAL_OK)
 80021ba:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <get_previous_error+0x60>)
 80021bc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80021be:	f107 020c 	add.w	r2, r7, #12
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fa9f 	bl	8001708 <EE_ReadVariable>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <get_previous_error+0x3c>
	{
		Error_Handler();
 80021d0:	f001 fc6a 	bl	8003aa8 <Error_Handler>
	}

	prev_error.category = category;
 80021d4:	89fb      	ldrh	r3, [r7, #14]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	743b      	strb	r3, [r7, #16]
	prev_error.detail = detail;
 80021da:	89bb      	ldrh	r3, [r7, #12]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	747b      	strb	r3, [r7, #17]

	return prev_error;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	461a      	mov	r2, r3
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	cb03      	ldmia	r3!, {r0, r1}
 80021ea:	6010      	str	r0, [r2, #0]
 80021ec:	6051      	str	r1, [r2, #4]
}
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	24000000 	.word	0x24000000

080021fc <send_previous_error_packet>:
 * @brief Creates and sends a packet containing the error codes for the previous error.
 *
 * This type of packet is only sent on request.
 */
void send_previous_error_packet()
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint8_t buffer[PREV_ERROR_PACKET_SIZE];

	prev_error = get_previous_error();
 8002202:	f107 0308 	add.w	r3, r7, #8
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff ffc6 	bl	8002198 <get_previous_error>

	buffer[0] = PREV_ERROR_PACKET_SYNC;
 800220c:	23aa      	movs	r3, #170	; 0xaa
 800220e:	713b      	strb	r3, [r7, #4]
	buffer[1] = PREV_ERROR_PACKET_SYNC;
 8002210:	23aa      	movs	r3, #170	; 0xaa
 8002212:	717b      	strb	r3, [r7, #5]
	buffer[2] = prev_error.category;
 8002214:	7a3b      	ldrb	r3, [r7, #8]
 8002216:	71bb      	strb	r3, [r7, #6]
	buffer[3] = prev_error.detail;
 8002218:	7a7b      	ldrb	r3, [r7, #9]
 800221a:	71fb      	strb	r3, [r7, #7]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, UART_TIMEOUT_MS);
 800221c:	1d39      	adds	r1, r7, #4
 800221e:	2364      	movs	r3, #100	; 0x64
 8002220:	2204      	movs	r2, #4
 8002222:	4803      	ldr	r0, [pc, #12]	; (8002230 <send_previous_error_packet+0x34>)
 8002224:	f013 fa8a 	bl	801573c <HAL_UART_Transmit>
}
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	24002650 	.word	0x24002650

08002234 <send_current_error_packet>:
 * @brief Creates and sends a packet containing the error codes for the current error.
 *
 * This type of packet is only sent when handle_error() is called.
 */
void send_current_error_packet(ERROR_STRUCT error)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	463b      	mov	r3, r7
 800223c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t buffer[CURRENT_ERROR_PACKET_SIZE];

	// If the error isn't a power supply rail, set the out of bounds values to 0
	if (error.category != EC_power_supply_rail)
 8002240:	783b      	ldrb	r3, [r7, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <send_current_error_packet+0x1e>
	{
		error.OOB_1 = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	807b      	strh	r3, [r7, #2]
		error.OOB_2 = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	80bb      	strh	r3, [r7, #4]
		error.OOB_3 = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	80fb      	strh	r3, [r7, #6]
	}

	buffer[0] = CURRENT_ERROR_PACKET_SYNC;
 8002252:	23bb      	movs	r3, #187	; 0xbb
 8002254:	733b      	strb	r3, [r7, #12]
	buffer[1] = CURRENT_ERROR_PACKET_SYNC;
 8002256:	23bb      	movs	r3, #187	; 0xbb
 8002258:	737b      	strb	r3, [r7, #13]
	buffer[2] = error.category;
 800225a:	783b      	ldrb	r3, [r7, #0]
 800225c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = error.detail;
 800225e:	787b      	ldrb	r3, [r7, #1]
 8002260:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ((error.OOB_1 & 0xFF00) >> 8);
 8002262:	887b      	ldrh	r3, [r7, #2]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	b29b      	uxth	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	743b      	strb	r3, [r7, #16]
	buffer[5] = (error.OOB_1 & 0xFF);
 800226c:	887b      	ldrh	r3, [r7, #2]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	747b      	strb	r3, [r7, #17]
	buffer[6] = ((error.OOB_2 & 0xFF00) >> 8);
 8002272:	88bb      	ldrh	r3, [r7, #4]
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	b29b      	uxth	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	74bb      	strb	r3, [r7, #18]
	buffer[7] = (error.OOB_2 & 0xFF);
 800227c:	88bb      	ldrh	r3, [r7, #4]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	74fb      	strb	r3, [r7, #19]
	buffer[8] = ((error.OOB_3 & 0xFF00) >> 8);
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	b29b      	uxth	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	753b      	strb	r3, [r7, #20]
	buffer[9] = (error.OOB_3 & 0xFF);
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, CURRENT_ERROR_PACKET_SIZE, UART_TIMEOUT_MS);
 8002292:	f107 010c 	add.w	r1, r7, #12
 8002296:	2364      	movs	r3, #100	; 0x64
 8002298:	220a      	movs	r2, #10
 800229a:	4803      	ldr	r0, [pc, #12]	; (80022a8 <send_current_error_packet+0x74>)
 800229c:	f013 fa4e 	bl	801573c <HAL_UART_Transmit>
}
 80022a0:	bf00      	nop
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	24002650 	.word	0x24002650

080022ac <send_junk_packet>:
 * @brief Creates and sends a junk packet containing all 0xCE.
 *
 * Used to clear out the buffer on the OBC.
 */
void send_junk_packet()
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80022b2:	af00      	add	r7, sp, #0
	uint8_t buffer[JUNK_PACKET_SIZE];

	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80022ba:	e00d      	b.n	80022d8 <send_junk_packet+0x2c>
		buffer[i] = 0xCE;
 80022bc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80022c0:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 80022c4:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80022c8:	4413      	add	r3, r2
 80022ca:	22ce      	movs	r2, #206	; 0xce
 80022cc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 80022ce:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80022d2:	3301      	adds	r3, #1
 80022d4:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80022d8:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80022dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e0:	dbec      	blt.n	80022bc <send_junk_packet+0x10>
	}

	HAL_UART_Transmit(&huart1, buffer, JUNK_PACKET_SIZE, UART_TIMEOUT_MS);
 80022e2:	1d39      	adds	r1, r7, #4
 80022e4:	2364      	movs	r3, #100	; 0x64
 80022e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ea:	4804      	ldr	r0, [pc, #16]	; (80022fc <send_junk_packet+0x50>)
 80022ec:	f013 fa26 	bl	801573c <HAL_UART_Transmit>
}
 80022f0:	bf00      	nop
 80022f2:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	24002650 	.word	0x24002650

08002300 <emergency_shutdown>:
/**
 * @brief Initiates an emergency shutdown of the system.
 *        Disables timers, DAC, rail monitoring, and all power supply voltages, setting the system to idle.
 */
void emergency_shutdown()
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
	ERPA_ENABLED = 0;
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <emergency_shutdown+0x8c>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
	TIM2->CCR4 = 0;
 800230c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002310:	2200      	movs	r2, #0
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8002314:	2100      	movs	r1, #0
 8002316:	481e      	ldr	r0, [pc, #120]	; (8002390 <emergency_shutdown+0x90>)
 8002318:	f011 ffe0 	bl	80142dc <HAL_TIM_OC_Stop_IT>
	HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 800231c:	210c      	movs	r1, #12
 800231e:	481d      	ldr	r0, [pc, #116]	; (8002394 <emergency_shutdown+0x94>)
 8002320:	f011 ffdc 	bl	80142dc <HAL_TIM_OC_Stop_IT>

	HK_ENABLED = 0;
 8002324:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <emergency_shutdown+0x98>)
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800232a:	2100      	movs	r1, #0
 800232c:	481b      	ldr	r0, [pc, #108]	; (800239c <emergency_shutdown+0x9c>)
 800232e:	f006 fa7b 	bl	8008828 <HAL_DAC_Stop_DMA>

	// Telling rail monitor which voltages are now disabled
	for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--)
 8002332:	2311      	movs	r3, #17
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	e008      	b.n	800234a <emergency_shutdown+0x4a>
	{
		set_rail_monitor_enable(i, 0);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f004 f96c 	bl	800661c <set_rail_monitor_enable>
	for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b05      	cmp	r3, #5
 800234e:	dcf3      	bgt.n	8002338 <emergency_shutdown+0x38>
	}

	// Disabling all voltages
	for (int i = GPIOS_INDEX_N800V; i >= GPIOS_INDEX_SDN1; i--)
 8002350:	2308      	movs	r3, #8
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	e00f      	b.n	8002376 <emergency_shutdown+0x76>
	{
		HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002356:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <emergency_shutdown+0xa0>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800235e:	4a10      	ldr	r2, [pc, #64]	; (80023a0 <emergency_shutdown+0xa0>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	889b      	ldrh	r3, [r3, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	4619      	mov	r1, r3
 800236c:	f00a fa16 	bl	800c79c <HAL_GPIO_WritePin>
	for (int i = GPIOS_INDEX_N800V; i >= GPIOS_INDEX_SDN1; i--)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	3b01      	subs	r3, #1
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	daec      	bge.n	8002356 <emergency_shutdown+0x56>
	}
	IDLING = 1;
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <emergency_shutdown+0xa4>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	24001d15 	.word	0x24001d15
 8002390:	24002520 	.word	0x24002520
 8002394:	2400256c 	.word	0x2400256c
 8002398:	24001d14 	.word	0x24001d14
 800239c:	240002d4 	.word	0x240002d4
 80023a0:	0801c47c 	.word	0x0801c47c
 80023a4:	240000c4 	.word	0x240000c4

080023a8 <vApplicationTickHook>:
/**
 * @brief Tick hook function called by each tick interrupt.
 *		  Increments uptime_millis, used in time tagging.
 */
void vApplicationTickHook( void )
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <vApplicationTickHook+0x18>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3301      	adds	r3, #1
 80023b2:	4a03      	ldr	r2, [pc, #12]	; (80023c0 <vApplicationTickHook+0x18>)
 80023b4:	6013      	str	r3, [r2, #0]
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	24001d18 	.word	0x24001d18

080023c4 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 80023e0:	4a28      	ldr	r2, [pc, #160]	; (8002484 <MX_FREERTOS_Init+0xa8>)
 80023e2:	2100      	movs	r1, #0
 80023e4:	4828      	ldr	r0, [pc, #160]	; (8002488 <MX_FREERTOS_Init+0xac>)
 80023e6:	f016 fa2d 	bl	8018844 <osThreadNew>
 80023ea:	4603      	mov	r3, r0
 80023ec:	4a27      	ldr	r2, [pc, #156]	; (800248c <MX_FREERTOS_Init+0xb0>)
 80023ee:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80023f0:	4a27      	ldr	r2, [pc, #156]	; (8002490 <MX_FREERTOS_Init+0xb4>)
 80023f2:	2100      	movs	r1, #0
 80023f4:	4827      	ldr	r0, [pc, #156]	; (8002494 <MX_FREERTOS_Init+0xb8>)
 80023f6:	f016 fa25 	bl	8018844 <osThreadNew>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4a26      	ldr	r2, [pc, #152]	; (8002498 <MX_FREERTOS_Init+0xbc>)
 80023fe:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8002400:	4a26      	ldr	r2, [pc, #152]	; (800249c <MX_FREERTOS_Init+0xc0>)
 8002402:	2100      	movs	r1, #0
 8002404:	4826      	ldr	r0, [pc, #152]	; (80024a0 <MX_FREERTOS_Init+0xc4>)
 8002406:	f016 fa1d 	bl	8018844 <osThreadNew>
 800240a:	4603      	mov	r3, r0
 800240c:	4a25      	ldr	r2, [pc, #148]	; (80024a4 <MX_FREERTOS_Init+0xc8>)
 800240e:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8002410:	4a25      	ldr	r2, [pc, #148]	; (80024a8 <MX_FREERTOS_Init+0xcc>)
 8002412:	2100      	movs	r1, #0
 8002414:	4825      	ldr	r0, [pc, #148]	; (80024ac <MX_FREERTOS_Init+0xd0>)
 8002416:	f016 fa15 	bl	8018844 <osThreadNew>
 800241a:	4603      	mov	r3, r0
 800241c:	4a24      	ldr	r2, [pc, #144]	; (80024b0 <MX_FREERTOS_Init+0xd4>)
 800241e:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8002420:	4a24      	ldr	r2, [pc, #144]	; (80024b4 <MX_FREERTOS_Init+0xd8>)
 8002422:	2100      	movs	r1, #0
 8002424:	4824      	ldr	r0, [pc, #144]	; (80024b8 <MX_FREERTOS_Init+0xdc>)
 8002426:	f016 fa0d 	bl	8018844 <osThreadNew>
 800242a:	4603      	mov	r3, r0
 800242c:	4a23      	ldr	r2, [pc, #140]	; (80024bc <MX_FREERTOS_Init+0xe0>)
 800242e:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8002430:	4a23      	ldr	r2, [pc, #140]	; (80024c0 <MX_FREERTOS_Init+0xe4>)
 8002432:	2100      	movs	r1, #0
 8002434:	4823      	ldr	r0, [pc, #140]	; (80024c4 <MX_FREERTOS_Init+0xe8>)
 8002436:	f016 fa05 	bl	8018844 <osThreadNew>
 800243a:	4603      	mov	r3, r0
 800243c:	4a22      	ldr	r2, [pc, #136]	; (80024c8 <MX_FREERTOS_Init+0xec>)
 800243e:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8002440:	4a22      	ldr	r2, [pc, #136]	; (80024cc <MX_FREERTOS_Init+0xf0>)
 8002442:	2100      	movs	r1, #0
 8002444:	4822      	ldr	r0, [pc, #136]	; (80024d0 <MX_FREERTOS_Init+0xf4>)
 8002446:	f016 f9fd 	bl	8018844 <osThreadNew>
 800244a:	4603      	mov	r3, r0
 800244c:	4a21      	ldr	r2, [pc, #132]	; (80024d4 <MX_FREERTOS_Init+0xf8>)
 800244e:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8002450:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <MX_FREERTOS_Init+0xfc>)
 8002452:	2100      	movs	r1, #0
 8002454:	4821      	ldr	r0, [pc, #132]	; (80024dc <MX_FREERTOS_Init+0x100>)
 8002456:	f016 f9f5 	bl	8018844 <osThreadNew>
 800245a:	4603      	mov	r3, r0
 800245c:	4a20      	ldr	r2, [pc, #128]	; (80024e0 <MX_FREERTOS_Init+0x104>)
 800245e:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8002460:	4a20      	ldr	r2, [pc, #128]	; (80024e4 <MX_FREERTOS_Init+0x108>)
 8002462:	2100      	movs	r1, #0
 8002464:	4820      	ldr	r0, [pc, #128]	; (80024e8 <MX_FREERTOS_Init+0x10c>)
 8002466:	f016 f9ed 	bl	8018844 <osThreadNew>
 800246a:	4603      	mov	r3, r0
 800246c:	4a1f      	ldr	r2, [pc, #124]	; (80024ec <MX_FREERTOS_Init+0x110>)
 800246e:	6013      	str	r3, [r2, #0]

  /* creation of Sync_task */
  Sync_taskHandle = osThreadNew(Sync_init, NULL, &Sync_task_attributes);
 8002470:	4a1f      	ldr	r2, [pc, #124]	; (80024f0 <MX_FREERTOS_Init+0x114>)
 8002472:	2100      	movs	r1, #0
 8002474:	481f      	ldr	r0, [pc, #124]	; (80024f4 <MX_FREERTOS_Init+0x118>)
 8002476:	f016 f9e5 	bl	8018844 <osThreadNew>
 800247a:	4603      	mov	r3, r0
 800247c:	4a1e      	ldr	r2, [pc, #120]	; (80024f8 <MX_FREERTOS_Init+0x11c>)
 800247e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}
 8002484:	0801c314 	.word	0x0801c314
 8002488:	080024fd 	.word	0x080024fd
 800248c:	240003b4 	.word	0x240003b4
 8002490:	0801c338 	.word	0x0801c338
 8002494:	08002525 	.word	0x08002525
 8002498:	24000614 	.word	0x24000614
 800249c:	0801c35c 	.word	0x0801c35c
 80024a0:	0800254d 	.word	0x0800254d
 80024a4:	24000874 	.word	0x24000874
 80024a8:	0801c380 	.word	0x0801c380
 80024ac:	08002575 	.word	0x08002575
 80024b0:	24000ad4 	.word	0x24000ad4
 80024b4:	0801c3a4 	.word	0x0801c3a4
 80024b8:	080025ed 	.word	0x080025ed
 80024bc:	24000d34 	.word	0x24000d34
 80024c0:	0801c3c8 	.word	0x0801c3c8
 80024c4:	08002665 	.word	0x08002665
 80024c8:	24000f94 	.word	0x24000f94
 80024cc:	0801c3ec 	.word	0x0801c3ec
 80024d0:	080026d9 	.word	0x080026d9
 80024d4:	240011f4 	.word	0x240011f4
 80024d8:	0801c410 	.word	0x0801c410
 80024dc:	08002729 	.word	0x08002729
 80024e0:	24001454 	.word	0x24001454
 80024e4:	0801c434 	.word	0x0801c434
 80024e8:	08002835 	.word	0x08002835
 80024ec:	240016b4 	.word	0x240016b4
 80024f0:	0801c458 	.word	0x0801c458
 80024f4:	08002909 	.word	0x08002909
 80024f8:	24001914 	.word	0x24001914

080024fc <PMT_init>:
 * This function waits for PMT event flags, creates a PMT packet,
 * and yields control to other threads in an infinite loop.
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;)
	{
		osEventFlagsWait(packet_event_flags, PMT_FLAG, osFlagsWaitAny, osWaitForever);
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <PMT_init+0x24>)
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800250c:	2200      	movs	r2, #0
 800250e:	2101      	movs	r1, #1
 8002510:	f016 fb5c 	bl	8018bcc <osEventFlagsWait>

		create_pmt_packet();
 8002514:	f001 fca4 	bl	8003e60 <create_pmt_packet>

		osThreadYield();
 8002518:	f016 fa26 	bl	8018968 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG, osFlagsWaitAny, osWaitForever);
 800251c:	e7f2      	b.n	8002504 <PMT_init+0x8>
 800251e:	bf00      	nop
 8002520:	24001cc8 	.word	0x24001cc8

08002524 <ERPA_init>:
 * This function waits for ERPA event flags, creates an ERPA packet,
 * and yields control to other threads in an infinite loop.
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;)
	{
		osEventFlagsWait(packet_event_flags, ERPA_FLAG, osFlagsWaitAny, osWaitForever);
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <ERPA_init+0x24>)
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002534:	2200      	movs	r2, #0
 8002536:	2102      	movs	r1, #2
 8002538:	f016 fb48 	bl	8018bcc <osEventFlagsWait>

		create_erpa_packet();
 800253c:	f001 fcf6 	bl	8003f2c <create_erpa_packet>

		osThreadYield();
 8002540:	f016 fa12 	bl	8018968 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG, osFlagsWaitAny, osWaitForever);
 8002544:	e7f2      	b.n	800252c <ERPA_init+0x8>
 8002546:	bf00      	nop
 8002548:	24001cc8 	.word	0x24001cc8

0800254c <HK_init>:
 * This function waits for HK event flags, creates an HK packet,
 * and yields control to other threads in an infinite loop.
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;)
	{
		osEventFlagsWait(packet_event_flags, HK_FLAG, osFlagsWaitAny, osWaitForever);
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HK_init+0x24>)
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800255c:	2200      	movs	r2, #0
 800255e:	2104      	movs	r1, #4
 8002560:	f016 fb34 	bl	8018bcc <osEventFlagsWait>

		create_hk_packet();
 8002564:	f001 fd6a 	bl	800403c <create_hk_packet>

		osThreadYield();
 8002568:	f016 f9fe 	bl	8018968 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG, osFlagsWaitAny, osWaitForever);
 800256c:	e7f2      	b.n	8002554 <HK_init+0x8>
 800256e:	bf00      	nop
 8002570:	24001cc8 	.word	0x24001cc8

08002574 <AUTOINIT_init>:
 * from SDN1 to 15V, updates the rail monitor, and yields control to
 * other threads in an infinite loop.
 */
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;)
	{
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 800257c:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <AUTOINIT_init+0x70>)
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002584:	2200      	movs	r2, #0
 8002586:	2104      	movs	r1, #4
 8002588:	f016 fb20 	bl	8018bcc <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = GPIOS_INDEX_SDN1; i <= GPIOS_INDEX_15V; i++)
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	e012      	b.n	80025b8 <AUTOINIT_init+0x44>
		{
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002592:	4a15      	ldr	r2, [pc, #84]	; (80025e8 <AUTOINIT_init+0x74>)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800259a:	4a13      	ldr	r2, [pc, #76]	; (80025e8 <AUTOINIT_init+0x74>)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	889b      	ldrh	r3, [r3, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	4619      	mov	r1, r3
 80025a8:	f00a f8f8 	bl	800c79c <HAL_GPIO_WritePin>
			osDelay(PS_RAIL_DELAY);
 80025ac:	2064      	movs	r0, #100	; 0x64
 80025ae:	f016 fa3d 	bl	8018a2c <osDelay>
		for (int i = GPIOS_INDEX_SDN1; i <= GPIOS_INDEX_15V; i++)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	3301      	adds	r3, #1
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	dde9      	ble.n	8002592 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++)
 80025be:	2308      	movs	r3, #8
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	e008      	b.n	80025d6 <AUTOINIT_init+0x62>
		{
			set_rail_monitor_enable(i, ENABLED);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2101      	movs	r1, #1
 80025ca:	4618      	mov	r0, r3
 80025cc:	f004 f826 	bl	800661c <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	3301      	adds	r3, #1
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b0d      	cmp	r3, #13
 80025da:	ddf3      	ble.n	80025c4 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 80025dc:	f016 f9c4 	bl	8018968 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80025e0:	e7cc      	b.n	800257c <AUTOINIT_init+0x8>
 80025e2:	bf00      	nop
 80025e4:	24001ccc 	.word	0x24001ccc
 80025e8:	0801c47c 	.word	0x0801c47c

080025ec <AUTODEINIT_init>:
 * from 15V to SDN1, updates the rail monitor, and yields control to
 * other threads in an infinite loop.
 */
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;)
	{
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <AUTODEINIT_init+0x70>)
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025fc:	2200      	movs	r2, #0
 80025fe:	2108      	movs	r1, #8
 8002600:	f016 fae4 	bl	8018bcc <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--)
 8002604:	230d      	movs	r3, #13
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	e008      	b.n	800261c <AUTODEINIT_init+0x30>
		{
			set_rail_monitor_enable(i, DISABLED);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f004 f803 	bl	800661c <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3b01      	subs	r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b07      	cmp	r3, #7
 8002620:	dcf3      	bgt.n	800260a <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = GPIOS_INDEX_15V; i >= GPIOS_INDEX_SDN1; i--)
 8002622:	2306      	movs	r3, #6
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	e012      	b.n	800264e <AUTODEINIT_init+0x62>
		{
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002628:	4a0d      	ldr	r2, [pc, #52]	; (8002660 <AUTODEINIT_init+0x74>)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002630:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <AUTODEINIT_init+0x74>)
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	889b      	ldrh	r3, [r3, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	4619      	mov	r1, r3
 800263e:	f00a f8ad 	bl	800c79c <HAL_GPIO_WritePin>
			osDelay(PS_RAIL_DELAY);
 8002642:	2064      	movs	r0, #100	; 0x64
 8002644:	f016 f9f2 	bl	8018a2c <osDelay>
		for (int i = GPIOS_INDEX_15V; i >= GPIOS_INDEX_SDN1; i--)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	3b01      	subs	r3, #1
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	dae9      	bge.n	8002628 <AUTODEINIT_init+0x3c>
		}

		osThreadYield();
 8002654:	f016 f988 	bl	8018968 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002658:	e7cc      	b.n	80025f4 <AUTODEINIT_init+0x8>
 800265a:	bf00      	nop
 800265c:	24001ccc 	.word	0x24001ccc
 8002660:	0801c47c 	.word	0x0801c47c

08002664 <Voltage_Monitor_init>:
 * and checks rail status. If rails are out of bounds, it transitions to idle mode
 * before returning to science mode.
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	uint8_t rails_in_bound = 1;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG, osFlagsWaitAny, osWaitForever);
 8002670:	4b16      	ldr	r3, [pc, #88]	; (80026cc <Voltage_Monitor_init+0x68>)
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002678:	2200      	movs	r2, #0
 800267a:	2101      	movs	r1, #1
 800267c:	f016 faa6 	bl	8018bcc <osEventFlagsWait>
	  set_rail_monitor();
 8002680:	f003 ffe4 	bl	800664c <set_rail_monitor>
#ifdef ERROR_HANDLING_ENABLED
	  rails_in_bound = monitor_rails();
 8002684:	f004 f8c4 	bl	8006810 <monitor_rails>
 8002688:	4603      	mov	r3, r0
 800268a:	73fb      	strb	r3, [r7, #15]
	  if (!rails_in_bound && !IDLING)
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1ee      	bne.n	8002670 <Voltage_Monitor_init+0xc>
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <Voltage_Monitor_init+0x6c>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1e9      	bne.n	8002670 <Voltage_Monitor_init+0xc>
	  {
		  osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 800269c:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <Voltage_Monitor_init+0x70>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2102      	movs	r1, #2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f016 fa1c 	bl	8018ae0 <osEventFlagsSet>
		  while (!IDLING) {};
 80026a8:	bf00      	nop
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <Voltage_Monitor_init+0x6c>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0fa      	beq.n	80026aa <Voltage_Monitor_init+0x46>
		  osDelay(IDLE_TO_SCIENCE_DELAY);
 80026b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026b8:	f016 f9b8 	bl	8018a2c <osDelay>
		  osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <Voltage_Monitor_init+0x70>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2101      	movs	r1, #1
 80026c2:	4618      	mov	r0, r3
 80026c4:	f016 fa0c 	bl	8018ae0 <osEventFlagsSet>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG, osFlagsWaitAny, osWaitForever);
 80026c8:	e7d2      	b.n	8002670 <Voltage_Monitor_init+0xc>
 80026ca:	bf00      	nop
 80026cc:	24001ccc 	.word	0x24001ccc
 80026d0:	240000c4 	.word	0x240000c4
 80026d4:	24001cd0 	.word	0x24001cd0

080026d8 <STOP_init>:
 * This function waits for the STOP event flag, clears it, sets the IDLE flag,
 * and enters stop mode when idle.
 */
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <STOP_init+0x44>)
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026e8:	2200      	movs	r2, #0
 80026ea:	2102      	movs	r1, #2
 80026ec:	f016 fa6e 	bl	8018bcc <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80026f0:	4b0a      	ldr	r3, [pc, #40]	; (800271c <STOP_init+0x44>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2102      	movs	r1, #2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f016 fa36 	bl	8018b68 <osEventFlagsClear>

	  osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <STOP_init+0x48>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2102      	movs	r1, #2
 8002702:	4618      	mov	r0, r3
 8002704:	f016 f9ec 	bl	8018ae0 <osEventFlagsSet>
	  while (!IDLING) {};
 8002708:	bf00      	nop
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <STOP_init+0x4c>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0fa      	beq.n	800270a <STOP_init+0x32>

	  enter_stop();
 8002714:	f001 f94c 	bl	80039b0 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002718:	e7e2      	b.n	80026e0 <STOP_init+0x8>
 800271a:	bf00      	nop
 800271c:	24001ccc 	.word	0x24001ccc
 8002720:	24001cd0 	.word	0x24001cd0
 8002724:	240000c4 	.word	0x240000c4

08002728 <Science_init>:
 * updates the rail monitor, starts DAC in DMA mode, and resets packet
 * sequence numbers, transitioning to the science mode.
 */
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af02      	add	r7, sp, #8
 800272e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002730:	4b34      	ldr	r3, [pc, #208]	; (8002804 <Science_init+0xdc>)
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002738:	2200      	movs	r2, #0
 800273a:	2101      	movs	r1, #1
 800273c:	f016 fa46 	bl	8018bcc <osEventFlagsWait>
		osThreadSuspend(Voltage_MonitorHandle);
 8002740:	4b31      	ldr	r3, [pc, #196]	; (8002808 <Science_init+0xe0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f016 f92f 	bl	80189a8 <osThreadSuspend>
		IDLING = 0;
 800274a:	4b30      	ldr	r3, [pc, #192]	; (800280c <Science_init+0xe4>)
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]

		// Enabling all voltages
		for (int i = GPIOS_INDEX_SDN1; i <= GPIOS_INDEX_N800V; i++)
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	e012      	b.n	800277c <Science_init+0x54>
		{
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002756:	4a2e      	ldr	r2, [pc, #184]	; (8002810 <Science_init+0xe8>)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800275e:	4a2c      	ldr	r2, [pc, #176]	; (8002810 <Science_init+0xe8>)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4413      	add	r3, r2
 8002766:	889b      	ldrh	r3, [r3, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	4619      	mov	r1, r3
 800276c:	f00a f816 	bl	800c79c <HAL_GPIO_WritePin>
			osDelay(PS_RAIL_DELAY);
 8002770:	2064      	movs	r0, #100	; 0x64
 8002772:	f016 f95b 	bl	8018a2c <osDelay>
		for (int i = GPIOS_INDEX_SDN1; i <= GPIOS_INDEX_N800V; i++)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	3301      	adds	r3, #1
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b08      	cmp	r3, #8
 8002780:	dde9      	ble.n	8002756 <Science_init+0x2e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_busvmon; i <= RAIL_TMP1; i++)
 8002782:	2306      	movs	r3, #6
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	e008      	b.n	800279a <Science_init+0x72>
		{
			set_rail_monitor_enable(i, ENABLED);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2101      	movs	r1, #1
 800278e:	4618      	mov	r0, r3
 8002790:	f003 ff44 	bl	800661c <set_rail_monitor_enable>
		for (int i = RAIL_busvmon; i <= RAIL_TMP1; i++)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	3301      	adds	r3, #1
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b11      	cmp	r3, #17
 800279e:	ddf3      	ble.n	8002788 <Science_init+0x60>
		}
		osThreadResume(Voltage_MonitorHandle);
 80027a0:	4b19      	ldr	r3, [pc, #100]	; (8002808 <Science_init+0xe0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f016 f920 	bl	80189ea <osThreadResume>
  __ASM volatile ("cpsid i" : : : "memory");
 80027aa:	b672      	cpsid	i
}
 80027ac:	bf00      	nop

		__disable_irq();
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, DAC_OUT_ARRAY_SIZE, DAC_ALIGN_12B_R);
 80027ae:	2300      	movs	r3, #0
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	2320      	movs	r3, #32
 80027b4:	4a17      	ldr	r2, [pc, #92]	; (8002814 <Science_init+0xec>)
 80027b6:	2100      	movs	r1, #0
 80027b8:	4817      	ldr	r0, [pc, #92]	; (8002818 <Science_init+0xf0>)
 80027ba:	f005 ff75 	bl	80086a8 <HAL_DAC_Start_DMA>
		HK_ENABLED = ENABLED;
 80027be:	4b17      	ldr	r3, [pc, #92]	; (800281c <Science_init+0xf4>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = ENABLED;
 80027c4:	4b16      	ldr	r3, [pc, #88]	; (8002820 <Science_init+0xf8>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <Science_init+0xfc>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 80027d0:	f001 fde2 	bl	8004398 <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG);
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <Science_init+0x100>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2104      	movs	r1, #4
 80027da:	4618      	mov	r0, r3
 80027dc:	f016 f980 	bl	8018ae0 <osEventFlagsSet>
		TIM2->CCR4 = ERPA_PWM_FREQ;
 80027e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027e4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80027ea:	2100      	movs	r1, #0
 80027ec:	480f      	ldr	r0, [pc, #60]	; (800282c <Science_init+0x104>)
 80027ee:	f011 fc1b 	bl	8014028 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 80027f2:	b662      	cpsie	i
}
 80027f4:	bf00      	nop
		__enable_irq();
		HAL_TIM_Base_Start_IT(&htim4);
 80027f6:	480e      	ldr	r0, [pc, #56]	; (8002830 <Science_init+0x108>)
 80027f8:	f011 fb6e 	bl	8013ed8 <HAL_TIM_Base_Start_IT>

		osThreadYield();
 80027fc:	f016 f8b4 	bl	8018968 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002800:	e796      	b.n	8002730 <Science_init+0x8>
 8002802:	bf00      	nop
 8002804:	24001cd0 	.word	0x24001cd0
 8002808:	24000f94 	.word	0x24000f94
 800280c:	240000c4 	.word	0x240000c4
 8002810:	0801c47c 	.word	0x0801c47c
 8002814:	24000040 	.word	0x24000040
 8002818:	240002d4 	.word	0x240002d4
 800281c:	24001d14 	.word	0x24001d14
 8002820:	24001d15 	.word	0x24001d15
 8002824:	24001d18 	.word	0x24001d18
 8002828:	24001cc8 	.word	0x24001cc8
 800282c:	24002520 	.word	0x24002520
 8002830:	24002604 	.word	0x24002604

08002834 <Idle_init>:
 * stops the DAC, updates the rail monitor, disables all voltages,
 * and yields control to other threads.
 */
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 800283c:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <Idle_init+0xb4>)
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002844:	2200      	movs	r2, #0
 8002846:	2102      	movs	r1, #2
 8002848:	f016 f9c0 	bl	8018bcc <osEventFlagsWait>

		ERPA_ENABLED = DISABLED;
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <Idle_init+0xb8>)
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8002852:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002856:	2200      	movs	r2, #0
 8002858:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 800285a:	2100      	movs	r1, #0
 800285c:	4824      	ldr	r0, [pc, #144]	; (80028f0 <Idle_init+0xbc>)
 800285e:	f011 fd3d 	bl	80142dc <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = DISABLED;
 8002862:	4b24      	ldr	r3, [pc, #144]	; (80028f4 <Idle_init+0xc0>)
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8002868:	2100      	movs	r1, #0
 800286a:	4823      	ldr	r0, [pc, #140]	; (80028f8 <Idle_init+0xc4>)
 800286c:	f005 ffdc 	bl	8008828 <HAL_DAC_Stop_DMA>
		osThreadSuspend(Voltage_MonitorHandle);
 8002870:	4b22      	ldr	r3, [pc, #136]	; (80028fc <Idle_init+0xc8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f016 f897 	bl	80189a8 <osThreadSuspend>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--)
 800287a:	2311      	movs	r3, #17
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	e008      	b.n	8002892 <Idle_init+0x5e>
		{
			set_rail_monitor_enable(i, DISABLED);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2100      	movs	r1, #0
 8002886:	4618      	mov	r0, r3
 8002888:	f003 fec8 	bl	800661c <set_rail_monitor_enable>
		for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3b01      	subs	r3, #1
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b05      	cmp	r3, #5
 8002896:	dcf3      	bgt.n	8002880 <Idle_init+0x4c>
		}

		// Disabling all voltages
		for (int i = GPIOS_INDEX_N800V; i >= GPIOS_INDEX_SDN1; i--)
 8002898:	2308      	movs	r3, #8
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	e012      	b.n	80028c4 <Idle_init+0x90>
		{
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 800289e:	4a18      	ldr	r2, [pc, #96]	; (8002900 <Idle_init+0xcc>)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80028a6:	4a16      	ldr	r2, [pc, #88]	; (8002900 <Idle_init+0xcc>)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4413      	add	r3, r2
 80028ae:	889b      	ldrh	r3, [r3, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	4619      	mov	r1, r3
 80028b4:	f009 ff72 	bl	800c79c <HAL_GPIO_WritePin>
			osDelay(PS_RAIL_DELAY);
 80028b8:	2064      	movs	r0, #100	; 0x64
 80028ba:	f016 f8b7 	bl	8018a2c <osDelay>
		for (int i = GPIOS_INDEX_N800V; i >= GPIOS_INDEX_SDN1; i--)
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	dae9      	bge.n	800289e <Idle_init+0x6a>
		}
		osDelay(IDLE_TO_VOLTAGE_MONITOR_DELAY);
 80028ca:	f640 50ac 	movw	r0, #3500	; 0xdac
 80028ce:	f016 f8ad 	bl	8018a2c <osDelay>
		IDLING = 1;
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <Idle_init+0xd0>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	701a      	strb	r2, [r3, #0]
		osThreadResume(Voltage_MonitorHandle);
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <Idle_init+0xc8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f016 f884 	bl	80189ea <osThreadResume>

		// Yield thread control
		osThreadYield();
 80028e2:	f016 f841 	bl	8018968 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80028e6:	e7a9      	b.n	800283c <Idle_init+0x8>
 80028e8:	24001cd0 	.word	0x24001cd0
 80028ec:	24001d15 	.word	0x24001d15
 80028f0:	24002520 	.word	0x24002520
 80028f4:	24001d14 	.word	0x24001d14
 80028f8:	240002d4 	.word	0x240002d4
 80028fc:	24000f94 	.word	0x24000f94
 8002900:	0801c47c 	.word	0x0801c47c
 8002904:	240000c4 	.word	0x240000c4

08002908 <Sync_init>:
 * waits for a specific key value to be received, calibrates the RTC,
 * and handles UART communication for error counting and reset cause.
 */
/* USER CODE END Header_Sync_init */
void Sync_init(void *argument)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sync_init */
  /* Infinite loop */
  for(;;)
  {
	  	osEventFlagsWait(mode_event_flags, SYNC_FLAG, osFlagsWaitAny, osWaitForever);
 8002910:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <Sync_init+0x7c>)
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002918:	2200      	movs	r2, #0
 800291a:	2104      	movs	r1, #4
 800291c:	f016 f956 	bl	8018bcc <osEventFlagsWait>
	  	send_ACK();
 8002920:	f000 ffd2 	bl	80038c8 <send_ACK>

	  	uint8_t key;
	  	uint8_t key_index = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	75fb      	strb	r3, [r7, #23]
	  	uint8_t expected_key_value = 0xFF;
 8002928:	23ff      	movs	r3, #255	; 0xff
 800292a:	75bb      	strb	r3, [r7, #22]
	  	uint8_t rtc_buffer_size = 9;
 800292c:	2309      	movs	r3, #9
 800292e:	757b      	strb	r3, [r7, #21]
	  	ERROR_STRUCT reset_cause;

	  	// Wait for 0xFF to be received
	  	HAL_UART_AbortReceive(&huart1);
 8002930:	4815      	ldr	r0, [pc, #84]	; (8002988 <Sync_init+0x80>)
 8002932:	f013 f939 	bl	8015ba8 <HAL_UART_AbortReceive>
	  	do
	  	{
	  		HAL_UART_Receive(&huart1, UART_RX_BUFFER, rtc_buffer_size, UART_TIMEOUT_MS);
 8002936:	7d7b      	ldrb	r3, [r7, #21]
 8002938:	b29a      	uxth	r2, r3
 800293a:	2364      	movs	r3, #100	; 0x64
 800293c:	4913      	ldr	r1, [pc, #76]	; (800298c <Sync_init+0x84>)
 800293e:	4812      	ldr	r0, [pc, #72]	; (8002988 <Sync_init+0x80>)
 8002940:	f012 ff8a 	bl	8015858 <HAL_UART_Receive>
	  		key = UART_RX_BUFFER[key_index];
 8002944:	7dfb      	ldrb	r3, [r7, #23]
 8002946:	4a11      	ldr	r2, [pc, #68]	; (800298c <Sync_init+0x84>)
 8002948:	5cd3      	ldrb	r3, [r2, r3]
 800294a:	753b      	strb	r3, [r7, #20]
	  	} while (key != expected_key_value);
 800294c:	7d3a      	ldrb	r2, [r7, #20]
 800294e:	7dbb      	ldrb	r3, [r7, #22]
 8002950:	429a      	cmp	r2, r3
 8002952:	d1f0      	bne.n	8002936 <Sync_init+0x2e>

	  	calibrateRTC(UART_RX_BUFFER);
 8002954:	480d      	ldr	r0, [pc, #52]	; (800298c <Sync_init+0x84>)
 8002956:	f003 f9fd 	bl	8005d54 <calibrateRTC>
	  	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800295a:	2201      	movs	r2, #1
 800295c:	490b      	ldr	r1, [pc, #44]	; (800298c <Sync_init+0x84>)
 800295e:	480a      	ldr	r0, [pc, #40]	; (8002988 <Sync_init+0x80>)
 8002960:	f013 f8d6 	bl	8015b10 <HAL_UART_Receive_IT>
	  	osDelay(SYNC_DELAY);
 8002964:	200a      	movs	r0, #10
 8002966:	f016 f861 	bl	8018a2c <osDelay>
	  	reset_cause = get_reset_cause();
 800296a:	f107 030c 	add.w	r3, r7, #12
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fe26 	bl	80035c0 <get_reset_cause>
	  	create_sync_packet(reset_cause);
 8002974:	f107 030c 	add.w	r3, r7, #12
 8002978:	e893 0003 	ldmia.w	r3, {r0, r1}
 800297c:	f001 f8a4 	bl	8003ac8 <create_sync_packet>
  {
 8002980:	e7c6      	b.n	8002910 <Sync_init+0x8>
 8002982:	bf00      	nop
 8002984:	24001cd0 	.word	0x24001cd0
 8002988:	24002650 	.word	0x24002650
 800298c:	24001cd4 	.word	0x24001cd4

08002990 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a6:	4b34      	ldr	r3, [pc, #208]	; (8002a78 <MX_GPIO_Init+0xe8>)
 80029a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ac:	4a32      	ldr	r2, [pc, #200]	; (8002a78 <MX_GPIO_Init+0xe8>)
 80029ae:	f043 0304 	orr.w	r3, r3, #4
 80029b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029b6:	4b30      	ldr	r3, [pc, #192]	; (8002a78 <MX_GPIO_Init+0xe8>)
 80029b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029c4:	4b2c      	ldr	r3, [pc, #176]	; (8002a78 <MX_GPIO_Init+0xe8>)
 80029c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ca:	4a2b      	ldr	r2, [pc, #172]	; (8002a78 <MX_GPIO_Init+0xe8>)
 80029cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029d4:	4b28      	ldr	r3, [pc, #160]	; (8002a78 <MX_GPIO_Init+0xe8>)
 80029d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <MX_GPIO_Init+0xe8>)
 80029e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e8:	4a23      	ldr	r2, [pc, #140]	; (8002a78 <MX_GPIO_Init+0xe8>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029f2:	4b21      	ldr	r3, [pc, #132]	; (8002a78 <MX_GPIO_Init+0xe8>)
 80029f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a00:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <MX_GPIO_Init+0xe8>)
 8002a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a06:	4a1c      	ldr	r2, [pc, #112]	; (8002a78 <MX_GPIO_Init+0xe8>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a10:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <MX_GPIO_Init+0xe8>)
 8002a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	607b      	str	r3, [r7, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8002a24:	4815      	ldr	r0, [pc, #84]	; (8002a7c <MX_GPIO_Init+0xec>)
 8002a26:	f009 feb9 	bl	800c79c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2164      	movs	r1, #100	; 0x64
 8002a2e:	4814      	ldr	r0, [pc, #80]	; (8002a80 <MX_GPIO_Init+0xf0>)
 8002a30:	f009 feb4 	bl	800c79c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002a34:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8002a38:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	480b      	ldr	r0, [pc, #44]	; (8002a7c <MX_GPIO_Init+0xec>)
 8002a4e:	f009 fcdd 	bl	800c40c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002a52:	2364      	movs	r3, #100	; 0x64
 8002a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a56:	2301      	movs	r3, #1
 8002a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a62:	f107 0314 	add.w	r3, r7, #20
 8002a66:	4619      	mov	r1, r3
 8002a68:	4805      	ldr	r0, [pc, #20]	; (8002a80 <MX_GPIO_Init+0xf0>)
 8002a6a:	f009 fccf 	bl	800c40c <HAL_GPIO_Init>

}
 8002a6e:	bf00      	nop
 8002a70:	3728      	adds	r7, #40	; 0x28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	58024400 	.word	0x58024400
 8002a7c:	58020800 	.word	0x58020800
 8002a80:	58020400 	.word	0x58020400

08002a84 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a88:	4b1c      	ldr	r3, [pc, #112]	; (8002afc <MX_I2C1_Init+0x78>)
 8002a8a:	4a1d      	ldr	r2, [pc, #116]	; (8002b00 <MX_I2C1_Init+0x7c>)
 8002a8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <MX_I2C1_Init+0x78>)
 8002a90:	4a1c      	ldr	r2, [pc, #112]	; (8002b04 <MX_I2C1_Init+0x80>)
 8002a92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a94:	4b19      	ldr	r3, [pc, #100]	; (8002afc <MX_I2C1_Init+0x78>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a9a:	4b18      	ldr	r3, [pc, #96]	; (8002afc <MX_I2C1_Init+0x78>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aa0:	4b16      	ldr	r3, [pc, #88]	; (8002afc <MX_I2C1_Init+0x78>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002aa6:	4b15      	ldr	r3, [pc, #84]	; (8002afc <MX_I2C1_Init+0x78>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <MX_I2C1_Init+0x78>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ab2:	4b12      	ldr	r3, [pc, #72]	; (8002afc <MX_I2C1_Init+0x78>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ab8:	4b10      	ldr	r3, [pc, #64]	; (8002afc <MX_I2C1_Init+0x78>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002abe:	480f      	ldr	r0, [pc, #60]	; (8002afc <MX_I2C1_Init+0x78>)
 8002ac0:	f009 fe86 	bl	800c7d0 <HAL_I2C_Init>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002aca:	f000 ffed 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ace:	2100      	movs	r1, #0
 8002ad0:	480a      	ldr	r0, [pc, #40]	; (8002afc <MX_I2C1_Init+0x78>)
 8002ad2:	f00c f925 	bl	800ed20 <HAL_I2CEx_ConfigAnalogFilter>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002adc:	f000 ffe4 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4806      	ldr	r0, [pc, #24]	; (8002afc <MX_I2C1_Init+0x78>)
 8002ae4:	f00c f967 	bl	800edb6 <HAL_I2CEx_ConfigDigitalFilter>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002aee:	f000 ffdb 	bl	8003aa8 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002af2:	2001      	movs	r0, #1
 8002af4:	f00c f9ac 	bl	800ee50 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	24001b74 	.word	0x24001b74
 8002b00:	40005400 	.word	0x40005400
 8002b04:	00100517 	.word	0x00100517

08002b08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b0ba      	sub	sp, #232	; 0xe8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b20:	f107 0310 	add.w	r3, r7, #16
 8002b24:	22c0      	movs	r2, #192	; 0xc0
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f019 fb89 	bl	801c240 <memset>
  if(i2cHandle->Instance==I2C1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a5d      	ldr	r2, [pc, #372]	; (8002ca8 <HAL_I2C_MspInit+0x1a0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	f040 80b3 	bne.w	8002ca0 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b3a:	f04f 0208 	mov.w	r2, #8
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b4c:	f107 0310 	add.w	r3, r7, #16
 8002b50:	4618      	mov	r0, r3
 8002b52:	f00d fbab 	bl	80102ac <HAL_RCCEx_PeriphCLKConfig>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002b5c:	f000 ffa4 	bl	8003aa8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b60:	4b52      	ldr	r3, [pc, #328]	; (8002cac <HAL_I2C_MspInit+0x1a4>)
 8002b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b66:	4a51      	ldr	r2, [pc, #324]	; (8002cac <HAL_I2C_MspInit+0x1a4>)
 8002b68:	f043 0302 	orr.w	r3, r3, #2
 8002b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b70:	4b4e      	ldr	r3, [pc, #312]	; (8002cac <HAL_I2C_MspInit+0x1a4>)
 8002b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b86:	2312      	movs	r3, #18
 8002b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b98:	2304      	movs	r3, #4
 8002b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4842      	ldr	r0, [pc, #264]	; (8002cb0 <HAL_I2C_MspInit+0x1a8>)
 8002ba6:	f009 fc31 	bl	800c40c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002baa:	4b40      	ldr	r3, [pc, #256]	; (8002cac <HAL_I2C_MspInit+0x1a4>)
 8002bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bb0:	4a3e      	ldr	r2, [pc, #248]	; (8002cac <HAL_I2C_MspInit+0x1a4>)
 8002bb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bb6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bba:	4b3c      	ldr	r3, [pc, #240]	; (8002cac <HAL_I2C_MspInit+0x1a4>)
 8002bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002bc8:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <HAL_I2C_MspInit+0x1ac>)
 8002bca:	4a3b      	ldr	r2, [pc, #236]	; (8002cb8 <HAL_I2C_MspInit+0x1b0>)
 8002bcc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002bce:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <HAL_I2C_MspInit+0x1ac>)
 8002bd0:	2222      	movs	r2, #34	; 0x22
 8002bd2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bd4:	4b37      	ldr	r3, [pc, #220]	; (8002cb4 <HAL_I2C_MspInit+0x1ac>)
 8002bd6:	2240      	movs	r2, #64	; 0x40
 8002bd8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bda:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <HAL_I2C_MspInit+0x1ac>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002be0:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <HAL_I2C_MspInit+0x1ac>)
 8002be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002be6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002be8:	4b32      	ldr	r3, [pc, #200]	; (8002cb4 <HAL_I2C_MspInit+0x1ac>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bee:	4b31      	ldr	r3, [pc, #196]	; (8002cb4 <HAL_I2C_MspInit+0x1ac>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002bf4:	4b2f      	ldr	r3, [pc, #188]	; (8002cb4 <HAL_I2C_MspInit+0x1ac>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002bfa:	4b2e      	ldr	r3, [pc, #184]	; (8002cb4 <HAL_I2C_MspInit+0x1ac>)
 8002bfc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c00:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c02:	4b2c      	ldr	r3, [pc, #176]	; (8002cb4 <HAL_I2C_MspInit+0x1ac>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002c08:	482a      	ldr	r0, [pc, #168]	; (8002cb4 <HAL_I2C_MspInit+0x1ac>)
 8002c0a:	f006 f8d9 	bl	8008dc0 <HAL_DMA_Init>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002c14:	f000 ff48 	bl	8003aa8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a26      	ldr	r2, [pc, #152]	; (8002cb4 <HAL_I2C_MspInit+0x1ac>)
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38
 8002c1e:	4a25      	ldr	r2, [pc, #148]	; (8002cb4 <HAL_I2C_MspInit+0x1ac>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002c24:	4b25      	ldr	r3, [pc, #148]	; (8002cbc <HAL_I2C_MspInit+0x1b4>)
 8002c26:	4a26      	ldr	r2, [pc, #152]	; (8002cc0 <HAL_I2C_MspInit+0x1b8>)
 8002c28:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002c2a:	4b24      	ldr	r3, [pc, #144]	; (8002cbc <HAL_I2C_MspInit+0x1b4>)
 8002c2c:	2221      	movs	r2, #33	; 0x21
 8002c2e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c30:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <HAL_I2C_MspInit+0x1b4>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c36:	4b21      	ldr	r3, [pc, #132]	; (8002cbc <HAL_I2C_MspInit+0x1b4>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c3c:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <HAL_I2C_MspInit+0x1b4>)
 8002c3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c42:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c44:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <HAL_I2C_MspInit+0x1b4>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c4a:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <HAL_I2C_MspInit+0x1b4>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002c50:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <HAL_I2C_MspInit+0x1b4>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c56:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_I2C_MspInit+0x1b4>)
 8002c58:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c5c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c5e:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <HAL_I2C_MspInit+0x1b4>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002c64:	4815      	ldr	r0, [pc, #84]	; (8002cbc <HAL_I2C_MspInit+0x1b4>)
 8002c66:	f006 f8ab 	bl	8008dc0 <HAL_DMA_Init>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8002c70:	f000 ff1a 	bl	8003aa8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a11      	ldr	r2, [pc, #68]	; (8002cbc <HAL_I2C_MspInit+0x1b4>)
 8002c78:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c7a:	4a10      	ldr	r2, [pc, #64]	; (8002cbc <HAL_I2C_MspInit+0x1b4>)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002c80:	2200      	movs	r2, #0
 8002c82:	2105      	movs	r1, #5
 8002c84:	201f      	movs	r0, #31
 8002c86:	f005 fc6d 	bl	8008564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002c8a:	201f      	movs	r0, #31
 8002c8c:	f005 fc84 	bl	8008598 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002c90:	2200      	movs	r2, #0
 8002c92:	2105      	movs	r1, #5
 8002c94:	2020      	movs	r0, #32
 8002c96:	f005 fc65 	bl	8008564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002c9a:	2020      	movs	r0, #32
 8002c9c:	f005 fc7c 	bl	8008598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	37e8      	adds	r7, #232	; 0xe8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40005400 	.word	0x40005400
 8002cac:	58024400 	.word	0x58024400
 8002cb0:	58020400 	.word	0x58020400
 8002cb4:	24001bc8 	.word	0x24001bc8
 8002cb8:	400200a0 	.word	0x400200a0
 8002cbc:	24001c40 	.word	0x24001c40
 8002cc0:	400200b8 	.word	0x400200b8

08002cc4 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <MX_IWDG1_Init+0x34>)
 8002cca:	4a0c      	ldr	r2, [pc, #48]	; (8002cfc <MX_IWDG1_Init+0x38>)
 8002ccc:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_64;
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <MX_IWDG1_Init+0x34>)
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 2499;
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <MX_IWDG1_Init+0x34>)
 8002cd6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002cda:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 2499;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <MX_IWDG1_Init+0x34>)
 8002cde:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002ce2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8002ce4:	4804      	ldr	r0, [pc, #16]	; (8002cf8 <MX_IWDG1_Init+0x34>)
 8002ce6:	f00c f8d7 	bl	800ee98 <HAL_IWDG_Init>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8002cf0:	f000 feda 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8002cf4:	bf00      	nop
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	24001cb8 	.word	0x24001cb8
 8002cfc:	58004800 	.word	0x58004800

08002d00 <__NVIC_SystemReset>:
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002d04:	f3bf 8f4f 	dsb	sy
}
 8002d08:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002d0a:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <__NVIC_SystemReset+0x24>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002d12:	4904      	ldr	r1, [pc, #16]	; (8002d24 <__NVIC_SystemReset+0x24>)
 8002d14:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <__NVIC_SystemReset+0x28>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d1a:	f3bf 8f4f 	dsb	sy
}
 8002d1e:	bf00      	nop
    __NOP();
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <__NVIC_SystemReset+0x20>
 8002d24:	e000ed00 	.word	0xe000ed00
 8002d28:	05fa0004 	.word	0x05fa0004

08002d2c <HAL_FLASHEx_EccCorrectionCallback>:
/**
 * @brief Callback function for handling ECC correction in flash memory.
 *        Detects and handles single-bit flash ECC errors.
 */
void HAL_FLASHEx_EccCorrectionCallback()
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;
	error.category = EC_seu;
 8002d32:	2301      	movs	r3, #1
 8002d34:	703b      	strb	r3, [r7, #0]
	error.detail = ED_single_bit_error_flash;
 8002d36:	2318      	movs	r3, #24
 8002d38:	707b      	strb	r3, [r7, #1]
	handle_error(error);
 8002d3a:	463b      	mov	r3, r7
 8002d3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d40:	f7ff f8f6 	bl	8001f30 <handle_error>
}
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_FLASHEx_EccDetectionCallback>:
/**
 * @brief Callback function for handling ECC detection in flash memory.
 *        Detects and handles double-bit flash ECC errors.
 */
void HAL_FLASHEx_EccDetectionCallback()
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;
	error.category = EC_seu;
 8002d52:	2301      	movs	r3, #1
 8002d54:	703b      	strb	r3, [r7, #0]
	error.detail = ED_double_bit_error_flash;
 8002d56:	2319      	movs	r3, #25
 8002d58:	707b      	strb	r3, [r7, #1]
	handle_error(error);
 8002d5a:	463b      	mov	r3, r7
 8002d5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d60:	f7ff f8e6 	bl	8001f30 <handle_error>
}
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_TIM_OC_DelayElapsedCallback>:
 *        Sets event flags based on the triggered timer and manages housekeeping tasks.
 *
 * @param htim Pointer to the timer handle triggering the callback.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a1e      	ldr	r2, [pc, #120]	; (8002df0 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d106      	bne.n	8002d8a <HAL_TIM_OC_DelayElapsedCallback+0x1e>
	{
		osEventFlagsSet(packet_event_flags, PMT_FLAG);
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2101      	movs	r1, #1
 8002d82:	4618      	mov	r0, r3
 8002d84:	f015 feac 	bl	8018ae0 <osEventFlagsSet>
	}
	else
	{
		// Unknown timer interrupt
	}
}
 8002d88:	e02e      	b.n	8002de8 <HAL_TIM_OC_DelayElapsedCallback+0x7c>
	else if (htim == &htim2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a1a      	ldr	r2, [pc, #104]	; (8002df8 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d12a      	bne.n	8002de8 <HAL_TIM_OC_DelayElapsedCallback+0x7c>
		if (ERPA_ENABLED)
 8002d92:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG);
 8002d9c:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2102      	movs	r1, #2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f015 fe9c 	bl	8018ae0 <osEventFlagsSet>
		if (HK_100_ms_counter == HK_100MS_COUNTER_MAX)
 8002da8:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d113      	bne.n	8002dda <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG);
 8002db2:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2101      	movs	r1, #1
 8002db8:	4618      	mov	r0, r3
 8002dba:	f015 fe91 	bl	8018ae0 <osEventFlagsSet>
			if (HK_ENABLED)
 8002dbe:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG);
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	; (8002df4 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2104      	movs	r1, #4
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f015 fe86 	bl	8018ae0 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002de6:	701a      	strb	r2, [r3, #0]
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	24002520 	.word	0x24002520
 8002df4:	24001cc8 	.word	0x24001cc8
 8002df8:	2400256c 	.word	0x2400256c
 8002dfc:	24001d15 	.word	0x24001d15
 8002e00:	24001d1c 	.word	0x24001d1c
 8002e04:	24001ccc 	.word	0x24001ccc
 8002e08:	24001d14 	.word	0x24001d14

08002e0c <HAL_UART_RxCpltCallback>:
 *        Processes received commands to control GPIO pins and manage power rails.
 *
 * @param huart Pointer to the UART handle triggering the callback.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af02      	add	r7, sp, #8
 8002e12:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002e14:	2201      	movs	r2, #1
 8002e16:	49f8      	ldr	r1, [pc, #992]	; (80031f8 <HAL_UART_RxCpltCallback+0x3ec>)
 8002e18:	48f8      	ldr	r0, [pc, #992]	; (80031fc <HAL_UART_RxCpltCallback+0x3f0>)
 8002e1a:	f012 fe79 	bl	8015b10 <HAL_UART_Receive_IT>
	uint8_t key_index = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
	unsigned char key = UART_RX_BUFFER[key_index];
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	4af4      	ldr	r2, [pc, #976]	; (80031f8 <HAL_UART_RxCpltCallback+0x3ec>)
 8002e26:	5cd3      	ldrb	r3, [r2, r3]
 8002e28:	73bb      	strb	r3, [r7, #14]

	switch (key)
 8002e2a:	7bbb      	ldrb	r3, [r7, #14]
 8002e2c:	2bef      	cmp	r3, #239	; 0xef
 8002e2e:	f200 83b3 	bhi.w	8003598 <HAL_UART_RxCpltCallback+0x78c>
 8002e32:	a201      	add	r2, pc, #4	; (adr r2, 8002e38 <HAL_UART_RxCpltCallback+0x2c>)
 8002e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e38:	0800320f 	.word	0x0800320f
 8002e3c:	08003233 	.word	0x08003233
 8002e40:	08003297 	.word	0x08003297
 8002e44:	080032c5 	.word	0x080032c5
 8002e48:	080032f1 	.word	0x080032f1
 8002e4c:	0800331f 	.word	0x0800331f
 8002e50:	0800334f 	.word	0x0800334f
 8002e54:	0800337f 	.word	0x0800337f
 8002e58:	080033ad 	.word	0x080033ad
 8002e5c:	080033d5 	.word	0x080033d5
 8002e60:	080033fd 	.word	0x080033fd
 8002e64:	08003423 	.word	0x08003423
 8002e68:	08003441 	.word	0x08003441
 8002e6c:	08003485 	.word	0x08003485
 8002e70:	08003511 	.word	0x08003511
 8002e74:	08003533 	.word	0x08003533
 8002e78:	08003201 	.word	0x08003201
 8002e7c:	0800321d 	.word	0x0800321d
 8002e80:	0800327f 	.word	0x0800327f
 8002e84:	080032af 	.word	0x080032af
 8002e88:	080032db 	.word	0x080032db
 8002e8c:	08003307 	.word	0x08003307
 8002e90:	08003337 	.word	0x08003337
 8002e94:	08003367 	.word	0x08003367
 8002e98:	08003397 	.word	0x08003397
 8002e9c:	080033c3 	.word	0x080033c3
 8002ea0:	080033df 	.word	0x080033df
 8002ea4:	0800340d 	.word	0x0800340d
 8002ea8:	0800342d 	.word	0x0800342d
 8002eac:	08003449 	.word	0x08003449
 8002eb0:	080034c1 	.word	0x080034c1
 8002eb4:	08003593 	.word	0x08003593
 8002eb8:	08003599 	.word	0x08003599
 8002ebc:	08003599 	.word	0x08003599
 8002ec0:	08003599 	.word	0x08003599
 8002ec4:	08003599 	.word	0x08003599
 8002ec8:	08003599 	.word	0x08003599
 8002ecc:	08003599 	.word	0x08003599
 8002ed0:	08003599 	.word	0x08003599
 8002ed4:	08003599 	.word	0x08003599
 8002ed8:	08003599 	.word	0x08003599
 8002edc:	08003599 	.word	0x08003599
 8002ee0:	08003599 	.word	0x08003599
 8002ee4:	08003599 	.word	0x08003599
 8002ee8:	08003599 	.word	0x08003599
 8002eec:	08003599 	.word	0x08003599
 8002ef0:	08003599 	.word	0x08003599
 8002ef4:	08003599 	.word	0x08003599
 8002ef8:	08003599 	.word	0x08003599
 8002efc:	08003599 	.word	0x08003599
 8002f00:	08003599 	.word	0x08003599
 8002f04:	08003599 	.word	0x08003599
 8002f08:	08003599 	.word	0x08003599
 8002f0c:	08003599 	.word	0x08003599
 8002f10:	08003599 	.word	0x08003599
 8002f14:	08003599 	.word	0x08003599
 8002f18:	08003599 	.word	0x08003599
 8002f1c:	08003599 	.word	0x08003599
 8002f20:	08003599 	.word	0x08003599
 8002f24:	08003599 	.word	0x08003599
 8002f28:	08003599 	.word	0x08003599
 8002f2c:	08003599 	.word	0x08003599
 8002f30:	08003599 	.word	0x08003599
 8002f34:	08003599 	.word	0x08003599
 8002f38:	08003599 	.word	0x08003599
 8002f3c:	08003599 	.word	0x08003599
 8002f40:	08003599 	.word	0x08003599
 8002f44:	08003599 	.word	0x08003599
 8002f48:	08003599 	.word	0x08003599
 8002f4c:	08003599 	.word	0x08003599
 8002f50:	08003599 	.word	0x08003599
 8002f54:	08003599 	.word	0x08003599
 8002f58:	08003599 	.word	0x08003599
 8002f5c:	08003599 	.word	0x08003599
 8002f60:	08003599 	.word	0x08003599
 8002f64:	08003599 	.word	0x08003599
 8002f68:	08003599 	.word	0x08003599
 8002f6c:	08003599 	.word	0x08003599
 8002f70:	08003599 	.word	0x08003599
 8002f74:	08003599 	.word	0x08003599
 8002f78:	08003599 	.word	0x08003599
 8002f7c:	08003599 	.word	0x08003599
 8002f80:	08003599 	.word	0x08003599
 8002f84:	08003599 	.word	0x08003599
 8002f88:	08003599 	.word	0x08003599
 8002f8c:	08003599 	.word	0x08003599
 8002f90:	08003599 	.word	0x08003599
 8002f94:	08003599 	.word	0x08003599
 8002f98:	08003599 	.word	0x08003599
 8002f9c:	08003599 	.word	0x08003599
 8002fa0:	08003599 	.word	0x08003599
 8002fa4:	08003599 	.word	0x08003599
 8002fa8:	08003599 	.word	0x08003599
 8002fac:	08003599 	.word	0x08003599
 8002fb0:	08003599 	.word	0x08003599
 8002fb4:	08003599 	.word	0x08003599
 8002fb8:	08003599 	.word	0x08003599
 8002fbc:	08003599 	.word	0x08003599
 8002fc0:	08003599 	.word	0x08003599
 8002fc4:	08003599 	.word	0x08003599
 8002fc8:	08003599 	.word	0x08003599
 8002fcc:	08003599 	.word	0x08003599
 8002fd0:	08003599 	.word	0x08003599
 8002fd4:	08003599 	.word	0x08003599
 8002fd8:	08003599 	.word	0x08003599
 8002fdc:	08003599 	.word	0x08003599
 8002fe0:	08003599 	.word	0x08003599
 8002fe4:	08003599 	.word	0x08003599
 8002fe8:	08003599 	.word	0x08003599
 8002fec:	08003599 	.word	0x08003599
 8002ff0:	08003599 	.word	0x08003599
 8002ff4:	08003599 	.word	0x08003599
 8002ff8:	08003599 	.word	0x08003599
 8002ffc:	08003599 	.word	0x08003599
 8003000:	08003599 	.word	0x08003599
 8003004:	08003599 	.word	0x08003599
 8003008:	08003599 	.word	0x08003599
 800300c:	08003599 	.word	0x08003599
 8003010:	08003599 	.word	0x08003599
 8003014:	08003599 	.word	0x08003599
 8003018:	08003599 	.word	0x08003599
 800301c:	08003599 	.word	0x08003599
 8003020:	08003599 	.word	0x08003599
 8003024:	08003599 	.word	0x08003599
 8003028:	08003599 	.word	0x08003599
 800302c:	08003599 	.word	0x08003599
 8003030:	08003599 	.word	0x08003599
 8003034:	08003599 	.word	0x08003599
 8003038:	08003599 	.word	0x08003599
 800303c:	08003599 	.word	0x08003599
 8003040:	08003599 	.word	0x08003599
 8003044:	08003599 	.word	0x08003599
 8003048:	08003599 	.word	0x08003599
 800304c:	08003599 	.word	0x08003599
 8003050:	08003599 	.word	0x08003599
 8003054:	08003599 	.word	0x08003599
 8003058:	08003599 	.word	0x08003599
 800305c:	08003599 	.word	0x08003599
 8003060:	08003599 	.word	0x08003599
 8003064:	08003599 	.word	0x08003599
 8003068:	08003599 	.word	0x08003599
 800306c:	08003599 	.word	0x08003599
 8003070:	08003599 	.word	0x08003599
 8003074:	08003599 	.word	0x08003599
 8003078:	08003599 	.word	0x08003599
 800307c:	08003599 	.word	0x08003599
 8003080:	08003599 	.word	0x08003599
 8003084:	08003599 	.word	0x08003599
 8003088:	08003599 	.word	0x08003599
 800308c:	08003599 	.word	0x08003599
 8003090:	08003599 	.word	0x08003599
 8003094:	08003599 	.word	0x08003599
 8003098:	08003599 	.word	0x08003599
 800309c:	08003599 	.word	0x08003599
 80030a0:	08003599 	.word	0x08003599
 80030a4:	08003599 	.word	0x08003599
 80030a8:	08003599 	.word	0x08003599
 80030ac:	08003599 	.word	0x08003599
 80030b0:	08003599 	.word	0x08003599
 80030b4:	08003599 	.word	0x08003599
 80030b8:	08003599 	.word	0x08003599
 80030bc:	08003599 	.word	0x08003599
 80030c0:	08003599 	.word	0x08003599
 80030c4:	08003599 	.word	0x08003599
 80030c8:	08003599 	.word	0x08003599
 80030cc:	08003599 	.word	0x08003599
 80030d0:	08003599 	.word	0x08003599
 80030d4:	08003599 	.word	0x08003599
 80030d8:	08003599 	.word	0x08003599
 80030dc:	08003599 	.word	0x08003599
 80030e0:	08003599 	.word	0x08003599
 80030e4:	08003599 	.word	0x08003599
 80030e8:	08003599 	.word	0x08003599
 80030ec:	08003599 	.word	0x08003599
 80030f0:	08003599 	.word	0x08003599
 80030f4:	0800355d 	.word	0x0800355d
 80030f8:	08003599 	.word	0x08003599
 80030fc:	08003599 	.word	0x08003599
 8003100:	08003599 	.word	0x08003599
 8003104:	08003599 	.word	0x08003599
 8003108:	08003599 	.word	0x08003599
 800310c:	08003599 	.word	0x08003599
 8003110:	08003599 	.word	0x08003599
 8003114:	08003599 	.word	0x08003599
 8003118:	08003599 	.word	0x08003599
 800311c:	08003599 	.word	0x08003599
 8003120:	08003599 	.word	0x08003599
 8003124:	08003599 	.word	0x08003599
 8003128:	08003599 	.word	0x08003599
 800312c:	08003599 	.word	0x08003599
 8003130:	08003599 	.word	0x08003599
 8003134:	0800356b 	.word	0x0800356b
 8003138:	08003599 	.word	0x08003599
 800313c:	08003599 	.word	0x08003599
 8003140:	08003599 	.word	0x08003599
 8003144:	08003599 	.word	0x08003599
 8003148:	08003599 	.word	0x08003599
 800314c:	08003599 	.word	0x08003599
 8003150:	08003599 	.word	0x08003599
 8003154:	08003599 	.word	0x08003599
 8003158:	08003599 	.word	0x08003599
 800315c:	08003599 	.word	0x08003599
 8003160:	08003599 	.word	0x08003599
 8003164:	08003599 	.word	0x08003599
 8003168:	08003599 	.word	0x08003599
 800316c:	08003599 	.word	0x08003599
 8003170:	08003599 	.word	0x08003599
 8003174:	08003579 	.word	0x08003579
 8003178:	0800354f 	.word	0x0800354f
 800317c:	08003599 	.word	0x08003599
 8003180:	08003599 	.word	0x08003599
 8003184:	08003599 	.word	0x08003599
 8003188:	08003599 	.word	0x08003599
 800318c:	08003599 	.word	0x08003599
 8003190:	08003599 	.word	0x08003599
 8003194:	08003599 	.word	0x08003599
 8003198:	08003599 	.word	0x08003599
 800319c:	08003599 	.word	0x08003599
 80031a0:	08003599 	.word	0x08003599
 80031a4:	08003599 	.word	0x08003599
 80031a8:	08003599 	.word	0x08003599
 80031ac:	08003599 	.word	0x08003599
 80031b0:	08003599 	.word	0x08003599
 80031b4:	08003587 	.word	0x08003587
 80031b8:	08003541 	.word	0x08003541
 80031bc:	08003599 	.word	0x08003599
 80031c0:	08003599 	.word	0x08003599
 80031c4:	08003599 	.word	0x08003599
 80031c8:	08003599 	.word	0x08003599
 80031cc:	08003599 	.word	0x08003599
 80031d0:	08003599 	.word	0x08003599
 80031d4:	08003599 	.word	0x08003599
 80031d8:	08003599 	.word	0x08003599
 80031dc:	08003599 	.word	0x08003599
 80031e0:	08003599 	.word	0x08003599
 80031e4:	08003599 	.word	0x08003599
 80031e8:	08003599 	.word	0x08003599
 80031ec:	08003599 	.word	0x08003599
 80031f0:	08003599 	.word	0x08003599
 80031f4:	0800358d 	.word	0x0800358d
 80031f8:	24001cd4 	.word	0x24001cd4
 80031fc:	24002650 	.word	0x24002650
	{
	case CMD_SDN1_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_SDN1].gpio, gpios[GPIOS_INDEX_SDN1].pin, GPIO_PIN_SET);
 8003200:	4bb8      	ldr	r3, [pc, #736]	; (80034e4 <HAL_UART_RxCpltCallback+0x6d8>)
 8003202:	2104      	movs	r1, #4
 8003204:	2201      	movs	r2, #1
 8003206:	4618      	mov	r0, r3
 8003208:	f009 fac8 	bl	800c79c <HAL_GPIO_WritePin>
		break;
 800320c:	e1cd      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_SDN1_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_SDN1].gpio, gpios[GPIOS_INDEX_SDN1].pin, GPIO_PIN_RESET);
 800320e:	4bb5      	ldr	r3, [pc, #724]	; (80034e4 <HAL_UART_RxCpltCallback+0x6d8>)
 8003210:	2104      	movs	r1, #4
 8003212:	2200      	movs	r2, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f009 fac1 	bl	800c79c <HAL_GPIO_WritePin>
		break;
 800321a:	e1c6      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_SYS_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_SYS].gpio, gpios[GPIOS_INDEX_SYS].pin, GPIO_PIN_SET);
 800321c:	4bb1      	ldr	r3, [pc, #708]	; (80034e4 <HAL_UART_RxCpltCallback+0x6d8>)
 800321e:	2120      	movs	r1, #32
 8003220:	2201      	movs	r2, #1
 8003222:	4618      	mov	r0, r3
 8003224:	f009 faba 	bl	800c79c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, ENABLED);
 8003228:	2101      	movs	r1, #1
 800322a:	2008      	movs	r0, #8
 800322c:	f003 f9f6 	bl	800661c <set_rail_monitor_enable>
		break;
 8003230:	e1bb      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_SYS_OFF:
	{
		for (int i = GPIOS_INDEX_N800V; i > GPIOS_INDEX_SDN1; i--)
 8003232:	2308      	movs	r3, #8
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	e00f      	b.n	8003258 <HAL_UART_RxCpltCallback+0x44c>
		{
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8003238:	4aab      	ldr	r2, [pc, #684]	; (80034e8 <HAL_UART_RxCpltCallback+0x6dc>)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003240:	4aa9      	ldr	r2, [pc, #676]	; (80034e8 <HAL_UART_RxCpltCallback+0x6dc>)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	889b      	ldrh	r3, [r3, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	4619      	mov	r1, r3
 800324e:	f009 faa5 	bl	800c79c <HAL_GPIO_WritePin>
		for (int i = GPIOS_INDEX_N800V; i > GPIOS_INDEX_SDN1; i--)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	3b01      	subs	r3, #1
 8003256:	617b      	str	r3, [r7, #20]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b00      	cmp	r3, #0
 800325c:	dcec      	bgt.n	8003238 <HAL_UART_RxCpltCallback+0x42c>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--)
 800325e:	2310      	movs	r3, #16
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	e008      	b.n	8003276 <HAL_UART_RxCpltCallback+0x46a>
		{
			set_rail_monitor_enable(i, DISABLED);
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2100      	movs	r1, #0
 800326a:	4618      	mov	r0, r3
 800326c:	f003 f9d6 	bl	800661c <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	3b01      	subs	r3, #1
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	2b07      	cmp	r3, #7
 800327a:	dcf3      	bgt.n	8003264 <HAL_UART_RxCpltCallback+0x458>
		}
		break;
 800327c:	e195      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_3V3_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_3V3].gpio, gpios[GPIOS_INDEX_3V3].pin, GPIO_PIN_SET);
 800327e:	4b9b      	ldr	r3, [pc, #620]	; (80034ec <HAL_UART_RxCpltCallback+0x6e0>)
 8003280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003284:	2201      	movs	r2, #1
 8003286:	4618      	mov	r0, r3
 8003288:	f009 fa88 	bl	800c79c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, ENABLED);
 800328c:	2101      	movs	r1, #1
 800328e:	2009      	movs	r0, #9
 8003290:	f003 f9c4 	bl	800661c <set_rail_monitor_enable>
		break;
 8003294:	e189      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_3V3_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_3V3].gpio, gpios[GPIOS_INDEX_3V3].pin, GPIO_PIN_RESET);
 8003296:	4b95      	ldr	r3, [pc, #596]	; (80034ec <HAL_UART_RxCpltCallback+0x6e0>)
 8003298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800329c:	2200      	movs	r2, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f009 fa7c 	bl	800c79c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, DISABLED);
 80032a4:	2100      	movs	r1, #0
 80032a6:	2009      	movs	r0, #9
 80032a8:	f003 f9b8 	bl	800661c <set_rail_monitor_enable>
		break;
 80032ac:	e17d      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_5V_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_5V].gpio, gpios[GPIOS_INDEX_5V].pin, GPIO_PIN_SET);
 80032ae:	4b8f      	ldr	r3, [pc, #572]	; (80034ec <HAL_UART_RxCpltCallback+0x6e0>)
 80032b0:	2180      	movs	r1, #128	; 0x80
 80032b2:	2201      	movs	r2, #1
 80032b4:	4618      	mov	r0, r3
 80032b6:	f009 fa71 	bl	800c79c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, ENABLED);
 80032ba:	2101      	movs	r1, #1
 80032bc:	200a      	movs	r0, #10
 80032be:	f003 f9ad 	bl	800661c <set_rail_monitor_enable>
		break;
 80032c2:	e172      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_5V_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_5V].gpio, gpios[GPIOS_INDEX_5V].pin, GPIO_PIN_RESET);
 80032c4:	4b89      	ldr	r3, [pc, #548]	; (80034ec <HAL_UART_RxCpltCallback+0x6e0>)
 80032c6:	2180      	movs	r1, #128	; 0x80
 80032c8:	2200      	movs	r2, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f009 fa66 	bl	800c79c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, DISABLED);
 80032d0:	2100      	movs	r1, #0
 80032d2:	200a      	movs	r0, #10
 80032d4:	f003 f9a2 	bl	800661c <set_rail_monitor_enable>
		break;
 80032d8:	e167      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_N3V3_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N3V3].gpio, gpios[GPIOS_INDEX_N3V3].pin, GPIO_PIN_SET);
 80032da:	4b84      	ldr	r3, [pc, #528]	; (80034ec <HAL_UART_RxCpltCallback+0x6e0>)
 80032dc:	2140      	movs	r1, #64	; 0x40
 80032de:	2201      	movs	r2, #1
 80032e0:	4618      	mov	r0, r3
 80032e2:	f009 fa5b 	bl	800c79c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, ENABLED);
 80032e6:	2101      	movs	r1, #1
 80032e8:	200b      	movs	r0, #11
 80032ea:	f003 f997 	bl	800661c <set_rail_monitor_enable>
		break;
 80032ee:	e15c      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_N3V3_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N3V3].gpio, gpios[GPIOS_INDEX_N3V3].pin, GPIO_PIN_RESET);
 80032f0:	4b7e      	ldr	r3, [pc, #504]	; (80034ec <HAL_UART_RxCpltCallback+0x6e0>)
 80032f2:	2140      	movs	r1, #64	; 0x40
 80032f4:	2200      	movs	r2, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f009 fa50 	bl	800c79c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, DISABLED);
 80032fc:	2100      	movs	r1, #0
 80032fe:	200b      	movs	r0, #11
 8003300:	f003 f98c 	bl	800661c <set_rail_monitor_enable>
		break;
 8003304:	e151      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_N5V_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N5V].gpio, gpios[GPIOS_INDEX_N5V].pin, GPIO_PIN_SET);
 8003306:	4b79      	ldr	r3, [pc, #484]	; (80034ec <HAL_UART_RxCpltCallback+0x6e0>)
 8003308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800330c:	2201      	movs	r2, #1
 800330e:	4618      	mov	r0, r3
 8003310:	f009 fa44 	bl	800c79c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, ENABLED);
 8003314:	2101      	movs	r1, #1
 8003316:	200c      	movs	r0, #12
 8003318:	f003 f980 	bl	800661c <set_rail_monitor_enable>
		break;
 800331c:	e145      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_N5V_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N5V].gpio, gpios[GPIOS_INDEX_N5V].pin, GPIO_PIN_RESET);
 800331e:	4b73      	ldr	r3, [pc, #460]	; (80034ec <HAL_UART_RxCpltCallback+0x6e0>)
 8003320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003324:	2200      	movs	r2, #0
 8003326:	4618      	mov	r0, r3
 8003328:	f009 fa38 	bl	800c79c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, DISABLED);
 800332c:	2100      	movs	r1, #0
 800332e:	200c      	movs	r0, #12
 8003330:	f003 f974 	bl	800661c <set_rail_monitor_enable>
		break;
 8003334:	e139      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_15V_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_15V].gpio, gpios[GPIOS_INDEX_15V].pin, GPIO_PIN_SET);
 8003336:	4b6d      	ldr	r3, [pc, #436]	; (80034ec <HAL_UART_RxCpltCallback+0x6e0>)
 8003338:	f44f 7100 	mov.w	r1, #512	; 0x200
 800333c:	2201      	movs	r2, #1
 800333e:	4618      	mov	r0, r3
 8003340:	f009 fa2c 	bl	800c79c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, ENABLED);
 8003344:	2101      	movs	r1, #1
 8003346:	200d      	movs	r0, #13
 8003348:	f003 f968 	bl	800661c <set_rail_monitor_enable>
		break;
 800334c:	e12d      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_15V_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_15V].gpio, gpios[GPIOS_INDEX_15V].pin, GPIO_PIN_RESET);
 800334e:	4b67      	ldr	r3, [pc, #412]	; (80034ec <HAL_UART_RxCpltCallback+0x6e0>)
 8003350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003354:	2200      	movs	r2, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f009 fa20 	bl	800c79c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, DISABLED);
 800335c:	2100      	movs	r1, #0
 800335e:	200d      	movs	r0, #13
 8003360:	f003 f95c 	bl	800661c <set_rail_monitor_enable>
		break;
 8003364:	e121      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_N200V_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N200V].gpio, gpios[GPIOS_INDEX_N200V].pin, GPIO_PIN_SET);
 8003366:	4b61      	ldr	r3, [pc, #388]	; (80034ec <HAL_UART_RxCpltCallback+0x6e0>)
 8003368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800336c:	2201      	movs	r2, #1
 800336e:	4618      	mov	r0, r3
 8003370:	f009 fa14 	bl	800c79c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, ENABLED);
 8003374:	2101      	movs	r1, #1
 8003376:	200f      	movs	r0, #15
 8003378:	f003 f950 	bl	800661c <set_rail_monitor_enable>
		break;
 800337c:	e115      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_N200V_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N200V].gpio, gpios[GPIOS_INDEX_N200V].pin, GPIO_PIN_RESET);
 800337e:	4b5b      	ldr	r3, [pc, #364]	; (80034ec <HAL_UART_RxCpltCallback+0x6e0>)
 8003380:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003384:	2200      	movs	r2, #0
 8003386:	4618      	mov	r0, r3
 8003388:	f009 fa08 	bl	800c79c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, DISABLED);
 800338c:	2100      	movs	r1, #0
 800338e:	200f      	movs	r0, #15
 8003390:	f003 f944 	bl	800661c <set_rail_monitor_enable>
		break;
 8003394:	e109      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_N800V_ON:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N800V].gpio, gpios[GPIOS_INDEX_N800V].pin, GPIO_PIN_SET);
 8003396:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <HAL_UART_RxCpltCallback+0x6d8>)
 8003398:	2140      	movs	r1, #64	; 0x40
 800339a:	2201      	movs	r2, #1
 800339c:	4618      	mov	r0, r3
 800339e:	f009 f9fd 	bl	800c79c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, ENABLED);
 80033a2:	2101      	movs	r1, #1
 80033a4:	2010      	movs	r0, #16
 80033a6:	f003 f939 	bl	800661c <set_rail_monitor_enable>
		break;
 80033aa:	e0fe      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_N800V_OFF:
	{
		HAL_GPIO_WritePin(gpios[GPIOS_INDEX_N800V].gpio, gpios[GPIOS_INDEX_N800V].pin, GPIO_PIN_RESET);
 80033ac:	4b4d      	ldr	r3, [pc, #308]	; (80034e4 <HAL_UART_RxCpltCallback+0x6d8>)
 80033ae:	2140      	movs	r1, #64	; 0x40
 80033b0:	2200      	movs	r2, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f009 f9f2 	bl	800c79c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, DISABLED);
 80033b8:	2100      	movs	r1, #0
 80033ba:	2010      	movs	r0, #16
 80033bc:	f003 f92e 	bl	800661c <set_rail_monitor_enable>
		break;
 80033c0:	e0f3      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_AUTOSWEEP_ON:
	{
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, DAC_OUT_ARRAY_SIZE, DAC_ALIGN_12B_R);
 80033c2:	2300      	movs	r3, #0
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	2320      	movs	r3, #32
 80033c8:	4a49      	ldr	r2, [pc, #292]	; (80034f0 <HAL_UART_RxCpltCallback+0x6e4>)
 80033ca:	2100      	movs	r1, #0
 80033cc:	4849      	ldr	r0, [pc, #292]	; (80034f4 <HAL_UART_RxCpltCallback+0x6e8>)
 80033ce:	f005 f96b 	bl	80086a8 <HAL_DAC_Start_DMA>
		break;
 80033d2:	e0ea      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_AUTOSWEEP_OFF:
	{
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80033d4:	2100      	movs	r1, #0
 80033d6:	4847      	ldr	r0, [pc, #284]	; (80034f4 <HAL_UART_RxCpltCallback+0x6e8>)
 80033d8:	f005 fa26 	bl	8008828 <HAL_DAC_Stop_DMA>
		break;
 80033dc:	e0e5      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_ERPA_ON:
	{
		osEventFlagsSet(packet_event_flags, ERPA_FLAG);
 80033de:	4b46      	ldr	r3, [pc, #280]	; (80034f8 <HAL_UART_RxCpltCallback+0x6ec>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2102      	movs	r1, #2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f015 fb7b 	bl	8018ae0 <osEventFlagsSet>
		TIM2->CCR4 = ERPA_PWM_FREQ;
 80033ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033ee:	f44f 729c 	mov.w	r2, #312	; 0x138
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = ENABLED;
 80033f4:	4b41      	ldr	r3, [pc, #260]	; (80034fc <HAL_UART_RxCpltCallback+0x6f0>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	701a      	strb	r2, [r3, #0]
		break;
 80033fa:	e0d6      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_ERPA_OFF:
	{
		ERPA_ENABLED = DISABLED;
 80033fc:	4b3f      	ldr	r3, [pc, #252]	; (80034fc <HAL_UART_RxCpltCallback+0x6f0>)
 80033fe:	2200      	movs	r2, #0
 8003400:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8003402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003406:	2200      	movs	r2, #0
 8003408:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800340a:	e0ce      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_PMT_ON:
	{
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 800340c:	2100      	movs	r1, #0
 800340e:	483c      	ldr	r0, [pc, #240]	; (8003500 <HAL_UART_RxCpltCallback+0x6f4>)
 8003410:	f010 fe0a 	bl	8014028 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG);
 8003414:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <HAL_UART_RxCpltCallback+0x6ec>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2101      	movs	r1, #1
 800341a:	4618      	mov	r0, r3
 800341c:	f015 fb60 	bl	8018ae0 <osEventFlagsSet>
		break;
 8003420:	e0c3      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_PMT_OFF:
	{
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8003422:	2100      	movs	r1, #0
 8003424:	4836      	ldr	r0, [pc, #216]	; (8003500 <HAL_UART_RxCpltCallback+0x6f4>)
 8003426:	f010 ff59 	bl	80142dc <HAL_TIM_OC_Stop_IT>
		break;
 800342a:	e0be      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_HK_ON:
	{
		osEventFlagsSet(packet_event_flags, HK_FLAG);
 800342c:	4b32      	ldr	r3, [pc, #200]	; (80034f8 <HAL_UART_RxCpltCallback+0x6ec>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2104      	movs	r1, #4
 8003432:	4618      	mov	r0, r3
 8003434:	f015 fb54 	bl	8018ae0 <osEventFlagsSet>
		HK_ENABLED = ENABLED;
 8003438:	4b32      	ldr	r3, [pc, #200]	; (8003504 <HAL_UART_RxCpltCallback+0x6f8>)
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
		break;
 800343e:	e0b4      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_HK_OFF:
	{
		HK_ENABLED = DISABLED;
 8003440:	4b30      	ldr	r3, [pc, #192]	; (8003504 <HAL_UART_RxCpltCallback+0x6f8>)
 8003442:	2200      	movs	r2, #0
 8003444:	701a      	strb	r2, [r3, #0]
		break;
 8003446:	e0b0      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_STEP_UP:
	{
		if (step < 14)
 8003448:	4b2f      	ldr	r3, [pc, #188]	; (8003508 <HAL_UART_RxCpltCallback+0x6fc>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b0d      	cmp	r3, #13
 8003450:	f200 80a4 	bhi.w	800359c <HAL_UART_RxCpltCallback+0x790>
		{
			step += 2;
 8003454:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <HAL_UART_RxCpltCallback+0x6fc>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	3302      	adds	r3, #2
 800345c:	b2da      	uxtb	r2, r3
 800345e:	4b2a      	ldr	r3, [pc, #168]	; (8003508 <HAL_UART_RxCpltCallback+0x6fc>)
 8003460:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8003462:	4b29      	ldr	r3, [pc, #164]	; (8003508 <HAL_UART_RxCpltCallback+0x6fc>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <HAL_UART_RxCpltCallback+0x6e4>)
 800346c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003470:	2200      	movs	r2, #0
 8003472:	2100      	movs	r1, #0
 8003474:	481f      	ldr	r0, [pc, #124]	; (80034f4 <HAL_UART_RxCpltCallback+0x6e8>)
 8003476:	f005 fa7a 	bl	800896e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800347a:	2100      	movs	r1, #0
 800347c:	481d      	ldr	r0, [pc, #116]	; (80034f4 <HAL_UART_RxCpltCallback+0x6e8>)
 800347e:	f005 f8bb 	bl	80085f8 <HAL_DAC_Start>
		}
		break;
 8003482:	e08b      	b.n	800359c <HAL_UART_RxCpltCallback+0x790>
	}

	case CMD_STEP_DOWN:
	{
		if (step > 1)
 8003484:	4b20      	ldr	r3, [pc, #128]	; (8003508 <HAL_UART_RxCpltCallback+0x6fc>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b01      	cmp	r3, #1
 800348c:	f240 8088 	bls.w	80035a0 <HAL_UART_RxCpltCallback+0x794>
		{
			step -= 2;
 8003490:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_UART_RxCpltCallback+0x6fc>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	3b02      	subs	r3, #2
 8003498:	b2da      	uxtb	r2, r3
 800349a:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <HAL_UART_RxCpltCallback+0x6fc>)
 800349c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800349e:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <HAL_UART_RxCpltCallback+0x6fc>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <HAL_UART_RxCpltCallback+0x6e4>)
 80034a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ac:	2200      	movs	r2, #0
 80034ae:	2100      	movs	r1, #0
 80034b0:	4810      	ldr	r0, [pc, #64]	; (80034f4 <HAL_UART_RxCpltCallback+0x6e8>)
 80034b2:	f005 fa5c 	bl	800896e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80034b6:	2100      	movs	r1, #0
 80034b8:	480e      	ldr	r0, [pc, #56]	; (80034f4 <HAL_UART_RxCpltCallback+0x6e8>)
 80034ba:	f005 f89d 	bl	80085f8 <HAL_DAC_Start>
		}
		break;
 80034be:	e06f      	b.n	80035a0 <HAL_UART_RxCpltCallback+0x794>
	}

	case CMD_FACTOR_UP:
	{
		if (cadence <= 50000)
 80034c0:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_UART_RxCpltCallback+0x700>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d86b      	bhi.n	80035a4 <HAL_UART_RxCpltCallback+0x798>
		{
			cadence *= 2;
 80034cc:	4b0f      	ldr	r3, [pc, #60]	; (800350c <HAL_UART_RxCpltCallback+0x700>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4a0e      	ldr	r2, [pc, #56]	; (800350c <HAL_UART_RxCpltCallback+0x700>)
 80034d4:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80034d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034da:	4b0c      	ldr	r3, [pc, #48]	; (800350c <HAL_UART_RxCpltCallback+0x700>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80034e0:	e060      	b.n	80035a4 <HAL_UART_RxCpltCallback+0x798>
 80034e2:	bf00      	nop
 80034e4:	58020400 	.word	0x58020400
 80034e8:	0801c47c 	.word	0x0801c47c
 80034ec:	58020800 	.word	0x58020800
 80034f0:	24000040 	.word	0x24000040
 80034f4:	240002d4 	.word	0x240002d4
 80034f8:	24001cc8 	.word	0x24001cc8
 80034fc:	24001d15 	.word	0x24001d15
 8003500:	24002520 	.word	0x24002520
 8003504:	24001d14 	.word	0x24001d14
 8003508:	24001d16 	.word	0x24001d16
 800350c:	240000c0 	.word	0x240000c0
	}

	case CMD_FACTOR_DOWN:
	{
		if (cadence >= 6250)
 8003510:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <HAL_UART_RxCpltCallback+0x7a8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f641 0269 	movw	r2, #6249	; 0x1869
 8003518:	4293      	cmp	r3, r2
 800351a:	d945      	bls.n	80035a8 <HAL_UART_RxCpltCallback+0x79c>
		{
			cadence /= 2;
 800351c:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <HAL_UART_RxCpltCallback+0x7a8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	4a24      	ldr	r2, [pc, #144]	; (80035b4 <HAL_UART_RxCpltCallback+0x7a8>)
 8003524:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8003526:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800352a:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <HAL_UART_RxCpltCallback+0x7a8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8003530:	e03a      	b.n	80035a8 <HAL_UART_RxCpltCallback+0x79c>
	}

	case CMD_ENTER_STOP:
	{
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8003532:	4b21      	ldr	r3, [pc, #132]	; (80035b8 <HAL_UART_RxCpltCallback+0x7ac>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2102      	movs	r1, #2
 8003538:	4618      	mov	r0, r3
 800353a:	f015 fad1 	bl	8018ae0 <osEventFlagsSet>
		break;
 800353e:	e034      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_AUTO_INIT:
	{
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8003540:	4b1d      	ldr	r3, [pc, #116]	; (80035b8 <HAL_UART_RxCpltCallback+0x7ac>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2104      	movs	r1, #4
 8003546:	4618      	mov	r0, r3
 8003548:	f015 faca 	bl	8018ae0 <osEventFlagsSet>
		break;
 800354c:	e02d      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_AUTO_DEINIT:
	{
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 800354e:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <HAL_UART_RxCpltCallback+0x7ac>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2108      	movs	r1, #8
 8003554:	4618      	mov	r0, r3
 8003556:	f015 fac3 	bl	8018ae0 <osEventFlagsSet>
		break;
 800355a:	e026      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_SYNC_MODE:
	{
		osEventFlagsSet(mode_event_flags, SYNC_FLAG);
 800355c:	4b17      	ldr	r3, [pc, #92]	; (80035bc <HAL_UART_RxCpltCallback+0x7b0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2104      	movs	r1, #4
 8003562:	4618      	mov	r0, r3
 8003564:	f015 fabc 	bl	8018ae0 <osEventFlagsSet>
		break;
 8003568:	e01f      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_SCIENCE_MODE:
	{
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <HAL_UART_RxCpltCallback+0x7b0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2101      	movs	r1, #1
 8003570:	4618      	mov	r0, r3
 8003572:	f015 fab5 	bl	8018ae0 <osEventFlagsSet>
		break;
 8003576:	e018      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_IDLE_MODE:
	{
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8003578:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_UART_RxCpltCallback+0x7b0>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2102      	movs	r1, #2
 800357e:	4618      	mov	r0, r3
 8003580:	f015 faae 	bl	8018ae0 <osEventFlagsSet>
		break;
 8003584:	e011      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_RESET_ERROR_COUNTERS:
	{
		reset_error_counters();
 8003586:	f7fe fdc1 	bl	800210c <reset_error_counters>
		break;
 800358a:	e00e      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_SEND_PREVIOUS_ERROR:
	{
#ifdef ERROR_HANDLING_ENABLED
		send_previous_error_packet();
 800358c:	f7fe fe36 	bl	80021fc <send_previous_error_packet>
#endif
		break;
 8003590:	e00b      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	case CMD_SEND_VERSION_PACKET:
	{
		create_version_packet();
 8003592:	f000 fc47 	bl	8003e24 <create_version_packet>
		break;
 8003596:	e008      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
	}

	default:
	{
		// Unknown command
		break;
 8003598:	bf00      	nop
 800359a:	e006      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
		break;
 800359c:	bf00      	nop
 800359e:	e004      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
		break;
 80035a0:	bf00      	nop
 80035a2:	e002      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
		break;
 80035a4:	bf00      	nop
 80035a6:	e000      	b.n	80035aa <HAL_UART_RxCpltCallback+0x79e>
		break;
 80035a8:	bf00      	nop
	}
	}
}
 80035aa:	bf00      	nop
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	240000c0 	.word	0x240000c0
 80035b8:	24001ccc 	.word	0x24001ccc
 80035bc:	24001cd0 	.word	0x24001cd0

080035c0 <get_reset_cause>:
/**
 * @brief Retrieves and handles the cause of a system reset.
 *        Checks for watchdog and brownout reset conditions and reports errors.
 */
ERROR_STRUCT get_reset_cause()
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
	ERROR_STRUCT error;
	error.category = EC_UNDEFINED;
 80035c8:	2305      	movs	r3, #5
 80035ca:	723b      	strb	r3, [r7, #8]
	error.detail = ED_UNDEFINED;
 80035cc:	231c      	movs	r3, #28
 80035ce:	727b      	strb	r3, [r7, #9]

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDG1RST))
 80035d0:	4b24      	ldr	r3, [pc, #144]	; (8003664 <get_reset_cause+0xa4>)
 80035d2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80035d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d018      	beq.n	8003610 <get_reset_cause+0x50>
    {
        error.category = EC_watchdog;
 80035de:	2304      	movs	r3, #4
 80035e0:	723b      	strb	r3, [r7, #8]
        error.detail = ED_UNDEFINED;
 80035e2:	231c      	movs	r3, #28
 80035e4:	727b      	strb	r3, [r7, #9]
        __HAL_RCC_CLEAR_RESET_FLAGS();
 80035e6:	4b1f      	ldr	r3, [pc, #124]	; (8003664 <get_reset_cause+0xa4>)
 80035e8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80035ec:	4a1d      	ldr	r2, [pc, #116]	; (8003664 <get_reset_cause+0xa4>)
 80035ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f2:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        increment_error_counter(error);
 80035f6:	f107 0308 	add.w	r3, r7, #8
 80035fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035fe:	f7fe fd3f 	bl	8002080 <increment_error_counter>
        set_previous_error(error);
 8003602:	f107 0308 	add.w	r3, r7, #8
 8003606:	e893 0003 	ldmia.w	r3, {r0, r1}
 800360a:	f7fe fd9f 	bl	800214c <set_previous_error>
 800360e:	e01e      	b.n	800364e <get_reset_cause+0x8e>
    }

    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8003610:	4b14      	ldr	r3, [pc, #80]	; (8003664 <get_reset_cause+0xa4>)
 8003612:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d017      	beq.n	800364e <get_reset_cause+0x8e>
    {
        error.category = EC_brownout;
 800361e:	2303      	movs	r3, #3
 8003620:	723b      	strb	r3, [r7, #8]
        error.detail = ED_UNDEFINED;
 8003622:	231c      	movs	r3, #28
 8003624:	727b      	strb	r3, [r7, #9]
        __HAL_RCC_CLEAR_RESET_FLAGS();
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <get_reset_cause+0xa4>)
 8003628:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800362c:	4a0d      	ldr	r2, [pc, #52]	; (8003664 <get_reset_cause+0xa4>)
 800362e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003632:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        increment_error_counter(error);
 8003636:	f107 0308 	add.w	r3, r7, #8
 800363a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800363e:	f7fe fd1f 	bl	8002080 <increment_error_counter>
        set_previous_error(error);
 8003642:	f107 0308 	add.w	r3, r7, #8
 8003646:	e893 0003 	ldmia.w	r3, {r0, r1}
 800364a:	f7fe fd7f 	bl	800214c <set_previous_error>
    }

	return error;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	461a      	mov	r2, r3
 8003652:	f107 0308 	add.w	r3, r7, #8
 8003656:	cb03      	ldmia	r3!, {r0, r1}
 8003658:	6010      	str	r0, [r2, #0]
 800365a:	6051      	str	r1, [r2, #4]
}
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	58024400 	.word	0x58024400

08003668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800366c:	f003 fa30 	bl	8006ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003670:	f000 f82c 	bl	80036cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003674:	f000 f8ac 	bl	80037d0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003678:	f7ff f98a 	bl	8002990 <MX_GPIO_Init>
  MX_DMA_Init();
 800367c:	f7fd fb34 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003680:	f002 fc2a 	bl	8005ed8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003684:	f7ff f9fe 	bl	8002a84 <MX_I2C1_Init>
  MX_SPI2_Init();
 8003688:	f001 fab8 	bl	8004bfc <MX_SPI2_Init>
  MX_TIM2_Init();
 800368c:	f001 ffc4 	bl	8005618 <MX_TIM2_Init>
  MX_TIM1_Init();
 8003690:	f001 ff14 	bl	80054bc <MX_TIM1_Init>
  MX_ADC3_Init();
 8003694:	f7fd f8c8 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8003698:	f7fc ffa4 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 800369c:	f7fd fa70 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 80036a0:	f001 fa54 	bl	8004b4c <MX_SPI1_Init>
  MX_RTC_Init();
 80036a4:	f001 f82e 	bl	8004704 <MX_RTC_Init>
  MX_IWDG1_Init();
 80036a8:	f7ff fb0c 	bl	8002cc4 <MX_IWDG1_Init>
  MX_RAMECC_Init();
 80036ac:	f000 fee2 	bl	8004474 <MX_RAMECC_Init>
  MX_TIM3_Init();
 80036b0:	f002 f828 	bl	8005704 <MX_TIM3_Init>
  MX_TIM4_Init();
 80036b4:	f002 f876 	bl	80057a4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 80036b8:	f000 f8ba 	bl	8003830 <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80036bc:	f015 f878 	bl	80187b0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80036c0:	f7fe fe8c 	bl	80023dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80036c4:	f015 f898 	bl	80187f8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80036c8:	e7fe      	b.n	80036c8 <main+0x60>
	...

080036cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b09c      	sub	sp, #112	; 0x70
 80036d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036d6:	224c      	movs	r2, #76	; 0x4c
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f018 fdb0 	bl	801c240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036e0:	1d3b      	adds	r3, r7, #4
 80036e2:	2220      	movs	r2, #32
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f018 fdaa 	bl	801c240 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80036ec:	2002      	movs	r0, #2
 80036ee:	f00b fc6f 	bl	800efd0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80036f2:	2300      	movs	r3, #0
 80036f4:	603b      	str	r3, [r7, #0]
 80036f6:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <SystemClock_Config+0xfc>)
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	4a33      	ldr	r2, [pc, #204]	; (80037c8 <SystemClock_Config+0xfc>)
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003702:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <SystemClock_Config+0xfc>)
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	4b2f      	ldr	r3, [pc, #188]	; (80037cc <SystemClock_Config+0x100>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003714:	4a2d      	ldr	r2, [pc, #180]	; (80037cc <SystemClock_Config+0x100>)
 8003716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800371a:	6193      	str	r3, [r2, #24]
 800371c:	4b2b      	ldr	r3, [pc, #172]	; (80037cc <SystemClock_Config+0x100>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003724:	603b      	str	r3, [r7, #0]
 8003726:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003728:	bf00      	nop
 800372a:	4b28      	ldr	r3, [pc, #160]	; (80037cc <SystemClock_Config+0x100>)
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003736:	d1f8      	bne.n	800372a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8003738:	230b      	movs	r3, #11
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800373c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8003742:	2309      	movs	r3, #9
 8003744:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003746:	2340      	movs	r3, #64	; 0x40
 8003748:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800374a:	2301      	movs	r3, #1
 800374c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800374e:	2302      	movs	r3, #2
 8003750:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003752:	2302      	movs	r3, #2
 8003754:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003756:	2304      	movs	r3, #4
 8003758:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800375a:	2318      	movs	r3, #24
 800375c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800375e:	2302      	movs	r3, #2
 8003760:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003762:	2302      	movs	r3, #2
 8003764:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003766:	2302      	movs	r3, #2
 8003768:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800376a:	2308      	movs	r3, #8
 800376c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800376e:	2302      	movs	r3, #2
 8003770:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800377a:	4618      	mov	r0, r3
 800377c:	f00b fd6e 	bl	800f25c <HAL_RCC_OscConfig>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003786:	f000 f98f 	bl	8003aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800378a:	233f      	movs	r3, #63	; 0x3f
 800378c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800378e:	2303      	movs	r3, #3
 8003790:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003796:	2300      	movs	r3, #0
 8003798:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800379e:	2340      	movs	r3, #64	; 0x40
 80037a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80037a6:	2300      	movs	r3, #0
 80037a8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80037aa:	1d3b      	adds	r3, r7, #4
 80037ac:	2101      	movs	r1, #1
 80037ae:	4618      	mov	r0, r3
 80037b0:	f00c f9ae 	bl	800fb10 <HAL_RCC_ClockConfig>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80037ba:	f000 f975 	bl	8003aa8 <Error_Handler>
  }
}
 80037be:	bf00      	nop
 80037c0:	3770      	adds	r7, #112	; 0x70
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	58000400 	.word	0x58000400
 80037cc:	58024800 	.word	0x58024800

080037d0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b0b0      	sub	sp, #192	; 0xc0
 80037d4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037d6:	463b      	mov	r3, r7
 80037d8:	22c0      	movs	r2, #192	; 0xc0
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f018 fd2f 	bl	801c240 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80037e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80037ee:	2304      	movs	r3, #4
 80037f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80037f2:	2318      	movs	r3, #24
 80037f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 80037f6:	2308      	movs	r3, #8
 80037f8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80037fa:	2302      	movs	r3, #2
 80037fc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80037fe:	2302      	movs	r3, #2
 8003800:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003806:	2320      	movs	r3, #32
 8003808:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800380e:	2300      	movs	r3, #0
 8003810:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003814:	463b      	mov	r3, r7
 8003816:	4618      	mov	r0, r3
 8003818:	f00c fd48 	bl	80102ac <HAL_RCCEx_PeriphCLKConfig>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8003822:	f000 f941 	bl	8003aa8 <Error_Handler>
  }
}
 8003826:	bf00      	nop
 8003828:	37c0      	adds	r7, #192	; 0xc0
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <system_setup>:
/**
 * @brief Initializes the system and its components.
 *        Sets up error handling, event flags, timer, voltage monitoring, ADC, and UART reception.
 */
void system_setup()
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
#ifdef ERROR_HANDLING_ENABLED
	error_counter_init();
 8003834:	f7fe fbf4 	bl	8002020 <error_counter_init>
	init_flash_ecc();
 8003838:	f000 f8c6 	bl	80039c8 <init_flash_ecc>
#endif
	queue_init();
 800383c:	f000 fdc2 	bl	80043c4 <queue_init>

	packet_event_flags = osEventFlagsNew(NULL);
 8003840:	2000      	movs	r0, #0
 8003842:	f015 f90e 	bl	8018a62 <osEventFlagsNew>
 8003846:	4603      	mov	r3, r0
 8003848:	4a19      	ldr	r2, [pc, #100]	; (80038b0 <system_setup+0x80>)
 800384a:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL)
 800384c:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <system_setup+0x80>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <system_setup+0x28>
    {
        Error_Handler();
 8003854:	f000 f928 	bl	8003aa8 <Error_Handler>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8003858:	2000      	movs	r0, #0
 800385a:	f015 f902 	bl	8018a62 <osEventFlagsNew>
 800385e:	4603      	mov	r3, r0
 8003860:	4a14      	ldr	r2, [pc, #80]	; (80038b4 <system_setup+0x84>)
 8003862:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL)
 8003864:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <system_setup+0x84>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <system_setup+0x40>
    {
        Error_Handler();
 800386c:	f000 f91c 	bl	8003aa8 <Error_Handler>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8003870:	2000      	movs	r0, #0
 8003872:	f015 f8f6 	bl	8018a62 <osEventFlagsNew>
 8003876:	4603      	mov	r3, r0
 8003878:	4a0f      	ldr	r2, [pc, #60]	; (80038b8 <system_setup+0x88>)
 800387a:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL)
 800387c:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <system_setup+0x88>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <system_setup+0x58>
    {
        Error_Handler();
 8003884:	f000 f910 	bl	8003aa8 <Error_Handler>
    }

    TIM2->CCR4 = 0;
 8003888:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800388c:	2200      	movs	r2, #0
 800388e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8003890:	210c      	movs	r1, #12
 8003892:	480a      	ldr	r0, [pc, #40]	; (80038bc <system_setup+0x8c>)
 8003894:	f010 fbc8 	bl	8014028 <HAL_TIM_OC_Start_IT>

	voltage_monitor_init();
 8003898:	f002 fc28 	bl	80060ec <voltage_monitor_init>

	init_adc_dma();
 800389c:	f000 ffc4 	bl	8004828 <init_adc_dma>

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80038a0:	2201      	movs	r2, #1
 80038a2:	4907      	ldr	r1, [pc, #28]	; (80038c0 <system_setup+0x90>)
 80038a4:	4807      	ldr	r0, [pc, #28]	; (80038c4 <system_setup+0x94>)
 80038a6:	f012 f933 	bl	8015b10 <HAL_UART_Receive_IT>
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	24001cc8 	.word	0x24001cc8
 80038b4:	24001ccc 	.word	0x24001ccc
 80038b8:	24001cd0 	.word	0x24001cd0
 80038bc:	2400256c 	.word	0x2400256c
 80038c0:	24001cd4 	.word	0x24001cd4
 80038c4:	24002650 	.word	0x24002650

080038c8 <send_ACK>:
/**
 * @brief Sends an acknowledgment (ACK) over UART.
 *        Transmits a single byte indicating a successful operation.
 */
void send_ACK()
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <send_ACK+0x1c>)
 80038ce:	22ff      	movs	r2, #255	; 0xff
 80038d0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, UART_TIMEOUT_MS);
 80038d2:	2364      	movs	r3, #100	; 0x64
 80038d4:	2201      	movs	r2, #1
 80038d6:	4903      	ldr	r1, [pc, #12]	; (80038e4 <send_ACK+0x1c>)
 80038d8:	4803      	ldr	r0, [pc, #12]	; (80038e8 <send_ACK+0x20>)
 80038da:	f011 ff2f 	bl	801573c <HAL_UART_Transmit>
}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	24001d20 	.word	0x24001d20
 80038e8:	24002650 	.word	0x24002650

080038ec <get_current_step>:
 * @brief Retrieves the current step value based on the DAC output.
 *
 * @return The corresponding step value based on the DAC1 output, or -1 if out of range.
 */
STEP_VALUES get_current_step()
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 80038f2:	4b2e      	ldr	r3, [pc, #184]	; (80039ac <get_current_step+0xc0>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	607b      	str	r3, [r7, #4]

	switch (dac_value)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80038fe:	4293      	cmp	r3, r2
 8003900:	d04a      	beq.n	8003998 <get_current_step+0xac>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003908:	da48      	bge.n	800399c <get_current_step+0xb0>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003910:	4293      	cmp	r3, r2
 8003912:	d03f      	beq.n	8003994 <get_current_step+0xa8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f640 628b 	movw	r2, #3723	; 0xe8b
 800391a:	4293      	cmp	r3, r2
 800391c:	dc3e      	bgt.n	800399c <get_current_step+0xb0>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f640 421f 	movw	r2, #3103	; 0xc1f
 8003924:	4293      	cmp	r3, r2
 8003926:	d033      	beq.n	8003990 <get_current_step+0xa4>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 800392e:	da35      	bge.n	800399c <get_current_step+0xb0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003936:	4293      	cmp	r3, r2
 8003938:	d028      	beq.n	800398c <get_current_step+0xa0>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003940:	4293      	cmp	r3, r2
 8003942:	dc2b      	bgt.n	800399c <get_current_step+0xb0>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f240 7245 	movw	r2, #1861	; 0x745
 800394a:	4293      	cmp	r3, r2
 800394c:	d01c      	beq.n	8003988 <get_current_step+0x9c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f240 7245 	movw	r2, #1861	; 0x745
 8003954:	4293      	cmp	r3, r2
 8003956:	dc21      	bgt.n	800399c <get_current_step+0xb0>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800395e:	4293      	cmp	r3, r2
 8003960:	d010      	beq.n	8003984 <get_current_step+0x98>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003968:	4293      	cmp	r3, r2
 800396a:	dc17      	bgt.n	800399c <get_current_step+0xb0>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d004      	beq.n	800397c <get_current_step+0x90>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8003978:	d002      	beq.n	8003980 <get_current_step+0x94>
 800397a:	e00f      	b.n	800399c <get_current_step+0xb0>
	{
	case DAC_VALUE_0:
		return STEP_0;
 800397c:	2300      	movs	r3, #0
 800397e:	e00e      	b.n	800399e <get_current_step+0xb2>

	case DAC_VALUE_620:
		return STEP_1;
 8003980:	2301      	movs	r3, #1
 8003982:	e00c      	b.n	800399e <get_current_step+0xb2>

	case DAC_VALUE_1241:
		return STEP_2;
 8003984:	2302      	movs	r3, #2
 8003986:	e00a      	b.n	800399e <get_current_step+0xb2>

	case DAC_VALUE_1861:
		return STEP_3;
 8003988:	2303      	movs	r3, #3
 800398a:	e008      	b.n	800399e <get_current_step+0xb2>

	case DAC_VALUE_2482:
		return STEP_4;
 800398c:	2304      	movs	r3, #4
 800398e:	e006      	b.n	800399e <get_current_step+0xb2>

	case DAC_VALUE_3103:
		return STEP_5;
 8003990:	2305      	movs	r3, #5
 8003992:	e004      	b.n	800399e <get_current_step+0xb2>

	case DAC_VALUE_3723:
		return STEP_6;
 8003994:	2306      	movs	r3, #6
 8003996:	e002      	b.n	800399e <get_current_step+0xb2>

	case DAC_VALUE_4095:
		return STEP_7;
 8003998:	2307      	movs	r3, #7
 800399a:	e000      	b.n	800399e <get_current_step+0xb2>

	default:
		return INVALID_STEP;
 800399c:	23ff      	movs	r3, #255	; 0xff
	}
}
 800399e:	4618      	mov	r0, r3
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40007400 	.word	0x40007400

080039b0 <enter_stop>:
/**
 * @brief Enters low-power stop mode after sending an acknowledgment.
 *        Suspends all FreeRTOS tasks, enters stop mode, and resumes configuration upon wake-up.
 */
void enter_stop()
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
	  send_ACK();
 80039b4:	f7ff ff88 	bl	80038c8 <send_ACK>

	  vTaskSuspendAll();
 80039b8:	f016 fedc 	bl	801a774 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80039bc:	2101      	movs	r1, #1
 80039be:	2001      	movs	r0, #1
 80039c0:	f00b faca 	bl	800ef58 <HAL_PWR_EnterSTOPMode>

	  // MCU resumes here after waking from stop mode.

	  NVIC_SystemReset();
 80039c4:	f7ff f99c 	bl	8002d00 <__NVIC_SystemReset>

080039c8 <init_flash_ecc>:
/**
 * @brief Initializes Flash ECC (Error Correction Code) settings.
 *        Unlocks Flash memory, sets IRQ priority, and enables ECC correction and detection interrupts.
 */
void init_flash_ecc()
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 80039cc:	f008 faa6 	bl	800bf1c <HAL_FLASH_Unlock>

	HAL_NVIC_SetPriority(FLASH_IRQn, 15, 0);
 80039d0:	2200      	movs	r2, #0
 80039d2:	210f      	movs	r1, #15
 80039d4:	2004      	movs	r0, #4
 80039d6:	f004 fdc5 	bl	8008564 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80039da:	2004      	movs	r0, #4
 80039dc:	f004 fddc 	bl	8008598 <HAL_NVIC_EnableIRQ>
	HAL_FLASHEx_EnableEccCorrectionInterrupt();
 80039e0:	f008 fc3c 	bl	800c25c <HAL_FLASHEx_EnableEccCorrectionInterrupt>
	HAL_FLASHEx_EnableEccDetectionInterrupt();
 80039e4:	f008 fc52 	bl	800c28c <HAL_FLASHEx_EnableEccDetectionInterrupt>
}
 80039e8:	bf00      	nop
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ee:	b09f      	sub	sp, #124	; 0x7c
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	63f8      	str	r0, [r7, #60]	; 0x3c
  /* USER CODE BEGIN Callback 0 */
	HAL_IWDG_Refresh(&hiwdg1);
 80039f4:	4820      	ldr	r0, [pc, #128]	; (8003a78 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80039f6:	f00b fa9e 	bl	800ef36 <HAL_IWDG_Refresh>

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80039fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1f      	ldr	r2, [pc, #124]	; (8003a7c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d101      	bne.n	8003a08 <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_IncTick();
 8003a04:	f003 f8a0 	bl	8006b48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim == &htim3)
 8003a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a0a:	4a1d      	ldr	r2, [pc, #116]	; (8003a80 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d101      	bne.n	8003a14 <HAL_TIM_PeriodElapsedCallback+0x28>
  {
	NVIC_SystemReset();
 8003a10:	f7ff f976 	bl	8002d00 <__NVIC_SystemReset>
  }

  if (htim == &htim4)
 8003a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a16:	4a1b      	ldr	r2, [pc, #108]	; (8003a84 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d128      	bne.n	8003a6e <HAL_TIM_PeriodElapsedCallback+0x82>
  {
	  Packet_t packet;
	  	packet = dequeue();
 8003a1c:	463b      	mov	r3, r7
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fcf8 	bl	8004414 <dequeue>
 8003a24:	463c      	mov	r4, r7
 8003a26:	f107 0644 	add.w	r6, r7, #68	; 0x44
 8003a2a:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8003a2e:	4635      	mov	r5, r6
 8003a30:	4623      	mov	r3, r4
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	6859      	ldr	r1, [r3, #4]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a3c:	3410      	adds	r4, #16
 8003a3e:	3610      	adds	r6, #16
 8003a40:	4564      	cmp	r4, ip
 8003a42:	d1f4      	bne.n	8003a2e <HAL_TIM_PeriodElapsedCallback+0x42>
 8003a44:	4633      	mov	r3, r6
 8003a46:	4622      	mov	r2, r4
 8003a48:	8811      	ldrh	r1, [r2, #0]
 8003a4a:	7892      	ldrb	r2, [r2, #2]
 8003a4c:	8019      	strh	r1, [r3, #0]
 8003a4e:	709a      	strb	r2, [r3, #2]

	  	if(HAL_UART_Transmit_IT(&huart1, packet.buffer, packet.size) == HAL_OK)
 8003a50:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	480a      	ldr	r0, [pc, #40]	; (8003a88 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003a5e:	f011 ffc3 	bl	80159e8 <HAL_UART_Transmit_IT>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d102      	bne.n	8003a6e <HAL_TIM_PeriodElapsedCallback+0x82>
	  	{
			HAL_TIM_Base_Stop_IT(&htim4);
 8003a68:	4806      	ldr	r0, [pc, #24]	; (8003a84 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a6a:	f010 faad 	bl	8013fc8 <HAL_TIM_Base_Stop_IT>
	  	}
  }
  /* USER CODE END Callback 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	377c      	adds	r7, #124	; 0x7c
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a76:	bf00      	nop
 8003a78:	24001cb8 	.word	0x24001cb8
 8003a7c:	40001000 	.word	0x40001000
 8003a80:	240025b8 	.word	0x240025b8
 8003a84:	24002604 	.word	0x24002604
 8003a88:	24002650 	.word	0x24002650

08003a8c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim4);
 8003a94:	4803      	ldr	r0, [pc, #12]	; (8003aa4 <HAL_UART_TxCpltCallback+0x18>)
 8003a96:	f010 fa1f 	bl	8013ed8 <HAL_TIM_Base_Start_IT>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	24002604 	.word	0x24002604

08003aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	703b      	strb	r3, [r7, #0]
	error.detail = ED_UNDEFINED;
 8003ab2:	231c      	movs	r3, #28
 8003ab4:	707b      	strb	r3, [r7, #1]
	handle_error(error);
 8003ab6:	463b      	mov	r3, r7
 8003ab8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003abc:	f7fe fa38 	bl	8001f30 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <create_sync_packet>:
 *
 * This function combines version number, error
 * counters, and reset cause into a single packet.
 */
void create_sync_packet(ERROR_STRUCT reset_cause)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	463b      	mov	r3, r7
 8003ad0:	e883 0003 	stmia.w	r3, {r0, r1}
	static uint8_t buffer[SYNC_DATA_SIZE];


	buffer[0] = SYNC_SYNCWORD;
 8003ad4:	4b96      	ldr	r3, [pc, #600]	; (8003d30 <create_sync_packet+0x268>)
 8003ad6:	2288      	movs	r2, #136	; 0x88
 8003ad8:	701a      	strb	r2, [r3, #0]
	buffer[1] = SYNC_SYNCWORD;
 8003ada:	4b95      	ldr	r3, [pc, #596]	; (8003d30 <create_sync_packet+0x268>)
 8003adc:	2288      	movs	r2, #136	; 0x88
 8003ade:	705a      	strb	r2, [r3, #1]
	buffer[2] = V_MAJOR;
 8003ae0:	4b93      	ldr	r3, [pc, #588]	; (8003d30 <create_sync_packet+0x268>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	709a      	strb	r2, [r3, #2]
	buffer[3] = V_MINOR;
 8003ae6:	4b92      	ldr	r3, [pc, #584]	; (8003d30 <create_sync_packet+0x268>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	70da      	strb	r2, [r3, #3]
	buffer[4] = V_PATCH;
 8003aec:	4b90      	ldr	r3, [pc, #576]	; (8003d30 <create_sync_packet+0x268>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	711a      	strb	r2, [r3, #4]
	buffer[5] = ((local_cpy[EC_power_supply_rail] & 0xFF00) >> 8);
 8003af2:	4b90      	ldr	r3, [pc, #576]	; (8003d34 <create_sync_packet+0x26c>)
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	0a1b      	lsrs	r3, r3, #8
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	4b8c      	ldr	r3, [pc, #560]	; (8003d30 <create_sync_packet+0x268>)
 8003afe:	715a      	strb	r2, [r3, #5]
	buffer[6] = (local_cpy[EC_power_supply_rail] & 0xFF);
 8003b00:	4b8c      	ldr	r3, [pc, #560]	; (8003d34 <create_sync_packet+0x26c>)
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	4b8a      	ldr	r3, [pc, #552]	; (8003d30 <create_sync_packet+0x268>)
 8003b08:	719a      	strb	r2, [r3, #6]
	buffer[7] = ((local_cpy[EC_seu] & 0xFF00) >> 8);
 8003b0a:	4b8a      	ldr	r3, [pc, #552]	; (8003d34 <create_sync_packet+0x26c>)
 8003b0c:	885b      	ldrh	r3, [r3, #2]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	4b86      	ldr	r3, [pc, #536]	; (8003d30 <create_sync_packet+0x268>)
 8003b16:	71da      	strb	r2, [r3, #7]
	buffer[8] = (local_cpy[EC_seu] & 0xFF);
 8003b18:	4b86      	ldr	r3, [pc, #536]	; (8003d34 <create_sync_packet+0x26c>)
 8003b1a:	885b      	ldrh	r3, [r3, #2]
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	4b84      	ldr	r3, [pc, #528]	; (8003d30 <create_sync_packet+0x268>)
 8003b20:	721a      	strb	r2, [r3, #8]
	buffer[9] = ((local_cpy[EC_peripheral] & 0xFF00) >> 8);
 8003b22:	4b84      	ldr	r3, [pc, #528]	; (8003d34 <create_sync_packet+0x26c>)
 8003b24:	889b      	ldrh	r3, [r3, #4]
 8003b26:	0a1b      	lsrs	r3, r3, #8
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	4b80      	ldr	r3, [pc, #512]	; (8003d30 <create_sync_packet+0x268>)
 8003b2e:	725a      	strb	r2, [r3, #9]
	buffer[10] = (local_cpy[EC_peripheral] & 0xFF);
 8003b30:	4b80      	ldr	r3, [pc, #512]	; (8003d34 <create_sync_packet+0x26c>)
 8003b32:	889b      	ldrh	r3, [r3, #4]
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	4b7e      	ldr	r3, [pc, #504]	; (8003d30 <create_sync_packet+0x268>)
 8003b38:	729a      	strb	r2, [r3, #10]
	buffer[11] = ((local_cpy[EC_brownout] & 0xFF00) >> 8);
 8003b3a:	4b7e      	ldr	r3, [pc, #504]	; (8003d34 <create_sync_packet+0x26c>)
 8003b3c:	88db      	ldrh	r3, [r3, #6]
 8003b3e:	0a1b      	lsrs	r3, r3, #8
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	4b7a      	ldr	r3, [pc, #488]	; (8003d30 <create_sync_packet+0x268>)
 8003b46:	72da      	strb	r2, [r3, #11]
	buffer[12] = (local_cpy[EC_brownout] & 0xFF);
 8003b48:	4b7a      	ldr	r3, [pc, #488]	; (8003d34 <create_sync_packet+0x26c>)
 8003b4a:	88db      	ldrh	r3, [r3, #6]
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	4b78      	ldr	r3, [pc, #480]	; (8003d30 <create_sync_packet+0x268>)
 8003b50:	731a      	strb	r2, [r3, #12]
	buffer[13] = ((local_cpy[EC_watchdog] & 0xFF00) >> 8);
 8003b52:	4b78      	ldr	r3, [pc, #480]	; (8003d34 <create_sync_packet+0x26c>)
 8003b54:	891b      	ldrh	r3, [r3, #8]
 8003b56:	0a1b      	lsrs	r3, r3, #8
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	4b74      	ldr	r3, [pc, #464]	; (8003d30 <create_sync_packet+0x268>)
 8003b5e:	735a      	strb	r2, [r3, #13]
	buffer[14] = (local_cpy[EC_watchdog] & 0xFF);
 8003b60:	4b74      	ldr	r3, [pc, #464]	; (8003d34 <create_sync_packet+0x26c>)
 8003b62:	891b      	ldrh	r3, [r3, #8]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	4b72      	ldr	r3, [pc, #456]	; (8003d30 <create_sync_packet+0x268>)
 8003b68:	739a      	strb	r2, [r3, #14]
	buffer[15] = ((local_cpy[EC_UNDEFINED] & 0xFF00) >> 8);
 8003b6a:	4b72      	ldr	r3, [pc, #456]	; (8003d34 <create_sync_packet+0x26c>)
 8003b6c:	895b      	ldrh	r3, [r3, #10]
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	4b6e      	ldr	r3, [pc, #440]	; (8003d30 <create_sync_packet+0x268>)
 8003b76:	73da      	strb	r2, [r3, #15]
	buffer[16] = (local_cpy[EC_UNDEFINED] & 0xFF);
 8003b78:	4b6e      	ldr	r3, [pc, #440]	; (8003d34 <create_sync_packet+0x26c>)
 8003b7a:	895b      	ldrh	r3, [r3, #10]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	4b6c      	ldr	r3, [pc, #432]	; (8003d30 <create_sync_packet+0x268>)
 8003b80:	741a      	strb	r2, [r3, #16]
	buffer[17] = ((local_cpy[ED_vsense] & 0xFF00) >> 8);
 8003b82:	4b6c      	ldr	r3, [pc, #432]	; (8003d34 <create_sync_packet+0x26c>)
 8003b84:	899b      	ldrh	r3, [r3, #12]
 8003b86:	0a1b      	lsrs	r3, r3, #8
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	4b68      	ldr	r3, [pc, #416]	; (8003d30 <create_sync_packet+0x268>)
 8003b8e:	745a      	strb	r2, [r3, #17]
	buffer[18] = (local_cpy[ED_vsense] & 0xFF);
 8003b90:	4b68      	ldr	r3, [pc, #416]	; (8003d34 <create_sync_packet+0x26c>)
 8003b92:	899b      	ldrh	r3, [r3, #12]
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	4b66      	ldr	r3, [pc, #408]	; (8003d30 <create_sync_packet+0x268>)
 8003b98:	749a      	strb	r2, [r3, #18]
	buffer[19] = ((local_cpy[ED_vrefint] & 0xFF00) >> 8);
 8003b9a:	4b66      	ldr	r3, [pc, #408]	; (8003d34 <create_sync_packet+0x26c>)
 8003b9c:	89db      	ldrh	r3, [r3, #14]
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	4b62      	ldr	r3, [pc, #392]	; (8003d30 <create_sync_packet+0x268>)
 8003ba6:	74da      	strb	r2, [r3, #19]
	buffer[20] = (local_cpy[ED_vrefint] & 0xFF);
 8003ba8:	4b62      	ldr	r3, [pc, #392]	; (8003d34 <create_sync_packet+0x26c>)
 8003baa:	89db      	ldrh	r3, [r3, #14]
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	4b60      	ldr	r3, [pc, #384]	; (8003d30 <create_sync_packet+0x268>)
 8003bb0:	751a      	strb	r2, [r3, #20]
	buffer[21] = ((local_cpy[ED_TEMP1] & 0xFF00) >> 8);
 8003bb2:	4b60      	ldr	r3, [pc, #384]	; (8003d34 <create_sync_packet+0x26c>)
 8003bb4:	8a1b      	ldrh	r3, [r3, #16]
 8003bb6:	0a1b      	lsrs	r3, r3, #8
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	4b5c      	ldr	r3, [pc, #368]	; (8003d30 <create_sync_packet+0x268>)
 8003bbe:	755a      	strb	r2, [r3, #21]
	buffer[22] = (local_cpy[ED_TEMP1] & 0xFF);
 8003bc0:	4b5c      	ldr	r3, [pc, #368]	; (8003d34 <create_sync_packet+0x26c>)
 8003bc2:	8a1b      	ldrh	r3, [r3, #16]
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	4b5a      	ldr	r3, [pc, #360]	; (8003d30 <create_sync_packet+0x268>)
 8003bc8:	759a      	strb	r2, [r3, #22]
	buffer[23] = ((local_cpy[ED_TEMP2] & 0xFF00) >> 8);
 8003bca:	4b5a      	ldr	r3, [pc, #360]	; (8003d34 <create_sync_packet+0x26c>)
 8003bcc:	8a5b      	ldrh	r3, [r3, #18]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	4b56      	ldr	r3, [pc, #344]	; (8003d30 <create_sync_packet+0x268>)
 8003bd6:	75da      	strb	r2, [r3, #23]
	buffer[24] = (local_cpy[ED_TEMP2] & 0xFF);
 8003bd8:	4b56      	ldr	r3, [pc, #344]	; (8003d34 <create_sync_packet+0x26c>)
 8003bda:	8a5b      	ldrh	r3, [r3, #18]
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4b54      	ldr	r3, [pc, #336]	; (8003d30 <create_sync_packet+0x268>)
 8003be0:	761a      	strb	r2, [r3, #24]
	buffer[25] = ((local_cpy[ED_TEMP3] & 0xFF00) >> 8);
 8003be2:	4b54      	ldr	r3, [pc, #336]	; (8003d34 <create_sync_packet+0x26c>)
 8003be4:	8a9b      	ldrh	r3, [r3, #20]
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	4b50      	ldr	r3, [pc, #320]	; (8003d30 <create_sync_packet+0x268>)
 8003bee:	765a      	strb	r2, [r3, #25]
	buffer[26] = (local_cpy[ED_TEMP3] & 0xFF);
 8003bf0:	4b50      	ldr	r3, [pc, #320]	; (8003d34 <create_sync_packet+0x26c>)
 8003bf2:	8a9b      	ldrh	r3, [r3, #20]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	4b4e      	ldr	r3, [pc, #312]	; (8003d30 <create_sync_packet+0x268>)
 8003bf8:	769a      	strb	r2, [r3, #26]
	buffer[27] = ((local_cpy[ED_TEMP4] & 0xFF00) >> 8);
 8003bfa:	4b4e      	ldr	r3, [pc, #312]	; (8003d34 <create_sync_packet+0x26c>)
 8003bfc:	8adb      	ldrh	r3, [r3, #22]
 8003bfe:	0a1b      	lsrs	r3, r3, #8
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	4b4a      	ldr	r3, [pc, #296]	; (8003d30 <create_sync_packet+0x268>)
 8003c06:	76da      	strb	r2, [r3, #27]
	buffer[28] = (local_cpy[ED_TEMP4] & 0xFF);
 8003c08:	4b4a      	ldr	r3, [pc, #296]	; (8003d34 <create_sync_packet+0x26c>)
 8003c0a:	8adb      	ldrh	r3, [r3, #22]
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4b48      	ldr	r3, [pc, #288]	; (8003d30 <create_sync_packet+0x268>)
 8003c10:	771a      	strb	r2, [r3, #28]
	buffer[29] = ((local_cpy[ED_busvmon] & 0xFF00) >> 8);
 8003c12:	4b48      	ldr	r3, [pc, #288]	; (8003d34 <create_sync_packet+0x26c>)
 8003c14:	8b1b      	ldrh	r3, [r3, #24]
 8003c16:	0a1b      	lsrs	r3, r3, #8
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	4b44      	ldr	r3, [pc, #272]	; (8003d30 <create_sync_packet+0x268>)
 8003c1e:	775a      	strb	r2, [r3, #29]
	buffer[30] = (local_cpy[ED_busvmon] & 0xFF);
 8003c20:	4b44      	ldr	r3, [pc, #272]	; (8003d34 <create_sync_packet+0x26c>)
 8003c22:	8b1b      	ldrh	r3, [r3, #24]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	4b42      	ldr	r3, [pc, #264]	; (8003d30 <create_sync_packet+0x268>)
 8003c28:	779a      	strb	r2, [r3, #30]
	buffer[31] = ((local_cpy[ED_busimon] & 0xFF00) >> 8);
 8003c2a:	4b42      	ldr	r3, [pc, #264]	; (8003d34 <create_sync_packet+0x26c>)
 8003c2c:	8b5b      	ldrh	r3, [r3, #26]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	4b3e      	ldr	r3, [pc, #248]	; (8003d30 <create_sync_packet+0x268>)
 8003c36:	77da      	strb	r2, [r3, #31]
	buffer[32] = (local_cpy[ED_busimon] & 0xFF);
 8003c38:	4b3e      	ldr	r3, [pc, #248]	; (8003d34 <create_sync_packet+0x26c>)
 8003c3a:	8b5b      	ldrh	r3, [r3, #26]
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	4b3c      	ldr	r3, [pc, #240]	; (8003d30 <create_sync_packet+0x268>)
 8003c40:	f883 2020 	strb.w	r2, [r3, #32]
	buffer[33] = ((local_cpy[ED_2v5] & 0xFF00) >> 8);
 8003c44:	4b3b      	ldr	r3, [pc, #236]	; (8003d34 <create_sync_packet+0x26c>)
 8003c46:	8b9b      	ldrh	r3, [r3, #28]
 8003c48:	0a1b      	lsrs	r3, r3, #8
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	4b38      	ldr	r3, [pc, #224]	; (8003d30 <create_sync_packet+0x268>)
 8003c50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	buffer[34] = (local_cpy[ED_2v5] & 0xFF);
 8003c54:	4b37      	ldr	r3, [pc, #220]	; (8003d34 <create_sync_packet+0x26c>)
 8003c56:	8b9b      	ldrh	r3, [r3, #28]
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	4b35      	ldr	r3, [pc, #212]	; (8003d30 <create_sync_packet+0x268>)
 8003c5c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	buffer[35] = ((local_cpy[ED_3v3] & 0xFF00) >> 8);
 8003c60:	4b34      	ldr	r3, [pc, #208]	; (8003d34 <create_sync_packet+0x26c>)
 8003c62:	8bdb      	ldrh	r3, [r3, #30]
 8003c64:	0a1b      	lsrs	r3, r3, #8
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	4b31      	ldr	r3, [pc, #196]	; (8003d30 <create_sync_packet+0x268>)
 8003c6c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	buffer[36] = (local_cpy[ED_3v3] & 0xFF);
 8003c70:	4b30      	ldr	r3, [pc, #192]	; (8003d34 <create_sync_packet+0x26c>)
 8003c72:	8bdb      	ldrh	r3, [r3, #30]
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	4b2e      	ldr	r3, [pc, #184]	; (8003d30 <create_sync_packet+0x268>)
 8003c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	buffer[37] = ((local_cpy[ED_5v] & 0xFF00) >> 8);
 8003c7c:	4b2d      	ldr	r3, [pc, #180]	; (8003d34 <create_sync_packet+0x26c>)
 8003c7e:	8c1b      	ldrh	r3, [r3, #32]
 8003c80:	0a1b      	lsrs	r3, r3, #8
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	4b2a      	ldr	r3, [pc, #168]	; (8003d30 <create_sync_packet+0x268>)
 8003c88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	buffer[38] = (local_cpy[ED_5v] & 0xFF);
 8003c8c:	4b29      	ldr	r3, [pc, #164]	; (8003d34 <create_sync_packet+0x26c>)
 8003c8e:	8c1b      	ldrh	r3, [r3, #32]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	4b27      	ldr	r3, [pc, #156]	; (8003d30 <create_sync_packet+0x268>)
 8003c94:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	buffer[39] = ((local_cpy[ED_n3v3] & 0xFF00) >> 8);
 8003c98:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <create_sync_packet+0x26c>)
 8003c9a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003c9c:	0a1b      	lsrs	r3, r3, #8
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	4b23      	ldr	r3, [pc, #140]	; (8003d30 <create_sync_packet+0x268>)
 8003ca4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	buffer[40] = (local_cpy[ED_n3v3] & 0xFF);
 8003ca8:	4b22      	ldr	r3, [pc, #136]	; (8003d34 <create_sync_packet+0x26c>)
 8003caa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <create_sync_packet+0x268>)
 8003cb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	buffer[41] = ((local_cpy[ED_n5v] & 0xFF00) >> 8);
 8003cb4:	4b1f      	ldr	r3, [pc, #124]	; (8003d34 <create_sync_packet+0x26c>)
 8003cb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003cb8:	0a1b      	lsrs	r3, r3, #8
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <create_sync_packet+0x268>)
 8003cc0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	buffer[42] = (local_cpy[ED_n5v] & 0xFF);
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <create_sync_packet+0x26c>)
 8003cc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	4b19      	ldr	r3, [pc, #100]	; (8003d30 <create_sync_packet+0x268>)
 8003ccc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	buffer[43] = ((local_cpy[ED_15v] & 0xFF00) >> 8);
 8003cd0:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <create_sync_packet+0x26c>)
 8003cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd4:	0a1b      	lsrs	r3, r3, #8
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <create_sync_packet+0x268>)
 8003cdc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	buffer[44] = (local_cpy[ED_15v] & 0xFF);
 8003ce0:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <create_sync_packet+0x26c>)
 8003ce2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <create_sync_packet+0x268>)
 8003ce8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	buffer[45] = ((local_cpy[ED_5vref] & 0xFF00) >> 8);
 8003cec:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <create_sync_packet+0x26c>)
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <create_sync_packet+0x268>)
 8003cf8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	buffer[46] = (local_cpy[ED_5vref] & 0xFF);
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <create_sync_packet+0x26c>)
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <create_sync_packet+0x268>)
 8003d04:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	buffer[47] = ((local_cpy[ED_n200v] & 0xFF00) >> 8);
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <create_sync_packet+0x26c>)
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <create_sync_packet+0x268>)
 8003d14:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	buffer[48] = (local_cpy[ED_n200v] & 0xFF);
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <create_sync_packet+0x26c>)
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <create_sync_packet+0x268>)
 8003d20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	buffer[49] = ((local_cpy[ED_n800v] & 0xFF00) >> 8);
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <create_sync_packet+0x26c>)
 8003d26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d28:	0a1b      	lsrs	r3, r3, #8
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	e003      	b.n	8003d38 <create_sync_packet+0x270>
 8003d30:	24001d2c 	.word	0x24001d2c
 8003d34:	24000364 	.word	0x24000364
 8003d38:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <create_sync_packet+0x350>)
 8003d3a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	buffer[50] = (local_cpy[ED_n800v] & 0xFF);
 8003d3e:	4b37      	ldr	r3, [pc, #220]	; (8003e1c <create_sync_packet+0x354>)
 8003d40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	4b34      	ldr	r3, [pc, #208]	; (8003e18 <create_sync_packet+0x350>)
 8003d46:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	buffer[51] = ((local_cpy[ED_TMP1] & 0xFF00) >> 8);
 8003d4a:	4b34      	ldr	r3, [pc, #208]	; (8003e1c <create_sync_packet+0x354>)
 8003d4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d4e:	0a1b      	lsrs	r3, r3, #8
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	4b30      	ldr	r3, [pc, #192]	; (8003e18 <create_sync_packet+0x350>)
 8003d56:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	buffer[52] = (local_cpy[ED_TMP1] & 0xFF);
 8003d5a:	4b30      	ldr	r3, [pc, #192]	; (8003e1c <create_sync_packet+0x354>)
 8003d5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	4b2d      	ldr	r3, [pc, #180]	; (8003e18 <create_sync_packet+0x350>)
 8003d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	buffer[53] = ((local_cpy[ED_single_bit_error_flash] & 0xFF00) >> 8);
 8003d66:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <create_sync_packet+0x354>)
 8003d68:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	4b29      	ldr	r3, [pc, #164]	; (8003e18 <create_sync_packet+0x350>)
 8003d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	buffer[54] = (local_cpy[ED_single_bit_error_flash] & 0xFF);
 8003d76:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <create_sync_packet+0x354>)
 8003d78:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <create_sync_packet+0x350>)
 8003d7e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	buffer[55] = ((local_cpy[ED_double_bit_error_flash] & 0xFF00) >> 8);
 8003d82:	4b26      	ldr	r3, [pc, #152]	; (8003e1c <create_sync_packet+0x354>)
 8003d84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d86:	0a1b      	lsrs	r3, r3, #8
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	4b22      	ldr	r3, [pc, #136]	; (8003e18 <create_sync_packet+0x350>)
 8003d8e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	buffer[56] = (local_cpy[ED_double_bit_error_flash] & 0xFF);
 8003d92:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <create_sync_packet+0x354>)
 8003d94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	4b1f      	ldr	r3, [pc, #124]	; (8003e18 <create_sync_packet+0x350>)
 8003d9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	buffer[57] = ((local_cpy[ED_single_bit_error_ram] & 0xFF00) >> 8);
 8003d9e:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <create_sync_packet+0x354>)
 8003da0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <create_sync_packet+0x350>)
 8003daa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	buffer[58] = (local_cpy[ED_single_bit_error_ram] & 0xFF);
 8003dae:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <create_sync_packet+0x354>)
 8003db0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	4b18      	ldr	r3, [pc, #96]	; (8003e18 <create_sync_packet+0x350>)
 8003db6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	buffer[59] = ((local_cpy[ED_double_bit_error_ram] & 0xFF00) >> 8);
 8003dba:	4b18      	ldr	r3, [pc, #96]	; (8003e1c <create_sync_packet+0x354>)
 8003dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dbe:	0a1b      	lsrs	r3, r3, #8
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <create_sync_packet+0x350>)
 8003dc6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	buffer[60] = (local_cpy[ED_double_bit_error_ram] & 0xFF);
 8003dca:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <create_sync_packet+0x354>)
 8003dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <create_sync_packet+0x350>)
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	buffer[61] = ((local_cpy[ED_UNDEFINED] & 0xFF00) >> 8);
 8003dd6:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <create_sync_packet+0x354>)
 8003dd8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003dda:	0a1b      	lsrs	r3, r3, #8
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <create_sync_packet+0x350>)
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	buffer[62] = (local_cpy[ED_UNDEFINED] & 0xFF);
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <create_sync_packet+0x354>)
 8003de8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <create_sync_packet+0x350>)
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	buffer[63] = reset_cause.category;
 8003df2:	783a      	ldrb	r2, [r7, #0]
 8003df4:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <create_sync_packet+0x350>)
 8003df6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	buffer[64] = reset_cause.detail;
 8003dfa:	787a      	ldrb	r2, [r7, #1]
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <create_sync_packet+0x350>)
 8003dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	HAL_UART_Transmit(&huart1, buffer, SYNC_DATA_SIZE, UART_TIMEOUT_MS);
 8003e02:	2364      	movs	r3, #100	; 0x64
 8003e04:	2241      	movs	r2, #65	; 0x41
 8003e06:	4904      	ldr	r1, [pc, #16]	; (8003e18 <create_sync_packet+0x350>)
 8003e08:	4805      	ldr	r0, [pc, #20]	; (8003e20 <create_sync_packet+0x358>)
 8003e0a:	f011 fc97 	bl	801573c <HAL_UART_Transmit>
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	24001d2c 	.word	0x24001d2c
 8003e1c:	24000364 	.word	0x24000364
 8003e20:	24002650 	.word	0x24002650

08003e24 <create_version_packet>:
 * it over UART.
 *
 * @note V_MAJOR, V_MINOR, and V_PATCH are defined in main.h.
 */
void create_version_packet()
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
	static uint8_t buffer[VERSION_DATA_SIZE];

	buffer[0] = VERSION_SYNCWORD;
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <create_version_packet+0x34>)
 8003e2a:	2299      	movs	r2, #153	; 0x99
 8003e2c:	701a      	strb	r2, [r3, #0]
	buffer[1] = VERSION_SYNCWORD;
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <create_version_packet+0x34>)
 8003e30:	2299      	movs	r2, #153	; 0x99
 8003e32:	705a      	strb	r2, [r3, #1]
	buffer[2] = V_MAJOR;
 8003e34:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <create_version_packet+0x34>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	709a      	strb	r2, [r3, #2]
	buffer[3] = V_MINOR;
 8003e3a:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <create_version_packet+0x34>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	70da      	strb	r2, [r3, #3]
	buffer[4] = V_PATCH;
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <create_version_packet+0x34>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	711a      	strb	r2, [r3, #4]

	HAL_UART_Transmit(&huart1, buffer, VERSION_DATA_SIZE, UART_TIMEOUT_MS);
 8003e46:	2364      	movs	r3, #100	; 0x64
 8003e48:	2205      	movs	r2, #5
 8003e4a:	4903      	ldr	r1, [pc, #12]	; (8003e58 <create_version_packet+0x34>)
 8003e4c:	4803      	ldr	r0, [pc, #12]	; (8003e5c <create_version_packet+0x38>)
 8003e4e:	f011 fc75 	bl	801573c <HAL_UART_Transmit>
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	24001d70 	.word	0x24001d70
 8003e5c:	24002650 	.word	0x24002650

08003e60 <create_pmt_packet>:
 * This function samples the PMT SPI data, retrieves uptime information,
 * constructs a packet with synchronization bytes and data,
 * and transmits it over UART.
 */
void create_pmt_packet()
{
 8003e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e62:	b08b      	sub	sp, #44	; 0x2c
 8003e64:	af0a      	add	r7, sp, #40	; 0x28
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {};
 8003e66:	bf00      	nop
 8003e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e6c:	482a      	ldr	r0, [pc, #168]	; (8003f18 <create_pmt_packet+0xb8>)
 8003e6e:	f008 fc7d 	bl	800c76c <HAL_GPIO_ReadPin>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f7      	bne.n	8003e68 <create_pmt_packet+0x8>

	static Packet_t pmt;
	pmt.size = PMT_DATA_SIZE;
 8003e78:	4b28      	ldr	r3, [pc, #160]	; (8003f1c <create_pmt_packet+0xbc>)
 8003e7a:	220a      	movs	r2, #10
 8003e7c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	static uint8_t pmt_spi[2];
	static uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003e80:	4827      	ldr	r0, [pc, #156]	; (8003f20 <create_pmt_packet+0xc0>)
 8003e82:	f001 fddd 	bl	8005a40 <get_uptime>
	sample_pmt_spi(pmt_spi);
 8003e86:	4827      	ldr	r0, [pc, #156]	; (8003f24 <create_pmt_packet+0xc4>)
 8003e88:	f000 fd1a 	bl	80048c0 <sample_pmt_spi>

	pmt.buffer[0] = PMT_SYNCWORD;
 8003e8c:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <create_pmt_packet+0xbc>)
 8003e8e:	22ff      	movs	r2, #255	; 0xff
 8003e90:	701a      	strb	r2, [r3, #0]
	pmt.buffer[1] = PMT_SYNCWORD;
 8003e92:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <create_pmt_packet+0xbc>)
 8003e94:	22ff      	movs	r2, #255	; 0xff
 8003e96:	705a      	strb	r2, [r3, #1]
	pmt.buffer[2] = uptime[0];
 8003e98:	4b21      	ldr	r3, [pc, #132]	; (8003f20 <create_pmt_packet+0xc0>)
 8003e9a:	781a      	ldrb	r2, [r3, #0]
 8003e9c:	4b1f      	ldr	r3, [pc, #124]	; (8003f1c <create_pmt_packet+0xbc>)
 8003e9e:	709a      	strb	r2, [r3, #2]
	pmt.buffer[3] = uptime[1];
 8003ea0:	4b1f      	ldr	r3, [pc, #124]	; (8003f20 <create_pmt_packet+0xc0>)
 8003ea2:	785a      	ldrb	r2, [r3, #1]
 8003ea4:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <create_pmt_packet+0xbc>)
 8003ea6:	70da      	strb	r2, [r3, #3]
	pmt.buffer[4] = uptime[2];
 8003ea8:	4b1d      	ldr	r3, [pc, #116]	; (8003f20 <create_pmt_packet+0xc0>)
 8003eaa:	789a      	ldrb	r2, [r3, #2]
 8003eac:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <create_pmt_packet+0xbc>)
 8003eae:	711a      	strb	r2, [r3, #4]
	pmt.buffer[5] = uptime[3];
 8003eb0:	4b1b      	ldr	r3, [pc, #108]	; (8003f20 <create_pmt_packet+0xc0>)
 8003eb2:	78da      	ldrb	r2, [r3, #3]
 8003eb4:	4b19      	ldr	r3, [pc, #100]	; (8003f1c <create_pmt_packet+0xbc>)
 8003eb6:	715a      	strb	r2, [r3, #5]
	pmt.buffer[6] = ((pmt_seq & 0xFF00) >> 8);
 8003eb8:	4b1b      	ldr	r3, [pc, #108]	; (8003f28 <create_pmt_packet+0xc8>)
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	0a1b      	lsrs	r3, r3, #8
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	4b16      	ldr	r3, [pc, #88]	; (8003f1c <create_pmt_packet+0xbc>)
 8003ec4:	719a      	strb	r2, [r3, #6]
	pmt.buffer[7] = (pmt_seq & 0xFF);
 8003ec6:	4b18      	ldr	r3, [pc, #96]	; (8003f28 <create_pmt_packet+0xc8>)
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <create_pmt_packet+0xbc>)
 8003ece:	71da      	strb	r2, [r3, #7]
	pmt.buffer[8] = pmt_spi[0];
 8003ed0:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <create_pmt_packet+0xc4>)
 8003ed2:	781a      	ldrb	r2, [r3, #0]
 8003ed4:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <create_pmt_packet+0xbc>)
 8003ed6:	721a      	strb	r2, [r3, #8]
	pmt.buffer[9] = pmt_spi[1];
 8003ed8:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <create_pmt_packet+0xc4>)
 8003eda:	785a      	ldrb	r2, [r3, #1]
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <create_pmt_packet+0xbc>)
 8003ede:	725a      	strb	r2, [r3, #9]

	enqueue(pmt);
 8003ee0:	4e0e      	ldr	r6, [pc, #56]	; (8003f1c <create_pmt_packet+0xbc>)
 8003ee2:	466c      	mov	r4, sp
 8003ee4:	f106 0510 	add.w	r5, r6, #16
 8003ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ef0:	682b      	ldr	r3, [r5, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	8022      	strh	r2, [r4, #0]
 8003ef6:	3402      	adds	r4, #2
 8003ef8:	0c1b      	lsrs	r3, r3, #16
 8003efa:	7023      	strb	r3, [r4, #0]
 8003efc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003f00:	f000 fa70 	bl	80043e4 <enqueue>

	pmt_seq++;
 8003f04:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <create_pmt_packet+0xc8>)
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <create_pmt_packet+0xc8>)
 8003f0e:	801a      	strh	r2, [r3, #0]
}
 8003f10:	bf00      	nop
 8003f12:	3704      	adds	r7, #4
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f18:	58020000 	.word	0x58020000
 8003f1c:	24001d78 	.word	0x24001d78
 8003f20:	24001dac 	.word	0x24001dac
 8003f24:	24001db0 	.word	0x24001db0
 8003f28:	24001d22 	.word	0x24001d22

08003f2c <create_erpa_packet>:
 * This function samples the ERPA SPI and ADC data, retrieves uptime information,
 * constructs a packet with synchronization bytes, sequence number, and data,
 * and transmits it over UART.
 */
void create_erpa_packet()
{
 8003f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2e:	b08b      	sub	sp, #44	; 0x2c
 8003f30:	af0a      	add	r7, sp, #40	; 0x28
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {};
 8003f32:	bf00      	nop
 8003f34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f38:	4839      	ldr	r0, [pc, #228]	; (8004020 <create_erpa_packet+0xf4>)
 8003f3a:	f008 fc17 	bl	800c76c <HAL_GPIO_ReadPin>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f7      	bne.n	8003f34 <create_erpa_packet+0x8>

	static Packet_t erpa;
	erpa.size = ERPA_DATA_SIZE;
 8003f44:	4b37      	ldr	r3, [pc, #220]	; (8004024 <create_erpa_packet+0xf8>)
 8003f46:	220e      	movs	r2, #14
 8003f48:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	static uint8_t erpa_spi[2];
	static uint16_t erpa_adc[1];
	static uint8_t uptime[UPTIME_SIZE];
	static STEP_VALUES sweep_step = INVALID_STEP;

	get_uptime(uptime);
 8003f4c:	4836      	ldr	r0, [pc, #216]	; (8004028 <create_erpa_packet+0xfc>)
 8003f4e:	f001 fd77 	bl	8005a40 <get_uptime>
	sweep_step = get_current_step();
 8003f52:	f7ff fccb 	bl	80038ec <get_current_step>
 8003f56:	4603      	mov	r3, r0
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4b34      	ldr	r3, [pc, #208]	; (800402c <create_erpa_packet+0x100>)
 8003f5c:	701a      	strb	r2, [r3, #0]

	sample_erpa_spi(erpa_spi);
 8003f5e:	4834      	ldr	r0, [pc, #208]	; (8004030 <create_erpa_packet+0x104>)
 8003f60:	f000 fcce 	bl	8004900 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8003f64:	4833      	ldr	r0, [pc, #204]	; (8004034 <create_erpa_packet+0x108>)
 8003f66:	f000 fceb 	bl	8004940 <sample_erpa_adc>

	erpa.buffer[0] = ERPA_SYNCWORD;
 8003f6a:	4b2e      	ldr	r3, [pc, #184]	; (8004024 <create_erpa_packet+0xf8>)
 8003f6c:	22ee      	movs	r2, #238	; 0xee
 8003f6e:	701a      	strb	r2, [r3, #0]
	erpa.buffer[1] = ERPA_SYNCWORD;
 8003f70:	4b2c      	ldr	r3, [pc, #176]	; (8004024 <create_erpa_packet+0xf8>)
 8003f72:	22ee      	movs	r2, #238	; 0xee
 8003f74:	705a      	strb	r2, [r3, #1]
	erpa.buffer[2] = uptime[0];
 8003f76:	4b2c      	ldr	r3, [pc, #176]	; (8004028 <create_erpa_packet+0xfc>)
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	4b2a      	ldr	r3, [pc, #168]	; (8004024 <create_erpa_packet+0xf8>)
 8003f7c:	709a      	strb	r2, [r3, #2]
	erpa.buffer[3] = uptime[1];
 8003f7e:	4b2a      	ldr	r3, [pc, #168]	; (8004028 <create_erpa_packet+0xfc>)
 8003f80:	785a      	ldrb	r2, [r3, #1]
 8003f82:	4b28      	ldr	r3, [pc, #160]	; (8004024 <create_erpa_packet+0xf8>)
 8003f84:	70da      	strb	r2, [r3, #3]
	erpa.buffer[4] = uptime[2];
 8003f86:	4b28      	ldr	r3, [pc, #160]	; (8004028 <create_erpa_packet+0xfc>)
 8003f88:	789a      	ldrb	r2, [r3, #2]
 8003f8a:	4b26      	ldr	r3, [pc, #152]	; (8004024 <create_erpa_packet+0xf8>)
 8003f8c:	711a      	strb	r2, [r3, #4]
	erpa.buffer[5] = uptime[3];
 8003f8e:	4b26      	ldr	r3, [pc, #152]	; (8004028 <create_erpa_packet+0xfc>)
 8003f90:	78da      	ldrb	r2, [r3, #3]
 8003f92:	4b24      	ldr	r3, [pc, #144]	; (8004024 <create_erpa_packet+0xf8>)
 8003f94:	715a      	strb	r2, [r3, #5]
	erpa.buffer[6] = ((erpa_seq >> 16) & 0xFF);
 8003f96:	4b28      	ldr	r3, [pc, #160]	; (8004038 <create_erpa_packet+0x10c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	0c1b      	lsrs	r3, r3, #16
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	4b21      	ldr	r3, [pc, #132]	; (8004024 <create_erpa_packet+0xf8>)
 8003fa0:	719a      	strb	r2, [r3, #6]
	erpa.buffer[7] = ((erpa_seq >> 8) & 0xFF);
 8003fa2:	4b25      	ldr	r3, [pc, #148]	; (8004038 <create_erpa_packet+0x10c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	0a1b      	lsrs	r3, r3, #8
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	4b1e      	ldr	r3, [pc, #120]	; (8004024 <create_erpa_packet+0xf8>)
 8003fac:	71da      	strb	r2, [r3, #7]
	erpa.buffer[8] = erpa_seq & 0xFF;
 8003fae:	4b22      	ldr	r3, [pc, #136]	; (8004038 <create_erpa_packet+0x10c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	4b1b      	ldr	r3, [pc, #108]	; (8004024 <create_erpa_packet+0xf8>)
 8003fb6:	721a      	strb	r2, [r3, #8]
	erpa.buffer[9] = sweep_step;
 8003fb8:	4b1c      	ldr	r3, [pc, #112]	; (800402c <create_erpa_packet+0x100>)
 8003fba:	781a      	ldrb	r2, [r3, #0]
 8003fbc:	4b19      	ldr	r3, [pc, #100]	; (8004024 <create_erpa_packet+0xf8>)
 8003fbe:	725a      	strb	r2, [r3, #9]
	erpa.buffer[10] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8003fc0:	4b1c      	ldr	r3, [pc, #112]	; (8004034 <create_erpa_packet+0x108>)
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	0a1b      	lsrs	r3, r3, #8
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	4b16      	ldr	r3, [pc, #88]	; (8004024 <create_erpa_packet+0xf8>)
 8003fcc:	729a      	strb	r2, [r3, #10]
	erpa.buffer[11] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8003fce:	4b19      	ldr	r3, [pc, #100]	; (8004034 <create_erpa_packet+0x108>)
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	4b13      	ldr	r3, [pc, #76]	; (8004024 <create_erpa_packet+0xf8>)
 8003fd6:	72da      	strb	r2, [r3, #11]
	erpa.buffer[12] = erpa_spi[0];					// ERPA eADC MSB
 8003fd8:	4b15      	ldr	r3, [pc, #84]	; (8004030 <create_erpa_packet+0x104>)
 8003fda:	781a      	ldrb	r2, [r3, #0]
 8003fdc:	4b11      	ldr	r3, [pc, #68]	; (8004024 <create_erpa_packet+0xf8>)
 8003fde:	731a      	strb	r2, [r3, #12]
	erpa.buffer[13] = erpa_spi[1];					// ERPA eADC LSB
 8003fe0:	4b13      	ldr	r3, [pc, #76]	; (8004030 <create_erpa_packet+0x104>)
 8003fe2:	785a      	ldrb	r2, [r3, #1]
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <create_erpa_packet+0xf8>)
 8003fe6:	735a      	strb	r2, [r3, #13]

	enqueue(erpa);
 8003fe8:	4e0e      	ldr	r6, [pc, #56]	; (8004024 <create_erpa_packet+0xf8>)
 8003fea:	466c      	mov	r4, sp
 8003fec:	f106 0510 	add.w	r5, r6, #16
 8003ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	8022      	strh	r2, [r4, #0]
 8003ffe:	3402      	adds	r4, #2
 8004000:	0c1b      	lsrs	r3, r3, #16
 8004002:	7023      	strb	r3, [r4, #0]
 8004004:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004008:	f000 f9ec 	bl	80043e4 <enqueue>

	erpa_seq++;
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <create_erpa_packet+0x10c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3301      	adds	r3, #1
 8004012:	4a09      	ldr	r2, [pc, #36]	; (8004038 <create_erpa_packet+0x10c>)
 8004014:	6013      	str	r3, [r2, #0]
}
 8004016:	bf00      	nop
 8004018:	3704      	adds	r7, #4
 800401a:	46bd      	mov	sp, r7
 800401c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800401e:	bf00      	nop
 8004020:	58020400 	.word	0x58020400
 8004024:	24001db4 	.word	0x24001db4
 8004028:	24001de8 	.word	0x24001de8
 800402c:	240000c5 	.word	0x240000c5
 8004030:	24001dec 	.word	0x24001dec
 8004034:	24001df0 	.word	0x24001df0
 8004038:	24001d24 	.word	0x24001d24

0800403c <create_hk_packet>:
 * This function retrieves uptime and UNIX time information, samples the voltage rails,
 * constructs a packet with synchronization bytes, sequence number, and voltage readings,
 * and transmits it over UART.
 */
void create_hk_packet()
{
 800403c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403e:	b08b      	sub	sp, #44	; 0x2c
 8004040:	af0a      	add	r7, sp, #40	; 0x28
	static Packet_t hk;
	hk.size = HK_DATA_SIZE;
 8004042:	4b9a      	ldr	r3, [pc, #616]	; (80042ac <create_hk_packet+0x270>)
 8004044:	2232      	movs	r2, #50	; 0x32
 8004046:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	static VOLTAGE_RAIL *rail_monitor_ptr;
	static uint8_t timestamp[TIMESTAMP_SIZE];
	static uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 800404a:	4899      	ldr	r0, [pc, #612]	; (80042b0 <create_hk_packet+0x274>)
 800404c:	f001 fcf8 	bl	8005a40 <get_uptime>
	get_unix_time(timestamp);
 8004050:	4898      	ldr	r0, [pc, #608]	; (80042b4 <create_hk_packet+0x278>)
 8004052:	f001 fd45 	bl	8005ae0 <get_unix_time>
	rail_monitor_ptr = get_rail_monitor();
 8004056:	f002 fb55 	bl	8006704 <get_rail_monitor>
 800405a:	4603      	mov	r3, r0
 800405c:	4a96      	ldr	r2, [pc, #600]	; (80042b8 <create_hk_packet+0x27c>)
 800405e:	6013      	str	r3, [r2, #0]

	hk.buffer[0] = HK_SYNCWORD;                     	// HK SYNC 0xCC MSB
 8004060:	4b92      	ldr	r3, [pc, #584]	; (80042ac <create_hk_packet+0x270>)
 8004062:	22dd      	movs	r2, #221	; 0xdd
 8004064:	701a      	strb	r2, [r3, #0]
	hk.buffer[1] = HK_SYNCWORD;                     	// HK SYNC 0xCC LSB
 8004066:	4b91      	ldr	r3, [pc, #580]	; (80042ac <create_hk_packet+0x270>)
 8004068:	22dd      	movs	r2, #221	; 0xdd
 800406a:	705a      	strb	r2, [r3, #1]
	hk.buffer[2] = timestamp[0];
 800406c:	4b91      	ldr	r3, [pc, #580]	; (80042b4 <create_hk_packet+0x278>)
 800406e:	781a      	ldrb	r2, [r3, #0]
 8004070:	4b8e      	ldr	r3, [pc, #568]	; (80042ac <create_hk_packet+0x270>)
 8004072:	709a      	strb	r2, [r3, #2]
	hk.buffer[3] = timestamp[1];
 8004074:	4b8f      	ldr	r3, [pc, #572]	; (80042b4 <create_hk_packet+0x278>)
 8004076:	785a      	ldrb	r2, [r3, #1]
 8004078:	4b8c      	ldr	r3, [pc, #560]	; (80042ac <create_hk_packet+0x270>)
 800407a:	70da      	strb	r2, [r3, #3]
	hk.buffer[4] = timestamp[2];
 800407c:	4b8d      	ldr	r3, [pc, #564]	; (80042b4 <create_hk_packet+0x278>)
 800407e:	789a      	ldrb	r2, [r3, #2]
 8004080:	4b8a      	ldr	r3, [pc, #552]	; (80042ac <create_hk_packet+0x270>)
 8004082:	711a      	strb	r2, [r3, #4]
	hk.buffer[5] = timestamp[3];
 8004084:	4b8b      	ldr	r3, [pc, #556]	; (80042b4 <create_hk_packet+0x278>)
 8004086:	78da      	ldrb	r2, [r3, #3]
 8004088:	4b88      	ldr	r3, [pc, #544]	; (80042ac <create_hk_packet+0x270>)
 800408a:	715a      	strb	r2, [r3, #5]
	hk.buffer[6] = timestamp[4];
 800408c:	4b89      	ldr	r3, [pc, #548]	; (80042b4 <create_hk_packet+0x278>)
 800408e:	791a      	ldrb	r2, [r3, #4]
 8004090:	4b86      	ldr	r3, [pc, #536]	; (80042ac <create_hk_packet+0x270>)
 8004092:	719a      	strb	r2, [r3, #6]
	hk.buffer[7] = timestamp[5];
 8004094:	4b87      	ldr	r3, [pc, #540]	; (80042b4 <create_hk_packet+0x278>)
 8004096:	795a      	ldrb	r2, [r3, #5]
 8004098:	4b84      	ldr	r3, [pc, #528]	; (80042ac <create_hk_packet+0x270>)
 800409a:	71da      	strb	r2, [r3, #7]
	hk.buffer[8] = uptime[0];
 800409c:	4b84      	ldr	r3, [pc, #528]	; (80042b0 <create_hk_packet+0x274>)
 800409e:	781a      	ldrb	r2, [r3, #0]
 80040a0:	4b82      	ldr	r3, [pc, #520]	; (80042ac <create_hk_packet+0x270>)
 80040a2:	721a      	strb	r2, [r3, #8]
	hk.buffer[9] = uptime[1];
 80040a4:	4b82      	ldr	r3, [pc, #520]	; (80042b0 <create_hk_packet+0x274>)
 80040a6:	785a      	ldrb	r2, [r3, #1]
 80040a8:	4b80      	ldr	r3, [pc, #512]	; (80042ac <create_hk_packet+0x270>)
 80040aa:	725a      	strb	r2, [r3, #9]
	hk.buffer[10] = uptime[2];
 80040ac:	4b80      	ldr	r3, [pc, #512]	; (80042b0 <create_hk_packet+0x274>)
 80040ae:	789a      	ldrb	r2, [r3, #2]
 80040b0:	4b7e      	ldr	r3, [pc, #504]	; (80042ac <create_hk_packet+0x270>)
 80040b2:	729a      	strb	r2, [r3, #10]
	hk.buffer[11] = uptime[3];
 80040b4:	4b7e      	ldr	r3, [pc, #504]	; (80042b0 <create_hk_packet+0x274>)
 80040b6:	78da      	ldrb	r2, [r3, #3]
 80040b8:	4b7c      	ldr	r3, [pc, #496]	; (80042ac <create_hk_packet+0x270>)
 80040ba:	72da      	strb	r2, [r3, #11]
	hk.buffer[12] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80040bc:	4b7f      	ldr	r3, [pc, #508]	; (80042bc <create_hk_packet+0x280>)
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	4b79      	ldr	r3, [pc, #484]	; (80042ac <create_hk_packet+0x270>)
 80040c8:	731a      	strb	r2, [r3, #12]
	hk.buffer[13] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80040ca:	4b7c      	ldr	r3, [pc, #496]	; (80042bc <create_hk_packet+0x280>)
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	4b76      	ldr	r3, [pc, #472]	; (80042ac <create_hk_packet+0x270>)
 80040d2:	735a      	strb	r2, [r3, #13]
	hk.buffer[14] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 80040d4:	4b78      	ldr	r3, [pc, #480]	; (80042b8 <create_hk_packet+0x27c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	889b      	ldrh	r3, [r3, #4]
 80040da:	0a1b      	lsrs	r3, r3, #8
 80040dc:	b29b      	uxth	r3, r3
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	4b72      	ldr	r3, [pc, #456]	; (80042ac <create_hk_packet+0x270>)
 80040e2:	739a      	strb	r2, [r3, #14]
	hk.buffer[15] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 80040e4:	4b74      	ldr	r3, [pc, #464]	; (80042b8 <create_hk_packet+0x27c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	889b      	ldrh	r3, [r3, #4]
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	4b6f      	ldr	r3, [pc, #444]	; (80042ac <create_hk_packet+0x270>)
 80040ee:	73da      	strb	r2, [r3, #15]
	hk.buffer[16] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 80040f0:	4b71      	ldr	r3, [pc, #452]	; (80042b8 <create_hk_packet+0x27c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3310      	adds	r3, #16
 80040f6:	889b      	ldrh	r3, [r3, #4]
 80040f8:	0a1b      	lsrs	r3, r3, #8
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	4b6b      	ldr	r3, [pc, #428]	; (80042ac <create_hk_packet+0x270>)
 8004100:	741a      	strb	r2, [r3, #16]
	hk.buffer[17] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8004102:	4b6d      	ldr	r3, [pc, #436]	; (80042b8 <create_hk_packet+0x27c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3310      	adds	r3, #16
 8004108:	889b      	ldrh	r3, [r3, #4]
 800410a:	b2da      	uxtb	r2, r3
 800410c:	4b67      	ldr	r3, [pc, #412]	; (80042ac <create_hk_packet+0x270>)
 800410e:	745a      	strb	r2, [r3, #17]
	hk.buffer[18] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8004110:	4b69      	ldr	r3, [pc, #420]	; (80042b8 <create_hk_packet+0x27c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3360      	adds	r3, #96	; 0x60
 8004116:	889b      	ldrh	r3, [r3, #4]
 8004118:	0a1b      	lsrs	r3, r3, #8
 800411a:	b29b      	uxth	r3, r3
 800411c:	b2da      	uxtb	r2, r3
 800411e:	4b63      	ldr	r3, [pc, #396]	; (80042ac <create_hk_packet+0x270>)
 8004120:	749a      	strb	r2, [r3, #18]
	hk.buffer[19] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8004122:	4b65      	ldr	r3, [pc, #404]	; (80042b8 <create_hk_packet+0x27c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3360      	adds	r3, #96	; 0x60
 8004128:	889b      	ldrh	r3, [r3, #4]
 800412a:	b2da      	uxtb	r2, r3
 800412c:	4b5f      	ldr	r3, [pc, #380]	; (80042ac <create_hk_packet+0x270>)
 800412e:	74da      	strb	r2, [r3, #19]
	hk.buffer[20] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8004130:	4b61      	ldr	r3, [pc, #388]	; (80042b8 <create_hk_packet+0x27c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3370      	adds	r3, #112	; 0x70
 8004136:	889b      	ldrh	r3, [r3, #4]
 8004138:	0a1b      	lsrs	r3, r3, #8
 800413a:	b29b      	uxth	r3, r3
 800413c:	b2da      	uxtb	r2, r3
 800413e:	4b5b      	ldr	r3, [pc, #364]	; (80042ac <create_hk_packet+0x270>)
 8004140:	751a      	strb	r2, [r3, #20]
	hk.buffer[21] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8004142:	4b5d      	ldr	r3, [pc, #372]	; (80042b8 <create_hk_packet+0x27c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3370      	adds	r3, #112	; 0x70
 8004148:	889b      	ldrh	r3, [r3, #4]
 800414a:	b2da      	uxtb	r2, r3
 800414c:	4b57      	ldr	r3, [pc, #348]	; (80042ac <create_hk_packet+0x270>)
 800414e:	755a      	strb	r2, [r3, #21]
	hk.buffer[22] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8004150:	4b59      	ldr	r3, [pc, #356]	; (80042b8 <create_hk_packet+0x27c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3380      	adds	r3, #128	; 0x80
 8004156:	889b      	ldrh	r3, [r3, #4]
 8004158:	0a1b      	lsrs	r3, r3, #8
 800415a:	b29b      	uxth	r3, r3
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4b53      	ldr	r3, [pc, #332]	; (80042ac <create_hk_packet+0x270>)
 8004160:	759a      	strb	r2, [r3, #22]
	hk.buffer[23] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8004162:	4b55      	ldr	r3, [pc, #340]	; (80042b8 <create_hk_packet+0x27c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3380      	adds	r3, #128	; 0x80
 8004168:	889b      	ldrh	r3, [r3, #4]
 800416a:	b2da      	uxtb	r2, r3
 800416c:	4b4f      	ldr	r3, [pc, #316]	; (80042ac <create_hk_packet+0x270>)
 800416e:	75da      	strb	r2, [r3, #23]
	hk.buffer[24] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8004170:	4b51      	ldr	r3, [pc, #324]	; (80042b8 <create_hk_packet+0x27c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3390      	adds	r3, #144	; 0x90
 8004176:	889b      	ldrh	r3, [r3, #4]
 8004178:	0a1b      	lsrs	r3, r3, #8
 800417a:	b29b      	uxth	r3, r3
 800417c:	b2da      	uxtb	r2, r3
 800417e:	4b4b      	ldr	r3, [pc, #300]	; (80042ac <create_hk_packet+0x270>)
 8004180:	761a      	strb	r2, [r3, #24]
	hk.buffer[25] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8004182:	4b4d      	ldr	r3, [pc, #308]	; (80042b8 <create_hk_packet+0x27c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3390      	adds	r3, #144	; 0x90
 8004188:	889b      	ldrh	r3, [r3, #4]
 800418a:	b2da      	uxtb	r2, r3
 800418c:	4b47      	ldr	r3, [pc, #284]	; (80042ac <create_hk_packet+0x270>)
 800418e:	765a      	strb	r2, [r3, #25]
	hk.buffer[26] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8004190:	4b49      	ldr	r3, [pc, #292]	; (80042b8 <create_hk_packet+0x27c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	33a0      	adds	r3, #160	; 0xa0
 8004196:	889b      	ldrh	r3, [r3, #4]
 8004198:	0a1b      	lsrs	r3, r3, #8
 800419a:	b29b      	uxth	r3, r3
 800419c:	b2da      	uxtb	r2, r3
 800419e:	4b43      	ldr	r3, [pc, #268]	; (80042ac <create_hk_packet+0x270>)
 80041a0:	769a      	strb	r2, [r3, #26]
	hk.buffer[27] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 80041a2:	4b45      	ldr	r3, [pc, #276]	; (80042b8 <create_hk_packet+0x27c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	33a0      	adds	r3, #160	; 0xa0
 80041a8:	889b      	ldrh	r3, [r3, #4]
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	4b3f      	ldr	r3, [pc, #252]	; (80042ac <create_hk_packet+0x270>)
 80041ae:	76da      	strb	r2, [r3, #27]
	hk.buffer[28] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 80041b0:	4b41      	ldr	r3, [pc, #260]	; (80042b8 <create_hk_packet+0x27c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	33b0      	adds	r3, #176	; 0xb0
 80041b6:	889b      	ldrh	r3, [r3, #4]
 80041b8:	0a1b      	lsrs	r3, r3, #8
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <create_hk_packet+0x270>)
 80041c0:	771a      	strb	r2, [r3, #28]
	hk.buffer[29] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 80041c2:	4b3d      	ldr	r3, [pc, #244]	; (80042b8 <create_hk_packet+0x27c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	33b0      	adds	r3, #176	; 0xb0
 80041c8:	889b      	ldrh	r3, [r3, #4]
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	4b37      	ldr	r3, [pc, #220]	; (80042ac <create_hk_packet+0x270>)
 80041ce:	775a      	strb	r2, [r3, #29]
	hk.buffer[30] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 80041d0:	4b39      	ldr	r3, [pc, #228]	; (80042b8 <create_hk_packet+0x27c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	33c0      	adds	r3, #192	; 0xc0
 80041d6:	889b      	ldrh	r3, [r3, #4]
 80041d8:	0a1b      	lsrs	r3, r3, #8
 80041da:	b29b      	uxth	r3, r3
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	4b33      	ldr	r3, [pc, #204]	; (80042ac <create_hk_packet+0x270>)
 80041e0:	779a      	strb	r2, [r3, #30]
	hk.buffer[31] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 80041e2:	4b35      	ldr	r3, [pc, #212]	; (80042b8 <create_hk_packet+0x27c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	33c0      	adds	r3, #192	; 0xc0
 80041e8:	889b      	ldrh	r3, [r3, #4]
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	4b2f      	ldr	r3, [pc, #188]	; (80042ac <create_hk_packet+0x270>)
 80041ee:	77da      	strb	r2, [r3, #31]
	hk.buffer[32] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 80041f0:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <create_hk_packet+0x27c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	33d0      	adds	r3, #208	; 0xd0
 80041f6:	889b      	ldrh	r3, [r3, #4]
 80041f8:	0a1b      	lsrs	r3, r3, #8
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <create_hk_packet+0x270>)
 8004200:	f883 2020 	strb.w	r2, [r3, #32]
	hk.buffer[33] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8004204:	4b2c      	ldr	r3, [pc, #176]	; (80042b8 <create_hk_packet+0x27c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	33d0      	adds	r3, #208	; 0xd0
 800420a:	889b      	ldrh	r3, [r3, #4]
 800420c:	b2da      	uxtb	r2, r3
 800420e:	4b27      	ldr	r3, [pc, #156]	; (80042ac <create_hk_packet+0x270>)
 8004210:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	hk.buffer[34] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8004214:	4b28      	ldr	r3, [pc, #160]	; (80042b8 <create_hk_packet+0x27c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	33e0      	adds	r3, #224	; 0xe0
 800421a:	889b      	ldrh	r3, [r3, #4]
 800421c:	0a1b      	lsrs	r3, r3, #8
 800421e:	b29b      	uxth	r3, r3
 8004220:	b2da      	uxtb	r2, r3
 8004222:	4b22      	ldr	r3, [pc, #136]	; (80042ac <create_hk_packet+0x270>)
 8004224:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	hk.buffer[35] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8004228:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <create_hk_packet+0x27c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	33e0      	adds	r3, #224	; 0xe0
 800422e:	889b      	ldrh	r3, [r3, #4]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	4b1e      	ldr	r3, [pc, #120]	; (80042ac <create_hk_packet+0x270>)
 8004234:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	hk.buffer[36] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8004238:	4b1f      	ldr	r3, [pc, #124]	; (80042b8 <create_hk_packet+0x27c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	33f0      	adds	r3, #240	; 0xf0
 800423e:	889b      	ldrh	r3, [r3, #4]
 8004240:	0a1b      	lsrs	r3, r3, #8
 8004242:	b29b      	uxth	r3, r3
 8004244:	b2da      	uxtb	r2, r3
 8004246:	4b19      	ldr	r3, [pc, #100]	; (80042ac <create_hk_packet+0x270>)
 8004248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hk.buffer[37] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 800424c:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <create_hk_packet+0x27c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	33f0      	adds	r3, #240	; 0xf0
 8004252:	889b      	ldrh	r3, [r3, #4]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	4b15      	ldr	r3, [pc, #84]	; (80042ac <create_hk_packet+0x270>)
 8004258:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	hk.buffer[38] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 800425c:	4b16      	ldr	r3, [pc, #88]	; (80042b8 <create_hk_packet+0x27c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004264:	889b      	ldrh	r3, [r3, #4]
 8004266:	0a1b      	lsrs	r3, r3, #8
 8004268:	b29b      	uxth	r3, r3
 800426a:	b2da      	uxtb	r2, r3
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <create_hk_packet+0x270>)
 800426e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	hk.buffer[39] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8004272:	4b11      	ldr	r3, [pc, #68]	; (80042b8 <create_hk_packet+0x27c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800427a:	889b      	ldrh	r3, [r3, #4]
 800427c:	b2da      	uxtb	r2, r3
 800427e:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <create_hk_packet+0x270>)
 8004280:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	hk.buffer[40] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8004284:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <create_hk_packet+0x27c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3320      	adds	r3, #32
 800428a:	889b      	ldrh	r3, [r3, #4]
 800428c:	0a1b      	lsrs	r3, r3, #8
 800428e:	b29b      	uxth	r3, r3
 8004290:	b2da      	uxtb	r2, r3
 8004292:	4b06      	ldr	r3, [pc, #24]	; (80042ac <create_hk_packet+0x270>)
 8004294:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	hk.buffer[41] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8004298:	4b07      	ldr	r3, [pc, #28]	; (80042b8 <create_hk_packet+0x27c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3320      	adds	r3, #32
 800429e:	889b      	ldrh	r3, [r3, #4]
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	4b02      	ldr	r3, [pc, #8]	; (80042ac <create_hk_packet+0x270>)
 80042a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80042a8:	e00a      	b.n	80042c0 <create_hk_packet+0x284>
 80042aa:	bf00      	nop
 80042ac:	24001df4 	.word	0x24001df4
 80042b0:	24001e28 	.word	0x24001e28
 80042b4:	24001e2c 	.word	0x24001e2c
 80042b8:	24001e34 	.word	0x24001e34
 80042bc:	24001d28 	.word	0x24001d28
	hk.buffer[42] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 80042c0:	4b32      	ldr	r3, [pc, #200]	; (800438c <create_hk_packet+0x350>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3330      	adds	r3, #48	; 0x30
 80042c6:	889b      	ldrh	r3, [r3, #4]
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	4b30      	ldr	r3, [pc, #192]	; (8004390 <create_hk_packet+0x354>)
 80042d0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	hk.buffer[43] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 80042d4:	4b2d      	ldr	r3, [pc, #180]	; (800438c <create_hk_packet+0x350>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3330      	adds	r3, #48	; 0x30
 80042da:	889b      	ldrh	r3, [r3, #4]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	4b2c      	ldr	r3, [pc, #176]	; (8004390 <create_hk_packet+0x354>)
 80042e0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	hk.buffer[44] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 80042e4:	4b29      	ldr	r3, [pc, #164]	; (800438c <create_hk_packet+0x350>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3340      	adds	r3, #64	; 0x40
 80042ea:	889b      	ldrh	r3, [r3, #4]
 80042ec:	0a1b      	lsrs	r3, r3, #8
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	4b27      	ldr	r3, [pc, #156]	; (8004390 <create_hk_packet+0x354>)
 80042f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hk.buffer[45] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 80042f8:	4b24      	ldr	r3, [pc, #144]	; (800438c <create_hk_packet+0x350>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3340      	adds	r3, #64	; 0x40
 80042fe:	889b      	ldrh	r3, [r3, #4]
 8004300:	b2da      	uxtb	r2, r3
 8004302:	4b23      	ldr	r3, [pc, #140]	; (8004390 <create_hk_packet+0x354>)
 8004304:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	hk.buffer[46] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8004308:	4b20      	ldr	r3, [pc, #128]	; (800438c <create_hk_packet+0x350>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3350      	adds	r3, #80	; 0x50
 800430e:	889b      	ldrh	r3, [r3, #4]
 8004310:	0a1b      	lsrs	r3, r3, #8
 8004312:	b29b      	uxth	r3, r3
 8004314:	b2da      	uxtb	r2, r3
 8004316:	4b1e      	ldr	r3, [pc, #120]	; (8004390 <create_hk_packet+0x354>)
 8004318:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	hk.buffer[47] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 800431c:	4b1b      	ldr	r3, [pc, #108]	; (800438c <create_hk_packet+0x350>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3350      	adds	r3, #80	; 0x50
 8004322:	889b      	ldrh	r3, [r3, #4]
 8004324:	b2da      	uxtb	r2, r3
 8004326:	4b1a      	ldr	r3, [pc, #104]	; (8004390 <create_hk_packet+0x354>)
 8004328:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	hk.buffer[48] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 800432c:	4b17      	ldr	r3, [pc, #92]	; (800438c <create_hk_packet+0x350>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004334:	889b      	ldrh	r3, [r3, #4]
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	b29b      	uxth	r3, r3
 800433a:	b2da      	uxtb	r2, r3
 800433c:	4b14      	ldr	r3, [pc, #80]	; (8004390 <create_hk_packet+0x354>)
 800433e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hk.buffer[49] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8004342:	4b12      	ldr	r3, [pc, #72]	; (800438c <create_hk_packet+0x350>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800434a:	889b      	ldrh	r3, [r3, #4]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	4b10      	ldr	r3, [pc, #64]	; (8004390 <create_hk_packet+0x354>)
 8004350:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	enqueue(hk);
 8004354:	4e0e      	ldr	r6, [pc, #56]	; (8004390 <create_hk_packet+0x354>)
 8004356:	466c      	mov	r4, sp
 8004358:	f106 0510 	add.w	r5, r6, #16
 800435c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800435e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	8022      	strh	r2, [r4, #0]
 800436a:	3402      	adds	r4, #2
 800436c:	0c1b      	lsrs	r3, r3, #16
 800436e:	7023      	strb	r3, [r4, #0]
 8004370:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8004374:	f000 f836 	bl	80043e4 <enqueue>

	hk_seq++;
 8004378:	4b06      	ldr	r3, [pc, #24]	; (8004394 <create_hk_packet+0x358>)
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	3301      	adds	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	4b04      	ldr	r3, [pc, #16]	; (8004394 <create_hk_packet+0x358>)
 8004382:	801a      	strh	r2, [r3, #0]
}
 8004384:	bf00      	nop
 8004386:	3704      	adds	r7, #4
 8004388:	46bd      	mov	sp, r7
 800438a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800438c:	24001e34 	.word	0x24001e34
 8004390:	24001df4 	.word	0x24001df4
 8004394:	24001d28 	.word	0x24001d28

08004398 <reset_packet_sequence_numbers>:
 *
 * This function sets the sequence counters for the PMT, ERPA, and housekeeping (HK) packets
 * back to zero. It is useful for reinitializing the packet transmission system.
 */
void reset_packet_sequence_numbers()
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <reset_packet_sequence_numbers+0x20>)
 800439e:	2200      	movs	r2, #0
 80043a0:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 80043a2:	4b06      	ldr	r3, [pc, #24]	; (80043bc <reset_packet_sequence_numbers+0x24>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <reset_packet_sequence_numbers+0x28>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	801a      	strh	r2, [r3, #0]
}
 80043ae:	bf00      	nop
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	24001d22 	.word	0x24001d22
 80043bc:	24001d24 	.word	0x24001d24
 80043c0:	24001d28 	.word	0x24001d28

080043c4 <queue_init>:
		.mq_mem = queue_data,
		.mq_size = sizeof(queue_data),
};

void queue_init()
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
	packet_queue = osMessageQueueNew(MAX_MESSAGES, MAX_MESSAGE_SIZE, &queue_attribute);
 80043c8:	4a04      	ldr	r2, [pc, #16]	; (80043dc <queue_init+0x18>)
 80043ca:	2133      	movs	r1, #51	; 0x33
 80043cc:	2010      	movs	r0, #16
 80043ce:	f014 fc63 	bl	8018c98 <osMessageQueueNew>
 80043d2:	4603      	mov	r3, r0
 80043d4:	4a02      	ldr	r2, [pc, #8]	; (80043e0 <queue_init+0x1c>)
 80043d6:	6013      	str	r3, [r2, #0]
}
 80043d8:	bf00      	nop
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	240000c8 	.word	0x240000c8
 80043e0:	240021b8 	.word	0x240021b8

080043e4 <enqueue>:

void enqueue(Packet_t packet)
{
 80043e4:	b084      	sub	sp, #16
 80043e6:	b580      	push	{r7, lr}
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	f107 0c08 	add.w	ip, r7, #8
 80043ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	osMessageQueuePut(packet_queue, &packet, 0U, 0U);
 80043f2:	4b07      	ldr	r3, [pc, #28]	; (8004410 <enqueue+0x2c>)
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	2300      	movs	r3, #0
 80043f8:	2200      	movs	r2, #0
 80043fa:	f107 0108 	add.w	r1, r7, #8
 80043fe:	f014 fcbf 	bl	8018d80 <osMessageQueuePut>
}
 8004402:	bf00      	nop
 8004404:	46bd      	mov	sp, r7
 8004406:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800440a:	b004      	add	sp, #16
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	240021b8 	.word	0x240021b8

08004414 <dequeue>:

Packet_t dequeue()
{
 8004414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004416:	b091      	sub	sp, #68	; 0x44
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
	Packet_t dequeued_packet;
	if(osMessageQueueGet(packet_queue, &dequeued_packet, 0U, 0U) != osOK)
 800441c:	4b14      	ldr	r3, [pc, #80]	; (8004470 <dequeue+0x5c>)
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	f107 010c 	add.w	r1, r7, #12
 8004424:	2300      	movs	r3, #0
 8004426:	2200      	movs	r2, #0
 8004428:	f014 fd0a 	bl	8018e40 <osMessageQueueGet>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <dequeue+0x24>
	{
		dequeued_packet.size = 0;
 8004432:	2300      	movs	r3, #0
 8004434:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}
	return dequeued_packet;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f107 040c 	add.w	r4, r7, #12
 800443e:	469c      	mov	ip, r3
 8004440:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8004444:	4665      	mov	r5, ip
 8004446:	4626      	mov	r6, r4
 8004448:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800444a:	6028      	str	r0, [r5, #0]
 800444c:	6069      	str	r1, [r5, #4]
 800444e:	60aa      	str	r2, [r5, #8]
 8004450:	60eb      	str	r3, [r5, #12]
 8004452:	3410      	adds	r4, #16
 8004454:	f10c 0c10 	add.w	ip, ip, #16
 8004458:	4574      	cmp	r4, lr
 800445a:	d1f3      	bne.n	8004444 <dequeue+0x30>
 800445c:	4663      	mov	r3, ip
 800445e:	4622      	mov	r2, r4
 8004460:	8811      	ldrh	r1, [r2, #0]
 8004462:	7892      	ldrb	r2, [r2, #2]
 8004464:	8019      	strh	r1, [r3, #0]
 8004466:	709a      	strb	r2, [r3, #2]
}
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	3744      	adds	r7, #68	; 0x44
 800446c:	46bd      	mov	sp, r7
 800446e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004470:	240021b8 	.word	0x240021b8

08004474 <MX_RAMECC_Init>:
RAMECC_HandleTypeDef hramecc3_m1;
RAMECC_HandleTypeDef hramecc3_m2;

/* RAMECC init function */
void MX_RAMECC_Init(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RAMECC_Init 0 */
	// ITCM and DTCM will trigger ECC error if not written to on startup
	write_RAM((volatile uint32_t*) ITCM_START_ADDRESS, (volatile uint32_t*) ITCM_END_ADDRESS);
 8004478:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800447c:	2000      	movs	r0, #0
 800447e:	f000 f8e9 	bl	8004654 <write_RAM>
	write_RAM((volatile uint32_t*) DTCM_START_ADDRESS, (volatile uint32_t*) DTCM_END_ADDRESS);
 8004482:	495b      	ldr	r1, [pc, #364]	; (80045f0 <MX_RAMECC_Init+0x17c>)
 8004484:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004488:	f000 f8e4 	bl	8004654 <write_RAM>

  /* USER CODE END RAMECC_Init 1 */

  /** Initialize RAMECC1 M1 : AXI SRAM
  */
  hramecc1_m1.Instance = RAMECC1_Monitor1;
 800448c:	4b59      	ldr	r3, [pc, #356]	; (80045f4 <MX_RAMECC_Init+0x180>)
 800448e:	4a5a      	ldr	r2, [pc, #360]	; (80045f8 <MX_RAMECC_Init+0x184>)
 8004490:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m1) != HAL_OK)
 8004492:	4858      	ldr	r0, [pc, #352]	; (80045f4 <MX_RAMECC_Init+0x180>)
 8004494:	f00a fdd6 	bl	800f044 <HAL_RAMECC_Init>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <MX_RAMECC_Init+0x2e>
  {
    Error_Handler();
 800449e:	f7ff fb03 	bl	8003aa8 <Error_Handler>
  }

  /** Initialize RAMECC1 M2 : ITCM-RAM
  */
  hramecc1_m2.Instance = RAMECC1_Monitor2;
 80044a2:	4b56      	ldr	r3, [pc, #344]	; (80045fc <MX_RAMECC_Init+0x188>)
 80044a4:	4a56      	ldr	r2, [pc, #344]	; (8004600 <MX_RAMECC_Init+0x18c>)
 80044a6:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m2) != HAL_OK)
 80044a8:	4854      	ldr	r0, [pc, #336]	; (80045fc <MX_RAMECC_Init+0x188>)
 80044aa:	f00a fdcb 	bl	800f044 <HAL_RAMECC_Init>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <MX_RAMECC_Init+0x44>
  {
    Error_Handler();
 80044b4:	f7ff faf8 	bl	8003aa8 <Error_Handler>
  }

  /** Initialize RAMECC1 M3 : D0TCM-RAM
  */
  hramecc1_m3.Instance = RAMECC1_Monitor3;
 80044b8:	4b52      	ldr	r3, [pc, #328]	; (8004604 <MX_RAMECC_Init+0x190>)
 80044ba:	4a53      	ldr	r2, [pc, #332]	; (8004608 <MX_RAMECC_Init+0x194>)
 80044bc:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m3) != HAL_OK)
 80044be:	4851      	ldr	r0, [pc, #324]	; (8004604 <MX_RAMECC_Init+0x190>)
 80044c0:	f00a fdc0 	bl	800f044 <HAL_RAMECC_Init>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <MX_RAMECC_Init+0x5a>
  {
    Error_Handler();
 80044ca:	f7ff faed 	bl	8003aa8 <Error_Handler>
  }

  /** Initialize RAMECC1 M4 : D1TCM-RAM
  */
  hramecc1_m4.Instance = RAMECC1_Monitor4;
 80044ce:	4b4f      	ldr	r3, [pc, #316]	; (800460c <MX_RAMECC_Init+0x198>)
 80044d0:	4a4f      	ldr	r2, [pc, #316]	; (8004610 <MX_RAMECC_Init+0x19c>)
 80044d2:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m4) != HAL_OK)
 80044d4:	484d      	ldr	r0, [pc, #308]	; (800460c <MX_RAMECC_Init+0x198>)
 80044d6:	f00a fdb5 	bl	800f044 <HAL_RAMECC_Init>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <MX_RAMECC_Init+0x70>
  {
    Error_Handler();
 80044e0:	f7ff fae2 	bl	8003aa8 <Error_Handler>
  }

  /** Initialize RAMECC1 M5 : ETM RAM
  */
  hramecc1_m5.Instance = RAMECC1_Monitor5;
 80044e4:	4b4b      	ldr	r3, [pc, #300]	; (8004614 <MX_RAMECC_Init+0x1a0>)
 80044e6:	4a4c      	ldr	r2, [pc, #304]	; (8004618 <MX_RAMECC_Init+0x1a4>)
 80044e8:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m5) != HAL_OK)
 80044ea:	484a      	ldr	r0, [pc, #296]	; (8004614 <MX_RAMECC_Init+0x1a0>)
 80044ec:	f00a fdaa 	bl	800f044 <HAL_RAMECC_Init>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <MX_RAMECC_Init+0x86>
  {
    Error_Handler();
 80044f6:	f7ff fad7 	bl	8003aa8 <Error_Handler>
  }

  /** Initialize RAMECC2 M1 : SRAM1_0
  */
  hramecc2_m1.Instance = RAMECC2_Monitor1;
 80044fa:	4b48      	ldr	r3, [pc, #288]	; (800461c <MX_RAMECC_Init+0x1a8>)
 80044fc:	4a48      	ldr	r2, [pc, #288]	; (8004620 <MX_RAMECC_Init+0x1ac>)
 80044fe:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m1) != HAL_OK)
 8004500:	4846      	ldr	r0, [pc, #280]	; (800461c <MX_RAMECC_Init+0x1a8>)
 8004502:	f00a fd9f 	bl	800f044 <HAL_RAMECC_Init>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <MX_RAMECC_Init+0x9c>
  {
    Error_Handler();
 800450c:	f7ff facc 	bl	8003aa8 <Error_Handler>
  }

  /** Initialize RAMECC2 M2 SRAM1_1
  */
  hramecc2_m2.Instance = RAMECC2_Monitor2;
 8004510:	4b44      	ldr	r3, [pc, #272]	; (8004624 <MX_RAMECC_Init+0x1b0>)
 8004512:	4a45      	ldr	r2, [pc, #276]	; (8004628 <MX_RAMECC_Init+0x1b4>)
 8004514:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m2) != HAL_OK)
 8004516:	4843      	ldr	r0, [pc, #268]	; (8004624 <MX_RAMECC_Init+0x1b0>)
 8004518:	f00a fd94 	bl	800f044 <HAL_RAMECC_Init>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <MX_RAMECC_Init+0xb2>
  {
    Error_Handler();
 8004522:	f7ff fac1 	bl	8003aa8 <Error_Handler>
  }

  /** Initialize RAMECC2 M3 : SRAM2_0
  */
  hramecc2_m3.Instance = RAMECC2_Monitor3;
 8004526:	4b41      	ldr	r3, [pc, #260]	; (800462c <MX_RAMECC_Init+0x1b8>)
 8004528:	4a41      	ldr	r2, [pc, #260]	; (8004630 <MX_RAMECC_Init+0x1bc>)
 800452a:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m3) != HAL_OK)
 800452c:	483f      	ldr	r0, [pc, #252]	; (800462c <MX_RAMECC_Init+0x1b8>)
 800452e:	f00a fd89 	bl	800f044 <HAL_RAMECC_Init>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <MX_RAMECC_Init+0xc8>
  {
    Error_Handler();
 8004538:	f7ff fab6 	bl	8003aa8 <Error_Handler>
  }

  /** Initialize RAMECC2 M4 : SRAM2_1
  */
  hramecc2_m4.Instance = RAMECC2_Monitor4;
 800453c:	4b3d      	ldr	r3, [pc, #244]	; (8004634 <MX_RAMECC_Init+0x1c0>)
 800453e:	4a3e      	ldr	r2, [pc, #248]	; (8004638 <MX_RAMECC_Init+0x1c4>)
 8004540:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m4) != HAL_OK)
 8004542:	483c      	ldr	r0, [pc, #240]	; (8004634 <MX_RAMECC_Init+0x1c0>)
 8004544:	f00a fd7e 	bl	800f044 <HAL_RAMECC_Init>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <MX_RAMECC_Init+0xde>
  {
    Error_Handler();
 800454e:	f7ff faab 	bl	8003aa8 <Error_Handler>
  }

  /** Initialize RAMECC2 M5 : SRAM3
  */
  hramecc2_m5.Instance = RAMECC2_Monitor5;
 8004552:	4b3a      	ldr	r3, [pc, #232]	; (800463c <MX_RAMECC_Init+0x1c8>)
 8004554:	4a3a      	ldr	r2, [pc, #232]	; (8004640 <MX_RAMECC_Init+0x1cc>)
 8004556:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m5) != HAL_OK)
 8004558:	4838      	ldr	r0, [pc, #224]	; (800463c <MX_RAMECC_Init+0x1c8>)
 800455a:	f00a fd73 	bl	800f044 <HAL_RAMECC_Init>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <MX_RAMECC_Init+0xf4>
  {
    Error_Handler();
 8004564:	f7ff faa0 	bl	8003aa8 <Error_Handler>
  }

  /** Initialize RAMECC3 M1 : SRAM4
  */
  hramecc3_m1.Instance = RAMECC3_Monitor1;
 8004568:	4b36      	ldr	r3, [pc, #216]	; (8004644 <MX_RAMECC_Init+0x1d0>)
 800456a:	4a37      	ldr	r2, [pc, #220]	; (8004648 <MX_RAMECC_Init+0x1d4>)
 800456c:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m1) != HAL_OK)
 800456e:	4835      	ldr	r0, [pc, #212]	; (8004644 <MX_RAMECC_Init+0x1d0>)
 8004570:	f00a fd68 	bl	800f044 <HAL_RAMECC_Init>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <MX_RAMECC_Init+0x10a>
  {
    Error_Handler();
 800457a:	f7ff fa95 	bl	8003aa8 <Error_Handler>
  }

  /** Initialize RAMECC3 M2 : Backup RAM
  */
  hramecc3_m2.Instance = RAMECC3_Monitor2;
 800457e:	4b33      	ldr	r3, [pc, #204]	; (800464c <MX_RAMECC_Init+0x1d8>)
 8004580:	4a33      	ldr	r2, [pc, #204]	; (8004650 <MX_RAMECC_Init+0x1dc>)
 8004582:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m2) != HAL_OK)
 8004584:	4831      	ldr	r0, [pc, #196]	; (800464c <MX_RAMECC_Init+0x1d8>)
 8004586:	f00a fd5d 	bl	800f044 <HAL_RAMECC_Init>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <MX_RAMECC_Init+0x120>
  {
    Error_Handler();
 8004590:	f7ff fa8a 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */
	HAL_NVIC_SetPriority(ECC_IRQn, 0, 0);
 8004594:	2200      	movs	r2, #0
 8004596:	2100      	movs	r1, #0
 8004598:	2091      	movs	r0, #145	; 0x91
 800459a:	f003 ffe3 	bl	8008564 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ECC_IRQn);
 800459e:	2091      	movs	r0, #145	; 0x91
 80045a0:	f003 fffa 	bl	8008598 <HAL_NVIC_EnableIRQ>

	enable_ramecc_monitor_notifications(&hramecc1_m1);
 80045a4:	4813      	ldr	r0, [pc, #76]	; (80045f4 <MX_RAMECC_Init+0x180>)
 80045a6:	f000 f86d 	bl	8004684 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc1_m2);
 80045aa:	4814      	ldr	r0, [pc, #80]	; (80045fc <MX_RAMECC_Init+0x188>)
 80045ac:	f000 f86a 	bl	8004684 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc1_m3);
 80045b0:	4814      	ldr	r0, [pc, #80]	; (8004604 <MX_RAMECC_Init+0x190>)
 80045b2:	f000 f867 	bl	8004684 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc1_m4);
 80045b6:	4815      	ldr	r0, [pc, #84]	; (800460c <MX_RAMECC_Init+0x198>)
 80045b8:	f000 f864 	bl	8004684 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc1_m5);
 80045bc:	4815      	ldr	r0, [pc, #84]	; (8004614 <MX_RAMECC_Init+0x1a0>)
 80045be:	f000 f861 	bl	8004684 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m1);
 80045c2:	4816      	ldr	r0, [pc, #88]	; (800461c <MX_RAMECC_Init+0x1a8>)
 80045c4:	f000 f85e 	bl	8004684 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m2);
 80045c8:	4816      	ldr	r0, [pc, #88]	; (8004624 <MX_RAMECC_Init+0x1b0>)
 80045ca:	f000 f85b 	bl	8004684 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m3);
 80045ce:	4817      	ldr	r0, [pc, #92]	; (800462c <MX_RAMECC_Init+0x1b8>)
 80045d0:	f000 f858 	bl	8004684 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m4);
 80045d4:	4817      	ldr	r0, [pc, #92]	; (8004634 <MX_RAMECC_Init+0x1c0>)
 80045d6:	f000 f855 	bl	8004684 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m5);
 80045da:	4818      	ldr	r0, [pc, #96]	; (800463c <MX_RAMECC_Init+0x1c8>)
 80045dc:	f000 f852 	bl	8004684 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc3_m1);
 80045e0:	4818      	ldr	r0, [pc, #96]	; (8004644 <MX_RAMECC_Init+0x1d0>)
 80045e2:	f000 f84f 	bl	8004684 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc3_m2);
 80045e6:	4819      	ldr	r0, [pc, #100]	; (800464c <MX_RAMECC_Init+0x1d8>)
 80045e8:	f000 f84c 	bl	8004684 <enable_ramecc_monitor_notifications>
  /* USER CODE END RAMECC_Init 2 */

}
 80045ec:	bf00      	nop
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	2001ffff 	.word	0x2001ffff
 80045f4:	240021bc 	.word	0x240021bc
 80045f8:	52009020 	.word	0x52009020
 80045fc:	240021cc 	.word	0x240021cc
 8004600:	52009040 	.word	0x52009040
 8004604:	240021dc 	.word	0x240021dc
 8004608:	52009060 	.word	0x52009060
 800460c:	240021ec 	.word	0x240021ec
 8004610:	52009080 	.word	0x52009080
 8004614:	240021fc 	.word	0x240021fc
 8004618:	520090a0 	.word	0x520090a0
 800461c:	2400220c 	.word	0x2400220c
 8004620:	48023020 	.word	0x48023020
 8004624:	2400221c 	.word	0x2400221c
 8004628:	48023040 	.word	0x48023040
 800462c:	2400222c 	.word	0x2400222c
 8004630:	48023060 	.word	0x48023060
 8004634:	2400223c 	.word	0x2400223c
 8004638:	48023080 	.word	0x48023080
 800463c:	2400224c 	.word	0x2400224c
 8004640:	480230a0 	.word	0x480230a0
 8004644:	2400225c 	.word	0x2400225c
 8004648:	58027020 	.word	0x58027020
 800464c:	2400226c 	.word	0x2400226c
 8004650:	58027040 	.word	0x58027040

08004654 <write_RAM>:
 *
 * @param start Pointer to the starting address of the RAM range.
 * @param end Pointer to the ending address of the RAM range.
 */
void write_RAM(volatile uint32_t *start, volatile uint32_t *end)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
	while (start <= end)
 800465e:	e005      	b.n	800466c <write_RAM+0x18>
	{
		*start = 0;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
		start++;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3304      	adds	r3, #4
 800466a:	607b      	str	r3, [r7, #4]
	while (start <= end)
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d9f5      	bls.n	8004660 <write_RAM+0xc>
	}
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
	...

08004684 <enable_ramecc_monitor_notifications>:
 * @brief Enables notifications for RAMECC monitoring.
 *
 * @param hramecc Pointer to the RAMECC handle.
 */
void enable_ramecc_monitor_notifications(RAMECC_HandleTypeDef *hramecc)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	if (HAL_RAMECC_EnableNotification(hramecc, (RAMECC_IT_MONITOR_SINGLEERR_R | RAMECC_IT_MONITOR_DOUBLEERR_R)) != HAL_OK)
 800468c:	490a      	ldr	r1, [pc, #40]	; (80046b8 <enable_ramecc_monitor_notifications+0x34>)
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f00a fd3c 	bl	800f10c <HAL_RAMECC_EnableNotification>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <enable_ramecc_monitor_notifications+0x1a>
	{
		Error_Handler();
 800469a:	f7ff fa05 	bl	8003aa8 <Error_Handler>
	}
	if (HAL_RAMECC_StartMonitor(hramecc) != HAL_OK)
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f00a fd10 	bl	800f0c4 <HAL_RAMECC_StartMonitor>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <enable_ramecc_monitor_notifications+0x2a>
	{
		Error_Handler();
 80046aa:	f7ff f9fd 	bl	8003aa8 <Error_Handler>
	}
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	2000000c 	.word	0x2000000c

080046bc <HAL_RAMECC_DetectErrorCallback>:
 * This function handles single and double bit errors detected by RAMECC.
 *
 * @param hramecc Pointer to the RAMECC handle.
 */
void HAL_RAMECC_DetectErrorCallback(RAMECC_HandleTypeDef *hramecc)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
	ERROR_STRUCT error;
	error.category = EC_seu;
 80046c4:	2301      	movs	r3, #1
 80046c6:	723b      	strb	r3, [r7, #8]
	if ((HAL_RAMECC_GetRAMECCError(hramecc) & HAL_RAMECC_SINGLEERROR_DETECTED) != 0U)
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f00a fdbb 	bl	800f244 <HAL_RAMECC_GetRAMECCError>
 80046ce:	4603      	mov	r3, r0
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <HAL_RAMECC_DetectErrorCallback+0x20>
	{
		error.detail = ED_single_bit_error_ram;
 80046d8:	231a      	movs	r3, #26
 80046da:	727b      	strb	r3, [r7, #9]
	}

	if ((HAL_RAMECC_GetRAMECCError(hramecc) & HAL_RAMECC_DOUBLEERROR_DETECTED) != 0U)
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f00a fdb1 	bl	800f244 <HAL_RAMECC_GetRAMECCError>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <HAL_RAMECC_DetectErrorCallback+0x34>
	{
		error.detail = ED_double_bit_error_ram;
 80046ec:	231b      	movs	r3, #27
 80046ee:	727b      	strb	r3, [r7, #9]
	}
	handle_error(error);
 80046f0:	f107 0308 	add.w	r3, r7, #8
 80046f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80046f8:	f7fd fc1a 	bl	8001f30 <handle_error>
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800470a:	1d3b      	adds	r3, r7, #4
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	60da      	str	r2, [r3, #12]
 8004716:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004718:	2300      	movs	r3, #0
 800471a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800471c:	4b26      	ldr	r3, [pc, #152]	; (80047b8 <MX_RTC_Init+0xb4>)
 800471e:	4a27      	ldr	r2, [pc, #156]	; (80047bc <MX_RTC_Init+0xb8>)
 8004720:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004722:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <MX_RTC_Init+0xb4>)
 8004724:	2200      	movs	r2, #0
 8004726:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8004728:	4b23      	ldr	r3, [pc, #140]	; (80047b8 <MX_RTC_Init+0xb4>)
 800472a:	2263      	movs	r2, #99	; 0x63
 800472c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 800472e:	4b22      	ldr	r3, [pc, #136]	; (80047b8 <MX_RTC_Init+0xb4>)
 8004730:	f242 720f 	movw	r2, #9999	; 0x270f
 8004734:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004736:	4b20      	ldr	r3, [pc, #128]	; (80047b8 <MX_RTC_Init+0xb4>)
 8004738:	2200      	movs	r2, #0
 800473a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800473c:	4b1e      	ldr	r3, [pc, #120]	; (80047b8 <MX_RTC_Init+0xb4>)
 800473e:	2200      	movs	r2, #0
 8004740:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004742:	4b1d      	ldr	r3, [pc, #116]	; (80047b8 <MX_RTC_Init+0xb4>)
 8004744:	2200      	movs	r2, #0
 8004746:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004748:	4b1b      	ldr	r3, [pc, #108]	; (80047b8 <MX_RTC_Init+0xb4>)
 800474a:	2200      	movs	r2, #0
 800474c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800474e:	481a      	ldr	r0, [pc, #104]	; (80047b8 <MX_RTC_Init+0xb4>)
 8004750:	f00e faaa 	bl	8012ca8 <HAL_RTC_Init>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800475a:	f7ff f9a5 	bl	8003aa8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800475e:	2300      	movs	r3, #0
 8004760:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8004762:	2300      	movs	r3, #0
 8004764:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004766:	2300      	movs	r3, #0
 8004768:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004772:	1d3b      	adds	r3, r7, #4
 8004774:	2201      	movs	r2, #1
 8004776:	4619      	mov	r1, r3
 8004778:	480f      	ldr	r0, [pc, #60]	; (80047b8 <MX_RTC_Init+0xb4>)
 800477a:	f00e fb17 	bl	8012dac <HAL_RTC_SetTime>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8004784:	f7ff f990 	bl	8003aa8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004788:	2301      	movs	r3, #1
 800478a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800478c:	2301      	movs	r3, #1
 800478e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8004790:	2301      	movs	r3, #1
 8004792:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8004794:	2300      	movs	r3, #0
 8004796:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004798:	463b      	mov	r3, r7
 800479a:	2201      	movs	r2, #1
 800479c:	4619      	mov	r1, r3
 800479e:	4806      	ldr	r0, [pc, #24]	; (80047b8 <MX_RTC_Init+0xb4>)
 80047a0:	f00e fbfe 	bl	8012fa0 <HAL_RTC_SetDate>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80047aa:	f7ff f97d 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80047ae:	bf00      	nop
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	2400227c 	.word	0x2400227c
 80047bc:	58004000 	.word	0x58004000

080047c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b0b2      	sub	sp, #200	; 0xc8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047c8:	f107 0308 	add.w	r3, r7, #8
 80047cc:	22c0      	movs	r2, #192	; 0xc0
 80047ce:	2100      	movs	r1, #0
 80047d0:	4618      	mov	r0, r3
 80047d2:	f017 fd35 	bl	801c240 <memset>
  if(rtcHandle->Instance==RTC)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a10      	ldr	r2, [pc, #64]	; (800481c <HAL_RTC_MspInit+0x5c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d118      	bne.n	8004812 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80047e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80047ec:	4b0c      	ldr	r3, [pc, #48]	; (8004820 <HAL_RTC_MspInit+0x60>)
 80047ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047f2:	f107 0308 	add.w	r3, r7, #8
 80047f6:	4618      	mov	r0, r3
 80047f8:	f00b fd58 	bl	80102ac <HAL_RCCEx_PeriphCLKConfig>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8004802:	f7ff f951 	bl	8003aa8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004806:	4b07      	ldr	r3, [pc, #28]	; (8004824 <HAL_RTC_MspInit+0x64>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	4a06      	ldr	r2, [pc, #24]	; (8004824 <HAL_RTC_MspInit+0x64>)
 800480c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004810:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004812:	bf00      	nop
 8004814:	37c8      	adds	r7, #200	; 0xc8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	58004000 	.word	0x58004000
 8004820:	00019300 	.word	0x00019300
 8004824:	58024400 	.word	0x58024400

08004828 <init_adc_dma>:
 *
 * This function calibrates and starts DMA for ADC1 and ADC3.
 * It also enables the SPI peripherals.
 */
void init_adc_dma()
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 800482c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004830:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004834:	481c      	ldr	r0, [pc, #112]	; (80048a8 <init_adc_dma+0x80>)
 8004836:	f003 fc9b 	bl	8008170 <HAL_ADCEx_Calibration_Start>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <init_adc_dma+0x1c>
	{
		Error_Handler();
 8004840:	f7ff f932 	bl	8003aa8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data, ADC1_NUM_CHANNELS) != HAL_OK)
 8004844:	220b      	movs	r2, #11
 8004846:	4919      	ldr	r1, [pc, #100]	; (80048ac <init_adc_dma+0x84>)
 8004848:	4817      	ldr	r0, [pc, #92]	; (80048a8 <init_adc_dma+0x80>)
 800484a:	f002 fd6f 	bl	800732c <HAL_ADC_Start_DMA>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <init_adc_dma+0x30>
	{
		Error_Handler();
 8004854:	f7ff f928 	bl	8003aa8 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED) != HAL_OK)
 8004858:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800485c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004860:	4813      	ldr	r0, [pc, #76]	; (80048b0 <init_adc_dma+0x88>)
 8004862:	f003 fc85 	bl	8008170 <HAL_ADCEx_Calibration_Start>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <init_adc_dma+0x48>
	{
		Error_Handler();
 800486c:	f7ff f91c 	bl	8003aa8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data, ADC3_NUM_CHANNELS) != HAL_OK)
 8004870:	2204      	movs	r2, #4
 8004872:	4910      	ldr	r1, [pc, #64]	; (80048b4 <init_adc_dma+0x8c>)
 8004874:	480e      	ldr	r0, [pc, #56]	; (80048b0 <init_adc_dma+0x88>)
 8004876:	f002 fd59 	bl	800732c <HAL_ADC_Start_DMA>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <init_adc_dma+0x5c>
	{
		Error_Handler();
 8004880:	f7ff f912 	bl	8003aa8 <Error_Handler>
	}

	hspi2.Instance->CR1 |= 1 << 10;
 8004884:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <init_adc_dma+0x90>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <init_adc_dma+0x90>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004892:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8004894:	4b09      	ldr	r3, [pc, #36]	; (80048bc <init_adc_dma+0x94>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4b08      	ldr	r3, [pc, #32]	; (80048bc <init_adc_dma+0x94>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048a2:	601a      	str	r2, [r3, #0]
}
 80048a4:	bf00      	nop
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	2400011c 	.word	0x2400011c
 80048ac:	240022a0 	.word	0x240022a0
 80048b0:	24000180 	.word	0x24000180
 80048b4:	240022c0 	.word	0x240022c0
 80048b8:	2400235c 	.word	0x2400235c
 80048bc:	240022d4 	.word	0x240022d4

080048c0 <sample_pmt_spi>:
 * @brief Samples PMT data via SPI.
 *
 * @param buffer Pointer to store the sampled data.
 */
void sample_pmt_spi(uint8_t *buffer)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 80048c8:	2201      	movs	r2, #1
 80048ca:	490b      	ldr	r1, [pc, #44]	; (80048f8 <sample_pmt_spi+0x38>)
 80048cc:	480b      	ldr	r0, [pc, #44]	; (80048fc <sample_pmt_spi+0x3c>)
 80048ce:	f00e fe31 	bl	8013534 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 80048d2:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <sample_pmt_spi+0x38>)
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	0a1b      	lsrs	r3, r3, #8
 80048d8:	b29b      	uxth	r3, r3
 80048da:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <sample_pmt_spi+0x38>)
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	73bb      	strb	r3, [r7, #14]

	buffer[0] = spi_LSB;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	7bfa      	ldrb	r2, [r7, #15]
 80048e6:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3301      	adds	r3, #1
 80048ec:	7bba      	ldrb	r2, [r7, #14]
 80048ee:	701a      	strb	r2, [r3, #0]
}
 80048f0:	bf00      	nop
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	240022cc 	.word	0x240022cc
 80048fc:	240022d4 	.word	0x240022d4

08004900 <sample_erpa_spi>:
 * @brief Samples ERPA data via SPI.
 *
 * @param buffer Pointer to store the sampled data.
 */
void sample_erpa_spi(uint8_t *buffer)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 8004908:	2201      	movs	r2, #1
 800490a:	490b      	ldr	r1, [pc, #44]	; (8004938 <sample_erpa_spi+0x38>)
 800490c:	480b      	ldr	r0, [pc, #44]	; (800493c <sample_erpa_spi+0x3c>)
 800490e:	f00e fe11 	bl	8013534 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <sample_erpa_spi+0x38>)
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	b29b      	uxth	r3, r3
 800491a:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 800491c:	4b06      	ldr	r3, [pc, #24]	; (8004938 <sample_erpa_spi+0x38>)
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	73bb      	strb	r3, [r7, #14]

	buffer[0] = spi_LSB;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	7bfa      	ldrb	r2, [r7, #15]
 8004926:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3301      	adds	r3, #1
 800492c:	7bba      	ldrb	r2, [r7, #14]
 800492e:	701a      	strb	r2, [r3, #0]
}
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	240022c8 	.word	0x240022c8
 800493c:	2400235c 	.word	0x2400235c

08004940 <sample_erpa_adc>:
 * @brief Samples ERPA data from ADC.
 *
 * @param buffer Pointer to store the sampled data.
 */
void sample_erpa_adc(uint16_t *buffer)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8004948:	4b05      	ldr	r3, [pc, #20]	; (8004960 <sample_erpa_adc+0x20>)
 800494a:	885b      	ldrh	r3, [r3, #2]
 800494c:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	89fa      	ldrh	r2, [r7, #14]
 8004952:	801a      	strh	r2, [r3, #0]
}
 8004954:	bf00      	nop
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	240022a0 	.word	0x240022a0

08004964 <sample_hk_i2c>:
 * @brief Samples HK data from I2C sensors.
 *
 * @param buffer Pointer to store the sampled data from sensors.
 */
void sample_hk_i2c(int16_t *buffer)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 800496c:	2390      	movs	r3, #144	; 0x90
 800496e:	4618      	mov	r0, r3
 8004970:	f000 f8a2 	bl	8004ab8 <poll_i2c_sensor>
 8004974:	4603      	mov	r3, r0
 8004976:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8004978:	2394      	movs	r3, #148	; 0x94
 800497a:	4618      	mov	r0, r3
 800497c:	f000 f89c 	bl	8004ab8 <poll_i2c_sensor>
 8004980:	4603      	mov	r3, r0
 8004982:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8004984:	2392      	movs	r3, #146	; 0x92
 8004986:	4618      	mov	r0, r3
 8004988:	f000 f896 	bl	8004ab8 <poll_i2c_sensor>
 800498c:	4603      	mov	r3, r0
 800498e:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8004990:	2396      	movs	r3, #150	; 0x96
 8004992:	4618      	mov	r0, r3
 8004994:	f000 f890 	bl	8004ab8 <poll_i2c_sensor>
 8004998:	4603      	mov	r3, r0
 800499a:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	89fa      	ldrh	r2, [r7, #14]
 80049a0:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3302      	adds	r3, #2
 80049a6:	89ba      	ldrh	r2, [r7, #12]
 80049a8:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3304      	adds	r3, #4
 80049ae:	897a      	ldrh	r2, [r7, #10]
 80049b0:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3306      	adds	r3, #6
 80049b6:	893a      	ldrh	r2, [r7, #8]
 80049b8:	801a      	strh	r2, [r3, #0]
}
 80049ba:	bf00      	nop
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <sample_hk_adc1>:
 * @brief Samples HK data from ADC1 channels.
 *
 * @param buffer Pointer to store the sampled ADC values.
 */
void sample_hk_adc1(uint16_t *buffer)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b089      	sub	sp, #36	; 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 80049cc:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <sample_hk_adc1+0xa0>)
 80049ce:	8a9b      	ldrh	r3, [r3, #20]
 80049d0:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 80049d2:	4b24      	ldr	r3, [pc, #144]	; (8004a64 <sample_hk_adc1+0xa0>)
 80049d4:	8a1b      	ldrh	r3, [r3, #16]
 80049d6:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 80049d8:	4b22      	ldr	r3, [pc, #136]	; (8004a64 <sample_hk_adc1+0xa0>)
 80049da:	899b      	ldrh	r3, [r3, #12]
 80049dc:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 80049de:	4b21      	ldr	r3, [pc, #132]	; (8004a64 <sample_hk_adc1+0xa0>)
 80049e0:	8a5b      	ldrh	r3, [r3, #18]
 80049e2:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 80049e4:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <sample_hk_adc1+0xa0>)
 80049e6:	889b      	ldrh	r3, [r3, #4]
 80049e8:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 80049ea:	4b1e      	ldr	r3, [pc, #120]	; (8004a64 <sample_hk_adc1+0xa0>)
 80049ec:	88db      	ldrh	r3, [r3, #6]
 80049ee:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 80049f0:	4b1c      	ldr	r3, [pc, #112]	; (8004a64 <sample_hk_adc1+0xa0>)
 80049f2:	89db      	ldrh	r3, [r3, #14]
 80049f4:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 80049f6:	4b1b      	ldr	r3, [pc, #108]	; (8004a64 <sample_hk_adc1+0xa0>)
 80049f8:	891b      	ldrh	r3, [r3, #8]
 80049fa:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80049fc:	4b19      	ldr	r3, [pc, #100]	; (8004a64 <sample_hk_adc1+0xa0>)
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8004a02:	4b18      	ldr	r3, [pc, #96]	; (8004a64 <sample_hk_adc1+0xa0>)
 8004a04:	895b      	ldrh	r3, [r3, #10]
 8004a06:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	8bfa      	ldrh	r2, [r7, #30]
 8004a0c:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3302      	adds	r3, #2
 8004a12:	8bba      	ldrh	r2, [r7, #28]
 8004a14:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	8b7a      	ldrh	r2, [r7, #26]
 8004a1c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3306      	adds	r3, #6
 8004a22:	8b3a      	ldrh	r2, [r7, #24]
 8004a24:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3308      	adds	r3, #8
 8004a2a:	8afa      	ldrh	r2, [r7, #22]
 8004a2c:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	330a      	adds	r3, #10
 8004a32:	8aba      	ldrh	r2, [r7, #20]
 8004a34:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	330c      	adds	r3, #12
 8004a3a:	8a7a      	ldrh	r2, [r7, #18]
 8004a3c:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	330e      	adds	r3, #14
 8004a42:	8a3a      	ldrh	r2, [r7, #16]
 8004a44:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3310      	adds	r3, #16
 8004a4a:	89fa      	ldrh	r2, [r7, #14]
 8004a4c:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3312      	adds	r3, #18
 8004a52:	89ba      	ldrh	r2, [r7, #12]
 8004a54:	801a      	strh	r2, [r3, #0]
}
 8004a56:	bf00      	nop
 8004a58:	3724      	adds	r7, #36	; 0x24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	240022a0 	.word	0x240022a0

08004a68 <sample_hk_adc3>:
 * @brief Samples HK data from ADC3 channels.
 *
 * @param buffer Pointer to store the sampled ADC values.
 */
void sample_hk_adc3(uint16_t *buffer)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	uint16_t vsense = ADC3_raw_data[0];
 8004a70:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <sample_hk_adc3+0x4c>)
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	81fb      	strh	r3, [r7, #14]
	uint16_t vrefint = ADC3_raw_data[1];
 8004a76:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <sample_hk_adc3+0x4c>)
 8004a78:	885b      	ldrh	r3, [r3, #2]
 8004a7a:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8004a7c:	4b0d      	ldr	r3, [pc, #52]	; (8004ab4 <sample_hk_adc3+0x4c>)
 8004a7e:	889b      	ldrh	r3, [r3, #4]
 8004a80:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8004a82:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <sample_hk_adc3+0x4c>)
 8004a84:	88db      	ldrh	r3, [r3, #6]
 8004a86:	813b      	strh	r3, [r7, #8]

	buffer[0] = vsense;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	89fa      	ldrh	r2, [r7, #14]
 8004a8c:	801a      	strh	r2, [r3, #0]
	buffer[1] = vrefint;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3302      	adds	r3, #2
 8004a92:	89ba      	ldrh	r2, [r7, #12]
 8004a94:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	897a      	ldrh	r2, [r7, #10]
 8004a9c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3306      	adds	r3, #6
 8004aa2:	893a      	ldrh	r2, [r7, #8]
 8004aa4:	801a      	strh	r2, [r3, #0]
}
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	240022c0 	.word	0x240022c0

08004ab8 <poll_i2c_sensor>:
 *
 * @param TEMP_ADDR I2C address of the temperature sensor.
 * @return int16_t The temperature data received from the sensor.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	4b1f      	ldr	r3, [pc, #124]	; (8004b44 <poll_i2c_sensor+0x8c>)
 8004ac6:	701a      	strb	r2, [r3, #0]

	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	b299      	uxth	r1, r3
 8004acc:	2301      	movs	r3, #1
 8004ace:	4a1d      	ldr	r2, [pc, #116]	; (8004b44 <poll_i2c_sensor+0x8c>)
 8004ad0:	481d      	ldr	r0, [pc, #116]	; (8004b48 <poll_i2c_sensor+0x90>)
 8004ad2:	f007 ff19 	bl	800c908 <HAL_I2C_Master_Transmit_DMA>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK)
 8004ada:	7b7b      	ldrb	r3, [r7, #13]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <poll_i2c_sensor+0x2e>
	{
		Error_Handler();
 8004ae0:	f7fe ffe2 	bl	8003aa8 <Error_Handler>
 8004ae4:	e027      	b.n	8004b36 <poll_i2c_sensor+0x7e>
	}
	else
	{
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004ae6:	bf00      	nop
 8004ae8:	4817      	ldr	r0, [pc, #92]	; (8004b48 <poll_i2c_sensor+0x90>)
 8004aea:	f008 f9f4 	bl	800ced6 <HAL_I2C_GetState>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d1f9      	bne.n	8004ae8 <poll_i2c_sensor+0x30>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	b299      	uxth	r1, r3
 8004af8:	2302      	movs	r3, #2
 8004afa:	4a12      	ldr	r2, [pc, #72]	; (8004b44 <poll_i2c_sensor+0x8c>)
 8004afc:	4812      	ldr	r0, [pc, #72]	; (8004b48 <poll_i2c_sensor+0x90>)
 8004afe:	f008 f817 	bl	800cb30 <HAL_I2C_Master_Receive_DMA>
 8004b02:	4603      	mov	r3, r0
 8004b04:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK)
 8004b06:	7b7b      	ldrb	r3, [r7, #13]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <poll_i2c_sensor+0x5a>
		{
			Error_Handler();
 8004b0c:	f7fe ffcc 	bl	8003aa8 <Error_Handler>
 8004b10:	e011      	b.n	8004b36 <poll_i2c_sensor+0x7e>
		}
		else
		{
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004b12:	bf00      	nop
 8004b14:	480c      	ldr	r0, [pc, #48]	; (8004b48 <poll_i2c_sensor+0x90>)
 8004b16:	f008 f9de 	bl	800ced6 <HAL_I2C_GetState>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d1f9      	bne.n	8004b14 <poll_i2c_sensor+0x5c>
			output = (int16_t) (raw_i2c[0] << 8);
 8004b20:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <poll_i2c_sensor+0x8c>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 8004b28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b2c:	4a05      	ldr	r2, [pc, #20]	; (8004b44 <poll_i2c_sensor+0x8c>)
 8004b2e:	7852      	ldrb	r2, [r2, #1]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	10db      	asrs	r3, r3, #3
 8004b34:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8004b36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	240022d0 	.word	0x240022d0
 8004b48:	24001b74 	.word	0x24001b74

08004b4c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004b50:	4b28      	ldr	r3, [pc, #160]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004b52:	4a29      	ldr	r2, [pc, #164]	; (8004bf8 <MX_SPI1_Init+0xac>)
 8004b54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004b56:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004b58:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004b5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004b5e:	4b25      	ldr	r3, [pc, #148]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004b60:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004b64:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004b66:	4b23      	ldr	r3, [pc, #140]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004b68:	220f      	movs	r2, #15
 8004b6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b6c:	4b21      	ldr	r3, [pc, #132]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b72:	4b20      	ldr	r3, [pc, #128]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004b78:	4b1e      	ldr	r3, [pc, #120]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004b7a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004b7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004b80:	4b1c      	ldr	r3, [pc, #112]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004b82:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004b86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b88:	4b1a      	ldr	r3, [pc, #104]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b8e:	4b19      	ldr	r3, [pc, #100]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b94:	4b17      	ldr	r3, [pc, #92]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004b9a:	4b16      	ldr	r3, [pc, #88]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004ba0:	4b14      	ldr	r3, [pc, #80]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004ba2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ba6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004ba8:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004bae:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004bb4:	4b0f      	ldr	r3, [pc, #60]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004bba:	4b0e      	ldr	r3, [pc, #56]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004bc0:	4b0c      	ldr	r3, [pc, #48]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004bcc:	4b09      	ldr	r3, [pc, #36]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004bd2:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004bd8:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004bde:	4805      	ldr	r0, [pc, #20]	; (8004bf4 <MX_SPI1_Init+0xa8>)
 8004be0:	f00e fb84 	bl	80132ec <HAL_SPI_Init>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8004bea:	f7fe ff5d 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004bee:	bf00      	nop
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	240022d4 	.word	0x240022d4
 8004bf8:	40013000 	.word	0x40013000

08004bfc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004c00:	4b28      	ldr	r3, [pc, #160]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c02:	4a29      	ldr	r2, [pc, #164]	; (8004ca8 <MX_SPI2_Init+0xac>)
 8004c04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004c06:	4b27      	ldr	r3, [pc, #156]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c08:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004c0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004c0e:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c10:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004c14:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004c16:	4b23      	ldr	r3, [pc, #140]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c18:	220f      	movs	r2, #15
 8004c1a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c1c:	4b21      	ldr	r3, [pc, #132]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c22:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004c28:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004c2e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004c30:	4b1c      	ldr	r3, [pc, #112]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c32:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004c36:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c38:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c3e:	4b19      	ldr	r3, [pc, #100]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c44:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004c4a:	4b16      	ldr	r3, [pc, #88]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004c50:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c56:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004c58:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004c5e:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004c64:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004c6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004c70:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004c76:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004c7c:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004c82:	4b08      	ldr	r3, [pc, #32]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004c88:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004c8e:	4805      	ldr	r0, [pc, #20]	; (8004ca4 <MX_SPI2_Init+0xa8>)
 8004c90:	f00e fb2c 	bl	80132ec <HAL_SPI_Init>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8004c9a:	f7fe ff05 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004c9e:	bf00      	nop
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	2400235c 	.word	0x2400235c
 8004ca8:	40003800 	.word	0x40003800

08004cac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b0bc      	sub	sp, #240	; 0xf0
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	605a      	str	r2, [r3, #4]
 8004cbe:	609a      	str	r2, [r3, #8]
 8004cc0:	60da      	str	r2, [r3, #12]
 8004cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004cc4:	f107 0318 	add.w	r3, r7, #24
 8004cc8:	22c0      	movs	r2, #192	; 0xc0
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f017 fab7 	bl	801c240 <memset>
  if(spiHandle->Instance==SPI1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a83      	ldr	r2, [pc, #524]	; (8004ee4 <HAL_SPI_MspInit+0x238>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d17c      	bne.n	8004dd6 <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004cdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cec:	f107 0318 	add.w	r3, r7, #24
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f00b fadb 	bl	80102ac <HAL_RCCEx_PeriphCLKConfig>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004cfc:	f7fe fed4 	bl	8003aa8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d00:	4b79      	ldr	r3, [pc, #484]	; (8004ee8 <HAL_SPI_MspInit+0x23c>)
 8004d02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d06:	4a78      	ldr	r2, [pc, #480]	; (8004ee8 <HAL_SPI_MspInit+0x23c>)
 8004d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004d10:	4b75      	ldr	r3, [pc, #468]	; (8004ee8 <HAL_SPI_MspInit+0x23c>)
 8004d12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d1e:	4b72      	ldr	r3, [pc, #456]	; (8004ee8 <HAL_SPI_MspInit+0x23c>)
 8004d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d24:	4a70      	ldr	r2, [pc, #448]	; (8004ee8 <HAL_SPI_MspInit+0x23c>)
 8004d26:	f043 0302 	orr.w	r3, r3, #2
 8004d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d2e:	4b6e      	ldr	r3, [pc, #440]	; (8004ee8 <HAL_SPI_MspInit+0x23c>)
 8004d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004d3c:	2318      	movs	r3, #24
 8004d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d42:	2302      	movs	r3, #2
 8004d44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d54:	2305      	movs	r3, #5
 8004d56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d5a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4862      	ldr	r0, [pc, #392]	; (8004eec <HAL_SPI_MspInit+0x240>)
 8004d62:	f007 fb53 	bl	800c40c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8004d66:	4b62      	ldr	r3, [pc, #392]	; (8004ef0 <HAL_SPI_MspInit+0x244>)
 8004d68:	4a62      	ldr	r2, [pc, #392]	; (8004ef4 <HAL_SPI_MspInit+0x248>)
 8004d6a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004d6c:	4b60      	ldr	r3, [pc, #384]	; (8004ef0 <HAL_SPI_MspInit+0x244>)
 8004d6e:	2225      	movs	r2, #37	; 0x25
 8004d70:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d72:	4b5f      	ldr	r3, [pc, #380]	; (8004ef0 <HAL_SPI_MspInit+0x244>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d78:	4b5d      	ldr	r3, [pc, #372]	; (8004ef0 <HAL_SPI_MspInit+0x244>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d7e:	4b5c      	ldr	r3, [pc, #368]	; (8004ef0 <HAL_SPI_MspInit+0x244>)
 8004d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d84:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d86:	4b5a      	ldr	r3, [pc, #360]	; (8004ef0 <HAL_SPI_MspInit+0x244>)
 8004d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d8c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d8e:	4b58      	ldr	r3, [pc, #352]	; (8004ef0 <HAL_SPI_MspInit+0x244>)
 8004d90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d94:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004d96:	4b56      	ldr	r3, [pc, #344]	; (8004ef0 <HAL_SPI_MspInit+0x244>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d9c:	4b54      	ldr	r3, [pc, #336]	; (8004ef0 <HAL_SPI_MspInit+0x244>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004da2:	4b53      	ldr	r3, [pc, #332]	; (8004ef0 <HAL_SPI_MspInit+0x244>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004da8:	4851      	ldr	r0, [pc, #324]	; (8004ef0 <HAL_SPI_MspInit+0x244>)
 8004daa:	f004 f809 	bl	8008dc0 <HAL_DMA_Init>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8004db4:	f7fe fe78 	bl	8003aa8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a4d      	ldr	r2, [pc, #308]	; (8004ef0 <HAL_SPI_MspInit+0x244>)
 8004dbc:	67da      	str	r2, [r3, #124]	; 0x7c
 8004dbe:	4a4c      	ldr	r2, [pc, #304]	; (8004ef0 <HAL_SPI_MspInit+0x244>)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2105      	movs	r1, #5
 8004dc8:	2023      	movs	r0, #35	; 0x23
 8004dca:	f003 fbcb 	bl	8008564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004dce:	2023      	movs	r0, #35	; 0x23
 8004dd0:	f003 fbe2 	bl	8008598 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004dd4:	e081      	b.n	8004eda <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a47      	ldr	r2, [pc, #284]	; (8004ef8 <HAL_SPI_MspInit+0x24c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d17c      	bne.n	8004eda <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8004de0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004df0:	f107 0318 	add.w	r3, r7, #24
 8004df4:	4618      	mov	r0, r3
 8004df6:	f00b fa59 	bl	80102ac <HAL_RCCEx_PeriphCLKConfig>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 8004e00:	f7fe fe52 	bl	8003aa8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004e04:	4b38      	ldr	r3, [pc, #224]	; (8004ee8 <HAL_SPI_MspInit+0x23c>)
 8004e06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e0a:	4a37      	ldr	r2, [pc, #220]	; (8004ee8 <HAL_SPI_MspInit+0x23c>)
 8004e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e14:	4b34      	ldr	r3, [pc, #208]	; (8004ee8 <HAL_SPI_MspInit+0x23c>)
 8004e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e22:	4b31      	ldr	r3, [pc, #196]	; (8004ee8 <HAL_SPI_MspInit+0x23c>)
 8004e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e28:	4a2f      	ldr	r2, [pc, #188]	; (8004ee8 <HAL_SPI_MspInit+0x23c>)
 8004e2a:	f043 0302 	orr.w	r3, r3, #2
 8004e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e32:	4b2d      	ldr	r3, [pc, #180]	; (8004ee8 <HAL_SPI_MspInit+0x23c>)
 8004e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004e40:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004e44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e48:	2302      	movs	r3, #2
 8004e4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e54:	2300      	movs	r3, #0
 8004e56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e5a:	2305      	movs	r3, #5
 8004e5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004e64:	4619      	mov	r1, r3
 8004e66:	4821      	ldr	r0, [pc, #132]	; (8004eec <HAL_SPI_MspInit+0x240>)
 8004e68:	f007 fad0 	bl	800c40c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004e6c:	4b23      	ldr	r3, [pc, #140]	; (8004efc <HAL_SPI_MspInit+0x250>)
 8004e6e:	4a24      	ldr	r2, [pc, #144]	; (8004f00 <HAL_SPI_MspInit+0x254>)
 8004e70:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8004e72:	4b22      	ldr	r3, [pc, #136]	; (8004efc <HAL_SPI_MspInit+0x250>)
 8004e74:	2227      	movs	r2, #39	; 0x27
 8004e76:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e78:	4b20      	ldr	r3, [pc, #128]	; (8004efc <HAL_SPI_MspInit+0x250>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e7e:	4b1f      	ldr	r3, [pc, #124]	; (8004efc <HAL_SPI_MspInit+0x250>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e84:	4b1d      	ldr	r3, [pc, #116]	; (8004efc <HAL_SPI_MspInit+0x250>)
 8004e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e8a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e8c:	4b1b      	ldr	r3, [pc, #108]	; (8004efc <HAL_SPI_MspInit+0x250>)
 8004e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e92:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e94:	4b19      	ldr	r3, [pc, #100]	; (8004efc <HAL_SPI_MspInit+0x250>)
 8004e96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e9a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004e9c:	4b17      	ldr	r3, [pc, #92]	; (8004efc <HAL_SPI_MspInit+0x250>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ea2:	4b16      	ldr	r3, [pc, #88]	; (8004efc <HAL_SPI_MspInit+0x250>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ea8:	4b14      	ldr	r3, [pc, #80]	; (8004efc <HAL_SPI_MspInit+0x250>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004eae:	4813      	ldr	r0, [pc, #76]	; (8004efc <HAL_SPI_MspInit+0x250>)
 8004eb0:	f003 ff86 	bl	8008dc0 <HAL_DMA_Init>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_SPI_MspInit+0x212>
      Error_Handler();
 8004eba:	f7fe fdf5 	bl	8003aa8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a0e      	ldr	r2, [pc, #56]	; (8004efc <HAL_SPI_MspInit+0x250>)
 8004ec2:	67da      	str	r2, [r3, #124]	; 0x7c
 8004ec4:	4a0d      	ldr	r2, [pc, #52]	; (8004efc <HAL_SPI_MspInit+0x250>)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2105      	movs	r1, #5
 8004ece:	2024      	movs	r0, #36	; 0x24
 8004ed0:	f003 fb48 	bl	8008564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004ed4:	2024      	movs	r0, #36	; 0x24
 8004ed6:	f003 fb5f 	bl	8008598 <HAL_NVIC_EnableIRQ>
}
 8004eda:	bf00      	nop
 8004edc:	37f0      	adds	r7, #240	; 0xf0
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40013000 	.word	0x40013000
 8004ee8:	58024400 	.word	0x58024400
 8004eec:	58020400 	.word	0x58020400
 8004ef0:	240023e4 	.word	0x240023e4
 8004ef4:	40020070 	.word	0x40020070
 8004ef8:	40003800 	.word	0x40003800
 8004efc:	2400245c 	.word	0x2400245c
 8004f00:	40020058 	.word	0x40020058

08004f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f0a:	4b10      	ldr	r3, [pc, #64]	; (8004f4c <HAL_MspInit+0x48>)
 8004f0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f10:	4a0e      	ldr	r2, [pc, #56]	; (8004f4c <HAL_MspInit+0x48>)
 8004f12:	f043 0302 	orr.w	r3, r3, #2
 8004f16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f1a:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <HAL_MspInit+0x48>)
 8004f1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	607b      	str	r3, [r7, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004f28:	2200      	movs	r2, #0
 8004f2a:	210f      	movs	r1, #15
 8004f2c:	f06f 0001 	mvn.w	r0, #1
 8004f30:	f003 fb18 	bl	8008564 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8004f34:	2200      	movs	r2, #0
 8004f36:	2105      	movs	r1, #5
 8004f38:	2004      	movs	r0, #4
 8004f3a:	f003 fb13 	bl	8008564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8004f3e:	2004      	movs	r0, #4
 8004f40:	f003 fb2a 	bl	8008598 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f44:	bf00      	nop
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	58024400 	.word	0x58024400

08004f50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b090      	sub	sp, #64	; 0x40
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b0f      	cmp	r3, #15
 8004f5c:	d827      	bhi.n	8004fae <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004f5e:	2200      	movs	r2, #0
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	2036      	movs	r0, #54	; 0x36
 8004f64:	f003 fafe 	bl	8008564 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004f68:	2036      	movs	r0, #54	; 0x36
 8004f6a:	f003 fb15 	bl	8008598 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004f6e:	4a29      	ldr	r2, [pc, #164]	; (8005014 <HAL_InitTick+0xc4>)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004f74:	4b28      	ldr	r3, [pc, #160]	; (8005018 <HAL_InitTick+0xc8>)
 8004f76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f7a:	4a27      	ldr	r2, [pc, #156]	; (8005018 <HAL_InitTick+0xc8>)
 8004f7c:	f043 0310 	orr.w	r3, r3, #16
 8004f80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f84:	4b24      	ldr	r3, [pc, #144]	; (8005018 <HAL_InitTick+0xc8>)
 8004f86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f8a:	f003 0310 	and.w	r3, r3, #16
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004f92:	f107 0210 	add.w	r2, r7, #16
 8004f96:	f107 0314 	add.w	r3, r7, #20
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f00b f943 	bl	8010228 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d106      	bne.n	8004fba <HAL_InitTick+0x6a>
 8004fac:	e001      	b.n	8004fb2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e02b      	b.n	800500a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004fb2:	f00b f90d 	bl	80101d0 <HAL_RCC_GetPCLK1Freq>
 8004fb6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004fb8:	e004      	b.n	8004fc4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004fba:	f00b f909 	bl	80101d0 <HAL_RCC_GetPCLK1Freq>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc6:	4a15      	ldr	r2, [pc, #84]	; (800501c <HAL_InitTick+0xcc>)
 8004fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fcc:	0c9b      	lsrs	r3, r3, #18
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004fd2:	4b13      	ldr	r3, [pc, #76]	; (8005020 <HAL_InitTick+0xd0>)
 8004fd4:	4a13      	ldr	r2, [pc, #76]	; (8005024 <HAL_InitTick+0xd4>)
 8004fd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004fd8:	4b11      	ldr	r3, [pc, #68]	; (8005020 <HAL_InitTick+0xd0>)
 8004fda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004fde:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004fe0:	4a0f      	ldr	r2, [pc, #60]	; (8005020 <HAL_InitTick+0xd0>)
 8004fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004fe6:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <HAL_InitTick+0xd0>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fec:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <HAL_InitTick+0xd0>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004ff2:	480b      	ldr	r0, [pc, #44]	; (8005020 <HAL_InitTick+0xd0>)
 8004ff4:	f00e ff19 	bl	8013e2a <HAL_TIM_Base_Init>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d104      	bne.n	8005008 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004ffe:	4808      	ldr	r0, [pc, #32]	; (8005020 <HAL_InitTick+0xd0>)
 8005000:	f00e ff6a 	bl	8013ed8 <HAL_TIM_Base_Start_IT>
 8005004:	4603      	mov	r3, r0
 8005006:	e000      	b.n	800500a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
}
 800500a:	4618      	mov	r0, r3
 800500c:	3740      	adds	r7, #64	; 0x40
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	240000e8 	.word	0x240000e8
 8005018:	58024400 	.word	0x58024400
 800501c:	431bde83 	.word	0x431bde83
 8005020:	240024d4 	.word	0x240024d4
 8005024:	40001000 	.word	0x40001000

08005028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800502c:	e7fe      	b.n	800502c <NMI_Handler+0x4>
	...

08005030 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	if ((FLASH->SR1 & FLASH_SR_DBECCERR) || (FLASH->SR2 & FLASH_SR_DBECCERR)) {
 8005034:	4b07      	ldr	r3, [pc, #28]	; (8005054 <HardFault_Handler+0x24>)
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d106      	bne.n	800504e <HardFault_Handler+0x1e>
 8005040:	4b04      	ldr	r3, [pc, #16]	; (8005054 <HardFault_Handler+0x24>)
 8005042:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005046:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <HardFault_Handler+0x22>
		FLASH_IRQHandler();
 800504e:	f000 f813 	bl	8005078 <FLASH_IRQHandler>
	}
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005052:	e7fe      	b.n	8005052 <HardFault_Handler+0x22>
 8005054:	52002000 	.word	0x52002000

08005058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800505c:	e7fe      	b.n	800505c <MemManage_Handler+0x4>

0800505e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800505e:	b480      	push	{r7}
 8005060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005062:	e7fe      	b.n	8005062 <BusFault_Handler+0x4>

08005064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005068:	e7fe      	b.n	8005068 <UsageFault_Handler+0x4>

0800506a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800506a:	b480      	push	{r7}
 800506c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800506e:	bf00      	nop
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800507c:	f006 fd88 	bl	800bb90 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8005080:	bf00      	nop
 8005082:	bd80      	pop	{r7, pc}

08005084 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005088:	4802      	ldr	r0, [pc, #8]	; (8005094 <DMA1_Stream0_IRQHandler+0x10>)
 800508a:	f005 f9c3 	bl	800a414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800508e:	bf00      	nop
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	240001e4 	.word	0x240001e4

08005098 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800509c:	4802      	ldr	r0, [pc, #8]	; (80050a8 <DMA1_Stream1_IRQHandler+0x10>)
 800509e:	f005 f9b9 	bl	800a414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80050a2:	bf00      	nop
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	2400025c 	.word	0x2400025c

080050ac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80050b0:	4802      	ldr	r0, [pc, #8]	; (80050bc <DMA1_Stream2_IRQHandler+0x10>)
 80050b2:	f005 f9af 	bl	800a414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80050b6:	bf00      	nop
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	240026e4 	.word	0x240026e4

080050c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80050c4:	4802      	ldr	r0, [pc, #8]	; (80050d0 <DMA1_Stream3_IRQHandler+0x10>)
 80050c6:	f005 f9a5 	bl	800a414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80050ca:	bf00      	nop
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	2400245c 	.word	0x2400245c

080050d4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80050d8:	4802      	ldr	r0, [pc, #8]	; (80050e4 <DMA1_Stream4_IRQHandler+0x10>)
 80050da:	f005 f99b 	bl	800a414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80050de:	bf00      	nop
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	240023e4 	.word	0x240023e4

080050e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80050ec:	4802      	ldr	r0, [pc, #8]	; (80050f8 <DMA1_Stream5_IRQHandler+0x10>)
 80050ee:	f005 f991 	bl	800a414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80050f2:	bf00      	nop
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	240002e8 	.word	0x240002e8

080050fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005100:	4802      	ldr	r0, [pc, #8]	; (800510c <DMA1_Stream6_IRQHandler+0x10>)
 8005102:	f005 f987 	bl	800a414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005106:	bf00      	nop
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	24001bc8 	.word	0x24001bc8

08005110 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005114:	4802      	ldr	r0, [pc, #8]	; (8005120 <TIM1_BRK_IRQHandler+0x10>)
 8005116:	f00f fa26 	bl	8014566 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800511a:	bf00      	nop
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	24002520 	.word	0x24002520

08005124 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005128:	4802      	ldr	r0, [pc, #8]	; (8005134 <TIM1_UP_IRQHandler+0x10>)
 800512a:	f00f fa1c 	bl	8014566 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800512e:	bf00      	nop
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	24002520 	.word	0x24002520

08005138 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800513c:	4802      	ldr	r0, [pc, #8]	; (8005148 <TIM1_TRG_COM_IRQHandler+0x10>)
 800513e:	f00f fa12 	bl	8014566 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8005142:	bf00      	nop
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	24002520 	.word	0x24002520

0800514c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005150:	4802      	ldr	r0, [pc, #8]	; (800515c <TIM1_CC_IRQHandler+0x10>)
 8005152:	f00f fa08 	bl	8014566 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005156:	bf00      	nop
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	24002520 	.word	0x24002520

08005160 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005164:	4802      	ldr	r0, [pc, #8]	; (8005170 <TIM2_IRQHandler+0x10>)
 8005166:	f00f f9fe 	bl	8014566 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800516a:	bf00      	nop
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	2400256c 	.word	0x2400256c

08005174 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005178:	4802      	ldr	r0, [pc, #8]	; (8005184 <TIM3_IRQHandler+0x10>)
 800517a:	f00f f9f4 	bl	8014566 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800517e:	bf00      	nop
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	240025b8 	.word	0x240025b8

08005188 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800518c:	4802      	ldr	r0, [pc, #8]	; (8005198 <TIM4_IRQHandler+0x10>)
 800518e:	f00f f9ea 	bl	8014566 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005192:	bf00      	nop
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	24002604 	.word	0x24002604

0800519c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80051a0:	4802      	ldr	r0, [pc, #8]	; (80051ac <I2C1_EV_IRQHandler+0x10>)
 80051a2:	f007 fdb5 	bl	800cd10 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80051a6:	bf00      	nop
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	24001b74 	.word	0x24001b74

080051b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80051b4:	4802      	ldr	r0, [pc, #8]	; (80051c0 <I2C1_ER_IRQHandler+0x10>)
 80051b6:	f007 fdc5 	bl	800cd44 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80051ba:	bf00      	nop
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	24001b74 	.word	0x24001b74

080051c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80051c8:	4802      	ldr	r0, [pc, #8]	; (80051d4 <SPI1_IRQHandler+0x10>)
 80051ca:	f00e fafb 	bl	80137c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80051ce:	bf00      	nop
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	240022d4 	.word	0x240022d4

080051d8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80051dc:	4802      	ldr	r0, [pc, #8]	; (80051e8 <SPI2_IRQHandler+0x10>)
 80051de:	f00e faf1 	bl	80137c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80051e2:	bf00      	nop
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	2400235c 	.word	0x2400235c

080051ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80051f0:	4802      	ldr	r0, [pc, #8]	; (80051fc <USART1_IRQHandler+0x10>)
 80051f2:	f010 fd8f 	bl	8015d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80051f6:	bf00      	nop
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	24002650 	.word	0x24002650

08005200 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005204:	4802      	ldr	r0, [pc, #8]	; (8005210 <DMA1_Stream7_IRQHandler+0x10>)
 8005206:	f005 f905 	bl	800a414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800520a:	bf00      	nop
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	24001c40 	.word	0x24001c40

08005214 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8005218:	4b06      	ldr	r3, [pc, #24]	; (8005234 <TIM6_DAC_IRQHandler+0x20>)
 800521a:	791b      	ldrb	r3, [r3, #4]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8005222:	4804      	ldr	r0, [pc, #16]	; (8005234 <TIM6_DAC_IRQHandler+0x20>)
 8005224:	f003 fb4d 	bl	80088c2 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8005228:	4803      	ldr	r0, [pc, #12]	; (8005238 <TIM6_DAC_IRQHandler+0x24>)
 800522a:	f00f f99c 	bl	8014566 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800522e:	bf00      	nop
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	240002d4 	.word	0x240002d4
 8005238:	240024d4 	.word	0x240024d4

0800523c <ECC_IRQHandler>:

/* USER CODE BEGIN 1 */
/**
 * @brief This function handles RAMECC global interrupt
 */
void ECC_IRQHandler(void) {
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
	// Domain 1
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m1, RAMECC_FLAGS_ALL)) {
 8005240:	4b4e      	ldr	r3, [pc, #312]	; (800537c <ECC_IRQHandler+0x140>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	4a4d      	ldr	r2, [pc, #308]	; (800537c <ECC_IRQHandler+0x140>)
 8005248:	6812      	ldr	r2, [r2, #0]
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	6053      	str	r3, [r2, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <ECC_IRQHandler+0x1e>
		HAL_RAMECC_IRQHandler(&hramecc1_m1);
 8005254:	4849      	ldr	r0, [pc, #292]	; (800537c <ECC_IRQHandler+0x140>)
 8005256:	f009 ffad 	bl	800f1b4 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m2, RAMECC_FLAGS_ALL)) {
 800525a:	4b49      	ldr	r3, [pc, #292]	; (8005380 <ECC_IRQHandler+0x144>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	4a47      	ldr	r2, [pc, #284]	; (8005380 <ECC_IRQHandler+0x144>)
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	6053      	str	r3, [r2, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <ECC_IRQHandler+0x38>
		HAL_RAMECC_IRQHandler(&hramecc1_m2);
 800526e:	4844      	ldr	r0, [pc, #272]	; (8005380 <ECC_IRQHandler+0x144>)
 8005270:	f009 ffa0 	bl	800f1b4 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m3, RAMECC_FLAGS_ALL)) {
 8005274:	4b43      	ldr	r3, [pc, #268]	; (8005384 <ECC_IRQHandler+0x148>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	4a42      	ldr	r2, [pc, #264]	; (8005384 <ECC_IRQHandler+0x148>)
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	6053      	str	r3, [r2, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <ECC_IRQHandler+0x52>
		HAL_RAMECC_IRQHandler(&hramecc1_m3);
 8005288:	483e      	ldr	r0, [pc, #248]	; (8005384 <ECC_IRQHandler+0x148>)
 800528a:	f009 ff93 	bl	800f1b4 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m4, RAMECC_FLAGS_ALL)) {
 800528e:	4b3e      	ldr	r3, [pc, #248]	; (8005388 <ECC_IRQHandler+0x14c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	4a3c      	ldr	r2, [pc, #240]	; (8005388 <ECC_IRQHandler+0x14c>)
 8005296:	6812      	ldr	r2, [r2, #0]
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	6053      	str	r3, [r2, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <ECC_IRQHandler+0x6c>
		HAL_RAMECC_IRQHandler(&hramecc1_m4);
 80052a2:	4839      	ldr	r0, [pc, #228]	; (8005388 <ECC_IRQHandler+0x14c>)
 80052a4:	f009 ff86 	bl	800f1b4 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m5, RAMECC_FLAGS_ALL)) {
 80052a8:	4b38      	ldr	r3, [pc, #224]	; (800538c <ECC_IRQHandler+0x150>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	4a37      	ldr	r2, [pc, #220]	; (800538c <ECC_IRQHandler+0x150>)
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	6053      	str	r3, [r2, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <ECC_IRQHandler+0x86>
		HAL_RAMECC_IRQHandler(&hramecc1_m5);
 80052bc:	4833      	ldr	r0, [pc, #204]	; (800538c <ECC_IRQHandler+0x150>)
 80052be:	f009 ff79 	bl	800f1b4 <HAL_RAMECC_IRQHandler>
	}

	// Domain 2
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m1, RAMECC_FLAGS_ALL)) {
 80052c2:	4b33      	ldr	r3, [pc, #204]	; (8005390 <ECC_IRQHandler+0x154>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	4a31      	ldr	r2, [pc, #196]	; (8005390 <ECC_IRQHandler+0x154>)
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	6053      	str	r3, [r2, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <ECC_IRQHandler+0xa0>
		HAL_RAMECC_IRQHandler(&hramecc2_m1);
 80052d6:	482e      	ldr	r0, [pc, #184]	; (8005390 <ECC_IRQHandler+0x154>)
 80052d8:	f009 ff6c 	bl	800f1b4 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m2, RAMECC_FLAGS_ALL)) {
 80052dc:	4b2d      	ldr	r3, [pc, #180]	; (8005394 <ECC_IRQHandler+0x158>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	4a2c      	ldr	r2, [pc, #176]	; (8005394 <ECC_IRQHandler+0x158>)
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	6053      	str	r3, [r2, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d002      	beq.n	80052f6 <ECC_IRQHandler+0xba>
		HAL_RAMECC_IRQHandler(&hramecc2_m2);
 80052f0:	4828      	ldr	r0, [pc, #160]	; (8005394 <ECC_IRQHandler+0x158>)
 80052f2:	f009 ff5f 	bl	800f1b4 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m3, RAMECC_FLAGS_ALL)) {
 80052f6:	4b28      	ldr	r3, [pc, #160]	; (8005398 <ECC_IRQHandler+0x15c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4a26      	ldr	r2, [pc, #152]	; (8005398 <ECC_IRQHandler+0x15c>)
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	6053      	str	r3, [r2, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d002      	beq.n	8005310 <ECC_IRQHandler+0xd4>
		HAL_RAMECC_IRQHandler(&hramecc2_m3);
 800530a:	4823      	ldr	r0, [pc, #140]	; (8005398 <ECC_IRQHandler+0x15c>)
 800530c:	f009 ff52 	bl	800f1b4 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m4, RAMECC_FLAGS_ALL)) {
 8005310:	4b22      	ldr	r3, [pc, #136]	; (800539c <ECC_IRQHandler+0x160>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	4a21      	ldr	r2, [pc, #132]	; (800539c <ECC_IRQHandler+0x160>)
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	6053      	str	r3, [r2, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <ECC_IRQHandler+0xee>
		HAL_RAMECC_IRQHandler(&hramecc2_m4);
 8005324:	481d      	ldr	r0, [pc, #116]	; (800539c <ECC_IRQHandler+0x160>)
 8005326:	f009 ff45 	bl	800f1b4 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m5, RAMECC_FLAGS_ALL)) {
 800532a:	4b1d      	ldr	r3, [pc, #116]	; (80053a0 <ECC_IRQHandler+0x164>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	4a1b      	ldr	r2, [pc, #108]	; (80053a0 <ECC_IRQHandler+0x164>)
 8005332:	6812      	ldr	r2, [r2, #0]
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	6053      	str	r3, [r2, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <ECC_IRQHandler+0x108>
		HAL_RAMECC_IRQHandler(&hramecc2_m5);
 800533e:	4818      	ldr	r0, [pc, #96]	; (80053a0 <ECC_IRQHandler+0x164>)
 8005340:	f009 ff38 	bl	800f1b4 <HAL_RAMECC_IRQHandler>
	}

	// Domain 3
	if (__HAL_RAMECC_GET_FLAG(&hramecc3_m1, RAMECC_FLAGS_ALL)) {
 8005344:	4b17      	ldr	r3, [pc, #92]	; (80053a4 <ECC_IRQHandler+0x168>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	4a16      	ldr	r2, [pc, #88]	; (80053a4 <ECC_IRQHandler+0x168>)
 800534c:	6812      	ldr	r2, [r2, #0]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	6053      	str	r3, [r2, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <ECC_IRQHandler+0x122>
		HAL_RAMECC_IRQHandler(&hramecc3_m1);
 8005358:	4812      	ldr	r0, [pc, #72]	; (80053a4 <ECC_IRQHandler+0x168>)
 800535a:	f009 ff2b 	bl	800f1b4 <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc3_m2, RAMECC_FLAGS_ALL)) {
 800535e:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <ECC_IRQHandler+0x16c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	4a10      	ldr	r2, [pc, #64]	; (80053a8 <ECC_IRQHandler+0x16c>)
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	6053      	str	r3, [r2, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <ECC_IRQHandler+0x13c>
		HAL_RAMECC_IRQHandler(&hramecc3_m2);
 8005372:	480d      	ldr	r0, [pc, #52]	; (80053a8 <ECC_IRQHandler+0x16c>)
 8005374:	f009 ff1e 	bl	800f1b4 <HAL_RAMECC_IRQHandler>
	}
}
 8005378:	bf00      	nop
 800537a:	bd80      	pop	{r7, pc}
 800537c:	240021bc 	.word	0x240021bc
 8005380:	240021cc 	.word	0x240021cc
 8005384:	240021dc 	.word	0x240021dc
 8005388:	240021ec 	.word	0x240021ec
 800538c:	240021fc 	.word	0x240021fc
 8005390:	2400220c 	.word	0x2400220c
 8005394:	2400221c 	.word	0x2400221c
 8005398:	2400222c 	.word	0x2400222c
 800539c:	2400223c 	.word	0x2400223c
 80053a0:	2400224c 	.word	0x2400224c
 80053a4:	2400225c 	.word	0x2400225c
 80053a8:	2400226c 	.word	0x2400226c

080053ac <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80053b0:	4b37      	ldr	r3, [pc, #220]	; (8005490 <SystemInit+0xe4>)
 80053b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b6:	4a36      	ldr	r2, [pc, #216]	; (8005490 <SystemInit+0xe4>)
 80053b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80053c0:	4b34      	ldr	r3, [pc, #208]	; (8005494 <SystemInit+0xe8>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 030f 	and.w	r3, r3, #15
 80053c8:	2b06      	cmp	r3, #6
 80053ca:	d807      	bhi.n	80053dc <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80053cc:	4b31      	ldr	r3, [pc, #196]	; (8005494 <SystemInit+0xe8>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f023 030f 	bic.w	r3, r3, #15
 80053d4:	4a2f      	ldr	r2, [pc, #188]	; (8005494 <SystemInit+0xe8>)
 80053d6:	f043 0307 	orr.w	r3, r3, #7
 80053da:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80053dc:	4b2e      	ldr	r3, [pc, #184]	; (8005498 <SystemInit+0xec>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a2d      	ldr	r2, [pc, #180]	; (8005498 <SystemInit+0xec>)
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80053e8:	4b2b      	ldr	r3, [pc, #172]	; (8005498 <SystemInit+0xec>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80053ee:	4b2a      	ldr	r3, [pc, #168]	; (8005498 <SystemInit+0xec>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4929      	ldr	r1, [pc, #164]	; (8005498 <SystemInit+0xec>)
 80053f4:	4b29      	ldr	r3, [pc, #164]	; (800549c <SystemInit+0xf0>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80053fa:	4b26      	ldr	r3, [pc, #152]	; (8005494 <SystemInit+0xe8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0308 	and.w	r3, r3, #8
 8005402:	2b00      	cmp	r3, #0
 8005404:	d007      	beq.n	8005416 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8005406:	4b23      	ldr	r3, [pc, #140]	; (8005494 <SystemInit+0xe8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f023 030f 	bic.w	r3, r3, #15
 800540e:	4a21      	ldr	r2, [pc, #132]	; (8005494 <SystemInit+0xe8>)
 8005410:	f043 0307 	orr.w	r3, r3, #7
 8005414:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8005416:	4b20      	ldr	r3, [pc, #128]	; (8005498 <SystemInit+0xec>)
 8005418:	2200      	movs	r2, #0
 800541a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 800541c:	4b1e      	ldr	r3, [pc, #120]	; (8005498 <SystemInit+0xec>)
 800541e:	2200      	movs	r2, #0
 8005420:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8005422:	4b1d      	ldr	r3, [pc, #116]	; (8005498 <SystemInit+0xec>)
 8005424:	2200      	movs	r2, #0
 8005426:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8005428:	4b1b      	ldr	r3, [pc, #108]	; (8005498 <SystemInit+0xec>)
 800542a:	4a1d      	ldr	r2, [pc, #116]	; (80054a0 <SystemInit+0xf4>)
 800542c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800542e:	4b1a      	ldr	r3, [pc, #104]	; (8005498 <SystemInit+0xec>)
 8005430:	4a1c      	ldr	r2, [pc, #112]	; (80054a4 <SystemInit+0xf8>)
 8005432:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8005434:	4b18      	ldr	r3, [pc, #96]	; (8005498 <SystemInit+0xec>)
 8005436:	4a1c      	ldr	r2, [pc, #112]	; (80054a8 <SystemInit+0xfc>)
 8005438:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800543a:	4b17      	ldr	r3, [pc, #92]	; (8005498 <SystemInit+0xec>)
 800543c:	2200      	movs	r2, #0
 800543e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8005440:	4b15      	ldr	r3, [pc, #84]	; (8005498 <SystemInit+0xec>)
 8005442:	4a19      	ldr	r2, [pc, #100]	; (80054a8 <SystemInit+0xfc>)
 8005444:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <SystemInit+0xec>)
 8005448:	2200      	movs	r2, #0
 800544a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 800544c:	4b12      	ldr	r3, [pc, #72]	; (8005498 <SystemInit+0xec>)
 800544e:	4a16      	ldr	r2, [pc, #88]	; (80054a8 <SystemInit+0xfc>)
 8005450:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8005452:	4b11      	ldr	r3, [pc, #68]	; (8005498 <SystemInit+0xec>)
 8005454:	2200      	movs	r2, #0
 8005456:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8005458:	4b0f      	ldr	r3, [pc, #60]	; (8005498 <SystemInit+0xec>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a0e      	ldr	r2, [pc, #56]	; (8005498 <SystemInit+0xec>)
 800545e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005462:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8005464:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <SystemInit+0xec>)
 8005466:	2200      	movs	r2, #0
 8005468:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800546a:	4b10      	ldr	r3, [pc, #64]	; (80054ac <SystemInit+0x100>)
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4b10      	ldr	r3, [pc, #64]	; (80054b0 <SystemInit+0x104>)
 8005470:	4013      	ands	r3, r2
 8005472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005476:	d202      	bcs.n	800547e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8005478:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <SystemInit+0x108>)
 800547a:	2201      	movs	r2, #1
 800547c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800547e:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <SystemInit+0x10c>)
 8005480:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005484:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005486:	bf00      	nop
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	e000ed00 	.word	0xe000ed00
 8005494:	52002000 	.word	0x52002000
 8005498:	58024400 	.word	0x58024400
 800549c:	eaf6ed7f 	.word	0xeaf6ed7f
 80054a0:	02020200 	.word	0x02020200
 80054a4:	01ff0000 	.word	0x01ff0000
 80054a8:	01010280 	.word	0x01010280
 80054ac:	5c001000 	.word	0x5c001000
 80054b0:	ffff0000 	.word	0xffff0000
 80054b4:	51008108 	.word	0x51008108
 80054b8:	52004000 	.word	0x52004000

080054bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b09a      	sub	sp, #104	; 0x68
 80054c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	605a      	str	r2, [r3, #4]
 80054cc:	609a      	str	r2, [r3, #8]
 80054ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	605a      	str	r2, [r3, #4]
 80054da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80054dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	605a      	str	r2, [r3, #4]
 80054e6:	609a      	str	r2, [r3, #8]
 80054e8:	60da      	str	r2, [r3, #12]
 80054ea:	611a      	str	r2, [r3, #16]
 80054ec:	615a      	str	r2, [r3, #20]
 80054ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80054f0:	1d3b      	adds	r3, r7, #4
 80054f2:	222c      	movs	r2, #44	; 0x2c
 80054f4:	2100      	movs	r1, #0
 80054f6:	4618      	mov	r0, r3
 80054f8:	f016 fea2 	bl	801c240 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80054fc:	4b44      	ldr	r3, [pc, #272]	; (8005610 <MX_TIM1_Init+0x154>)
 80054fe:	4a45      	ldr	r2, [pc, #276]	; (8005614 <MX_TIM1_Init+0x158>)
 8005500:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8005502:	4b43      	ldr	r3, [pc, #268]	; (8005610 <MX_TIM1_Init+0x154>)
 8005504:	224a      	movs	r2, #74	; 0x4a
 8005506:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005508:	4b41      	ldr	r3, [pc, #260]	; (8005610 <MX_TIM1_Init+0x154>)
 800550a:	2200      	movs	r2, #0
 800550c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800550e:	4b40      	ldr	r3, [pc, #256]	; (8005610 <MX_TIM1_Init+0x154>)
 8005510:	f24f 4223 	movw	r2, #62499	; 0xf423
 8005514:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005516:	4b3e      	ldr	r3, [pc, #248]	; (8005610 <MX_TIM1_Init+0x154>)
 8005518:	2200      	movs	r2, #0
 800551a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800551c:	4b3c      	ldr	r3, [pc, #240]	; (8005610 <MX_TIM1_Init+0x154>)
 800551e:	2200      	movs	r2, #0
 8005520:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005522:	4b3b      	ldr	r3, [pc, #236]	; (8005610 <MX_TIM1_Init+0x154>)
 8005524:	2200      	movs	r2, #0
 8005526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005528:	4839      	ldr	r0, [pc, #228]	; (8005610 <MX_TIM1_Init+0x154>)
 800552a:	f00e fc7e 	bl	8013e2a <HAL_TIM_Base_Init>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005534:	f7fe fab8 	bl	8003aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800553c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800553e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005542:	4619      	mov	r1, r3
 8005544:	4832      	ldr	r0, [pc, #200]	; (8005610 <MX_TIM1_Init+0x154>)
 8005546:	f00f fa29 	bl	801499c <HAL_TIM_ConfigClockSource>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005550:	f7fe faaa 	bl	8003aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005554:	482e      	ldr	r0, [pc, #184]	; (8005610 <MX_TIM1_Init+0x154>)
 8005556:	f00e ffa5 	bl	80144a4 <HAL_TIM_PWM_Init>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005560:	f7fe faa2 	bl	8003aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005564:	2300      	movs	r3, #0
 8005566:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005568:	2300      	movs	r3, #0
 800556a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800556c:	2300      	movs	r3, #0
 800556e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005570:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005574:	4619      	mov	r1, r3
 8005576:	4826      	ldr	r0, [pc, #152]	; (8005610 <MX_TIM1_Init+0x154>)
 8005578:	f00f ff66 	bl	8015448 <HAL_TIMEx_MasterConfigSynchronization>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8005582:	f7fe fa91 	bl	8003aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005586:	2360      	movs	r3, #96	; 0x60
 8005588:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800558a:	f240 13df 	movw	r3, #479	; 0x1df
 800558e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005590:	2300      	movs	r3, #0
 8005592:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005594:	2300      	movs	r3, #0
 8005596:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005598:	2300      	movs	r3, #0
 800559a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800559c:	2300      	movs	r3, #0
 800559e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80055a0:	2300      	movs	r3, #0
 80055a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80055a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80055a8:	2200      	movs	r2, #0
 80055aa:	4619      	mov	r1, r3
 80055ac:	4818      	ldr	r0, [pc, #96]	; (8005610 <MX_TIM1_Init+0x154>)
 80055ae:	f00f f8e1 	bl	8014774 <HAL_TIM_PWM_ConfigChannel>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80055b8:	f7fe fa76 	bl	8003aa8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80055bc:	2300      	movs	r3, #0
 80055be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80055cc:	2300      	movs	r3, #0
 80055ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80055d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80055d6:	2300      	movs	r3, #0
 80055d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80055da:	2300      	movs	r3, #0
 80055dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80055de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80055e8:	2300      	movs	r3, #0
 80055ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80055ec:	1d3b      	adds	r3, r7, #4
 80055ee:	4619      	mov	r1, r3
 80055f0:	4807      	ldr	r0, [pc, #28]	; (8005610 <MX_TIM1_Init+0x154>)
 80055f2:	f00f ffb7 	bl	8015564 <HAL_TIMEx_ConfigBreakDeadTime>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80055fc:	f7fe fa54 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005600:	4803      	ldr	r0, [pc, #12]	; (8005610 <MX_TIM1_Init+0x154>)
 8005602:	f000 f9b9 	bl	8005978 <HAL_TIM_MspPostInit>

}
 8005606:	bf00      	nop
 8005608:	3768      	adds	r7, #104	; 0x68
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	24002520 	.word	0x24002520
 8005614:	40010000 	.word	0x40010000

08005618 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08e      	sub	sp, #56	; 0x38
 800561c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800561e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	605a      	str	r2, [r3, #4]
 8005628:	609a      	str	r2, [r3, #8]
 800562a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800562c:	f107 031c 	add.w	r3, r7, #28
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005638:	463b      	mov	r3, r7
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	605a      	str	r2, [r3, #4]
 8005640:	609a      	str	r2, [r3, #8]
 8005642:	60da      	str	r2, [r3, #12]
 8005644:	611a      	str	r2, [r3, #16]
 8005646:	615a      	str	r2, [r3, #20]
 8005648:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800564a:	4b2d      	ldr	r3, [pc, #180]	; (8005700 <MX_TIM2_Init+0xe8>)
 800564c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005650:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8005652:	4b2b      	ldr	r3, [pc, #172]	; (8005700 <MX_TIM2_Init+0xe8>)
 8005654:	224a      	movs	r2, #74	; 0x4a
 8005656:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005658:	4b29      	ldr	r3, [pc, #164]	; (8005700 <MX_TIM2_Init+0xe8>)
 800565a:	2200      	movs	r2, #0
 800565c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800565e:	4b28      	ldr	r3, [pc, #160]	; (8005700 <MX_TIM2_Init+0xe8>)
 8005660:	f640 4234 	movw	r2, #3124	; 0xc34
 8005664:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005666:	4b26      	ldr	r3, [pc, #152]	; (8005700 <MX_TIM2_Init+0xe8>)
 8005668:	2200      	movs	r2, #0
 800566a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800566c:	4b24      	ldr	r3, [pc, #144]	; (8005700 <MX_TIM2_Init+0xe8>)
 800566e:	2280      	movs	r2, #128	; 0x80
 8005670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005672:	4823      	ldr	r0, [pc, #140]	; (8005700 <MX_TIM2_Init+0xe8>)
 8005674:	f00e fbd9 	bl	8013e2a <HAL_TIM_Base_Init>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800567e:	f7fe fa13 	bl	8003aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800568c:	4619      	mov	r1, r3
 800568e:	481c      	ldr	r0, [pc, #112]	; (8005700 <MX_TIM2_Init+0xe8>)
 8005690:	f00f f984 	bl	801499c <HAL_TIM_ConfigClockSource>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800569a:	f7fe fa05 	bl	8003aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800569e:	4818      	ldr	r0, [pc, #96]	; (8005700 <MX_TIM2_Init+0xe8>)
 80056a0:	f00e ff00 	bl	80144a4 <HAL_TIM_PWM_Init>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80056aa:	f7fe f9fd 	bl	8003aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80056ae:	2320      	movs	r3, #32
 80056b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056b2:	2300      	movs	r3, #0
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80056b6:	f107 031c 	add.w	r3, r7, #28
 80056ba:	4619      	mov	r1, r3
 80056bc:	4810      	ldr	r0, [pc, #64]	; (8005700 <MX_TIM2_Init+0xe8>)
 80056be:	f00f fec3 	bl	8015448 <HAL_TIMEx_MasterConfigSynchronization>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80056c8:	f7fe f9ee 	bl	8003aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056cc:	2360      	movs	r3, #96	; 0x60
 80056ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80056d0:	2300      	movs	r3, #0
 80056d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056d4:	2300      	movs	r3, #0
 80056d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056d8:	2300      	movs	r3, #0
 80056da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80056dc:	463b      	mov	r3, r7
 80056de:	220c      	movs	r2, #12
 80056e0:	4619      	mov	r1, r3
 80056e2:	4807      	ldr	r0, [pc, #28]	; (8005700 <MX_TIM2_Init+0xe8>)
 80056e4:	f00f f846 	bl	8014774 <HAL_TIM_PWM_ConfigChannel>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80056ee:	f7fe f9db 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80056f2:	4803      	ldr	r0, [pc, #12]	; (8005700 <MX_TIM2_Init+0xe8>)
 80056f4:	f000 f940 	bl	8005978 <HAL_TIM_MspPostInit>

}
 80056f8:	bf00      	nop
 80056fa:	3738      	adds	r7, #56	; 0x38
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	2400256c 	.word	0x2400256c

08005704 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800570a:	f107 0310 	add.w	r3, r7, #16
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	605a      	str	r2, [r3, #4]
 8005714:	609a      	str	r2, [r3, #8]
 8005716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005718:	1d3b      	adds	r3, r7, #4
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	605a      	str	r2, [r3, #4]
 8005720:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005722:	4b1e      	ldr	r3, [pc, #120]	; (800579c <MX_TIM3_Init+0x98>)
 8005724:	4a1e      	ldr	r2, [pc, #120]	; (80057a0 <MX_TIM3_Init+0x9c>)
 8005726:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7500-1;
 8005728:	4b1c      	ldr	r3, [pc, #112]	; (800579c <MX_TIM3_Init+0x98>)
 800572a:	f641 524b 	movw	r2, #7499	; 0x1d4b
 800572e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005730:	4b1a      	ldr	r3, [pc, #104]	; (800579c <MX_TIM3_Init+0x98>)
 8005732:	2200      	movs	r2, #0
 8005734:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 35000-1;
 8005736:	4b19      	ldr	r3, [pc, #100]	; (800579c <MX_TIM3_Init+0x98>)
 8005738:	f648 02b7 	movw	r2, #34999	; 0x88b7
 800573c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800573e:	4b17      	ldr	r3, [pc, #92]	; (800579c <MX_TIM3_Init+0x98>)
 8005740:	2200      	movs	r2, #0
 8005742:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005744:	4b15      	ldr	r3, [pc, #84]	; (800579c <MX_TIM3_Init+0x98>)
 8005746:	2200      	movs	r2, #0
 8005748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800574a:	4814      	ldr	r0, [pc, #80]	; (800579c <MX_TIM3_Init+0x98>)
 800574c:	f00e fb6d 	bl	8013e2a <HAL_TIM_Base_Init>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8005756:	f7fe f9a7 	bl	8003aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800575a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800575e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005760:	f107 0310 	add.w	r3, r7, #16
 8005764:	4619      	mov	r1, r3
 8005766:	480d      	ldr	r0, [pc, #52]	; (800579c <MX_TIM3_Init+0x98>)
 8005768:	f00f f918 	bl	801499c <HAL_TIM_ConfigClockSource>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8005772:	f7fe f999 	bl	8003aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005776:	2300      	movs	r3, #0
 8005778:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800577a:	2300      	movs	r3, #0
 800577c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800577e:	1d3b      	adds	r3, r7, #4
 8005780:	4619      	mov	r1, r3
 8005782:	4806      	ldr	r0, [pc, #24]	; (800579c <MX_TIM3_Init+0x98>)
 8005784:	f00f fe60 	bl	8015448 <HAL_TIMEx_MasterConfigSynchronization>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800578e:	f7fe f98b 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005792:	bf00      	nop
 8005794:	3720      	adds	r7, #32
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	240025b8 	.word	0x240025b8
 80057a0:	40000400 	.word	0x40000400

080057a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80057aa:	f107 0310 	add.w	r3, r7, #16
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	605a      	str	r2, [r3, #4]
 80057b4:	609a      	str	r2, [r3, #8]
 80057b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057b8:	1d3b      	adds	r3, r7, #4
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	605a      	str	r2, [r3, #4]
 80057c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80057c2:	4b1d      	ldr	r3, [pc, #116]	; (8005838 <MX_TIM4_Init+0x94>)
 80057c4:	4a1d      	ldr	r2, [pc, #116]	; (800583c <MX_TIM4_Init+0x98>)
 80057c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 75-1;
 80057c8:	4b1b      	ldr	r3, [pc, #108]	; (8005838 <MX_TIM4_Init+0x94>)
 80057ca:	224a      	movs	r2, #74	; 0x4a
 80057cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057ce:	4b1a      	ldr	r3, [pc, #104]	; (8005838 <MX_TIM4_Init+0x94>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1500-1;
 80057d4:	4b18      	ldr	r3, [pc, #96]	; (8005838 <MX_TIM4_Init+0x94>)
 80057d6:	f240 52db 	movw	r2, #1499	; 0x5db
 80057da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057dc:	4b16      	ldr	r3, [pc, #88]	; (8005838 <MX_TIM4_Init+0x94>)
 80057de:	2200      	movs	r2, #0
 80057e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057e2:	4b15      	ldr	r3, [pc, #84]	; (8005838 <MX_TIM4_Init+0x94>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80057e8:	4813      	ldr	r0, [pc, #76]	; (8005838 <MX_TIM4_Init+0x94>)
 80057ea:	f00e fb1e 	bl	8013e2a <HAL_TIM_Base_Init>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80057f4:	f7fe f958 	bl	8003aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80057fe:	f107 0310 	add.w	r3, r7, #16
 8005802:	4619      	mov	r1, r3
 8005804:	480c      	ldr	r0, [pc, #48]	; (8005838 <MX_TIM4_Init+0x94>)
 8005806:	f00f f8c9 	bl	801499c <HAL_TIM_ConfigClockSource>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8005810:	f7fe f94a 	bl	8003aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005814:	2300      	movs	r3, #0
 8005816:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005818:	2300      	movs	r3, #0
 800581a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800581c:	1d3b      	adds	r3, r7, #4
 800581e:	4619      	mov	r1, r3
 8005820:	4805      	ldr	r0, [pc, #20]	; (8005838 <MX_TIM4_Init+0x94>)
 8005822:	f00f fe11 	bl	8015448 <HAL_TIMEx_MasterConfigSynchronization>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800582c:	f7fe f93c 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005830:	bf00      	nop
 8005832:	3720      	adds	r7, #32
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	24002604 	.word	0x24002604
 800583c:	40000800 	.word	0x40000800

08005840 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a46      	ldr	r2, [pc, #280]	; (8005968 <HAL_TIM_Base_MspInit+0x128>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d12f      	bne.n	80058b2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005852:	4b46      	ldr	r3, [pc, #280]	; (800596c <HAL_TIM_Base_MspInit+0x12c>)
 8005854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005858:	4a44      	ldr	r2, [pc, #272]	; (800596c <HAL_TIM_Base_MspInit+0x12c>)
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005862:	4b42      	ldr	r3, [pc, #264]	; (800596c <HAL_TIM_Base_MspInit+0x12c>)
 8005864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8005870:	2200      	movs	r2, #0
 8005872:	2105      	movs	r1, #5
 8005874:	2018      	movs	r0, #24
 8005876:	f002 fe75 	bl	8008564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800587a:	2018      	movs	r0, #24
 800587c:	f002 fe8c 	bl	8008598 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8005880:	2200      	movs	r2, #0
 8005882:	2105      	movs	r1, #5
 8005884:	2019      	movs	r0, #25
 8005886:	f002 fe6d 	bl	8008564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800588a:	2019      	movs	r0, #25
 800588c:	f002 fe84 	bl	8008598 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8005890:	2200      	movs	r2, #0
 8005892:	2105      	movs	r1, #5
 8005894:	201a      	movs	r0, #26
 8005896:	f002 fe65 	bl	8008564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800589a:	201a      	movs	r0, #26
 800589c:	f002 fe7c 	bl	8008598 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80058a0:	2200      	movs	r2, #0
 80058a2:	2105      	movs	r1, #5
 80058a4:	201b      	movs	r0, #27
 80058a6:	f002 fe5d 	bl	8008564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80058aa:	201b      	movs	r0, #27
 80058ac:	f002 fe74 	bl	8008598 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80058b0:	e055      	b.n	800595e <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM2)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ba:	d117      	bne.n	80058ec <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80058bc:	4b2b      	ldr	r3, [pc, #172]	; (800596c <HAL_TIM_Base_MspInit+0x12c>)
 80058be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058c2:	4a2a      	ldr	r2, [pc, #168]	; (800596c <HAL_TIM_Base_MspInit+0x12c>)
 80058c4:	f043 0301 	orr.w	r3, r3, #1
 80058c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80058cc:	4b27      	ldr	r3, [pc, #156]	; (800596c <HAL_TIM_Base_MspInit+0x12c>)
 80058ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	613b      	str	r3, [r7, #16]
 80058d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80058da:	2200      	movs	r2, #0
 80058dc:	2105      	movs	r1, #5
 80058de:	201c      	movs	r0, #28
 80058e0:	f002 fe40 	bl	8008564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80058e4:	201c      	movs	r0, #28
 80058e6:	f002 fe57 	bl	8008598 <HAL_NVIC_EnableIRQ>
}
 80058ea:	e038      	b.n	800595e <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM3)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1f      	ldr	r2, [pc, #124]	; (8005970 <HAL_TIM_Base_MspInit+0x130>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d117      	bne.n	8005926 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80058f6:	4b1d      	ldr	r3, [pc, #116]	; (800596c <HAL_TIM_Base_MspInit+0x12c>)
 80058f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058fc:	4a1b      	ldr	r2, [pc, #108]	; (800596c <HAL_TIM_Base_MspInit+0x12c>)
 80058fe:	f043 0302 	orr.w	r3, r3, #2
 8005902:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005906:	4b19      	ldr	r3, [pc, #100]	; (800596c <HAL_TIM_Base_MspInit+0x12c>)
 8005908:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005914:	2200      	movs	r2, #0
 8005916:	2105      	movs	r1, #5
 8005918:	201d      	movs	r0, #29
 800591a:	f002 fe23 	bl	8008564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800591e:	201d      	movs	r0, #29
 8005920:	f002 fe3a 	bl	8008598 <HAL_NVIC_EnableIRQ>
}
 8005924:	e01b      	b.n	800595e <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM4)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a12      	ldr	r2, [pc, #72]	; (8005974 <HAL_TIM_Base_MspInit+0x134>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d116      	bne.n	800595e <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005930:	4b0e      	ldr	r3, [pc, #56]	; (800596c <HAL_TIM_Base_MspInit+0x12c>)
 8005932:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005936:	4a0d      	ldr	r2, [pc, #52]	; (800596c <HAL_TIM_Base_MspInit+0x12c>)
 8005938:	f043 0304 	orr.w	r3, r3, #4
 800593c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005940:	4b0a      	ldr	r3, [pc, #40]	; (800596c <HAL_TIM_Base_MspInit+0x12c>)
 8005942:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005946:	f003 0304 	and.w	r3, r3, #4
 800594a:	60bb      	str	r3, [r7, #8]
 800594c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800594e:	2200      	movs	r2, #0
 8005950:	2105      	movs	r1, #5
 8005952:	201e      	movs	r0, #30
 8005954:	f002 fe06 	bl	8008564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005958:	201e      	movs	r0, #30
 800595a:	f002 fe1d 	bl	8008598 <HAL_NVIC_EnableIRQ>
}
 800595e:	bf00      	nop
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40010000 	.word	0x40010000
 800596c:	58024400 	.word	0x58024400
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800

08005978 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08a      	sub	sp, #40	; 0x28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005980:	f107 0314 	add.w	r3, r7, #20
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	605a      	str	r2, [r3, #4]
 800598a:	609a      	str	r2, [r3, #8]
 800598c:	60da      	str	r2, [r3, #12]
 800598e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a26      	ldr	r2, [pc, #152]	; (8005a30 <HAL_TIM_MspPostInit+0xb8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d120      	bne.n	80059dc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800599a:	4b26      	ldr	r3, [pc, #152]	; (8005a34 <HAL_TIM_MspPostInit+0xbc>)
 800599c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059a0:	4a24      	ldr	r2, [pc, #144]	; (8005a34 <HAL_TIM_MspPostInit+0xbc>)
 80059a2:	f043 0301 	orr.w	r3, r3, #1
 80059a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059aa:	4b22      	ldr	r3, [pc, #136]	; (8005a34 <HAL_TIM_MspPostInit+0xbc>)
 80059ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80059b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059be:	2302      	movs	r3, #2
 80059c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059c6:	2300      	movs	r3, #0
 80059c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80059ca:	2301      	movs	r3, #1
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059ce:	f107 0314 	add.w	r3, r7, #20
 80059d2:	4619      	mov	r1, r3
 80059d4:	4818      	ldr	r0, [pc, #96]	; (8005a38 <HAL_TIM_MspPostInit+0xc0>)
 80059d6:	f006 fd19 	bl	800c40c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80059da:	e024      	b.n	8005a26 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e4:	d11f      	bne.n	8005a26 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059e6:	4b13      	ldr	r3, [pc, #76]	; (8005a34 <HAL_TIM_MspPostInit+0xbc>)
 80059e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059ec:	4a11      	ldr	r2, [pc, #68]	; (8005a34 <HAL_TIM_MspPostInit+0xbc>)
 80059ee:	f043 0302 	orr.w	r3, r3, #2
 80059f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059f6:	4b0f      	ldr	r3, [pc, #60]	; (8005a34 <HAL_TIM_MspPostInit+0xbc>)
 80059f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005a04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a12:	2300      	movs	r3, #0
 8005a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005a16:	2301      	movs	r3, #1
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a1a:	f107 0314 	add.w	r3, r7, #20
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4806      	ldr	r0, [pc, #24]	; (8005a3c <HAL_TIM_MspPostInit+0xc4>)
 8005a22:	f006 fcf3 	bl	800c40c <HAL_GPIO_Init>
}
 8005a26:	bf00      	nop
 8005a28:	3728      	adds	r7, #40	; 0x28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	40010000 	.word	0x40010000
 8005a34:	58024400 	.word	0x58024400
 8005a38:	58020000 	.word	0x58020000
 8005a3c:	58020400 	.word	0x58020400

08005a40 <get_uptime>:
 * @brief Gets the system uptime and stores it in a buffer.
 *
 * @param buffer Pointer to a buffer where the uptime will be stored as four bytes.
 */
void get_uptime(uint8_t *buffer)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8005a4c:	4b21      	ldr	r3, [pc, #132]	; (8005ad4 <get_uptime+0x94>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8005a52:	4b21      	ldr	r3, [pc, #132]	; (8005ad8 <get_uptime+0x98>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	60fb      	str	r3, [r7, #12]

	// Ensuring uptime_millis hasn't rolled over
	if (ms != uptime_millis)
 8005a58:	4b1e      	ldr	r3, [pc, #120]	; (8005ad4 <get_uptime+0x94>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d005      	beq.n	8005a6e <get_uptime+0x2e>
	{
		ms = uptime_millis;
 8005a62:	4b1c      	ldr	r3, [pc, #112]	; (8005ad4 <get_uptime+0x94>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8005a68:	4b1b      	ldr	r3, [pc, #108]	; (8005ad8 <get_uptime+0x98>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a74:	fb03 f202 	mul.w	r2, r3, r2
 8005a78:	4b17      	ldr	r3, [pc, #92]	; (8005ad8 <get_uptime+0x98>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	4917      	ldr	r1, [pc, #92]	; (8005adc <get_uptime+0x9c>)
 8005a80:	fba1 1303 	umull	r1, r3, r1, r3
 8005a84:	099b      	lsrs	r3, r3, #6
 8005a86:	68f9      	ldr	r1, [r7, #12]
 8005a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	617b      	str	r3, [r7, #20]

	if (ms == 0)
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <get_uptime+0x5a>
	{
		uptime = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	0e1b      	lsrs	r3, r3, #24
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	0c1a      	lsrs	r2, r3, #16
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	0a1a      	lsrs	r2, r3, #8
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3302      	adds	r3, #2
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3303      	adds	r3, #3
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	24001d18 	.word	0x24001d18
 8005ad8:	e000e010 	.word	0xe000e010
 8005adc:	10624dd3 	.word	0x10624dd3

08005ae0 <get_unix_time>:
 * @brief Retrieves the current Unix time and milliseconds, storing them in a buffer.
 *
 * @param buffer Pointer to a buffer where the Unix time (4 bytes) and milliseconds (2 bytes) will be stored.
 */
void get_unix_time(uint8_t* buffer)
{
 8005ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae4:	b09d      	sub	sp, #116	; 0x74
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	63f8      	str	r0, [r7, #60]	; 0x3c
	#define DAYS_IN_SECONDS   (24U * SECONDS_IN_1_HOUR)

	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8005aea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005aee:	2200      	movs	r2, #0
 8005af0:	4619      	mov	r1, r3
 8005af2:	4893      	ldr	r0, [pc, #588]	; (8005d40 <get_unix_time+0x260>)
 8005af4:	f00d f9f8 	bl	8012ee8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8005af8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005afc:	2200      	movs	r2, #0
 8005afe:	4619      	mov	r1, r3
 8005b00:	488f      	ldr	r0, [pc, #572]	; (8005d40 <get_unix_time+0x260>)
 8005b02:	f00d fad5 	bl	80130b0 <HAL_RTC_GetDate>
	uint16_t milliseconds = (10000 - (current_time.SubSeconds)) / 10;
 8005b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b08:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b0c:	1ad2      	subs	r2, r2, r3
 8005b0e:	4b8d      	ldr	r3, [pc, #564]	; (8005d44 <get_unix_time+0x264>)
 8005b10:	fba3 2302 	umull	r2, r3, r3, r2
 8005b14:	08db      	lsrs	r3, r3, #3
 8005b16:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	uint16_t y;
	uint8_t m;
	uint8_t d;
	uint64_t unix_tm_val = 0;
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	y = current_date.Year + 2000;
 8005b26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005b30:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	m = current_date.Month;
 8005b34:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005b38:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	d = current_date.Date;
 8005b3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005b40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	// January and February are counted as months 13 and 14 of the previous year
	if (m <= 2)
 8005b44:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d809      	bhi.n	8005b60 <get_unix_time+0x80>
	{
		m += 12;
 8005b4c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8005b50:	330c      	adds	r3, #12
 8005b52:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		y -= 1;
 8005b56:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	}
	// convert years to days
	unix_tm_val = (365 * y) + (y / 4) - (y / 100) + (y / 400);
 8005b60:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8005b64:	f240 136d 	movw	r3, #365	; 0x16d
 8005b68:	fb03 f202 	mul.w	r2, r3, r2
 8005b6c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005b70:	089b      	lsrs	r3, r3, #2
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	18d1      	adds	r1, r2, r3
 8005b76:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8005b7a:	4b73      	ldr	r3, [pc, #460]	; (8005d48 <get_unix_time+0x268>)
 8005b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8005b80:	095b      	lsrs	r3, r3, #5
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	1ac9      	subs	r1, r1, r3
 8005b86:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8005b8a:	4b6f      	ldr	r3, [pc, #444]	; (8005d48 <get_unix_time+0x268>)
 8005b8c:	fba3 2302 	umull	r2, r3, r3, r2
 8005b90:	09db      	lsrs	r3, r3, #7
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	440b      	add	r3, r1
 8005b96:	17da      	asrs	r2, r3, #31
 8005b98:	623b      	str	r3, [r7, #32]
 8005b9a:	627a      	str	r2, [r7, #36]	; 0x24
 8005b9c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ba0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// convert months to days
	unix_tm_val += (30 * m) + (3 * (m + 1) / 5) + d;
 8005ba4:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8005ba8:	4613      	mov	r3, r2
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	1a9b      	subs	r3, r3, r2
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	4613      	mov	r3, r2
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	1899      	adds	r1, r3, r2
 8005bbe:	4b63      	ldr	r3, [pc, #396]	; (8005d4c <get_unix_time+0x26c>)
 8005bc0:	fb83 2301 	smull	r2, r3, r3, r1
 8005bc4:	105a      	asrs	r2, r3, #1
 8005bc6:	17cb      	asrs	r3, r1, #31
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	18c2      	adds	r2, r0, r3
 8005bcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bd0:	4413      	add	r3, r2
 8005bd2:	17da      	asrs	r2, r3, #31
 8005bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8005bd6:	637a      	str	r2, [r7, #52]	; 0x34
 8005bd8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005bdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bde:	1851      	adds	r1, r2, r1
 8005be0:	61b9      	str	r1, [r7, #24]
 8005be2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005be4:	eb43 0101 	adc.w	r1, r3, r1
 8005be8:	61f9      	str	r1, [r7, #28]
 8005bea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bee:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// Unix time starts on January 1st, 1970
	unix_tm_val -= UNIX_TIME_CONST;
 8005bf2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005bf6:	4956      	ldr	r1, [pc, #344]	; (8005d50 <get_unix_time+0x270>)
 8005bf8:	1851      	adds	r1, r2, r1
 8005bfa:	6139      	str	r1, [r7, #16]
 8005bfc:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005c06:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// convert days to seconds
	unix_tm_val *= DAYS_IN_SECONDS;
 8005c0a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	1896      	adds	r6, r2, r2
 8005c14:	60be      	str	r6, [r7, #8]
 8005c16:	415b      	adcs	r3, r3
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c1e:	eb12 0800 	adds.w	r8, r2, r0
 8005c22:	eb43 0901 	adc.w	r9, r3, r1
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8005c32:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8005c36:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8005c3a:	ebb2 0408 	subs.w	r4, r2, r8
 8005c3e:	eb63 0509 	sbc.w	r5, r3, r9
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	012b      	lsls	r3, r5, #4
 8005c4c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8005c50:	0122      	lsls	r2, r4, #4
 8005c52:	ebb2 0a04 	subs.w	sl, r2, r4
 8005c56:	eb63 0b05 	sbc.w	fp, r3, r5
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	f04f 0300 	mov.w	r3, #0
 8005c62:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8005c66:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 8005c6a:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8005c6e:	4692      	mov	sl, r2
 8005c70:	469b      	mov	fp, r3
 8005c72:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
	//Add hours, minutes and seconds
	unix_tm_val += (SECONDS_IN_1_HOUR * current_time.Hours) + (SECONDS_IN_1_MIN * current_time.Minutes) + current_time.Seconds;
 8005c76:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005c80:	fb03 f202 	mul.w	r2, r3, r2
 8005c84:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005c88:	4619      	mov	r1, r3
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	011b      	lsls	r3, r3, #4
 8005c8e:	1a5b      	subs	r3, r3, r1
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8005c98:	4413      	add	r3, r2
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ca0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005ca4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8005ca8:	4621      	mov	r1, r4
 8005caa:	1851      	adds	r1, r2, r1
 8005cac:	6039      	str	r1, [r7, #0]
 8005cae:	4629      	mov	r1, r5
 8005cb0:	eb43 0101 	adc.w	r1, r3, r1
 8005cb4:	6079      	str	r1, [r7, #4]
 8005cb6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005cba:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

	buffer[0] = ((unix_tm_val >> 24) & 0xFF);
 8005cbe:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005cc2:	f04f 0200 	mov.w	r2, #0
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	0e02      	lsrs	r2, r0, #24
 8005ccc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005cd0:	0e0b      	lsrs	r3, r1, #24
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd6:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((unix_tm_val >> 16) & 0xFF);
 8005cd8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	0c02      	lsrs	r2, r0, #16
 8005ce6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005cea:	0c0b      	lsrs	r3, r1, #16
 8005cec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cee:	3101      	adds	r1, #1
 8005cf0:	b2d3      	uxtb	r3, r2
 8005cf2:	700b      	strb	r3, [r1, #0]
	buffer[2] = ((unix_tm_val >> 8) & 0xFF);
 8005cf4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005cf8:	f04f 0200 	mov.w	r2, #0
 8005cfc:	f04f 0300 	mov.w	r3, #0
 8005d00:	0a02      	lsrs	r2, r0, #8
 8005d02:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005d06:	0a0b      	lsrs	r3, r1, #8
 8005d08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d0a:	3102      	adds	r1, #2
 8005d0c:	b2d3      	uxtb	r3, r2
 8005d0e:	700b      	strb	r3, [r1, #0]
	buffer[3] = unix_tm_val & 0xFF;
 8005d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d12:	3303      	adds	r3, #3
 8005d14:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8005d18:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((milliseconds >> 8) & 0xFF);
 8005d1a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005d1e:	0a1b      	lsrs	r3, r3, #8
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d24:	3304      	adds	r3, #4
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	701a      	strb	r2, [r3, #0]
	buffer[5] = milliseconds & 0xFF;
 8005d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d2c:	3305      	adds	r3, #5
 8005d2e:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
}
 8005d36:	bf00      	nop
 8005d38:	3774      	adds	r7, #116	; 0x74
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d40:	2400227c 	.word	0x2400227c
 8005d44:	cccccccd 	.word	0xcccccccd
 8005d48:	51eb851f 	.word	0x51eb851f
 8005d4c:	66666667 	.word	0x66666667
 8005d50:	fff50537 	.word	0xfff50537

08005d54 <calibrateRTC>:
 *               [6] = Second
 *               [7] = ms MSB
 *               [8] = ms LSB
 */
void calibrateRTC(uint8_t *buffer)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08c      	sub	sp, #48	; 0x30
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	785b      	ldrb	r3, [r3, #1]
 8005d60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	789b      	ldrb	r3, [r3, #2]
 8005d68:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	78db      	ldrb	r3, [r3, #3]
 8005d70:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	791b      	ldrb	r3, [r3, #4]
 8005d78:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	795b      	ldrb	r3, [r3, #5]
 8005d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	799b      	ldrb	r3, [r3, #6]
 8005d88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3307      	adds	r3, #7
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	b21a      	sxth	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	3308      	adds	r3, #8
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	b21b      	sxth	r3, r3
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	b21b      	sxth	r3, r3
 8005da2:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8005da4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8005dac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005db0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8005db4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005db8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8005dbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005dc0:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8005dc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005dc6:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8005dc8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005dcc:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 8005dce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005dd0:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8005dd2:	f107 0320 	add.w	r3, r7, #32
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	4619      	mov	r1, r3
 8005dda:	480b      	ldr	r0, [pc, #44]	; (8005e08 <calibrateRTC+0xb4>)
 8005ddc:	f00d f8e0 	bl	8012fa0 <HAL_RTC_SetDate>
 8005de0:	4603      	mov	r3, r0
 8005de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK)
 8005de6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <calibrateRTC+0x9e>
	{
		Error_Handler();
 8005dee:	f7fd fe5b 	bl	8003aa8 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8005df2:	f107 030c 	add.w	r3, r7, #12
 8005df6:	2200      	movs	r2, #0
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4803      	ldr	r0, [pc, #12]	; (8005e08 <calibrateRTC+0xb4>)
 8005dfc:	f000 f806 	bl	8005e0c <RTC_SetTime>
}
 8005e00:	bf00      	nop
 8005e02:	3730      	adds	r7, #48	; 0x30
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	2400227c 	.word	0x2400227c

08005e0c <RTC_SetTime>:
 * @param Format Specifies the format of the time (24-hour or 12-hour).
 *
 * @retval HAL_StatusTypeDef HAL_OK on success, HAL_ERROR on failure.
 */
HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e0c:	b590      	push	{r4, r7, lr}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	__HAL_LOCK(hrtc);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d101      	bne.n	8005e26 <RTC_SetTime+0x1a>
 8005e22:	2302      	movs	r3, #2
 8005e24:	e051      	b.n	8005eca <RTC_SetTime+0xbe>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2202      	movs	r2, #2
 8005e32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	22ca      	movs	r2, #202	; 0xca
 8005e3c:	625a      	str	r2, [r3, #36]	; 0x24
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2253      	movs	r2, #83	; 0x53
 8005e44:	625a      	str	r2, [r3, #36]	; 0x24

	status = RTC_EnterInitMode(hrtc);
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f00d f9a4 	bl	8013194 <RTC_EnterInitMode>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK)
 8005e50:	7dfb      	ldrb	r3, [r7, #23]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d129      	bne.n	8005eaa <RTC_SetTime+0x9e>
	{
		sTime->TimeFormat = 0x00U;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));
		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f00d fa09 	bl	8013278 <RTC_ByteToBcd2>
 8005e66:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8005e68:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	785b      	ldrb	r3, [r3, #1]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f00d fa02 	bl	8013278 <RTC_ByteToBcd2>
 8005e74:	4603      	mov	r3, r0
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	789b      	ldrb	r3, [r3, #2]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f00d f9fa 	bl	8013278 <RTC_ByteToBcd2>
 8005e84:	4603      	mov	r3, r0
 8005e86:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	78db      	ldrb	r3, [r3, #3]
 8005e8e:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]

		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	6939      	ldr	r1, [r7, #16]
 8005e9a:	4b0e      	ldr	r3, [pc, #56]	; (8005ed4 <RTC_SetTime+0xc8>)
 8005e9c:	400b      	ands	r3, r1
 8005e9e:	6013      	str	r3, [r2, #0]

		status = RTC_ExitInitMode(hrtc);
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f00d f9ab 	bl	80131fc <RTC_ExitInitMode>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	75fb      	strb	r3, [r7, #23]
	}

	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	22ff      	movs	r2, #255	; 0xff
 8005eb0:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK)
 8005eb2:	7dfb      	ldrb	r3, [r7, #23]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d103      	bne.n	8005ec0 <RTC_SetTime+0xb4>
	{
		hrtc->State = HAL_RTC_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	__HAL_UNLOCK(hrtc);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd90      	pop	{r4, r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	007f7f7f 	.word	0x007f7f7f

08005ed8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005edc:	4b30      	ldr	r3, [pc, #192]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005ede:	4a31      	ldr	r2, [pc, #196]	; (8005fa4 <MX_USART1_UART_Init+0xcc>)
 8005ee0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8005ee2:	4b2f      	ldr	r3, [pc, #188]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005ee4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8005ee8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005eea:	4b2d      	ldr	r3, [pc, #180]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ef0:	4b2b      	ldr	r3, [pc, #172]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005ef6:	4b2a      	ldr	r3, [pc, #168]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005efc:	4b28      	ldr	r3, [pc, #160]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005efe:	220c      	movs	r2, #12
 8005f00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f02:	4b27      	ldr	r3, [pc, #156]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f08:	4b25      	ldr	r3, [pc, #148]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f0e:	4b24      	ldr	r3, [pc, #144]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005f14:	4b22      	ldr	r3, [pc, #136]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f1a:	4b21      	ldr	r3, [pc, #132]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f20:	481f      	ldr	r0, [pc, #124]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005f22:	f00f fbbb 	bl	801569c <HAL_UART_Init>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005f2c:	f7fd fdbc 	bl	8003aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f30:	2100      	movs	r1, #0
 8005f32:	481b      	ldr	r0, [pc, #108]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005f34:	f012 fb2d 	bl	8018592 <HAL_UARTEx_SetTxFifoThreshold>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005f3e:	f7fd fdb3 	bl	8003aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f42:	2100      	movs	r1, #0
 8005f44:	4816      	ldr	r0, [pc, #88]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005f46:	f012 fb62 	bl	801860e <HAL_UARTEx_SetRxFifoThreshold>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005f50:	f7fd fdaa 	bl	8003aa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005f54:	4812      	ldr	r0, [pc, #72]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005f56:	f012 fae3 	bl	8018520 <HAL_UARTEx_DisableFifoMode>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005f60:	f7fd fda2 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8005f64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005f68:	480d      	ldr	r0, [pc, #52]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005f6a:	f012 fb50 	bl	801860e <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8005f6e:	480c      	ldr	r0, [pc, #48]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005f70:	f012 fa9b 	bl	80184aa <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8005f74:	480a      	ldr	r0, [pc, #40]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005f76:	f012 fa65 	bl	8018444 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8005f7a:	4b09      	ldr	r3, [pc, #36]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005f88:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8005f8a:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	4b03      	ldr	r3, [pc, #12]	; (8005fa0 <MX_USART1_UART_Init+0xc8>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005f98:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8005f9a:	bf00      	nop
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	24002650 	.word	0x24002650
 8005fa4:	40011000 	.word	0x40011000

08005fa8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b0ba      	sub	sp, #232	; 0xe8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fb0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	605a      	str	r2, [r3, #4]
 8005fba:	609a      	str	r2, [r3, #8]
 8005fbc:	60da      	str	r2, [r3, #12]
 8005fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005fc0:	f107 0310 	add.w	r3, r7, #16
 8005fc4:	22c0      	movs	r2, #192	; 0xc0
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f016 f939 	bl	801c240 <memset>
  if(uartHandle->Instance==USART1)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a41      	ldr	r2, [pc, #260]	; (80060d8 <HAL_UART_MspInit+0x130>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d17b      	bne.n	80060d0 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005fd8:	f04f 0201 	mov.w	r2, #1
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8005fe4:	2318      	movs	r3, #24
 8005fe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fea:	f107 0310 	add.w	r3, r7, #16
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f00a f95c 	bl	80102ac <HAL_RCCEx_PeriphCLKConfig>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8005ffa:	f7fd fd55 	bl	8003aa8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005ffe:	4b37      	ldr	r3, [pc, #220]	; (80060dc <HAL_UART_MspInit+0x134>)
 8006000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006004:	4a35      	ldr	r2, [pc, #212]	; (80060dc <HAL_UART_MspInit+0x134>)
 8006006:	f043 0310 	orr.w	r3, r3, #16
 800600a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800600e:	4b33      	ldr	r3, [pc, #204]	; (80060dc <HAL_UART_MspInit+0x134>)
 8006010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800601c:	4b2f      	ldr	r3, [pc, #188]	; (80060dc <HAL_UART_MspInit+0x134>)
 800601e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006022:	4a2e      	ldr	r2, [pc, #184]	; (80060dc <HAL_UART_MspInit+0x134>)
 8006024:	f043 0301 	orr.w	r3, r3, #1
 8006028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800602c:	4b2b      	ldr	r3, [pc, #172]	; (80060dc <HAL_UART_MspInit+0x134>)
 800602e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	60bb      	str	r3, [r7, #8]
 8006038:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800603a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800603e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006042:	2302      	movs	r3, #2
 8006044:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006048:	2300      	movs	r3, #0
 800604a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800604e:	2300      	movs	r3, #0
 8006050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006054:	2307      	movs	r3, #7
 8006056:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800605a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800605e:	4619      	mov	r1, r3
 8006060:	481f      	ldr	r0, [pc, #124]	; (80060e0 <HAL_UART_MspInit+0x138>)
 8006062:	f006 f9d3 	bl	800c40c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8006066:	4b1f      	ldr	r3, [pc, #124]	; (80060e4 <HAL_UART_MspInit+0x13c>)
 8006068:	4a1f      	ldr	r2, [pc, #124]	; (80060e8 <HAL_UART_MspInit+0x140>)
 800606a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800606c:	4b1d      	ldr	r3, [pc, #116]	; (80060e4 <HAL_UART_MspInit+0x13c>)
 800606e:	222a      	movs	r2, #42	; 0x2a
 8006070:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006072:	4b1c      	ldr	r3, [pc, #112]	; (80060e4 <HAL_UART_MspInit+0x13c>)
 8006074:	2240      	movs	r2, #64	; 0x40
 8006076:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006078:	4b1a      	ldr	r3, [pc, #104]	; (80060e4 <HAL_UART_MspInit+0x13c>)
 800607a:	2200      	movs	r2, #0
 800607c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800607e:	4b19      	ldr	r3, [pc, #100]	; (80060e4 <HAL_UART_MspInit+0x13c>)
 8006080:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006084:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006086:	4b17      	ldr	r3, [pc, #92]	; (80060e4 <HAL_UART_MspInit+0x13c>)
 8006088:	2200      	movs	r2, #0
 800608a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800608c:	4b15      	ldr	r3, [pc, #84]	; (80060e4 <HAL_UART_MspInit+0x13c>)
 800608e:	2200      	movs	r2, #0
 8006090:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006092:	4b14      	ldr	r3, [pc, #80]	; (80060e4 <HAL_UART_MspInit+0x13c>)
 8006094:	2200      	movs	r2, #0
 8006096:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006098:	4b12      	ldr	r3, [pc, #72]	; (80060e4 <HAL_UART_MspInit+0x13c>)
 800609a:	2200      	movs	r2, #0
 800609c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800609e:	4b11      	ldr	r3, [pc, #68]	; (80060e4 <HAL_UART_MspInit+0x13c>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80060a4:	480f      	ldr	r0, [pc, #60]	; (80060e4 <HAL_UART_MspInit+0x13c>)
 80060a6:	f002 fe8b 	bl	8008dc0 <HAL_DMA_Init>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80060b0:	f7fd fcfa 	bl	8003aa8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a0b      	ldr	r2, [pc, #44]	; (80060e4 <HAL_UART_MspInit+0x13c>)
 80060b8:	67da      	str	r2, [r3, #124]	; 0x7c
 80060ba:	4a0a      	ldr	r2, [pc, #40]	; (80060e4 <HAL_UART_MspInit+0x13c>)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80060c0:	2200      	movs	r2, #0
 80060c2:	2105      	movs	r1, #5
 80060c4:	2025      	movs	r0, #37	; 0x25
 80060c6:	f002 fa4d 	bl	8008564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80060ca:	2025      	movs	r0, #37	; 0x25
 80060cc:	f002 fa64 	bl	8008598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80060d0:	bf00      	nop
 80060d2:	37e8      	adds	r7, #232	; 0xe8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	40011000 	.word	0x40011000
 80060dc:	58024400 	.word	0x58024400
 80060e0:	58020000 	.word	0x58020000
 80060e4:	240026e4 	.word	0x240026e4
 80060e8:	40020040 	.word	0x40020040

080060ec <voltage_monitor_init>:
 * @brief Initializes the voltage monitoring system by setting up each rail's
 *        parameters such as name, error count, enable status, voltage limits,
 *        and out-of-bound counters.
 */
void voltage_monitor_init()
{
 80060ec:	b480      	push	{r7}
 80060ee:	af00      	add	r7, sp, #0
	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 80060f0:	4bc0      	ldr	r3, [pc, #768]	; (80063f4 <voltage_monitor_init+0x308>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 80060f6:	4bbf      	ldr	r3, [pc, #764]	; (80063f4 <voltage_monitor_init+0x308>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = ENABLED;
 80060fc:	4bbd      	ldr	r3, [pc, #756]	; (80063f4 <voltage_monitor_init+0x308>)
 80060fe:	2201      	movs	r2, #1
 8006100:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8006102:	4bbc      	ldr	r3, [pc, #752]	; (80063f4 <voltage_monitor_init+0x308>)
 8006104:	2200      	movs	r2, #0
 8006106:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = RAIL_VSENSE_MAX;
 8006108:	4bba      	ldr	r3, [pc, #744]	; (80063f4 <voltage_monitor_init+0x308>)
 800610a:	f240 328a 	movw	r2, #906	; 0x38a
 800610e:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = RAIL_VSENSE_MIN;
 8006110:	4bb8      	ldr	r3, [pc, #736]	; (80063f4 <voltage_monitor_init+0x308>)
 8006112:	f44f 7215 	mov.w	r2, #596	; 0x254
 8006116:	811a      	strh	r2, [r3, #8]
	rail_monitor[RAIL_vsense].OOB_1 = 0;
 8006118:	4bb6      	ldr	r3, [pc, #728]	; (80063f4 <voltage_monitor_init+0x308>)
 800611a:	2200      	movs	r2, #0
 800611c:	815a      	strh	r2, [r3, #10]
	rail_monitor[RAIL_vsense].OOB_2 = 0;
 800611e:	4bb5      	ldr	r3, [pc, #724]	; (80063f4 <voltage_monitor_init+0x308>)
 8006120:	2200      	movs	r2, #0
 8006122:	819a      	strh	r2, [r3, #12]
	rail_monitor[RAIL_vsense].OOB_3 = 0;
 8006124:	4bb3      	ldr	r3, [pc, #716]	; (80063f4 <voltage_monitor_init+0x308>)
 8006126:	2200      	movs	r2, #0
 8006128:	81da      	strh	r2, [r3, #14]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 800612a:	4bb2      	ldr	r3, [pc, #712]	; (80063f4 <voltage_monitor_init+0x308>)
 800612c:	2201      	movs	r2, #1
 800612e:	741a      	strb	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8006130:	4bb0      	ldr	r3, [pc, #704]	; (80063f4 <voltage_monitor_init+0x308>)
 8006132:	2200      	movs	r2, #0
 8006134:	745a      	strb	r2, [r3, #17]
	rail_monitor[RAIL_vrefint].is_enabled = ENABLED;
 8006136:	4baf      	ldr	r3, [pc, #700]	; (80063f4 <voltage_monitor_init+0x308>)
 8006138:	2201      	movs	r2, #1
 800613a:	749a      	strb	r2, [r3, #18]
	rail_monitor[RAIL_vrefint].data = 0;
 800613c:	4bad      	ldr	r3, [pc, #692]	; (80063f4 <voltage_monitor_init+0x308>)
 800613e:	2200      	movs	r2, #0
 8006140:	829a      	strh	r2, [r3, #20]
	rail_monitor[RAIL_vrefint].max_voltage = RAIL_VREFINT_MAX;
 8006142:	4bac      	ldr	r3, [pc, #688]	; (80063f4 <voltage_monitor_init+0x308>)
 8006144:	f240 6215 	movw	r2, #1557	; 0x615
 8006148:	82da      	strh	r2, [r3, #22]
	rail_monitor[RAIL_vrefint].min_voltage = RAIL_VREFINT_MIN;
 800614a:	4baa      	ldr	r3, [pc, #680]	; (80063f4 <voltage_monitor_init+0x308>)
 800614c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8006150:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_vrefint].OOB_1 = 0;
 8006152:	4ba8      	ldr	r3, [pc, #672]	; (80063f4 <voltage_monitor_init+0x308>)
 8006154:	2200      	movs	r2, #0
 8006156:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_vrefint].OOB_2 = 0;
 8006158:	4ba6      	ldr	r3, [pc, #664]	; (80063f4 <voltage_monitor_init+0x308>)
 800615a:	2200      	movs	r2, #0
 800615c:	839a      	strh	r2, [r3, #28]
	rail_monitor[RAIL_vrefint].OOB_3 = 0;
 800615e:	4ba5      	ldr	r3, [pc, #660]	; (80063f4 <voltage_monitor_init+0x308>)
 8006160:	2200      	movs	r2, #0
 8006162:	83da      	strh	r2, [r3, #30]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8006164:	4ba3      	ldr	r3, [pc, #652]	; (80063f4 <voltage_monitor_init+0x308>)
 8006166:	2202      	movs	r2, #2
 8006168:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 800616c:	4ba1      	ldr	r3, [pc, #644]	; (80063f4 <voltage_monitor_init+0x308>)
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	rail_monitor[RAIL_TEMP1].is_enabled = ENABLED;
 8006174:	4b9f      	ldr	r3, [pc, #636]	; (80063f4 <voltage_monitor_init+0x308>)
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP1].data = 0;
 800617c:	4b9d      	ldr	r3, [pc, #628]	; (80063f4 <voltage_monitor_init+0x308>)
 800617e:	2200      	movs	r2, #0
 8006180:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP1].max_voltage = RAIL_TEMP1_MAX;
 8006182:	4b9c      	ldr	r3, [pc, #624]	; (80063f4 <voltage_monitor_init+0x308>)
 8006184:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006188:	84da      	strh	r2, [r3, #38]	; 0x26
	rail_monitor[RAIL_TEMP1].min_voltage = RAIL_TEMP1_MIN;
 800618a:	4b9a      	ldr	r3, [pc, #616]	; (80063f4 <voltage_monitor_init+0x308>)
 800618c:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 8006190:	851a      	strh	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP1].OOB_1 = 0;
 8006192:	4b98      	ldr	r3, [pc, #608]	; (80063f4 <voltage_monitor_init+0x308>)
 8006194:	2200      	movs	r2, #0
 8006196:	855a      	strh	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP1].OOB_2 = 0;
 8006198:	4b96      	ldr	r3, [pc, #600]	; (80063f4 <voltage_monitor_init+0x308>)
 800619a:	2200      	movs	r2, #0
 800619c:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP1].OOB_3 = 0;
 800619e:	4b95      	ldr	r3, [pc, #596]	; (80063f4 <voltage_monitor_init+0x308>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	85da      	strh	r2, [r3, #46]	; 0x2e

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 80061a4:	4b93      	ldr	r3, [pc, #588]	; (80063f4 <voltage_monitor_init+0x308>)
 80061a6:	2203      	movs	r2, #3
 80061a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	rail_monitor[RAIL_TEMP2].error_count = 0;
 80061ac:	4b91      	ldr	r3, [pc, #580]	; (80063f4 <voltage_monitor_init+0x308>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	rail_monitor[RAIL_TEMP2].is_enabled = ENABLED;
 80061b4:	4b8f      	ldr	r3, [pc, #572]	; (80063f4 <voltage_monitor_init+0x308>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP2].data = 0;
 80061bc:	4b8d      	ldr	r3, [pc, #564]	; (80063f4 <voltage_monitor_init+0x308>)
 80061be:	2200      	movs	r2, #0
 80061c0:	869a      	strh	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP2].max_voltage = RAIL_TEMP2_MAX;
 80061c2:	4b8c      	ldr	r3, [pc, #560]	; (80063f4 <voltage_monitor_init+0x308>)
 80061c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80061c8:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP2].min_voltage = RAIL_TEMP2_MIN;
 80061ca:	4b8a      	ldr	r3, [pc, #552]	; (80063f4 <voltage_monitor_init+0x308>)
 80061cc:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 80061d0:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP2].OOB_1 = 0;
 80061d2:	4b88      	ldr	r3, [pc, #544]	; (80063f4 <voltage_monitor_init+0x308>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	875a      	strh	r2, [r3, #58]	; 0x3a
	rail_monitor[RAIL_TEMP2].OOB_2 = 0;
 80061d8:	4b86      	ldr	r3, [pc, #536]	; (80063f4 <voltage_monitor_init+0x308>)
 80061da:	2200      	movs	r2, #0
 80061dc:	879a      	strh	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_TEMP2].OOB_3 = 0;
 80061de:	4b85      	ldr	r3, [pc, #532]	; (80063f4 <voltage_monitor_init+0x308>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	87da      	strh	r2, [r3, #62]	; 0x3e

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 80061e4:	4b83      	ldr	r3, [pc, #524]	; (80063f4 <voltage_monitor_init+0x308>)
 80061e6:	2204      	movs	r2, #4
 80061e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_TEMP3].error_count = 0;
 80061ec:	4b81      	ldr	r3, [pc, #516]	; (80063f4 <voltage_monitor_init+0x308>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	rail_monitor[RAIL_TEMP3].is_enabled = ENABLED;
 80061f4:	4b7f      	ldr	r3, [pc, #508]	; (80063f4 <voltage_monitor_init+0x308>)
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_TEMP3].data = 0;
 80061fc:	4b7d      	ldr	r3, [pc, #500]	; (80063f4 <voltage_monitor_init+0x308>)
 80061fe:	2200      	movs	r2, #0
 8006200:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	rail_monitor[RAIL_TEMP3].max_voltage = RAIL_TEMP3_MAX;
 8006204:	4b7b      	ldr	r3, [pc, #492]	; (80063f4 <voltage_monitor_init+0x308>)
 8006206:	f44f 7248 	mov.w	r2, #800	; 0x320
 800620a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_TEMP3].min_voltage = RAIL_TEMP3_MIN;
 800620e:	4b79      	ldr	r3, [pc, #484]	; (80063f4 <voltage_monitor_init+0x308>)
 8006210:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 8006214:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_TEMP3].OOB_1 = 0;
 8006218:	4b76      	ldr	r3, [pc, #472]	; (80063f4 <voltage_monitor_init+0x308>)
 800621a:	2200      	movs	r2, #0
 800621c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_TEMP3].OOB_2 = 0;
 8006220:	4b74      	ldr	r3, [pc, #464]	; (80063f4 <voltage_monitor_init+0x308>)
 8006222:	2200      	movs	r2, #0
 8006224:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_TEMP3].OOB_3 = 0;
 8006228:	4b72      	ldr	r3, [pc, #456]	; (80063f4 <voltage_monitor_init+0x308>)
 800622a:	2200      	movs	r2, #0
 800622c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8006230:	4b70      	ldr	r3, [pc, #448]	; (80063f4 <voltage_monitor_init+0x308>)
 8006232:	2205      	movs	r2, #5
 8006234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8006238:	4b6e      	ldr	r3, [pc, #440]	; (80063f4 <voltage_monitor_init+0x308>)
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_TEMP4].is_enabled = ENABLED;
 8006240:	4b6c      	ldr	r3, [pc, #432]	; (80063f4 <voltage_monitor_init+0x308>)
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_TEMP4].data = 0;
 8006248:	4b6a      	ldr	r3, [pc, #424]	; (80063f4 <voltage_monitor_init+0x308>)
 800624a:	2200      	movs	r2, #0
 800624c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_TEMP4].max_voltage = RAIL_TEMP4_MAX;
 8006250:	4b68      	ldr	r3, [pc, #416]	; (80063f4 <voltage_monitor_init+0x308>)
 8006252:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006256:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_TEMP4].min_voltage = RAIL_TEMP4_MIN;
 800625a:	4b66      	ldr	r3, [pc, #408]	; (80063f4 <voltage_monitor_init+0x308>)
 800625c:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 8006260:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	rail_monitor[RAIL_TEMP4].OOB_1 = 0;
 8006264:	4b63      	ldr	r3, [pc, #396]	; (80063f4 <voltage_monitor_init+0x308>)
 8006266:	2200      	movs	r2, #0
 8006268:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_TEMP4].OOB_2 = 0;
 800626c:	4b61      	ldr	r3, [pc, #388]	; (80063f4 <voltage_monitor_init+0x308>)
 800626e:	2200      	movs	r2, #0
 8006270:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_TEMP4].OOB_3 = 0;
 8006274:	4b5f      	ldr	r3, [pc, #380]	; (80063f4 <voltage_monitor_init+0x308>)
 8006276:	2200      	movs	r2, #0
 8006278:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 800627c:	4b5d      	ldr	r3, [pc, #372]	; (80063f4 <voltage_monitor_init+0x308>)
 800627e:	2206      	movs	r2, #6
 8006280:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	rail_monitor[RAIL_busvmon].error_count = 0;
 8006284:	4b5b      	ldr	r3, [pc, #364]	; (80063f4 <voltage_monitor_init+0x308>)
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	rail_monitor[RAIL_busvmon].is_enabled = DISABLED;
 800628c:	4b59      	ldr	r3, [pc, #356]	; (80063f4 <voltage_monitor_init+0x308>)
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	rail_monitor[RAIL_busvmon].data = 0;
 8006294:	4b57      	ldr	r3, [pc, #348]	; (80063f4 <voltage_monitor_init+0x308>)
 8006296:	2200      	movs	r2, #0
 8006298:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_busvmon].max_voltage = RAIL_BUSVMON_MAX;
 800629c:	4b55      	ldr	r3, [pc, #340]	; (80063f4 <voltage_monitor_init+0x308>)
 800629e:	f242 7210 	movw	r2, #10000	; 0x2710
 80062a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_busvmon].min_voltage = RAIL_BUSVMON_MIN;
 80062a6:	4b53      	ldr	r3, [pc, #332]	; (80063f4 <voltage_monitor_init+0x308>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_busvmon].OOB_1 = 0;
 80062ae:	4b51      	ldr	r3, [pc, #324]	; (80063f4 <voltage_monitor_init+0x308>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_busvmon].OOB_2 = 0;
 80062b6:	4b4f      	ldr	r3, [pc, #316]	; (80063f4 <voltage_monitor_init+0x308>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	rail_monitor[RAIL_busvmon].OOB_3 = 0;
 80062be:	4b4d      	ldr	r3, [pc, #308]	; (80063f4 <voltage_monitor_init+0x308>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 80062c6:	4b4b      	ldr	r3, [pc, #300]	; (80063f4 <voltage_monitor_init+0x308>)
 80062c8:	2207      	movs	r2, #7
 80062ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_busimon].error_count = 0;
 80062ce:	4b49      	ldr	r3, [pc, #292]	; (80063f4 <voltage_monitor_init+0x308>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	rail_monitor[RAIL_busimon].is_enabled = DISABLED;
 80062d6:	4b47      	ldr	r3, [pc, #284]	; (80063f4 <voltage_monitor_init+0x308>)
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_busimon].data = 0;
 80062de:	4b45      	ldr	r3, [pc, #276]	; (80063f4 <voltage_monitor_init+0x308>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_busimon].max_voltage = RAIL_BUSIMON_MAX;
 80062e6:	4b43      	ldr	r3, [pc, #268]	; (80063f4 <voltage_monitor_init+0x308>)
 80062e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80062ec:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	rail_monitor[RAIL_busimon].min_voltage = RAIL_BUSIMON_MIN;
 80062f0:	4b40      	ldr	r3, [pc, #256]	; (80063f4 <voltage_monitor_init+0x308>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_busimon].OOB_1 = 0;
 80062f8:	4b3e      	ldr	r3, [pc, #248]	; (80063f4 <voltage_monitor_init+0x308>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_busimon].OOB_2 = 0;
 8006300:	4b3c      	ldr	r3, [pc, #240]	; (80063f4 <voltage_monitor_init+0x308>)
 8006302:	2200      	movs	r2, #0
 8006304:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_busimon].OOB_3 = 0;
 8006308:	4b3a      	ldr	r3, [pc, #232]	; (80063f4 <voltage_monitor_init+0x308>)
 800630a:	2200      	movs	r2, #0
 800630c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8006310:	4b38      	ldr	r3, [pc, #224]	; (80063f4 <voltage_monitor_init+0x308>)
 8006312:	2208      	movs	r2, #8
 8006314:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	rail_monitor[RAIL_2v5].error_count = 0;
 8006318:	4b36      	ldr	r3, [pc, #216]	; (80063f4 <voltage_monitor_init+0x308>)
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	rail_monitor[RAIL_2v5].is_enabled = DISABLED;
 8006320:	4b34      	ldr	r3, [pc, #208]	; (80063f4 <voltage_monitor_init+0x308>)
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_2v5].data = 0;
 8006328:	4b32      	ldr	r3, [pc, #200]	; (80063f4 <voltage_monitor_init+0x308>)
 800632a:	2200      	movs	r2, #0
 800632c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_2v5].max_voltage = RAIL_2V5_MAX;
 8006330:	4b30      	ldr	r3, [pc, #192]	; (80063f4 <voltage_monitor_init+0x308>)
 8006332:	f640 5256 	movw	r2, #3414	; 0xd56
 8006336:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_2v5].min_voltage = RAIL_2V5_MIN;
 800633a:	4b2e      	ldr	r3, [pc, #184]	; (80063f4 <voltage_monitor_init+0x308>)
 800633c:	f640 22e8 	movw	r2, #2792	; 0xae8
 8006340:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_2v5].OOB_1 = 0;
 8006344:	4b2b      	ldr	r3, [pc, #172]	; (80063f4 <voltage_monitor_init+0x308>)
 8006346:	2200      	movs	r2, #0
 8006348:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	rail_monitor[RAIL_2v5].OOB_2 = 0;
 800634c:	4b29      	ldr	r3, [pc, #164]	; (80063f4 <voltage_monitor_init+0x308>)
 800634e:	2200      	movs	r2, #0
 8006350:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_2v5].OOB_3 = 0;
 8006354:	4b27      	ldr	r3, [pc, #156]	; (80063f4 <voltage_monitor_init+0x308>)
 8006356:	2200      	movs	r2, #0
 8006358:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 800635c:	4b25      	ldr	r3, [pc, #148]	; (80063f4 <voltage_monitor_init+0x308>)
 800635e:	2209      	movs	r2, #9
 8006360:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_3v3].error_count = 0;
 8006364:	4b23      	ldr	r3, [pc, #140]	; (80063f4 <voltage_monitor_init+0x308>)
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	rail_monitor[RAIL_3v3].is_enabled = DISABLED;
 800636c:	4b21      	ldr	r3, [pc, #132]	; (80063f4 <voltage_monitor_init+0x308>)
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_3v3].data = 0;
 8006374:	4b1f      	ldr	r3, [pc, #124]	; (80063f4 <voltage_monitor_init+0x308>)
 8006376:	2200      	movs	r2, #0
 8006378:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	rail_monitor[RAIL_3v3].max_voltage = RAIL_3V3_MAX;
 800637c:	4b1d      	ldr	r3, [pc, #116]	; (80063f4 <voltage_monitor_init+0x308>)
 800637e:	f240 623c 	movw	r2, #1596	; 0x63c
 8006382:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_3v3].min_voltage = RAIL_3V3_MIN;
 8006386:	4b1b      	ldr	r3, [pc, #108]	; (80063f4 <voltage_monitor_init+0x308>)
 8006388:	f240 521a 	movw	r2, #1306	; 0x51a
 800638c:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_3v3].OOB_1 = 0;
 8006390:	4b18      	ldr	r3, [pc, #96]	; (80063f4 <voltage_monitor_init+0x308>)
 8006392:	2200      	movs	r2, #0
 8006394:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_3v3].OOB_2 = 0;
 8006398:	4b16      	ldr	r3, [pc, #88]	; (80063f4 <voltage_monitor_init+0x308>)
 800639a:	2200      	movs	r2, #0
 800639c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	rail_monitor[RAIL_3v3].OOB_3 = 0;
 80063a0:	4b14      	ldr	r3, [pc, #80]	; (80063f4 <voltage_monitor_init+0x308>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

	rail_monitor[RAIL_5v].name = RAIL_5v;
 80063a8:	4b12      	ldr	r3, [pc, #72]	; (80063f4 <voltage_monitor_init+0x308>)
 80063aa:	220a      	movs	r2, #10
 80063ac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_5v].error_count = 0;
 80063b0:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <voltage_monitor_init+0x308>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_5v].is_enabled = DISABLED;
 80063b8:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <voltage_monitor_init+0x308>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
	rail_monitor[RAIL_5v].data = 0;
 80063c0:	4b0c      	ldr	r3, [pc, #48]	; (80063f4 <voltage_monitor_init+0x308>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_5v].max_voltage = RAIL_5V_MAX;
 80063c8:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <voltage_monitor_init+0x308>)
 80063ca:	f640 72ff 	movw	r2, #4095	; 0xfff
 80063ce:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_5v].min_voltage = RAIL_5V_MIN;
 80063d2:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <voltage_monitor_init+0x308>)
 80063d4:	f640 5216 	movw	r2, #3350	; 0xd16
 80063d8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	rail_monitor[RAIL_5v].OOB_1 = 0;
 80063dc:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <voltage_monitor_init+0x308>)
 80063de:	2200      	movs	r2, #0
 80063e0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_5v].OOB_2 = 0;
 80063e4:	4b03      	ldr	r3, [pc, #12]	; (80063f4 <voltage_monitor_init+0x308>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_5v].OOB_3 = 0;
 80063ec:	4b01      	ldr	r3, [pc, #4]	; (80063f4 <voltage_monitor_init+0x308>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	e002      	b.n	80063f8 <voltage_monitor_init+0x30c>
 80063f2:	bf00      	nop
 80063f4:	2400275c 	.word	0x2400275c
 80063f8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 80063fc:	4b86      	ldr	r3, [pc, #536]	; (8006618 <voltage_monitor_init+0x52c>)
 80063fe:	220b      	movs	r2, #11
 8006400:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_n3v3].error_count = 0;
 8006404:	4b84      	ldr	r3, [pc, #528]	; (8006618 <voltage_monitor_init+0x52c>)
 8006406:	2200      	movs	r2, #0
 8006408:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	rail_monitor[RAIL_n3v3].is_enabled = DISABLED;
 800640c:	4b82      	ldr	r3, [pc, #520]	; (8006618 <voltage_monitor_init+0x52c>)
 800640e:	2200      	movs	r2, #0
 8006410:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	rail_monitor[RAIL_n3v3].data = 0;
 8006414:	4b80      	ldr	r3, [pc, #512]	; (8006618 <voltage_monitor_init+0x52c>)
 8006416:	2200      	movs	r2, #0
 8006418:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	rail_monitor[RAIL_n3v3].max_voltage = RAIL_N3V3_MAX;
 800641c:	4b7e      	ldr	r3, [pc, #504]	; (8006618 <voltage_monitor_init+0x52c>)
 800641e:	f241 02be 	movw	r2, #4286	; 0x10be
 8006422:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	rail_monitor[RAIL_n3v3].min_voltage = RAIL_N3V3_MIN;
 8006426:	4b7c      	ldr	r3, [pc, #496]	; (8006618 <voltage_monitor_init+0x52c>)
 8006428:	f640 52b3 	movw	r2, #3507	; 0xdb3
 800642c:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
	rail_monitor[RAIL_n3v3].OOB_1 = 0;
 8006430:	4b79      	ldr	r3, [pc, #484]	; (8006618 <voltage_monitor_init+0x52c>)
 8006432:	2200      	movs	r2, #0
 8006434:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
	rail_monitor[RAIL_n3v3].OOB_2 = 0;
 8006438:	4b77      	ldr	r3, [pc, #476]	; (8006618 <voltage_monitor_init+0x52c>)
 800643a:	2200      	movs	r2, #0
 800643c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	rail_monitor[RAIL_n3v3].OOB_3 = 0;
 8006440:	4b75      	ldr	r3, [pc, #468]	; (8006618 <voltage_monitor_init+0x52c>)
 8006442:	2200      	movs	r2, #0
 8006444:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8006448:	4b73      	ldr	r3, [pc, #460]	; (8006618 <voltage_monitor_init+0x52c>)
 800644a:	220c      	movs	r2, #12
 800644c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	rail_monitor[RAIL_n5v].error_count = 0;
 8006450:	4b71      	ldr	r3, [pc, #452]	; (8006618 <voltage_monitor_init+0x52c>)
 8006452:	2200      	movs	r2, #0
 8006454:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	rail_monitor[RAIL_n5v].is_enabled = DISABLED;
 8006458:	4b6f      	ldr	r3, [pc, #444]	; (8006618 <voltage_monitor_init+0x52c>)
 800645a:	2200      	movs	r2, #0
 800645c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	rail_monitor[RAIL_n5v].data = 0;
 8006460:	4b6d      	ldr	r3, [pc, #436]	; (8006618 <voltage_monitor_init+0x52c>)
 8006462:	2200      	movs	r2, #0
 8006464:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	rail_monitor[RAIL_n5v].max_voltage = RAIL_N5V_MAX;
 8006468:	4b6b      	ldr	r3, [pc, #428]	; (8006618 <voltage_monitor_init+0x52c>)
 800646a:	f242 7210 	movw	r2, #10000	; 0x2710
 800646e:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
	rail_monitor[RAIL_n5v].min_voltage = RAIL_N5V_MIN;
 8006472:	4b69      	ldr	r3, [pc, #420]	; (8006618 <voltage_monitor_init+0x52c>)
 8006474:	2200      	movs	r2, #0
 8006476:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	rail_monitor[RAIL_n5v].OOB_1 = 0;
 800647a:	4b67      	ldr	r3, [pc, #412]	; (8006618 <voltage_monitor_init+0x52c>)
 800647c:	2200      	movs	r2, #0
 800647e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	rail_monitor[RAIL_n5v].OOB_2 = 0;
 8006482:	4b65      	ldr	r3, [pc, #404]	; (8006618 <voltage_monitor_init+0x52c>)
 8006484:	2200      	movs	r2, #0
 8006486:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	rail_monitor[RAIL_n5v].OOB_3 = 0;
 800648a:	4b63      	ldr	r3, [pc, #396]	; (8006618 <voltage_monitor_init+0x52c>)
 800648c:	2200      	movs	r2, #0
 800648e:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8006492:	4b61      	ldr	r3, [pc, #388]	; (8006618 <voltage_monitor_init+0x52c>)
 8006494:	220d      	movs	r2, #13
 8006496:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	rail_monitor[RAIL_15v].error_count = 0;
 800649a:	4b5f      	ldr	r3, [pc, #380]	; (8006618 <voltage_monitor_init+0x52c>)
 800649c:	2200      	movs	r2, #0
 800649e:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	rail_monitor[RAIL_15v].is_enabled = DISABLED;
 80064a2:	4b5d      	ldr	r3, [pc, #372]	; (8006618 <voltage_monitor_init+0x52c>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	rail_monitor[RAIL_15v].data = 0;
 80064aa:	4b5b      	ldr	r3, [pc, #364]	; (8006618 <voltage_monitor_init+0x52c>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	rail_monitor[RAIL_15v].max_voltage = RAIL_15V_MAX;
 80064b2:	4b59      	ldr	r3, [pc, #356]	; (8006618 <voltage_monitor_init+0x52c>)
 80064b4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80064b8:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
	rail_monitor[RAIL_15v].min_voltage = RAIL_15V_MIN;
 80064bc:	4b56      	ldr	r3, [pc, #344]	; (8006618 <voltage_monitor_init+0x52c>)
 80064be:	f640 5216 	movw	r2, #3350	; 0xd16
 80064c2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
	rail_monitor[RAIL_15v].OOB_1 = 0;
 80064c6:	4b54      	ldr	r3, [pc, #336]	; (8006618 <voltage_monitor_init+0x52c>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	rail_monitor[RAIL_15v].OOB_2 = 0;
 80064ce:	4b52      	ldr	r3, [pc, #328]	; (8006618 <voltage_monitor_init+0x52c>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	rail_monitor[RAIL_15v].OOB_3 = 0;
 80064d6:	4b50      	ldr	r3, [pc, #320]	; (8006618 <voltage_monitor_init+0x52c>)
 80064d8:	2200      	movs	r2, #0
 80064da:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 80064de:	4b4e      	ldr	r3, [pc, #312]	; (8006618 <voltage_monitor_init+0x52c>)
 80064e0:	220e      	movs	r2, #14
 80064e2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	rail_monitor[RAIL_5vref].error_count = 0;
 80064e6:	4b4c      	ldr	r3, [pc, #304]	; (8006618 <voltage_monitor_init+0x52c>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
	rail_monitor[RAIL_5vref].is_enabled = DISABLED;
 80064ee:	4b4a      	ldr	r3, [pc, #296]	; (8006618 <voltage_monitor_init+0x52c>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
	rail_monitor[RAIL_5vref].data = 0;
 80064f6:	4b48      	ldr	r3, [pc, #288]	; (8006618 <voltage_monitor_init+0x52c>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	rail_monitor[RAIL_5vref].max_voltage = RAIL_5VREF_MAX;
 80064fe:	4b46      	ldr	r3, [pc, #280]	; (8006618 <voltage_monitor_init+0x52c>)
 8006500:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006504:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
	rail_monitor[RAIL_5vref].min_voltage = RAIL_5VREF_MIN;
 8006508:	4b43      	ldr	r3, [pc, #268]	; (8006618 <voltage_monitor_init+0x52c>)
 800650a:	f640 5216 	movw	r2, #3350	; 0xd16
 800650e:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
	rail_monitor[RAIL_5vref].OOB_1 = 0;
 8006512:	4b41      	ldr	r3, [pc, #260]	; (8006618 <voltage_monitor_init+0x52c>)
 8006514:	2200      	movs	r2, #0
 8006516:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
	rail_monitor[RAIL_5vref].OOB_2 = 0;
 800651a:	4b3f      	ldr	r3, [pc, #252]	; (8006618 <voltage_monitor_init+0x52c>)
 800651c:	2200      	movs	r2, #0
 800651e:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
	rail_monitor[RAIL_5vref].OOB_3 = 0;
 8006522:	4b3d      	ldr	r3, [pc, #244]	; (8006618 <voltage_monitor_init+0x52c>)
 8006524:	2200      	movs	r2, #0
 8006526:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 800652a:	4b3b      	ldr	r3, [pc, #236]	; (8006618 <voltage_monitor_init+0x52c>)
 800652c:	220f      	movs	r2, #15
 800652e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	rail_monitor[RAIL_n200v].error_count = 0;
 8006532:	4b39      	ldr	r3, [pc, #228]	; (8006618 <voltage_monitor_init+0x52c>)
 8006534:	2200      	movs	r2, #0
 8006536:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
	rail_monitor[RAIL_n200v].is_enabled = DISABLED;
 800653a:	4b37      	ldr	r3, [pc, #220]	; (8006618 <voltage_monitor_init+0x52c>)
 800653c:	2200      	movs	r2, #0
 800653e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
	rail_monitor[RAIL_n200v].data = 0;
 8006542:	4b35      	ldr	r3, [pc, #212]	; (8006618 <voltage_monitor_init+0x52c>)
 8006544:	2200      	movs	r2, #0
 8006546:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	rail_monitor[RAIL_n200v].max_voltage = RAIL_N200V_MAX;
 800654a:	4b33      	ldr	r3, [pc, #204]	; (8006618 <voltage_monitor_init+0x52c>)
 800654c:	f640 6266 	movw	r2, #3686	; 0xe66
 8006550:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
	rail_monitor[RAIL_n200v].min_voltage = RAIL_N200V_MIN;
 8006554:	4b30      	ldr	r3, [pc, #192]	; (8006618 <voltage_monitor_init+0x52c>)
 8006556:	f640 32c7 	movw	r2, #3015	; 0xbc7
 800655a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
	rail_monitor[RAIL_n200v].OOB_1 = 0;
 800655e:	4b2e      	ldr	r3, [pc, #184]	; (8006618 <voltage_monitor_init+0x52c>)
 8006560:	2200      	movs	r2, #0
 8006562:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
	rail_monitor[RAIL_n200v].OOB_2 = 0;
 8006566:	4b2c      	ldr	r3, [pc, #176]	; (8006618 <voltage_monitor_init+0x52c>)
 8006568:	2200      	movs	r2, #0
 800656a:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
	rail_monitor[RAIL_n200v].OOB_3 = 0;
 800656e:	4b2a      	ldr	r3, [pc, #168]	; (8006618 <voltage_monitor_init+0x52c>)
 8006570:	2200      	movs	r2, #0
 8006572:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe

	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8006576:	4b28      	ldr	r3, [pc, #160]	; (8006618 <voltage_monitor_init+0x52c>)
 8006578:	2210      	movs	r2, #16
 800657a:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	rail_monitor[RAIL_n800v].error_count = 0;
 800657e:	4b26      	ldr	r3, [pc, #152]	; (8006618 <voltage_monitor_init+0x52c>)
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	rail_monitor[RAIL_n800v].is_enabled = DISABLED;
 8006586:	4b24      	ldr	r3, [pc, #144]	; (8006618 <voltage_monitor_init+0x52c>)
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	rail_monitor[RAIL_n800v].data = 0;
 800658e:	4b22      	ldr	r3, [pc, #136]	; (8006618 <voltage_monitor_init+0x52c>)
 8006590:	2200      	movs	r2, #0
 8006592:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	rail_monitor[RAIL_n800v].max_voltage = RAIL_N800V_MAX;
 8006596:	4b20      	ldr	r3, [pc, #128]	; (8006618 <voltage_monitor_init+0x52c>)
 8006598:	f640 52a6 	movw	r2, #3494	; 0xda6
 800659c:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	rail_monitor[RAIL_n800v].min_voltage = RAIL_N800V_MIN;
 80065a0:	4b1d      	ldr	r3, [pc, #116]	; (8006618 <voltage_monitor_init+0x52c>)
 80065a2:	f640 322b 	movw	r2, #2859	; 0xb2b
 80065a6:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
	rail_monitor[RAIL_n800v].OOB_1 = 0;
 80065aa:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <voltage_monitor_init+0x52c>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
	rail_monitor[RAIL_n800v].OOB_2 = 0;
 80065b2:	4b19      	ldr	r3, [pc, #100]	; (8006618 <voltage_monitor_init+0x52c>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	rail_monitor[RAIL_n800v].OOB_3 = 0;
 80065ba:	4b17      	ldr	r3, [pc, #92]	; (8006618 <voltage_monitor_init+0x52c>)
 80065bc:	2200      	movs	r2, #0
 80065be:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 80065c2:	4b15      	ldr	r3, [pc, #84]	; (8006618 <voltage_monitor_init+0x52c>)
 80065c4:	2211      	movs	r2, #17
 80065c6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	rail_monitor[RAIL_TMP1].error_count = 0;
 80065ca:	4b13      	ldr	r3, [pc, #76]	; (8006618 <voltage_monitor_init+0x52c>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
	rail_monitor[RAIL_TMP1].is_enabled = DISABLED;
 80065d2:	4b11      	ldr	r3, [pc, #68]	; (8006618 <voltage_monitor_init+0x52c>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
	rail_monitor[RAIL_TMP1].data = 0;
 80065da:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <voltage_monitor_init+0x52c>)
 80065dc:	2200      	movs	r2, #0
 80065de:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	rail_monitor[RAIL_TMP1].max_voltage = RAIL_TMP1_MAX;
 80065e2:	4b0d      	ldr	r3, [pc, #52]	; (8006618 <voltage_monitor_init+0x52c>)
 80065e4:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
 80065e8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
	rail_monitor[RAIL_TMP1].min_voltage = RAIL_TMP1_MIN;
 80065ec:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <voltage_monitor_init+0x52c>)
 80065ee:	f240 72e7 	movw	r2, #2023	; 0x7e7
 80065f2:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
	rail_monitor[RAIL_TMP1].OOB_1 = 0;
 80065f6:	4b08      	ldr	r3, [pc, #32]	; (8006618 <voltage_monitor_init+0x52c>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	rail_monitor[RAIL_TMP1].OOB_2 = 0;
 80065fe:	4b06      	ldr	r3, [pc, #24]	; (8006618 <voltage_monitor_init+0x52c>)
 8006600:	2200      	movs	r2, #0
 8006602:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
	rail_monitor[RAIL_TMP1].OOB_3 = 0;
 8006606:	4b04      	ldr	r3, [pc, #16]	; (8006618 <voltage_monitor_init+0x52c>)
 8006608:	2200      	movs	r2, #0
 800660a:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
}
 800660e:	bf00      	nop
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	2400275c 	.word	0x2400275c

0800661c <set_rail_monitor_enable>:
 *
 * @param rail_name The voltage rail to modify.
 * @param enable_value 1 to enable monitoring, 0 to disable.
 */
void set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	4603      	mov	r3, r0
 8006624:	460a      	mov	r2, r1
 8006626:	71fb      	strb	r3, [r7, #7]
 8006628:	4613      	mov	r3, r2
 800662a:	71bb      	strb	r3, [r7, #6]
	rail_monitor[rail_name].is_enabled = enable_value;
 800662c:	79fb      	ldrb	r3, [r7, #7]
 800662e:	4a06      	ldr	r2, [pc, #24]	; (8006648 <set_rail_monitor_enable+0x2c>)
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	4413      	add	r3, r2
 8006634:	3302      	adds	r3, #2
 8006636:	79ba      	ldrb	r2, [r7, #6]
 8006638:	701a      	strb	r2, [r3, #0]
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	2400275c 	.word	0x2400275c

0800664c <set_rail_monitor>:
 *
 * Samples data from ADC1, ADC3, and I2C channels, then updates the corresponding
 * voltage rail monitor entries with the sampled values.
 */
void set_rail_monitor()
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08a      	sub	sp, #40	; 0x28
 8006650:	af00      	add	r7, sp, #0
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8006652:	1d3b      	adds	r3, r7, #4
 8006654:	4618      	mov	r0, r3
 8006656:	f7fe f985 	bl	8004964 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 800665a:	f107 0314 	add.w	r3, r7, #20
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe f9b0 	bl	80049c4 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8006664:	f107 030c 	add.w	r3, r7, #12
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe f9fd 	bl	8004a68 <sample_hk_adc3>
 800666e:	89ba      	ldrh	r2, [r7, #12]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[0], sizeof(uint16_t));
 8006670:	4b23      	ldr	r3, [pc, #140]	; (8006700 <set_rail_monitor+0xb4>)
 8006672:	809a      	strh	r2, [r3, #4]
 8006674:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[1], sizeof(uint16_t));
 8006676:	4b22      	ldr	r3, [pc, #136]	; (8006700 <set_rail_monitor+0xb4>)
 8006678:	829a      	strh	r2, [r3, #20]
 800667a:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 800667c:	4b20      	ldr	r3, [pc, #128]	; (8006700 <set_rail_monitor+0xb4>)
 800667e:	849a      	strh	r2, [r3, #36]	; 0x24
 8006680:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8006682:	4b1f      	ldr	r3, [pc, #124]	; (8006700 <set_rail_monitor+0xb4>)
 8006684:	869a      	strh	r2, [r3, #52]	; 0x34
 8006686:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8006688:	4b1d      	ldr	r3, [pc, #116]	; (8006700 <set_rail_monitor+0xb4>)
 800668a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800668e:	897a      	ldrh	r2, [r7, #10]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 8006690:	4b1b      	ldr	r3, [pc, #108]	; (8006700 <set_rail_monitor+0xb4>)
 8006692:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006696:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8006698:	4b19      	ldr	r3, [pc, #100]	; (8006700 <set_rail_monitor+0xb4>)
 800669a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 800669e:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 80066a0:	4b17      	ldr	r3, [pc, #92]	; (8006700 <set_rail_monitor+0xb4>)
 80066a2:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 80066a6:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 80066a8:	4b15      	ldr	r3, [pc, #84]	; (8006700 <set_rail_monitor+0xb4>)
 80066aa:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80066ae:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 80066b0:	4b13      	ldr	r3, [pc, #76]	; (8006700 <set_rail_monitor+0xb4>)
 80066b2:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 80066b6:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 80066b8:	4b11      	ldr	r3, [pc, #68]	; (8006700 <set_rail_monitor+0xb4>)
 80066ba:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 80066be:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 80066c0:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <set_rail_monitor+0xb4>)
 80066c2:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 80066c6:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 80066c8:	4b0d      	ldr	r3, [pc, #52]	; (8006700 <set_rail_monitor+0xb4>)
 80066ca:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 80066ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 80066d0:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <set_rail_monitor+0xb4>)
 80066d2:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 80066d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 80066d8:	4b09      	ldr	r3, [pc, #36]	; (8006700 <set_rail_monitor+0xb4>)
 80066da:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
 80066de:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 80066e0:	4b07      	ldr	r3, [pc, #28]	; (8006700 <set_rail_monitor+0xb4>)
 80066e2:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 80066e6:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 80066e8:	4b05      	ldr	r3, [pc, #20]	; (8006700 <set_rail_monitor+0xb4>)
 80066ea:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 80066ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 80066f0:	4b03      	ldr	r3, [pc, #12]	; (8006700 <set_rail_monitor+0xb4>)
 80066f2:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
}
 80066f6:	bf00      	nop
 80066f8:	3728      	adds	r7, #40	; 0x28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	2400275c 	.word	0x2400275c

08006704 <get_rail_monitor>:
 * @brief Retrieves the voltage rail monitor array.
 *
 * @return Pointer to the array of monitored voltage rails.
 */
VOLTAGE_RAIL* get_rail_monitor()
{
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
	return rail_monitor;
 8006708:	4b02      	ldr	r3, [pc, #8]	; (8006714 <get_rail_monitor+0x10>)
}
 800670a:	4618      	mov	r0, r3
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	2400275c 	.word	0x2400275c

08006718 <convert_ADT7410>:
 *
 * @param raw The raw temperature data from the ADT7410 sensor.
 * @return The converted temperature in degrees Celsius.
 */
int16_t convert_ADT7410(int16_t raw)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	80fb      	strh	r3, [r7, #6]
    float ret = raw;
 8006722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800672e:	edc7 7a03 	vstr	s15, [r7, #12]
    if (raw >= 0x1000)
 8006732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800673a:	db07      	blt.n	800674c <convert_ADT7410+0x34>
    {
        ret -= 8192;
 800673c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006740:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006774 <convert_ADT7410+0x5c>
 8006744:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006748:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    return ret / 16.0;
 800674c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006750:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8006754:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8006758:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800675c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006760:	ee17 3a90 	vmov	r3, s15
 8006764:	b21b      	sxth	r3, r3
}
 8006766:	4618      	mov	r0, r3
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	46000000 	.word	0x46000000

08006778 <check_bounds>:
 * @param min The minimum acceptable value.
 * @param max The maximum acceptable value.
 * @return 1 if the value is within bounds, 0 otherwise.
 */
uint8_t check_bounds(VOLTAGE_RAIL_NAME name, uint16_t raw, int min, int max)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	60ba      	str	r2, [r7, #8]
 8006780:	607b      	str	r3, [r7, #4]
 8006782:	4603      	mov	r3, r0
 8006784:	73fb      	strb	r3, [r7, #15]
 8006786:	460b      	mov	r3, r1
 8006788:	81bb      	strh	r3, [r7, #12]
	if (name == RAIL_TEMP1 || name == RAIL_TEMP2 || name == RAIL_TEMP3 || name == RAIL_TEMP4)
 800678a:	7bfb      	ldrb	r3, [r7, #15]
 800678c:	2b02      	cmp	r3, #2
 800678e:	d008      	beq.n	80067a2 <check_bounds+0x2a>
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	2b03      	cmp	r3, #3
 8006794:	d005      	beq.n	80067a2 <check_bounds+0x2a>
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	2b04      	cmp	r3, #4
 800679a:	d002      	beq.n	80067a2 <check_bounds+0x2a>
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	2b05      	cmp	r3, #5
 80067a0:	d124      	bne.n	80067ec <check_bounds+0x74>
	{
		int16_t converted_max = convert_ADT7410(max);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	b21b      	sxth	r3, r3
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff ffb6 	bl	8006718 <convert_ADT7410>
 80067ac:	4603      	mov	r3, r0
 80067ae:	82fb      	strh	r3, [r7, #22]
		int16_t converted_min = convert_ADT7410(min);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	b21b      	sxth	r3, r3
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff ffaf 	bl	8006718 <convert_ADT7410>
 80067ba:	4603      	mov	r3, r0
 80067bc:	82bb      	strh	r3, [r7, #20]
		int16_t converted_raw = convert_ADT7410(raw);
 80067be:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7ff ffa8 	bl	8006718 <convert_ADT7410>
 80067c8:	4603      	mov	r3, r0
 80067ca:	827b      	strh	r3, [r7, #18]
		if (converted_raw <= converted_max && converted_raw >= converted_min)
 80067cc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80067d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	dc07      	bgt.n	80067e8 <check_bounds+0x70>
 80067d8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80067dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	db01      	blt.n	80067e8 <check_bounds+0x70>
		{
			return 1;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e00c      	b.n	8006802 <check_bounds+0x8a>
		}
		return 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	e00a      	b.n	8006802 <check_bounds+0x8a>
	}

	if (raw <= max && raw >= min)
 80067ec:	89bb      	ldrh	r3, [r7, #12]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	db05      	blt.n	8006800 <check_bounds+0x88>
 80067f4:	89bb      	ldrh	r3, [r7, #12]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	dc01      	bgt.n	8006800 <check_bounds+0x88>
	{
		return 1;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e000      	b.n	8006802 <check_bounds+0x8a>
	}
	return 0;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	0000      	movs	r0, r0
 800680c:	0000      	movs	r0, r0
	...

08006810 <monitor_rails>:
 * three times.
 *
 * @return 1 if all rails are within bounds, 0 if any rail is out of bounds.
 */
uint8_t monitor_rails()
{
 8006810:	b590      	push	{r4, r7, lr}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
	uint8_t within_bounds = 1;
 8006816:	2301      	movs	r3, #1
 8006818:	75fb      	strb	r3, [r7, #23]
	uint16_t tolerance;

	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++)
 800681a:	2300      	movs	r3, #0
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	e0c2      	b.n	80069a6 <monitor_rails+0x196>
	{
		// Range check is different depending on whether the rail is enabled or not
		if (rail_monitor[i].is_enabled)
 8006820:	4a67      	ldr	r2, [pc, #412]	; (80069c0 <monitor_rails+0x1b0>)
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	011b      	lsls	r3, r3, #4
 8006826:	4413      	add	r3, r2
 8006828:	3302      	adds	r3, #2
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d01d      	beq.n	800686c <monitor_rails+0x5c>
		{
			within_bounds = check_bounds(rail_monitor[i].name, rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage);
 8006830:	4a63      	ldr	r2, [pc, #396]	; (80069c0 <monitor_rails+0x1b0>)
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	011b      	lsls	r3, r3, #4
 8006836:	4413      	add	r3, r2
 8006838:	7818      	ldrb	r0, [r3, #0]
 800683a:	4a61      	ldr	r2, [pc, #388]	; (80069c0 <monitor_rails+0x1b0>)
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	4413      	add	r3, r2
 8006842:	3304      	adds	r3, #4
 8006844:	8819      	ldrh	r1, [r3, #0]
 8006846:	4a5e      	ldr	r2, [pc, #376]	; (80069c0 <monitor_rails+0x1b0>)
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	4413      	add	r3, r2
 800684e:	3308      	adds	r3, #8
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	461c      	mov	r4, r3
 8006854:	4a5a      	ldr	r2, [pc, #360]	; (80069c0 <monitor_rails+0x1b0>)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	4413      	add	r3, r2
 800685c:	3306      	adds	r3, #6
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	4622      	mov	r2, r4
 8006862:	f7ff ff89 	bl	8006778 <check_bounds>
 8006866:	4603      	mov	r3, r0
 8006868:	75fb      	strb	r3, [r7, #23]
 800686a:	e023      	b.n	80068b4 <monitor_rails+0xa4>
		}
		else
		{
			tolerance = rail_monitor[i].max_voltage * 0.1;
 800686c:	4a54      	ldr	r2, [pc, #336]	; (80069c0 <monitor_rails+0x1b0>)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	4413      	add	r3, r2
 8006874:	3306      	adds	r3, #6
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	ee07 3a90 	vmov	s15, r3
 800687c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006880:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80069b8 <monitor_rails+0x1a8>
 8006884:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006888:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800688c:	ee17 3a90 	vmov	r3, s15
 8006890:	81fb      	strh	r3, [r7, #14]
			within_bounds = check_bounds(rail_monitor[i].name, rail_monitor[i].data, 0, tolerance);
 8006892:	4a4b      	ldr	r2, [pc, #300]	; (80069c0 <monitor_rails+0x1b0>)
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	011b      	lsls	r3, r3, #4
 8006898:	4413      	add	r3, r2
 800689a:	7818      	ldrb	r0, [r3, #0]
 800689c:	4a48      	ldr	r2, [pc, #288]	; (80069c0 <monitor_rails+0x1b0>)
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	011b      	lsls	r3, r3, #4
 80068a2:	4413      	add	r3, r2
 80068a4:	3304      	adds	r3, #4
 80068a6:	8819      	ldrh	r1, [r3, #0]
 80068a8:	89fb      	ldrh	r3, [r7, #14]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f7ff ff64 	bl	8006778 <check_bounds>
 80068b0:	4603      	mov	r3, r0
 80068b2:	75fb      	strb	r3, [r7, #23]
		}

		// If we aren't within range...
		if (!within_bounds)
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d16f      	bne.n	800699a <monitor_rails+0x18a>
		{
			// Increase that rails error count
			rail_monitor[i].error_count++;
 80068ba:	4a41      	ldr	r2, [pc, #260]	; (80069c0 <monitor_rails+0x1b0>)
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	4413      	add	r3, r2
 80068c2:	3301      	adds	r3, #1
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	3301      	adds	r3, #1
 80068c8:	b2d9      	uxtb	r1, r3
 80068ca:	4a3d      	ldr	r2, [pc, #244]	; (80069c0 <monitor_rails+0x1b0>)
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	4413      	add	r3, r2
 80068d2:	3301      	adds	r3, #1
 80068d4:	460a      	mov	r2, r1
 80068d6:	701a      	strb	r2, [r3, #0]

			// Store the voltage each time a rail goes out of bounds
			switch (rail_monitor[i].error_count)
 80068d8:	4a39      	ldr	r2, [pc, #228]	; (80069c0 <monitor_rails+0x1b0>)
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	4413      	add	r3, r2
 80068e0:	3301      	adds	r3, #1
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d024      	beq.n	8006932 <monitor_rails+0x122>
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	dc58      	bgt.n	800699e <monitor_rails+0x18e>
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d002      	beq.n	80068f6 <monitor_rails+0xe6>
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d00f      	beq.n	8006914 <monitor_rails+0x104>
				error.OOB_2 = rail_monitor[i].OOB_2;
				error.OOB_3 = rail_monitor[i].OOB_3;
				handle_error(error);
				break;
			default:
				break;
 80068f4:	e053      	b.n	800699e <monitor_rails+0x18e>
				rail_monitor[i].OOB_1 = rail_monitor[i].data;
 80068f6:	4a32      	ldr	r2, [pc, #200]	; (80069c0 <monitor_rails+0x1b0>)
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	4413      	add	r3, r2
 80068fe:	3304      	adds	r3, #4
 8006900:	8819      	ldrh	r1, [r3, #0]
 8006902:	4a2f      	ldr	r2, [pc, #188]	; (80069c0 <monitor_rails+0x1b0>)
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	4413      	add	r3, r2
 800690a:	330a      	adds	r3, #10
 800690c:	460a      	mov	r2, r1
 800690e:	801a      	strh	r2, [r3, #0]
				return 0;
 8006910:	2300      	movs	r3, #0
 8006912:	e04d      	b.n	80069b0 <monitor_rails+0x1a0>
				rail_monitor[i].OOB_2 = rail_monitor[i].data;
 8006914:	4a2a      	ldr	r2, [pc, #168]	; (80069c0 <monitor_rails+0x1b0>)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	011b      	lsls	r3, r3, #4
 800691a:	4413      	add	r3, r2
 800691c:	3304      	adds	r3, #4
 800691e:	8819      	ldrh	r1, [r3, #0]
 8006920:	4a27      	ldr	r2, [pc, #156]	; (80069c0 <monitor_rails+0x1b0>)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	011b      	lsls	r3, r3, #4
 8006926:	4413      	add	r3, r2
 8006928:	330c      	adds	r3, #12
 800692a:	460a      	mov	r2, r1
 800692c:	801a      	strh	r2, [r3, #0]
				return 0;
 800692e:	2300      	movs	r3, #0
 8006930:	e03e      	b.n	80069b0 <monitor_rails+0x1a0>
				rail_monitor[i].OOB_3 = rail_monitor[i].data;
 8006932:	4a23      	ldr	r2, [pc, #140]	; (80069c0 <monitor_rails+0x1b0>)
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	4413      	add	r3, r2
 800693a:	3304      	adds	r3, #4
 800693c:	8819      	ldrh	r1, [r3, #0]
 800693e:	4a20      	ldr	r2, [pc, #128]	; (80069c0 <monitor_rails+0x1b0>)
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	4413      	add	r3, r2
 8006946:	330e      	adds	r3, #14
 8006948:	460a      	mov	r2, r1
 800694a:	801a      	strh	r2, [r3, #0]
				error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 800694c:	4a1c      	ldr	r2, [pc, #112]	; (80069c0 <monitor_rails+0x1b0>)
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	011b      	lsls	r3, r3, #4
 8006952:	4413      	add	r3, r2
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	4618      	mov	r0, r3
 8006958:	f000 f834 	bl	80069c4 <get_rail_name_error_detail>
 800695c:	4603      	mov	r3, r0
 800695e:	717b      	strb	r3, [r7, #5]
				error.category = EC_power_supply_rail;
 8006960:	2300      	movs	r3, #0
 8006962:	713b      	strb	r3, [r7, #4]
				error.OOB_1 = rail_monitor[i].OOB_1;
 8006964:	4a16      	ldr	r2, [pc, #88]	; (80069c0 <monitor_rails+0x1b0>)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	4413      	add	r3, r2
 800696c:	330a      	adds	r3, #10
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	80fb      	strh	r3, [r7, #6]
				error.OOB_2 = rail_monitor[i].OOB_2;
 8006972:	4a13      	ldr	r2, [pc, #76]	; (80069c0 <monitor_rails+0x1b0>)
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	4413      	add	r3, r2
 800697a:	330c      	adds	r3, #12
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	813b      	strh	r3, [r7, #8]
				error.OOB_3 = rail_monitor[i].OOB_3;
 8006980:	4a0f      	ldr	r2, [pc, #60]	; (80069c0 <monitor_rails+0x1b0>)
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	4413      	add	r3, r2
 8006988:	330e      	adds	r3, #14
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	817b      	strh	r3, [r7, #10]
				handle_error(error);
 800698e:	1d3b      	adds	r3, r7, #4
 8006990:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006994:	f7fb facc 	bl	8001f30 <handle_error>
				break;
 8006998:	e002      	b.n	80069a0 <monitor_rails+0x190>
			}
		}
 800699a:	bf00      	nop
 800699c:	e000      	b.n	80069a0 <monitor_rails+0x190>
				break;
 800699e:	bf00      	nop
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++)
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	3301      	adds	r3, #1
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b11      	cmp	r3, #17
 80069aa:	f77f af39 	ble.w	8006820 <monitor_rails+0x10>
	}
	// No rails were out of bounds, so voltage_monitor task does not need to enter idle and delay
	return 1;
 80069ae:	2301      	movs	r3, #1
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	371c      	adds	r7, #28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd90      	pop	{r4, r7, pc}
 80069b8:	9999999a 	.word	0x9999999a
 80069bc:	3fb99999 	.word	0x3fb99999
 80069c0:	2400275c 	.word	0x2400275c

080069c4 <get_rail_name_error_detail>:
 *
 * @param rail_name The voltage rail for which to get the error detail.
 * @return The corresponding ERROR_DETAIL enumeration value for the specified rail.
 */
ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	4603      	mov	r3, r0
 80069cc:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 80069ce:	79fb      	ldrb	r3, [r7, #7]
 80069d0:	2b11      	cmp	r3, #17
 80069d2:	d84b      	bhi.n	8006a6c <get_rail_name_error_detail+0xa8>
 80069d4:	a201      	add	r2, pc, #4	; (adr r2, 80069dc <get_rail_name_error_detail+0x18>)
 80069d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069da:	bf00      	nop
 80069dc:	08006a25 	.word	0x08006a25
 80069e0:	08006a29 	.word	0x08006a29
 80069e4:	08006a2d 	.word	0x08006a2d
 80069e8:	08006a31 	.word	0x08006a31
 80069ec:	08006a35 	.word	0x08006a35
 80069f0:	08006a39 	.word	0x08006a39
 80069f4:	08006a3d 	.word	0x08006a3d
 80069f8:	08006a41 	.word	0x08006a41
 80069fc:	08006a45 	.word	0x08006a45
 8006a00:	08006a49 	.word	0x08006a49
 8006a04:	08006a4d 	.word	0x08006a4d
 8006a08:	08006a51 	.word	0x08006a51
 8006a0c:	08006a55 	.word	0x08006a55
 8006a10:	08006a59 	.word	0x08006a59
 8006a14:	08006a5d 	.word	0x08006a5d
 8006a18:	08006a61 	.word	0x08006a61
 8006a1c:	08006a65 	.word	0x08006a65
 8006a20:	08006a69 	.word	0x08006a69
	case RAIL_vsense:
		return ED_vsense;
 8006a24:	2306      	movs	r3, #6
 8006a26:	e022      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 8006a28:	2307      	movs	r3, #7
 8006a2a:	e020      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 8006a2c:	2308      	movs	r3, #8
 8006a2e:	e01e      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 8006a30:	2309      	movs	r3, #9
 8006a32:	e01c      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 8006a34:	230a      	movs	r3, #10
 8006a36:	e01a      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 8006a38:	230b      	movs	r3, #11
 8006a3a:	e018      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 8006a3c:	230c      	movs	r3, #12
 8006a3e:	e016      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 8006a40:	230d      	movs	r3, #13
 8006a42:	e014      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 8006a44:	230e      	movs	r3, #14
 8006a46:	e012      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 8006a48:	230f      	movs	r3, #15
 8006a4a:	e010      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 8006a4c:	2310      	movs	r3, #16
 8006a4e:	e00e      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 8006a50:	2311      	movs	r3, #17
 8006a52:	e00c      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 8006a54:	2312      	movs	r3, #18
 8006a56:	e00a      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 8006a58:	2313      	movs	r3, #19
 8006a5a:	e008      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 8006a5c:	2314      	movs	r3, #20
 8006a5e:	e006      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 8006a60:	2315      	movs	r3, #21
 8006a62:	e004      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 8006a64:	2316      	movs	r3, #22
 8006a66:	e002      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8006a68:	2317      	movs	r3, #23
 8006a6a:	e000      	b.n	8006a6e <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 8006a6c:	231c      	movs	r3, #28
	}
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop

08006a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ab4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006a80:	f7fe fc94 	bl	80053ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006a84:	480c      	ldr	r0, [pc, #48]	; (8006ab8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006a86:	490d      	ldr	r1, [pc, #52]	; (8006abc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006a88:	4a0d      	ldr	r2, [pc, #52]	; (8006ac0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a8c:	e002      	b.n	8006a94 <LoopCopyDataInit>

08006a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a92:	3304      	adds	r3, #4

08006a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a98:	d3f9      	bcc.n	8006a8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a9a:	4a0a      	ldr	r2, [pc, #40]	; (8006ac4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006a9c:	4c0a      	ldr	r4, [pc, #40]	; (8006ac8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006aa0:	e001      	b.n	8006aa6 <LoopFillZerobss>

08006aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006aa4:	3204      	adds	r2, #4

08006aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006aa8:	d3fb      	bcc.n	8006aa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006aaa:	f015 fb97 	bl	801c1dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006aae:	f7fc fddb 	bl	8003668 <main>
  bx  lr
 8006ab2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006ab4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8006ab8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006abc:	240000f4 	.word	0x240000f4
  ldr r2, =_sidata
 8006ac0:	0801c514 	.word	0x0801c514
  ldr r2, =_sbss
 8006ac4:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8006ac8:	240071ec 	.word	0x240071ec

08006acc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006acc:	e7fe      	b.n	8006acc <ADC3_IRQHandler>
	...

08006ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ad6:	2003      	movs	r0, #3
 8006ad8:	f001 fd39 	bl	800854e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006adc:	f009 f9ce 	bl	800fe7c <HAL_RCC_GetSysClockFreq>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	4b15      	ldr	r3, [pc, #84]	; (8006b38 <HAL_Init+0x68>)
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	0a1b      	lsrs	r3, r3, #8
 8006ae8:	f003 030f 	and.w	r3, r3, #15
 8006aec:	4913      	ldr	r1, [pc, #76]	; (8006b3c <HAL_Init+0x6c>)
 8006aee:	5ccb      	ldrb	r3, [r1, r3]
 8006af0:	f003 031f 	and.w	r3, r3, #31
 8006af4:	fa22 f303 	lsr.w	r3, r2, r3
 8006af8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006afa:	4b0f      	ldr	r3, [pc, #60]	; (8006b38 <HAL_Init+0x68>)
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	f003 030f 	and.w	r3, r3, #15
 8006b02:	4a0e      	ldr	r2, [pc, #56]	; (8006b3c <HAL_Init+0x6c>)
 8006b04:	5cd3      	ldrb	r3, [r2, r3]
 8006b06:	f003 031f 	and.w	r3, r3, #31
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b10:	4a0b      	ldr	r2, [pc, #44]	; (8006b40 <HAL_Init+0x70>)
 8006b12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b14:	4a0b      	ldr	r2, [pc, #44]	; (8006b44 <HAL_Init+0x74>)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b1a:	2005      	movs	r0, #5
 8006b1c:	f7fe fa18 	bl	8004f50 <HAL_InitTick>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e002      	b.n	8006b30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006b2a:	f7fe f9eb 	bl	8004f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	58024400 	.word	0x58024400
 8006b3c:	0801c4c4 	.word	0x0801c4c4
 8006b40:	240000e4 	.word	0x240000e4
 8006b44:	240000e0 	.word	0x240000e0

08006b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006b4c:	4b06      	ldr	r3, [pc, #24]	; (8006b68 <HAL_IncTick+0x20>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	461a      	mov	r2, r3
 8006b52:	4b06      	ldr	r3, [pc, #24]	; (8006b6c <HAL_IncTick+0x24>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4413      	add	r3, r2
 8006b58:	4a04      	ldr	r2, [pc, #16]	; (8006b6c <HAL_IncTick+0x24>)
 8006b5a:	6013      	str	r3, [r2, #0]
}
 8006b5c:	bf00      	nop
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	240000ec 	.word	0x240000ec
 8006b6c:	2400287c 	.word	0x2400287c

08006b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  return uwTick;
 8006b74:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <HAL_GetTick+0x14>)
 8006b76:	681b      	ldr	r3, [r3, #0]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	2400287c 	.word	0x2400287c

08006b88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006b8c:	4b03      	ldr	r3, [pc, #12]	; (8006b9c <HAL_GetREVID+0x14>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	0c1b      	lsrs	r3, r3, #16
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	5c001000 	.word	0x5c001000

08006ba0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8006baa:	4b07      	ldr	r3, [pc, #28]	; (8006bc8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	43db      	mvns	r3, r3
 8006bb2:	401a      	ands	r2, r3
 8006bb4:	4904      	ldr	r1, [pc, #16]	; (8006bc8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	604b      	str	r3, [r1, #4]
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	58000400 	.word	0x58000400

08006bcc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	431a      	orrs	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	609a      	str	r2, [r3, #8]
}
 8006be6:	bf00      	nop
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	609a      	str	r2, [r3, #8]
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3360      	adds	r3, #96	; 0x60
 8006c46:	461a      	mov	r2, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	430b      	orrs	r3, r1
 8006c62:	431a      	orrs	r2, r3
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8006c68:	bf00      	nop
 8006c6a:	371c      	adds	r7, #28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f003 031f 	and.w	r3, r3, #31
 8006c8e:	6879      	ldr	r1, [r7, #4]
 8006c90:	fa01 f303 	lsl.w	r3, r1, r3
 8006c94:	431a      	orrs	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	611a      	str	r2, [r3, #16]
}
 8006c9a:	bf00      	nop
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b087      	sub	sp, #28
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3360      	adds	r3, #96	; 0x60
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	601a      	str	r2, [r3, #0]
  }
}
 8006cd0:	bf00      	nop
 8006cd2:	371c      	adds	r7, #28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e000      	b.n	8006cf6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b087      	sub	sp, #28
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	60f8      	str	r0, [r7, #12]
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3330      	adds	r3, #48	; 0x30
 8006d12:	461a      	mov	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	0a1b      	lsrs	r3, r3, #8
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	f003 030c 	and.w	r3, r3, #12
 8006d1e:	4413      	add	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	211f      	movs	r1, #31
 8006d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d32:	43db      	mvns	r3, r3
 8006d34:	401a      	ands	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	0e9b      	lsrs	r3, r3, #26
 8006d3a:	f003 011f 	and.w	r1, r3, #31
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f003 031f 	and.w	r3, r3, #31
 8006d44:	fa01 f303 	lsl.w	r3, r1, r3
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f023 0203 	bic.w	r2, r3, #3
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	60da      	str	r2, [r3, #12]
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	3314      	adds	r3, #20
 8006d90:	461a      	mov	r2, r3
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	0e5b      	lsrs	r3, r3, #25
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	4413      	add	r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	0d1b      	lsrs	r3, r3, #20
 8006da8:	f003 031f 	and.w	r3, r3, #31
 8006dac:	2107      	movs	r1, #7
 8006dae:	fa01 f303 	lsl.w	r3, r1, r3
 8006db2:	43db      	mvns	r3, r3
 8006db4:	401a      	ands	r2, r3
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	0d1b      	lsrs	r3, r3, #20
 8006dba:	f003 031f 	and.w	r3, r3, #31
 8006dbe:	6879      	ldr	r1, [r7, #4]
 8006dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006dca:	bf00      	nop
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
	...

08006dd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006df0:	43db      	mvns	r3, r3
 8006df2:	401a      	ands	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f003 0318 	and.w	r3, r3, #24
 8006dfa:	4908      	ldr	r1, [pc, #32]	; (8006e1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8006dfc:	40d9      	lsrs	r1, r3
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	400b      	ands	r3, r1
 8006e02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e06:	431a      	orrs	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8006e0e:	bf00      	nop
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	000fffff 	.word	0x000fffff

08006e20 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f003 031f 	and.w	r3, r3, #31
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	4b04      	ldr	r3, [pc, #16]	; (8006e5c <LL_ADC_DisableDeepPowerDown+0x20>)
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	6093      	str	r3, [r2, #8]
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	5fffffc0 	.word	0x5fffffc0

08006e60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e74:	d101      	bne.n	8006e7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	4b05      	ldr	r3, [pc, #20]	; (8006eac <LL_ADC_EnableInternalRegulator+0x24>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	6fffffc0 	.word	0x6fffffc0

08006eb0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ec0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ec4:	d101      	bne.n	8006eca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689a      	ldr	r2, [r3, #8]
 8006ee4:	4b05      	ldr	r3, [pc, #20]	; (8006efc <LL_ADC_Enable+0x24>)
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	f043 0201 	orr.w	r2, r3, #1
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	7fffffc0 	.word	0x7fffffc0

08006f00 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <LL_ADC_Disable+0x24>)
 8006f0e:	4013      	ands	r3, r2
 8006f10:	f043 0202 	orr.w	r2, r3, #2
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	7fffffc0 	.word	0x7fffffc0

08006f28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d101      	bne.n	8006f40 <LL_ADC_IsEnabled+0x18>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e000      	b.n	8006f42 <LL_ADC_IsEnabled+0x1a>
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d101      	bne.n	8006f66 <LL_ADC_IsDisableOngoing+0x18>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e000      	b.n	8006f68 <LL_ADC_IsDisableOngoing+0x1a>
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <LL_ADC_REG_StartConversion+0x24>)
 8006f82:	4013      	ands	r3, r2
 8006f84:	f043 0204 	orr.w	r2, r3, #4
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	7fffffc0 	.word	0x7fffffc0

08006f9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d101      	bne.n	8006fb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e000      	b.n	8006fb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b083      	sub	sp, #12
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 0308 	and.w	r3, r3, #8
 8006fd2:	2b08      	cmp	r3, #8
 8006fd4:	d101      	bne.n	8006fda <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e000      	b.n	8006fdc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006fe8:	b590      	push	{r4, r7, lr}
 8006fea:	b089      	sub	sp, #36	; 0x24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e18f      	b.n	8007322 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700c:	2b00      	cmp	r3, #0
 800700e:	d109      	bne.n	8007024 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7f9 fc9b 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff ff19 	bl	8006e60 <LL_ADC_IsDeepPowerDownEnabled>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d004      	beq.n	800703e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff feff 	bl	8006e3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4618      	mov	r0, r3
 8007044:	f7ff ff34 	bl	8006eb0 <LL_ADC_IsInternalRegulatorEnabled>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d114      	bne.n	8007078 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff ff18 	bl	8006e88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007058:	4b87      	ldr	r3, [pc, #540]	; (8007278 <HAL_ADC_Init+0x290>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	099b      	lsrs	r3, r3, #6
 800705e:	4a87      	ldr	r2, [pc, #540]	; (800727c <HAL_ADC_Init+0x294>)
 8007060:	fba2 2303 	umull	r2, r3, r2, r3
 8007064:	099b      	lsrs	r3, r3, #6
 8007066:	3301      	adds	r3, #1
 8007068:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800706a:	e002      	b.n	8007072 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	3b01      	subs	r3, #1
 8007070:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1f9      	bne.n	800706c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4618      	mov	r0, r3
 800707e:	f7ff ff17 	bl	8006eb0 <LL_ADC_IsInternalRegulatorEnabled>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10d      	bne.n	80070a4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708c:	f043 0210 	orr.w	r2, r3, #16
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007098:	f043 0201 	orr.w	r2, r3, #1
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7ff ff77 	bl	8006f9c <LL_ADC_REG_IsConversionOngoing>
 80070ae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b4:	f003 0310 	and.w	r3, r3, #16
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f040 8129 	bne.w	8007310 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f040 8125 	bne.w	8007310 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80070ce:	f043 0202 	orr.w	r2, r3, #2
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff ff24 	bl	8006f28 <LL_ADC_IsEnabled>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d136      	bne.n	8007154 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a65      	ldr	r2, [pc, #404]	; (8007280 <HAL_ADC_Init+0x298>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d004      	beq.n	80070fa <HAL_ADC_Init+0x112>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a63      	ldr	r2, [pc, #396]	; (8007284 <HAL_ADC_Init+0x29c>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d10e      	bne.n	8007118 <HAL_ADC_Init+0x130>
 80070fa:	4861      	ldr	r0, [pc, #388]	; (8007280 <HAL_ADC_Init+0x298>)
 80070fc:	f7ff ff14 	bl	8006f28 <LL_ADC_IsEnabled>
 8007100:	4604      	mov	r4, r0
 8007102:	4860      	ldr	r0, [pc, #384]	; (8007284 <HAL_ADC_Init+0x29c>)
 8007104:	f7ff ff10 	bl	8006f28 <LL_ADC_IsEnabled>
 8007108:	4603      	mov	r3, r0
 800710a:	4323      	orrs	r3, r4
 800710c:	2b00      	cmp	r3, #0
 800710e:	bf0c      	ite	eq
 8007110:	2301      	moveq	r3, #1
 8007112:	2300      	movne	r3, #0
 8007114:	b2db      	uxtb	r3, r3
 8007116:	e008      	b.n	800712a <HAL_ADC_Init+0x142>
 8007118:	485b      	ldr	r0, [pc, #364]	; (8007288 <HAL_ADC_Init+0x2a0>)
 800711a:	f7ff ff05 	bl	8006f28 <LL_ADC_IsEnabled>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	bf0c      	ite	eq
 8007124:	2301      	moveq	r3, #1
 8007126:	2300      	movne	r3, #0
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d012      	beq.n	8007154 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a53      	ldr	r2, [pc, #332]	; (8007280 <HAL_ADC_Init+0x298>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d004      	beq.n	8007142 <HAL_ADC_Init+0x15a>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a51      	ldr	r2, [pc, #324]	; (8007284 <HAL_ADC_Init+0x29c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d101      	bne.n	8007146 <HAL_ADC_Init+0x15e>
 8007142:	4a52      	ldr	r2, [pc, #328]	; (800728c <HAL_ADC_Init+0x2a4>)
 8007144:	e000      	b.n	8007148 <HAL_ADC_Init+0x160>
 8007146:	4a52      	ldr	r2, [pc, #328]	; (8007290 <HAL_ADC_Init+0x2a8>)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	4619      	mov	r1, r3
 800714e:	4610      	mov	r0, r2
 8007150:	f7ff fd3c 	bl	8006bcc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8007154:	f7ff fd18 	bl	8006b88 <HAL_GetREVID>
 8007158:	4603      	mov	r3, r0
 800715a:	f241 0203 	movw	r2, #4099	; 0x1003
 800715e:	4293      	cmp	r3, r2
 8007160:	d914      	bls.n	800718c <HAL_ADC_Init+0x1a4>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	2b10      	cmp	r3, #16
 8007168:	d110      	bne.n	800718c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	7d5b      	ldrb	r3, [r3, #21]
 800716e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007174:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800717a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	7f1b      	ldrb	r3, [r3, #28]
 8007180:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8007182:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007184:	f043 030c 	orr.w	r3, r3, #12
 8007188:	61bb      	str	r3, [r7, #24]
 800718a:	e00d      	b.n	80071a8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	7d5b      	ldrb	r3, [r3, #21]
 8007190:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007196:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800719c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	7f1b      	ldrb	r3, [r3, #28]
 80071a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80071a4:	4313      	orrs	r3, r2
 80071a6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	7f1b      	ldrb	r3, [r3, #28]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d106      	bne.n	80071be <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	3b01      	subs	r3, #1
 80071b6:	045b      	lsls	r3, r3, #17
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d009      	beq.n	80071da <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ca:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	4b2c      	ldr	r3, [pc, #176]	; (8007294 <HAL_ADC_Init+0x2ac>)
 80071e2:	4013      	ands	r3, r2
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	6812      	ldr	r2, [r2, #0]
 80071e8:	69b9      	ldr	r1, [r7, #24]
 80071ea:	430b      	orrs	r3, r1
 80071ec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7ff fed2 	bl	8006f9c <LL_ADC_REG_IsConversionOngoing>
 80071f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f7ff fedf 	bl	8006fc2 <LL_ADC_INJ_IsConversionOngoing>
 8007204:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d15f      	bne.n	80072cc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d15c      	bne.n	80072cc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	7d1b      	ldrb	r3, [r3, #20]
 8007216:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800721c:	4313      	orrs	r3, r2
 800721e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68da      	ldr	r2, [r3, #12]
 8007226:	4b1c      	ldr	r3, [pc, #112]	; (8007298 <HAL_ADC_Init+0x2b0>)
 8007228:	4013      	ands	r3, r2
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	6812      	ldr	r2, [r2, #0]
 800722e:	69b9      	ldr	r1, [r7, #24]
 8007230:	430b      	orrs	r3, r1
 8007232:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800723a:	2b01      	cmp	r3, #1
 800723c:	d130      	bne.n	80072a0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	691a      	ldr	r2, [r3, #16]
 800724a:	4b14      	ldr	r3, [pc, #80]	; (800729c <HAL_ADC_Init+0x2b4>)
 800724c:	4013      	ands	r3, r2
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007252:	3a01      	subs	r2, #1
 8007254:	0411      	lsls	r1, r2, #16
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800725a:	4311      	orrs	r1, r2
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007260:	4311      	orrs	r1, r2
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007266:	430a      	orrs	r2, r1
 8007268:	431a      	orrs	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0201 	orr.w	r2, r2, #1
 8007272:	611a      	str	r2, [r3, #16]
 8007274:	e01c      	b.n	80072b0 <HAL_ADC_Init+0x2c8>
 8007276:	bf00      	nop
 8007278:	240000e0 	.word	0x240000e0
 800727c:	053e2d63 	.word	0x053e2d63
 8007280:	40022000 	.word	0x40022000
 8007284:	40022100 	.word	0x40022100
 8007288:	58026000 	.word	0x58026000
 800728c:	40022300 	.word	0x40022300
 8007290:	58026300 	.word	0x58026300
 8007294:	fff0c003 	.word	0xfff0c003
 8007298:	ffffbffc 	.word	0xffffbffc
 800729c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691a      	ldr	r2, [r3, #16]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0201 	bic.w	r2, r2, #1
 80072ae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fdec 	bl	8007ea4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d10c      	bne.n	80072ee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072da:	f023 010f 	bic.w	r1, r3, #15
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	1e5a      	subs	r2, r3, #1
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	430a      	orrs	r2, r1
 80072ea:	631a      	str	r2, [r3, #48]	; 0x30
 80072ec:	e007      	b.n	80072fe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f022 020f 	bic.w	r2, r2, #15
 80072fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007302:	f023 0303 	bic.w	r3, r3, #3
 8007306:	f043 0201 	orr.w	r2, r3, #1
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	655a      	str	r2, [r3, #84]	; 0x54
 800730e:	e007      	b.n	8007320 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007314:	f043 0210 	orr.w	r2, r3, #16
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007320:	7ffb      	ldrb	r3, [r7, #31]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3724      	adds	r7, #36	; 0x24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd90      	pop	{r4, r7, pc}
 800732a:	bf00      	nop

0800732c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a55      	ldr	r2, [pc, #340]	; (8007494 <HAL_ADC_Start_DMA+0x168>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d004      	beq.n	800734c <HAL_ADC_Start_DMA+0x20>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a54      	ldr	r2, [pc, #336]	; (8007498 <HAL_ADC_Start_DMA+0x16c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d101      	bne.n	8007350 <HAL_ADC_Start_DMA+0x24>
 800734c:	4b53      	ldr	r3, [pc, #332]	; (800749c <HAL_ADC_Start_DMA+0x170>)
 800734e:	e000      	b.n	8007352 <HAL_ADC_Start_DMA+0x26>
 8007350:	4b53      	ldr	r3, [pc, #332]	; (80074a0 <HAL_ADC_Start_DMA+0x174>)
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff fd64 	bl	8006e20 <LL_ADC_GetMultimode>
 8007358:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4618      	mov	r0, r3
 8007360:	f7ff fe1c 	bl	8006f9c <LL_ADC_REG_IsConversionOngoing>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	f040 808c 	bne.w	8007484 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007372:	2b01      	cmp	r3, #1
 8007374:	d101      	bne.n	800737a <HAL_ADC_Start_DMA+0x4e>
 8007376:	2302      	movs	r3, #2
 8007378:	e087      	b.n	800748a <HAL_ADC_Start_DMA+0x15e>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d005      	beq.n	8007394 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	2b05      	cmp	r3, #5
 800738c:	d002      	beq.n	8007394 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	2b09      	cmp	r3, #9
 8007392:	d170      	bne.n	8007476 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 fc07 	bl	8007ba8 <ADC_Enable>
 800739a:	4603      	mov	r3, r0
 800739c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d163      	bne.n	800746c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073a8:	4b3e      	ldr	r3, [pc, #248]	; (80074a4 <HAL_ADC_Start_DMA+0x178>)
 80073aa:	4013      	ands	r3, r2
 80073ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a37      	ldr	r2, [pc, #220]	; (8007498 <HAL_ADC_Start_DMA+0x16c>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d002      	beq.n	80073c4 <HAL_ADC_Start_DMA+0x98>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	e000      	b.n	80073c6 <HAL_ADC_Start_DMA+0x9a>
 80073c4:	4b33      	ldr	r3, [pc, #204]	; (8007494 <HAL_ADC_Start_DMA+0x168>)
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	6812      	ldr	r2, [r2, #0]
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d002      	beq.n	80073d4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d105      	bne.n	80073e0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d006      	beq.n	80073fa <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f0:	f023 0206 	bic.w	r2, r3, #6
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	659a      	str	r2, [r3, #88]	; 0x58
 80073f8:	e002      	b.n	8007400 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007404:	4a28      	ldr	r2, [pc, #160]	; (80074a8 <HAL_ADC_Start_DMA+0x17c>)
 8007406:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800740c:	4a27      	ldr	r2, [pc, #156]	; (80074ac <HAL_ADC_Start_DMA+0x180>)
 800740e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007414:	4a26      	ldr	r2, [pc, #152]	; (80074b0 <HAL_ADC_Start_DMA+0x184>)
 8007416:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	221c      	movs	r2, #28
 800741e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0210 	orr.w	r2, r2, #16
 8007436:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	4619      	mov	r1, r3
 8007442:	4610      	mov	r0, r2
 8007444:	f7ff fc89 	bl	8006d5a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3340      	adds	r3, #64	; 0x40
 8007452:	4619      	mov	r1, r3
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f002 f80e 	bl	8009478 <HAL_DMA_Start_IT>
 800745c:	4603      	mov	r3, r0
 800745e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff fd85 	bl	8006f74 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800746a:	e00d      	b.n	8007488 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8007474:	e008      	b.n	8007488 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007482:	e001      	b.n	8007488 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007484:	2302      	movs	r3, #2
 8007486:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007488:	7dfb      	ldrb	r3, [r7, #23]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	40022000 	.word	0x40022000
 8007498:	40022100 	.word	0x40022100
 800749c:	40022300 	.word	0x40022300
 80074a0:	58026300 	.word	0x58026300
 80074a4:	fffff0fe 	.word	0xfffff0fe
 80074a8:	08007d7b 	.word	0x08007d7b
 80074ac:	08007e53 	.word	0x08007e53
 80074b0:	08007e6f 	.word	0x08007e6f

080074b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80074f0:	b590      	push	{r4, r7, lr}
 80074f2:	b0a1      	sub	sp, #132	; 0x84
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	4a65      	ldr	r2, [pc, #404]	; (80076a0 <HAL_ADC_ConfigChannel+0x1b0>)
 800750a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007512:	2b01      	cmp	r3, #1
 8007514:	d101      	bne.n	800751a <HAL_ADC_ConfigChannel+0x2a>
 8007516:	2302      	movs	r3, #2
 8007518:	e32e      	b.n	8007b78 <HAL_ADC_ConfigChannel+0x688>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	f7ff fd38 	bl	8006f9c <LL_ADC_REG_IsConversionOngoing>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	f040 8313 	bne.w	8007b5a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	db2c      	blt.n	8007596 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007544:	2b00      	cmp	r3, #0
 8007546:	d108      	bne.n	800755a <HAL_ADC_ConfigChannel+0x6a>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	0e9b      	lsrs	r3, r3, #26
 800754e:	f003 031f 	and.w	r3, r3, #31
 8007552:	2201      	movs	r2, #1
 8007554:	fa02 f303 	lsl.w	r3, r2, r3
 8007558:	e016      	b.n	8007588 <HAL_ADC_ConfigChannel+0x98>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007562:	fa93 f3a3 	rbit	r3, r3
 8007566:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800756a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800756c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8007572:	2320      	movs	r3, #32
 8007574:	e003      	b.n	800757e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8007576:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007578:	fab3 f383 	clz	r3, r3
 800757c:	b2db      	uxtb	r3, r3
 800757e:	f003 031f 	and.w	r3, r3, #31
 8007582:	2201      	movs	r2, #1
 8007584:	fa02 f303 	lsl.w	r3, r2, r3
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6812      	ldr	r2, [r2, #0]
 800758c:	69d1      	ldr	r1, [r2, #28]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	6812      	ldr	r2, [r2, #0]
 8007592:	430b      	orrs	r3, r1
 8007594:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6818      	ldr	r0, [r3, #0]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	6859      	ldr	r1, [r3, #4]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	f7ff fbad 	bl	8006d02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff fcf5 	bl	8006f9c <LL_ADC_REG_IsConversionOngoing>
 80075b2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff fd02 	bl	8006fc2 <LL_ADC_INJ_IsConversionOngoing>
 80075be:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80075c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f040 80b8 	bne.w	8007738 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80075c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f040 80b4 	bne.w	8007738 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6818      	ldr	r0, [r3, #0]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	6819      	ldr	r1, [r3, #0]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	461a      	mov	r2, r3
 80075de:	f7ff fbcf 	bl	8006d80 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80075e2:	4b30      	ldr	r3, [pc, #192]	; (80076a4 <HAL_ADC_ConfigChannel+0x1b4>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80075ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075ee:	d10b      	bne.n	8007608 <HAL_ADC_ConfigChannel+0x118>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	695a      	ldr	r2, [r3, #20]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	089b      	lsrs	r3, r3, #2
 80075fc:	f003 0307 	and.w	r3, r3, #7
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	fa02 f303 	lsl.w	r3, r2, r3
 8007606:	e01d      	b.n	8007644 <HAL_ADC_ConfigChannel+0x154>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f003 0310 	and.w	r3, r3, #16
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10b      	bne.n	800762e <HAL_ADC_ConfigChannel+0x13e>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	695a      	ldr	r2, [r3, #20]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	089b      	lsrs	r3, r3, #2
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	fa02 f303 	lsl.w	r3, r2, r3
 800762c:	e00a      	b.n	8007644 <HAL_ADC_ConfigChannel+0x154>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	695a      	ldr	r2, [r3, #20]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	089b      	lsrs	r3, r3, #2
 800763a:	f003 0304 	and.w	r3, r3, #4
 800763e:	005b      	lsls	r3, r3, #1
 8007640:	fa02 f303 	lsl.w	r3, r2, r3
 8007644:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	2b04      	cmp	r3, #4
 800764c:	d02c      	beq.n	80076a8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6818      	ldr	r0, [r3, #0]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	6919      	ldr	r1, [r3, #16]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800765c:	f7ff faea 	bl	8006c34 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	6919      	ldr	r1, [r3, #16]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	7e5b      	ldrb	r3, [r3, #25]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d102      	bne.n	8007676 <HAL_ADC_ConfigChannel+0x186>
 8007670:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007674:	e000      	b.n	8007678 <HAL_ADC_ConfigChannel+0x188>
 8007676:	2300      	movs	r3, #0
 8007678:	461a      	mov	r2, r3
 800767a:	f7ff fb14 	bl	8006ca6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6818      	ldr	r0, [r3, #0]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	6919      	ldr	r1, [r3, #16]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	7e1b      	ldrb	r3, [r3, #24]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d102      	bne.n	8007694 <HAL_ADC_ConfigChannel+0x1a4>
 800768e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007692:	e000      	b.n	8007696 <HAL_ADC_ConfigChannel+0x1a6>
 8007694:	2300      	movs	r3, #0
 8007696:	461a      	mov	r2, r3
 8007698:	f7ff faec 	bl	8006c74 <LL_ADC_SetDataRightShift>
 800769c:	e04c      	b.n	8007738 <HAL_ADC_ConfigChannel+0x248>
 800769e:	bf00      	nop
 80076a0:	47ff0000 	.word	0x47ff0000
 80076a4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	069b      	lsls	r3, r3, #26
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d107      	bne.n	80076cc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80076ca:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	069b      	lsls	r3, r3, #26
 80076dc:	429a      	cmp	r2, r3
 80076de:	d107      	bne.n	80076f0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80076ee:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	069b      	lsls	r3, r3, #26
 8007700:	429a      	cmp	r2, r3
 8007702:	d107      	bne.n	8007714 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007712:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800771a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	069b      	lsls	r3, r3, #26
 8007724:	429a      	cmp	r2, r3
 8007726:	d107      	bne.n	8007738 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007736:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff fbf3 	bl	8006f28 <LL_ADC_IsEnabled>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	f040 8211 	bne.w	8007b6c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6818      	ldr	r0, [r3, #0]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	6819      	ldr	r1, [r3, #0]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	461a      	mov	r2, r3
 8007758:	f7ff fb3e 	bl	8006dd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	4aa1      	ldr	r2, [pc, #644]	; (80079e8 <HAL_ADC_ConfigChannel+0x4f8>)
 8007762:	4293      	cmp	r3, r2
 8007764:	f040 812e 	bne.w	80079c4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10b      	bne.n	8007790 <HAL_ADC_ConfigChannel+0x2a0>
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	0e9b      	lsrs	r3, r3, #26
 800777e:	3301      	adds	r3, #1
 8007780:	f003 031f 	and.w	r3, r3, #31
 8007784:	2b09      	cmp	r3, #9
 8007786:	bf94      	ite	ls
 8007788:	2301      	movls	r3, #1
 800778a:	2300      	movhi	r3, #0
 800778c:	b2db      	uxtb	r3, r3
 800778e:	e019      	b.n	80077c4 <HAL_ADC_ConfigChannel+0x2d4>
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007798:	fa93 f3a3 	rbit	r3, r3
 800779c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800779e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80077a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80077a8:	2320      	movs	r3, #32
 80077aa:	e003      	b.n	80077b4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80077ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077ae:	fab3 f383 	clz	r3, r3
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	3301      	adds	r3, #1
 80077b6:	f003 031f 	and.w	r3, r3, #31
 80077ba:	2b09      	cmp	r3, #9
 80077bc:	bf94      	ite	ls
 80077be:	2301      	movls	r3, #1
 80077c0:	2300      	movhi	r3, #0
 80077c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d079      	beq.n	80078bc <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d107      	bne.n	80077e4 <HAL_ADC_ConfigChannel+0x2f4>
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	0e9b      	lsrs	r3, r3, #26
 80077da:	3301      	adds	r3, #1
 80077dc:	069b      	lsls	r3, r3, #26
 80077de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80077e2:	e015      	b.n	8007810 <HAL_ADC_ConfigChannel+0x320>
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ec:	fa93 f3a3 	rbit	r3, r3
 80077f0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80077f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077f4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80077f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80077fc:	2320      	movs	r3, #32
 80077fe:	e003      	b.n	8007808 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8007800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007802:	fab3 f383 	clz	r3, r3
 8007806:	b2db      	uxtb	r3, r3
 8007808:	3301      	adds	r3, #1
 800780a:	069b      	lsls	r3, r3, #26
 800780c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007818:	2b00      	cmp	r3, #0
 800781a:	d109      	bne.n	8007830 <HAL_ADC_ConfigChannel+0x340>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	0e9b      	lsrs	r3, r3, #26
 8007822:	3301      	adds	r3, #1
 8007824:	f003 031f 	and.w	r3, r3, #31
 8007828:	2101      	movs	r1, #1
 800782a:	fa01 f303 	lsl.w	r3, r1, r3
 800782e:	e017      	b.n	8007860 <HAL_ADC_ConfigChannel+0x370>
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007838:	fa93 f3a3 	rbit	r3, r3
 800783c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800783e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007840:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8007842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8007848:	2320      	movs	r3, #32
 800784a:	e003      	b.n	8007854 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800784c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800784e:	fab3 f383 	clz	r3, r3
 8007852:	b2db      	uxtb	r3, r3
 8007854:	3301      	adds	r3, #1
 8007856:	f003 031f 	and.w	r3, r3, #31
 800785a:	2101      	movs	r1, #1
 800785c:	fa01 f303 	lsl.w	r3, r1, r3
 8007860:	ea42 0103 	orr.w	r1, r2, r3
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10a      	bne.n	8007886 <HAL_ADC_ConfigChannel+0x396>
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	0e9b      	lsrs	r3, r3, #26
 8007876:	3301      	adds	r3, #1
 8007878:	f003 021f 	and.w	r2, r3, #31
 800787c:	4613      	mov	r3, r2
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	4413      	add	r3, r2
 8007882:	051b      	lsls	r3, r3, #20
 8007884:	e018      	b.n	80078b8 <HAL_ADC_ConfigChannel+0x3c8>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800788c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788e:	fa93 f3a3 	rbit	r3, r3
 8007892:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8007894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007896:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8007898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800789e:	2320      	movs	r3, #32
 80078a0:	e003      	b.n	80078aa <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80078a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a4:	fab3 f383 	clz	r3, r3
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	3301      	adds	r3, #1
 80078ac:	f003 021f 	and.w	r2, r3, #31
 80078b0:	4613      	mov	r3, r2
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	4413      	add	r3, r2
 80078b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078b8:	430b      	orrs	r3, r1
 80078ba:	e07e      	b.n	80079ba <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d107      	bne.n	80078d8 <HAL_ADC_ConfigChannel+0x3e8>
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	0e9b      	lsrs	r3, r3, #26
 80078ce:	3301      	adds	r3, #1
 80078d0:	069b      	lsls	r3, r3, #26
 80078d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80078d6:	e015      	b.n	8007904 <HAL_ADC_ConfigChannel+0x414>
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e0:	fa93 f3a3 	rbit	r3, r3
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80078ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80078f0:	2320      	movs	r3, #32
 80078f2:	e003      	b.n	80078fc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80078f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f6:	fab3 f383 	clz	r3, r3
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	3301      	adds	r3, #1
 80078fe:	069b      	lsls	r3, r3, #26
 8007900:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800790c:	2b00      	cmp	r3, #0
 800790e:	d109      	bne.n	8007924 <HAL_ADC_ConfigChannel+0x434>
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	0e9b      	lsrs	r3, r3, #26
 8007916:	3301      	adds	r3, #1
 8007918:	f003 031f 	and.w	r3, r3, #31
 800791c:	2101      	movs	r1, #1
 800791e:	fa01 f303 	lsl.w	r3, r1, r3
 8007922:	e017      	b.n	8007954 <HAL_ADC_ConfigChannel+0x464>
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	fa93 f3a3 	rbit	r3, r3
 8007930:	61bb      	str	r3, [r7, #24]
  return result;
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800793c:	2320      	movs	r3, #32
 800793e:	e003      	b.n	8007948 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	fab3 f383 	clz	r3, r3
 8007946:	b2db      	uxtb	r3, r3
 8007948:	3301      	adds	r3, #1
 800794a:	f003 031f 	and.w	r3, r3, #31
 800794e:	2101      	movs	r1, #1
 8007950:	fa01 f303 	lsl.w	r3, r1, r3
 8007954:	ea42 0103 	orr.w	r1, r2, r3
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10d      	bne.n	8007980 <HAL_ADC_ConfigChannel+0x490>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	0e9b      	lsrs	r3, r3, #26
 800796a:	3301      	adds	r3, #1
 800796c:	f003 021f 	and.w	r2, r3, #31
 8007970:	4613      	mov	r3, r2
 8007972:	005b      	lsls	r3, r3, #1
 8007974:	4413      	add	r3, r2
 8007976:	3b1e      	subs	r3, #30
 8007978:	051b      	lsls	r3, r3, #20
 800797a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800797e:	e01b      	b.n	80079b8 <HAL_ADC_ConfigChannel+0x4c8>
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	fa93 f3a3 	rbit	r3, r3
 800798c:	60fb      	str	r3, [r7, #12]
  return result;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8007998:	2320      	movs	r3, #32
 800799a:	e003      	b.n	80079a4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	fab3 f383 	clz	r3, r3
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	3301      	adds	r3, #1
 80079a6:	f003 021f 	and.w	r2, r3, #31
 80079aa:	4613      	mov	r3, r2
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	4413      	add	r3, r2
 80079b0:	3b1e      	subs	r3, #30
 80079b2:	051b      	lsls	r3, r3, #20
 80079b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80079b8:	430b      	orrs	r3, r1
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	6892      	ldr	r2, [r2, #8]
 80079be:	4619      	mov	r1, r3
 80079c0:	f7ff f9de 	bl	8006d80 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f280 80cf 	bge.w	8007b6c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a06      	ldr	r2, [pc, #24]	; (80079ec <HAL_ADC_ConfigChannel+0x4fc>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d004      	beq.n	80079e2 <HAL_ADC_ConfigChannel+0x4f2>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a04      	ldr	r2, [pc, #16]	; (80079f0 <HAL_ADC_ConfigChannel+0x500>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d10a      	bne.n	80079f8 <HAL_ADC_ConfigChannel+0x508>
 80079e2:	4b04      	ldr	r3, [pc, #16]	; (80079f4 <HAL_ADC_ConfigChannel+0x504>)
 80079e4:	e009      	b.n	80079fa <HAL_ADC_ConfigChannel+0x50a>
 80079e6:	bf00      	nop
 80079e8:	47ff0000 	.word	0x47ff0000
 80079ec:	40022000 	.word	0x40022000
 80079f0:	40022100 	.word	0x40022100
 80079f4:	40022300 	.word	0x40022300
 80079f8:	4b61      	ldr	r3, [pc, #388]	; (8007b80 <HAL_ADC_ConfigChannel+0x690>)
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff f90c 	bl	8006c18 <LL_ADC_GetCommonPathInternalCh>
 8007a00:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a5f      	ldr	r2, [pc, #380]	; (8007b84 <HAL_ADC_ConfigChannel+0x694>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d004      	beq.n	8007a16 <HAL_ADC_ConfigChannel+0x526>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a5d      	ldr	r2, [pc, #372]	; (8007b88 <HAL_ADC_ConfigChannel+0x698>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d10e      	bne.n	8007a34 <HAL_ADC_ConfigChannel+0x544>
 8007a16:	485b      	ldr	r0, [pc, #364]	; (8007b84 <HAL_ADC_ConfigChannel+0x694>)
 8007a18:	f7ff fa86 	bl	8006f28 <LL_ADC_IsEnabled>
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	485a      	ldr	r0, [pc, #360]	; (8007b88 <HAL_ADC_ConfigChannel+0x698>)
 8007a20:	f7ff fa82 	bl	8006f28 <LL_ADC_IsEnabled>
 8007a24:	4603      	mov	r3, r0
 8007a26:	4323      	orrs	r3, r4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	bf0c      	ite	eq
 8007a2c:	2301      	moveq	r3, #1
 8007a2e:	2300      	movne	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	e008      	b.n	8007a46 <HAL_ADC_ConfigChannel+0x556>
 8007a34:	4855      	ldr	r0, [pc, #340]	; (8007b8c <HAL_ADC_ConfigChannel+0x69c>)
 8007a36:	f7ff fa77 	bl	8006f28 <LL_ADC_IsEnabled>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	bf0c      	ite	eq
 8007a40:	2301      	moveq	r3, #1
 8007a42:	2300      	movne	r3, #0
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d07d      	beq.n	8007b46 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a50      	ldr	r2, [pc, #320]	; (8007b90 <HAL_ADC_ConfigChannel+0x6a0>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d130      	bne.n	8007ab6 <HAL_ADC_ConfigChannel+0x5c6>
 8007a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d12b      	bne.n	8007ab6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a4a      	ldr	r2, [pc, #296]	; (8007b8c <HAL_ADC_ConfigChannel+0x69c>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	f040 8081 	bne.w	8007b6c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a45      	ldr	r2, [pc, #276]	; (8007b84 <HAL_ADC_ConfigChannel+0x694>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d004      	beq.n	8007a7e <HAL_ADC_ConfigChannel+0x58e>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a43      	ldr	r2, [pc, #268]	; (8007b88 <HAL_ADC_ConfigChannel+0x698>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d101      	bne.n	8007a82 <HAL_ADC_ConfigChannel+0x592>
 8007a7e:	4a45      	ldr	r2, [pc, #276]	; (8007b94 <HAL_ADC_ConfigChannel+0x6a4>)
 8007a80:	e000      	b.n	8007a84 <HAL_ADC_ConfigChannel+0x594>
 8007a82:	4a3f      	ldr	r2, [pc, #252]	; (8007b80 <HAL_ADC_ConfigChannel+0x690>)
 8007a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f7ff f8b0 	bl	8006bf2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007a92:	4b41      	ldr	r3, [pc, #260]	; (8007b98 <HAL_ADC_ConfigChannel+0x6a8>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	099b      	lsrs	r3, r3, #6
 8007a98:	4a40      	ldr	r2, [pc, #256]	; (8007b9c <HAL_ADC_ConfigChannel+0x6ac>)
 8007a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a9e:	099b      	lsrs	r3, r3, #6
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	005b      	lsls	r3, r3, #1
 8007aa4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8007aa6:	e002      	b.n	8007aae <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1f9      	bne.n	8007aa8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007ab4:	e05a      	b.n	8007b6c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a39      	ldr	r2, [pc, #228]	; (8007ba0 <HAL_ADC_ConfigChannel+0x6b0>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d11e      	bne.n	8007afe <HAL_ADC_ConfigChannel+0x60e>
 8007ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d119      	bne.n	8007afe <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a2f      	ldr	r2, [pc, #188]	; (8007b8c <HAL_ADC_ConfigChannel+0x69c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d14b      	bne.n	8007b6c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a2a      	ldr	r2, [pc, #168]	; (8007b84 <HAL_ADC_ConfigChannel+0x694>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d004      	beq.n	8007ae8 <HAL_ADC_ConfigChannel+0x5f8>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a29      	ldr	r2, [pc, #164]	; (8007b88 <HAL_ADC_ConfigChannel+0x698>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d101      	bne.n	8007aec <HAL_ADC_ConfigChannel+0x5fc>
 8007ae8:	4a2a      	ldr	r2, [pc, #168]	; (8007b94 <HAL_ADC_ConfigChannel+0x6a4>)
 8007aea:	e000      	b.n	8007aee <HAL_ADC_ConfigChannel+0x5fe>
 8007aec:	4a24      	ldr	r2, [pc, #144]	; (8007b80 <HAL_ADC_ConfigChannel+0x690>)
 8007aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007af4:	4619      	mov	r1, r3
 8007af6:	4610      	mov	r0, r2
 8007af8:	f7ff f87b 	bl	8006bf2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007afc:	e036      	b.n	8007b6c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a28      	ldr	r2, [pc, #160]	; (8007ba4 <HAL_ADC_ConfigChannel+0x6b4>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d131      	bne.n	8007b6c <HAL_ADC_ConfigChannel+0x67c>
 8007b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d12c      	bne.n	8007b6c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a1d      	ldr	r2, [pc, #116]	; (8007b8c <HAL_ADC_ConfigChannel+0x69c>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d127      	bne.n	8007b6c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a18      	ldr	r2, [pc, #96]	; (8007b84 <HAL_ADC_ConfigChannel+0x694>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d004      	beq.n	8007b30 <HAL_ADC_ConfigChannel+0x640>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a17      	ldr	r2, [pc, #92]	; (8007b88 <HAL_ADC_ConfigChannel+0x698>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d101      	bne.n	8007b34 <HAL_ADC_ConfigChannel+0x644>
 8007b30:	4a18      	ldr	r2, [pc, #96]	; (8007b94 <HAL_ADC_ConfigChannel+0x6a4>)
 8007b32:	e000      	b.n	8007b36 <HAL_ADC_ConfigChannel+0x646>
 8007b34:	4a12      	ldr	r2, [pc, #72]	; (8007b80 <HAL_ADC_ConfigChannel+0x690>)
 8007b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4610      	mov	r0, r2
 8007b40:	f7ff f857 	bl	8006bf2 <LL_ADC_SetCommonPathInternalCh>
 8007b44:	e012      	b.n	8007b6c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4a:	f043 0220 	orr.w	r2, r3, #32
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007b58:	e008      	b.n	8007b6c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5e:	f043 0220 	orr.w	r2, r3, #32
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007b74:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3784      	adds	r7, #132	; 0x84
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd90      	pop	{r4, r7, pc}
 8007b80:	58026300 	.word	0x58026300
 8007b84:	40022000 	.word	0x40022000
 8007b88:	40022100 	.word	0x40022100
 8007b8c:	58026000 	.word	0x58026000
 8007b90:	cb840000 	.word	0xcb840000
 8007b94:	40022300 	.word	0x40022300
 8007b98:	240000e0 	.word	0x240000e0
 8007b9c:	053e2d63 	.word	0x053e2d63
 8007ba0:	c7520000 	.word	0xc7520000
 8007ba4:	cfb80000 	.word	0xcfb80000

08007ba8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7ff f9b7 	bl	8006f28 <LL_ADC_IsEnabled>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d16e      	bne.n	8007c9e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689a      	ldr	r2, [r3, #8]
 8007bc6:	4b38      	ldr	r3, [pc, #224]	; (8007ca8 <ADC_Enable+0x100>)
 8007bc8:	4013      	ands	r3, r2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00d      	beq.n	8007bea <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd2:	f043 0210 	orr.w	r2, r3, #16
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bde:	f043 0201 	orr.w	r2, r3, #1
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e05a      	b.n	8007ca0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7ff f972 	bl	8006ed8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007bf4:	f7fe ffbc 	bl	8006b70 <HAL_GetTick>
 8007bf8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a2b      	ldr	r2, [pc, #172]	; (8007cac <ADC_Enable+0x104>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d004      	beq.n	8007c0e <ADC_Enable+0x66>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a29      	ldr	r2, [pc, #164]	; (8007cb0 <ADC_Enable+0x108>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d101      	bne.n	8007c12 <ADC_Enable+0x6a>
 8007c0e:	4b29      	ldr	r3, [pc, #164]	; (8007cb4 <ADC_Enable+0x10c>)
 8007c10:	e000      	b.n	8007c14 <ADC_Enable+0x6c>
 8007c12:	4b29      	ldr	r3, [pc, #164]	; (8007cb8 <ADC_Enable+0x110>)
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7ff f903 	bl	8006e20 <LL_ADC_GetMultimode>
 8007c1a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a23      	ldr	r2, [pc, #140]	; (8007cb0 <ADC_Enable+0x108>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d002      	beq.n	8007c2c <ADC_Enable+0x84>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	e000      	b.n	8007c2e <ADC_Enable+0x86>
 8007c2c:	4b1f      	ldr	r3, [pc, #124]	; (8007cac <ADC_Enable+0x104>)
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	6812      	ldr	r2, [r2, #0]
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d02c      	beq.n	8007c90 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d130      	bne.n	8007c9e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007c3c:	e028      	b.n	8007c90 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7ff f970 	bl	8006f28 <LL_ADC_IsEnabled>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d104      	bne.n	8007c58 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff f940 	bl	8006ed8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007c58:	f7fe ff8a 	bl	8006b70 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d914      	bls.n	8007c90 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d00d      	beq.n	8007c90 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c78:	f043 0210 	orr.w	r2, r3, #16
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c84:	f043 0201 	orr.w	r2, r3, #1
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e007      	b.n	8007ca0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d1cf      	bne.n	8007c3e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	8000003f 	.word	0x8000003f
 8007cac:	40022000 	.word	0x40022000
 8007cb0:	40022100 	.word	0x40022100
 8007cb4:	40022300 	.word	0x40022300
 8007cb8:	58026300 	.word	0x58026300

08007cbc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7ff f940 	bl	8006f4e <LL_ADC_IsDisableOngoing>
 8007cce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7ff f927 	bl	8006f28 <LL_ADC_IsEnabled>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d047      	beq.n	8007d70 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d144      	bne.n	8007d70 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f003 030d 	and.w	r3, r3, #13
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d10c      	bne.n	8007d0e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7ff f901 	bl	8006f00 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2203      	movs	r2, #3
 8007d04:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007d06:	f7fe ff33 	bl	8006b70 <HAL_GetTick>
 8007d0a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007d0c:	e029      	b.n	8007d62 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d12:	f043 0210 	orr.w	r2, r3, #16
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d1e:	f043 0201 	orr.w	r2, r3, #1
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e023      	b.n	8007d72 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007d2a:	f7fe ff21 	bl	8006b70 <HAL_GetTick>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d914      	bls.n	8007d62 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00d      	beq.n	8007d62 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4a:	f043 0210 	orr.w	r2, r3, #16
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d56:	f043 0201 	orr.w	r2, r3, #1
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e007      	b.n	8007d72 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1dc      	bne.n	8007d2a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d14b      	bne.n	8007e2c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0308 	and.w	r3, r3, #8
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d021      	beq.n	8007df2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fe ff92 	bl	8006cdc <LL_ADC_REG_IsTriggerSourceSWStart>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d032      	beq.n	8007e24 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d12b      	bne.n	8007e24 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d11f      	bne.n	8007e24 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de8:	f043 0201 	orr.w	r2, r3, #1
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	655a      	str	r2, [r3, #84]	; 0x54
 8007df0:	e018      	b.n	8007e24 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f003 0303 	and.w	r3, r3, #3
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d111      	bne.n	8007e24 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d105      	bne.n	8007e24 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1c:	f043 0201 	orr.w	r2, r3, #1
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f7ff fb45 	bl	80074b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007e2a:	e00e      	b.n	8007e4a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e30:	f003 0310 	and.w	r3, r3, #16
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d003      	beq.n	8007e40 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f7ff fb4f 	bl	80074dc <HAL_ADC_ErrorCallback>
}
 8007e3e:	e004      	b.n	8007e4a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	4798      	blx	r3
}
 8007e4a:	bf00      	nop
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f7ff fb31 	bl	80074c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e66:	bf00      	nop
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8c:	f043 0204 	orr.w	r2, r3, #4
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f7ff fb21 	bl	80074dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e9a:	bf00      	nop
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a7a      	ldr	r2, [pc, #488]	; (800809c <ADC_ConfigureBoostMode+0x1f8>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d004      	beq.n	8007ec0 <ADC_ConfigureBoostMode+0x1c>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a79      	ldr	r2, [pc, #484]	; (80080a0 <ADC_ConfigureBoostMode+0x1fc>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d109      	bne.n	8007ed4 <ADC_ConfigureBoostMode+0x30>
 8007ec0:	4b78      	ldr	r3, [pc, #480]	; (80080a4 <ADC_ConfigureBoostMode+0x200>)
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	bf14      	ite	ne
 8007ecc:	2301      	movne	r3, #1
 8007ece:	2300      	moveq	r3, #0
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	e008      	b.n	8007ee6 <ADC_ConfigureBoostMode+0x42>
 8007ed4:	4b74      	ldr	r3, [pc, #464]	; (80080a8 <ADC_ConfigureBoostMode+0x204>)
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	bf14      	ite	ne
 8007ee0:	2301      	movne	r3, #1
 8007ee2:	2300      	moveq	r3, #0
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d01c      	beq.n	8007f24 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8007eea:	f008 f941 	bl	8010170 <HAL_RCC_GetHCLKFreq>
 8007eee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ef8:	d010      	beq.n	8007f1c <ADC_ConfigureBoostMode+0x78>
 8007efa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007efe:	d873      	bhi.n	8007fe8 <ADC_ConfigureBoostMode+0x144>
 8007f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f04:	d002      	beq.n	8007f0c <ADC_ConfigureBoostMode+0x68>
 8007f06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f0a:	d16d      	bne.n	8007fe8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	0c1b      	lsrs	r3, r3, #16
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f18:	60fb      	str	r3, [r7, #12]
        break;
 8007f1a:	e068      	b.n	8007fee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	089b      	lsrs	r3, r3, #2
 8007f20:	60fb      	str	r3, [r7, #12]
        break;
 8007f22:	e064      	b.n	8007fee <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8007f24:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007f28:	f04f 0100 	mov.w	r1, #0
 8007f2c:	f009 fbc8 	bl	80116c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f30:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007f3a:	d051      	beq.n	8007fe0 <ADC_ConfigureBoostMode+0x13c>
 8007f3c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007f40:	d854      	bhi.n	8007fec <ADC_ConfigureBoostMode+0x148>
 8007f42:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007f46:	d047      	beq.n	8007fd8 <ADC_ConfigureBoostMode+0x134>
 8007f48:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007f4c:	d84e      	bhi.n	8007fec <ADC_ConfigureBoostMode+0x148>
 8007f4e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007f52:	d03d      	beq.n	8007fd0 <ADC_ConfigureBoostMode+0x12c>
 8007f54:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007f58:	d848      	bhi.n	8007fec <ADC_ConfigureBoostMode+0x148>
 8007f5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f5e:	d033      	beq.n	8007fc8 <ADC_ConfigureBoostMode+0x124>
 8007f60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f64:	d842      	bhi.n	8007fec <ADC_ConfigureBoostMode+0x148>
 8007f66:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007f6a:	d029      	beq.n	8007fc0 <ADC_ConfigureBoostMode+0x11c>
 8007f6c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007f70:	d83c      	bhi.n	8007fec <ADC_ConfigureBoostMode+0x148>
 8007f72:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007f76:	d01a      	beq.n	8007fae <ADC_ConfigureBoostMode+0x10a>
 8007f78:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007f7c:	d836      	bhi.n	8007fec <ADC_ConfigureBoostMode+0x148>
 8007f7e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007f82:	d014      	beq.n	8007fae <ADC_ConfigureBoostMode+0x10a>
 8007f84:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007f88:	d830      	bhi.n	8007fec <ADC_ConfigureBoostMode+0x148>
 8007f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f8e:	d00e      	beq.n	8007fae <ADC_ConfigureBoostMode+0x10a>
 8007f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f94:	d82a      	bhi.n	8007fec <ADC_ConfigureBoostMode+0x148>
 8007f96:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007f9a:	d008      	beq.n	8007fae <ADC_ConfigureBoostMode+0x10a>
 8007f9c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007fa0:	d824      	bhi.n	8007fec <ADC_ConfigureBoostMode+0x148>
 8007fa2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fa6:	d002      	beq.n	8007fae <ADC_ConfigureBoostMode+0x10a>
 8007fa8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007fac:	d11e      	bne.n	8007fec <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	0c9b      	lsrs	r3, r3, #18
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fbc:	60fb      	str	r3, [r7, #12]
        break;
 8007fbe:	e016      	b.n	8007fee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	091b      	lsrs	r3, r3, #4
 8007fc4:	60fb      	str	r3, [r7, #12]
        break;
 8007fc6:	e012      	b.n	8007fee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	095b      	lsrs	r3, r3, #5
 8007fcc:	60fb      	str	r3, [r7, #12]
        break;
 8007fce:	e00e      	b.n	8007fee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	099b      	lsrs	r3, r3, #6
 8007fd4:	60fb      	str	r3, [r7, #12]
        break;
 8007fd6:	e00a      	b.n	8007fee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	09db      	lsrs	r3, r3, #7
 8007fdc:	60fb      	str	r3, [r7, #12]
        break;
 8007fde:	e006      	b.n	8007fee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	0a1b      	lsrs	r3, r3, #8
 8007fe4:	60fb      	str	r3, [r7, #12]
        break;
 8007fe6:	e002      	b.n	8007fee <ADC_ConfigureBoostMode+0x14a>
        break;
 8007fe8:	bf00      	nop
 8007fea:	e000      	b.n	8007fee <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8007fec:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8007fee:	f7fe fdcb 	bl	8006b88 <HAL_GetREVID>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	f241 0203 	movw	r2, #4099	; 0x1003
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d815      	bhi.n	8008028 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4a2b      	ldr	r2, [pc, #172]	; (80080ac <ADC_ConfigureBoostMode+0x208>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d908      	bls.n	8008016 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689a      	ldr	r2, [r3, #8]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008012:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8008014:	e03e      	b.n	8008094 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008024:	609a      	str	r2, [r3, #8]
}
 8008026:	e035      	b.n	8008094 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	085b      	lsrs	r3, r3, #1
 800802c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	4a1f      	ldr	r2, [pc, #124]	; (80080b0 <ADC_ConfigureBoostMode+0x20c>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d808      	bhi.n	8008048 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	689a      	ldr	r2, [r3, #8]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008044:	609a      	str	r2, [r3, #8]
}
 8008046:	e025      	b.n	8008094 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4a1a      	ldr	r2, [pc, #104]	; (80080b4 <ADC_ConfigureBoostMode+0x210>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d80a      	bhi.n	8008066 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008062:	609a      	str	r2, [r3, #8]
}
 8008064:	e016      	b.n	8008094 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	4a13      	ldr	r2, [pc, #76]	; (80080b8 <ADC_ConfigureBoostMode+0x214>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d80a      	bhi.n	8008084 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008080:	609a      	str	r2, [r3, #8]
}
 8008082:	e007      	b.n	8008094 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	689a      	ldr	r2, [r3, #8]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008092:	609a      	str	r2, [r3, #8]
}
 8008094:	bf00      	nop
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	40022000 	.word	0x40022000
 80080a0:	40022100 	.word	0x40022100
 80080a4:	40022300 	.word	0x40022300
 80080a8:	58026300 	.word	0x58026300
 80080ac:	01312d00 	.word	0x01312d00
 80080b0:	005f5e10 	.word	0x005f5e10
 80080b4:	00bebc20 	.word	0x00bebc20
 80080b8:	017d7840 	.word	0x017d7840

080080bc <LL_ADC_IsEnabled>:
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d101      	bne.n	80080d4 <LL_ADC_IsEnabled+0x18>
 80080d0:	2301      	movs	r3, #1
 80080d2:	e000      	b.n	80080d6 <LL_ADC_IsEnabled+0x1a>
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
	...

080080e4 <LL_ADC_StartCalibration>:
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	689a      	ldr	r2, [r3, #8]
 80080f4:	4b09      	ldr	r3, [pc, #36]	; (800811c <LL_ADC_StartCalibration+0x38>)
 80080f6:	4013      	ands	r3, r2
 80080f8:	68ba      	ldr	r2, [r7, #8]
 80080fa:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008104:	430a      	orrs	r2, r1
 8008106:	4313      	orrs	r3, r2
 8008108:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	609a      	str	r2, [r3, #8]
}
 8008110:	bf00      	nop
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	3ffeffc0 	.word	0x3ffeffc0

08008120 <LL_ADC_IsCalibrationOnGoing>:
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008134:	d101      	bne.n	800813a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008136:	2301      	movs	r3, #1
 8008138:	e000      	b.n	800813c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <LL_ADC_REG_IsConversionOngoing>:
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	f003 0304 	and.w	r3, r3, #4
 8008158:	2b04      	cmp	r3, #4
 800815a:	d101      	bne.n	8008160 <LL_ADC_REG_IsConversionOngoing+0x18>
 800815c:	2301      	movs	r3, #1
 800815e:	e000      	b.n	8008162 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
	...

08008170 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800817c:	2300      	movs	r3, #0
 800817e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008186:	2b01      	cmp	r3, #1
 8008188:	d101      	bne.n	800818e <HAL_ADCEx_Calibration_Start+0x1e>
 800818a:	2302      	movs	r3, #2
 800818c:	e04c      	b.n	8008228 <HAL_ADCEx_Calibration_Start+0xb8>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f7ff fd90 	bl	8007cbc <ADC_Disable>
 800819c:	4603      	mov	r3, r0
 800819e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d135      	bne.n	8008212 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081aa:	4b21      	ldr	r3, [pc, #132]	; (8008230 <HAL_ADCEx_Calibration_Start+0xc0>)
 80081ac:	4013      	ands	r3, r2
 80081ae:	f043 0202 	orr.w	r2, r3, #2
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	68b9      	ldr	r1, [r7, #8]
 80081be:	4618      	mov	r0, r3
 80081c0:	f7ff ff90 	bl	80080e4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80081c4:	e014      	b.n	80081f0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	3301      	adds	r3, #1
 80081ca:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	4a19      	ldr	r2, [pc, #100]	; (8008234 <HAL_ADCEx_Calibration_Start+0xc4>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d30d      	bcc.n	80081f0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d8:	f023 0312 	bic.w	r3, r3, #18
 80081dc:	f043 0210 	orr.w	r2, r3, #16
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e01b      	b.n	8008228 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7ff ff93 	bl	8008120 <LL_ADC_IsCalibrationOnGoing>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e2      	bne.n	80081c6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008204:	f023 0303 	bic.w	r3, r3, #3
 8008208:	f043 0201 	orr.w	r2, r3, #1
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	655a      	str	r2, [r3, #84]	; 0x54
 8008210:	e005      	b.n	800821e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008216:	f043 0210 	orr.w	r2, r3, #16
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008226:	7dfb      	ldrb	r3, [r7, #23]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	ffffeefd 	.word	0xffffeefd
 8008234:	25c3f800 	.word	0x25c3f800

08008238 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008238:	b590      	push	{r4, r7, lr}
 800823a:	b09f      	sub	sp, #124	; 0x7c
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800824e:	2b01      	cmp	r3, #1
 8008250:	d101      	bne.n	8008256 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008252:	2302      	movs	r3, #2
 8008254:	e0be      	b.n	80083d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800825e:	2300      	movs	r3, #0
 8008260:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008262:	2300      	movs	r3, #0
 8008264:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a5c      	ldr	r2, [pc, #368]	; (80083dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d102      	bne.n	8008276 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008270:	4b5b      	ldr	r3, [pc, #364]	; (80083e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008272:	60bb      	str	r3, [r7, #8]
 8008274:	e001      	b.n	800827a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008276:	2300      	movs	r3, #0
 8008278:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10b      	bne.n	8008298 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008284:	f043 0220 	orr.w	r2, r3, #32
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e09d      	b.n	80083d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff ff54 	bl	8008148 <LL_ADC_REG_IsConversionOngoing>
 80082a0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7ff ff4e 	bl	8008148 <LL_ADC_REG_IsConversionOngoing>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d17f      	bne.n	80083b2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80082b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d17c      	bne.n	80083b2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a47      	ldr	r2, [pc, #284]	; (80083dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d004      	beq.n	80082cc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a46      	ldr	r2, [pc, #280]	; (80083e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d101      	bne.n	80082d0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80082cc:	4b45      	ldr	r3, [pc, #276]	; (80083e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80082ce:	e000      	b.n	80082d2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80082d0:	4b45      	ldr	r3, [pc, #276]	; (80083e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80082d2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d039      	beq.n	8008350 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80082dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	431a      	orrs	r2, r3
 80082ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ec:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a3a      	ldr	r2, [pc, #232]	; (80083dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d004      	beq.n	8008302 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a38      	ldr	r2, [pc, #224]	; (80083e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d10e      	bne.n	8008320 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8008302:	4836      	ldr	r0, [pc, #216]	; (80083dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008304:	f7ff feda 	bl	80080bc <LL_ADC_IsEnabled>
 8008308:	4604      	mov	r4, r0
 800830a:	4835      	ldr	r0, [pc, #212]	; (80083e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800830c:	f7ff fed6 	bl	80080bc <LL_ADC_IsEnabled>
 8008310:	4603      	mov	r3, r0
 8008312:	4323      	orrs	r3, r4
 8008314:	2b00      	cmp	r3, #0
 8008316:	bf0c      	ite	eq
 8008318:	2301      	moveq	r3, #1
 800831a:	2300      	movne	r3, #0
 800831c:	b2db      	uxtb	r3, r3
 800831e:	e008      	b.n	8008332 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8008320:	4832      	ldr	r0, [pc, #200]	; (80083ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008322:	f7ff fecb 	bl	80080bc <LL_ADC_IsEnabled>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	bf0c      	ite	eq
 800832c:	2301      	moveq	r3, #1
 800832e:	2300      	movne	r3, #0
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d047      	beq.n	80083c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008338:	689a      	ldr	r2, [r3, #8]
 800833a:	4b2d      	ldr	r3, [pc, #180]	; (80083f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800833c:	4013      	ands	r3, r2
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	6811      	ldr	r1, [r2, #0]
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	6892      	ldr	r2, [r2, #8]
 8008346:	430a      	orrs	r2, r1
 8008348:	431a      	orrs	r2, r3
 800834a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800834c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800834e:	e03a      	b.n	80083c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800835a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a1e      	ldr	r2, [pc, #120]	; (80083dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d004      	beq.n	8008370 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a1d      	ldr	r2, [pc, #116]	; (80083e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d10e      	bne.n	800838e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8008370:	481a      	ldr	r0, [pc, #104]	; (80083dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008372:	f7ff fea3 	bl	80080bc <LL_ADC_IsEnabled>
 8008376:	4604      	mov	r4, r0
 8008378:	4819      	ldr	r0, [pc, #100]	; (80083e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800837a:	f7ff fe9f 	bl	80080bc <LL_ADC_IsEnabled>
 800837e:	4603      	mov	r3, r0
 8008380:	4323      	orrs	r3, r4
 8008382:	2b00      	cmp	r3, #0
 8008384:	bf0c      	ite	eq
 8008386:	2301      	moveq	r3, #1
 8008388:	2300      	movne	r3, #0
 800838a:	b2db      	uxtb	r3, r3
 800838c:	e008      	b.n	80083a0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800838e:	4817      	ldr	r0, [pc, #92]	; (80083ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008390:	f7ff fe94 	bl	80080bc <LL_ADC_IsEnabled>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	bf0c      	ite	eq
 800839a:	2301      	moveq	r3, #1
 800839c:	2300      	movne	r3, #0
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d010      	beq.n	80083c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80083a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	4b11      	ldr	r3, [pc, #68]	; (80083f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80083aa:	4013      	ands	r3, r2
 80083ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083ae:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80083b0:	e009      	b.n	80083c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b6:	f043 0220 	orr.w	r2, r3, #32
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80083c4:	e000      	b.n	80083c8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80083c6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80083d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	377c      	adds	r7, #124	; 0x7c
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd90      	pop	{r4, r7, pc}
 80083dc:	40022000 	.word	0x40022000
 80083e0:	40022100 	.word	0x40022100
 80083e4:	40022300 	.word	0x40022300
 80083e8:	58026300 	.word	0x58026300
 80083ec:	58026000 	.word	0x58026000
 80083f0:	fffff0e0 	.word	0xfffff0e0

080083f4 <__NVIC_SetPriorityGrouping>:
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008404:	4b0b      	ldr	r3, [pc, #44]	; (8008434 <__NVIC_SetPriorityGrouping+0x40>)
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008410:	4013      	ands	r3, r2
 8008412:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800841c:	4b06      	ldr	r3, [pc, #24]	; (8008438 <__NVIC_SetPriorityGrouping+0x44>)
 800841e:	4313      	orrs	r3, r2
 8008420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008422:	4a04      	ldr	r2, [pc, #16]	; (8008434 <__NVIC_SetPriorityGrouping+0x40>)
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	60d3      	str	r3, [r2, #12]
}
 8008428:	bf00      	nop
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	e000ed00 	.word	0xe000ed00
 8008438:	05fa0000 	.word	0x05fa0000

0800843c <__NVIC_GetPriorityGrouping>:
{
 800843c:	b480      	push	{r7}
 800843e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008440:	4b04      	ldr	r3, [pc, #16]	; (8008454 <__NVIC_GetPriorityGrouping+0x18>)
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	0a1b      	lsrs	r3, r3, #8
 8008446:	f003 0307 	and.w	r3, r3, #7
}
 800844a:	4618      	mov	r0, r3
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	e000ed00 	.word	0xe000ed00

08008458 <__NVIC_EnableIRQ>:
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	4603      	mov	r3, r0
 8008460:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008466:	2b00      	cmp	r3, #0
 8008468:	db0b      	blt.n	8008482 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800846a:	88fb      	ldrh	r3, [r7, #6]
 800846c:	f003 021f 	and.w	r2, r3, #31
 8008470:	4907      	ldr	r1, [pc, #28]	; (8008490 <__NVIC_EnableIRQ+0x38>)
 8008472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008476:	095b      	lsrs	r3, r3, #5
 8008478:	2001      	movs	r0, #1
 800847a:	fa00 f202 	lsl.w	r2, r0, r2
 800847e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	e000e100 	.word	0xe000e100

08008494 <__NVIC_SetPriority>:
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	4603      	mov	r3, r0
 800849c:	6039      	str	r1, [r7, #0]
 800849e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80084a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	db0a      	blt.n	80084be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	490c      	ldr	r1, [pc, #48]	; (80084e0 <__NVIC_SetPriority+0x4c>)
 80084ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80084b2:	0112      	lsls	r2, r2, #4
 80084b4:	b2d2      	uxtb	r2, r2
 80084b6:	440b      	add	r3, r1
 80084b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80084bc:	e00a      	b.n	80084d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	4908      	ldr	r1, [pc, #32]	; (80084e4 <__NVIC_SetPriority+0x50>)
 80084c4:	88fb      	ldrh	r3, [r7, #6]
 80084c6:	f003 030f 	and.w	r3, r3, #15
 80084ca:	3b04      	subs	r3, #4
 80084cc:	0112      	lsls	r2, r2, #4
 80084ce:	b2d2      	uxtb	r2, r2
 80084d0:	440b      	add	r3, r1
 80084d2:	761a      	strb	r2, [r3, #24]
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	e000e100 	.word	0xe000e100
 80084e4:	e000ed00 	.word	0xe000ed00

080084e8 <NVIC_EncodePriority>:
{
 80084e8:	b480      	push	{r7}
 80084ea:	b089      	sub	sp, #36	; 0x24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	f1c3 0307 	rsb	r3, r3, #7
 8008502:	2b04      	cmp	r3, #4
 8008504:	bf28      	it	cs
 8008506:	2304      	movcs	r3, #4
 8008508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	3304      	adds	r3, #4
 800850e:	2b06      	cmp	r3, #6
 8008510:	d902      	bls.n	8008518 <NVIC_EncodePriority+0x30>
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	3b03      	subs	r3, #3
 8008516:	e000      	b.n	800851a <NVIC_EncodePriority+0x32>
 8008518:	2300      	movs	r3, #0
 800851a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800851c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	fa02 f303 	lsl.w	r3, r2, r3
 8008526:	43da      	mvns	r2, r3
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	401a      	ands	r2, r3
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008530:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	fa01 f303 	lsl.w	r3, r1, r3
 800853a:	43d9      	mvns	r1, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008540:	4313      	orrs	r3, r2
}
 8008542:	4618      	mov	r0, r3
 8008544:	3724      	adds	r7, #36	; 0x24
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b082      	sub	sp, #8
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff ff4c 	bl	80083f4 <__NVIC_SetPriorityGrouping>
}
 800855c:	bf00      	nop
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	4603      	mov	r3, r0
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
 8008570:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008572:	f7ff ff63 	bl	800843c <__NVIC_GetPriorityGrouping>
 8008576:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	68b9      	ldr	r1, [r7, #8]
 800857c:	6978      	ldr	r0, [r7, #20]
 800857e:	f7ff ffb3 	bl	80084e8 <NVIC_EncodePriority>
 8008582:	4602      	mov	r2, r0
 8008584:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008588:	4611      	mov	r1, r2
 800858a:	4618      	mov	r0, r3
 800858c:	f7ff ff82 	bl	8008494 <__NVIC_SetPriority>
}
 8008590:	bf00      	nop
 8008592:	3718      	adds	r7, #24
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	4603      	mov	r3, r0
 80085a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80085a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff ff56 	bl	8008458 <__NVIC_EnableIRQ>
}
 80085ac:	bf00      	nop
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e014      	b.n	80085f0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	791b      	ldrb	r3, [r3, #4]
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d105      	bne.n	80085dc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7f8 fb04 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2202      	movs	r2, #2
 80085e0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e046      	b.n	800869a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	795b      	ldrb	r3, [r3, #5]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d101      	bne.n	8008618 <HAL_DAC_Start+0x20>
 8008614:	2302      	movs	r3, #2
 8008616:	e040      	b.n	800869a <HAL_DAC_Start+0xa2>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2202      	movs	r2, #2
 8008622:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	6819      	ldr	r1, [r3, #0]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	f003 0310 	and.w	r3, r3, #16
 8008630:	2201      	movs	r2, #1
 8008632:	409a      	lsls	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	430a      	orrs	r2, r1
 800863a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10f      	bne.n	8008662 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800864c:	2b02      	cmp	r3, #2
 800864e:	d11d      	bne.n	800868c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f042 0201 	orr.w	r2, r2, #1
 800865e:	605a      	str	r2, [r3, #4]
 8008660:	e014      	b.n	800868c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	f003 0310 	and.w	r3, r3, #16
 8008672:	2102      	movs	r1, #2
 8008674:	fa01 f303 	lsl.w	r3, r1, r3
 8008678:	429a      	cmp	r2, r3
 800867a:	d107      	bne.n	800868c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f042 0202 	orr.w	r2, r2, #2
 800868a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
	...

080086a8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e0a2      	b.n	8008806 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	795b      	ldrb	r3, [r3, #5]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d101      	bne.n	80086cc <HAL_DAC_Start_DMA+0x24>
 80086c8:	2302      	movs	r3, #2
 80086ca:	e09c      	b.n	8008806 <HAL_DAC_Start_DMA+0x15e>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2201      	movs	r2, #1
 80086d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2202      	movs	r2, #2
 80086d6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d129      	bne.n	8008732 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	4a4b      	ldr	r2, [pc, #300]	; (8008810 <HAL_DAC_Start_DMA+0x168>)
 80086e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	4a4a      	ldr	r2, [pc, #296]	; (8008814 <HAL_DAC_Start_DMA+0x16c>)
 80086ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	4a49      	ldr	r2, [pc, #292]	; (8008818 <HAL_DAC_Start_DMA+0x170>)
 80086f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008704:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <HAL_DAC_Start_DMA+0x6c>
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	2b04      	cmp	r3, #4
 8008710:	d005      	beq.n	800871e <HAL_DAC_Start_DMA+0x76>
 8008712:	e009      	b.n	8008728 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3308      	adds	r3, #8
 800871a:	613b      	str	r3, [r7, #16]
        break;
 800871c:	e033      	b.n	8008786 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	330c      	adds	r3, #12
 8008724:	613b      	str	r3, [r7, #16]
        break;
 8008726:	e02e      	b.n	8008786 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3310      	adds	r3, #16
 800872e:	613b      	str	r3, [r7, #16]
        break;
 8008730:	e029      	b.n	8008786 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	4a39      	ldr	r2, [pc, #228]	; (800881c <HAL_DAC_Start_DMA+0x174>)
 8008738:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	4a38      	ldr	r2, [pc, #224]	; (8008820 <HAL_DAC_Start_DMA+0x178>)
 8008740:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	4a37      	ldr	r2, [pc, #220]	; (8008824 <HAL_DAC_Start_DMA+0x17c>)
 8008748:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008758:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d003      	beq.n	8008768 <HAL_DAC_Start_DMA+0xc0>
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	2b04      	cmp	r3, #4
 8008764:	d005      	beq.n	8008772 <HAL_DAC_Start_DMA+0xca>
 8008766:	e009      	b.n	800877c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3314      	adds	r3, #20
 800876e:	613b      	str	r3, [r7, #16]
        break;
 8008770:	e009      	b.n	8008786 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3318      	adds	r3, #24
 8008778:	613b      	str	r3, [r7, #16]
        break;
 800877a:	e004      	b.n	8008786 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	331c      	adds	r3, #28
 8008782:	613b      	str	r3, [r7, #16]
        break;
 8008784:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d111      	bne.n	80087b0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800879a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6898      	ldr	r0, [r3, #8]
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	f000 fe67 	bl	8009478 <HAL_DMA_Start_IT>
 80087aa:	4603      	mov	r3, r0
 80087ac:	75fb      	strb	r3, [r7, #23]
 80087ae:	e010      	b.n	80087d2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80087be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	68d8      	ldr	r0, [r3, #12]
 80087c4:	6879      	ldr	r1, [r7, #4]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	f000 fe55 	bl	8009478 <HAL_DMA_Start_IT>
 80087ce:	4603      	mov	r3, r0
 80087d0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80087d8:	7dfb      	ldrb	r3, [r7, #23]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10c      	bne.n	80087f8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6819      	ldr	r1, [r3, #0]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f003 0310 	and.w	r3, r3, #16
 80087ea:	2201      	movs	r2, #1
 80087ec:	409a      	lsls	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	430a      	orrs	r2, r1
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	e005      	b.n	8008804 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	f043 0204 	orr.w	r2, r3, #4
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8008804:	7dfb      	ldrb	r3, [r7, #23]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	08008c99 	.word	0x08008c99
 8008814:	08008cbb 	.word	0x08008cbb
 8008818:	08008cd7 	.word	0x08008cd7
 800881c:	08008d55 	.word	0x08008d55
 8008820:	08008d77 	.word	0x08008d77
 8008824:	08008d93 	.word	0x08008d93

08008828 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d101      	bne.n	800883c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e03e      	b.n	80088ba <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6819      	ldr	r1, [r3, #0]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	f003 0310 	and.w	r3, r3, #16
 8008848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800884c:	fa02 f303 	lsl.w	r3, r2, r3
 8008850:	43da      	mvns	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	400a      	ands	r2, r1
 8008858:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	6819      	ldr	r1, [r3, #0]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	f003 0310 	and.w	r3, r3, #16
 8008866:	2201      	movs	r2, #1
 8008868:	fa02 f303 	lsl.w	r3, r2, r3
 800886c:	43da      	mvns	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	400a      	ands	r2, r1
 8008874:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10d      	bne.n	8008898 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	4618      	mov	r0, r3
 8008882:	f001 f863 	bl	800994c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	e00c      	b.n	80088b2 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	4618      	mov	r0, r3
 800889e:	f001 f855 	bl	800994c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80088b0:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d01d      	beq.n	8008920 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d018      	beq.n	8008920 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2204      	movs	r2, #4
 80088f2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	f043 0201 	orr.w	r2, r3, #1
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008908:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008918:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f86f 	bl	80089fe <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d01d      	beq.n	8008966 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d018      	beq.n	8008966 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2204      	movs	r2, #4
 8008938:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	f043 0202 	orr.w	r2, r3, #2
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800894e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800895e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f9ed 	bl	8008d40 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8008966:	bf00      	nop
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800896e:	b480      	push	{r7}
 8008970:	b087      	sub	sp, #28
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	607a      	str	r2, [r7, #4]
 800897a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800897c:	2300      	movs	r3, #0
 800897e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e015      	b.n	80089b6 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d105      	bne.n	80089a2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4413      	add	r3, r2
 800899c:	3308      	adds	r3, #8
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	e004      	b.n	80089ac <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80089a2:	697a      	ldr	r2, [r7, #20]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4413      	add	r3, r2
 80089a8:	3314      	adds	r3, #20
 80089aa:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	461a      	mov	r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	371c      	adds	r7, #28
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b083      	sub	sp, #12
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80089ca:	bf00      	nop
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80089de:	bf00      	nop
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b083      	sub	sp, #12
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80089f2:	bf00      	nop
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8008a06:	bf00      	nop
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
	...

08008a14 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08a      	sub	sp, #40	; 0x28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d002      	beq.n	8008a32 <HAL_DAC_ConfigChannel+0x1e>
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e12a      	b.n	8008c8c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	795b      	ldrb	r3, [r3, #5]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d101      	bne.n	8008a42 <HAL_DAC_ConfigChannel+0x2e>
 8008a3e:	2302      	movs	r3, #2
 8008a40:	e124      	b.n	8008c8c <HAL_DAC_ConfigChannel+0x278>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2201      	movs	r2, #1
 8008a46:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b04      	cmp	r3, #4
 8008a54:	d17a      	bne.n	8008b4c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008a56:	f7fe f88b 	bl	8006b70 <HAL_GetTick>
 8008a5a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d13d      	bne.n	8008ade <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008a62:	e018      	b.n	8008a96 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008a64:	f7fe f884 	bl	8006b70 <HAL_GetTick>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d911      	bls.n	8008a96 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a78:	4b86      	ldr	r3, [pc, #536]	; (8008c94 <HAL_DAC_ConfigChannel+0x280>)
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00a      	beq.n	8008a96 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	f043 0208 	orr.w	r2, r3, #8
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2203      	movs	r2, #3
 8008a90:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e0fa      	b.n	8008c8c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a9c:	4b7d      	ldr	r3, [pc, #500]	; (8008c94 <HAL_DAC_ConfigChannel+0x280>)
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1df      	bne.n	8008a64 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	6992      	ldr	r2, [r2, #24]
 8008aac:	641a      	str	r2, [r3, #64]	; 0x40
 8008aae:	e020      	b.n	8008af2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008ab0:	f7fe f85e 	bl	8006b70 <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d90f      	bls.n	8008ade <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	da0a      	bge.n	8008ade <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	f043 0208 	orr.w	r2, r3, #8
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2203      	movs	r2, #3
 8008ad8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e0d6      	b.n	8008c8c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	dbe3      	blt.n	8008ab0 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	6992      	ldr	r2, [r2, #24]
 8008af0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f003 0310 	and.w	r3, r3, #16
 8008afe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008b02:	fa01 f303 	lsl.w	r3, r1, r3
 8008b06:	43db      	mvns	r3, r3
 8008b08:	ea02 0103 	and.w	r1, r2, r3
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	69da      	ldr	r2, [r3, #28]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f003 0310 	and.w	r3, r3, #16
 8008b16:	409a      	lsls	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	430a      	orrs	r2, r1
 8008b1e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f003 0310 	and.w	r3, r3, #16
 8008b2c:	21ff      	movs	r1, #255	; 0xff
 8008b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b32:	43db      	mvns	r3, r3
 8008b34:	ea02 0103 	and.w	r1, r2, r3
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	6a1a      	ldr	r2, [r3, #32]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f003 0310 	and.w	r3, r3, #16
 8008b42:	409a      	lsls	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d11d      	bne.n	8008b90 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f003 0310 	and.w	r3, r3, #16
 8008b62:	221f      	movs	r2, #31
 8008b64:	fa02 f303 	lsl.w	r3, r2, r3
 8008b68:	43db      	mvns	r3, r3
 8008b6a:	69ba      	ldr	r2, [r7, #24]
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	695b      	ldr	r3, [r3, #20]
 8008b74:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f003 0310 	and.w	r3, r3, #16
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	69ba      	ldr	r2, [r7, #24]
 8008b8e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b96:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f003 0310 	and.w	r3, r3, #16
 8008b9e:	2207      	movs	r2, #7
 8008ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba4:	43db      	mvns	r3, r3
 8008ba6:	69ba      	ldr	r2, [r7, #24]
 8008ba8:	4013      	ands	r3, r2
 8008baa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d102      	bne.n	8008bba <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8008bb8:	e00f      	b.n	8008bda <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	d102      	bne.n	8008bc8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8008bc6:	e008      	b.n	8008bda <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d102      	bne.n	8008bd6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8008bd4:	e001      	b.n	8008bda <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be6:	4313      	orrs	r3, r2
 8008be8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f003 0310 	and.w	r3, r3, #16
 8008bf0:	697a      	ldr	r2, [r7, #20]
 8008bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6819      	ldr	r1, [r3, #0]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f003 0310 	and.w	r3, r3, #16
 8008c10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008c14:	fa02 f303 	lsl.w	r3, r2, r3
 8008c18:	43da      	mvns	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	400a      	ands	r2, r1
 8008c20:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f003 0310 	and.w	r3, r3, #16
 8008c30:	f640 72fe 	movw	r2, #4094	; 0xffe
 8008c34:	fa02 f303 	lsl.w	r3, r2, r3
 8008c38:	43db      	mvns	r3, r3
 8008c3a:	69ba      	ldr	r2, [r7, #24]
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f003 0310 	and.w	r3, r3, #16
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c52:	69ba      	ldr	r2, [r7, #24]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	6819      	ldr	r1, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f003 0310 	and.w	r3, r3, #16
 8008c6c:	22c0      	movs	r2, #192	; 0xc0
 8008c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c72:	43da      	mvns	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	400a      	ands	r2, r1
 8008c7a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8008c88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3728      	adds	r7, #40	; 0x28
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	20008000 	.word	0x20008000

08008c98 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f7ff fe8b 	bl	80089c2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	711a      	strb	r2, [r3, #4]
}
 8008cb2:	bf00      	nop
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f7ff fe84 	bl	80089d6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008cce:	bf00      	nop
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b084      	sub	sp, #16
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	f043 0204 	orr.w	r2, r3, #4
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f7ff fe7a 	bl	80089ea <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	711a      	strb	r2, [r3, #4]
}
 8008cfc:	bf00      	nop
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d60:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008d62:	68f8      	ldr	r0, [r7, #12]
 8008d64:	f7ff ffce 	bl	8008d04 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	711a      	strb	r2, [r3, #4]
}
 8008d6e:	bf00      	nop
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b084      	sub	sp, #16
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d82:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f7ff ffc7 	bl	8008d18 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008d8a:	bf00      	nop
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b084      	sub	sp, #16
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	f043 0204 	orr.w	r2, r3, #4
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f7ff ffbd 	bl	8008d2c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2201      	movs	r2, #1
 8008db6:	711a      	strb	r2, [r3, #4]
}
 8008db8:	bf00      	nop
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008dc8:	f7fd fed2 	bl	8006b70 <HAL_GetTick>
 8008dcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e316      	b.n	8009406 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a66      	ldr	r2, [pc, #408]	; (8008f78 <HAL_DMA_Init+0x1b8>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d04a      	beq.n	8008e78 <HAL_DMA_Init+0xb8>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a65      	ldr	r2, [pc, #404]	; (8008f7c <HAL_DMA_Init+0x1bc>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d045      	beq.n	8008e78 <HAL_DMA_Init+0xb8>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a63      	ldr	r2, [pc, #396]	; (8008f80 <HAL_DMA_Init+0x1c0>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d040      	beq.n	8008e78 <HAL_DMA_Init+0xb8>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a62      	ldr	r2, [pc, #392]	; (8008f84 <HAL_DMA_Init+0x1c4>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d03b      	beq.n	8008e78 <HAL_DMA_Init+0xb8>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a60      	ldr	r2, [pc, #384]	; (8008f88 <HAL_DMA_Init+0x1c8>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d036      	beq.n	8008e78 <HAL_DMA_Init+0xb8>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a5f      	ldr	r2, [pc, #380]	; (8008f8c <HAL_DMA_Init+0x1cc>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d031      	beq.n	8008e78 <HAL_DMA_Init+0xb8>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a5d      	ldr	r2, [pc, #372]	; (8008f90 <HAL_DMA_Init+0x1d0>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d02c      	beq.n	8008e78 <HAL_DMA_Init+0xb8>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a5c      	ldr	r2, [pc, #368]	; (8008f94 <HAL_DMA_Init+0x1d4>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d027      	beq.n	8008e78 <HAL_DMA_Init+0xb8>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a5a      	ldr	r2, [pc, #360]	; (8008f98 <HAL_DMA_Init+0x1d8>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d022      	beq.n	8008e78 <HAL_DMA_Init+0xb8>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a59      	ldr	r2, [pc, #356]	; (8008f9c <HAL_DMA_Init+0x1dc>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d01d      	beq.n	8008e78 <HAL_DMA_Init+0xb8>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a57      	ldr	r2, [pc, #348]	; (8008fa0 <HAL_DMA_Init+0x1e0>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d018      	beq.n	8008e78 <HAL_DMA_Init+0xb8>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a56      	ldr	r2, [pc, #344]	; (8008fa4 <HAL_DMA_Init+0x1e4>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d013      	beq.n	8008e78 <HAL_DMA_Init+0xb8>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a54      	ldr	r2, [pc, #336]	; (8008fa8 <HAL_DMA_Init+0x1e8>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d00e      	beq.n	8008e78 <HAL_DMA_Init+0xb8>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a53      	ldr	r2, [pc, #332]	; (8008fac <HAL_DMA_Init+0x1ec>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d009      	beq.n	8008e78 <HAL_DMA_Init+0xb8>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a51      	ldr	r2, [pc, #324]	; (8008fb0 <HAL_DMA_Init+0x1f0>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d004      	beq.n	8008e78 <HAL_DMA_Init+0xb8>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a50      	ldr	r2, [pc, #320]	; (8008fb4 <HAL_DMA_Init+0x1f4>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d101      	bne.n	8008e7c <HAL_DMA_Init+0xbc>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e000      	b.n	8008e7e <HAL_DMA_Init+0xbe>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 813b 	beq.w	80090fa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2202      	movs	r2, #2
 8008e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a37      	ldr	r2, [pc, #220]	; (8008f78 <HAL_DMA_Init+0x1b8>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d04a      	beq.n	8008f34 <HAL_DMA_Init+0x174>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a36      	ldr	r2, [pc, #216]	; (8008f7c <HAL_DMA_Init+0x1bc>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d045      	beq.n	8008f34 <HAL_DMA_Init+0x174>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a34      	ldr	r2, [pc, #208]	; (8008f80 <HAL_DMA_Init+0x1c0>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d040      	beq.n	8008f34 <HAL_DMA_Init+0x174>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a33      	ldr	r2, [pc, #204]	; (8008f84 <HAL_DMA_Init+0x1c4>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d03b      	beq.n	8008f34 <HAL_DMA_Init+0x174>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a31      	ldr	r2, [pc, #196]	; (8008f88 <HAL_DMA_Init+0x1c8>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d036      	beq.n	8008f34 <HAL_DMA_Init+0x174>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a30      	ldr	r2, [pc, #192]	; (8008f8c <HAL_DMA_Init+0x1cc>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d031      	beq.n	8008f34 <HAL_DMA_Init+0x174>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a2e      	ldr	r2, [pc, #184]	; (8008f90 <HAL_DMA_Init+0x1d0>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d02c      	beq.n	8008f34 <HAL_DMA_Init+0x174>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a2d      	ldr	r2, [pc, #180]	; (8008f94 <HAL_DMA_Init+0x1d4>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d027      	beq.n	8008f34 <HAL_DMA_Init+0x174>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a2b      	ldr	r2, [pc, #172]	; (8008f98 <HAL_DMA_Init+0x1d8>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d022      	beq.n	8008f34 <HAL_DMA_Init+0x174>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a2a      	ldr	r2, [pc, #168]	; (8008f9c <HAL_DMA_Init+0x1dc>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d01d      	beq.n	8008f34 <HAL_DMA_Init+0x174>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a28      	ldr	r2, [pc, #160]	; (8008fa0 <HAL_DMA_Init+0x1e0>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d018      	beq.n	8008f34 <HAL_DMA_Init+0x174>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a27      	ldr	r2, [pc, #156]	; (8008fa4 <HAL_DMA_Init+0x1e4>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d013      	beq.n	8008f34 <HAL_DMA_Init+0x174>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a25      	ldr	r2, [pc, #148]	; (8008fa8 <HAL_DMA_Init+0x1e8>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d00e      	beq.n	8008f34 <HAL_DMA_Init+0x174>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a24      	ldr	r2, [pc, #144]	; (8008fac <HAL_DMA_Init+0x1ec>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d009      	beq.n	8008f34 <HAL_DMA_Init+0x174>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a22      	ldr	r2, [pc, #136]	; (8008fb0 <HAL_DMA_Init+0x1f0>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d004      	beq.n	8008f34 <HAL_DMA_Init+0x174>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a21      	ldr	r2, [pc, #132]	; (8008fb4 <HAL_DMA_Init+0x1f4>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d108      	bne.n	8008f46 <HAL_DMA_Init+0x186>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f022 0201 	bic.w	r2, r2, #1
 8008f42:	601a      	str	r2, [r3, #0]
 8008f44:	e007      	b.n	8008f56 <HAL_DMA_Init+0x196>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f022 0201 	bic.w	r2, r2, #1
 8008f54:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008f56:	e02f      	b.n	8008fb8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008f58:	f7fd fe0a 	bl	8006b70 <HAL_GetTick>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	2b05      	cmp	r3, #5
 8008f64:	d928      	bls.n	8008fb8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2203      	movs	r2, #3
 8008f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e246      	b.n	8009406 <HAL_DMA_Init+0x646>
 8008f78:	40020010 	.word	0x40020010
 8008f7c:	40020028 	.word	0x40020028
 8008f80:	40020040 	.word	0x40020040
 8008f84:	40020058 	.word	0x40020058
 8008f88:	40020070 	.word	0x40020070
 8008f8c:	40020088 	.word	0x40020088
 8008f90:	400200a0 	.word	0x400200a0
 8008f94:	400200b8 	.word	0x400200b8
 8008f98:	40020410 	.word	0x40020410
 8008f9c:	40020428 	.word	0x40020428
 8008fa0:	40020440 	.word	0x40020440
 8008fa4:	40020458 	.word	0x40020458
 8008fa8:	40020470 	.word	0x40020470
 8008fac:	40020488 	.word	0x40020488
 8008fb0:	400204a0 	.word	0x400204a0
 8008fb4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1c8      	bne.n	8008f58 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	4b83      	ldr	r3, [pc, #524]	; (80091e0 <HAL_DMA_Init+0x420>)
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8008fde:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008fea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ff6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	4313      	orrs	r3, r2
 8009002:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	2b04      	cmp	r3, #4
 800900a:	d107      	bne.n	800901c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009014:	4313      	orrs	r3, r2
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	4313      	orrs	r3, r2
 800901a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800901c:	4b71      	ldr	r3, [pc, #452]	; (80091e4 <HAL_DMA_Init+0x424>)
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	4b71      	ldr	r3, [pc, #452]	; (80091e8 <HAL_DMA_Init+0x428>)
 8009022:	4013      	ands	r3, r2
 8009024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009028:	d328      	bcc.n	800907c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	2b28      	cmp	r3, #40	; 0x28
 8009030:	d903      	bls.n	800903a <HAL_DMA_Init+0x27a>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	2b2e      	cmp	r3, #46	; 0x2e
 8009038:	d917      	bls.n	800906a <HAL_DMA_Init+0x2aa>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	2b3e      	cmp	r3, #62	; 0x3e
 8009040:	d903      	bls.n	800904a <HAL_DMA_Init+0x28a>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	2b42      	cmp	r3, #66	; 0x42
 8009048:	d90f      	bls.n	800906a <HAL_DMA_Init+0x2aa>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	2b46      	cmp	r3, #70	; 0x46
 8009050:	d903      	bls.n	800905a <HAL_DMA_Init+0x29a>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	2b48      	cmp	r3, #72	; 0x48
 8009058:	d907      	bls.n	800906a <HAL_DMA_Init+0x2aa>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	2b4e      	cmp	r3, #78	; 0x4e
 8009060:	d905      	bls.n	800906e <HAL_DMA_Init+0x2ae>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	2b52      	cmp	r3, #82	; 0x52
 8009068:	d801      	bhi.n	800906e <HAL_DMA_Init+0x2ae>
 800906a:	2301      	movs	r3, #1
 800906c:	e000      	b.n	8009070 <HAL_DMA_Init+0x2b0>
 800906e:	2300      	movs	r3, #0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d003      	beq.n	800907c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800907a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f023 0307 	bic.w	r3, r3, #7
 8009092:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	4313      	orrs	r3, r2
 800909c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a2:	2b04      	cmp	r3, #4
 80090a4:	d117      	bne.n	80090d6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00e      	beq.n	80090d6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f002 fb4d 	bl	800b758 <DMA_CheckFifoParam>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d008      	beq.n	80090d6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2240      	movs	r2, #64	; 0x40
 80090c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e197      	b.n	8009406 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	697a      	ldr	r2, [r7, #20]
 80090dc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f002 fa88 	bl	800b5f4 <DMA_CalcBaseAndBitshift>
 80090e4:	4603      	mov	r3, r0
 80090e6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090ec:	f003 031f 	and.w	r3, r3, #31
 80090f0:	223f      	movs	r2, #63	; 0x3f
 80090f2:	409a      	lsls	r2, r3
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	609a      	str	r2, [r3, #8]
 80090f8:	e0cd      	b.n	8009296 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a3b      	ldr	r2, [pc, #236]	; (80091ec <HAL_DMA_Init+0x42c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d022      	beq.n	800914a <HAL_DMA_Init+0x38a>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a39      	ldr	r2, [pc, #228]	; (80091f0 <HAL_DMA_Init+0x430>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d01d      	beq.n	800914a <HAL_DMA_Init+0x38a>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a38      	ldr	r2, [pc, #224]	; (80091f4 <HAL_DMA_Init+0x434>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d018      	beq.n	800914a <HAL_DMA_Init+0x38a>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a36      	ldr	r2, [pc, #216]	; (80091f8 <HAL_DMA_Init+0x438>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d013      	beq.n	800914a <HAL_DMA_Init+0x38a>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a35      	ldr	r2, [pc, #212]	; (80091fc <HAL_DMA_Init+0x43c>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d00e      	beq.n	800914a <HAL_DMA_Init+0x38a>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a33      	ldr	r2, [pc, #204]	; (8009200 <HAL_DMA_Init+0x440>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d009      	beq.n	800914a <HAL_DMA_Init+0x38a>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a32      	ldr	r2, [pc, #200]	; (8009204 <HAL_DMA_Init+0x444>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d004      	beq.n	800914a <HAL_DMA_Init+0x38a>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a30      	ldr	r2, [pc, #192]	; (8009208 <HAL_DMA_Init+0x448>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d101      	bne.n	800914e <HAL_DMA_Init+0x38e>
 800914a:	2301      	movs	r3, #1
 800914c:	e000      	b.n	8009150 <HAL_DMA_Init+0x390>
 800914e:	2300      	movs	r3, #0
 8009150:	2b00      	cmp	r3, #0
 8009152:	f000 8097 	beq.w	8009284 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a24      	ldr	r2, [pc, #144]	; (80091ec <HAL_DMA_Init+0x42c>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d021      	beq.n	80091a4 <HAL_DMA_Init+0x3e4>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a22      	ldr	r2, [pc, #136]	; (80091f0 <HAL_DMA_Init+0x430>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d01c      	beq.n	80091a4 <HAL_DMA_Init+0x3e4>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a21      	ldr	r2, [pc, #132]	; (80091f4 <HAL_DMA_Init+0x434>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d017      	beq.n	80091a4 <HAL_DMA_Init+0x3e4>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a1f      	ldr	r2, [pc, #124]	; (80091f8 <HAL_DMA_Init+0x438>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d012      	beq.n	80091a4 <HAL_DMA_Init+0x3e4>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a1e      	ldr	r2, [pc, #120]	; (80091fc <HAL_DMA_Init+0x43c>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d00d      	beq.n	80091a4 <HAL_DMA_Init+0x3e4>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a1c      	ldr	r2, [pc, #112]	; (8009200 <HAL_DMA_Init+0x440>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d008      	beq.n	80091a4 <HAL_DMA_Init+0x3e4>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a1b      	ldr	r2, [pc, #108]	; (8009204 <HAL_DMA_Init+0x444>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d003      	beq.n	80091a4 <HAL_DMA_Init+0x3e4>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a19      	ldr	r2, [pc, #100]	; (8009208 <HAL_DMA_Init+0x448>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2202      	movs	r2, #2
 80091aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	4b12      	ldr	r3, [pc, #72]	; (800920c <HAL_DMA_Init+0x44c>)
 80091c2:	4013      	ands	r3, r2
 80091c4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	2b40      	cmp	r3, #64	; 0x40
 80091cc:	d020      	beq.n	8009210 <HAL_DMA_Init+0x450>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	2b80      	cmp	r3, #128	; 0x80
 80091d4:	d102      	bne.n	80091dc <HAL_DMA_Init+0x41c>
 80091d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80091da:	e01a      	b.n	8009212 <HAL_DMA_Init+0x452>
 80091dc:	2300      	movs	r3, #0
 80091de:	e018      	b.n	8009212 <HAL_DMA_Init+0x452>
 80091e0:	fe10803f 	.word	0xfe10803f
 80091e4:	5c001000 	.word	0x5c001000
 80091e8:	ffff0000 	.word	0xffff0000
 80091ec:	58025408 	.word	0x58025408
 80091f0:	5802541c 	.word	0x5802541c
 80091f4:	58025430 	.word	0x58025430
 80091f8:	58025444 	.word	0x58025444
 80091fc:	58025458 	.word	0x58025458
 8009200:	5802546c 	.word	0x5802546c
 8009204:	58025480 	.word	0x58025480
 8009208:	58025494 	.word	0x58025494
 800920c:	fffe000f 	.word	0xfffe000f
 8009210:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	68d2      	ldr	r2, [r2, #12]
 8009216:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009218:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009220:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009228:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009230:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	69db      	ldr	r3, [r3, #28]
 8009236:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009238:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a1b      	ldr	r3, [r3, #32]
 800923e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009240:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	4313      	orrs	r3, r2
 8009246:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	461a      	mov	r2, r3
 8009256:	4b6e      	ldr	r3, [pc, #440]	; (8009410 <HAL_DMA_Init+0x650>)
 8009258:	4413      	add	r3, r2
 800925a:	4a6e      	ldr	r2, [pc, #440]	; (8009414 <HAL_DMA_Init+0x654>)
 800925c:	fba2 2303 	umull	r2, r3, r2, r3
 8009260:	091b      	lsrs	r3, r3, #4
 8009262:	009a      	lsls	r2, r3, #2
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f002 f9c3 	bl	800b5f4 <DMA_CalcBaseAndBitshift>
 800926e:	4603      	mov	r3, r0
 8009270:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009276:	f003 031f 	and.w	r3, r3, #31
 800927a:	2201      	movs	r2, #1
 800927c:	409a      	lsls	r2, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	605a      	str	r2, [r3, #4]
 8009282:	e008      	b.n	8009296 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2240      	movs	r2, #64	; 0x40
 8009288:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2203      	movs	r2, #3
 800928e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e0b7      	b.n	8009406 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a5f      	ldr	r2, [pc, #380]	; (8009418 <HAL_DMA_Init+0x658>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d072      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a5d      	ldr	r2, [pc, #372]	; (800941c <HAL_DMA_Init+0x65c>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d06d      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a5c      	ldr	r2, [pc, #368]	; (8009420 <HAL_DMA_Init+0x660>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d068      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a5a      	ldr	r2, [pc, #360]	; (8009424 <HAL_DMA_Init+0x664>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d063      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a59      	ldr	r2, [pc, #356]	; (8009428 <HAL_DMA_Init+0x668>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d05e      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a57      	ldr	r2, [pc, #348]	; (800942c <HAL_DMA_Init+0x66c>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d059      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a56      	ldr	r2, [pc, #344]	; (8009430 <HAL_DMA_Init+0x670>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d054      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a54      	ldr	r2, [pc, #336]	; (8009434 <HAL_DMA_Init+0x674>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d04f      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a53      	ldr	r2, [pc, #332]	; (8009438 <HAL_DMA_Init+0x678>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d04a      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a51      	ldr	r2, [pc, #324]	; (800943c <HAL_DMA_Init+0x67c>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d045      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a50      	ldr	r2, [pc, #320]	; (8009440 <HAL_DMA_Init+0x680>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d040      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a4e      	ldr	r2, [pc, #312]	; (8009444 <HAL_DMA_Init+0x684>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d03b      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a4d      	ldr	r2, [pc, #308]	; (8009448 <HAL_DMA_Init+0x688>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d036      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a4b      	ldr	r2, [pc, #300]	; (800944c <HAL_DMA_Init+0x68c>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d031      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a4a      	ldr	r2, [pc, #296]	; (8009450 <HAL_DMA_Init+0x690>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d02c      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a48      	ldr	r2, [pc, #288]	; (8009454 <HAL_DMA_Init+0x694>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d027      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a47      	ldr	r2, [pc, #284]	; (8009458 <HAL_DMA_Init+0x698>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d022      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a45      	ldr	r2, [pc, #276]	; (800945c <HAL_DMA_Init+0x69c>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d01d      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a44      	ldr	r2, [pc, #272]	; (8009460 <HAL_DMA_Init+0x6a0>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d018      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a42      	ldr	r2, [pc, #264]	; (8009464 <HAL_DMA_Init+0x6a4>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d013      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a41      	ldr	r2, [pc, #260]	; (8009468 <HAL_DMA_Init+0x6a8>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d00e      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a3f      	ldr	r2, [pc, #252]	; (800946c <HAL_DMA_Init+0x6ac>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d009      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a3e      	ldr	r2, [pc, #248]	; (8009470 <HAL_DMA_Init+0x6b0>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d004      	beq.n	8009386 <HAL_DMA_Init+0x5c6>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a3c      	ldr	r2, [pc, #240]	; (8009474 <HAL_DMA_Init+0x6b4>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d101      	bne.n	800938a <HAL_DMA_Init+0x5ca>
 8009386:	2301      	movs	r3, #1
 8009388:	e000      	b.n	800938c <HAL_DMA_Init+0x5cc>
 800938a:	2300      	movs	r3, #0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d032      	beq.n	80093f6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f002 fa5d 	bl	800b850 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	2b80      	cmp	r3, #128	; 0x80
 800939c:	d102      	bne.n	80093a4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685a      	ldr	r2, [r3, #4]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093ac:	b2d2      	uxtb	r2, r2
 80093ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80093b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d010      	beq.n	80093e4 <HAL_DMA_Init+0x624>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	2b08      	cmp	r3, #8
 80093c8:	d80c      	bhi.n	80093e4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f002 fada 	bl	800b984 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093d4:	2200      	movs	r2, #0
 80093d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80093e0:	605a      	str	r2, [r3, #4]
 80093e2:	e008      	b.n	80093f6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	a7fdabf8 	.word	0xa7fdabf8
 8009414:	cccccccd 	.word	0xcccccccd
 8009418:	40020010 	.word	0x40020010
 800941c:	40020028 	.word	0x40020028
 8009420:	40020040 	.word	0x40020040
 8009424:	40020058 	.word	0x40020058
 8009428:	40020070 	.word	0x40020070
 800942c:	40020088 	.word	0x40020088
 8009430:	400200a0 	.word	0x400200a0
 8009434:	400200b8 	.word	0x400200b8
 8009438:	40020410 	.word	0x40020410
 800943c:	40020428 	.word	0x40020428
 8009440:	40020440 	.word	0x40020440
 8009444:	40020458 	.word	0x40020458
 8009448:	40020470 	.word	0x40020470
 800944c:	40020488 	.word	0x40020488
 8009450:	400204a0 	.word	0x400204a0
 8009454:	400204b8 	.word	0x400204b8
 8009458:	58025408 	.word	0x58025408
 800945c:	5802541c 	.word	0x5802541c
 8009460:	58025430 	.word	0x58025430
 8009464:	58025444 	.word	0x58025444
 8009468:	58025458 	.word	0x58025458
 800946c:	5802546c 	.word	0x5802546c
 8009470:	58025480 	.word	0x58025480
 8009474:	58025494 	.word	0x58025494

08009478 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d101      	bne.n	8009494 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e226      	b.n	80098e2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800949a:	2b01      	cmp	r3, #1
 800949c:	d101      	bne.n	80094a2 <HAL_DMA_Start_IT+0x2a>
 800949e:	2302      	movs	r3, #2
 80094a0:	e21f      	b.n	80098e2 <HAL_DMA_Start_IT+0x46a>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	f040 820a 	bne.w	80098cc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a68      	ldr	r2, [pc, #416]	; (800966c <HAL_DMA_Start_IT+0x1f4>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d04a      	beq.n	8009566 <HAL_DMA_Start_IT+0xee>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a66      	ldr	r2, [pc, #408]	; (8009670 <HAL_DMA_Start_IT+0x1f8>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d045      	beq.n	8009566 <HAL_DMA_Start_IT+0xee>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a65      	ldr	r2, [pc, #404]	; (8009674 <HAL_DMA_Start_IT+0x1fc>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d040      	beq.n	8009566 <HAL_DMA_Start_IT+0xee>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a63      	ldr	r2, [pc, #396]	; (8009678 <HAL_DMA_Start_IT+0x200>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d03b      	beq.n	8009566 <HAL_DMA_Start_IT+0xee>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a62      	ldr	r2, [pc, #392]	; (800967c <HAL_DMA_Start_IT+0x204>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d036      	beq.n	8009566 <HAL_DMA_Start_IT+0xee>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a60      	ldr	r2, [pc, #384]	; (8009680 <HAL_DMA_Start_IT+0x208>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d031      	beq.n	8009566 <HAL_DMA_Start_IT+0xee>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a5f      	ldr	r2, [pc, #380]	; (8009684 <HAL_DMA_Start_IT+0x20c>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d02c      	beq.n	8009566 <HAL_DMA_Start_IT+0xee>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a5d      	ldr	r2, [pc, #372]	; (8009688 <HAL_DMA_Start_IT+0x210>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d027      	beq.n	8009566 <HAL_DMA_Start_IT+0xee>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a5c      	ldr	r2, [pc, #368]	; (800968c <HAL_DMA_Start_IT+0x214>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d022      	beq.n	8009566 <HAL_DMA_Start_IT+0xee>
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a5a      	ldr	r2, [pc, #360]	; (8009690 <HAL_DMA_Start_IT+0x218>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d01d      	beq.n	8009566 <HAL_DMA_Start_IT+0xee>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a59      	ldr	r2, [pc, #356]	; (8009694 <HAL_DMA_Start_IT+0x21c>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d018      	beq.n	8009566 <HAL_DMA_Start_IT+0xee>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a57      	ldr	r2, [pc, #348]	; (8009698 <HAL_DMA_Start_IT+0x220>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d013      	beq.n	8009566 <HAL_DMA_Start_IT+0xee>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a56      	ldr	r2, [pc, #344]	; (800969c <HAL_DMA_Start_IT+0x224>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d00e      	beq.n	8009566 <HAL_DMA_Start_IT+0xee>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a54      	ldr	r2, [pc, #336]	; (80096a0 <HAL_DMA_Start_IT+0x228>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d009      	beq.n	8009566 <HAL_DMA_Start_IT+0xee>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a53      	ldr	r2, [pc, #332]	; (80096a4 <HAL_DMA_Start_IT+0x22c>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d004      	beq.n	8009566 <HAL_DMA_Start_IT+0xee>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a51      	ldr	r2, [pc, #324]	; (80096a8 <HAL_DMA_Start_IT+0x230>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d108      	bne.n	8009578 <HAL_DMA_Start_IT+0x100>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f022 0201 	bic.w	r2, r2, #1
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	e007      	b.n	8009588 <HAL_DMA_Start_IT+0x110>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f022 0201 	bic.w	r2, r2, #1
 8009586:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	68b9      	ldr	r1, [r7, #8]
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f001 fe84 	bl	800b29c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a34      	ldr	r2, [pc, #208]	; (800966c <HAL_DMA_Start_IT+0x1f4>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d04a      	beq.n	8009634 <HAL_DMA_Start_IT+0x1bc>
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a33      	ldr	r2, [pc, #204]	; (8009670 <HAL_DMA_Start_IT+0x1f8>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d045      	beq.n	8009634 <HAL_DMA_Start_IT+0x1bc>
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a31      	ldr	r2, [pc, #196]	; (8009674 <HAL_DMA_Start_IT+0x1fc>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d040      	beq.n	8009634 <HAL_DMA_Start_IT+0x1bc>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a30      	ldr	r2, [pc, #192]	; (8009678 <HAL_DMA_Start_IT+0x200>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d03b      	beq.n	8009634 <HAL_DMA_Start_IT+0x1bc>
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a2e      	ldr	r2, [pc, #184]	; (800967c <HAL_DMA_Start_IT+0x204>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d036      	beq.n	8009634 <HAL_DMA_Start_IT+0x1bc>
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a2d      	ldr	r2, [pc, #180]	; (8009680 <HAL_DMA_Start_IT+0x208>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d031      	beq.n	8009634 <HAL_DMA_Start_IT+0x1bc>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a2b      	ldr	r2, [pc, #172]	; (8009684 <HAL_DMA_Start_IT+0x20c>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d02c      	beq.n	8009634 <HAL_DMA_Start_IT+0x1bc>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a2a      	ldr	r2, [pc, #168]	; (8009688 <HAL_DMA_Start_IT+0x210>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d027      	beq.n	8009634 <HAL_DMA_Start_IT+0x1bc>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a28      	ldr	r2, [pc, #160]	; (800968c <HAL_DMA_Start_IT+0x214>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d022      	beq.n	8009634 <HAL_DMA_Start_IT+0x1bc>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a27      	ldr	r2, [pc, #156]	; (8009690 <HAL_DMA_Start_IT+0x218>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d01d      	beq.n	8009634 <HAL_DMA_Start_IT+0x1bc>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a25      	ldr	r2, [pc, #148]	; (8009694 <HAL_DMA_Start_IT+0x21c>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d018      	beq.n	8009634 <HAL_DMA_Start_IT+0x1bc>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a24      	ldr	r2, [pc, #144]	; (8009698 <HAL_DMA_Start_IT+0x220>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d013      	beq.n	8009634 <HAL_DMA_Start_IT+0x1bc>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a22      	ldr	r2, [pc, #136]	; (800969c <HAL_DMA_Start_IT+0x224>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d00e      	beq.n	8009634 <HAL_DMA_Start_IT+0x1bc>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a21      	ldr	r2, [pc, #132]	; (80096a0 <HAL_DMA_Start_IT+0x228>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d009      	beq.n	8009634 <HAL_DMA_Start_IT+0x1bc>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a1f      	ldr	r2, [pc, #124]	; (80096a4 <HAL_DMA_Start_IT+0x22c>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d004      	beq.n	8009634 <HAL_DMA_Start_IT+0x1bc>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a1e      	ldr	r2, [pc, #120]	; (80096a8 <HAL_DMA_Start_IT+0x230>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d101      	bne.n	8009638 <HAL_DMA_Start_IT+0x1c0>
 8009634:	2301      	movs	r3, #1
 8009636:	e000      	b.n	800963a <HAL_DMA_Start_IT+0x1c2>
 8009638:	2300      	movs	r3, #0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d036      	beq.n	80096ac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f023 021e 	bic.w	r2, r3, #30
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f042 0216 	orr.w	r2, r2, #22
 8009650:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009656:	2b00      	cmp	r3, #0
 8009658:	d03e      	beq.n	80096d8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f042 0208 	orr.w	r2, r2, #8
 8009668:	601a      	str	r2, [r3, #0]
 800966a:	e035      	b.n	80096d8 <HAL_DMA_Start_IT+0x260>
 800966c:	40020010 	.word	0x40020010
 8009670:	40020028 	.word	0x40020028
 8009674:	40020040 	.word	0x40020040
 8009678:	40020058 	.word	0x40020058
 800967c:	40020070 	.word	0x40020070
 8009680:	40020088 	.word	0x40020088
 8009684:	400200a0 	.word	0x400200a0
 8009688:	400200b8 	.word	0x400200b8
 800968c:	40020410 	.word	0x40020410
 8009690:	40020428 	.word	0x40020428
 8009694:	40020440 	.word	0x40020440
 8009698:	40020458 	.word	0x40020458
 800969c:	40020470 	.word	0x40020470
 80096a0:	40020488 	.word	0x40020488
 80096a4:	400204a0 	.word	0x400204a0
 80096a8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f023 020e 	bic.w	r2, r3, #14
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f042 020a 	orr.w	r2, r2, #10
 80096be:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d007      	beq.n	80096d8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f042 0204 	orr.w	r2, r2, #4
 80096d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a83      	ldr	r2, [pc, #524]	; (80098ec <HAL_DMA_Start_IT+0x474>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d072      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a82      	ldr	r2, [pc, #520]	; (80098f0 <HAL_DMA_Start_IT+0x478>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d06d      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a80      	ldr	r2, [pc, #512]	; (80098f4 <HAL_DMA_Start_IT+0x47c>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d068      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a7f      	ldr	r2, [pc, #508]	; (80098f8 <HAL_DMA_Start_IT+0x480>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d063      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a7d      	ldr	r2, [pc, #500]	; (80098fc <HAL_DMA_Start_IT+0x484>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d05e      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a7c      	ldr	r2, [pc, #496]	; (8009900 <HAL_DMA_Start_IT+0x488>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d059      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a7a      	ldr	r2, [pc, #488]	; (8009904 <HAL_DMA_Start_IT+0x48c>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d054      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a79      	ldr	r2, [pc, #484]	; (8009908 <HAL_DMA_Start_IT+0x490>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d04f      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a77      	ldr	r2, [pc, #476]	; (800990c <HAL_DMA_Start_IT+0x494>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d04a      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a76      	ldr	r2, [pc, #472]	; (8009910 <HAL_DMA_Start_IT+0x498>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d045      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a74      	ldr	r2, [pc, #464]	; (8009914 <HAL_DMA_Start_IT+0x49c>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d040      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a73      	ldr	r2, [pc, #460]	; (8009918 <HAL_DMA_Start_IT+0x4a0>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d03b      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a71      	ldr	r2, [pc, #452]	; (800991c <HAL_DMA_Start_IT+0x4a4>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d036      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a70      	ldr	r2, [pc, #448]	; (8009920 <HAL_DMA_Start_IT+0x4a8>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d031      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a6e      	ldr	r2, [pc, #440]	; (8009924 <HAL_DMA_Start_IT+0x4ac>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d02c      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a6d      	ldr	r2, [pc, #436]	; (8009928 <HAL_DMA_Start_IT+0x4b0>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d027      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a6b      	ldr	r2, [pc, #428]	; (800992c <HAL_DMA_Start_IT+0x4b4>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d022      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a6a      	ldr	r2, [pc, #424]	; (8009930 <HAL_DMA_Start_IT+0x4b8>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d01d      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a68      	ldr	r2, [pc, #416]	; (8009934 <HAL_DMA_Start_IT+0x4bc>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d018      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a67      	ldr	r2, [pc, #412]	; (8009938 <HAL_DMA_Start_IT+0x4c0>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d013      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a65      	ldr	r2, [pc, #404]	; (800993c <HAL_DMA_Start_IT+0x4c4>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d00e      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a64      	ldr	r2, [pc, #400]	; (8009940 <HAL_DMA_Start_IT+0x4c8>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d009      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a62      	ldr	r2, [pc, #392]	; (8009944 <HAL_DMA_Start_IT+0x4cc>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d004      	beq.n	80097c8 <HAL_DMA_Start_IT+0x350>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a61      	ldr	r2, [pc, #388]	; (8009948 <HAL_DMA_Start_IT+0x4d0>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d101      	bne.n	80097cc <HAL_DMA_Start_IT+0x354>
 80097c8:	2301      	movs	r3, #1
 80097ca:	e000      	b.n	80097ce <HAL_DMA_Start_IT+0x356>
 80097cc:	2300      	movs	r3, #0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d01a      	beq.n	8009808 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d007      	beq.n	80097f0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097ee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d007      	beq.n	8009808 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009806:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a37      	ldr	r2, [pc, #220]	; (80098ec <HAL_DMA_Start_IT+0x474>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d04a      	beq.n	80098a8 <HAL_DMA_Start_IT+0x430>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a36      	ldr	r2, [pc, #216]	; (80098f0 <HAL_DMA_Start_IT+0x478>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d045      	beq.n	80098a8 <HAL_DMA_Start_IT+0x430>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a34      	ldr	r2, [pc, #208]	; (80098f4 <HAL_DMA_Start_IT+0x47c>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d040      	beq.n	80098a8 <HAL_DMA_Start_IT+0x430>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a33      	ldr	r2, [pc, #204]	; (80098f8 <HAL_DMA_Start_IT+0x480>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d03b      	beq.n	80098a8 <HAL_DMA_Start_IT+0x430>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a31      	ldr	r2, [pc, #196]	; (80098fc <HAL_DMA_Start_IT+0x484>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d036      	beq.n	80098a8 <HAL_DMA_Start_IT+0x430>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a30      	ldr	r2, [pc, #192]	; (8009900 <HAL_DMA_Start_IT+0x488>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d031      	beq.n	80098a8 <HAL_DMA_Start_IT+0x430>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a2e      	ldr	r2, [pc, #184]	; (8009904 <HAL_DMA_Start_IT+0x48c>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d02c      	beq.n	80098a8 <HAL_DMA_Start_IT+0x430>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a2d      	ldr	r2, [pc, #180]	; (8009908 <HAL_DMA_Start_IT+0x490>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d027      	beq.n	80098a8 <HAL_DMA_Start_IT+0x430>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a2b      	ldr	r2, [pc, #172]	; (800990c <HAL_DMA_Start_IT+0x494>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d022      	beq.n	80098a8 <HAL_DMA_Start_IT+0x430>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a2a      	ldr	r2, [pc, #168]	; (8009910 <HAL_DMA_Start_IT+0x498>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d01d      	beq.n	80098a8 <HAL_DMA_Start_IT+0x430>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a28      	ldr	r2, [pc, #160]	; (8009914 <HAL_DMA_Start_IT+0x49c>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d018      	beq.n	80098a8 <HAL_DMA_Start_IT+0x430>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a27      	ldr	r2, [pc, #156]	; (8009918 <HAL_DMA_Start_IT+0x4a0>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d013      	beq.n	80098a8 <HAL_DMA_Start_IT+0x430>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a25      	ldr	r2, [pc, #148]	; (800991c <HAL_DMA_Start_IT+0x4a4>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d00e      	beq.n	80098a8 <HAL_DMA_Start_IT+0x430>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a24      	ldr	r2, [pc, #144]	; (8009920 <HAL_DMA_Start_IT+0x4a8>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d009      	beq.n	80098a8 <HAL_DMA_Start_IT+0x430>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a22      	ldr	r2, [pc, #136]	; (8009924 <HAL_DMA_Start_IT+0x4ac>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d004      	beq.n	80098a8 <HAL_DMA_Start_IT+0x430>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a21      	ldr	r2, [pc, #132]	; (8009928 <HAL_DMA_Start_IT+0x4b0>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d108      	bne.n	80098ba <HAL_DMA_Start_IT+0x442>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f042 0201 	orr.w	r2, r2, #1
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	e012      	b.n	80098e0 <HAL_DMA_Start_IT+0x468>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f042 0201 	orr.w	r2, r2, #1
 80098c8:	601a      	str	r2, [r3, #0]
 80098ca:	e009      	b.n	80098e0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80098e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3718      	adds	r7, #24
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	40020010 	.word	0x40020010
 80098f0:	40020028 	.word	0x40020028
 80098f4:	40020040 	.word	0x40020040
 80098f8:	40020058 	.word	0x40020058
 80098fc:	40020070 	.word	0x40020070
 8009900:	40020088 	.word	0x40020088
 8009904:	400200a0 	.word	0x400200a0
 8009908:	400200b8 	.word	0x400200b8
 800990c:	40020410 	.word	0x40020410
 8009910:	40020428 	.word	0x40020428
 8009914:	40020440 	.word	0x40020440
 8009918:	40020458 	.word	0x40020458
 800991c:	40020470 	.word	0x40020470
 8009920:	40020488 	.word	0x40020488
 8009924:	400204a0 	.word	0x400204a0
 8009928:	400204b8 	.word	0x400204b8
 800992c:	58025408 	.word	0x58025408
 8009930:	5802541c 	.word	0x5802541c
 8009934:	58025430 	.word	0x58025430
 8009938:	58025444 	.word	0x58025444
 800993c:	58025458 	.word	0x58025458
 8009940:	5802546c 	.word	0x5802546c
 8009944:	58025480 	.word	0x58025480
 8009948:	58025494 	.word	0x58025494

0800994c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8009954:	f7fd f90c 	bl	8006b70 <HAL_GetTick>
 8009958:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d101      	bne.n	8009964 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	e2dc      	b.n	8009f1e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800996a:	b2db      	uxtb	r3, r3
 800996c:	2b02      	cmp	r3, #2
 800996e:	d008      	beq.n	8009982 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2280      	movs	r2, #128	; 0x80
 8009974:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e2cd      	b.n	8009f1e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a76      	ldr	r2, [pc, #472]	; (8009b60 <HAL_DMA_Abort+0x214>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d04a      	beq.n	8009a22 <HAL_DMA_Abort+0xd6>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a74      	ldr	r2, [pc, #464]	; (8009b64 <HAL_DMA_Abort+0x218>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d045      	beq.n	8009a22 <HAL_DMA_Abort+0xd6>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a73      	ldr	r2, [pc, #460]	; (8009b68 <HAL_DMA_Abort+0x21c>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d040      	beq.n	8009a22 <HAL_DMA_Abort+0xd6>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a71      	ldr	r2, [pc, #452]	; (8009b6c <HAL_DMA_Abort+0x220>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d03b      	beq.n	8009a22 <HAL_DMA_Abort+0xd6>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a70      	ldr	r2, [pc, #448]	; (8009b70 <HAL_DMA_Abort+0x224>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d036      	beq.n	8009a22 <HAL_DMA_Abort+0xd6>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a6e      	ldr	r2, [pc, #440]	; (8009b74 <HAL_DMA_Abort+0x228>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d031      	beq.n	8009a22 <HAL_DMA_Abort+0xd6>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a6d      	ldr	r2, [pc, #436]	; (8009b78 <HAL_DMA_Abort+0x22c>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d02c      	beq.n	8009a22 <HAL_DMA_Abort+0xd6>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a6b      	ldr	r2, [pc, #428]	; (8009b7c <HAL_DMA_Abort+0x230>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d027      	beq.n	8009a22 <HAL_DMA_Abort+0xd6>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a6a      	ldr	r2, [pc, #424]	; (8009b80 <HAL_DMA_Abort+0x234>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d022      	beq.n	8009a22 <HAL_DMA_Abort+0xd6>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a68      	ldr	r2, [pc, #416]	; (8009b84 <HAL_DMA_Abort+0x238>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d01d      	beq.n	8009a22 <HAL_DMA_Abort+0xd6>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a67      	ldr	r2, [pc, #412]	; (8009b88 <HAL_DMA_Abort+0x23c>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d018      	beq.n	8009a22 <HAL_DMA_Abort+0xd6>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a65      	ldr	r2, [pc, #404]	; (8009b8c <HAL_DMA_Abort+0x240>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d013      	beq.n	8009a22 <HAL_DMA_Abort+0xd6>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a64      	ldr	r2, [pc, #400]	; (8009b90 <HAL_DMA_Abort+0x244>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d00e      	beq.n	8009a22 <HAL_DMA_Abort+0xd6>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a62      	ldr	r2, [pc, #392]	; (8009b94 <HAL_DMA_Abort+0x248>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d009      	beq.n	8009a22 <HAL_DMA_Abort+0xd6>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a61      	ldr	r2, [pc, #388]	; (8009b98 <HAL_DMA_Abort+0x24c>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d004      	beq.n	8009a22 <HAL_DMA_Abort+0xd6>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a5f      	ldr	r2, [pc, #380]	; (8009b9c <HAL_DMA_Abort+0x250>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d101      	bne.n	8009a26 <HAL_DMA_Abort+0xda>
 8009a22:	2301      	movs	r3, #1
 8009a24:	e000      	b.n	8009a28 <HAL_DMA_Abort+0xdc>
 8009a26:	2300      	movs	r3, #0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d013      	beq.n	8009a54 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f022 021e 	bic.w	r2, r2, #30
 8009a3a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	695a      	ldr	r2, [r3, #20]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a4a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	617b      	str	r3, [r7, #20]
 8009a52:	e00a      	b.n	8009a6a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f022 020e 	bic.w	r2, r2, #14
 8009a62:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a3c      	ldr	r2, [pc, #240]	; (8009b60 <HAL_DMA_Abort+0x214>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d072      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a3a      	ldr	r2, [pc, #232]	; (8009b64 <HAL_DMA_Abort+0x218>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d06d      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a39      	ldr	r2, [pc, #228]	; (8009b68 <HAL_DMA_Abort+0x21c>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d068      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a37      	ldr	r2, [pc, #220]	; (8009b6c <HAL_DMA_Abort+0x220>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d063      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a36      	ldr	r2, [pc, #216]	; (8009b70 <HAL_DMA_Abort+0x224>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d05e      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a34      	ldr	r2, [pc, #208]	; (8009b74 <HAL_DMA_Abort+0x228>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d059      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a33      	ldr	r2, [pc, #204]	; (8009b78 <HAL_DMA_Abort+0x22c>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d054      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a31      	ldr	r2, [pc, #196]	; (8009b7c <HAL_DMA_Abort+0x230>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d04f      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a30      	ldr	r2, [pc, #192]	; (8009b80 <HAL_DMA_Abort+0x234>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d04a      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a2e      	ldr	r2, [pc, #184]	; (8009b84 <HAL_DMA_Abort+0x238>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d045      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a2d      	ldr	r2, [pc, #180]	; (8009b88 <HAL_DMA_Abort+0x23c>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d040      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a2b      	ldr	r2, [pc, #172]	; (8009b8c <HAL_DMA_Abort+0x240>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d03b      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a2a      	ldr	r2, [pc, #168]	; (8009b90 <HAL_DMA_Abort+0x244>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d036      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a28      	ldr	r2, [pc, #160]	; (8009b94 <HAL_DMA_Abort+0x248>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d031      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a27      	ldr	r2, [pc, #156]	; (8009b98 <HAL_DMA_Abort+0x24c>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d02c      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a25      	ldr	r2, [pc, #148]	; (8009b9c <HAL_DMA_Abort+0x250>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d027      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a24      	ldr	r2, [pc, #144]	; (8009ba0 <HAL_DMA_Abort+0x254>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d022      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a22      	ldr	r2, [pc, #136]	; (8009ba4 <HAL_DMA_Abort+0x258>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d01d      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a21      	ldr	r2, [pc, #132]	; (8009ba8 <HAL_DMA_Abort+0x25c>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d018      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a1f      	ldr	r2, [pc, #124]	; (8009bac <HAL_DMA_Abort+0x260>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d013      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a1e      	ldr	r2, [pc, #120]	; (8009bb0 <HAL_DMA_Abort+0x264>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d00e      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a1c      	ldr	r2, [pc, #112]	; (8009bb4 <HAL_DMA_Abort+0x268>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d009      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a1b      	ldr	r2, [pc, #108]	; (8009bb8 <HAL_DMA_Abort+0x26c>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d004      	beq.n	8009b5a <HAL_DMA_Abort+0x20e>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a19      	ldr	r2, [pc, #100]	; (8009bbc <HAL_DMA_Abort+0x270>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d132      	bne.n	8009bc0 <HAL_DMA_Abort+0x274>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e031      	b.n	8009bc2 <HAL_DMA_Abort+0x276>
 8009b5e:	bf00      	nop
 8009b60:	40020010 	.word	0x40020010
 8009b64:	40020028 	.word	0x40020028
 8009b68:	40020040 	.word	0x40020040
 8009b6c:	40020058 	.word	0x40020058
 8009b70:	40020070 	.word	0x40020070
 8009b74:	40020088 	.word	0x40020088
 8009b78:	400200a0 	.word	0x400200a0
 8009b7c:	400200b8 	.word	0x400200b8
 8009b80:	40020410 	.word	0x40020410
 8009b84:	40020428 	.word	0x40020428
 8009b88:	40020440 	.word	0x40020440
 8009b8c:	40020458 	.word	0x40020458
 8009b90:	40020470 	.word	0x40020470
 8009b94:	40020488 	.word	0x40020488
 8009b98:	400204a0 	.word	0x400204a0
 8009b9c:	400204b8 	.word	0x400204b8
 8009ba0:	58025408 	.word	0x58025408
 8009ba4:	5802541c 	.word	0x5802541c
 8009ba8:	58025430 	.word	0x58025430
 8009bac:	58025444 	.word	0x58025444
 8009bb0:	58025458 	.word	0x58025458
 8009bb4:	5802546c 	.word	0x5802546c
 8009bb8:	58025480 	.word	0x58025480
 8009bbc:	58025494 	.word	0x58025494
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d007      	beq.n	8009bd6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a6d      	ldr	r2, [pc, #436]	; (8009d90 <HAL_DMA_Abort+0x444>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d04a      	beq.n	8009c76 <HAL_DMA_Abort+0x32a>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a6b      	ldr	r2, [pc, #428]	; (8009d94 <HAL_DMA_Abort+0x448>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d045      	beq.n	8009c76 <HAL_DMA_Abort+0x32a>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a6a      	ldr	r2, [pc, #424]	; (8009d98 <HAL_DMA_Abort+0x44c>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d040      	beq.n	8009c76 <HAL_DMA_Abort+0x32a>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a68      	ldr	r2, [pc, #416]	; (8009d9c <HAL_DMA_Abort+0x450>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d03b      	beq.n	8009c76 <HAL_DMA_Abort+0x32a>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a67      	ldr	r2, [pc, #412]	; (8009da0 <HAL_DMA_Abort+0x454>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d036      	beq.n	8009c76 <HAL_DMA_Abort+0x32a>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a65      	ldr	r2, [pc, #404]	; (8009da4 <HAL_DMA_Abort+0x458>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d031      	beq.n	8009c76 <HAL_DMA_Abort+0x32a>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a64      	ldr	r2, [pc, #400]	; (8009da8 <HAL_DMA_Abort+0x45c>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d02c      	beq.n	8009c76 <HAL_DMA_Abort+0x32a>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a62      	ldr	r2, [pc, #392]	; (8009dac <HAL_DMA_Abort+0x460>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d027      	beq.n	8009c76 <HAL_DMA_Abort+0x32a>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a61      	ldr	r2, [pc, #388]	; (8009db0 <HAL_DMA_Abort+0x464>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d022      	beq.n	8009c76 <HAL_DMA_Abort+0x32a>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a5f      	ldr	r2, [pc, #380]	; (8009db4 <HAL_DMA_Abort+0x468>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d01d      	beq.n	8009c76 <HAL_DMA_Abort+0x32a>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a5e      	ldr	r2, [pc, #376]	; (8009db8 <HAL_DMA_Abort+0x46c>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d018      	beq.n	8009c76 <HAL_DMA_Abort+0x32a>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a5c      	ldr	r2, [pc, #368]	; (8009dbc <HAL_DMA_Abort+0x470>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d013      	beq.n	8009c76 <HAL_DMA_Abort+0x32a>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a5b      	ldr	r2, [pc, #364]	; (8009dc0 <HAL_DMA_Abort+0x474>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d00e      	beq.n	8009c76 <HAL_DMA_Abort+0x32a>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a59      	ldr	r2, [pc, #356]	; (8009dc4 <HAL_DMA_Abort+0x478>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d009      	beq.n	8009c76 <HAL_DMA_Abort+0x32a>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a58      	ldr	r2, [pc, #352]	; (8009dc8 <HAL_DMA_Abort+0x47c>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d004      	beq.n	8009c76 <HAL_DMA_Abort+0x32a>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a56      	ldr	r2, [pc, #344]	; (8009dcc <HAL_DMA_Abort+0x480>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d108      	bne.n	8009c88 <HAL_DMA_Abort+0x33c>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f022 0201 	bic.w	r2, r2, #1
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	e007      	b.n	8009c98 <HAL_DMA_Abort+0x34c>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f022 0201 	bic.w	r2, r2, #1
 8009c96:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009c98:	e013      	b.n	8009cc2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009c9a:	f7fc ff69 	bl	8006b70 <HAL_GetTick>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	2b05      	cmp	r3, #5
 8009ca6:	d90c      	bls.n	8009cc2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2220      	movs	r2, #32
 8009cac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2203      	movs	r2, #3
 8009cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e12d      	b.n	8009f1e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 0301 	and.w	r3, r3, #1
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1e5      	bne.n	8009c9a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a2f      	ldr	r2, [pc, #188]	; (8009d90 <HAL_DMA_Abort+0x444>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d04a      	beq.n	8009d6e <HAL_DMA_Abort+0x422>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a2d      	ldr	r2, [pc, #180]	; (8009d94 <HAL_DMA_Abort+0x448>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d045      	beq.n	8009d6e <HAL_DMA_Abort+0x422>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a2c      	ldr	r2, [pc, #176]	; (8009d98 <HAL_DMA_Abort+0x44c>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d040      	beq.n	8009d6e <HAL_DMA_Abort+0x422>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a2a      	ldr	r2, [pc, #168]	; (8009d9c <HAL_DMA_Abort+0x450>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d03b      	beq.n	8009d6e <HAL_DMA_Abort+0x422>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a29      	ldr	r2, [pc, #164]	; (8009da0 <HAL_DMA_Abort+0x454>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d036      	beq.n	8009d6e <HAL_DMA_Abort+0x422>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a27      	ldr	r2, [pc, #156]	; (8009da4 <HAL_DMA_Abort+0x458>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d031      	beq.n	8009d6e <HAL_DMA_Abort+0x422>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a26      	ldr	r2, [pc, #152]	; (8009da8 <HAL_DMA_Abort+0x45c>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d02c      	beq.n	8009d6e <HAL_DMA_Abort+0x422>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a24      	ldr	r2, [pc, #144]	; (8009dac <HAL_DMA_Abort+0x460>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d027      	beq.n	8009d6e <HAL_DMA_Abort+0x422>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a23      	ldr	r2, [pc, #140]	; (8009db0 <HAL_DMA_Abort+0x464>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d022      	beq.n	8009d6e <HAL_DMA_Abort+0x422>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a21      	ldr	r2, [pc, #132]	; (8009db4 <HAL_DMA_Abort+0x468>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d01d      	beq.n	8009d6e <HAL_DMA_Abort+0x422>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a20      	ldr	r2, [pc, #128]	; (8009db8 <HAL_DMA_Abort+0x46c>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d018      	beq.n	8009d6e <HAL_DMA_Abort+0x422>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a1e      	ldr	r2, [pc, #120]	; (8009dbc <HAL_DMA_Abort+0x470>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d013      	beq.n	8009d6e <HAL_DMA_Abort+0x422>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a1d      	ldr	r2, [pc, #116]	; (8009dc0 <HAL_DMA_Abort+0x474>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d00e      	beq.n	8009d6e <HAL_DMA_Abort+0x422>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a1b      	ldr	r2, [pc, #108]	; (8009dc4 <HAL_DMA_Abort+0x478>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d009      	beq.n	8009d6e <HAL_DMA_Abort+0x422>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a1a      	ldr	r2, [pc, #104]	; (8009dc8 <HAL_DMA_Abort+0x47c>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d004      	beq.n	8009d6e <HAL_DMA_Abort+0x422>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a18      	ldr	r2, [pc, #96]	; (8009dcc <HAL_DMA_Abort+0x480>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d101      	bne.n	8009d72 <HAL_DMA_Abort+0x426>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e000      	b.n	8009d74 <HAL_DMA_Abort+0x428>
 8009d72:	2300      	movs	r3, #0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d02b      	beq.n	8009dd0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d7c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d82:	f003 031f 	and.w	r3, r3, #31
 8009d86:	223f      	movs	r2, #63	; 0x3f
 8009d88:	409a      	lsls	r2, r3
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	609a      	str	r2, [r3, #8]
 8009d8e:	e02a      	b.n	8009de6 <HAL_DMA_Abort+0x49a>
 8009d90:	40020010 	.word	0x40020010
 8009d94:	40020028 	.word	0x40020028
 8009d98:	40020040 	.word	0x40020040
 8009d9c:	40020058 	.word	0x40020058
 8009da0:	40020070 	.word	0x40020070
 8009da4:	40020088 	.word	0x40020088
 8009da8:	400200a0 	.word	0x400200a0
 8009dac:	400200b8 	.word	0x400200b8
 8009db0:	40020410 	.word	0x40020410
 8009db4:	40020428 	.word	0x40020428
 8009db8:	40020440 	.word	0x40020440
 8009dbc:	40020458 	.word	0x40020458
 8009dc0:	40020470 	.word	0x40020470
 8009dc4:	40020488 	.word	0x40020488
 8009dc8:	400204a0 	.word	0x400204a0
 8009dcc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dd4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dda:	f003 031f 	and.w	r3, r3, #31
 8009dde:	2201      	movs	r2, #1
 8009de0:	409a      	lsls	r2, r3
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a4f      	ldr	r2, [pc, #316]	; (8009f28 <HAL_DMA_Abort+0x5dc>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d072      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a4d      	ldr	r2, [pc, #308]	; (8009f2c <HAL_DMA_Abort+0x5e0>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d06d      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a4c      	ldr	r2, [pc, #304]	; (8009f30 <HAL_DMA_Abort+0x5e4>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d068      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a4a      	ldr	r2, [pc, #296]	; (8009f34 <HAL_DMA_Abort+0x5e8>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d063      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a49      	ldr	r2, [pc, #292]	; (8009f38 <HAL_DMA_Abort+0x5ec>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d05e      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a47      	ldr	r2, [pc, #284]	; (8009f3c <HAL_DMA_Abort+0x5f0>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d059      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a46      	ldr	r2, [pc, #280]	; (8009f40 <HAL_DMA_Abort+0x5f4>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d054      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a44      	ldr	r2, [pc, #272]	; (8009f44 <HAL_DMA_Abort+0x5f8>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d04f      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a43      	ldr	r2, [pc, #268]	; (8009f48 <HAL_DMA_Abort+0x5fc>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d04a      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a41      	ldr	r2, [pc, #260]	; (8009f4c <HAL_DMA_Abort+0x600>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d045      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a40      	ldr	r2, [pc, #256]	; (8009f50 <HAL_DMA_Abort+0x604>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d040      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a3e      	ldr	r2, [pc, #248]	; (8009f54 <HAL_DMA_Abort+0x608>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d03b      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a3d      	ldr	r2, [pc, #244]	; (8009f58 <HAL_DMA_Abort+0x60c>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d036      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a3b      	ldr	r2, [pc, #236]	; (8009f5c <HAL_DMA_Abort+0x610>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d031      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a3a      	ldr	r2, [pc, #232]	; (8009f60 <HAL_DMA_Abort+0x614>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d02c      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a38      	ldr	r2, [pc, #224]	; (8009f64 <HAL_DMA_Abort+0x618>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d027      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a37      	ldr	r2, [pc, #220]	; (8009f68 <HAL_DMA_Abort+0x61c>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d022      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a35      	ldr	r2, [pc, #212]	; (8009f6c <HAL_DMA_Abort+0x620>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d01d      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a34      	ldr	r2, [pc, #208]	; (8009f70 <HAL_DMA_Abort+0x624>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d018      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a32      	ldr	r2, [pc, #200]	; (8009f74 <HAL_DMA_Abort+0x628>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d013      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a31      	ldr	r2, [pc, #196]	; (8009f78 <HAL_DMA_Abort+0x62c>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d00e      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a2f      	ldr	r2, [pc, #188]	; (8009f7c <HAL_DMA_Abort+0x630>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d009      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a2e      	ldr	r2, [pc, #184]	; (8009f80 <HAL_DMA_Abort+0x634>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d004      	beq.n	8009ed6 <HAL_DMA_Abort+0x58a>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a2c      	ldr	r2, [pc, #176]	; (8009f84 <HAL_DMA_Abort+0x638>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d101      	bne.n	8009eda <HAL_DMA_Abort+0x58e>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e000      	b.n	8009edc <HAL_DMA_Abort+0x590>
 8009eda:	2300      	movs	r3, #0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d015      	beq.n	8009f0c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009ee8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00c      	beq.n	8009f0c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f00:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009f0a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3718      	adds	r7, #24
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	40020010 	.word	0x40020010
 8009f2c:	40020028 	.word	0x40020028
 8009f30:	40020040 	.word	0x40020040
 8009f34:	40020058 	.word	0x40020058
 8009f38:	40020070 	.word	0x40020070
 8009f3c:	40020088 	.word	0x40020088
 8009f40:	400200a0 	.word	0x400200a0
 8009f44:	400200b8 	.word	0x400200b8
 8009f48:	40020410 	.word	0x40020410
 8009f4c:	40020428 	.word	0x40020428
 8009f50:	40020440 	.word	0x40020440
 8009f54:	40020458 	.word	0x40020458
 8009f58:	40020470 	.word	0x40020470
 8009f5c:	40020488 	.word	0x40020488
 8009f60:	400204a0 	.word	0x400204a0
 8009f64:	400204b8 	.word	0x400204b8
 8009f68:	58025408 	.word	0x58025408
 8009f6c:	5802541c 	.word	0x5802541c
 8009f70:	58025430 	.word	0x58025430
 8009f74:	58025444 	.word	0x58025444
 8009f78:	58025458 	.word	0x58025458
 8009f7c:	5802546c 	.word	0x5802546c
 8009f80:	58025480 	.word	0x58025480
 8009f84:	58025494 	.word	0x58025494

08009f88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d101      	bne.n	8009f9a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e237      	b.n	800a40a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d004      	beq.n	8009fb0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2280      	movs	r2, #128	; 0x80
 8009faa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e22c      	b.n	800a40a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a5c      	ldr	r2, [pc, #368]	; (800a128 <HAL_DMA_Abort_IT+0x1a0>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d04a      	beq.n	800a050 <HAL_DMA_Abort_IT+0xc8>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a5b      	ldr	r2, [pc, #364]	; (800a12c <HAL_DMA_Abort_IT+0x1a4>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d045      	beq.n	800a050 <HAL_DMA_Abort_IT+0xc8>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a59      	ldr	r2, [pc, #356]	; (800a130 <HAL_DMA_Abort_IT+0x1a8>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d040      	beq.n	800a050 <HAL_DMA_Abort_IT+0xc8>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a58      	ldr	r2, [pc, #352]	; (800a134 <HAL_DMA_Abort_IT+0x1ac>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d03b      	beq.n	800a050 <HAL_DMA_Abort_IT+0xc8>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a56      	ldr	r2, [pc, #344]	; (800a138 <HAL_DMA_Abort_IT+0x1b0>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d036      	beq.n	800a050 <HAL_DMA_Abort_IT+0xc8>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a55      	ldr	r2, [pc, #340]	; (800a13c <HAL_DMA_Abort_IT+0x1b4>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d031      	beq.n	800a050 <HAL_DMA_Abort_IT+0xc8>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a53      	ldr	r2, [pc, #332]	; (800a140 <HAL_DMA_Abort_IT+0x1b8>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d02c      	beq.n	800a050 <HAL_DMA_Abort_IT+0xc8>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a52      	ldr	r2, [pc, #328]	; (800a144 <HAL_DMA_Abort_IT+0x1bc>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d027      	beq.n	800a050 <HAL_DMA_Abort_IT+0xc8>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a50      	ldr	r2, [pc, #320]	; (800a148 <HAL_DMA_Abort_IT+0x1c0>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d022      	beq.n	800a050 <HAL_DMA_Abort_IT+0xc8>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a4f      	ldr	r2, [pc, #316]	; (800a14c <HAL_DMA_Abort_IT+0x1c4>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d01d      	beq.n	800a050 <HAL_DMA_Abort_IT+0xc8>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a4d      	ldr	r2, [pc, #308]	; (800a150 <HAL_DMA_Abort_IT+0x1c8>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d018      	beq.n	800a050 <HAL_DMA_Abort_IT+0xc8>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a4c      	ldr	r2, [pc, #304]	; (800a154 <HAL_DMA_Abort_IT+0x1cc>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d013      	beq.n	800a050 <HAL_DMA_Abort_IT+0xc8>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a4a      	ldr	r2, [pc, #296]	; (800a158 <HAL_DMA_Abort_IT+0x1d0>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d00e      	beq.n	800a050 <HAL_DMA_Abort_IT+0xc8>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a49      	ldr	r2, [pc, #292]	; (800a15c <HAL_DMA_Abort_IT+0x1d4>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d009      	beq.n	800a050 <HAL_DMA_Abort_IT+0xc8>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a47      	ldr	r2, [pc, #284]	; (800a160 <HAL_DMA_Abort_IT+0x1d8>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d004      	beq.n	800a050 <HAL_DMA_Abort_IT+0xc8>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a46      	ldr	r2, [pc, #280]	; (800a164 <HAL_DMA_Abort_IT+0x1dc>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d101      	bne.n	800a054 <HAL_DMA_Abort_IT+0xcc>
 800a050:	2301      	movs	r3, #1
 800a052:	e000      	b.n	800a056 <HAL_DMA_Abort_IT+0xce>
 800a054:	2300      	movs	r3, #0
 800a056:	2b00      	cmp	r3, #0
 800a058:	f000 8086 	beq.w	800a168 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2204      	movs	r2, #4
 800a060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a2f      	ldr	r2, [pc, #188]	; (800a128 <HAL_DMA_Abort_IT+0x1a0>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d04a      	beq.n	800a104 <HAL_DMA_Abort_IT+0x17c>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a2e      	ldr	r2, [pc, #184]	; (800a12c <HAL_DMA_Abort_IT+0x1a4>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d045      	beq.n	800a104 <HAL_DMA_Abort_IT+0x17c>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a2c      	ldr	r2, [pc, #176]	; (800a130 <HAL_DMA_Abort_IT+0x1a8>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d040      	beq.n	800a104 <HAL_DMA_Abort_IT+0x17c>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a2b      	ldr	r2, [pc, #172]	; (800a134 <HAL_DMA_Abort_IT+0x1ac>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d03b      	beq.n	800a104 <HAL_DMA_Abort_IT+0x17c>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a29      	ldr	r2, [pc, #164]	; (800a138 <HAL_DMA_Abort_IT+0x1b0>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d036      	beq.n	800a104 <HAL_DMA_Abort_IT+0x17c>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a28      	ldr	r2, [pc, #160]	; (800a13c <HAL_DMA_Abort_IT+0x1b4>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d031      	beq.n	800a104 <HAL_DMA_Abort_IT+0x17c>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a26      	ldr	r2, [pc, #152]	; (800a140 <HAL_DMA_Abort_IT+0x1b8>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d02c      	beq.n	800a104 <HAL_DMA_Abort_IT+0x17c>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a25      	ldr	r2, [pc, #148]	; (800a144 <HAL_DMA_Abort_IT+0x1bc>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d027      	beq.n	800a104 <HAL_DMA_Abort_IT+0x17c>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a23      	ldr	r2, [pc, #140]	; (800a148 <HAL_DMA_Abort_IT+0x1c0>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d022      	beq.n	800a104 <HAL_DMA_Abort_IT+0x17c>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a22      	ldr	r2, [pc, #136]	; (800a14c <HAL_DMA_Abort_IT+0x1c4>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d01d      	beq.n	800a104 <HAL_DMA_Abort_IT+0x17c>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a20      	ldr	r2, [pc, #128]	; (800a150 <HAL_DMA_Abort_IT+0x1c8>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d018      	beq.n	800a104 <HAL_DMA_Abort_IT+0x17c>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a1f      	ldr	r2, [pc, #124]	; (800a154 <HAL_DMA_Abort_IT+0x1cc>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d013      	beq.n	800a104 <HAL_DMA_Abort_IT+0x17c>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a1d      	ldr	r2, [pc, #116]	; (800a158 <HAL_DMA_Abort_IT+0x1d0>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d00e      	beq.n	800a104 <HAL_DMA_Abort_IT+0x17c>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a1c      	ldr	r2, [pc, #112]	; (800a15c <HAL_DMA_Abort_IT+0x1d4>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d009      	beq.n	800a104 <HAL_DMA_Abort_IT+0x17c>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a1a      	ldr	r2, [pc, #104]	; (800a160 <HAL_DMA_Abort_IT+0x1d8>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d004      	beq.n	800a104 <HAL_DMA_Abort_IT+0x17c>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a19      	ldr	r2, [pc, #100]	; (800a164 <HAL_DMA_Abort_IT+0x1dc>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d108      	bne.n	800a116 <HAL_DMA_Abort_IT+0x18e>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f022 0201 	bic.w	r2, r2, #1
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	e178      	b.n	800a408 <HAL_DMA_Abort_IT+0x480>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f022 0201 	bic.w	r2, r2, #1
 800a124:	601a      	str	r2, [r3, #0]
 800a126:	e16f      	b.n	800a408 <HAL_DMA_Abort_IT+0x480>
 800a128:	40020010 	.word	0x40020010
 800a12c:	40020028 	.word	0x40020028
 800a130:	40020040 	.word	0x40020040
 800a134:	40020058 	.word	0x40020058
 800a138:	40020070 	.word	0x40020070
 800a13c:	40020088 	.word	0x40020088
 800a140:	400200a0 	.word	0x400200a0
 800a144:	400200b8 	.word	0x400200b8
 800a148:	40020410 	.word	0x40020410
 800a14c:	40020428 	.word	0x40020428
 800a150:	40020440 	.word	0x40020440
 800a154:	40020458 	.word	0x40020458
 800a158:	40020470 	.word	0x40020470
 800a15c:	40020488 	.word	0x40020488
 800a160:	400204a0 	.word	0x400204a0
 800a164:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f022 020e 	bic.w	r2, r2, #14
 800a176:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a6c      	ldr	r2, [pc, #432]	; (800a330 <HAL_DMA_Abort_IT+0x3a8>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d04a      	beq.n	800a218 <HAL_DMA_Abort_IT+0x290>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a6b      	ldr	r2, [pc, #428]	; (800a334 <HAL_DMA_Abort_IT+0x3ac>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d045      	beq.n	800a218 <HAL_DMA_Abort_IT+0x290>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a69      	ldr	r2, [pc, #420]	; (800a338 <HAL_DMA_Abort_IT+0x3b0>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d040      	beq.n	800a218 <HAL_DMA_Abort_IT+0x290>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a68      	ldr	r2, [pc, #416]	; (800a33c <HAL_DMA_Abort_IT+0x3b4>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d03b      	beq.n	800a218 <HAL_DMA_Abort_IT+0x290>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a66      	ldr	r2, [pc, #408]	; (800a340 <HAL_DMA_Abort_IT+0x3b8>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d036      	beq.n	800a218 <HAL_DMA_Abort_IT+0x290>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a65      	ldr	r2, [pc, #404]	; (800a344 <HAL_DMA_Abort_IT+0x3bc>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d031      	beq.n	800a218 <HAL_DMA_Abort_IT+0x290>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a63      	ldr	r2, [pc, #396]	; (800a348 <HAL_DMA_Abort_IT+0x3c0>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d02c      	beq.n	800a218 <HAL_DMA_Abort_IT+0x290>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a62      	ldr	r2, [pc, #392]	; (800a34c <HAL_DMA_Abort_IT+0x3c4>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d027      	beq.n	800a218 <HAL_DMA_Abort_IT+0x290>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a60      	ldr	r2, [pc, #384]	; (800a350 <HAL_DMA_Abort_IT+0x3c8>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d022      	beq.n	800a218 <HAL_DMA_Abort_IT+0x290>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a5f      	ldr	r2, [pc, #380]	; (800a354 <HAL_DMA_Abort_IT+0x3cc>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d01d      	beq.n	800a218 <HAL_DMA_Abort_IT+0x290>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a5d      	ldr	r2, [pc, #372]	; (800a358 <HAL_DMA_Abort_IT+0x3d0>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d018      	beq.n	800a218 <HAL_DMA_Abort_IT+0x290>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a5c      	ldr	r2, [pc, #368]	; (800a35c <HAL_DMA_Abort_IT+0x3d4>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d013      	beq.n	800a218 <HAL_DMA_Abort_IT+0x290>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a5a      	ldr	r2, [pc, #360]	; (800a360 <HAL_DMA_Abort_IT+0x3d8>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d00e      	beq.n	800a218 <HAL_DMA_Abort_IT+0x290>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a59      	ldr	r2, [pc, #356]	; (800a364 <HAL_DMA_Abort_IT+0x3dc>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d009      	beq.n	800a218 <HAL_DMA_Abort_IT+0x290>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a57      	ldr	r2, [pc, #348]	; (800a368 <HAL_DMA_Abort_IT+0x3e0>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d004      	beq.n	800a218 <HAL_DMA_Abort_IT+0x290>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a56      	ldr	r2, [pc, #344]	; (800a36c <HAL_DMA_Abort_IT+0x3e4>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d108      	bne.n	800a22a <HAL_DMA_Abort_IT+0x2a2>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f022 0201 	bic.w	r2, r2, #1
 800a226:	601a      	str	r2, [r3, #0]
 800a228:	e007      	b.n	800a23a <HAL_DMA_Abort_IT+0x2b2>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f022 0201 	bic.w	r2, r2, #1
 800a238:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a3c      	ldr	r2, [pc, #240]	; (800a330 <HAL_DMA_Abort_IT+0x3a8>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d072      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a3a      	ldr	r2, [pc, #232]	; (800a334 <HAL_DMA_Abort_IT+0x3ac>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d06d      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a39      	ldr	r2, [pc, #228]	; (800a338 <HAL_DMA_Abort_IT+0x3b0>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d068      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a37      	ldr	r2, [pc, #220]	; (800a33c <HAL_DMA_Abort_IT+0x3b4>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d063      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a36      	ldr	r2, [pc, #216]	; (800a340 <HAL_DMA_Abort_IT+0x3b8>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d05e      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a34      	ldr	r2, [pc, #208]	; (800a344 <HAL_DMA_Abort_IT+0x3bc>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d059      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a33      	ldr	r2, [pc, #204]	; (800a348 <HAL_DMA_Abort_IT+0x3c0>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d054      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a31      	ldr	r2, [pc, #196]	; (800a34c <HAL_DMA_Abort_IT+0x3c4>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d04f      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a30      	ldr	r2, [pc, #192]	; (800a350 <HAL_DMA_Abort_IT+0x3c8>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d04a      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a2e      	ldr	r2, [pc, #184]	; (800a354 <HAL_DMA_Abort_IT+0x3cc>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d045      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a2d      	ldr	r2, [pc, #180]	; (800a358 <HAL_DMA_Abort_IT+0x3d0>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d040      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a2b      	ldr	r2, [pc, #172]	; (800a35c <HAL_DMA_Abort_IT+0x3d4>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d03b      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a2a      	ldr	r2, [pc, #168]	; (800a360 <HAL_DMA_Abort_IT+0x3d8>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d036      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a28      	ldr	r2, [pc, #160]	; (800a364 <HAL_DMA_Abort_IT+0x3dc>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d031      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a27      	ldr	r2, [pc, #156]	; (800a368 <HAL_DMA_Abort_IT+0x3e0>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d02c      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a25      	ldr	r2, [pc, #148]	; (800a36c <HAL_DMA_Abort_IT+0x3e4>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d027      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a24      	ldr	r2, [pc, #144]	; (800a370 <HAL_DMA_Abort_IT+0x3e8>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d022      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a22      	ldr	r2, [pc, #136]	; (800a374 <HAL_DMA_Abort_IT+0x3ec>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d01d      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a21      	ldr	r2, [pc, #132]	; (800a378 <HAL_DMA_Abort_IT+0x3f0>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d018      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a1f      	ldr	r2, [pc, #124]	; (800a37c <HAL_DMA_Abort_IT+0x3f4>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d013      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a1e      	ldr	r2, [pc, #120]	; (800a380 <HAL_DMA_Abort_IT+0x3f8>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d00e      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a1c      	ldr	r2, [pc, #112]	; (800a384 <HAL_DMA_Abort_IT+0x3fc>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d009      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a1b      	ldr	r2, [pc, #108]	; (800a388 <HAL_DMA_Abort_IT+0x400>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d004      	beq.n	800a32a <HAL_DMA_Abort_IT+0x3a2>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a19      	ldr	r2, [pc, #100]	; (800a38c <HAL_DMA_Abort_IT+0x404>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d132      	bne.n	800a390 <HAL_DMA_Abort_IT+0x408>
 800a32a:	2301      	movs	r3, #1
 800a32c:	e031      	b.n	800a392 <HAL_DMA_Abort_IT+0x40a>
 800a32e:	bf00      	nop
 800a330:	40020010 	.word	0x40020010
 800a334:	40020028 	.word	0x40020028
 800a338:	40020040 	.word	0x40020040
 800a33c:	40020058 	.word	0x40020058
 800a340:	40020070 	.word	0x40020070
 800a344:	40020088 	.word	0x40020088
 800a348:	400200a0 	.word	0x400200a0
 800a34c:	400200b8 	.word	0x400200b8
 800a350:	40020410 	.word	0x40020410
 800a354:	40020428 	.word	0x40020428
 800a358:	40020440 	.word	0x40020440
 800a35c:	40020458 	.word	0x40020458
 800a360:	40020470 	.word	0x40020470
 800a364:	40020488 	.word	0x40020488
 800a368:	400204a0 	.word	0x400204a0
 800a36c:	400204b8 	.word	0x400204b8
 800a370:	58025408 	.word	0x58025408
 800a374:	5802541c 	.word	0x5802541c
 800a378:	58025430 	.word	0x58025430
 800a37c:	58025444 	.word	0x58025444
 800a380:	58025458 	.word	0x58025458
 800a384:	5802546c 	.word	0x5802546c
 800a388:	58025480 	.word	0x58025480
 800a38c:	58025494 	.word	0x58025494
 800a390:	2300      	movs	r3, #0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d028      	beq.n	800a3e8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a3a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3b0:	f003 031f 	and.w	r3, r3, #31
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	409a      	lsls	r2, r3
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a3c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00c      	beq.n	800a3e8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a3dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a3e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d003      	beq.n	800a408 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop

0800a414 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08a      	sub	sp, #40	; 0x28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a41c:	2300      	movs	r3, #0
 800a41e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a420:	4b67      	ldr	r3, [pc, #412]	; (800a5c0 <HAL_DMA_IRQHandler+0x1ac>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a67      	ldr	r2, [pc, #412]	; (800a5c4 <HAL_DMA_IRQHandler+0x1b0>)
 800a426:	fba2 2303 	umull	r2, r3, r2, r3
 800a42a:	0a9b      	lsrs	r3, r3, #10
 800a42c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a432:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a438:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a43a:	6a3b      	ldr	r3, [r7, #32]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a440:	69fb      	ldr	r3, [r7, #28]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a5f      	ldr	r2, [pc, #380]	; (800a5c8 <HAL_DMA_IRQHandler+0x1b4>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d04a      	beq.n	800a4e6 <HAL_DMA_IRQHandler+0xd2>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a5d      	ldr	r2, [pc, #372]	; (800a5cc <HAL_DMA_IRQHandler+0x1b8>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d045      	beq.n	800a4e6 <HAL_DMA_IRQHandler+0xd2>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a5c      	ldr	r2, [pc, #368]	; (800a5d0 <HAL_DMA_IRQHandler+0x1bc>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d040      	beq.n	800a4e6 <HAL_DMA_IRQHandler+0xd2>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a5a      	ldr	r2, [pc, #360]	; (800a5d4 <HAL_DMA_IRQHandler+0x1c0>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d03b      	beq.n	800a4e6 <HAL_DMA_IRQHandler+0xd2>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a59      	ldr	r2, [pc, #356]	; (800a5d8 <HAL_DMA_IRQHandler+0x1c4>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d036      	beq.n	800a4e6 <HAL_DMA_IRQHandler+0xd2>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a57      	ldr	r2, [pc, #348]	; (800a5dc <HAL_DMA_IRQHandler+0x1c8>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d031      	beq.n	800a4e6 <HAL_DMA_IRQHandler+0xd2>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a56      	ldr	r2, [pc, #344]	; (800a5e0 <HAL_DMA_IRQHandler+0x1cc>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d02c      	beq.n	800a4e6 <HAL_DMA_IRQHandler+0xd2>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a54      	ldr	r2, [pc, #336]	; (800a5e4 <HAL_DMA_IRQHandler+0x1d0>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d027      	beq.n	800a4e6 <HAL_DMA_IRQHandler+0xd2>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a53      	ldr	r2, [pc, #332]	; (800a5e8 <HAL_DMA_IRQHandler+0x1d4>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d022      	beq.n	800a4e6 <HAL_DMA_IRQHandler+0xd2>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a51      	ldr	r2, [pc, #324]	; (800a5ec <HAL_DMA_IRQHandler+0x1d8>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d01d      	beq.n	800a4e6 <HAL_DMA_IRQHandler+0xd2>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a50      	ldr	r2, [pc, #320]	; (800a5f0 <HAL_DMA_IRQHandler+0x1dc>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d018      	beq.n	800a4e6 <HAL_DMA_IRQHandler+0xd2>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a4e      	ldr	r2, [pc, #312]	; (800a5f4 <HAL_DMA_IRQHandler+0x1e0>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d013      	beq.n	800a4e6 <HAL_DMA_IRQHandler+0xd2>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a4d      	ldr	r2, [pc, #308]	; (800a5f8 <HAL_DMA_IRQHandler+0x1e4>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d00e      	beq.n	800a4e6 <HAL_DMA_IRQHandler+0xd2>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a4b      	ldr	r2, [pc, #300]	; (800a5fc <HAL_DMA_IRQHandler+0x1e8>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d009      	beq.n	800a4e6 <HAL_DMA_IRQHandler+0xd2>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a4a      	ldr	r2, [pc, #296]	; (800a600 <HAL_DMA_IRQHandler+0x1ec>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d004      	beq.n	800a4e6 <HAL_DMA_IRQHandler+0xd2>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a48      	ldr	r2, [pc, #288]	; (800a604 <HAL_DMA_IRQHandler+0x1f0>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d101      	bne.n	800a4ea <HAL_DMA_IRQHandler+0xd6>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e000      	b.n	800a4ec <HAL_DMA_IRQHandler+0xd8>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f000 842b 	beq.w	800ad48 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4f6:	f003 031f 	and.w	r3, r3, #31
 800a4fa:	2208      	movs	r2, #8
 800a4fc:	409a      	lsls	r2, r3
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	4013      	ands	r3, r2
 800a502:	2b00      	cmp	r3, #0
 800a504:	f000 80a2 	beq.w	800a64c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a2e      	ldr	r2, [pc, #184]	; (800a5c8 <HAL_DMA_IRQHandler+0x1b4>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d04a      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x194>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a2d      	ldr	r2, [pc, #180]	; (800a5cc <HAL_DMA_IRQHandler+0x1b8>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d045      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x194>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a2b      	ldr	r2, [pc, #172]	; (800a5d0 <HAL_DMA_IRQHandler+0x1bc>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d040      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x194>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a2a      	ldr	r2, [pc, #168]	; (800a5d4 <HAL_DMA_IRQHandler+0x1c0>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d03b      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x194>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a28      	ldr	r2, [pc, #160]	; (800a5d8 <HAL_DMA_IRQHandler+0x1c4>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d036      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x194>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a27      	ldr	r2, [pc, #156]	; (800a5dc <HAL_DMA_IRQHandler+0x1c8>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d031      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x194>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a25      	ldr	r2, [pc, #148]	; (800a5e0 <HAL_DMA_IRQHandler+0x1cc>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d02c      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x194>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a24      	ldr	r2, [pc, #144]	; (800a5e4 <HAL_DMA_IRQHandler+0x1d0>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d027      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x194>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a22      	ldr	r2, [pc, #136]	; (800a5e8 <HAL_DMA_IRQHandler+0x1d4>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d022      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x194>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a21      	ldr	r2, [pc, #132]	; (800a5ec <HAL_DMA_IRQHandler+0x1d8>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d01d      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x194>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a1f      	ldr	r2, [pc, #124]	; (800a5f0 <HAL_DMA_IRQHandler+0x1dc>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d018      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x194>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a1e      	ldr	r2, [pc, #120]	; (800a5f4 <HAL_DMA_IRQHandler+0x1e0>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d013      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x194>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a1c      	ldr	r2, [pc, #112]	; (800a5f8 <HAL_DMA_IRQHandler+0x1e4>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d00e      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x194>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a1b      	ldr	r2, [pc, #108]	; (800a5fc <HAL_DMA_IRQHandler+0x1e8>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d009      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x194>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a19      	ldr	r2, [pc, #100]	; (800a600 <HAL_DMA_IRQHandler+0x1ec>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d004      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x194>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a18      	ldr	r2, [pc, #96]	; (800a604 <HAL_DMA_IRQHandler+0x1f0>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d12f      	bne.n	800a608 <HAL_DMA_IRQHandler+0x1f4>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 0304 	and.w	r3, r3, #4
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	bf14      	ite	ne
 800a5b6:	2301      	movne	r3, #1
 800a5b8:	2300      	moveq	r3, #0
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	e02e      	b.n	800a61c <HAL_DMA_IRQHandler+0x208>
 800a5be:	bf00      	nop
 800a5c0:	240000e0 	.word	0x240000e0
 800a5c4:	1b4e81b5 	.word	0x1b4e81b5
 800a5c8:	40020010 	.word	0x40020010
 800a5cc:	40020028 	.word	0x40020028
 800a5d0:	40020040 	.word	0x40020040
 800a5d4:	40020058 	.word	0x40020058
 800a5d8:	40020070 	.word	0x40020070
 800a5dc:	40020088 	.word	0x40020088
 800a5e0:	400200a0 	.word	0x400200a0
 800a5e4:	400200b8 	.word	0x400200b8
 800a5e8:	40020410 	.word	0x40020410
 800a5ec:	40020428 	.word	0x40020428
 800a5f0:	40020440 	.word	0x40020440
 800a5f4:	40020458 	.word	0x40020458
 800a5f8:	40020470 	.word	0x40020470
 800a5fc:	40020488 	.word	0x40020488
 800a600:	400204a0 	.word	0x400204a0
 800a604:	400204b8 	.word	0x400204b8
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f003 0308 	and.w	r3, r3, #8
 800a612:	2b00      	cmp	r3, #0
 800a614:	bf14      	ite	ne
 800a616:	2301      	movne	r3, #1
 800a618:	2300      	moveq	r3, #0
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d015      	beq.n	800a64c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f022 0204 	bic.w	r2, r2, #4
 800a62e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a634:	f003 031f 	and.w	r3, r3, #31
 800a638:	2208      	movs	r2, #8
 800a63a:	409a      	lsls	r2, r3
 800a63c:	6a3b      	ldr	r3, [r7, #32]
 800a63e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a644:	f043 0201 	orr.w	r2, r3, #1
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a650:	f003 031f 	and.w	r3, r3, #31
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	fa22 f303 	lsr.w	r3, r2, r3
 800a65a:	f003 0301 	and.w	r3, r3, #1
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d06e      	beq.n	800a740 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a69      	ldr	r2, [pc, #420]	; (800a80c <HAL_DMA_IRQHandler+0x3f8>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d04a      	beq.n	800a702 <HAL_DMA_IRQHandler+0x2ee>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a67      	ldr	r2, [pc, #412]	; (800a810 <HAL_DMA_IRQHandler+0x3fc>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d045      	beq.n	800a702 <HAL_DMA_IRQHandler+0x2ee>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a66      	ldr	r2, [pc, #408]	; (800a814 <HAL_DMA_IRQHandler+0x400>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d040      	beq.n	800a702 <HAL_DMA_IRQHandler+0x2ee>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a64      	ldr	r2, [pc, #400]	; (800a818 <HAL_DMA_IRQHandler+0x404>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d03b      	beq.n	800a702 <HAL_DMA_IRQHandler+0x2ee>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a63      	ldr	r2, [pc, #396]	; (800a81c <HAL_DMA_IRQHandler+0x408>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d036      	beq.n	800a702 <HAL_DMA_IRQHandler+0x2ee>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a61      	ldr	r2, [pc, #388]	; (800a820 <HAL_DMA_IRQHandler+0x40c>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d031      	beq.n	800a702 <HAL_DMA_IRQHandler+0x2ee>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a60      	ldr	r2, [pc, #384]	; (800a824 <HAL_DMA_IRQHandler+0x410>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d02c      	beq.n	800a702 <HAL_DMA_IRQHandler+0x2ee>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a5e      	ldr	r2, [pc, #376]	; (800a828 <HAL_DMA_IRQHandler+0x414>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d027      	beq.n	800a702 <HAL_DMA_IRQHandler+0x2ee>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a5d      	ldr	r2, [pc, #372]	; (800a82c <HAL_DMA_IRQHandler+0x418>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d022      	beq.n	800a702 <HAL_DMA_IRQHandler+0x2ee>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a5b      	ldr	r2, [pc, #364]	; (800a830 <HAL_DMA_IRQHandler+0x41c>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d01d      	beq.n	800a702 <HAL_DMA_IRQHandler+0x2ee>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a5a      	ldr	r2, [pc, #360]	; (800a834 <HAL_DMA_IRQHandler+0x420>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d018      	beq.n	800a702 <HAL_DMA_IRQHandler+0x2ee>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a58      	ldr	r2, [pc, #352]	; (800a838 <HAL_DMA_IRQHandler+0x424>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d013      	beq.n	800a702 <HAL_DMA_IRQHandler+0x2ee>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a57      	ldr	r2, [pc, #348]	; (800a83c <HAL_DMA_IRQHandler+0x428>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d00e      	beq.n	800a702 <HAL_DMA_IRQHandler+0x2ee>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a55      	ldr	r2, [pc, #340]	; (800a840 <HAL_DMA_IRQHandler+0x42c>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d009      	beq.n	800a702 <HAL_DMA_IRQHandler+0x2ee>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a54      	ldr	r2, [pc, #336]	; (800a844 <HAL_DMA_IRQHandler+0x430>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d004      	beq.n	800a702 <HAL_DMA_IRQHandler+0x2ee>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a52      	ldr	r2, [pc, #328]	; (800a848 <HAL_DMA_IRQHandler+0x434>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d10a      	bne.n	800a718 <HAL_DMA_IRQHandler+0x304>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	bf14      	ite	ne
 800a710:	2301      	movne	r3, #1
 800a712:	2300      	moveq	r3, #0
 800a714:	b2db      	uxtb	r3, r3
 800a716:	e003      	b.n	800a720 <HAL_DMA_IRQHandler+0x30c>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2300      	movs	r3, #0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00d      	beq.n	800a740 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a728:	f003 031f 	and.w	r3, r3, #31
 800a72c:	2201      	movs	r2, #1
 800a72e:	409a      	lsls	r2, r3
 800a730:	6a3b      	ldr	r3, [r7, #32]
 800a732:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a738:	f043 0202 	orr.w	r2, r3, #2
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a744:	f003 031f 	and.w	r3, r3, #31
 800a748:	2204      	movs	r2, #4
 800a74a:	409a      	lsls	r2, r3
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	4013      	ands	r3, r2
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 808f 	beq.w	800a874 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a2c      	ldr	r2, [pc, #176]	; (800a80c <HAL_DMA_IRQHandler+0x3f8>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d04a      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0x3e2>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a2a      	ldr	r2, [pc, #168]	; (800a810 <HAL_DMA_IRQHandler+0x3fc>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d045      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0x3e2>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a29      	ldr	r2, [pc, #164]	; (800a814 <HAL_DMA_IRQHandler+0x400>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d040      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0x3e2>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a27      	ldr	r2, [pc, #156]	; (800a818 <HAL_DMA_IRQHandler+0x404>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d03b      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0x3e2>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a26      	ldr	r2, [pc, #152]	; (800a81c <HAL_DMA_IRQHandler+0x408>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d036      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0x3e2>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a24      	ldr	r2, [pc, #144]	; (800a820 <HAL_DMA_IRQHandler+0x40c>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d031      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0x3e2>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a23      	ldr	r2, [pc, #140]	; (800a824 <HAL_DMA_IRQHandler+0x410>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d02c      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0x3e2>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a21      	ldr	r2, [pc, #132]	; (800a828 <HAL_DMA_IRQHandler+0x414>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d027      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0x3e2>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a20      	ldr	r2, [pc, #128]	; (800a82c <HAL_DMA_IRQHandler+0x418>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d022      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0x3e2>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a1e      	ldr	r2, [pc, #120]	; (800a830 <HAL_DMA_IRQHandler+0x41c>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d01d      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0x3e2>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a1d      	ldr	r2, [pc, #116]	; (800a834 <HAL_DMA_IRQHandler+0x420>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d018      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0x3e2>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a1b      	ldr	r2, [pc, #108]	; (800a838 <HAL_DMA_IRQHandler+0x424>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d013      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0x3e2>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a1a      	ldr	r2, [pc, #104]	; (800a83c <HAL_DMA_IRQHandler+0x428>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d00e      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0x3e2>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a18      	ldr	r2, [pc, #96]	; (800a840 <HAL_DMA_IRQHandler+0x42c>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d009      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0x3e2>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a17      	ldr	r2, [pc, #92]	; (800a844 <HAL_DMA_IRQHandler+0x430>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d004      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0x3e2>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a15      	ldr	r2, [pc, #84]	; (800a848 <HAL_DMA_IRQHandler+0x434>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d12a      	bne.n	800a84c <HAL_DMA_IRQHandler+0x438>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 0302 	and.w	r3, r3, #2
 800a800:	2b00      	cmp	r3, #0
 800a802:	bf14      	ite	ne
 800a804:	2301      	movne	r3, #1
 800a806:	2300      	moveq	r3, #0
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	e023      	b.n	800a854 <HAL_DMA_IRQHandler+0x440>
 800a80c:	40020010 	.word	0x40020010
 800a810:	40020028 	.word	0x40020028
 800a814:	40020040 	.word	0x40020040
 800a818:	40020058 	.word	0x40020058
 800a81c:	40020070 	.word	0x40020070
 800a820:	40020088 	.word	0x40020088
 800a824:	400200a0 	.word	0x400200a0
 800a828:	400200b8 	.word	0x400200b8
 800a82c:	40020410 	.word	0x40020410
 800a830:	40020428 	.word	0x40020428
 800a834:	40020440 	.word	0x40020440
 800a838:	40020458 	.word	0x40020458
 800a83c:	40020470 	.word	0x40020470
 800a840:	40020488 	.word	0x40020488
 800a844:	400204a0 	.word	0x400204a0
 800a848:	400204b8 	.word	0x400204b8
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2300      	movs	r3, #0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00d      	beq.n	800a874 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a85c:	f003 031f 	and.w	r3, r3, #31
 800a860:	2204      	movs	r2, #4
 800a862:	409a      	lsls	r2, r3
 800a864:	6a3b      	ldr	r3, [r7, #32]
 800a866:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a86c:	f043 0204 	orr.w	r2, r3, #4
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a878:	f003 031f 	and.w	r3, r3, #31
 800a87c:	2210      	movs	r2, #16
 800a87e:	409a      	lsls	r2, r3
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	4013      	ands	r3, r2
 800a884:	2b00      	cmp	r3, #0
 800a886:	f000 80a6 	beq.w	800a9d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a85      	ldr	r2, [pc, #532]	; (800aaa4 <HAL_DMA_IRQHandler+0x690>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d04a      	beq.n	800a92a <HAL_DMA_IRQHandler+0x516>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a83      	ldr	r2, [pc, #524]	; (800aaa8 <HAL_DMA_IRQHandler+0x694>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d045      	beq.n	800a92a <HAL_DMA_IRQHandler+0x516>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a82      	ldr	r2, [pc, #520]	; (800aaac <HAL_DMA_IRQHandler+0x698>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d040      	beq.n	800a92a <HAL_DMA_IRQHandler+0x516>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a80      	ldr	r2, [pc, #512]	; (800aab0 <HAL_DMA_IRQHandler+0x69c>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d03b      	beq.n	800a92a <HAL_DMA_IRQHandler+0x516>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a7f      	ldr	r2, [pc, #508]	; (800aab4 <HAL_DMA_IRQHandler+0x6a0>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d036      	beq.n	800a92a <HAL_DMA_IRQHandler+0x516>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a7d      	ldr	r2, [pc, #500]	; (800aab8 <HAL_DMA_IRQHandler+0x6a4>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d031      	beq.n	800a92a <HAL_DMA_IRQHandler+0x516>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a7c      	ldr	r2, [pc, #496]	; (800aabc <HAL_DMA_IRQHandler+0x6a8>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d02c      	beq.n	800a92a <HAL_DMA_IRQHandler+0x516>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a7a      	ldr	r2, [pc, #488]	; (800aac0 <HAL_DMA_IRQHandler+0x6ac>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d027      	beq.n	800a92a <HAL_DMA_IRQHandler+0x516>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a79      	ldr	r2, [pc, #484]	; (800aac4 <HAL_DMA_IRQHandler+0x6b0>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d022      	beq.n	800a92a <HAL_DMA_IRQHandler+0x516>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a77      	ldr	r2, [pc, #476]	; (800aac8 <HAL_DMA_IRQHandler+0x6b4>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d01d      	beq.n	800a92a <HAL_DMA_IRQHandler+0x516>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a76      	ldr	r2, [pc, #472]	; (800aacc <HAL_DMA_IRQHandler+0x6b8>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d018      	beq.n	800a92a <HAL_DMA_IRQHandler+0x516>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a74      	ldr	r2, [pc, #464]	; (800aad0 <HAL_DMA_IRQHandler+0x6bc>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d013      	beq.n	800a92a <HAL_DMA_IRQHandler+0x516>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a73      	ldr	r2, [pc, #460]	; (800aad4 <HAL_DMA_IRQHandler+0x6c0>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d00e      	beq.n	800a92a <HAL_DMA_IRQHandler+0x516>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a71      	ldr	r2, [pc, #452]	; (800aad8 <HAL_DMA_IRQHandler+0x6c4>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d009      	beq.n	800a92a <HAL_DMA_IRQHandler+0x516>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a70      	ldr	r2, [pc, #448]	; (800aadc <HAL_DMA_IRQHandler+0x6c8>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d004      	beq.n	800a92a <HAL_DMA_IRQHandler+0x516>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a6e      	ldr	r2, [pc, #440]	; (800aae0 <HAL_DMA_IRQHandler+0x6cc>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d10a      	bne.n	800a940 <HAL_DMA_IRQHandler+0x52c>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 0308 	and.w	r3, r3, #8
 800a934:	2b00      	cmp	r3, #0
 800a936:	bf14      	ite	ne
 800a938:	2301      	movne	r3, #1
 800a93a:	2300      	moveq	r3, #0
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	e009      	b.n	800a954 <HAL_DMA_IRQHandler+0x540>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0304 	and.w	r3, r3, #4
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	bf14      	ite	ne
 800a94e:	2301      	movne	r3, #1
 800a950:	2300      	moveq	r3, #0
 800a952:	b2db      	uxtb	r3, r3
 800a954:	2b00      	cmp	r3, #0
 800a956:	d03e      	beq.n	800a9d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a95c:	f003 031f 	and.w	r3, r3, #31
 800a960:	2210      	movs	r2, #16
 800a962:	409a      	lsls	r2, r3
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a972:	2b00      	cmp	r3, #0
 800a974:	d018      	beq.n	800a9a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a980:	2b00      	cmp	r3, #0
 800a982:	d108      	bne.n	800a996 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d024      	beq.n	800a9d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	4798      	blx	r3
 800a994:	e01f      	b.n	800a9d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d01b      	beq.n	800a9d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	4798      	blx	r3
 800a9a6:	e016      	b.n	800a9d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d107      	bne.n	800a9c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f022 0208 	bic.w	r2, r2, #8
 800a9c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9da:	f003 031f 	and.w	r3, r3, #31
 800a9de:	2220      	movs	r2, #32
 800a9e0:	409a      	lsls	r2, r3
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	4013      	ands	r3, r2
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f000 8110 	beq.w	800ac0c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a2c      	ldr	r2, [pc, #176]	; (800aaa4 <HAL_DMA_IRQHandler+0x690>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d04a      	beq.n	800aa8c <HAL_DMA_IRQHandler+0x678>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a2b      	ldr	r2, [pc, #172]	; (800aaa8 <HAL_DMA_IRQHandler+0x694>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d045      	beq.n	800aa8c <HAL_DMA_IRQHandler+0x678>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a29      	ldr	r2, [pc, #164]	; (800aaac <HAL_DMA_IRQHandler+0x698>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d040      	beq.n	800aa8c <HAL_DMA_IRQHandler+0x678>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a28      	ldr	r2, [pc, #160]	; (800aab0 <HAL_DMA_IRQHandler+0x69c>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d03b      	beq.n	800aa8c <HAL_DMA_IRQHandler+0x678>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a26      	ldr	r2, [pc, #152]	; (800aab4 <HAL_DMA_IRQHandler+0x6a0>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d036      	beq.n	800aa8c <HAL_DMA_IRQHandler+0x678>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a25      	ldr	r2, [pc, #148]	; (800aab8 <HAL_DMA_IRQHandler+0x6a4>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d031      	beq.n	800aa8c <HAL_DMA_IRQHandler+0x678>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a23      	ldr	r2, [pc, #140]	; (800aabc <HAL_DMA_IRQHandler+0x6a8>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d02c      	beq.n	800aa8c <HAL_DMA_IRQHandler+0x678>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a22      	ldr	r2, [pc, #136]	; (800aac0 <HAL_DMA_IRQHandler+0x6ac>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d027      	beq.n	800aa8c <HAL_DMA_IRQHandler+0x678>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a20      	ldr	r2, [pc, #128]	; (800aac4 <HAL_DMA_IRQHandler+0x6b0>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d022      	beq.n	800aa8c <HAL_DMA_IRQHandler+0x678>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a1f      	ldr	r2, [pc, #124]	; (800aac8 <HAL_DMA_IRQHandler+0x6b4>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d01d      	beq.n	800aa8c <HAL_DMA_IRQHandler+0x678>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a1d      	ldr	r2, [pc, #116]	; (800aacc <HAL_DMA_IRQHandler+0x6b8>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d018      	beq.n	800aa8c <HAL_DMA_IRQHandler+0x678>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a1c      	ldr	r2, [pc, #112]	; (800aad0 <HAL_DMA_IRQHandler+0x6bc>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d013      	beq.n	800aa8c <HAL_DMA_IRQHandler+0x678>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a1a      	ldr	r2, [pc, #104]	; (800aad4 <HAL_DMA_IRQHandler+0x6c0>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d00e      	beq.n	800aa8c <HAL_DMA_IRQHandler+0x678>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a19      	ldr	r2, [pc, #100]	; (800aad8 <HAL_DMA_IRQHandler+0x6c4>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d009      	beq.n	800aa8c <HAL_DMA_IRQHandler+0x678>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a17      	ldr	r2, [pc, #92]	; (800aadc <HAL_DMA_IRQHandler+0x6c8>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d004      	beq.n	800aa8c <HAL_DMA_IRQHandler+0x678>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a16      	ldr	r2, [pc, #88]	; (800aae0 <HAL_DMA_IRQHandler+0x6cc>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d12b      	bne.n	800aae4 <HAL_DMA_IRQHandler+0x6d0>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 0310 	and.w	r3, r3, #16
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	bf14      	ite	ne
 800aa9a:	2301      	movne	r3, #1
 800aa9c:	2300      	moveq	r3, #0
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	e02a      	b.n	800aaf8 <HAL_DMA_IRQHandler+0x6e4>
 800aaa2:	bf00      	nop
 800aaa4:	40020010 	.word	0x40020010
 800aaa8:	40020028 	.word	0x40020028
 800aaac:	40020040 	.word	0x40020040
 800aab0:	40020058 	.word	0x40020058
 800aab4:	40020070 	.word	0x40020070
 800aab8:	40020088 	.word	0x40020088
 800aabc:	400200a0 	.word	0x400200a0
 800aac0:	400200b8 	.word	0x400200b8
 800aac4:	40020410 	.word	0x40020410
 800aac8:	40020428 	.word	0x40020428
 800aacc:	40020440 	.word	0x40020440
 800aad0:	40020458 	.word	0x40020458
 800aad4:	40020470 	.word	0x40020470
 800aad8:	40020488 	.word	0x40020488
 800aadc:	400204a0 	.word	0x400204a0
 800aae0:	400204b8 	.word	0x400204b8
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 0302 	and.w	r3, r3, #2
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	bf14      	ite	ne
 800aaf2:	2301      	movne	r3, #1
 800aaf4:	2300      	moveq	r3, #0
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f000 8087 	beq.w	800ac0c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab02:	f003 031f 	and.w	r3, r3, #31
 800ab06:	2220      	movs	r2, #32
 800ab08:	409a      	lsls	r2, r3
 800ab0a:	6a3b      	ldr	r3, [r7, #32]
 800ab0c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	2b04      	cmp	r3, #4
 800ab18:	d139      	bne.n	800ab8e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f022 0216 	bic.w	r2, r2, #22
 800ab28:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	695a      	ldr	r2, [r3, #20]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab38:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d103      	bne.n	800ab4a <HAL_DMA_IRQHandler+0x736>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d007      	beq.n	800ab5a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f022 0208 	bic.w	r2, r2, #8
 800ab58:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab5e:	f003 031f 	and.w	r3, r3, #31
 800ab62:	223f      	movs	r2, #63	; 0x3f
 800ab64:	409a      	lsls	r2, r3
 800ab66:	6a3b      	ldr	r3, [r7, #32]
 800ab68:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	f000 834a 	beq.w	800b218 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	4798      	blx	r3
          }
          return;
 800ab8c:	e344      	b.n	800b218 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d018      	beq.n	800abce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d108      	bne.n	800abbc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d02c      	beq.n	800ac0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	4798      	blx	r3
 800abba:	e027      	b.n	800ac0c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d023      	beq.n	800ac0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	4798      	blx	r3
 800abcc:	e01e      	b.n	800ac0c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10f      	bne.n	800abfc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f022 0210 	bic.w	r2, r2, #16
 800abea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d003      	beq.n	800ac0c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f000 8306 	beq.w	800b222 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac1a:	f003 0301 	and.w	r3, r3, #1
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f000 8088 	beq.w	800ad34 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2204      	movs	r2, #4
 800ac28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a7a      	ldr	r2, [pc, #488]	; (800ae1c <HAL_DMA_IRQHandler+0xa08>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d04a      	beq.n	800accc <HAL_DMA_IRQHandler+0x8b8>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a79      	ldr	r2, [pc, #484]	; (800ae20 <HAL_DMA_IRQHandler+0xa0c>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d045      	beq.n	800accc <HAL_DMA_IRQHandler+0x8b8>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a77      	ldr	r2, [pc, #476]	; (800ae24 <HAL_DMA_IRQHandler+0xa10>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d040      	beq.n	800accc <HAL_DMA_IRQHandler+0x8b8>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a76      	ldr	r2, [pc, #472]	; (800ae28 <HAL_DMA_IRQHandler+0xa14>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d03b      	beq.n	800accc <HAL_DMA_IRQHandler+0x8b8>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a74      	ldr	r2, [pc, #464]	; (800ae2c <HAL_DMA_IRQHandler+0xa18>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d036      	beq.n	800accc <HAL_DMA_IRQHandler+0x8b8>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a73      	ldr	r2, [pc, #460]	; (800ae30 <HAL_DMA_IRQHandler+0xa1c>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d031      	beq.n	800accc <HAL_DMA_IRQHandler+0x8b8>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a71      	ldr	r2, [pc, #452]	; (800ae34 <HAL_DMA_IRQHandler+0xa20>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d02c      	beq.n	800accc <HAL_DMA_IRQHandler+0x8b8>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a70      	ldr	r2, [pc, #448]	; (800ae38 <HAL_DMA_IRQHandler+0xa24>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d027      	beq.n	800accc <HAL_DMA_IRQHandler+0x8b8>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a6e      	ldr	r2, [pc, #440]	; (800ae3c <HAL_DMA_IRQHandler+0xa28>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d022      	beq.n	800accc <HAL_DMA_IRQHandler+0x8b8>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a6d      	ldr	r2, [pc, #436]	; (800ae40 <HAL_DMA_IRQHandler+0xa2c>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d01d      	beq.n	800accc <HAL_DMA_IRQHandler+0x8b8>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a6b      	ldr	r2, [pc, #428]	; (800ae44 <HAL_DMA_IRQHandler+0xa30>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d018      	beq.n	800accc <HAL_DMA_IRQHandler+0x8b8>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a6a      	ldr	r2, [pc, #424]	; (800ae48 <HAL_DMA_IRQHandler+0xa34>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d013      	beq.n	800accc <HAL_DMA_IRQHandler+0x8b8>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a68      	ldr	r2, [pc, #416]	; (800ae4c <HAL_DMA_IRQHandler+0xa38>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d00e      	beq.n	800accc <HAL_DMA_IRQHandler+0x8b8>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a67      	ldr	r2, [pc, #412]	; (800ae50 <HAL_DMA_IRQHandler+0xa3c>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d009      	beq.n	800accc <HAL_DMA_IRQHandler+0x8b8>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a65      	ldr	r2, [pc, #404]	; (800ae54 <HAL_DMA_IRQHandler+0xa40>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d004      	beq.n	800accc <HAL_DMA_IRQHandler+0x8b8>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a64      	ldr	r2, [pc, #400]	; (800ae58 <HAL_DMA_IRQHandler+0xa44>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d108      	bne.n	800acde <HAL_DMA_IRQHandler+0x8ca>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f022 0201 	bic.w	r2, r2, #1
 800acda:	601a      	str	r2, [r3, #0]
 800acdc:	e007      	b.n	800acee <HAL_DMA_IRQHandler+0x8da>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f022 0201 	bic.w	r2, r2, #1
 800acec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	3301      	adds	r3, #1
 800acf2:	60fb      	str	r3, [r7, #12]
 800acf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d307      	bcc.n	800ad0a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0301 	and.w	r3, r3, #1
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1f2      	bne.n	800acee <HAL_DMA_IRQHandler+0x8da>
 800ad08:	e000      	b.n	800ad0c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800ad0a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 0301 	and.w	r3, r3, #1
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d004      	beq.n	800ad24 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2203      	movs	r2, #3
 800ad1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800ad22:	e003      	b.n	800ad2c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f000 8272 	beq.w	800b222 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	4798      	blx	r3
 800ad46:	e26c      	b.n	800b222 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a43      	ldr	r2, [pc, #268]	; (800ae5c <HAL_DMA_IRQHandler+0xa48>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d022      	beq.n	800ad98 <HAL_DMA_IRQHandler+0x984>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a42      	ldr	r2, [pc, #264]	; (800ae60 <HAL_DMA_IRQHandler+0xa4c>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d01d      	beq.n	800ad98 <HAL_DMA_IRQHandler+0x984>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a40      	ldr	r2, [pc, #256]	; (800ae64 <HAL_DMA_IRQHandler+0xa50>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d018      	beq.n	800ad98 <HAL_DMA_IRQHandler+0x984>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a3f      	ldr	r2, [pc, #252]	; (800ae68 <HAL_DMA_IRQHandler+0xa54>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d013      	beq.n	800ad98 <HAL_DMA_IRQHandler+0x984>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a3d      	ldr	r2, [pc, #244]	; (800ae6c <HAL_DMA_IRQHandler+0xa58>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d00e      	beq.n	800ad98 <HAL_DMA_IRQHandler+0x984>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a3c      	ldr	r2, [pc, #240]	; (800ae70 <HAL_DMA_IRQHandler+0xa5c>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d009      	beq.n	800ad98 <HAL_DMA_IRQHandler+0x984>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a3a      	ldr	r2, [pc, #232]	; (800ae74 <HAL_DMA_IRQHandler+0xa60>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d004      	beq.n	800ad98 <HAL_DMA_IRQHandler+0x984>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a39      	ldr	r2, [pc, #228]	; (800ae78 <HAL_DMA_IRQHandler+0xa64>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d101      	bne.n	800ad9c <HAL_DMA_IRQHandler+0x988>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e000      	b.n	800ad9e <HAL_DMA_IRQHandler+0x98a>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f000 823f 	beq.w	800b222 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adb0:	f003 031f 	and.w	r3, r3, #31
 800adb4:	2204      	movs	r2, #4
 800adb6:	409a      	lsls	r2, r3
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	4013      	ands	r3, r2
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f000 80cd 	beq.w	800af5c <HAL_DMA_IRQHandler+0xb48>
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	f003 0304 	and.w	r3, r3, #4
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f000 80c7 	beq.w	800af5c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800add2:	f003 031f 	and.w	r3, r3, #31
 800add6:	2204      	movs	r2, #4
 800add8:	409a      	lsls	r2, r3
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d049      	beq.n	800ae7c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ade8:	693b      	ldr	r3, [r7, #16]
 800adea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d109      	bne.n	800ae06 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f000 8210 	beq.w	800b21c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ae04:	e20a      	b.n	800b21c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 8206 	beq.w	800b21c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ae18:	e200      	b.n	800b21c <HAL_DMA_IRQHandler+0xe08>
 800ae1a:	bf00      	nop
 800ae1c:	40020010 	.word	0x40020010
 800ae20:	40020028 	.word	0x40020028
 800ae24:	40020040 	.word	0x40020040
 800ae28:	40020058 	.word	0x40020058
 800ae2c:	40020070 	.word	0x40020070
 800ae30:	40020088 	.word	0x40020088
 800ae34:	400200a0 	.word	0x400200a0
 800ae38:	400200b8 	.word	0x400200b8
 800ae3c:	40020410 	.word	0x40020410
 800ae40:	40020428 	.word	0x40020428
 800ae44:	40020440 	.word	0x40020440
 800ae48:	40020458 	.word	0x40020458
 800ae4c:	40020470 	.word	0x40020470
 800ae50:	40020488 	.word	0x40020488
 800ae54:	400204a0 	.word	0x400204a0
 800ae58:	400204b8 	.word	0x400204b8
 800ae5c:	58025408 	.word	0x58025408
 800ae60:	5802541c 	.word	0x5802541c
 800ae64:	58025430 	.word	0x58025430
 800ae68:	58025444 	.word	0x58025444
 800ae6c:	58025458 	.word	0x58025458
 800ae70:	5802546c 	.word	0x5802546c
 800ae74:	58025480 	.word	0x58025480
 800ae78:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	f003 0320 	and.w	r3, r3, #32
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d160      	bne.n	800af48 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a7f      	ldr	r2, [pc, #508]	; (800b088 <HAL_DMA_IRQHandler+0xc74>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d04a      	beq.n	800af26 <HAL_DMA_IRQHandler+0xb12>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a7d      	ldr	r2, [pc, #500]	; (800b08c <HAL_DMA_IRQHandler+0xc78>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d045      	beq.n	800af26 <HAL_DMA_IRQHandler+0xb12>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a7c      	ldr	r2, [pc, #496]	; (800b090 <HAL_DMA_IRQHandler+0xc7c>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d040      	beq.n	800af26 <HAL_DMA_IRQHandler+0xb12>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a7a      	ldr	r2, [pc, #488]	; (800b094 <HAL_DMA_IRQHandler+0xc80>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d03b      	beq.n	800af26 <HAL_DMA_IRQHandler+0xb12>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a79      	ldr	r2, [pc, #484]	; (800b098 <HAL_DMA_IRQHandler+0xc84>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d036      	beq.n	800af26 <HAL_DMA_IRQHandler+0xb12>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a77      	ldr	r2, [pc, #476]	; (800b09c <HAL_DMA_IRQHandler+0xc88>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d031      	beq.n	800af26 <HAL_DMA_IRQHandler+0xb12>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a76      	ldr	r2, [pc, #472]	; (800b0a0 <HAL_DMA_IRQHandler+0xc8c>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d02c      	beq.n	800af26 <HAL_DMA_IRQHandler+0xb12>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a74      	ldr	r2, [pc, #464]	; (800b0a4 <HAL_DMA_IRQHandler+0xc90>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d027      	beq.n	800af26 <HAL_DMA_IRQHandler+0xb12>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a73      	ldr	r2, [pc, #460]	; (800b0a8 <HAL_DMA_IRQHandler+0xc94>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d022      	beq.n	800af26 <HAL_DMA_IRQHandler+0xb12>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a71      	ldr	r2, [pc, #452]	; (800b0ac <HAL_DMA_IRQHandler+0xc98>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d01d      	beq.n	800af26 <HAL_DMA_IRQHandler+0xb12>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a70      	ldr	r2, [pc, #448]	; (800b0b0 <HAL_DMA_IRQHandler+0xc9c>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d018      	beq.n	800af26 <HAL_DMA_IRQHandler+0xb12>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a6e      	ldr	r2, [pc, #440]	; (800b0b4 <HAL_DMA_IRQHandler+0xca0>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d013      	beq.n	800af26 <HAL_DMA_IRQHandler+0xb12>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a6d      	ldr	r2, [pc, #436]	; (800b0b8 <HAL_DMA_IRQHandler+0xca4>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d00e      	beq.n	800af26 <HAL_DMA_IRQHandler+0xb12>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a6b      	ldr	r2, [pc, #428]	; (800b0bc <HAL_DMA_IRQHandler+0xca8>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d009      	beq.n	800af26 <HAL_DMA_IRQHandler+0xb12>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a6a      	ldr	r2, [pc, #424]	; (800b0c0 <HAL_DMA_IRQHandler+0xcac>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d004      	beq.n	800af26 <HAL_DMA_IRQHandler+0xb12>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a68      	ldr	r2, [pc, #416]	; (800b0c4 <HAL_DMA_IRQHandler+0xcb0>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d108      	bne.n	800af38 <HAL_DMA_IRQHandler+0xb24>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f022 0208 	bic.w	r2, r2, #8
 800af34:	601a      	str	r2, [r3, #0]
 800af36:	e007      	b.n	800af48 <HAL_DMA_IRQHandler+0xb34>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f022 0204 	bic.w	r2, r2, #4
 800af46:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f000 8165 	beq.w	800b21c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800af5a:	e15f      	b.n	800b21c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af60:	f003 031f 	and.w	r3, r3, #31
 800af64:	2202      	movs	r2, #2
 800af66:	409a      	lsls	r2, r3
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	4013      	ands	r3, r2
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f000 80c5 	beq.w	800b0fc <HAL_DMA_IRQHandler+0xce8>
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	f003 0302 	and.w	r3, r3, #2
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f000 80bf 	beq.w	800b0fc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af82:	f003 031f 	and.w	r3, r3, #31
 800af86:	2202      	movs	r2, #2
 800af88:	409a      	lsls	r2, r3
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af94:	2b00      	cmp	r3, #0
 800af96:	d018      	beq.n	800afca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d109      	bne.n	800afb6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 813a 	beq.w	800b220 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800afb4:	e134      	b.n	800b220 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 8130 	beq.w	800b220 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800afc8:	e12a      	b.n	800b220 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	f003 0320 	and.w	r3, r3, #32
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f040 8089 	bne.w	800b0e8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a2b      	ldr	r2, [pc, #172]	; (800b088 <HAL_DMA_IRQHandler+0xc74>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d04a      	beq.n	800b076 <HAL_DMA_IRQHandler+0xc62>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a29      	ldr	r2, [pc, #164]	; (800b08c <HAL_DMA_IRQHandler+0xc78>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d045      	beq.n	800b076 <HAL_DMA_IRQHandler+0xc62>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a28      	ldr	r2, [pc, #160]	; (800b090 <HAL_DMA_IRQHandler+0xc7c>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d040      	beq.n	800b076 <HAL_DMA_IRQHandler+0xc62>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a26      	ldr	r2, [pc, #152]	; (800b094 <HAL_DMA_IRQHandler+0xc80>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d03b      	beq.n	800b076 <HAL_DMA_IRQHandler+0xc62>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a25      	ldr	r2, [pc, #148]	; (800b098 <HAL_DMA_IRQHandler+0xc84>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d036      	beq.n	800b076 <HAL_DMA_IRQHandler+0xc62>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a23      	ldr	r2, [pc, #140]	; (800b09c <HAL_DMA_IRQHandler+0xc88>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d031      	beq.n	800b076 <HAL_DMA_IRQHandler+0xc62>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a22      	ldr	r2, [pc, #136]	; (800b0a0 <HAL_DMA_IRQHandler+0xc8c>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d02c      	beq.n	800b076 <HAL_DMA_IRQHandler+0xc62>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a20      	ldr	r2, [pc, #128]	; (800b0a4 <HAL_DMA_IRQHandler+0xc90>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d027      	beq.n	800b076 <HAL_DMA_IRQHandler+0xc62>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a1f      	ldr	r2, [pc, #124]	; (800b0a8 <HAL_DMA_IRQHandler+0xc94>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d022      	beq.n	800b076 <HAL_DMA_IRQHandler+0xc62>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a1d      	ldr	r2, [pc, #116]	; (800b0ac <HAL_DMA_IRQHandler+0xc98>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d01d      	beq.n	800b076 <HAL_DMA_IRQHandler+0xc62>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a1c      	ldr	r2, [pc, #112]	; (800b0b0 <HAL_DMA_IRQHandler+0xc9c>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d018      	beq.n	800b076 <HAL_DMA_IRQHandler+0xc62>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a1a      	ldr	r2, [pc, #104]	; (800b0b4 <HAL_DMA_IRQHandler+0xca0>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d013      	beq.n	800b076 <HAL_DMA_IRQHandler+0xc62>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a19      	ldr	r2, [pc, #100]	; (800b0b8 <HAL_DMA_IRQHandler+0xca4>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d00e      	beq.n	800b076 <HAL_DMA_IRQHandler+0xc62>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a17      	ldr	r2, [pc, #92]	; (800b0bc <HAL_DMA_IRQHandler+0xca8>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d009      	beq.n	800b076 <HAL_DMA_IRQHandler+0xc62>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a16      	ldr	r2, [pc, #88]	; (800b0c0 <HAL_DMA_IRQHandler+0xcac>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d004      	beq.n	800b076 <HAL_DMA_IRQHandler+0xc62>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a14      	ldr	r2, [pc, #80]	; (800b0c4 <HAL_DMA_IRQHandler+0xcb0>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d128      	bne.n	800b0c8 <HAL_DMA_IRQHandler+0xcb4>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f022 0214 	bic.w	r2, r2, #20
 800b084:	601a      	str	r2, [r3, #0]
 800b086:	e027      	b.n	800b0d8 <HAL_DMA_IRQHandler+0xcc4>
 800b088:	40020010 	.word	0x40020010
 800b08c:	40020028 	.word	0x40020028
 800b090:	40020040 	.word	0x40020040
 800b094:	40020058 	.word	0x40020058
 800b098:	40020070 	.word	0x40020070
 800b09c:	40020088 	.word	0x40020088
 800b0a0:	400200a0 	.word	0x400200a0
 800b0a4:	400200b8 	.word	0x400200b8
 800b0a8:	40020410 	.word	0x40020410
 800b0ac:	40020428 	.word	0x40020428
 800b0b0:	40020440 	.word	0x40020440
 800b0b4:	40020458 	.word	0x40020458
 800b0b8:	40020470 	.word	0x40020470
 800b0bc:	40020488 	.word	0x40020488
 800b0c0:	400204a0 	.word	0x400204a0
 800b0c4:	400204b8 	.word	0x400204b8
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f022 020a 	bic.w	r2, r2, #10
 800b0d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f000 8097 	beq.w	800b220 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b0fa:	e091      	b.n	800b220 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b100:	f003 031f 	and.w	r3, r3, #31
 800b104:	2208      	movs	r2, #8
 800b106:	409a      	lsls	r2, r3
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	4013      	ands	r3, r2
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f000 8088 	beq.w	800b222 <HAL_DMA_IRQHandler+0xe0e>
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	f003 0308 	and.w	r3, r3, #8
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f000 8082 	beq.w	800b222 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a41      	ldr	r2, [pc, #260]	; (800b228 <HAL_DMA_IRQHandler+0xe14>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d04a      	beq.n	800b1be <HAL_DMA_IRQHandler+0xdaa>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a3f      	ldr	r2, [pc, #252]	; (800b22c <HAL_DMA_IRQHandler+0xe18>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d045      	beq.n	800b1be <HAL_DMA_IRQHandler+0xdaa>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a3e      	ldr	r2, [pc, #248]	; (800b230 <HAL_DMA_IRQHandler+0xe1c>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d040      	beq.n	800b1be <HAL_DMA_IRQHandler+0xdaa>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a3c      	ldr	r2, [pc, #240]	; (800b234 <HAL_DMA_IRQHandler+0xe20>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d03b      	beq.n	800b1be <HAL_DMA_IRQHandler+0xdaa>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a3b      	ldr	r2, [pc, #236]	; (800b238 <HAL_DMA_IRQHandler+0xe24>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d036      	beq.n	800b1be <HAL_DMA_IRQHandler+0xdaa>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a39      	ldr	r2, [pc, #228]	; (800b23c <HAL_DMA_IRQHandler+0xe28>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d031      	beq.n	800b1be <HAL_DMA_IRQHandler+0xdaa>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a38      	ldr	r2, [pc, #224]	; (800b240 <HAL_DMA_IRQHandler+0xe2c>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d02c      	beq.n	800b1be <HAL_DMA_IRQHandler+0xdaa>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a36      	ldr	r2, [pc, #216]	; (800b244 <HAL_DMA_IRQHandler+0xe30>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d027      	beq.n	800b1be <HAL_DMA_IRQHandler+0xdaa>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a35      	ldr	r2, [pc, #212]	; (800b248 <HAL_DMA_IRQHandler+0xe34>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d022      	beq.n	800b1be <HAL_DMA_IRQHandler+0xdaa>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a33      	ldr	r2, [pc, #204]	; (800b24c <HAL_DMA_IRQHandler+0xe38>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d01d      	beq.n	800b1be <HAL_DMA_IRQHandler+0xdaa>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a32      	ldr	r2, [pc, #200]	; (800b250 <HAL_DMA_IRQHandler+0xe3c>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d018      	beq.n	800b1be <HAL_DMA_IRQHandler+0xdaa>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a30      	ldr	r2, [pc, #192]	; (800b254 <HAL_DMA_IRQHandler+0xe40>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d013      	beq.n	800b1be <HAL_DMA_IRQHandler+0xdaa>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a2f      	ldr	r2, [pc, #188]	; (800b258 <HAL_DMA_IRQHandler+0xe44>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d00e      	beq.n	800b1be <HAL_DMA_IRQHandler+0xdaa>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a2d      	ldr	r2, [pc, #180]	; (800b25c <HAL_DMA_IRQHandler+0xe48>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d009      	beq.n	800b1be <HAL_DMA_IRQHandler+0xdaa>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a2c      	ldr	r2, [pc, #176]	; (800b260 <HAL_DMA_IRQHandler+0xe4c>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d004      	beq.n	800b1be <HAL_DMA_IRQHandler+0xdaa>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a2a      	ldr	r2, [pc, #168]	; (800b264 <HAL_DMA_IRQHandler+0xe50>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d108      	bne.n	800b1d0 <HAL_DMA_IRQHandler+0xdbc>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f022 021c 	bic.w	r2, r2, #28
 800b1cc:	601a      	str	r2, [r3, #0]
 800b1ce:	e007      	b.n	800b1e0 <HAL_DMA_IRQHandler+0xdcc>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f022 020e 	bic.w	r2, r2, #14
 800b1de:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1e4:	f003 031f 	and.w	r3, r3, #31
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	409a      	lsls	r2, r3
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d009      	beq.n	800b222 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	4798      	blx	r3
 800b216:	e004      	b.n	800b222 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b218:	bf00      	nop
 800b21a:	e002      	b.n	800b222 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b21c:	bf00      	nop
 800b21e:	e000      	b.n	800b222 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b220:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b222:	3728      	adds	r7, #40	; 0x28
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	40020010 	.word	0x40020010
 800b22c:	40020028 	.word	0x40020028
 800b230:	40020040 	.word	0x40020040
 800b234:	40020058 	.word	0x40020058
 800b238:	40020070 	.word	0x40020070
 800b23c:	40020088 	.word	0x40020088
 800b240:	400200a0 	.word	0x400200a0
 800b244:	400200b8 	.word	0x400200b8
 800b248:	40020410 	.word	0x40020410
 800b24c:	40020428 	.word	0x40020428
 800b250:	40020440 	.word	0x40020440
 800b254:	40020458 	.word	0x40020458
 800b258:	40020470 	.word	0x40020470
 800b25c:	40020488 	.word	0x40020488
 800b260:	400204a0 	.word	0x400204a0
 800b264:	400204b8 	.word	0x400204b8

0800b268 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b276:	b2db      	uxtb	r3, r3
}
 800b278:	4618      	mov	r0, r3
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800b290:	4618      	mov	r0, r3
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b087      	sub	sp, #28
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	607a      	str	r2, [r7, #4]
 800b2a8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2b4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a7f      	ldr	r2, [pc, #508]	; (800b4b8 <DMA_SetConfig+0x21c>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d072      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a7d      	ldr	r2, [pc, #500]	; (800b4bc <DMA_SetConfig+0x220>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d06d      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a7c      	ldr	r2, [pc, #496]	; (800b4c0 <DMA_SetConfig+0x224>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d068      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a7a      	ldr	r2, [pc, #488]	; (800b4c4 <DMA_SetConfig+0x228>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d063      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a79      	ldr	r2, [pc, #484]	; (800b4c8 <DMA_SetConfig+0x22c>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d05e      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a77      	ldr	r2, [pc, #476]	; (800b4cc <DMA_SetConfig+0x230>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d059      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a76      	ldr	r2, [pc, #472]	; (800b4d0 <DMA_SetConfig+0x234>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d054      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a74      	ldr	r2, [pc, #464]	; (800b4d4 <DMA_SetConfig+0x238>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d04f      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a73      	ldr	r2, [pc, #460]	; (800b4d8 <DMA_SetConfig+0x23c>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d04a      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a71      	ldr	r2, [pc, #452]	; (800b4dc <DMA_SetConfig+0x240>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d045      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a70      	ldr	r2, [pc, #448]	; (800b4e0 <DMA_SetConfig+0x244>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d040      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a6e      	ldr	r2, [pc, #440]	; (800b4e4 <DMA_SetConfig+0x248>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d03b      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a6d      	ldr	r2, [pc, #436]	; (800b4e8 <DMA_SetConfig+0x24c>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d036      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a6b      	ldr	r2, [pc, #428]	; (800b4ec <DMA_SetConfig+0x250>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d031      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a6a      	ldr	r2, [pc, #424]	; (800b4f0 <DMA_SetConfig+0x254>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d02c      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a68      	ldr	r2, [pc, #416]	; (800b4f4 <DMA_SetConfig+0x258>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d027      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a67      	ldr	r2, [pc, #412]	; (800b4f8 <DMA_SetConfig+0x25c>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d022      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a65      	ldr	r2, [pc, #404]	; (800b4fc <DMA_SetConfig+0x260>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d01d      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a64      	ldr	r2, [pc, #400]	; (800b500 <DMA_SetConfig+0x264>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d018      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a62      	ldr	r2, [pc, #392]	; (800b504 <DMA_SetConfig+0x268>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d013      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a61      	ldr	r2, [pc, #388]	; (800b508 <DMA_SetConfig+0x26c>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d00e      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a5f      	ldr	r2, [pc, #380]	; (800b50c <DMA_SetConfig+0x270>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d009      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a5e      	ldr	r2, [pc, #376]	; (800b510 <DMA_SetConfig+0x274>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d004      	beq.n	800b3a6 <DMA_SetConfig+0x10a>
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a5c      	ldr	r2, [pc, #368]	; (800b514 <DMA_SetConfig+0x278>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d101      	bne.n	800b3aa <DMA_SetConfig+0x10e>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e000      	b.n	800b3ac <DMA_SetConfig+0x110>
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00d      	beq.n	800b3cc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b3b8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d004      	beq.n	800b3cc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3c6:	68fa      	ldr	r2, [r7, #12]
 800b3c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b3ca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a39      	ldr	r2, [pc, #228]	; (800b4b8 <DMA_SetConfig+0x21c>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d04a      	beq.n	800b46c <DMA_SetConfig+0x1d0>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a38      	ldr	r2, [pc, #224]	; (800b4bc <DMA_SetConfig+0x220>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d045      	beq.n	800b46c <DMA_SetConfig+0x1d0>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a36      	ldr	r2, [pc, #216]	; (800b4c0 <DMA_SetConfig+0x224>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d040      	beq.n	800b46c <DMA_SetConfig+0x1d0>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a35      	ldr	r2, [pc, #212]	; (800b4c4 <DMA_SetConfig+0x228>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d03b      	beq.n	800b46c <DMA_SetConfig+0x1d0>
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a33      	ldr	r2, [pc, #204]	; (800b4c8 <DMA_SetConfig+0x22c>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d036      	beq.n	800b46c <DMA_SetConfig+0x1d0>
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a32      	ldr	r2, [pc, #200]	; (800b4cc <DMA_SetConfig+0x230>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d031      	beq.n	800b46c <DMA_SetConfig+0x1d0>
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a30      	ldr	r2, [pc, #192]	; (800b4d0 <DMA_SetConfig+0x234>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d02c      	beq.n	800b46c <DMA_SetConfig+0x1d0>
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a2f      	ldr	r2, [pc, #188]	; (800b4d4 <DMA_SetConfig+0x238>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d027      	beq.n	800b46c <DMA_SetConfig+0x1d0>
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a2d      	ldr	r2, [pc, #180]	; (800b4d8 <DMA_SetConfig+0x23c>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d022      	beq.n	800b46c <DMA_SetConfig+0x1d0>
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a2c      	ldr	r2, [pc, #176]	; (800b4dc <DMA_SetConfig+0x240>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d01d      	beq.n	800b46c <DMA_SetConfig+0x1d0>
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a2a      	ldr	r2, [pc, #168]	; (800b4e0 <DMA_SetConfig+0x244>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d018      	beq.n	800b46c <DMA_SetConfig+0x1d0>
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a29      	ldr	r2, [pc, #164]	; (800b4e4 <DMA_SetConfig+0x248>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d013      	beq.n	800b46c <DMA_SetConfig+0x1d0>
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a27      	ldr	r2, [pc, #156]	; (800b4e8 <DMA_SetConfig+0x24c>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d00e      	beq.n	800b46c <DMA_SetConfig+0x1d0>
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4a26      	ldr	r2, [pc, #152]	; (800b4ec <DMA_SetConfig+0x250>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d009      	beq.n	800b46c <DMA_SetConfig+0x1d0>
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a24      	ldr	r2, [pc, #144]	; (800b4f0 <DMA_SetConfig+0x254>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d004      	beq.n	800b46c <DMA_SetConfig+0x1d0>
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a23      	ldr	r2, [pc, #140]	; (800b4f4 <DMA_SetConfig+0x258>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d101      	bne.n	800b470 <DMA_SetConfig+0x1d4>
 800b46c:	2301      	movs	r3, #1
 800b46e:	e000      	b.n	800b472 <DMA_SetConfig+0x1d6>
 800b470:	2300      	movs	r3, #0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d059      	beq.n	800b52a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b47a:	f003 031f 	and.w	r3, r3, #31
 800b47e:	223f      	movs	r2, #63	; 0x3f
 800b480:	409a      	lsls	r2, r3
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b494:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	683a      	ldr	r2, [r7, #0]
 800b49c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	2b40      	cmp	r3, #64	; 0x40
 800b4a4:	d138      	bne.n	800b518 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b4b6:	e086      	b.n	800b5c6 <DMA_SetConfig+0x32a>
 800b4b8:	40020010 	.word	0x40020010
 800b4bc:	40020028 	.word	0x40020028
 800b4c0:	40020040 	.word	0x40020040
 800b4c4:	40020058 	.word	0x40020058
 800b4c8:	40020070 	.word	0x40020070
 800b4cc:	40020088 	.word	0x40020088
 800b4d0:	400200a0 	.word	0x400200a0
 800b4d4:	400200b8 	.word	0x400200b8
 800b4d8:	40020410 	.word	0x40020410
 800b4dc:	40020428 	.word	0x40020428
 800b4e0:	40020440 	.word	0x40020440
 800b4e4:	40020458 	.word	0x40020458
 800b4e8:	40020470 	.word	0x40020470
 800b4ec:	40020488 	.word	0x40020488
 800b4f0:	400204a0 	.word	0x400204a0
 800b4f4:	400204b8 	.word	0x400204b8
 800b4f8:	58025408 	.word	0x58025408
 800b4fc:	5802541c 	.word	0x5802541c
 800b500:	58025430 	.word	0x58025430
 800b504:	58025444 	.word	0x58025444
 800b508:	58025458 	.word	0x58025458
 800b50c:	5802546c 	.word	0x5802546c
 800b510:	58025480 	.word	0x58025480
 800b514:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	60da      	str	r2, [r3, #12]
}
 800b528:	e04d      	b.n	800b5c6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a29      	ldr	r2, [pc, #164]	; (800b5d4 <DMA_SetConfig+0x338>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d022      	beq.n	800b57a <DMA_SetConfig+0x2de>
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a27      	ldr	r2, [pc, #156]	; (800b5d8 <DMA_SetConfig+0x33c>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d01d      	beq.n	800b57a <DMA_SetConfig+0x2de>
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a26      	ldr	r2, [pc, #152]	; (800b5dc <DMA_SetConfig+0x340>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d018      	beq.n	800b57a <DMA_SetConfig+0x2de>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a24      	ldr	r2, [pc, #144]	; (800b5e0 <DMA_SetConfig+0x344>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d013      	beq.n	800b57a <DMA_SetConfig+0x2de>
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a23      	ldr	r2, [pc, #140]	; (800b5e4 <DMA_SetConfig+0x348>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d00e      	beq.n	800b57a <DMA_SetConfig+0x2de>
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a21      	ldr	r2, [pc, #132]	; (800b5e8 <DMA_SetConfig+0x34c>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d009      	beq.n	800b57a <DMA_SetConfig+0x2de>
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a20      	ldr	r2, [pc, #128]	; (800b5ec <DMA_SetConfig+0x350>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d004      	beq.n	800b57a <DMA_SetConfig+0x2de>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a1e      	ldr	r2, [pc, #120]	; (800b5f0 <DMA_SetConfig+0x354>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d101      	bne.n	800b57e <DMA_SetConfig+0x2e2>
 800b57a:	2301      	movs	r3, #1
 800b57c:	e000      	b.n	800b580 <DMA_SetConfig+0x2e4>
 800b57e:	2300      	movs	r3, #0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d020      	beq.n	800b5c6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b588:	f003 031f 	and.w	r3, r3, #31
 800b58c:	2201      	movs	r2, #1
 800b58e:	409a      	lsls	r2, r3
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	683a      	ldr	r2, [r7, #0]
 800b59a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	2b40      	cmp	r3, #64	; 0x40
 800b5a2:	d108      	bne.n	800b5b6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68ba      	ldr	r2, [r7, #8]
 800b5b2:	60da      	str	r2, [r3, #12]
}
 800b5b4:	e007      	b.n	800b5c6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	68ba      	ldr	r2, [r7, #8]
 800b5bc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	60da      	str	r2, [r3, #12]
}
 800b5c6:	bf00      	nop
 800b5c8:	371c      	adds	r7, #28
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	58025408 	.word	0x58025408
 800b5d8:	5802541c 	.word	0x5802541c
 800b5dc:	58025430 	.word	0x58025430
 800b5e0:	58025444 	.word	0x58025444
 800b5e4:	58025458 	.word	0x58025458
 800b5e8:	5802546c 	.word	0x5802546c
 800b5ec:	58025480 	.word	0x58025480
 800b5f0:	58025494 	.word	0x58025494

0800b5f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a42      	ldr	r2, [pc, #264]	; (800b70c <DMA_CalcBaseAndBitshift+0x118>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d04a      	beq.n	800b69c <DMA_CalcBaseAndBitshift+0xa8>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a41      	ldr	r2, [pc, #260]	; (800b710 <DMA_CalcBaseAndBitshift+0x11c>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d045      	beq.n	800b69c <DMA_CalcBaseAndBitshift+0xa8>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a3f      	ldr	r2, [pc, #252]	; (800b714 <DMA_CalcBaseAndBitshift+0x120>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d040      	beq.n	800b69c <DMA_CalcBaseAndBitshift+0xa8>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a3e      	ldr	r2, [pc, #248]	; (800b718 <DMA_CalcBaseAndBitshift+0x124>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d03b      	beq.n	800b69c <DMA_CalcBaseAndBitshift+0xa8>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a3c      	ldr	r2, [pc, #240]	; (800b71c <DMA_CalcBaseAndBitshift+0x128>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d036      	beq.n	800b69c <DMA_CalcBaseAndBitshift+0xa8>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a3b      	ldr	r2, [pc, #236]	; (800b720 <DMA_CalcBaseAndBitshift+0x12c>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d031      	beq.n	800b69c <DMA_CalcBaseAndBitshift+0xa8>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a39      	ldr	r2, [pc, #228]	; (800b724 <DMA_CalcBaseAndBitshift+0x130>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d02c      	beq.n	800b69c <DMA_CalcBaseAndBitshift+0xa8>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a38      	ldr	r2, [pc, #224]	; (800b728 <DMA_CalcBaseAndBitshift+0x134>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d027      	beq.n	800b69c <DMA_CalcBaseAndBitshift+0xa8>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a36      	ldr	r2, [pc, #216]	; (800b72c <DMA_CalcBaseAndBitshift+0x138>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d022      	beq.n	800b69c <DMA_CalcBaseAndBitshift+0xa8>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a35      	ldr	r2, [pc, #212]	; (800b730 <DMA_CalcBaseAndBitshift+0x13c>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d01d      	beq.n	800b69c <DMA_CalcBaseAndBitshift+0xa8>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a33      	ldr	r2, [pc, #204]	; (800b734 <DMA_CalcBaseAndBitshift+0x140>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d018      	beq.n	800b69c <DMA_CalcBaseAndBitshift+0xa8>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a32      	ldr	r2, [pc, #200]	; (800b738 <DMA_CalcBaseAndBitshift+0x144>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d013      	beq.n	800b69c <DMA_CalcBaseAndBitshift+0xa8>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a30      	ldr	r2, [pc, #192]	; (800b73c <DMA_CalcBaseAndBitshift+0x148>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d00e      	beq.n	800b69c <DMA_CalcBaseAndBitshift+0xa8>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a2f      	ldr	r2, [pc, #188]	; (800b740 <DMA_CalcBaseAndBitshift+0x14c>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d009      	beq.n	800b69c <DMA_CalcBaseAndBitshift+0xa8>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a2d      	ldr	r2, [pc, #180]	; (800b744 <DMA_CalcBaseAndBitshift+0x150>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d004      	beq.n	800b69c <DMA_CalcBaseAndBitshift+0xa8>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a2c      	ldr	r2, [pc, #176]	; (800b748 <DMA_CalcBaseAndBitshift+0x154>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d101      	bne.n	800b6a0 <DMA_CalcBaseAndBitshift+0xac>
 800b69c:	2301      	movs	r3, #1
 800b69e:	e000      	b.n	800b6a2 <DMA_CalcBaseAndBitshift+0xae>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d024      	beq.n	800b6f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	3b10      	subs	r3, #16
 800b6ae:	4a27      	ldr	r2, [pc, #156]	; (800b74c <DMA_CalcBaseAndBitshift+0x158>)
 800b6b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b6b4:	091b      	lsrs	r3, r3, #4
 800b6b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f003 0307 	and.w	r3, r3, #7
 800b6be:	4a24      	ldr	r2, [pc, #144]	; (800b750 <DMA_CalcBaseAndBitshift+0x15c>)
 800b6c0:	5cd3      	ldrb	r3, [r2, r3]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2b03      	cmp	r3, #3
 800b6cc:	d908      	bls.n	800b6e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	4b1f      	ldr	r3, [pc, #124]	; (800b754 <DMA_CalcBaseAndBitshift+0x160>)
 800b6d6:	4013      	ands	r3, r2
 800b6d8:	1d1a      	adds	r2, r3, #4
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	659a      	str	r2, [r3, #88]	; 0x58
 800b6de:	e00d      	b.n	800b6fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	4b1b      	ldr	r3, [pc, #108]	; (800b754 <DMA_CalcBaseAndBitshift+0x160>)
 800b6e8:	4013      	ands	r3, r2
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	6593      	str	r3, [r2, #88]	; 0x58
 800b6ee:	e005      	b.n	800b6fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b700:	4618      	mov	r0, r3
 800b702:	3714      	adds	r7, #20
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	40020010 	.word	0x40020010
 800b710:	40020028 	.word	0x40020028
 800b714:	40020040 	.word	0x40020040
 800b718:	40020058 	.word	0x40020058
 800b71c:	40020070 	.word	0x40020070
 800b720:	40020088 	.word	0x40020088
 800b724:	400200a0 	.word	0x400200a0
 800b728:	400200b8 	.word	0x400200b8
 800b72c:	40020410 	.word	0x40020410
 800b730:	40020428 	.word	0x40020428
 800b734:	40020440 	.word	0x40020440
 800b738:	40020458 	.word	0x40020458
 800b73c:	40020470 	.word	0x40020470
 800b740:	40020488 	.word	0x40020488
 800b744:	400204a0 	.word	0x400204a0
 800b748:	400204b8 	.word	0x400204b8
 800b74c:	aaaaaaab 	.word	0xaaaaaaab
 800b750:	0801c4d4 	.word	0x0801c4d4
 800b754:	fffffc00 	.word	0xfffffc00

0800b758 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b758:	b480      	push	{r7}
 800b75a:	b085      	sub	sp, #20
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b760:	2300      	movs	r3, #0
 800b762:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	699b      	ldr	r3, [r3, #24]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d120      	bne.n	800b7ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b770:	2b03      	cmp	r3, #3
 800b772:	d858      	bhi.n	800b826 <DMA_CheckFifoParam+0xce>
 800b774:	a201      	add	r2, pc, #4	; (adr r2, 800b77c <DMA_CheckFifoParam+0x24>)
 800b776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b77a:	bf00      	nop
 800b77c:	0800b78d 	.word	0x0800b78d
 800b780:	0800b79f 	.word	0x0800b79f
 800b784:	0800b78d 	.word	0x0800b78d
 800b788:	0800b827 	.word	0x0800b827
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b794:	2b00      	cmp	r3, #0
 800b796:	d048      	beq.n	800b82a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800b798:	2301      	movs	r3, #1
 800b79a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b79c:	e045      	b.n	800b82a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b7a6:	d142      	bne.n	800b82e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b7ac:	e03f      	b.n	800b82e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	699b      	ldr	r3, [r3, #24]
 800b7b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7b6:	d123      	bne.n	800b800 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7bc:	2b03      	cmp	r3, #3
 800b7be:	d838      	bhi.n	800b832 <DMA_CheckFifoParam+0xda>
 800b7c0:	a201      	add	r2, pc, #4	; (adr r2, 800b7c8 <DMA_CheckFifoParam+0x70>)
 800b7c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c6:	bf00      	nop
 800b7c8:	0800b7d9 	.word	0x0800b7d9
 800b7cc:	0800b7df 	.word	0x0800b7df
 800b7d0:	0800b7d9 	.word	0x0800b7d9
 800b7d4:	0800b7f1 	.word	0x0800b7f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	73fb      	strb	r3, [r7, #15]
        break;
 800b7dc:	e030      	b.n	800b840 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d025      	beq.n	800b836 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b7ee:	e022      	b.n	800b836 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b7f8:	d11f      	bne.n	800b83a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b7fe:	e01c      	b.n	800b83a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b804:	2b02      	cmp	r3, #2
 800b806:	d902      	bls.n	800b80e <DMA_CheckFifoParam+0xb6>
 800b808:	2b03      	cmp	r3, #3
 800b80a:	d003      	beq.n	800b814 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800b80c:	e018      	b.n	800b840 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	73fb      	strb	r3, [r7, #15]
        break;
 800b812:	e015      	b.n	800b840 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00e      	beq.n	800b83e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b820:	2301      	movs	r3, #1
 800b822:	73fb      	strb	r3, [r7, #15]
    break;
 800b824:	e00b      	b.n	800b83e <DMA_CheckFifoParam+0xe6>
        break;
 800b826:	bf00      	nop
 800b828:	e00a      	b.n	800b840 <DMA_CheckFifoParam+0xe8>
        break;
 800b82a:	bf00      	nop
 800b82c:	e008      	b.n	800b840 <DMA_CheckFifoParam+0xe8>
        break;
 800b82e:	bf00      	nop
 800b830:	e006      	b.n	800b840 <DMA_CheckFifoParam+0xe8>
        break;
 800b832:	bf00      	nop
 800b834:	e004      	b.n	800b840 <DMA_CheckFifoParam+0xe8>
        break;
 800b836:	bf00      	nop
 800b838:	e002      	b.n	800b840 <DMA_CheckFifoParam+0xe8>
        break;
 800b83a:	bf00      	nop
 800b83c:	e000      	b.n	800b840 <DMA_CheckFifoParam+0xe8>
    break;
 800b83e:	bf00      	nop
    }
  }

  return status;
 800b840:	7bfb      	ldrb	r3, [r7, #15]
}
 800b842:	4618      	mov	r0, r3
 800b844:	3714      	adds	r7, #20
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop

0800b850 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a38      	ldr	r2, [pc, #224]	; (800b944 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d022      	beq.n	800b8ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a36      	ldr	r2, [pc, #216]	; (800b948 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d01d      	beq.n	800b8ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a35      	ldr	r2, [pc, #212]	; (800b94c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d018      	beq.n	800b8ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a33      	ldr	r2, [pc, #204]	; (800b950 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d013      	beq.n	800b8ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a32      	ldr	r2, [pc, #200]	; (800b954 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d00e      	beq.n	800b8ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a30      	ldr	r2, [pc, #192]	; (800b958 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d009      	beq.n	800b8ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a2f      	ldr	r2, [pc, #188]	; (800b95c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d004      	beq.n	800b8ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a2d      	ldr	r2, [pc, #180]	; (800b960 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d101      	bne.n	800b8b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e000      	b.n	800b8b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d01a      	beq.n	800b8ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	3b08      	subs	r3, #8
 800b8c0:	4a28      	ldr	r2, [pc, #160]	; (800b964 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c6:	091b      	lsrs	r3, r3, #4
 800b8c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	4b26      	ldr	r3, [pc, #152]	; (800b968 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b8ce:	4413      	add	r3, r2
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a24      	ldr	r2, [pc, #144]	; (800b96c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b8dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f003 031f 	and.w	r3, r3, #31
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	409a      	lsls	r2, r3
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b8ec:	e024      	b.n	800b938 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	3b10      	subs	r3, #16
 800b8f6:	4a1e      	ldr	r2, [pc, #120]	; (800b970 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b8f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b8fc:	091b      	lsrs	r3, r3, #4
 800b8fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	4a1c      	ldr	r2, [pc, #112]	; (800b974 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d806      	bhi.n	800b916 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	4a1b      	ldr	r2, [pc, #108]	; (800b978 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d902      	bls.n	800b916 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	3308      	adds	r3, #8
 800b914:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	4b18      	ldr	r3, [pc, #96]	; (800b97c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b91a:	4413      	add	r3, r2
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	461a      	mov	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4a16      	ldr	r2, [pc, #88]	; (800b980 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b928:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f003 031f 	and.w	r3, r3, #31
 800b930:	2201      	movs	r2, #1
 800b932:	409a      	lsls	r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b938:	bf00      	nop
 800b93a:	3714      	adds	r7, #20
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr
 800b944:	58025408 	.word	0x58025408
 800b948:	5802541c 	.word	0x5802541c
 800b94c:	58025430 	.word	0x58025430
 800b950:	58025444 	.word	0x58025444
 800b954:	58025458 	.word	0x58025458
 800b958:	5802546c 	.word	0x5802546c
 800b95c:	58025480 	.word	0x58025480
 800b960:	58025494 	.word	0x58025494
 800b964:	cccccccd 	.word	0xcccccccd
 800b968:	16009600 	.word	0x16009600
 800b96c:	58025880 	.word	0x58025880
 800b970:	aaaaaaab 	.word	0xaaaaaaab
 800b974:	400204b8 	.word	0x400204b8
 800b978:	4002040f 	.word	0x4002040f
 800b97c:	10008200 	.word	0x10008200
 800b980:	40020880 	.word	0x40020880

0800b984 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	b2db      	uxtb	r3, r3
 800b992:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d04a      	beq.n	800ba30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2b08      	cmp	r3, #8
 800b99e:	d847      	bhi.n	800ba30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a25      	ldr	r2, [pc, #148]	; (800ba3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d022      	beq.n	800b9f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a24      	ldr	r2, [pc, #144]	; (800ba40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d01d      	beq.n	800b9f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a22      	ldr	r2, [pc, #136]	; (800ba44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d018      	beq.n	800b9f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4a21      	ldr	r2, [pc, #132]	; (800ba48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d013      	beq.n	800b9f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a1f      	ldr	r2, [pc, #124]	; (800ba4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d00e      	beq.n	800b9f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4a1e      	ldr	r2, [pc, #120]	; (800ba50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d009      	beq.n	800b9f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a1c      	ldr	r2, [pc, #112]	; (800ba54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d004      	beq.n	800b9f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a1b      	ldr	r2, [pc, #108]	; (800ba58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d101      	bne.n	800b9f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e000      	b.n	800b9f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00a      	beq.n	800ba10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	4b17      	ldr	r3, [pc, #92]	; (800ba5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b9fe:	4413      	add	r3, r2
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	461a      	mov	r2, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a15      	ldr	r2, [pc, #84]	; (800ba60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800ba0c:	671a      	str	r2, [r3, #112]	; 0x70
 800ba0e:	e009      	b.n	800ba24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	4b14      	ldr	r3, [pc, #80]	; (800ba64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800ba14:	4413      	add	r3, r2
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	461a      	mov	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	4a11      	ldr	r2, [pc, #68]	; (800ba68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800ba22:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	3b01      	subs	r3, #1
 800ba28:	2201      	movs	r2, #1
 800ba2a:	409a      	lsls	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800ba30:	bf00      	nop
 800ba32:	3714      	adds	r7, #20
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr
 800ba3c:	58025408 	.word	0x58025408
 800ba40:	5802541c 	.word	0x5802541c
 800ba44:	58025430 	.word	0x58025430
 800ba48:	58025444 	.word	0x58025444
 800ba4c:	58025458 	.word	0x58025458
 800ba50:	5802546c 	.word	0x5802546c
 800ba54:	58025480 	.word	0x58025480
 800ba58:	58025494 	.word	0x58025494
 800ba5c:	1600963f 	.word	0x1600963f
 800ba60:	58025940 	.word	0x58025940
 800ba64:	1000823f 	.word	0x1000823f
 800ba68:	40020940 	.word	0x40020940

0800ba6c <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b08a      	sub	sp, #40	; 0x28
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800ba80:	2308      	movs	r3, #8
 800ba82:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ba84:	4b40      	ldr	r3, [pc, #256]	; (800bb88 <HAL_FLASH_Program+0x11c>)
 800ba86:	7d1b      	ldrb	r3, [r3, #20]
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d101      	bne.n	800ba90 <HAL_FLASH_Program+0x24>
 800ba8c:	2302      	movs	r3, #2
 800ba8e:	e076      	b.n	800bb7e <HAL_FLASH_Program+0x112>
 800ba90:	4b3d      	ldr	r3, [pc, #244]	; (800bb88 <HAL_FLASH_Program+0x11c>)
 800ba92:	2201      	movs	r2, #1
 800ba94:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba9c:	d306      	bcc.n	800baac <HAL_FLASH_Program+0x40>
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800baa4:	d202      	bcs.n	800baac <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800baa6:	2301      	movs	r3, #1
 800baa8:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800baaa:	e00c      	b.n	800bac6 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800bab2:	d306      	bcc.n	800bac2 <HAL_FLASH_Program+0x56>
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800baba:	d202      	bcs.n	800bac2 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800babc:	2302      	movs	r3, #2
 800babe:	61bb      	str	r3, [r7, #24]
 800bac0:	e001      	b.n	800bac6 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800bac2:	2301      	movs	r3, #1
 800bac4:	e05b      	b.n	800bb7e <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800bac6:	4b30      	ldr	r3, [pc, #192]	; (800bb88 <HAL_FLASH_Program+0x11c>)
 800bac8:	2200      	movs	r2, #0
 800baca:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800bacc:	69b9      	ldr	r1, [r7, #24]
 800bace:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bad2:	f000 fa5d 	bl	800bf90 <FLASH_WaitForLastOperation>
 800bad6:	4603      	mov	r3, r0
 800bad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800badc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d147      	bne.n	800bb74 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d106      	bne.n	800baf8 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800baea:	4b28      	ldr	r3, [pc, #160]	; (800bb8c <HAL_FLASH_Program+0x120>)
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	4a27      	ldr	r2, [pc, #156]	; (800bb8c <HAL_FLASH_Program+0x120>)
 800baf0:	f043 0302 	orr.w	r3, r3, #2
 800baf4:	60d3      	str	r3, [r2, #12]
 800baf6:	e007      	b.n	800bb08 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800baf8:	4b24      	ldr	r3, [pc, #144]	; (800bb8c <HAL_FLASH_Program+0x120>)
 800bafa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800bafe:	4a23      	ldr	r2, [pc, #140]	; (800bb8c <HAL_FLASH_Program+0x120>)
 800bb00:	f043 0302 	orr.w	r3, r3, #2
 800bb04:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800bb08:	f3bf 8f6f 	isb	sy
}
 800bb0c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800bb0e:	f3bf 8f4f 	dsb	sy
}
 800bb12:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	6a3b      	ldr	r3, [r7, #32]
 800bb1a:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800bb1c:	6a3b      	ldr	r3, [r7, #32]
 800bb1e:	3304      	adds	r3, #4
 800bb20:	623b      	str	r3, [r7, #32]
        src_addr++;
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	3304      	adds	r3, #4
 800bb26:	61fb      	str	r3, [r7, #28]
        row_index--;
 800bb28:	7dfb      	ldrb	r3, [r7, #23]
 800bb2a:	3b01      	subs	r3, #1
 800bb2c:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800bb2e:	7dfb      	ldrb	r3, [r7, #23]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d1ef      	bne.n	800bb14 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800bb34:	f3bf 8f6f 	isb	sy
}
 800bb38:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800bb3a:	f3bf 8f4f 	dsb	sy
}
 800bb3e:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800bb40:	69b9      	ldr	r1, [r7, #24]
 800bb42:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bb46:	f000 fa23 	bl	800bf90 <FLASH_WaitForLastOperation>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d106      	bne.n	800bb64 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800bb56:	4b0d      	ldr	r3, [pc, #52]	; (800bb8c <HAL_FLASH_Program+0x120>)
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	4a0c      	ldr	r2, [pc, #48]	; (800bb8c <HAL_FLASH_Program+0x120>)
 800bb5c:	f023 0302 	bic.w	r3, r3, #2
 800bb60:	60d3      	str	r3, [r2, #12]
 800bb62:	e007      	b.n	800bb74 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800bb64:	4b09      	ldr	r3, [pc, #36]	; (800bb8c <HAL_FLASH_Program+0x120>)
 800bb66:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800bb6a:	4a08      	ldr	r2, [pc, #32]	; (800bb8c <HAL_FLASH_Program+0x120>)
 800bb6c:	f023 0302 	bic.w	r3, r3, #2
 800bb70:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800bb74:	4b04      	ldr	r3, [pc, #16]	; (800bb88 <HAL_FLASH_Program+0x11c>)
 800bb76:	2200      	movs	r2, #0
 800bb78:	751a      	strb	r2, [r3, #20]

  return status;
 800bb7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3728      	adds	r7, #40	; 0x28
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	24002880 	.word	0x24002880
 800bb8c:	52002000 	.word	0x52002000

0800bb90 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
  uint32_t temp;
  uint32_t errorflag;
  FLASH_ProcedureTypeDef procedure;

  /* Check FLASH Bank1 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_SR_EOP) != RESET)
 800bb96:	4b7a      	ldr	r3, [pc, #488]	; (800bd80 <HAL_FLASH_IRQHandler+0x1f0>)
 800bb98:	691b      	ldr	r3, [r3, #16]
 800bb9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bba2:	d15c      	bne.n	800bc5e <HAL_FLASH_IRQHandler+0xce>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK1)
 800bba4:	4b77      	ldr	r3, [pc, #476]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d132      	bne.n	800bc14 <HAL_FLASH_IRQHandler+0x84>
    {
      /* Nb of sector to erased can be decreased */
      pFlash.NbSectorsToErase--;
 800bbae:	4b75      	ldr	r3, [pc, #468]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	4a73      	ldr	r2, [pc, #460]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bbb6:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase */
      if(pFlash.NbSectorsToErase != 0U)
 800bbb8:	4b72      	ldr	r3, [pc, #456]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d018      	beq.n	800bbf2 <HAL_FLASH_IRQHandler+0x62>
      {
        /* Indicate user which sector has been erased */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 800bbc0:	4b70      	ldr	r3, [pc, #448]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f000 f995 	bl	800bef4 <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 1 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800bbca:	4b6d      	ldr	r3, [pc, #436]	; (800bd80 <HAL_FLASH_IRQHandler+0x1f0>)
 800bbcc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bbd0:	615a      	str	r2, [r3, #20]

        /* Increment sector number */
        pFlash.Sector++;
 800bbd2:	4b6c      	ldr	r3, [pc, #432]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	4a6a      	ldr	r2, [pc, #424]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bbda:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
 800bbdc:	4b69      	ldr	r3, [pc, #420]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_1, pFlash.VoltageForErase);
 800bbe2:	4b68      	ldr	r3, [pc, #416]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	2101      	movs	r1, #1
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f000 fbd0 	bl	800c390 <FLASH_Erase_Sector>
 800bbf0:	e035      	b.n	800bc5e <HAL_FLASH_IRQHandler+0xce>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
 800bbf2:	4b64      	ldr	r3, [pc, #400]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bbf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbf8:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bbfa:	4b62      	ldr	r3, [pc, #392]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 800bc00:	4b60      	ldr	r3, [pc, #384]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	4618      	mov	r0, r3
 800bc06:	f000 f975 	bl	800bef4 <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800bc0a:	4b5d      	ldr	r3, [pc, #372]	; (800bd80 <HAL_FLASH_IRQHandler+0x1f0>)
 800bc0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bc10:	615a      	str	r2, [r3, #20]
 800bc12:	e024      	b.n	800bc5e <HAL_FLASH_IRQHandler+0xce>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
 800bc14:	4b5b      	ldr	r3, [pc, #364]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800bc1a:	7afb      	ldrb	r3, [r7, #11]
 800bc1c:	2b02      	cmp	r3, #2
 800bc1e:	d002      	beq.n	800bc26 <HAL_FLASH_IRQHandler+0x96>
 800bc20:	7afb      	ldrb	r3, [r7, #11]
 800bc22:	2b07      	cmp	r3, #7
 800bc24:	d103      	bne.n	800bc2e <HAL_FLASH_IRQHandler+0x9e>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_1);
 800bc26:	2001      	movs	r0, #1
 800bc28:	f000 f964 	bl	800bef4 <HAL_FLASH_EndOfOperationCallback>
 800bc2c:	e007      	b.n	800bc3e <HAL_FLASH_IRQHandler+0xae>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK1)
 800bc2e:	7afb      	ldrb	r3, [r7, #11]
 800bc30:	2b03      	cmp	r3, #3
 800bc32:	d104      	bne.n	800bc3e <HAL_FLASH_IRQHandler+0xae>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800bc34:	4b53      	ldr	r3, [pc, #332]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bc36:	691b      	ldr	r3, [r3, #16]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f000 f95b 	bl	800bef4 <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK2) && \
 800bc3e:	7afb      	ldrb	r3, [r7, #11]
 800bc40:	2b04      	cmp	r3, #4
 800bc42:	d00c      	beq.n	800bc5e <HAL_FLASH_IRQHandler+0xce>
 800bc44:	7afb      	ldrb	r3, [r7, #11]
 800bc46:	2b05      	cmp	r3, #5
 800bc48:	d009      	beq.n	800bc5e <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_MASSERASE_BANK2) && \
 800bc4a:	7afb      	ldrb	r3, [r7, #11]
 800bc4c:	2b06      	cmp	r3, #6
 800bc4e:	d006      	beq.n	800bc5e <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_PROGRAM_BANK2))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bc50:	4b4c      	ldr	r3, [pc, #304]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bc52:	2200      	movs	r2, #0
 800bc54:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800bc56:	4b4a      	ldr	r3, [pc, #296]	; (800bd80 <HAL_FLASH_IRQHandler+0x1f0>)
 800bc58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bc5c:	615a      	str	r2, [r3, #20]
    }
  }

#if defined (DUAL_BANK)
 /* Check FLASH Bank2 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK2(FLASH_SR_EOP) != RESET)
 800bc5e:	4b48      	ldr	r3, [pc, #288]	; (800bd80 <HAL_FLASH_IRQHandler+0x1f0>)
 800bc60:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bc64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc6c:	d15f      	bne.n	800bd2e <HAL_FLASH_IRQHandler+0x19e>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK2)
 800bc6e:	4b45      	ldr	r3, [pc, #276]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	2b04      	cmp	r3, #4
 800bc76:	d134      	bne.n	800bce2 <HAL_FLASH_IRQHandler+0x152>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800bc78:	4b42      	ldr	r3, [pc, #264]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	4a41      	ldr	r2, [pc, #260]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bc80:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800bc82:	4b40      	ldr	r3, [pc, #256]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d019      	beq.n	800bcbe <HAL_FLASH_IRQHandler+0x12e>
      {
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 800bc8a:	4b3e      	ldr	r3, [pc, #248]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f000 f930 	bl	800bef4 <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 2 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800bc94:	4b3a      	ldr	r3, [pc, #232]	; (800bd80 <HAL_FLASH_IRQHandler+0x1f0>)
 800bc96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bc9a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

        /*Increment sector number*/
        pFlash.Sector++;
 800bc9e:	4b39      	ldr	r3, [pc, #228]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	3301      	adds	r3, #1
 800bca4:	4a37      	ldr	r2, [pc, #220]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bca6:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
 800bca8:	4b36      	ldr	r3, [pc, #216]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_2, pFlash.VoltageForErase);
 800bcae:	4b35      	ldr	r3, [pc, #212]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	2102      	movs	r1, #2
 800bcb6:	68f8      	ldr	r0, [r7, #12]
 800bcb8:	f000 fb6a 	bl	800c390 <FLASH_Erase_Sector>
 800bcbc:	e037      	b.n	800bd2e <HAL_FLASH_IRQHandler+0x19e>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
 800bcbe:	4b31      	ldr	r3, [pc, #196]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bcc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bcc4:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bcc6:	4b2f      	ldr	r3, [pc, #188]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 800bccc:	4b2d      	ldr	r3, [pc, #180]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f000 f90f 	bl	800bef4 <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800bcd6:	4b2a      	ldr	r3, [pc, #168]	; (800bd80 <HAL_FLASH_IRQHandler+0x1f0>)
 800bcd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bcdc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800bce0:	e025      	b.n	800bd2e <HAL_FLASH_IRQHandler+0x19e>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
 800bce2:	4b28      	ldr	r3, [pc, #160]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800bce8:	7afb      	ldrb	r3, [r7, #11]
 800bcea:	2b05      	cmp	r3, #5
 800bcec:	d002      	beq.n	800bcf4 <HAL_FLASH_IRQHandler+0x164>
 800bcee:	7afb      	ldrb	r3, [r7, #11]
 800bcf0:	2b07      	cmp	r3, #7
 800bcf2:	d103      	bne.n	800bcfc <HAL_FLASH_IRQHandler+0x16c>
      {
        /*MassErase ended. Return the selected bank*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_2);
 800bcf4:	2002      	movs	r0, #2
 800bcf6:	f000 f8fd 	bl	800bef4 <HAL_FLASH_EndOfOperationCallback>
 800bcfa:	e007      	b.n	800bd0c <HAL_FLASH_IRQHandler+0x17c>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK2)
 800bcfc:	7afb      	ldrb	r3, [r7, #11]
 800bcfe:	2b06      	cmp	r3, #6
 800bd00:	d104      	bne.n	800bd0c <HAL_FLASH_IRQHandler+0x17c>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800bd02:	4b20      	ldr	r3, [pc, #128]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bd04:	691b      	ldr	r3, [r3, #16]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f000 f8f4 	bl	800bef4 <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK1) && \
 800bd0c:	7afb      	ldrb	r3, [r7, #11]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d00d      	beq.n	800bd2e <HAL_FLASH_IRQHandler+0x19e>
 800bd12:	7afb      	ldrb	r3, [r7, #11]
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d00a      	beq.n	800bd2e <HAL_FLASH_IRQHandler+0x19e>
         (procedure != FLASH_PROC_MASSERASE_BANK1) && \
 800bd18:	7afb      	ldrb	r3, [r7, #11]
 800bd1a:	2b03      	cmp	r3, #3
 800bd1c:	d007      	beq.n	800bd2e <HAL_FLASH_IRQHandler+0x19e>
         (procedure != FLASH_PROC_PROGRAM_BANK1))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bd1e:	4b19      	ldr	r3, [pc, #100]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bd20:	2200      	movs	r2, #0
 800bd22:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800bd24:	4b16      	ldr	r3, [pc, #88]	; (800bd80 <HAL_FLASH_IRQHandler+0x1f0>)
 800bd26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bd2a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  }
#endif /* DUAL_BANK */

  /* Check FLASH Bank1 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
 800bd2e:	4b14      	ldr	r3, [pc, #80]	; (800bd80 <HAL_FLASH_IRQHandler+0x1f0>)
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	f403 03dc 	and.w	r3, r3, #7208960	; 0x6e0000
 800bd36:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
                            FLASH_FLAG_INCERR_BANK1);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d02d      	beq.n	800bd9a <HAL_FLASH_IRQHandler+0x20a>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
 800bd3e:	4b11      	ldr	r3, [pc, #68]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bd40:	699a      	ldr	r2, [r3, #24]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4313      	orrs	r3, r2
 800bd46:	4a0f      	ldr	r2, [pc, #60]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bd48:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
 800bd4a:	4a0d      	ldr	r2, [pc, #52]	; (800bd80 <HAL_FLASH_IRQHandler+0x1f0>)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6153      	str	r3, [r2, #20]

    procedure = pFlash.ProcedureOnGoing;
 800bd50:	4b0c      	ldr	r3, [pc, #48]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	72fb      	strb	r3, [r7, #11]

    if(procedure == FLASH_PROC_SECTERASE_BANK1)
 800bd56:	7afb      	ldrb	r3, [r7, #11]
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d107      	bne.n	800bd6c <HAL_FLASH_IRQHandler+0x1dc>
    {
      /* Return the faulty sector */
      temp = pFlash.Sector;
 800bd5c:	4b09      	ldr	r3, [pc, #36]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 800bd62:	4b08      	ldr	r3, [pc, #32]	; (800bd84 <HAL_FLASH_IRQHandler+0x1f4>)
 800bd64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd68:	60da      	str	r2, [r3, #12]
 800bd6a:	e010      	b.n	800bd8e <HAL_FLASH_IRQHandler+0x1fe>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800bd6c:	7afb      	ldrb	r3, [r7, #11]
 800bd6e:	2b02      	cmp	r3, #2
 800bd70:	d002      	beq.n	800bd78 <HAL_FLASH_IRQHandler+0x1e8>
 800bd72:	7afb      	ldrb	r3, [r7, #11]
 800bd74:	2b07      	cmp	r3, #7
 800bd76:	d107      	bne.n	800bd88 <HAL_FLASH_IRQHandler+0x1f8>
    {
      /* Return the faulty bank */
      temp = FLASH_BANK_1;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	60fb      	str	r3, [r7, #12]
 800bd7c:	e007      	b.n	800bd8e <HAL_FLASH_IRQHandler+0x1fe>
 800bd7e:	bf00      	nop
 800bd80:	52002000 	.word	0x52002000
 800bd84:	24002880 	.word	0x24002880
    }
    else
    {
      /* Return the faulty address */
      temp = pFlash.Address;
 800bd88:	4b58      	ldr	r3, [pc, #352]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	60fb      	str	r3, [r7, #12]
    }

    /* Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bd8e:	4b57      	ldr	r3, [pc, #348]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800bd90:	2200      	movs	r2, #0
 800bd92:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f000 f8b7 	bl	800bf08 <HAL_FLASH_OperationErrorCallback>
  }

#if (USE_FLASH_ECC == 1U)
  /* Check FLASH Bank1 ECC single correction error flag */
  errorflag = FLASH->SR1 & FLASH_FLAG_SNECCERR_BANK1;
 800bd9a:	4b55      	ldr	r3, [pc, #340]	; (800bef0 <HAL_FLASH_IRQHandler+0x360>)
 800bd9c:	691b      	ldr	r3, [r3, #16]
 800bd9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bda2:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00a      	beq.n	800bdc0 <HAL_FLASH_IRQHandler+0x230>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
 800bdaa:	4b50      	ldr	r3, [pc, #320]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800bdac:	699a      	ldr	r2, [r3, #24]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	4a4e      	ldr	r2, [pc, #312]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800bdb4:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccCorrectionCallback();
 800bdb6:	f7f6 ffb9 	bl	8002d2c <HAL_FLASHEx_EccCorrectionCallback>

    /* Clear FLASH Bank1 ECC single correction error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
 800bdba:	4a4d      	ldr	r2, [pc, #308]	; (800bef0 <HAL_FLASH_IRQHandler+0x360>)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH Bank1 ECC double detection error flag */
  errorflag = FLASH->SR1 & FLASH_FLAG_DBECCERR_BANK1;
 800bdc0:	4b4b      	ldr	r3, [pc, #300]	; (800bef0 <HAL_FLASH_IRQHandler+0x360>)
 800bdc2:	691b      	ldr	r3, [r3, #16]
 800bdc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bdc8:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d00a      	beq.n	800bde6 <HAL_FLASH_IRQHandler+0x256>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
 800bdd0:	4b46      	ldr	r3, [pc, #280]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800bdd2:	699a      	ldr	r2, [r3, #24]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	4a44      	ldr	r2, [pc, #272]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800bdda:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccDetectionCallback();
 800bddc:	f7f6 ffb6 	bl	8002d4c <HAL_FLASHEx_EccDetectionCallback>

    /* Clear FLASH Bank1 ECC double detection error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
 800bde0:	4a43      	ldr	r2, [pc, #268]	; (800bef0 <HAL_FLASH_IRQHandler+0x360>)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6153      	str	r3, [r2, #20]
#endif /* USE_FLASH_ECC */

#if defined (DUAL_BANK)
  /* Check FLASH Bank2 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR2 & ((FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | FLASH_FLAG_STRBERR_BANK2 | \
 800bde6:	4b42      	ldr	r3, [pc, #264]	; (800bef0 <HAL_FLASH_IRQHandler+0x360>)
 800bde8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bdec:	f403 03dc 	and.w	r3, r3, #7208960	; 0x6e0000
 800bdf0:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR2 & ((FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | FLASH_FLAG_STRBERR_BANK2 | \
                             FLASH_FLAG_INCERR_BANK2) & 0x7FFFFFFFU);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d02d      	beq.n	800be54 <HAL_FLASH_IRQHandler+0x2c4>
  {
    /* Save the error code */
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
 800bdf8:	4b3c      	ldr	r3, [pc, #240]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800bdfa:	699a      	ldr	r2, [r3, #24]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800be04:	4a39      	ldr	r2, [pc, #228]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800be06:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
 800be08:	4a39      	ldr	r2, [pc, #228]	; (800bef0 <HAL_FLASH_IRQHandler+0x360>)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be10:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    procedure = pFlash.ProcedureOnGoing;
 800be14:	4b35      	ldr	r3, [pc, #212]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	72fb      	strb	r3, [r7, #11]

    if(procedure== FLASH_PROC_SECTERASE_BANK2)
 800be1a:	7afb      	ldrb	r3, [r7, #11]
 800be1c:	2b04      	cmp	r3, #4
 800be1e:	d107      	bne.n	800be30 <HAL_FLASH_IRQHandler+0x2a0>
    {
      /*return the faulty sector*/
      temp = pFlash.Sector;
 800be20:	4b32      	ldr	r3, [pc, #200]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 800be26:	4b31      	ldr	r3, [pc, #196]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800be28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be2c:	60da      	str	r2, [r3, #12]
 800be2e:	e00b      	b.n	800be48 <HAL_FLASH_IRQHandler+0x2b8>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800be30:	7afb      	ldrb	r3, [r7, #11]
 800be32:	2b05      	cmp	r3, #5
 800be34:	d002      	beq.n	800be3c <HAL_FLASH_IRQHandler+0x2ac>
 800be36:	7afb      	ldrb	r3, [r7, #11]
 800be38:	2b07      	cmp	r3, #7
 800be3a:	d102      	bne.n	800be42 <HAL_FLASH_IRQHandler+0x2b2>
    {
      /*return the faulty bank*/
      temp = FLASH_BANK_2;
 800be3c:	2302      	movs	r3, #2
 800be3e:	60fb      	str	r3, [r7, #12]
 800be40:	e002      	b.n	800be48 <HAL_FLASH_IRQHandler+0x2b8>
    }
    else
    {
      /*return the faulty address*/
      temp = pFlash.Address;
 800be42:	4b2a      	ldr	r3, [pc, #168]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	60fb      	str	r3, [r7, #12]
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800be48:	4b28      	ldr	r3, [pc, #160]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800be4a:	2200      	movs	r2, #0
 800be4c:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 800be4e:	68f8      	ldr	r0, [r7, #12]
 800be50:	f000 f85a 	bl	800bf08 <HAL_FLASH_OperationErrorCallback>
  }

#if (USE_FLASH_ECC == 1U)
  /* Check FLASH Bank2 ECC single correction error flag */
  errorflag = FLASH->SR2 & FLASH_FLAG_SNECCERR_BANK2;
 800be54:	4b26      	ldr	r3, [pc, #152]	; (800bef0 <HAL_FLASH_IRQHandler+0x360>)
 800be56:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800be5a:	f003 4302 	and.w	r3, r3, #2181038080	; 0x82000000
 800be5e:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d00f      	beq.n	800be86 <HAL_FLASH_IRQHandler+0x2f6>
  {
    /* Save the error code */
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
 800be66:	4b21      	ldr	r3, [pc, #132]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800be68:	699a      	ldr	r2, [r3, #24]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4313      	orrs	r3, r2
 800be6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800be72:	4a1e      	ldr	r2, [pc, #120]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800be74:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccCorrectionCallback();
 800be76:	f7f6 ff59 	bl	8002d2c <HAL_FLASHEx_EccCorrectionCallback>

    /* Clear FLASH Bank2 ECC single correction error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
 800be7a:	4a1d      	ldr	r2, [pc, #116]	; (800bef0 <HAL_FLASH_IRQHandler+0x360>)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be82:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  }

  /* Check FLASH Bank2 ECC double detection error flag */
  errorflag = FLASH->SR2 & FLASH_FLAG_DBECCERR_BANK2;
 800be86:	4b1a      	ldr	r3, [pc, #104]	; (800bef0 <HAL_FLASH_IRQHandler+0x360>)
 800be88:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800be8c:	f003 4304 	and.w	r3, r3, #2214592512	; 0x84000000
 800be90:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00f      	beq.n	800beb8 <HAL_FLASH_IRQHandler+0x328>
  {
    /* Save the error code */
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
 800be98:	4b14      	ldr	r3, [pc, #80]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800be9a:	699a      	ldr	r2, [r3, #24]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4313      	orrs	r3, r2
 800bea0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bea4:	4a11      	ldr	r2, [pc, #68]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800bea6:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccDetectionCallback();
 800bea8:	f7f6 ff50 	bl	8002d4c <HAL_FLASHEx_EccDetectionCallback>

    /* Clear FLASH Bank2 ECC double detection error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
 800beac:	4a10      	ldr	r2, [pc, #64]	; (800bef0 <HAL_FLASH_IRQHandler+0x360>)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800beb4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  }

#endif /* USE_FLASH_ECC */
#endif /* DUAL_BANK */

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800beb8:	4b0c      	ldr	r3, [pc, #48]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d110      	bne.n	800bee4 <HAL_FLASH_IRQHandler+0x354>
  {
#if defined (FLASH_CR_OPERRIE)
    /* Disable Bank1 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK1(FLASH_IT_EOP_BANK1    | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
 800bec2:	4b0b      	ldr	r3, [pc, #44]	; (800bef0 <HAL_FLASH_IRQHandler+0x360>)
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	4a0a      	ldr	r2, [pc, #40]	; (800bef0 <HAL_FLASH_IRQHandler+0x360>)
 800bec8:	f423 03de 	bic.w	r3, r3, #7274496	; 0x6f0000
 800becc:	60d3      	str	r3, [r2, #12]
                                 FLASH_IT_STRBERR_BANK1 | FLASH_IT_INCERR_BANK1 | FLASH_IT_OPERR_BANK1);

#if defined (DUAL_BANK)
    /* Disable Bank2 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK2(FLASH_IT_EOP_BANK2    | FLASH_IT_WRPERR_BANK2 | FLASH_IT_PGSERR_BANK2 | \
 800bece:	4b08      	ldr	r3, [pc, #32]	; (800bef0 <HAL_FLASH_IRQHandler+0x360>)
 800bed0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800bed4:	4a06      	ldr	r2, [pc, #24]	; (800bef0 <HAL_FLASH_IRQHandler+0x360>)
 800bed6:	f423 03de 	bic.w	r3, r3, #7274496	; 0x6f0000
 800beda:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
                                 FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* DUAL_BANK */
#endif /* FLASH_CR_OPERRIE */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800bede:	4b03      	ldr	r3, [pc, #12]	; (800beec <HAL_FLASH_IRQHandler+0x35c>)
 800bee0:	2200      	movs	r2, #0
 800bee2:	751a      	strb	r2, [r3, #20]
  }
}
 800bee4:	bf00      	nop
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	24002880 	.word	0x24002880
 800bef0:	52002000 	.word	0x52002000

0800bef4 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 800befc:	bf00      	nop
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 800bf10:	bf00      	nop
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800bf20:	4b18      	ldr	r3, [pc, #96]	; (800bf84 <HAL_FLASH_Unlock+0x68>)
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	f003 0301 	and.w	r3, r3, #1
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00d      	beq.n	800bf48 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800bf2c:	4b15      	ldr	r3, [pc, #84]	; (800bf84 <HAL_FLASH_Unlock+0x68>)
 800bf2e:	4a16      	ldr	r2, [pc, #88]	; (800bf88 <HAL_FLASH_Unlock+0x6c>)
 800bf30:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800bf32:	4b14      	ldr	r3, [pc, #80]	; (800bf84 <HAL_FLASH_Unlock+0x68>)
 800bf34:	4a15      	ldr	r2, [pc, #84]	; (800bf8c <HAL_FLASH_Unlock+0x70>)
 800bf36:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800bf38:	4b12      	ldr	r3, [pc, #72]	; (800bf84 <HAL_FLASH_Unlock+0x68>)
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	f003 0301 	and.w	r3, r3, #1
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d001      	beq.n	800bf48 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800bf44:	2301      	movs	r3, #1
 800bf46:	e018      	b.n	800bf7a <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800bf48:	4b0e      	ldr	r3, [pc, #56]	; (800bf84 <HAL_FLASH_Unlock+0x68>)
 800bf4a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800bf4e:	f003 0301 	and.w	r3, r3, #1
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d010      	beq.n	800bf78 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800bf56:	4b0b      	ldr	r3, [pc, #44]	; (800bf84 <HAL_FLASH_Unlock+0x68>)
 800bf58:	4a0b      	ldr	r2, [pc, #44]	; (800bf88 <HAL_FLASH_Unlock+0x6c>)
 800bf5a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800bf5e:	4b09      	ldr	r3, [pc, #36]	; (800bf84 <HAL_FLASH_Unlock+0x68>)
 800bf60:	4a0a      	ldr	r2, [pc, #40]	; (800bf8c <HAL_FLASH_Unlock+0x70>)
 800bf62:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800bf66:	4b07      	ldr	r3, [pc, #28]	; (800bf84 <HAL_FLASH_Unlock+0x68>)
 800bf68:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800bf6c:	f003 0301 	and.w	r3, r3, #1
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d001      	beq.n	800bf78 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800bf74:	2301      	movs	r3, #1
 800bf76:	e000      	b.n	800bf7a <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr
 800bf84:	52002000 	.word	0x52002000
 800bf88:	45670123 	.word	0x45670123
 800bf8c:	cdef89ab 	.word	0xcdef89ab

0800bf90 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b086      	sub	sp, #24
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800bf9a:	2304      	movs	r3, #4
 800bf9c:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800bfa2:	f7fa fde5 	bl	8006b70 <HAL_GetTick>
 800bfa6:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	2b02      	cmp	r3, #2
 800bfac:	d113      	bne.n	800bfd6 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800bfae:	4b41      	ldr	r3, [pc, #260]	; (800c0b4 <FLASH_WaitForLastOperation+0x124>)
 800bfb0:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800bfb2:	e010      	b.n	800bfd6 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfba:	d00c      	beq.n	800bfd6 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bfbc:	f7fa fdd8 	bl	8006b70 <HAL_GetTick>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	1ad3      	subs	r3, r2, r3
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d302      	bcc.n	800bfd2 <FLASH_WaitForLastOperation+0x42>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d101      	bne.n	800bfd6 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800bfd2:	2303      	movs	r3, #3
 800bfd4:	e06a      	b.n	800c0ac <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	4b37      	ldr	r3, [pc, #220]	; (800c0b8 <FLASH_WaitForLastOperation+0x128>)
 800bfda:	4013      	ands	r3, r2
 800bfdc:	697a      	ldr	r2, [r7, #20]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d10a      	bne.n	800bff8 <FLASH_WaitForLastOperation+0x68>
 800bfe2:	4b36      	ldr	r3, [pc, #216]	; (800c0bc <FLASH_WaitForLastOperation+0x12c>)
 800bfe4:	691a      	ldr	r2, [r3, #16]
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	4013      	ands	r3, r2
 800bfea:	697a      	ldr	r2, [r7, #20]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	bf0c      	ite	eq
 800bff0:	2301      	moveq	r3, #1
 800bff2:	2300      	movne	r3, #0
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	e00c      	b.n	800c012 <FLASH_WaitForLastOperation+0x82>
 800bff8:	4b30      	ldr	r3, [pc, #192]	; (800c0bc <FLASH_WaitForLastOperation+0x12c>)
 800bffa:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bffe:	43da      	mvns	r2, r3
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	4013      	ands	r3, r2
 800c004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c008:	2b00      	cmp	r3, #0
 800c00a:	bf0c      	ite	eq
 800c00c:	2301      	moveq	r3, #1
 800c00e:	2300      	movne	r3, #0
 800c010:	b2db      	uxtb	r3, r3
 800c012:	2b00      	cmp	r3, #0
 800c014:	d1ce      	bne.n	800bfb4 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d105      	bne.n	800c028 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800c01c:	4b27      	ldr	r3, [pc, #156]	; (800c0bc <FLASH_WaitForLastOperation+0x12c>)
 800c01e:	691a      	ldr	r2, [r3, #16]
 800c020:	4b27      	ldr	r3, [pc, #156]	; (800c0c0 <FLASH_WaitForLastOperation+0x130>)
 800c022:	4013      	ands	r3, r2
 800c024:	613b      	str	r3, [r7, #16]
 800c026:	e007      	b.n	800c038 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800c028:	4b24      	ldr	r3, [pc, #144]	; (800c0bc <FLASH_WaitForLastOperation+0x12c>)
 800c02a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800c02e:	4b24      	ldr	r3, [pc, #144]	; (800c0c0 <FLASH_WaitForLastOperation+0x130>)
 800c030:	4013      	ands	r3, r2
 800c032:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c036:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d017      	beq.n	800c072 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800c042:	4b20      	ldr	r3, [pc, #128]	; (800c0c4 <FLASH_WaitForLastOperation+0x134>)
 800c044:	699a      	ldr	r2, [r3, #24]
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	4313      	orrs	r3, r2
 800c04a:	4a1e      	ldr	r2, [pc, #120]	; (800c0c4 <FLASH_WaitForLastOperation+0x134>)
 800c04c:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800c04e:	693a      	ldr	r2, [r7, #16]
 800c050:	4b19      	ldr	r3, [pc, #100]	; (800c0b8 <FLASH_WaitForLastOperation+0x128>)
 800c052:	4013      	ands	r3, r2
 800c054:	693a      	ldr	r2, [r7, #16]
 800c056:	429a      	cmp	r2, r3
 800c058:	d103      	bne.n	800c062 <FLASH_WaitForLastOperation+0xd2>
 800c05a:	4a18      	ldr	r2, [pc, #96]	; (800c0bc <FLASH_WaitForLastOperation+0x12c>)
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	6153      	str	r3, [r2, #20]
 800c060:	e005      	b.n	800c06e <FLASH_WaitForLastOperation+0xde>
 800c062:	4a16      	ldr	r2, [pc, #88]	; (800c0bc <FLASH_WaitForLastOperation+0x12c>)
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c06a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800c06e:	2301      	movs	r3, #1
 800c070:	e01c      	b.n	800c0ac <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d10b      	bne.n	800c090 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800c078:	4b10      	ldr	r3, [pc, #64]	; (800c0bc <FLASH_WaitForLastOperation+0x12c>)
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c084:	d111      	bne.n	800c0aa <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800c086:	4b0d      	ldr	r3, [pc, #52]	; (800c0bc <FLASH_WaitForLastOperation+0x12c>)
 800c088:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c08c:	615a      	str	r2, [r3, #20]
 800c08e:	e00c      	b.n	800c0aa <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800c090:	4b0a      	ldr	r3, [pc, #40]	; (800c0bc <FLASH_WaitForLastOperation+0x12c>)
 800c092:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800c096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c09a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c09e:	d104      	bne.n	800c0aa <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800c0a0:	4b06      	ldr	r3, [pc, #24]	; (800c0bc <FLASH_WaitForLastOperation+0x12c>)
 800c0a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c0a6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800c0aa:	2300      	movs	r3, #0
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3718      	adds	r7, #24
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	80000004 	.word	0x80000004
 800c0b8:	1fef000f 	.word	0x1fef000f
 800c0bc:	52002000 	.word	0x52002000
 800c0c0:	17ee0000 	.word	0x17ee0000
 800c0c4:	24002880 	.word	0x24002880

0800c0c8 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c0d6:	4b5e      	ldr	r3, [pc, #376]	; (800c250 <HAL_FLASHEx_Erase+0x188>)
 800c0d8:	7d1b      	ldrb	r3, [r3, #20]
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d101      	bne.n	800c0e2 <HAL_FLASHEx_Erase+0x1a>
 800c0de:	2302      	movs	r3, #2
 800c0e0:	e0b2      	b.n	800c248 <HAL_FLASHEx_Erase+0x180>
 800c0e2:	4b5b      	ldr	r3, [pc, #364]	; (800c250 <HAL_FLASHEx_Erase+0x188>)
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c0e8:	4b59      	ldr	r3, [pc, #356]	; (800c250 <HAL_FLASHEx_Erase+0x188>)
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	f003 0301 	and.w	r3, r3, #1
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d009      	beq.n	800c10e <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800c0fa:	2101      	movs	r1, #1
 800c0fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c100:	f7ff ff46 	bl	800bf90 <FLASH_WaitForLastOperation>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d001      	beq.n	800c10e <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	f003 0302 	and.w	r3, r3, #2
 800c116:	2b00      	cmp	r3, #0
 800c118:	d009      	beq.n	800c12e <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800c11a:	2102      	movs	r1, #2
 800c11c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c120:	f7ff ff36 	bl	800bf90 <FLASH_WaitForLastOperation>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d001      	beq.n	800c12e <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800c12a:	2301      	movs	r3, #1
 800c12c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800c12e:	7bfb      	ldrb	r3, [r7, #15]
 800c130:	2b00      	cmp	r3, #0
 800c132:	f040 8085 	bne.w	800c240 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d136      	bne.n	800c1ac <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	691a      	ldr	r2, [r3, #16]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	4619      	mov	r1, r3
 800c148:	4610      	mov	r0, r2
 800c14a:	f000 f8b7 	bl	800c2bc <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	f003 0301 	and.w	r3, r3, #1
 800c156:	2b00      	cmp	r3, #0
 800c158:	d00f      	beq.n	800c17a <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800c15a:	2101      	movs	r1, #1
 800c15c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c160:	f7ff ff16 	bl	800bf90 <FLASH_WaitForLastOperation>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d001      	beq.n	800c16e <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800c16e:	4b39      	ldr	r3, [pc, #228]	; (800c254 <HAL_FLASHEx_Erase+0x18c>)
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	4a38      	ldr	r2, [pc, #224]	; (800c254 <HAL_FLASHEx_Erase+0x18c>)
 800c174:	f023 0308 	bic.w	r3, r3, #8
 800c178:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	f003 0302 	and.w	r3, r3, #2
 800c182:	2b00      	cmp	r3, #0
 800c184:	d05c      	beq.n	800c240 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800c186:	2102      	movs	r1, #2
 800c188:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c18c:	f7ff ff00 	bl	800bf90 <FLASH_WaitForLastOperation>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d001      	beq.n	800c19a <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800c196:	2301      	movs	r3, #1
 800c198:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800c19a:	4b2e      	ldr	r3, [pc, #184]	; (800c254 <HAL_FLASHEx_Erase+0x18c>)
 800c19c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c1a0:	4a2c      	ldr	r2, [pc, #176]	; (800c254 <HAL_FLASHEx_Erase+0x18c>)
 800c1a2:	f023 0308 	bic.w	r3, r3, #8
 800c1a6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800c1aa:	e049      	b.n	800c240 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1b2:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	60bb      	str	r3, [r7, #8]
 800c1ba:	e039      	b.n	800c230 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6859      	ldr	r1, [r3, #4]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	691b      	ldr	r3, [r3, #16]
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	68b8      	ldr	r0, [r7, #8]
 800c1c8:	f000 f8e2 	bl	800c390 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	f003 0301 	and.w	r3, r3, #1
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d00c      	beq.n	800c1f2 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800c1d8:	2101      	movs	r1, #1
 800c1da:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c1de:	f7ff fed7 	bl	800bf90 <FLASH_WaitForLastOperation>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800c1e6:	4b1b      	ldr	r3, [pc, #108]	; (800c254 <HAL_FLASHEx_Erase+0x18c>)
 800c1e8:	68da      	ldr	r2, [r3, #12]
 800c1ea:	491a      	ldr	r1, [pc, #104]	; (800c254 <HAL_FLASHEx_Erase+0x18c>)
 800c1ec:	4b1a      	ldr	r3, [pc, #104]	; (800c258 <HAL_FLASHEx_Erase+0x190>)
 800c1ee:	4013      	ands	r3, r2
 800c1f0:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	f003 0302 	and.w	r3, r3, #2
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00e      	beq.n	800c21c <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800c1fe:	2102      	movs	r1, #2
 800c200:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c204:	f7ff fec4 	bl	800bf90 <FLASH_WaitForLastOperation>
 800c208:	4603      	mov	r3, r0
 800c20a:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800c20c:	4b11      	ldr	r3, [pc, #68]	; (800c254 <HAL_FLASHEx_Erase+0x18c>)
 800c20e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c212:	4910      	ldr	r1, [pc, #64]	; (800c254 <HAL_FLASHEx_Erase+0x18c>)
 800c214:	4b10      	ldr	r3, [pc, #64]	; (800c258 <HAL_FLASHEx_Erase+0x190>)
 800c216:	4013      	ands	r3, r2
 800c218:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800c21c:	7bfb      	ldrb	r3, [r7, #15]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d003      	beq.n	800c22a <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	601a      	str	r2, [r3, #0]
          break;
 800c228:	e00a      	b.n	800c240 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	3301      	adds	r3, #1
 800c22e:	60bb      	str	r3, [r7, #8]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	68da      	ldr	r2, [r3, #12]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	689b      	ldr	r3, [r3, #8]
 800c238:	4413      	add	r3, r2
 800c23a:	68ba      	ldr	r2, [r7, #8]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d3bd      	bcc.n	800c1bc <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c240:	4b03      	ldr	r3, [pc, #12]	; (800c250 <HAL_FLASHEx_Erase+0x188>)
 800c242:	2200      	movs	r2, #0
 800c244:	751a      	strb	r2, [r3, #20]

  return status;
 800c246:	7bfb      	ldrb	r3, [r7, #15]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	24002880 	.word	0x24002880
 800c254:	52002000 	.word	0x52002000
 800c258:	fffff8fb 	.word	0xfffff8fb

0800c25c <HAL_FLASHEx_EnableEccCorrectionInterrupt>:
  * @brief  Enable ECC correction interrupts on FLASH BANK1 and BANK2.
  * @param  None
  * @retval None
  */
void HAL_FLASHEx_EnableEccCorrectionInterrupt(void)
{
 800c25c:	b480      	push	{r7}
 800c25e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ENABLE_IT(FLASH_IT_SNECCERR_BANK1);
 800c260:	4b09      	ldr	r3, [pc, #36]	; (800c288 <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	4a08      	ldr	r2, [pc, #32]	; (800c288 <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 800c266:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c26a:	60d3      	str	r3, [r2, #12]

#if defined (DUAL_BANK)
  __HAL_FLASH_ENABLE_IT(FLASH_IT_SNECCERR_BANK2);
 800c26c:	4b06      	ldr	r3, [pc, #24]	; (800c288 <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 800c26e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c272:	4a05      	ldr	r2, [pc, #20]	; (800c288 <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 800c274:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c278:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
#endif /* DUAL_BANK */
}
 800c27c:	bf00      	nop
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	52002000 	.word	0x52002000

0800c28c <HAL_FLASHEx_EnableEccDetectionInterrupt>:
  * @brief  Enable ECC Detection interrupts on FLASH BANK1 and BANK2.
  * @param  None
  * @retval None
  */
void HAL_FLASHEx_EnableEccDetectionInterrupt(void)
{
 800c28c:	b480      	push	{r7}
 800c28e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ENABLE_IT(FLASH_IT_DBECCERR_BANK1);
 800c290:	4b09      	ldr	r3, [pc, #36]	; (800c2b8 <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	4a08      	ldr	r2, [pc, #32]	; (800c2b8 <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 800c296:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c29a:	60d3      	str	r3, [r2, #12]

#if defined (DUAL_BANK)
  __HAL_FLASH_ENABLE_IT(FLASH_IT_DBECCERR_BANK2);
 800c29c:	4b06      	ldr	r3, [pc, #24]	; (800c2b8 <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 800c29e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c2a2:	4a05      	ldr	r2, [pc, #20]	; (800c2b8 <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 800c2a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c2a8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
#endif /* DUAL_BANK */
}
 800c2ac:	bf00      	nop
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr
 800c2b6:	bf00      	nop
 800c2b8:	52002000 	.word	0x52002000

0800c2bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b083      	sub	sp, #12
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	f003 0303 	and.w	r3, r3, #3
 800c2cc:	2b03      	cmp	r3, #3
 800c2ce:	d122      	bne.n	800c316 <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800c2d0:	4b2e      	ldr	r3, [pc, #184]	; (800c38c <FLASH_MassErase+0xd0>)
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	4a2d      	ldr	r2, [pc, #180]	; (800c38c <FLASH_MassErase+0xd0>)
 800c2d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c2da:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800c2dc:	4b2b      	ldr	r3, [pc, #172]	; (800c38c <FLASH_MassErase+0xd0>)
 800c2de:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c2e2:	4a2a      	ldr	r2, [pc, #168]	; (800c38c <FLASH_MassErase+0xd0>)
 800c2e4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c2e8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800c2ec:	4b27      	ldr	r3, [pc, #156]	; (800c38c <FLASH_MassErase+0xd0>)
 800c2ee:	68da      	ldr	r2, [r3, #12]
 800c2f0:	4926      	ldr	r1, [pc, #152]	; (800c38c <FLASH_MassErase+0xd0>)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800c2f8:	4b24      	ldr	r3, [pc, #144]	; (800c38c <FLASH_MassErase+0xd0>)
 800c2fa:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c2fe:	4923      	ldr	r1, [pc, #140]	; (800c38c <FLASH_MassErase+0xd0>)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4313      	orrs	r3, r2
 800c304:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800c308:	4b20      	ldr	r3, [pc, #128]	; (800c38c <FLASH_MassErase+0xd0>)
 800c30a:	699b      	ldr	r3, [r3, #24]
 800c30c:	4a1f      	ldr	r2, [pc, #124]	; (800c38c <FLASH_MassErase+0xd0>)
 800c30e:	f043 0310 	orr.w	r3, r3, #16
 800c312:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800c314:	e033      	b.n	800c37e <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	f003 0301 	and.w	r3, r3, #1
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d011      	beq.n	800c344 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800c320:	4b1a      	ldr	r3, [pc, #104]	; (800c38c <FLASH_MassErase+0xd0>)
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	4a19      	ldr	r2, [pc, #100]	; (800c38c <FLASH_MassErase+0xd0>)
 800c326:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c32a:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800c32c:	4b17      	ldr	r3, [pc, #92]	; (800c38c <FLASH_MassErase+0xd0>)
 800c32e:	68da      	ldr	r2, [r3, #12]
 800c330:	4916      	ldr	r1, [pc, #88]	; (800c38c <FLASH_MassErase+0xd0>)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4313      	orrs	r3, r2
 800c336:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800c338:	4b14      	ldr	r3, [pc, #80]	; (800c38c <FLASH_MassErase+0xd0>)
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	4a13      	ldr	r2, [pc, #76]	; (800c38c <FLASH_MassErase+0xd0>)
 800c33e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800c342:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	f003 0302 	and.w	r3, r3, #2
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d017      	beq.n	800c37e <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800c34e:	4b0f      	ldr	r3, [pc, #60]	; (800c38c <FLASH_MassErase+0xd0>)
 800c350:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c354:	4a0d      	ldr	r2, [pc, #52]	; (800c38c <FLASH_MassErase+0xd0>)
 800c356:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c35a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800c35e:	4b0b      	ldr	r3, [pc, #44]	; (800c38c <FLASH_MassErase+0xd0>)
 800c360:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c364:	4909      	ldr	r1, [pc, #36]	; (800c38c <FLASH_MassErase+0xd0>)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	4313      	orrs	r3, r2
 800c36a:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800c36e:	4b07      	ldr	r3, [pc, #28]	; (800c38c <FLASH_MassErase+0xd0>)
 800c370:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c374:	4a05      	ldr	r2, [pc, #20]	; (800c38c <FLASH_MassErase+0xd0>)
 800c376:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800c37a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800c37e:	bf00      	nop
 800c380:	370c      	adds	r7, #12
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	52002000 	.word	0x52002000

0800c390 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800c390:	b480      	push	{r7}
 800c392:	b085      	sub	sp, #20
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	f003 0301 	and.w	r3, r3, #1
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d010      	beq.n	800c3c8 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800c3a6:	4b18      	ldr	r3, [pc, #96]	; (800c408 <FLASH_Erase_Sector+0x78>)
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	4a17      	ldr	r2, [pc, #92]	; (800c408 <FLASH_Erase_Sector+0x78>)
 800c3ac:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800c3b0:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800c3b2:	4b15      	ldr	r3, [pc, #84]	; (800c408 <FLASH_Erase_Sector+0x78>)
 800c3b4:	68da      	ldr	r2, [r3, #12]
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	0219      	lsls	r1, r3, #8
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	430b      	orrs	r3, r1
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	4a11      	ldr	r2, [pc, #68]	; (800c408 <FLASH_Erase_Sector+0x78>)
 800c3c2:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800c3c6:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	f003 0302 	and.w	r3, r3, #2
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d014      	beq.n	800c3fc <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800c3d2:	4b0d      	ldr	r3, [pc, #52]	; (800c408 <FLASH_Erase_Sector+0x78>)
 800c3d4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c3d8:	4a0b      	ldr	r2, [pc, #44]	; (800c408 <FLASH_Erase_Sector+0x78>)
 800c3da:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800c3de:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800c3e2:	4b09      	ldr	r3, [pc, #36]	; (800c408 <FLASH_Erase_Sector+0x78>)
 800c3e4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	0219      	lsls	r1, r3, #8
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	430b      	orrs	r3, r1
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	4a05      	ldr	r2, [pc, #20]	; (800c408 <FLASH_Erase_Sector+0x78>)
 800c3f4:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800c3f8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800c3fc:	bf00      	nop
 800c3fe:	3714      	adds	r7, #20
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr
 800c408:	52002000 	.word	0x52002000

0800c40c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b089      	sub	sp, #36	; 0x24
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c416:	2300      	movs	r3, #0
 800c418:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800c41a:	4b89      	ldr	r3, [pc, #548]	; (800c640 <HAL_GPIO_Init+0x234>)
 800c41c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c41e:	e194      	b.n	800c74a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	681a      	ldr	r2, [r3, #0]
 800c424:	2101      	movs	r1, #1
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	fa01 f303 	lsl.w	r3, r1, r3
 800c42c:	4013      	ands	r3, r2
 800c42e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	2b00      	cmp	r3, #0
 800c434:	f000 8186 	beq.w	800c744 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	f003 0303 	and.w	r3, r3, #3
 800c440:	2b01      	cmp	r3, #1
 800c442:	d005      	beq.n	800c450 <HAL_GPIO_Init+0x44>
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	f003 0303 	and.w	r3, r3, #3
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d130      	bne.n	800c4b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	005b      	lsls	r3, r3, #1
 800c45a:	2203      	movs	r2, #3
 800c45c:	fa02 f303 	lsl.w	r3, r2, r3
 800c460:	43db      	mvns	r3, r3
 800c462:	69ba      	ldr	r2, [r7, #24]
 800c464:	4013      	ands	r3, r2
 800c466:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	68da      	ldr	r2, [r3, #12]
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	005b      	lsls	r3, r3, #1
 800c470:	fa02 f303 	lsl.w	r3, r2, r3
 800c474:	69ba      	ldr	r2, [r7, #24]
 800c476:	4313      	orrs	r3, r2
 800c478:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	69ba      	ldr	r2, [r7, #24]
 800c47e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c486:	2201      	movs	r2, #1
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	fa02 f303 	lsl.w	r3, r2, r3
 800c48e:	43db      	mvns	r3, r3
 800c490:	69ba      	ldr	r2, [r7, #24]
 800c492:	4013      	ands	r3, r2
 800c494:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	091b      	lsrs	r3, r3, #4
 800c49c:	f003 0201 	and.w	r2, r3, #1
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c4a6:	69ba      	ldr	r2, [r7, #24]
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	69ba      	ldr	r2, [r7, #24]
 800c4b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	f003 0303 	and.w	r3, r3, #3
 800c4ba:	2b03      	cmp	r3, #3
 800c4bc:	d017      	beq.n	800c4ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	005b      	lsls	r3, r3, #1
 800c4c8:	2203      	movs	r2, #3
 800c4ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ce:	43db      	mvns	r3, r3
 800c4d0:	69ba      	ldr	r2, [r7, #24]
 800c4d2:	4013      	ands	r3, r2
 800c4d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	689a      	ldr	r2, [r3, #8]
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	005b      	lsls	r3, r3, #1
 800c4de:	fa02 f303 	lsl.w	r3, r2, r3
 800c4e2:	69ba      	ldr	r2, [r7, #24]
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	69ba      	ldr	r2, [r7, #24]
 800c4ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	f003 0303 	and.w	r3, r3, #3
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	d123      	bne.n	800c542 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	08da      	lsrs	r2, r3, #3
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	3208      	adds	r2, #8
 800c502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	f003 0307 	and.w	r3, r3, #7
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	220f      	movs	r2, #15
 800c512:	fa02 f303 	lsl.w	r3, r2, r3
 800c516:	43db      	mvns	r3, r3
 800c518:	69ba      	ldr	r2, [r7, #24]
 800c51a:	4013      	ands	r3, r2
 800c51c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	691a      	ldr	r2, [r3, #16]
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	f003 0307 	and.w	r3, r3, #7
 800c528:	009b      	lsls	r3, r3, #2
 800c52a:	fa02 f303 	lsl.w	r3, r2, r3
 800c52e:	69ba      	ldr	r2, [r7, #24]
 800c530:	4313      	orrs	r3, r2
 800c532:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c534:	69fb      	ldr	r3, [r7, #28]
 800c536:	08da      	lsrs	r2, r3, #3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3208      	adds	r2, #8
 800c53c:	69b9      	ldr	r1, [r7, #24]
 800c53e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	005b      	lsls	r3, r3, #1
 800c54c:	2203      	movs	r2, #3
 800c54e:	fa02 f303 	lsl.w	r3, r2, r3
 800c552:	43db      	mvns	r3, r3
 800c554:	69ba      	ldr	r2, [r7, #24]
 800c556:	4013      	ands	r3, r2
 800c558:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	f003 0203 	and.w	r2, r3, #3
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	005b      	lsls	r3, r3, #1
 800c566:	fa02 f303 	lsl.w	r3, r2, r3
 800c56a:	69ba      	ldr	r2, [r7, #24]
 800c56c:	4313      	orrs	r3, r2
 800c56e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	69ba      	ldr	r2, [r7, #24]
 800c574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c57e:	2b00      	cmp	r3, #0
 800c580:	f000 80e0 	beq.w	800c744 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c584:	4b2f      	ldr	r3, [pc, #188]	; (800c644 <HAL_GPIO_Init+0x238>)
 800c586:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c58a:	4a2e      	ldr	r2, [pc, #184]	; (800c644 <HAL_GPIO_Init+0x238>)
 800c58c:	f043 0302 	orr.w	r3, r3, #2
 800c590:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800c594:	4b2b      	ldr	r3, [pc, #172]	; (800c644 <HAL_GPIO_Init+0x238>)
 800c596:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c59a:	f003 0302 	and.w	r3, r3, #2
 800c59e:	60fb      	str	r3, [r7, #12]
 800c5a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c5a2:	4a29      	ldr	r2, [pc, #164]	; (800c648 <HAL_GPIO_Init+0x23c>)
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	089b      	lsrs	r3, r3, #2
 800c5a8:	3302      	adds	r3, #2
 800c5aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	f003 0303 	and.w	r3, r3, #3
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	220f      	movs	r2, #15
 800c5ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c5be:	43db      	mvns	r3, r3
 800c5c0:	69ba      	ldr	r2, [r7, #24]
 800c5c2:	4013      	ands	r3, r2
 800c5c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	4a20      	ldr	r2, [pc, #128]	; (800c64c <HAL_GPIO_Init+0x240>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d052      	beq.n	800c674 <HAL_GPIO_Init+0x268>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4a1f      	ldr	r2, [pc, #124]	; (800c650 <HAL_GPIO_Init+0x244>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d031      	beq.n	800c63a <HAL_GPIO_Init+0x22e>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	4a1e      	ldr	r2, [pc, #120]	; (800c654 <HAL_GPIO_Init+0x248>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d02b      	beq.n	800c636 <HAL_GPIO_Init+0x22a>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	4a1d      	ldr	r2, [pc, #116]	; (800c658 <HAL_GPIO_Init+0x24c>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d025      	beq.n	800c632 <HAL_GPIO_Init+0x226>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4a1c      	ldr	r2, [pc, #112]	; (800c65c <HAL_GPIO_Init+0x250>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d01f      	beq.n	800c62e <HAL_GPIO_Init+0x222>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	4a1b      	ldr	r2, [pc, #108]	; (800c660 <HAL_GPIO_Init+0x254>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d019      	beq.n	800c62a <HAL_GPIO_Init+0x21e>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	4a1a      	ldr	r2, [pc, #104]	; (800c664 <HAL_GPIO_Init+0x258>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d013      	beq.n	800c626 <HAL_GPIO_Init+0x21a>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	4a19      	ldr	r2, [pc, #100]	; (800c668 <HAL_GPIO_Init+0x25c>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d00d      	beq.n	800c622 <HAL_GPIO_Init+0x216>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	4a18      	ldr	r2, [pc, #96]	; (800c66c <HAL_GPIO_Init+0x260>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d007      	beq.n	800c61e <HAL_GPIO_Init+0x212>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	4a17      	ldr	r2, [pc, #92]	; (800c670 <HAL_GPIO_Init+0x264>)
 800c612:	4293      	cmp	r3, r2
 800c614:	d101      	bne.n	800c61a <HAL_GPIO_Init+0x20e>
 800c616:	2309      	movs	r3, #9
 800c618:	e02d      	b.n	800c676 <HAL_GPIO_Init+0x26a>
 800c61a:	230a      	movs	r3, #10
 800c61c:	e02b      	b.n	800c676 <HAL_GPIO_Init+0x26a>
 800c61e:	2308      	movs	r3, #8
 800c620:	e029      	b.n	800c676 <HAL_GPIO_Init+0x26a>
 800c622:	2307      	movs	r3, #7
 800c624:	e027      	b.n	800c676 <HAL_GPIO_Init+0x26a>
 800c626:	2306      	movs	r3, #6
 800c628:	e025      	b.n	800c676 <HAL_GPIO_Init+0x26a>
 800c62a:	2305      	movs	r3, #5
 800c62c:	e023      	b.n	800c676 <HAL_GPIO_Init+0x26a>
 800c62e:	2304      	movs	r3, #4
 800c630:	e021      	b.n	800c676 <HAL_GPIO_Init+0x26a>
 800c632:	2303      	movs	r3, #3
 800c634:	e01f      	b.n	800c676 <HAL_GPIO_Init+0x26a>
 800c636:	2302      	movs	r3, #2
 800c638:	e01d      	b.n	800c676 <HAL_GPIO_Init+0x26a>
 800c63a:	2301      	movs	r3, #1
 800c63c:	e01b      	b.n	800c676 <HAL_GPIO_Init+0x26a>
 800c63e:	bf00      	nop
 800c640:	58000080 	.word	0x58000080
 800c644:	58024400 	.word	0x58024400
 800c648:	58000400 	.word	0x58000400
 800c64c:	58020000 	.word	0x58020000
 800c650:	58020400 	.word	0x58020400
 800c654:	58020800 	.word	0x58020800
 800c658:	58020c00 	.word	0x58020c00
 800c65c:	58021000 	.word	0x58021000
 800c660:	58021400 	.word	0x58021400
 800c664:	58021800 	.word	0x58021800
 800c668:	58021c00 	.word	0x58021c00
 800c66c:	58022000 	.word	0x58022000
 800c670:	58022400 	.word	0x58022400
 800c674:	2300      	movs	r3, #0
 800c676:	69fa      	ldr	r2, [r7, #28]
 800c678:	f002 0203 	and.w	r2, r2, #3
 800c67c:	0092      	lsls	r2, r2, #2
 800c67e:	4093      	lsls	r3, r2
 800c680:	69ba      	ldr	r2, [r7, #24]
 800c682:	4313      	orrs	r3, r2
 800c684:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c686:	4938      	ldr	r1, [pc, #224]	; (800c768 <HAL_GPIO_Init+0x35c>)
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	089b      	lsrs	r3, r3, #2
 800c68c:	3302      	adds	r3, #2
 800c68e:	69ba      	ldr	r2, [r7, #24]
 800c690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	43db      	mvns	r3, r3
 800c6a0:	69ba      	ldr	r2, [r7, #24]
 800c6a2:	4013      	ands	r3, r2
 800c6a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d003      	beq.n	800c6ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800c6b2:	69ba      	ldr	r2, [r7, #24]
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800c6ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c6be:	69bb      	ldr	r3, [r7, #24]
 800c6c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c6c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	43db      	mvns	r3, r3
 800c6ce:	69ba      	ldr	r2, [r7, #24]
 800c6d0:	4013      	ands	r3, r2
 800c6d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d003      	beq.n	800c6e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800c6e0:	69ba      	ldr	r2, [r7, #24]
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800c6e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c6ec:	69bb      	ldr	r3, [r7, #24]
 800c6ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	43db      	mvns	r3, r3
 800c6fa:	69ba      	ldr	r2, [r7, #24]
 800c6fc:	4013      	ands	r3, r2
 800c6fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d003      	beq.n	800c714 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800c70c:	69ba      	ldr	r2, [r7, #24]
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	4313      	orrs	r3, r2
 800c712:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	69ba      	ldr	r2, [r7, #24]
 800c718:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	43db      	mvns	r3, r3
 800c724:	69ba      	ldr	r2, [r7, #24]
 800c726:	4013      	ands	r3, r2
 800c728:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c732:	2b00      	cmp	r3, #0
 800c734:	d003      	beq.n	800c73e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800c736:	69ba      	ldr	r2, [r7, #24]
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	69ba      	ldr	r2, [r7, #24]
 800c742:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	3301      	adds	r3, #1
 800c748:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	fa22 f303 	lsr.w	r3, r2, r3
 800c754:	2b00      	cmp	r3, #0
 800c756:	f47f ae63 	bne.w	800c420 <HAL_GPIO_Init+0x14>
  }
}
 800c75a:	bf00      	nop
 800c75c:	bf00      	nop
 800c75e:	3724      	adds	r7, #36	; 0x24
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr
 800c768:	58000400 	.word	0x58000400

0800c76c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b085      	sub	sp, #20
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	460b      	mov	r3, r1
 800c776:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	691a      	ldr	r2, [r3, #16]
 800c77c:	887b      	ldrh	r3, [r7, #2]
 800c77e:	4013      	ands	r3, r2
 800c780:	2b00      	cmp	r3, #0
 800c782:	d002      	beq.n	800c78a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c784:	2301      	movs	r3, #1
 800c786:	73fb      	strb	r3, [r7, #15]
 800c788:	e001      	b.n	800c78e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c78a:	2300      	movs	r3, #0
 800c78c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3714      	adds	r7, #20
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	807b      	strh	r3, [r7, #2]
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c7ac:	787b      	ldrb	r3, [r7, #1]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d003      	beq.n	800c7ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c7b2:	887a      	ldrh	r2, [r7, #2]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800c7b8:	e003      	b.n	800c7c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800c7ba:	887b      	ldrh	r3, [r7, #2]
 800c7bc:	041a      	lsls	r2, r3, #16
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	619a      	str	r2, [r3, #24]
}
 800c7c2:	bf00      	nop
 800c7c4:	370c      	adds	r7, #12
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr
	...

0800c7d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d101      	bne.n	800c7e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e08b      	b.n	800c8fa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d106      	bne.n	800c7fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f7f6 f986 	bl	8002b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2224      	movs	r2, #36	; 0x24
 800c800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f022 0201 	bic.w	r2, r2, #1
 800c812:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	685a      	ldr	r2, [r3, #4]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c820:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	689a      	ldr	r2, [r3, #8]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c830:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	2b01      	cmp	r3, #1
 800c838:	d107      	bne.n	800c84a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	689a      	ldr	r2, [r3, #8]
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c846:	609a      	str	r2, [r3, #8]
 800c848:	e006      	b.n	800c858 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	689a      	ldr	r2, [r3, #8]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c856:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	2b02      	cmp	r3, #2
 800c85e:	d108      	bne.n	800c872 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	685a      	ldr	r2, [r3, #4]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c86e:	605a      	str	r2, [r3, #4]
 800c870:	e007      	b.n	800c882 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	685a      	ldr	r2, [r3, #4]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c880:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	6859      	ldr	r1, [r3, #4]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	4b1d      	ldr	r3, [pc, #116]	; (800c904 <HAL_I2C_Init+0x134>)
 800c88e:	430b      	orrs	r3, r1
 800c890:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	68da      	ldr	r2, [r3, #12]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c8a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	691a      	ldr	r2, [r3, #16]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	695b      	ldr	r3, [r3, #20]
 800c8aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	699b      	ldr	r3, [r3, #24]
 800c8b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	430a      	orrs	r2, r1
 800c8ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	69d9      	ldr	r1, [r3, #28]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6a1a      	ldr	r2, [r3, #32]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	430a      	orrs	r2, r1
 800c8ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f042 0201 	orr.w	r2, r2, #1
 800c8da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2220      	movs	r2, #32
 800c8e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	02008000 	.word	0x02008000

0800c908 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b08a      	sub	sp, #40	; 0x28
 800c90c:	af02      	add	r7, sp, #8
 800c90e:	60f8      	str	r0, [r7, #12]
 800c910:	607a      	str	r2, [r7, #4]
 800c912:	461a      	mov	r2, r3
 800c914:	460b      	mov	r3, r1
 800c916:	817b      	strh	r3, [r7, #10]
 800c918:	4613      	mov	r3, r2
 800c91a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800c91c:	2300      	movs	r3, #0
 800c91e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c926:	b2db      	uxtb	r3, r3
 800c928:	2b20      	cmp	r3, #32
 800c92a:	f040 80ef 	bne.w	800cb0c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	699b      	ldr	r3, [r3, #24]
 800c934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c93c:	d101      	bne.n	800c942 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800c93e:	2302      	movs	r3, #2
 800c940:	e0e5      	b.n	800cb0e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d101      	bne.n	800c950 <HAL_I2C_Master_Transmit_DMA+0x48>
 800c94c:	2302      	movs	r3, #2
 800c94e:	e0de      	b.n	800cb0e <HAL_I2C_Master_Transmit_DMA+0x206>
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2221      	movs	r2, #33	; 0x21
 800c95c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2210      	movs	r2, #16
 800c964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2200      	movs	r2, #0
 800c96c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	893a      	ldrh	r2, [r7, #8]
 800c978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	4a66      	ldr	r2, [pc, #408]	; (800cb18 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800c97e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	4a66      	ldr	r2, [pc, #408]	; (800cb1c <HAL_I2C_Master_Transmit_DMA+0x214>)
 800c984:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	2bff      	cmp	r3, #255	; 0xff
 800c98e:	d906      	bls.n	800c99e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	22ff      	movs	r2, #255	; 0xff
 800c994:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800c996:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c99a:	61fb      	str	r3, [r7, #28]
 800c99c:	e007      	b.n	800c9ae <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9a2:	b29a      	uxth	r2, r3
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800c9a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c9ac:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d01a      	beq.n	800c9ec <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ba:	781a      	ldrb	r2, [r3, #0]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c6:	1c5a      	adds	r2, r3, #1
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9d0:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	3b01      	subs	r3, #1
 800c9da:	b29a      	uxth	r2, r3
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	b29a      	uxth	r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d074      	beq.n	800cade <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d022      	beq.n	800ca42 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca00:	4a47      	ldr	r2, [pc, #284]	; (800cb20 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800ca02:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca08:	4a46      	ldr	r2, [pc, #280]	; (800cb24 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800ca0a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca10:	2200      	movs	r2, #0
 800ca12:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca18:	2200      	movs	r2, #0
 800ca1a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca24:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ca2c:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800ca32:	f7fc fd21 	bl	8009478 <HAL_DMA_Start_IT>
 800ca36:	4603      	mov	r3, r0
 800ca38:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800ca3a:	7dfb      	ldrb	r3, [r7, #23]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d13a      	bne.n	800cab6 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800ca40:	e013      	b.n	800ca6a <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2220      	movs	r2, #32
 800ca46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca56:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2200      	movs	r2, #0
 800ca62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ca66:	2301      	movs	r3, #1
 800ca68:	e051      	b.n	800cb0e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	3301      	adds	r3, #1
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	8979      	ldrh	r1, [r7, #10]
 800ca76:	4b2c      	ldr	r3, [pc, #176]	; (800cb28 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800ca78:	9300      	str	r3, [sp, #0]
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	68f8      	ldr	r0, [r7, #12]
 800ca7e:	f002 f83b 	bl	800eaf8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca86:	b29a      	uxth	r2, r3
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca8c:	1ad3      	subs	r3, r2, r3
 800ca8e:	b29a      	uxth	r2, r3
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ca9c:	2110      	movs	r1, #16
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	f002 f85c 	bl	800eb5c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cab2:	601a      	str	r2, [r3, #0]
 800cab4:	e028      	b.n	800cb08 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2220      	movs	r2, #32
 800caba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2200      	movs	r2, #0
 800cac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caca:	f043 0210 	orr.w	r2, r3, #16
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2200      	movs	r2, #0
 800cad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800cada:	2301      	movs	r3, #1
 800cadc:	e017      	b.n	800cb0e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	4a12      	ldr	r2, [pc, #72]	; (800cb2c <HAL_I2C_Master_Transmit_DMA+0x224>)
 800cae2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800cae4:	69bb      	ldr	r3, [r7, #24]
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	8979      	ldrh	r1, [r7, #10]
 800caea:	4b0f      	ldr	r3, [pc, #60]	; (800cb28 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f002 f800 	bl	800eaf8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2200      	movs	r2, #0
 800cafc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cb00:	2101      	movs	r1, #1
 800cb02:	68f8      	ldr	r0, [r7, #12]
 800cb04:	f002 f82a 	bl	800eb5c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	e000      	b.n	800cb0e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800cb0c:	2302      	movs	r3, #2
  }
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3720      	adds	r7, #32
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
 800cb16:	bf00      	nop
 800cb18:	ffff0000 	.word	0xffff0000
 800cb1c:	0800d363 	.word	0x0800d363
 800cb20:	0800e71b 	.word	0x0800e71b
 800cb24:	0800e849 	.word	0x0800e849
 800cb28:	80002000 	.word	0x80002000
 800cb2c:	0800cef3 	.word	0x0800cef3

0800cb30 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b088      	sub	sp, #32
 800cb34:	af02      	add	r7, sp, #8
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	607a      	str	r2, [r7, #4]
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	817b      	strh	r3, [r7, #10]
 800cb40:	4613      	mov	r3, r2
 800cb42:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	2b20      	cmp	r3, #32
 800cb4e:	f040 80cd 	bne.w	800ccec <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	699b      	ldr	r3, [r3, #24]
 800cb58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb60:	d101      	bne.n	800cb66 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800cb62:	2302      	movs	r3, #2
 800cb64:	e0c3      	b.n	800ccee <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d101      	bne.n	800cb74 <HAL_I2C_Master_Receive_DMA+0x44>
 800cb70:	2302      	movs	r3, #2
 800cb72:	e0bc      	b.n	800ccee <HAL_I2C_Master_Receive_DMA+0x1be>
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2201      	movs	r2, #1
 800cb78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2222      	movs	r2, #34	; 0x22
 800cb80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2210      	movs	r2, #16
 800cb88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	893a      	ldrh	r2, [r7, #8]
 800cb9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	4a55      	ldr	r2, [pc, #340]	; (800ccf8 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800cba2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	4a55      	ldr	r2, [pc, #340]	; (800ccfc <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800cba8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	2bff      	cmp	r3, #255	; 0xff
 800cbb2:	d906      	bls.n	800cbc2 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	22ff      	movs	r2, #255	; 0xff
 800cbb8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800cbba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cbbe:	617b      	str	r3, [r7, #20]
 800cbc0:	e007      	b.n	800cbd2 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbc6:	b29a      	uxth	r2, r3
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800cbcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cbd0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d070      	beq.n	800ccbc <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d020      	beq.n	800cc24 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbe6:	4a46      	ldr	r2, [pc, #280]	; (800cd00 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800cbe8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbee:	4a45      	ldr	r2, [pc, #276]	; (800cd04 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800cbf0:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbfe:	2200      	movs	r2, #0
 800cc00:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	3324      	adds	r3, #36	; 0x24
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800cc14:	f7fc fc30 	bl	8009478 <HAL_DMA_Start_IT>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800cc1c:	7cfb      	ldrb	r3, [r7, #19]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d138      	bne.n	800cc94 <HAL_I2C_Master_Receive_DMA+0x164>
 800cc22:	e013      	b.n	800cc4c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2220      	movs	r2, #32
 800cc28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2200      	movs	r2, #0
 800cc44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e050      	b.n	800ccee <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc50:	b2da      	uxtb	r2, r3
 800cc52:	8979      	ldrh	r1, [r7, #10]
 800cc54:	4b2c      	ldr	r3, [pc, #176]	; (800cd08 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	68f8      	ldr	r0, [r7, #12]
 800cc5c:	f001 ff4c 	bl	800eaf8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc64:	b29a      	uxth	r2, r3
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	b29a      	uxth	r2, r3
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800cc7a:	2110      	movs	r1, #16
 800cc7c:	68f8      	ldr	r0, [r7, #12]
 800cc7e:	f001 ff6d 	bl	800eb5c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	681a      	ldr	r2, [r3, #0]
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc90:	601a      	str	r2, [r3, #0]
 800cc92:	e029      	b.n	800cce8 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2220      	movs	r2, #32
 800cc98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cca8:	f043 0210 	orr.w	r2, r3, #16
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ccb8:	2301      	movs	r3, #1
 800ccba:	e018      	b.n	800ccee <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	4a13      	ldr	r2, [pc, #76]	; (800cd0c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800ccc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccc6:	b2da      	uxtb	r2, r3
 800ccc8:	8979      	ldrh	r1, [r7, #10]
 800ccca:	4b0f      	ldr	r3, [pc, #60]	; (800cd08 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ccd2:	68f8      	ldr	r0, [r7, #12]
 800ccd4:	f001 ff10 	bl	800eaf8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cce0:	2102      	movs	r1, #2
 800cce2:	68f8      	ldr	r0, [r7, #12]
 800cce4:	f001 ff3a 	bl	800eb5c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800cce8:	2300      	movs	r3, #0
 800ccea:	e000      	b.n	800ccee <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800ccec:	2302      	movs	r3, #2
  }
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3718      	adds	r7, #24
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	ffff0000 	.word	0xffff0000
 800ccfc:	0800d363 	.word	0x0800d363
 800cd00:	0800e7b1 	.word	0x0800e7b1
 800cd04:	0800e849 	.word	0x0800e849
 800cd08:	80002400 	.word	0x80002400
 800cd0c:	0800cef3 	.word	0x0800cef3

0800cd10 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	699b      	ldr	r3, [r3, #24]
 800cd1e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d005      	beq.n	800cd3c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd34:	68ba      	ldr	r2, [r7, #8]
 800cd36:	68f9      	ldr	r1, [r7, #12]
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	4798      	blx	r3
  }
}
 800cd3c:	bf00      	nop
 800cd3e:	3710      	adds	r7, #16
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b086      	sub	sp, #24
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	699b      	ldr	r3, [r3, #24]
 800cd52:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	0a1b      	lsrs	r3, r3, #8
 800cd60:	f003 0301 	and.w	r3, r3, #1
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d010      	beq.n	800cd8a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	09db      	lsrs	r3, r3, #7
 800cd6c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d00a      	beq.n	800cd8a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd78:	f043 0201 	orr.w	r2, r3, #1
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd88:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	0a9b      	lsrs	r3, r3, #10
 800cd8e:	f003 0301 	and.w	r3, r3, #1
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d010      	beq.n	800cdb8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	09db      	lsrs	r3, r3, #7
 800cd9a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d00a      	beq.n	800cdb8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cda6:	f043 0208 	orr.w	r2, r3, #8
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cdb6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	0a5b      	lsrs	r3, r3, #9
 800cdbc:	f003 0301 	and.w	r3, r3, #1
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d010      	beq.n	800cde6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	09db      	lsrs	r3, r3, #7
 800cdc8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d00a      	beq.n	800cde6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdd4:	f043 0202 	orr.w	r2, r3, #2
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cde4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	f003 030b 	and.w	r3, r3, #11
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d003      	beq.n	800cdfe <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800cdf6:	68f9      	ldr	r1, [r7, #12]
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f001 fb53 	bl	800e4a4 <I2C_ITError>
  }
}
 800cdfe:	bf00      	nop
 800ce00:	3718      	adds	r7, #24
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ce06:	b480      	push	{r7}
 800ce08:	b083      	sub	sp, #12
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ce0e:	bf00      	nop
 800ce10:	370c      	adds	r7, #12
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr

0800ce1a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ce1a:	b480      	push	{r7}
 800ce1c:	b083      	sub	sp, #12
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ce22:	bf00      	nop
 800ce24:	370c      	adds	r7, #12
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr

0800ce2e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ce2e:	b480      	push	{r7}
 800ce30:	b083      	sub	sp, #12
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ce36:	bf00      	nop
 800ce38:	370c      	adds	r7, #12
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr

0800ce42 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ce42:	b480      	push	{r7}
 800ce44:	b083      	sub	sp, #12
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ce4a:	bf00      	nop
 800ce4c:	370c      	adds	r7, #12
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr

0800ce56 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ce56:	b480      	push	{r7}
 800ce58:	b083      	sub	sp, #12
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	460b      	mov	r3, r1
 800ce60:	70fb      	strb	r3, [r7, #3]
 800ce62:	4613      	mov	r3, r2
 800ce64:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ce66:	bf00      	nop
 800ce68:	370c      	adds	r7, #12
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr

0800ce72 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ce72:	b480      	push	{r7}
 800ce74:	b083      	sub	sp, #12
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ce7a:	bf00      	nop
 800ce7c:	370c      	adds	r7, #12
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce84:	4770      	bx	lr

0800ce86 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ce86:	b480      	push	{r7}
 800ce88:	b083      	sub	sp, #12
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ce8e:	bf00      	nop
 800ce90:	370c      	adds	r7, #12
 800ce92:	46bd      	mov	sp, r7
 800ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce98:	4770      	bx	lr

0800ce9a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ce9a:	b480      	push	{r7}
 800ce9c:	b083      	sub	sp, #12
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800cea2:	bf00      	nop
 800cea4:	370c      	adds	r7, #12
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr

0800ceae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ceae:	b480      	push	{r7}
 800ceb0:	b083      	sub	sp, #12
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ceb6:	bf00      	nop
 800ceb8:	370c      	adds	r7, #12
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr

0800cec2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cec2:	b480      	push	{r7}
 800cec4:	b083      	sub	sp, #12
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ceca:	bf00      	nop
 800cecc:	370c      	adds	r7, #12
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr

0800ced6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800ced6:	b480      	push	{r7}
 800ced8:	b083      	sub	sp, #12
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cee4:	b2db      	uxtb	r3, r3
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	370c      	adds	r7, #12
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr

0800cef2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b088      	sub	sp, #32
 800cef6:	af02      	add	r7, sp, #8
 800cef8:	60f8      	str	r0, [r7, #12]
 800cefa:	60b9      	str	r1, [r7, #8]
 800cefc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf08:	2b01      	cmp	r3, #1
 800cf0a:	d101      	bne.n	800cf10 <I2C_Master_ISR_IT+0x1e>
 800cf0c:	2302      	movs	r3, #2
 800cf0e:	e120      	b.n	800d152 <I2C_Master_ISR_IT+0x260>
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	091b      	lsrs	r3, r3, #4
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d013      	beq.n	800cf4c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	091b      	lsrs	r3, r3, #4
 800cf28:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00d      	beq.n	800cf4c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2210      	movs	r2, #16
 800cf36:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf3c:	f043 0204 	orr.w	r2, r3, #4
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cf44:	68f8      	ldr	r0, [r7, #12]
 800cf46:	f001 fbc4 	bl	800e6d2 <I2C_Flush_TXDR>
 800cf4a:	e0ed      	b.n	800d128 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	089b      	lsrs	r3, r3, #2
 800cf50:	f003 0301 	and.w	r3, r3, #1
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d023      	beq.n	800cfa0 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	089b      	lsrs	r3, r3, #2
 800cf5c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d01d      	beq.n	800cfa0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	f023 0304 	bic.w	r3, r3, #4
 800cf6a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf76:	b2d2      	uxtb	r2, r2
 800cf78:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf7e:	1c5a      	adds	r2, r3, #1
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf88:	3b01      	subs	r3, #1
 800cf8a:	b29a      	uxth	r2, r3
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	3b01      	subs	r3, #1
 800cf98:	b29a      	uxth	r2, r3
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cf9e:	e0c3      	b.n	800d128 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	099b      	lsrs	r3, r3, #6
 800cfa4:	f003 0301 	and.w	r3, r3, #1
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d12a      	bne.n	800d002 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	085b      	lsrs	r3, r3, #1
 800cfb0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d024      	beq.n	800d002 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	085b      	lsrs	r3, r3, #1
 800cfbc:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d01e      	beq.n	800d002 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	f000 80ac 	beq.w	800d128 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfd4:	781a      	ldrb	r2, [r3, #0]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe0:	1c5a      	adds	r2, r3, #1
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfea:	3b01      	subs	r3, #1
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	3b01      	subs	r3, #1
 800cffa:	b29a      	uxth	r2, r3
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800d000:	e092      	b.n	800d128 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	09db      	lsrs	r3, r3, #7
 800d006:	f003 0301 	and.w	r3, r3, #1
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d05d      	beq.n	800d0ca <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	099b      	lsrs	r3, r3, #6
 800d012:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800d016:	2b00      	cmp	r3, #0
 800d018:	d057      	beq.n	800d0ca <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d01e:	b29b      	uxth	r3, r3
 800d020:	2b00      	cmp	r3, #0
 800d022:	d040      	beq.n	800d0a6 <I2C_Master_ISR_IT+0x1b4>
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d13c      	bne.n	800d0a6 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	b29b      	uxth	r3, r3
 800d034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d038:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d03e:	b29b      	uxth	r3, r3
 800d040:	2bff      	cmp	r3, #255	; 0xff
 800d042:	d90e      	bls.n	800d062 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	22ff      	movs	r2, #255	; 0xff
 800d048:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d04e:	b2da      	uxtb	r2, r3
 800d050:	8a79      	ldrh	r1, [r7, #18]
 800d052:	2300      	movs	r3, #0
 800d054:	9300      	str	r3, [sp, #0]
 800d056:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d05a:	68f8      	ldr	r0, [r7, #12]
 800d05c:	f001 fd4c 	bl	800eaf8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d060:	e032      	b.n	800d0c8 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d066:	b29a      	uxth	r2, r3
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d070:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d074:	d00b      	beq.n	800d08e <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d07a:	b2da      	uxtb	r2, r3
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d080:	8a79      	ldrh	r1, [r7, #18]
 800d082:	2000      	movs	r0, #0
 800d084:	9000      	str	r0, [sp, #0]
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	f001 fd36 	bl	800eaf8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d08c:	e01c      	b.n	800d0c8 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d092:	b2da      	uxtb	r2, r3
 800d094:	8a79      	ldrh	r1, [r7, #18]
 800d096:	2300      	movs	r3, #0
 800d098:	9300      	str	r3, [sp, #0]
 800d09a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d09e:	68f8      	ldr	r0, [r7, #12]
 800d0a0:	f001 fd2a 	bl	800eaf8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d0a4:	e010      	b.n	800d0c8 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d0b4:	d003      	beq.n	800d0be <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800d0b6:	68f8      	ldr	r0, [r7, #12]
 800d0b8:	f000 fdde 	bl	800dc78 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d0bc:	e034      	b.n	800d128 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d0be:	2140      	movs	r1, #64	; 0x40
 800d0c0:	68f8      	ldr	r0, [r7, #12]
 800d0c2:	f001 f9ef 	bl	800e4a4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d0c6:	e02f      	b.n	800d128 <I2C_Master_ISR_IT+0x236>
 800d0c8:	e02e      	b.n	800d128 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	099b      	lsrs	r3, r3, #6
 800d0ce:	f003 0301 	and.w	r3, r3, #1
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d028      	beq.n	800d128 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	099b      	lsrs	r3, r3, #6
 800d0da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d022      	beq.n	800d128 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d119      	bne.n	800d120 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d0fa:	d015      	beq.n	800d128 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d100:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d104:	d108      	bne.n	800d118 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	685a      	ldr	r2, [r3, #4]
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d114:	605a      	str	r2, [r3, #4]
 800d116:	e007      	b.n	800d128 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800d118:	68f8      	ldr	r0, [r7, #12]
 800d11a:	f000 fdad 	bl	800dc78 <I2C_ITMasterSeqCplt>
 800d11e:	e003      	b.n	800d128 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d120:	2140      	movs	r1, #64	; 0x40
 800d122:	68f8      	ldr	r0, [r7, #12]
 800d124:	f001 f9be 	bl	800e4a4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	095b      	lsrs	r3, r3, #5
 800d12c:	f003 0301 	and.w	r3, r3, #1
 800d130:	2b00      	cmp	r3, #0
 800d132:	d009      	beq.n	800d148 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	095b      	lsrs	r3, r3, #5
 800d138:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d003      	beq.n	800d148 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800d140:	6979      	ldr	r1, [r7, #20]
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	f000 fe34 	bl	800ddb0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d150:	2300      	movs	r3, #0
}
 800d152:	4618      	mov	r0, r3
 800d154:	3718      	adds	r7, #24
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b086      	sub	sp, #24
 800d15e:	af00      	add	r7, sp, #0
 800d160:	60f8      	str	r0, [r7, #12]
 800d162:	60b9      	str	r1, [r7, #8]
 800d164:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d16a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d176:	2b01      	cmp	r3, #1
 800d178:	d101      	bne.n	800d17e <I2C_Slave_ISR_IT+0x24>
 800d17a:	2302      	movs	r3, #2
 800d17c:	e0ed      	b.n	800d35a <I2C_Slave_ISR_IT+0x200>
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2201      	movs	r2, #1
 800d182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	095b      	lsrs	r3, r3, #5
 800d18a:	f003 0301 	and.w	r3, r3, #1
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00a      	beq.n	800d1a8 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	095b      	lsrs	r3, r3, #5
 800d196:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d004      	beq.n	800d1a8 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800d19e:	6939      	ldr	r1, [r7, #16]
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f000 fecf 	bl	800df44 <I2C_ITSlaveCplt>
 800d1a6:	e0d3      	b.n	800d350 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	091b      	lsrs	r3, r3, #4
 800d1ac:	f003 0301 	and.w	r3, r3, #1
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d04d      	beq.n	800d250 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	091b      	lsrs	r3, r3, #4
 800d1b8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d047      	beq.n	800d250 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d128      	bne.n	800d21c <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	2b28      	cmp	r3, #40	; 0x28
 800d1d4:	d108      	bne.n	800d1e8 <I2C_Slave_ISR_IT+0x8e>
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d1dc:	d104      	bne.n	800d1e8 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d1de:	6939      	ldr	r1, [r7, #16]
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f001 f909 	bl	800e3f8 <I2C_ITListenCplt>
 800d1e6:	e032      	b.n	800d24e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	2b29      	cmp	r3, #41	; 0x29
 800d1f2:	d10e      	bne.n	800d212 <I2C_Slave_ISR_IT+0xb8>
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d1fa:	d00a      	beq.n	800d212 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	2210      	movs	r2, #16
 800d202:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d204:	68f8      	ldr	r0, [r7, #12]
 800d206:	f001 fa64 	bl	800e6d2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d20a:	68f8      	ldr	r0, [r7, #12]
 800d20c:	f000 fd71 	bl	800dcf2 <I2C_ITSlaveSeqCplt>
 800d210:	e01d      	b.n	800d24e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2210      	movs	r2, #16
 800d218:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800d21a:	e096      	b.n	800d34a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	2210      	movs	r2, #16
 800d222:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d228:	f043 0204 	orr.w	r2, r3, #4
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d004      	beq.n	800d240 <I2C_Slave_ISR_IT+0xe6>
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d23c:	f040 8085 	bne.w	800d34a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d244:	4619      	mov	r1, r3
 800d246:	68f8      	ldr	r0, [r7, #12]
 800d248:	f001 f92c 	bl	800e4a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800d24c:	e07d      	b.n	800d34a <I2C_Slave_ISR_IT+0x1f0>
 800d24e:	e07c      	b.n	800d34a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	089b      	lsrs	r3, r3, #2
 800d254:	f003 0301 	and.w	r3, r3, #1
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d030      	beq.n	800d2be <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	089b      	lsrs	r3, r3, #2
 800d260:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d264:	2b00      	cmp	r3, #0
 800d266:	d02a      	beq.n	800d2be <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d018      	beq.n	800d2a4 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d27c:	b2d2      	uxtb	r2, r2
 800d27e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d284:	1c5a      	adds	r2, r3, #1
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d28e:	3b01      	subs	r3, #1
 800d290:	b29a      	uxth	r2, r3
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	3b01      	subs	r3, #1
 800d29e:	b29a      	uxth	r2, r3
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d14f      	bne.n	800d34e <I2C_Slave_ISR_IT+0x1f4>
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d2b4:	d04b      	beq.n	800d34e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800d2b6:	68f8      	ldr	r0, [r7, #12]
 800d2b8:	f000 fd1b 	bl	800dcf2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800d2bc:	e047      	b.n	800d34e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	08db      	lsrs	r3, r3, #3
 800d2c2:	f003 0301 	and.w	r3, r3, #1
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d00a      	beq.n	800d2e0 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	08db      	lsrs	r3, r3, #3
 800d2ce:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d004      	beq.n	800d2e0 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800d2d6:	6939      	ldr	r1, [r7, #16]
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f000 fc49 	bl	800db70 <I2C_ITAddrCplt>
 800d2de:	e037      	b.n	800d350 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	085b      	lsrs	r3, r3, #1
 800d2e4:	f003 0301 	and.w	r3, r3, #1
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d031      	beq.n	800d350 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	085b      	lsrs	r3, r3, #1
 800d2f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d02b      	beq.n	800d350 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d018      	beq.n	800d334 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d306:	781a      	ldrb	r2, [r3, #0]
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d312:	1c5a      	adds	r2, r3, #1
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	3b01      	subs	r3, #1
 800d320:	b29a      	uxth	r2, r3
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d32a:	3b01      	subs	r3, #1
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	851a      	strh	r2, [r3, #40]	; 0x28
 800d332:	e00d      	b.n	800d350 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d33a:	d002      	beq.n	800d342 <I2C_Slave_ISR_IT+0x1e8>
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d106      	bne.n	800d350 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d342:	68f8      	ldr	r0, [r7, #12]
 800d344:	f000 fcd5 	bl	800dcf2 <I2C_ITSlaveSeqCplt>
 800d348:	e002      	b.n	800d350 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800d34a:	bf00      	nop
 800d34c:	e000      	b.n	800d350 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800d34e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2200      	movs	r2, #0
 800d354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d358:	2300      	movs	r3, #0
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3718      	adds	r7, #24
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}

0800d362 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800d362:	b580      	push	{r7, lr}
 800d364:	b088      	sub	sp, #32
 800d366:	af02      	add	r7, sp, #8
 800d368:	60f8      	str	r0, [r7, #12]
 800d36a:	60b9      	str	r1, [r7, #8]
 800d36c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d374:	2b01      	cmp	r3, #1
 800d376:	d101      	bne.n	800d37c <I2C_Master_ISR_DMA+0x1a>
 800d378:	2302      	movs	r3, #2
 800d37a:	e0e1      	b.n	800d540 <I2C_Master_ISR_DMA+0x1de>
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2201      	movs	r2, #1
 800d380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	091b      	lsrs	r3, r3, #4
 800d388:	f003 0301 	and.w	r3, r3, #1
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d017      	beq.n	800d3c0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	091b      	lsrs	r3, r3, #4
 800d394:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d011      	beq.n	800d3c0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2210      	movs	r2, #16
 800d3a2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3a8:	f043 0204 	orr.w	r2, r3, #4
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d3b0:	2120      	movs	r1, #32
 800d3b2:	68f8      	ldr	r0, [r7, #12]
 800d3b4:	f001 fbd2 	bl	800eb5c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	f001 f98a 	bl	800e6d2 <I2C_Flush_TXDR>
 800d3be:	e0ba      	b.n	800d536 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	09db      	lsrs	r3, r3, #7
 800d3c4:	f003 0301 	and.w	r3, r3, #1
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d072      	beq.n	800d4b2 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	099b      	lsrs	r3, r3, #6
 800d3d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d06c      	beq.n	800d4b2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3e6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d04e      	beq.n	800d490 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3fe:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d404:	b29b      	uxth	r3, r3
 800d406:	2bff      	cmp	r3, #255	; 0xff
 800d408:	d906      	bls.n	800d418 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	22ff      	movs	r2, #255	; 0xff
 800d40e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800d410:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d414:	617b      	str	r3, [r7, #20]
 800d416:	e010      	b.n	800d43a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d41c:	b29a      	uxth	r2, r3
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d426:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d42a:	d003      	beq.n	800d434 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d430:	617b      	str	r3, [r7, #20]
 800d432:	e002      	b.n	800d43a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800d434:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d438:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d43e:	b2da      	uxtb	r2, r3
 800d440:	8a79      	ldrh	r1, [r7, #18]
 800d442:	2300      	movs	r3, #0
 800d444:	9300      	str	r3, [sp, #0]
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f001 fb55 	bl	800eaf8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d452:	b29a      	uxth	r2, r3
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d458:	1ad3      	subs	r3, r2, r3
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d466:	b2db      	uxtb	r3, r3
 800d468:	2b22      	cmp	r3, #34	; 0x22
 800d46a:	d108      	bne.n	800d47e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d47a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d47c:	e05b      	b.n	800d536 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d48c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d48e:	e052      	b.n	800d536 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d49a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d49e:	d003      	beq.n	800d4a8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f000 fbe9 	bl	800dc78 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800d4a6:	e046      	b.n	800d536 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d4a8:	2140      	movs	r1, #64	; 0x40
 800d4aa:	68f8      	ldr	r0, [r7, #12]
 800d4ac:	f000 fffa 	bl	800e4a4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800d4b0:	e041      	b.n	800d536 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	099b      	lsrs	r3, r3, #6
 800d4b6:	f003 0301 	and.w	r3, r3, #1
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d029      	beq.n	800d512 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	099b      	lsrs	r3, r3, #6
 800d4c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d023      	beq.n	800d512 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d119      	bne.n	800d508 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d4e2:	d027      	beq.n	800d534 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d4ec:	d108      	bne.n	800d500 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	685a      	ldr	r2, [r3, #4]
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d4fc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800d4fe:	e019      	b.n	800d534 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800d500:	68f8      	ldr	r0, [r7, #12]
 800d502:	f000 fbb9 	bl	800dc78 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800d506:	e015      	b.n	800d534 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d508:	2140      	movs	r1, #64	; 0x40
 800d50a:	68f8      	ldr	r0, [r7, #12]
 800d50c:	f000 ffca 	bl	800e4a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800d510:	e010      	b.n	800d534 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	095b      	lsrs	r3, r3, #5
 800d516:	f003 0301 	and.w	r3, r3, #1
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00b      	beq.n	800d536 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	095b      	lsrs	r3, r3, #5
 800d522:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d526:	2b00      	cmp	r3, #0
 800d528:	d005      	beq.n	800d536 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800d52a:	68b9      	ldr	r1, [r7, #8]
 800d52c:	68f8      	ldr	r0, [r7, #12]
 800d52e:	f000 fc3f 	bl	800ddb0 <I2C_ITMasterCplt>
 800d532:	e000      	b.n	800d536 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800d534:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2200      	movs	r2, #0
 800d53a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d53e:	2300      	movs	r3, #0
}
 800d540:	4618      	mov	r0, r3
 800d542:	3718      	adds	r7, #24
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b088      	sub	sp, #32
 800d54c:	af02      	add	r7, sp, #8
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	60b9      	str	r1, [r7, #8]
 800d552:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800d554:	4b92      	ldr	r3, [pc, #584]	; (800d7a0 <I2C_Mem_ISR_DMA+0x258>)
 800d556:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d101      	bne.n	800d566 <I2C_Mem_ISR_DMA+0x1e>
 800d562:	2302      	movs	r3, #2
 800d564:	e118      	b.n	800d798 <I2C_Mem_ISR_DMA+0x250>
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2201      	movs	r2, #1
 800d56a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	091b      	lsrs	r3, r3, #4
 800d572:	f003 0301 	and.w	r3, r3, #1
 800d576:	2b00      	cmp	r3, #0
 800d578:	d017      	beq.n	800d5aa <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	091b      	lsrs	r3, r3, #4
 800d57e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d582:	2b00      	cmp	r3, #0
 800d584:	d011      	beq.n	800d5aa <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2210      	movs	r2, #16
 800d58c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d592:	f043 0204 	orr.w	r2, r3, #4
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d59a:	2120      	movs	r1, #32
 800d59c:	68f8      	ldr	r0, [r7, #12]
 800d59e:	f001 fadd 	bl	800eb5c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d5a2:	68f8      	ldr	r0, [r7, #12]
 800d5a4:	f001 f895 	bl	800e6d2 <I2C_Flush_TXDR>
 800d5a8:	e0f1      	b.n	800d78e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	085b      	lsrs	r3, r3, #1
 800d5ae:	f003 0301 	and.w	r3, r3, #1
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d00f      	beq.n	800d5d6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	085b      	lsrs	r3, r3, #1
 800d5ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d009      	beq.n	800d5d6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d5ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5d2:	651a      	str	r2, [r3, #80]	; 0x50
 800d5d4:	e0db      	b.n	800d78e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	09db      	lsrs	r3, r3, #7
 800d5da:	f003 0301 	and.w	r3, r3, #1
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d060      	beq.n	800d6a4 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	099b      	lsrs	r3, r3, #6
 800d5e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d05a      	beq.n	800d6a4 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d5ee:	2101      	movs	r1, #1
 800d5f0:	68f8      	ldr	r0, [r7, #12]
 800d5f2:	f001 fb37 	bl	800ec64 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d5f6:	2110      	movs	r1, #16
 800d5f8:	68f8      	ldr	r0, [r7, #12]
 800d5fa:	f001 faaf 	bl	800eb5c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d602:	b29b      	uxth	r3, r3
 800d604:	2b00      	cmp	r3, #0
 800d606:	d048      	beq.n	800d69a <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	2bff      	cmp	r3, #255	; 0xff
 800d610:	d910      	bls.n	800d634 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	22ff      	movs	r2, #255	; 0xff
 800d616:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d61c:	b299      	uxth	r1, r3
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d622:	b2da      	uxtb	r2, r3
 800d624:	2300      	movs	r3, #0
 800d626:	9300      	str	r3, [sp, #0]
 800d628:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d62c:	68f8      	ldr	r0, [r7, #12]
 800d62e:	f001 fa63 	bl	800eaf8 <I2C_TransferConfig>
 800d632:	e011      	b.n	800d658 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d638:	b29a      	uxth	r2, r3
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d642:	b299      	uxth	r1, r3
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d648:	b2da      	uxtb	r2, r3
 800d64a:	2300      	movs	r3, #0
 800d64c:	9300      	str	r3, [sp, #0]
 800d64e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d652:	68f8      	ldr	r0, [r7, #12]
 800d654:	f001 fa50 	bl	800eaf8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d65c:	b29a      	uxth	r2, r3
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d662:	1ad3      	subs	r3, r2, r3
 800d664:	b29a      	uxth	r2, r3
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d670:	b2db      	uxtb	r3, r3
 800d672:	2b22      	cmp	r3, #34	; 0x22
 800d674:	d108      	bne.n	800d688 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d684:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d686:	e082      	b.n	800d78e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d696:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d698:	e079      	b.n	800d78e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d69a:	2140      	movs	r1, #64	; 0x40
 800d69c:	68f8      	ldr	r0, [r7, #12]
 800d69e:	f000 ff01 	bl	800e4a4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800d6a2:	e074      	b.n	800d78e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	099b      	lsrs	r3, r3, #6
 800d6a8:	f003 0301 	and.w	r3, r3, #1
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d05e      	beq.n	800d76e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	099b      	lsrs	r3, r3, #6
 800d6b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d058      	beq.n	800d76e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d6bc:	2101      	movs	r1, #1
 800d6be:	68f8      	ldr	r0, [r7, #12]
 800d6c0:	f001 fad0 	bl	800ec64 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d6c4:	2110      	movs	r1, #16
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f001 fa48 	bl	800eb5c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	2b22      	cmp	r3, #34	; 0x22
 800d6d6:	d101      	bne.n	800d6dc <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800d6d8:	4b32      	ldr	r3, [pc, #200]	; (800d7a4 <I2C_Mem_ISR_DMA+0x25c>)
 800d6da:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	2bff      	cmp	r3, #255	; 0xff
 800d6e4:	d910      	bls.n	800d708 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	22ff      	movs	r2, #255	; 0xff
 800d6ea:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6f0:	b299      	uxth	r1, r3
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6f6:	b2da      	uxtb	r2, r3
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	f001 f9f9 	bl	800eaf8 <I2C_TransferConfig>
 800d706:	e011      	b.n	800d72c <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d716:	b299      	uxth	r1, r3
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d71c:	b2da      	uxtb	r2, r3
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d726:	68f8      	ldr	r0, [r7, #12]
 800d728:	f001 f9e6 	bl	800eaf8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d730:	b29a      	uxth	r2, r3
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d736:	1ad3      	subs	r3, r2, r3
 800d738:	b29a      	uxth	r2, r3
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d744:	b2db      	uxtb	r3, r3
 800d746:	2b22      	cmp	r3, #34	; 0x22
 800d748:	d108      	bne.n	800d75c <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	681a      	ldr	r2, [r3, #0]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d758:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d75a:	e018      	b.n	800d78e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d76a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d76c:	e00f      	b.n	800d78e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	095b      	lsrs	r3, r3, #5
 800d772:	f003 0301 	and.w	r3, r3, #1
 800d776:	2b00      	cmp	r3, #0
 800d778:	d009      	beq.n	800d78e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	095b      	lsrs	r3, r3, #5
 800d77e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d782:	2b00      	cmp	r3, #0
 800d784:	d003      	beq.n	800d78e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800d786:	68b9      	ldr	r1, [r7, #8]
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f000 fb11 	bl	800ddb0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2200      	movs	r2, #0
 800d792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d796:	2300      	movs	r3, #0
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3718      	adds	r7, #24
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	80002000 	.word	0x80002000
 800d7a4:	80002400 	.word	0x80002400

0800d7a8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b088      	sub	sp, #32
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	60f8      	str	r0, [r7, #12]
 800d7b0:	60b9      	str	r1, [r7, #8]
 800d7b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d101      	bne.n	800d7cc <I2C_Slave_ISR_DMA+0x24>
 800d7c8:	2302      	movs	r3, #2
 800d7ca:	e1cc      	b.n	800db66 <I2C_Slave_ISR_DMA+0x3be>
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	095b      	lsrs	r3, r3, #5
 800d7d8:	f003 0301 	and.w	r3, r3, #1
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d00a      	beq.n	800d7f6 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	095b      	lsrs	r3, r3, #5
 800d7e4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d004      	beq.n	800d7f6 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800d7ec:	68b9      	ldr	r1, [r7, #8]
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f000 fba8 	bl	800df44 <I2C_ITSlaveCplt>
 800d7f4:	e1b2      	b.n	800db5c <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	091b      	lsrs	r3, r3, #4
 800d7fa:	f003 0301 	and.w	r3, r3, #1
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	f000 819c 	beq.w	800db3c <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	091b      	lsrs	r3, r3, #4
 800d808:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	f000 8195 	beq.w	800db3c <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	0b9b      	lsrs	r3, r3, #14
 800d816:	f003 0301 	and.w	r3, r3, #1
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d106      	bne.n	800d82c <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	0bdb      	lsrs	r3, r3, #15
 800d822:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800d826:	2b00      	cmp	r3, #0
 800d828:	f000 8181 	beq.w	800db2e <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d830:	2b00      	cmp	r3, #0
 800d832:	d07c      	beq.n	800d92e <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	0bdb      	lsrs	r3, r3, #15
 800d838:	f003 0301 	and.w	r3, r3, #1
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d076      	beq.n	800d92e <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a75      	ldr	r2, [pc, #468]	; (800da1c <I2C_Slave_ISR_DMA+0x274>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d059      	beq.n	800d900 <I2C_Slave_ISR_DMA+0x158>
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	4a73      	ldr	r2, [pc, #460]	; (800da20 <I2C_Slave_ISR_DMA+0x278>)
 800d854:	4293      	cmp	r3, r2
 800d856:	d053      	beq.n	800d900 <I2C_Slave_ISR_DMA+0x158>
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	4a71      	ldr	r2, [pc, #452]	; (800da24 <I2C_Slave_ISR_DMA+0x27c>)
 800d860:	4293      	cmp	r3, r2
 800d862:	d04d      	beq.n	800d900 <I2C_Slave_ISR_DMA+0x158>
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4a6f      	ldr	r2, [pc, #444]	; (800da28 <I2C_Slave_ISR_DMA+0x280>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d047      	beq.n	800d900 <I2C_Slave_ISR_DMA+0x158>
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4a6d      	ldr	r2, [pc, #436]	; (800da2c <I2C_Slave_ISR_DMA+0x284>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d041      	beq.n	800d900 <I2C_Slave_ISR_DMA+0x158>
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4a6b      	ldr	r2, [pc, #428]	; (800da30 <I2C_Slave_ISR_DMA+0x288>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d03b      	beq.n	800d900 <I2C_Slave_ISR_DMA+0x158>
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	4a69      	ldr	r2, [pc, #420]	; (800da34 <I2C_Slave_ISR_DMA+0x28c>)
 800d890:	4293      	cmp	r3, r2
 800d892:	d035      	beq.n	800d900 <I2C_Slave_ISR_DMA+0x158>
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4a67      	ldr	r2, [pc, #412]	; (800da38 <I2C_Slave_ISR_DMA+0x290>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d02f      	beq.n	800d900 <I2C_Slave_ISR_DMA+0x158>
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	4a65      	ldr	r2, [pc, #404]	; (800da3c <I2C_Slave_ISR_DMA+0x294>)
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d029      	beq.n	800d900 <I2C_Slave_ISR_DMA+0x158>
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4a63      	ldr	r2, [pc, #396]	; (800da40 <I2C_Slave_ISR_DMA+0x298>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d023      	beq.n	800d900 <I2C_Slave_ISR_DMA+0x158>
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4a61      	ldr	r2, [pc, #388]	; (800da44 <I2C_Slave_ISR_DMA+0x29c>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d01d      	beq.n	800d900 <I2C_Slave_ISR_DMA+0x158>
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4a5f      	ldr	r2, [pc, #380]	; (800da48 <I2C_Slave_ISR_DMA+0x2a0>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d017      	beq.n	800d900 <I2C_Slave_ISR_DMA+0x158>
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4a5d      	ldr	r2, [pc, #372]	; (800da4c <I2C_Slave_ISR_DMA+0x2a4>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d011      	beq.n	800d900 <I2C_Slave_ISR_DMA+0x158>
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4a5b      	ldr	r2, [pc, #364]	; (800da50 <I2C_Slave_ISR_DMA+0x2a8>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d00b      	beq.n	800d900 <I2C_Slave_ISR_DMA+0x158>
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	4a59      	ldr	r2, [pc, #356]	; (800da54 <I2C_Slave_ISR_DMA+0x2ac>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d005      	beq.n	800d900 <I2C_Slave_ISR_DMA+0x158>
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a57      	ldr	r2, [pc, #348]	; (800da58 <I2C_Slave_ISR_DMA+0x2b0>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d109      	bne.n	800d914 <I2C_Slave_ISR_DMA+0x16c>
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	bf0c      	ite	eq
 800d90c:	2301      	moveq	r3, #1
 800d90e:	2300      	movne	r3, #0
 800d910:	b2db      	uxtb	r3, r3
 800d912:	e008      	b.n	800d926 <I2C_Slave_ISR_DMA+0x17e>
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	bf0c      	ite	eq
 800d920:	2301      	moveq	r3, #1
 800d922:	2300      	movne	r3, #0
 800d924:	b2db      	uxtb	r3, r3
 800d926:	2b00      	cmp	r3, #0
 800d928:	d001      	beq.n	800d92e <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800d92a:	2301      	movs	r3, #1
 800d92c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d932:	2b00      	cmp	r3, #0
 800d934:	f000 809f 	beq.w	800da76 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	0b9b      	lsrs	r3, r3, #14
 800d93c:	f003 0301 	and.w	r3, r3, #1
 800d940:	2b00      	cmp	r3, #0
 800d942:	f000 8098 	beq.w	800da76 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a33      	ldr	r2, [pc, #204]	; (800da1c <I2C_Slave_ISR_DMA+0x274>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d059      	beq.n	800da06 <I2C_Slave_ISR_DMA+0x25e>
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4a31      	ldr	r2, [pc, #196]	; (800da20 <I2C_Slave_ISR_DMA+0x278>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d053      	beq.n	800da06 <I2C_Slave_ISR_DMA+0x25e>
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4a2f      	ldr	r2, [pc, #188]	; (800da24 <I2C_Slave_ISR_DMA+0x27c>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d04d      	beq.n	800da06 <I2C_Slave_ISR_DMA+0x25e>
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4a2d      	ldr	r2, [pc, #180]	; (800da28 <I2C_Slave_ISR_DMA+0x280>)
 800d972:	4293      	cmp	r3, r2
 800d974:	d047      	beq.n	800da06 <I2C_Slave_ISR_DMA+0x25e>
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a2b      	ldr	r2, [pc, #172]	; (800da2c <I2C_Slave_ISR_DMA+0x284>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d041      	beq.n	800da06 <I2C_Slave_ISR_DMA+0x25e>
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	4a29      	ldr	r2, [pc, #164]	; (800da30 <I2C_Slave_ISR_DMA+0x288>)
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d03b      	beq.n	800da06 <I2C_Slave_ISR_DMA+0x25e>
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a27      	ldr	r2, [pc, #156]	; (800da34 <I2C_Slave_ISR_DMA+0x28c>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d035      	beq.n	800da06 <I2C_Slave_ISR_DMA+0x25e>
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	4a25      	ldr	r2, [pc, #148]	; (800da38 <I2C_Slave_ISR_DMA+0x290>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d02f      	beq.n	800da06 <I2C_Slave_ISR_DMA+0x25e>
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a23      	ldr	r2, [pc, #140]	; (800da3c <I2C_Slave_ISR_DMA+0x294>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d029      	beq.n	800da06 <I2C_Slave_ISR_DMA+0x25e>
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a21      	ldr	r2, [pc, #132]	; (800da40 <I2C_Slave_ISR_DMA+0x298>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d023      	beq.n	800da06 <I2C_Slave_ISR_DMA+0x25e>
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4a1f      	ldr	r2, [pc, #124]	; (800da44 <I2C_Slave_ISR_DMA+0x29c>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d01d      	beq.n	800da06 <I2C_Slave_ISR_DMA+0x25e>
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a1d      	ldr	r2, [pc, #116]	; (800da48 <I2C_Slave_ISR_DMA+0x2a0>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d017      	beq.n	800da06 <I2C_Slave_ISR_DMA+0x25e>
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4a1b      	ldr	r2, [pc, #108]	; (800da4c <I2C_Slave_ISR_DMA+0x2a4>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d011      	beq.n	800da06 <I2C_Slave_ISR_DMA+0x25e>
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4a19      	ldr	r2, [pc, #100]	; (800da50 <I2C_Slave_ISR_DMA+0x2a8>)
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d00b      	beq.n	800da06 <I2C_Slave_ISR_DMA+0x25e>
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4a17      	ldr	r2, [pc, #92]	; (800da54 <I2C_Slave_ISR_DMA+0x2ac>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d005      	beq.n	800da06 <I2C_Slave_ISR_DMA+0x25e>
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a15      	ldr	r2, [pc, #84]	; (800da58 <I2C_Slave_ISR_DMA+0x2b0>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d12a      	bne.n	800da5c <I2C_Slave_ISR_DMA+0x2b4>
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	bf0c      	ite	eq
 800da12:	2301      	moveq	r3, #1
 800da14:	2300      	movne	r3, #0
 800da16:	b2db      	uxtb	r3, r3
 800da18:	e029      	b.n	800da6e <I2C_Slave_ISR_DMA+0x2c6>
 800da1a:	bf00      	nop
 800da1c:	40020010 	.word	0x40020010
 800da20:	40020028 	.word	0x40020028
 800da24:	40020040 	.word	0x40020040
 800da28:	40020058 	.word	0x40020058
 800da2c:	40020070 	.word	0x40020070
 800da30:	40020088 	.word	0x40020088
 800da34:	400200a0 	.word	0x400200a0
 800da38:	400200b8 	.word	0x400200b8
 800da3c:	40020410 	.word	0x40020410
 800da40:	40020428 	.word	0x40020428
 800da44:	40020440 	.word	0x40020440
 800da48:	40020458 	.word	0x40020458
 800da4c:	40020470 	.word	0x40020470
 800da50:	40020488 	.word	0x40020488
 800da54:	400204a0 	.word	0x400204a0
 800da58:	400204b8 	.word	0x400204b8
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	2b00      	cmp	r3, #0
 800da66:	bf0c      	ite	eq
 800da68:	2301      	moveq	r3, #1
 800da6a:	2300      	movne	r3, #0
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d001      	beq.n	800da76 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800da72:	2301      	movs	r3, #1
 800da74:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d128      	bne.n	800dace <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800da82:	b2db      	uxtb	r3, r3
 800da84:	2b28      	cmp	r3, #40	; 0x28
 800da86:	d108      	bne.n	800da9a <I2C_Slave_ISR_DMA+0x2f2>
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800da8e:	d104      	bne.n	800da9a <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800da90:	68b9      	ldr	r1, [r7, #8]
 800da92:	68f8      	ldr	r0, [r7, #12]
 800da94:	f000 fcb0 	bl	800e3f8 <I2C_ITListenCplt>
 800da98:	e048      	b.n	800db2c <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	2b29      	cmp	r3, #41	; 0x29
 800daa4:	d10e      	bne.n	800dac4 <I2C_Slave_ISR_DMA+0x31c>
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800daac:	d00a      	beq.n	800dac4 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2210      	movs	r2, #16
 800dab4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f000 fe0b 	bl	800e6d2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f000 f918 	bl	800dcf2 <I2C_ITSlaveSeqCplt>
 800dac2:	e033      	b.n	800db2c <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	2210      	movs	r2, #16
 800daca:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800dacc:	e034      	b.n	800db38 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	2210      	movs	r2, #16
 800dad4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dada:	f043 0204 	orr.w	r2, r3, #4
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dae8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800daea:	69bb      	ldr	r3, [r7, #24]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d003      	beq.n	800daf8 <I2C_Slave_ISR_DMA+0x350>
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800daf6:	d11f      	bne.n	800db38 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800daf8:	7dfb      	ldrb	r3, [r7, #23]
 800dafa:	2b21      	cmp	r3, #33	; 0x21
 800dafc:	d002      	beq.n	800db04 <I2C_Slave_ISR_DMA+0x35c>
 800dafe:	7dfb      	ldrb	r3, [r7, #23]
 800db00:	2b29      	cmp	r3, #41	; 0x29
 800db02:	d103      	bne.n	800db0c <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2221      	movs	r2, #33	; 0x21
 800db08:	631a      	str	r2, [r3, #48]	; 0x30
 800db0a:	e008      	b.n	800db1e <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800db0c:	7dfb      	ldrb	r3, [r7, #23]
 800db0e:	2b22      	cmp	r3, #34	; 0x22
 800db10:	d002      	beq.n	800db18 <I2C_Slave_ISR_DMA+0x370>
 800db12:	7dfb      	ldrb	r3, [r7, #23]
 800db14:	2b2a      	cmp	r3, #42	; 0x2a
 800db16:	d102      	bne.n	800db1e <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	2222      	movs	r2, #34	; 0x22
 800db1c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db22:	4619      	mov	r1, r3
 800db24:	68f8      	ldr	r0, [r7, #12]
 800db26:	f000 fcbd 	bl	800e4a4 <I2C_ITError>
      if (treatdmanack == 1U)
 800db2a:	e005      	b.n	800db38 <I2C_Slave_ISR_DMA+0x390>
 800db2c:	e004      	b.n	800db38 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	2210      	movs	r2, #16
 800db34:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800db36:	e011      	b.n	800db5c <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800db38:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800db3a:	e00f      	b.n	800db5c <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	08db      	lsrs	r3, r3, #3
 800db40:	f003 0301 	and.w	r3, r3, #1
 800db44:	2b00      	cmp	r3, #0
 800db46:	d009      	beq.n	800db5c <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	08db      	lsrs	r3, r3, #3
 800db4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800db50:	2b00      	cmp	r3, #0
 800db52:	d003      	beq.n	800db5c <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800db54:	68b9      	ldr	r1, [r7, #8]
 800db56:	68f8      	ldr	r0, [r7, #12]
 800db58:	f000 f80a 	bl	800db70 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2200      	movs	r2, #0
 800db60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800db64:	2300      	movs	r3, #0
}
 800db66:	4618      	mov	r0, r3
 800db68:	3720      	adds	r7, #32
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop

0800db70 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800db80:	b2db      	uxtb	r3, r3
 800db82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800db86:	2b28      	cmp	r3, #40	; 0x28
 800db88:	d16a      	bne.n	800dc60 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	699b      	ldr	r3, [r3, #24]
 800db90:	0c1b      	lsrs	r3, r3, #16
 800db92:	b2db      	uxtb	r3, r3
 800db94:	f003 0301 	and.w	r3, r3, #1
 800db98:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	699b      	ldr	r3, [r3, #24]
 800dba0:	0c1b      	lsrs	r3, r3, #16
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800dba8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	689b      	ldr	r3, [r3, #8]
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dbb6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800dbc4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	2b02      	cmp	r3, #2
 800dbcc:	d138      	bne.n	800dc40 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800dbce:	897b      	ldrh	r3, [r7, #10]
 800dbd0:	09db      	lsrs	r3, r3, #7
 800dbd2:	b29a      	uxth	r2, r3
 800dbd4:	89bb      	ldrh	r3, [r7, #12]
 800dbd6:	4053      	eors	r3, r2
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	f003 0306 	and.w	r3, r3, #6
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d11c      	bne.n	800dc1c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800dbe2:	897b      	ldrh	r3, [r7, #10]
 800dbe4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbea:	1c5a      	adds	r2, r3, #1
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbf4:	2b02      	cmp	r3, #2
 800dbf6:	d13b      	bne.n	800dc70 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2208      	movs	r2, #8
 800dc04:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800dc0e:	89ba      	ldrh	r2, [r7, #12]
 800dc10:	7bfb      	ldrb	r3, [r7, #15]
 800dc12:	4619      	mov	r1, r3
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f7ff f91e 	bl	800ce56 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800dc1a:	e029      	b.n	800dc70 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800dc1c:	893b      	ldrh	r3, [r7, #8]
 800dc1e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800dc20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f001 f81d 	bl	800ec64 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800dc32:	89ba      	ldrh	r2, [r7, #12]
 800dc34:	7bfb      	ldrb	r3, [r7, #15]
 800dc36:	4619      	mov	r1, r3
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f7ff f90c 	bl	800ce56 <HAL_I2C_AddrCallback>
}
 800dc3e:	e017      	b.n	800dc70 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800dc40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f001 f80d 	bl	800ec64 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800dc52:	89ba      	ldrh	r2, [r7, #12]
 800dc54:	7bfb      	ldrb	r3, [r7, #15]
 800dc56:	4619      	mov	r1, r3
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f7ff f8fc 	bl	800ce56 <HAL_I2C_AddrCallback>
}
 800dc5e:	e007      	b.n	800dc70 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2208      	movs	r2, #8
 800dc66:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800dc70:	bf00      	nop
 800dc72:	3710      	adds	r7, #16
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2200      	movs	r2, #0
 800dc84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc8e:	b2db      	uxtb	r3, r3
 800dc90:	2b21      	cmp	r3, #33	; 0x21
 800dc92:	d115      	bne.n	800dcc0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2220      	movs	r2, #32
 800dc98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2211      	movs	r2, #17
 800dca0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2200      	movs	r2, #0
 800dca6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800dca8:	2101      	movs	r1, #1
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 ffda 	bl	800ec64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f7ff f8a4 	bl	800ce06 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800dcbe:	e014      	b.n	800dcea <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2220      	movs	r2, #32
 800dcc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2212      	movs	r2, #18
 800dccc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800dcd4:	2102      	movs	r1, #2
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 ffc4 	bl	800ec64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2200      	movs	r2, #0
 800dce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f7ff f898 	bl	800ce1a <HAL_I2C_MasterRxCpltCallback>
}
 800dcea:	bf00      	nop
 800dcec:	3708      	adds	r7, #8
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}

0800dcf2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800dcf2:	b580      	push	{r7, lr}
 800dcf4:	b084      	sub	sp, #16
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2200      	movs	r2, #0
 800dd06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	0b9b      	lsrs	r3, r3, #14
 800dd0e:	f003 0301 	and.w	r3, r3, #1
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d008      	beq.n	800dd28 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dd24:	601a      	str	r2, [r3, #0]
 800dd26:	e00d      	b.n	800dd44 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	0bdb      	lsrs	r3, r3, #15
 800dd2c:	f003 0301 	and.w	r3, r3, #1
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d007      	beq.n	800dd44 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dd42:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	2b29      	cmp	r3, #41	; 0x29
 800dd4e:	d112      	bne.n	800dd76 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2228      	movs	r2, #40	; 0x28
 800dd54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2221      	movs	r2, #33	; 0x21
 800dd5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800dd5e:	2101      	movs	r1, #1
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 ff7f 	bl	800ec64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f7ff f85d 	bl	800ce2e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dd74:	e017      	b.n	800dda6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	2b2a      	cmp	r3, #42	; 0x2a
 800dd80:	d111      	bne.n	800dda6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2228      	movs	r2, #40	; 0x28
 800dd86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2222      	movs	r2, #34	; 0x22
 800dd8e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800dd90:	2102      	movs	r1, #2
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f000 ff66 	bl	800ec64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f7ff f84e 	bl	800ce42 <HAL_I2C_SlaveRxCpltCallback>
}
 800dda6:	bf00      	nop
 800dda8:	3710      	adds	r7, #16
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
	...

0800ddb0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b086      	sub	sp, #24
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2220      	movs	r2, #32
 800ddc4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	2b21      	cmp	r3, #33	; 0x21
 800ddd0:	d107      	bne.n	800dde2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ddd2:	2101      	movs	r1, #1
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 ff45 	bl	800ec64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2211      	movs	r2, #17
 800ddde:	631a      	str	r2, [r3, #48]	; 0x30
 800dde0:	e00c      	b.n	800ddfc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	2b22      	cmp	r3, #34	; 0x22
 800ddec:	d106      	bne.n	800ddfc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ddee:	2102      	movs	r1, #2
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f000 ff37 	bl	800ec64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2212      	movs	r2, #18
 800ddfa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	6859      	ldr	r1, [r3, #4]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	4b4d      	ldr	r3, [pc, #308]	; (800df3c <I2C_ITMasterCplt+0x18c>)
 800de08:	400b      	ands	r3, r1
 800de0a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2200      	movs	r2, #0
 800de10:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	4a4a      	ldr	r2, [pc, #296]	; (800df40 <I2C_ITMasterCplt+0x190>)
 800de16:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	091b      	lsrs	r3, r3, #4
 800de1c:	f003 0301 	and.w	r3, r3, #1
 800de20:	2b00      	cmp	r3, #0
 800de22:	d009      	beq.n	800de38 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2210      	movs	r2, #16
 800de2a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de30:	f043 0204 	orr.w	r2, r3, #4
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	2b60      	cmp	r3, #96	; 0x60
 800de42:	d10b      	bne.n	800de5c <I2C_ITMasterCplt+0xac>
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	089b      	lsrs	r3, r3, #2
 800de48:	f003 0301 	and.w	r3, r3, #1
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d005      	beq.n	800de5c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de56:	b2db      	uxtb	r3, r3
 800de58:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800de5a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f000 fc38 	bl	800e6d2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de66:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	2b60      	cmp	r3, #96	; 0x60
 800de72:	d002      	beq.n	800de7a <I2C_ITMasterCplt+0xca>
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d006      	beq.n	800de88 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de7e:	4619      	mov	r1, r3
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 fb0f 	bl	800e4a4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800de86:	e054      	b.n	800df32 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	2b21      	cmp	r3, #33	; 0x21
 800de92:	d124      	bne.n	800dede <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2220      	movs	r2, #32
 800de98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	2b40      	cmp	r3, #64	; 0x40
 800deac:	d10b      	bne.n	800dec6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2200      	movs	r2, #0
 800deb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2200      	movs	r2, #0
 800deba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f7fe ffe1 	bl	800ce86 <HAL_I2C_MemTxCpltCallback>
}
 800dec4:	e035      	b.n	800df32 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2200      	movs	r2, #0
 800deca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2200      	movs	r2, #0
 800ded2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f7fe ff95 	bl	800ce06 <HAL_I2C_MasterTxCpltCallback>
}
 800dedc:	e029      	b.n	800df32 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	2b22      	cmp	r3, #34	; 0x22
 800dee8:	d123      	bne.n	800df32 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2220      	movs	r2, #32
 800deee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800defe:	b2db      	uxtb	r3, r3
 800df00:	2b40      	cmp	r3, #64	; 0x40
 800df02:	d10b      	bne.n	800df1c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2200      	movs	r2, #0
 800df08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2200      	movs	r2, #0
 800df10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f7fe ffc0 	bl	800ce9a <HAL_I2C_MemRxCpltCallback>
}
 800df1a:	e00a      	b.n	800df32 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2200      	movs	r2, #0
 800df20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2200      	movs	r2, #0
 800df28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f7fe ff74 	bl	800ce1a <HAL_I2C_MasterRxCpltCallback>
}
 800df32:	bf00      	nop
 800df34:	3718      	adds	r7, #24
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop
 800df3c:	fe00e800 	.word	0xfe00e800
 800df40:	ffff0000 	.word	0xffff0000

0800df44 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b086      	sub	sp, #24
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df5e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800df66:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2220      	movs	r2, #32
 800df6e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800df70:	7afb      	ldrb	r3, [r7, #11]
 800df72:	2b21      	cmp	r3, #33	; 0x21
 800df74:	d002      	beq.n	800df7c <I2C_ITSlaveCplt+0x38>
 800df76:	7afb      	ldrb	r3, [r7, #11]
 800df78:	2b29      	cmp	r3, #41	; 0x29
 800df7a:	d108      	bne.n	800df8e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800df7c:	f248 0101 	movw	r1, #32769	; 0x8001
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f000 fe6f 	bl	800ec64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2221      	movs	r2, #33	; 0x21
 800df8a:	631a      	str	r2, [r3, #48]	; 0x30
 800df8c:	e019      	b.n	800dfc2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800df8e:	7afb      	ldrb	r3, [r7, #11]
 800df90:	2b22      	cmp	r3, #34	; 0x22
 800df92:	d002      	beq.n	800df9a <I2C_ITSlaveCplt+0x56>
 800df94:	7afb      	ldrb	r3, [r7, #11]
 800df96:	2b2a      	cmp	r3, #42	; 0x2a
 800df98:	d108      	bne.n	800dfac <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800df9a:	f248 0102 	movw	r1, #32770	; 0x8002
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f000 fe60 	bl	800ec64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2222      	movs	r2, #34	; 0x22
 800dfa8:	631a      	str	r2, [r3, #48]	; 0x30
 800dfaa:	e00a      	b.n	800dfc2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800dfac:	7afb      	ldrb	r3, [r7, #11]
 800dfae:	2b28      	cmp	r3, #40	; 0x28
 800dfb0:	d107      	bne.n	800dfc2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800dfb2:	f248 0103 	movw	r1, #32771	; 0x8003
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f000 fe54 	bl	800ec64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	685a      	ldr	r2, [r3, #4]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dfd0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	6859      	ldr	r1, [r3, #4]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	4b80      	ldr	r3, [pc, #512]	; (800e1e0 <I2C_ITSlaveCplt+0x29c>)
 800dfde:	400b      	ands	r3, r1
 800dfe0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 fb75 	bl	800e6d2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	0b9b      	lsrs	r3, r3, #14
 800dfec:	f003 0301 	and.w	r3, r3, #1
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d07a      	beq.n	800e0ea <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	681a      	ldr	r2, [r3, #0]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e002:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e008:	2b00      	cmp	r3, #0
 800e00a:	f000 8112 	beq.w	800e232 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	4a73      	ldr	r2, [pc, #460]	; (800e1e4 <I2C_ITSlaveCplt+0x2a0>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d059      	beq.n	800e0ce <I2C_ITSlaveCplt+0x18a>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a71      	ldr	r2, [pc, #452]	; (800e1e8 <I2C_ITSlaveCplt+0x2a4>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d053      	beq.n	800e0ce <I2C_ITSlaveCplt+0x18a>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4a6f      	ldr	r2, [pc, #444]	; (800e1ec <I2C_ITSlaveCplt+0x2a8>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d04d      	beq.n	800e0ce <I2C_ITSlaveCplt+0x18a>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	4a6d      	ldr	r2, [pc, #436]	; (800e1f0 <I2C_ITSlaveCplt+0x2ac>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d047      	beq.n	800e0ce <I2C_ITSlaveCplt+0x18a>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	4a6b      	ldr	r2, [pc, #428]	; (800e1f4 <I2C_ITSlaveCplt+0x2b0>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d041      	beq.n	800e0ce <I2C_ITSlaveCplt+0x18a>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a69      	ldr	r2, [pc, #420]	; (800e1f8 <I2C_ITSlaveCplt+0x2b4>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d03b      	beq.n	800e0ce <I2C_ITSlaveCplt+0x18a>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	4a67      	ldr	r2, [pc, #412]	; (800e1fc <I2C_ITSlaveCplt+0x2b8>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d035      	beq.n	800e0ce <I2C_ITSlaveCplt+0x18a>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4a65      	ldr	r2, [pc, #404]	; (800e200 <I2C_ITSlaveCplt+0x2bc>)
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d02f      	beq.n	800e0ce <I2C_ITSlaveCplt+0x18a>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4a63      	ldr	r2, [pc, #396]	; (800e204 <I2C_ITSlaveCplt+0x2c0>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d029      	beq.n	800e0ce <I2C_ITSlaveCplt+0x18a>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a61      	ldr	r2, [pc, #388]	; (800e208 <I2C_ITSlaveCplt+0x2c4>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d023      	beq.n	800e0ce <I2C_ITSlaveCplt+0x18a>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a5f      	ldr	r2, [pc, #380]	; (800e20c <I2C_ITSlaveCplt+0x2c8>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d01d      	beq.n	800e0ce <I2C_ITSlaveCplt+0x18a>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4a5d      	ldr	r2, [pc, #372]	; (800e210 <I2C_ITSlaveCplt+0x2cc>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d017      	beq.n	800e0ce <I2C_ITSlaveCplt+0x18a>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4a5b      	ldr	r2, [pc, #364]	; (800e214 <I2C_ITSlaveCplt+0x2d0>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d011      	beq.n	800e0ce <I2C_ITSlaveCplt+0x18a>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4a59      	ldr	r2, [pc, #356]	; (800e218 <I2C_ITSlaveCplt+0x2d4>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d00b      	beq.n	800e0ce <I2C_ITSlaveCplt+0x18a>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a57      	ldr	r2, [pc, #348]	; (800e21c <I2C_ITSlaveCplt+0x2d8>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d005      	beq.n	800e0ce <I2C_ITSlaveCplt+0x18a>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4a55      	ldr	r2, [pc, #340]	; (800e220 <I2C_ITSlaveCplt+0x2dc>)
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d105      	bne.n	800e0da <I2C_ITSlaveCplt+0x196>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	e004      	b.n	800e0e4 <I2C_ITSlaveCplt+0x1a0>
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	8553      	strh	r3, [r2, #42]	; 0x2a
 800e0e8:	e0a3      	b.n	800e232 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	0bdb      	lsrs	r3, r3, #15
 800e0ee:	f003 0301 	and.w	r3, r3, #1
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	f000 809d 	beq.w	800e232 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	681a      	ldr	r2, [r3, #0]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e106:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	f000 8090 	beq.w	800e232 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4a32      	ldr	r2, [pc, #200]	; (800e1e4 <I2C_ITSlaveCplt+0x2a0>)
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d059      	beq.n	800e1d2 <I2C_ITSlaveCplt+0x28e>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4a30      	ldr	r2, [pc, #192]	; (800e1e8 <I2C_ITSlaveCplt+0x2a4>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d053      	beq.n	800e1d2 <I2C_ITSlaveCplt+0x28e>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a2e      	ldr	r2, [pc, #184]	; (800e1ec <I2C_ITSlaveCplt+0x2a8>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d04d      	beq.n	800e1d2 <I2C_ITSlaveCplt+0x28e>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	4a2c      	ldr	r2, [pc, #176]	; (800e1f0 <I2C_ITSlaveCplt+0x2ac>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	d047      	beq.n	800e1d2 <I2C_ITSlaveCplt+0x28e>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	4a2a      	ldr	r2, [pc, #168]	; (800e1f4 <I2C_ITSlaveCplt+0x2b0>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d041      	beq.n	800e1d2 <I2C_ITSlaveCplt+0x28e>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4a28      	ldr	r2, [pc, #160]	; (800e1f8 <I2C_ITSlaveCplt+0x2b4>)
 800e156:	4293      	cmp	r3, r2
 800e158:	d03b      	beq.n	800e1d2 <I2C_ITSlaveCplt+0x28e>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a26      	ldr	r2, [pc, #152]	; (800e1fc <I2C_ITSlaveCplt+0x2b8>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d035      	beq.n	800e1d2 <I2C_ITSlaveCplt+0x28e>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4a24      	ldr	r2, [pc, #144]	; (800e200 <I2C_ITSlaveCplt+0x2bc>)
 800e16e:	4293      	cmp	r3, r2
 800e170:	d02f      	beq.n	800e1d2 <I2C_ITSlaveCplt+0x28e>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	4a22      	ldr	r2, [pc, #136]	; (800e204 <I2C_ITSlaveCplt+0x2c0>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d029      	beq.n	800e1d2 <I2C_ITSlaveCplt+0x28e>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4a20      	ldr	r2, [pc, #128]	; (800e208 <I2C_ITSlaveCplt+0x2c4>)
 800e186:	4293      	cmp	r3, r2
 800e188:	d023      	beq.n	800e1d2 <I2C_ITSlaveCplt+0x28e>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a1e      	ldr	r2, [pc, #120]	; (800e20c <I2C_ITSlaveCplt+0x2c8>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d01d      	beq.n	800e1d2 <I2C_ITSlaveCplt+0x28e>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4a1c      	ldr	r2, [pc, #112]	; (800e210 <I2C_ITSlaveCplt+0x2cc>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d017      	beq.n	800e1d2 <I2C_ITSlaveCplt+0x28e>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4a1a      	ldr	r2, [pc, #104]	; (800e214 <I2C_ITSlaveCplt+0x2d0>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d011      	beq.n	800e1d2 <I2C_ITSlaveCplt+0x28e>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4a18      	ldr	r2, [pc, #96]	; (800e218 <I2C_ITSlaveCplt+0x2d4>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d00b      	beq.n	800e1d2 <I2C_ITSlaveCplt+0x28e>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4a16      	ldr	r2, [pc, #88]	; (800e21c <I2C_ITSlaveCplt+0x2d8>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d005      	beq.n	800e1d2 <I2C_ITSlaveCplt+0x28e>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4a14      	ldr	r2, [pc, #80]	; (800e220 <I2C_ITSlaveCplt+0x2dc>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d128      	bne.n	800e224 <I2C_ITSlaveCplt+0x2e0>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	e027      	b.n	800e22e <I2C_ITSlaveCplt+0x2ea>
 800e1de:	bf00      	nop
 800e1e0:	fe00e800 	.word	0xfe00e800
 800e1e4:	40020010 	.word	0x40020010
 800e1e8:	40020028 	.word	0x40020028
 800e1ec:	40020040 	.word	0x40020040
 800e1f0:	40020058 	.word	0x40020058
 800e1f4:	40020070 	.word	0x40020070
 800e1f8:	40020088 	.word	0x40020088
 800e1fc:	400200a0 	.word	0x400200a0
 800e200:	400200b8 	.word	0x400200b8
 800e204:	40020410 	.word	0x40020410
 800e208:	40020428 	.word	0x40020428
 800e20c:	40020440 	.word	0x40020440
 800e210:	40020458 	.word	0x40020458
 800e214:	40020470 	.word	0x40020470
 800e218:	40020488 	.word	0x40020488
 800e21c:	400204a0 	.word	0x400204a0
 800e220:	400204b8 	.word	0x400204b8
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	685b      	ldr	r3, [r3, #4]
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	687a      	ldr	r2, [r7, #4]
 800e230:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	089b      	lsrs	r3, r3, #2
 800e236:	f003 0301 	and.w	r3, r3, #1
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d020      	beq.n	800e280 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	f023 0304 	bic.w	r3, r3, #4
 800e244:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e250:	b2d2      	uxtb	r2, r2
 800e252:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e258:	1c5a      	adds	r2, r3, #1
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e262:	2b00      	cmp	r3, #0
 800e264:	d00c      	beq.n	800e280 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e26a:	3b01      	subs	r3, #1
 800e26c:	b29a      	uxth	r2, r3
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e276:	b29b      	uxth	r3, r3
 800e278:	3b01      	subs	r3, #1
 800e27a:	b29a      	uxth	r2, r3
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e284:	b29b      	uxth	r3, r3
 800e286:	2b00      	cmp	r3, #0
 800e288:	d005      	beq.n	800e296 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e28e:	f043 0204 	orr.w	r2, r3, #4
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	091b      	lsrs	r3, r3, #4
 800e29a:	f003 0301 	and.w	r3, r3, #1
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d04a      	beq.n	800e338 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	091b      	lsrs	r3, r3, #4
 800e2a6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d044      	beq.n	800e338 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d128      	bne.n	800e30a <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	2b28      	cmp	r3, #40	; 0x28
 800e2c2:	d108      	bne.n	800e2d6 <I2C_ITSlaveCplt+0x392>
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2ca:	d104      	bne.n	800e2d6 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800e2cc:	6979      	ldr	r1, [r7, #20]
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 f892 	bl	800e3f8 <I2C_ITListenCplt>
 800e2d4:	e030      	b.n	800e338 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e2dc:	b2db      	uxtb	r3, r3
 800e2de:	2b29      	cmp	r3, #41	; 0x29
 800e2e0:	d10e      	bne.n	800e300 <I2C_ITSlaveCplt+0x3bc>
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e2e8:	d00a      	beq.n	800e300 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	2210      	movs	r2, #16
 800e2f0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 f9ed 	bl	800e6d2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f7ff fcfa 	bl	800dcf2 <I2C_ITSlaveSeqCplt>
 800e2fe:	e01b      	b.n	800e338 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	2210      	movs	r2, #16
 800e306:	61da      	str	r2, [r3, #28]
 800e308:	e016      	b.n	800e338 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2210      	movs	r2, #16
 800e310:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e316:	f043 0204 	orr.w	r2, r3, #4
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d003      	beq.n	800e32c <I2C_ITSlaveCplt+0x3e8>
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e32a:	d105      	bne.n	800e338 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e330:	4619      	mov	r1, r3
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f000 f8b6 	bl	800e4a4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2200      	movs	r2, #0
 800e33c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d010      	beq.n	800e370 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e352:	4619      	mov	r1, r3
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 f8a5 	bl	800e4a4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e360:	b2db      	uxtb	r3, r3
 800e362:	2b28      	cmp	r3, #40	; 0x28
 800e364:	d141      	bne.n	800e3ea <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800e366:	6979      	ldr	r1, [r7, #20]
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f000 f845 	bl	800e3f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e36e:	e03c      	b.n	800e3ea <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e374:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e378:	d014      	beq.n	800e3a4 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f7ff fcb9 	bl	800dcf2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	4a1c      	ldr	r2, [pc, #112]	; (800e3f4 <I2C_ITSlaveCplt+0x4b0>)
 800e384:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2220      	movs	r2, #32
 800e38a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2200      	movs	r2, #0
 800e392:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f7fe fd68 	bl	800ce72 <HAL_I2C_ListenCpltCallback>
}
 800e3a2:	e022      	b.n	800e3ea <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	2b22      	cmp	r3, #34	; 0x22
 800e3ae:	d10e      	bne.n	800e3ce <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2220      	movs	r2, #32
 800e3b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f7fe fd3b 	bl	800ce42 <HAL_I2C_SlaveRxCpltCallback>
}
 800e3cc:	e00d      	b.n	800e3ea <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2220      	movs	r2, #32
 800e3d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f7fe fd22 	bl	800ce2e <HAL_I2C_SlaveTxCpltCallback>
}
 800e3ea:	bf00      	nop
 800e3ec:	3718      	adds	r7, #24
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}
 800e3f2:	bf00      	nop
 800e3f4:	ffff0000 	.word	0xffff0000

0800e3f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
 800e400:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	4a26      	ldr	r2, [pc, #152]	; (800e4a0 <I2C_ITListenCplt+0xa8>)
 800e406:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2200      	movs	r2, #0
 800e40c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2220      	movs	r2, #32
 800e412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2200      	movs	r2, #0
 800e41a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2200      	movs	r2, #0
 800e422:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	089b      	lsrs	r3, r3, #2
 800e428:	f003 0301 	and.w	r3, r3, #1
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d022      	beq.n	800e476 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e43a:	b2d2      	uxtb	r2, r2
 800e43c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e442:	1c5a      	adds	r2, r3, #1
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d012      	beq.n	800e476 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e454:	3b01      	subs	r3, #1
 800e456:	b29a      	uxth	r2, r3
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e460:	b29b      	uxth	r3, r3
 800e462:	3b01      	subs	r3, #1
 800e464:	b29a      	uxth	r2, r3
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e46e:	f043 0204 	orr.w	r2, r3, #4
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e476:	f248 0103 	movw	r1, #32771	; 0x8003
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f000 fbf2 	bl	800ec64 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	2210      	movs	r2, #16
 800e486:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2200      	movs	r2, #0
 800e48c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f7fe fcee 	bl	800ce72 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800e496:	bf00      	nop
 800e498:	3708      	adds	r7, #8
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	ffff0000 	.word	0xffff0000

0800e4a4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e4b4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	4a6d      	ldr	r2, [pc, #436]	; (800e678 <I2C_ITError+0x1d4>)
 800e4c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	431a      	orrs	r2, r3
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800e4d6:	7bfb      	ldrb	r3, [r7, #15]
 800e4d8:	2b28      	cmp	r3, #40	; 0x28
 800e4da:	d005      	beq.n	800e4e8 <I2C_ITError+0x44>
 800e4dc:	7bfb      	ldrb	r3, [r7, #15]
 800e4de:	2b29      	cmp	r3, #41	; 0x29
 800e4e0:	d002      	beq.n	800e4e8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800e4e2:	7bfb      	ldrb	r3, [r7, #15]
 800e4e4:	2b2a      	cmp	r3, #42	; 0x2a
 800e4e6:	d10b      	bne.n	800e500 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e4e8:	2103      	movs	r1, #3
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f000 fbba 	bl	800ec64 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2228      	movs	r2, #40	; 0x28
 800e4f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	4a60      	ldr	r2, [pc, #384]	; (800e67c <I2C_ITError+0x1d8>)
 800e4fc:	635a      	str	r2, [r3, #52]	; 0x34
 800e4fe:	e030      	b.n	800e562 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e500:	f248 0103 	movw	r1, #32771	; 0x8003
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f000 fbad 	bl	800ec64 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f000 f8e1 	bl	800e6d2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e516:	b2db      	uxtb	r3, r3
 800e518:	2b60      	cmp	r3, #96	; 0x60
 800e51a:	d01f      	beq.n	800e55c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2220      	movs	r2, #32
 800e520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	699b      	ldr	r3, [r3, #24]
 800e52a:	f003 0320 	and.w	r3, r3, #32
 800e52e:	2b20      	cmp	r3, #32
 800e530:	d114      	bne.n	800e55c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	699b      	ldr	r3, [r3, #24]
 800e538:	f003 0310 	and.w	r3, r3, #16
 800e53c:	2b10      	cmp	r3, #16
 800e53e:	d109      	bne.n	800e554 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	2210      	movs	r2, #16
 800e546:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e54c:	f043 0204 	orr.w	r2, r3, #4
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2220      	movs	r2, #32
 800e55a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2200      	movs	r2, #0
 800e560:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e566:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d039      	beq.n	800e5e4 <I2C_ITError+0x140>
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	2b11      	cmp	r3, #17
 800e574:	d002      	beq.n	800e57c <I2C_ITError+0xd8>
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	2b21      	cmp	r3, #33	; 0x21
 800e57a:	d133      	bne.n	800e5e4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e58a:	d107      	bne.n	800e59c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e59a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7fc fe61 	bl	800b268 <HAL_DMA_GetState>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d017      	beq.n	800e5dc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5b0:	4a33      	ldr	r2, [pc, #204]	; (800e680 <I2C_ITError+0x1dc>)
 800e5b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f7fb fce1 	bl	8009f88 <HAL_DMA_Abort_IT>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d04d      	beq.n	800e668 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5d2:	687a      	ldr	r2, [r7, #4]
 800e5d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e5d6:	4610      	mov	r0, r2
 800e5d8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e5da:	e045      	b.n	800e668 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f000 f851 	bl	800e684 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e5e2:	e041      	b.n	800e668 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d039      	beq.n	800e660 <I2C_ITError+0x1bc>
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	2b12      	cmp	r3, #18
 800e5f0:	d002      	beq.n	800e5f8 <I2C_ITError+0x154>
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	2b22      	cmp	r3, #34	; 0x22
 800e5f6:	d133      	bne.n	800e660 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e606:	d107      	bne.n	800e618 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e616:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7fc fe23 	bl	800b268 <HAL_DMA_GetState>
 800e622:	4603      	mov	r3, r0
 800e624:	2b01      	cmp	r3, #1
 800e626:	d017      	beq.n	800e658 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e62c:	4a14      	ldr	r2, [pc, #80]	; (800e680 <I2C_ITError+0x1dc>)
 800e62e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2200      	movs	r2, #0
 800e634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e63c:	4618      	mov	r0, r3
 800e63e:	f7fb fca3 	bl	8009f88 <HAL_DMA_Abort_IT>
 800e642:	4603      	mov	r3, r0
 800e644:	2b00      	cmp	r3, #0
 800e646:	d011      	beq.n	800e66c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e64c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e64e:	687a      	ldr	r2, [r7, #4]
 800e650:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800e652:	4610      	mov	r0, r2
 800e654:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e656:	e009      	b.n	800e66c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f000 f813 	bl	800e684 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e65e:	e005      	b.n	800e66c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f000 f80f 	bl	800e684 <I2C_TreatErrorCallback>
  }
}
 800e666:	e002      	b.n	800e66e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e668:	bf00      	nop
 800e66a:	e000      	b.n	800e66e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e66c:	bf00      	nop
}
 800e66e:	bf00      	nop
 800e670:	3710      	adds	r7, #16
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	ffff0000 	.word	0xffff0000
 800e67c:	0800d15b 	.word	0x0800d15b
 800e680:	0800eabd 	.word	0x0800eabd

0800e684 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e692:	b2db      	uxtb	r3, r3
 800e694:	2b60      	cmp	r3, #96	; 0x60
 800e696:	d10e      	bne.n	800e6b6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2220      	movs	r2, #32
 800e69c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f7fe fc07 	bl	800cec2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e6b4:	e009      	b.n	800e6ca <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7fe fbf2 	bl	800ceae <HAL_I2C_ErrorCallback>
}
 800e6ca:	bf00      	nop
 800e6cc:	3708      	adds	r7, #8
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}

0800e6d2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e6d2:	b480      	push	{r7}
 800e6d4:	b083      	sub	sp, #12
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	699b      	ldr	r3, [r3, #24]
 800e6e0:	f003 0302 	and.w	r3, r3, #2
 800e6e4:	2b02      	cmp	r3, #2
 800e6e6:	d103      	bne.n	800e6f0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	699b      	ldr	r3, [r3, #24]
 800e6f6:	f003 0301 	and.w	r3, r3, #1
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d007      	beq.n	800e70e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	699a      	ldr	r2, [r3, #24]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f042 0201 	orr.w	r2, r2, #1
 800e70c:	619a      	str	r2, [r3, #24]
  }
}
 800e70e:	bf00      	nop
 800e710:	370c      	adds	r7, #12
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr

0800e71a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e71a:	b580      	push	{r7, lr}
 800e71c:	b084      	sub	sp, #16
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e726:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e736:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d104      	bne.n	800e74c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e742:	2120      	movs	r1, #32
 800e744:	68f8      	ldr	r0, [r7, #12]
 800e746:	f000 fa09 	bl	800eb5c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800e74a:	e02d      	b.n	800e7a8 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e750:	68fa      	ldr	r2, [r7, #12]
 800e752:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e754:	441a      	add	r2, r3
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e75e:	b29b      	uxth	r3, r3
 800e760:	2bff      	cmp	r3, #255	; 0xff
 800e762:	d903      	bls.n	800e76c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	22ff      	movs	r2, #255	; 0xff
 800e768:	851a      	strh	r2, [r3, #40]	; 0x28
 800e76a:	e004      	b.n	800e776 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e770:	b29a      	uxth	r2, r3
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e77e:	4619      	mov	r1, r3
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	3328      	adds	r3, #40	; 0x28
 800e786:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800e78c:	f7fa fe74 	bl	8009478 <HAL_DMA_Start_IT>
 800e790:	4603      	mov	r3, r0
 800e792:	2b00      	cmp	r3, #0
 800e794:	d004      	beq.n	800e7a0 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800e796:	2110      	movs	r1, #16
 800e798:	68f8      	ldr	r0, [r7, #12]
 800e79a:	f7ff fe83 	bl	800e4a4 <I2C_ITError>
}
 800e79e:	e003      	b.n	800e7a8 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800e7a0:	2140      	movs	r1, #64	; 0x40
 800e7a2:	68f8      	ldr	r0, [r7, #12]
 800e7a4:	f000 f9da 	bl	800eb5c <I2C_Enable_IRQ>
}
 800e7a8:	bf00      	nop
 800e7aa:	3710      	adds	r7, #16
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}

0800e7b0 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7bc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	681a      	ldr	r2, [r3, #0]
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e7cc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d104      	bne.n	800e7e2 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e7d8:	2120      	movs	r1, #32
 800e7da:	68f8      	ldr	r0, [r7, #12]
 800e7dc:	f000 f9be 	bl	800eb5c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800e7e0:	e02d      	b.n	800e83e <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e6:	68fa      	ldr	r2, [r7, #12]
 800e7e8:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e7ea:	441a      	add	r2, r3
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7f4:	b29b      	uxth	r3, r3
 800e7f6:	2bff      	cmp	r3, #255	; 0xff
 800e7f8:	d903      	bls.n	800e802 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	22ff      	movs	r2, #255	; 0xff
 800e7fe:	851a      	strh	r2, [r3, #40]	; 0x28
 800e800:	e004      	b.n	800e80c <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e806:	b29a      	uxth	r2, r3
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	3324      	adds	r3, #36	; 0x24
 800e816:	4619      	mov	r1, r3
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e81c:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800e822:	f7fa fe29 	bl	8009478 <HAL_DMA_Start_IT>
 800e826:	4603      	mov	r3, r0
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d004      	beq.n	800e836 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800e82c:	2110      	movs	r1, #16
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	f7ff fe38 	bl	800e4a4 <I2C_ITError>
}
 800e834:	e003      	b.n	800e83e <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800e836:	2140      	movs	r1, #64	; 0x40
 800e838:	68f8      	ldr	r0, [r7, #12]
 800e83a:	f000 f98f 	bl	800eb5c <I2C_Enable_IRQ>
}
 800e83e:	bf00      	nop
 800e840:	3710      	adds	r7, #16
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
	...

0800e848 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800e850:	2300      	movs	r3, #0
 800e852:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e858:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d076      	beq.n	800e950 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	4a71      	ldr	r2, [pc, #452]	; (800ea30 <I2C_DMAError+0x1e8>)
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d059      	beq.n	800e922 <I2C_DMAError+0xda>
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	4a6f      	ldr	r2, [pc, #444]	; (800ea34 <I2C_DMAError+0x1ec>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d053      	beq.n	800e922 <I2C_DMAError+0xda>
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a6d      	ldr	r2, [pc, #436]	; (800ea38 <I2C_DMAError+0x1f0>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d04d      	beq.n	800e922 <I2C_DMAError+0xda>
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	4a6b      	ldr	r2, [pc, #428]	; (800ea3c <I2C_DMAError+0x1f4>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d047      	beq.n	800e922 <I2C_DMAError+0xda>
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a69      	ldr	r2, [pc, #420]	; (800ea40 <I2C_DMAError+0x1f8>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d041      	beq.n	800e922 <I2C_DMAError+0xda>
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4a67      	ldr	r2, [pc, #412]	; (800ea44 <I2C_DMAError+0x1fc>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d03b      	beq.n	800e922 <I2C_DMAError+0xda>
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4a65      	ldr	r2, [pc, #404]	; (800ea48 <I2C_DMAError+0x200>)
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d035      	beq.n	800e922 <I2C_DMAError+0xda>
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	4a63      	ldr	r2, [pc, #396]	; (800ea4c <I2C_DMAError+0x204>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d02f      	beq.n	800e922 <I2C_DMAError+0xda>
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	4a61      	ldr	r2, [pc, #388]	; (800ea50 <I2C_DMAError+0x208>)
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	d029      	beq.n	800e922 <I2C_DMAError+0xda>
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	4a5f      	ldr	r2, [pc, #380]	; (800ea54 <I2C_DMAError+0x20c>)
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	d023      	beq.n	800e922 <I2C_DMAError+0xda>
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	4a5d      	ldr	r2, [pc, #372]	; (800ea58 <I2C_DMAError+0x210>)
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	d01d      	beq.n	800e922 <I2C_DMAError+0xda>
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	4a5b      	ldr	r2, [pc, #364]	; (800ea5c <I2C_DMAError+0x214>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d017      	beq.n	800e922 <I2C_DMAError+0xda>
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4a59      	ldr	r2, [pc, #356]	; (800ea60 <I2C_DMAError+0x218>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d011      	beq.n	800e922 <I2C_DMAError+0xda>
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	4a57      	ldr	r2, [pc, #348]	; (800ea64 <I2C_DMAError+0x21c>)
 800e906:	4293      	cmp	r3, r2
 800e908:	d00b      	beq.n	800e922 <I2C_DMAError+0xda>
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	4a55      	ldr	r2, [pc, #340]	; (800ea68 <I2C_DMAError+0x220>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d005      	beq.n	800e922 <I2C_DMAError+0xda>
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	4a53      	ldr	r2, [pc, #332]	; (800ea6c <I2C_DMAError+0x224>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	d109      	bne.n	800e936 <I2C_DMAError+0xee>
 800e922:	68bb      	ldr	r3, [r7, #8]
 800e924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	bf0c      	ite	eq
 800e92e:	2301      	moveq	r3, #1
 800e930:	2300      	movne	r3, #0
 800e932:	b2db      	uxtb	r3, r3
 800e934:	e008      	b.n	800e948 <I2C_DMAError+0x100>
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	bf0c      	ite	eq
 800e942:	2301      	moveq	r3, #1
 800e944:	2300      	movne	r3, #0
 800e946:	b2db      	uxtb	r3, r3
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d001      	beq.n	800e950 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800e94c:	2301      	movs	r3, #1
 800e94e:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e954:	2b00      	cmp	r3, #0
 800e956:	f000 8098 	beq.w	800ea8a <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	4a33      	ldr	r2, [pc, #204]	; (800ea30 <I2C_DMAError+0x1e8>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d059      	beq.n	800ea1a <I2C_DMAError+0x1d2>
 800e966:	68bb      	ldr	r3, [r7, #8]
 800e968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4a31      	ldr	r2, [pc, #196]	; (800ea34 <I2C_DMAError+0x1ec>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d053      	beq.n	800ea1a <I2C_DMAError+0x1d2>
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4a2f      	ldr	r2, [pc, #188]	; (800ea38 <I2C_DMAError+0x1f0>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d04d      	beq.n	800ea1a <I2C_DMAError+0x1d2>
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4a2d      	ldr	r2, [pc, #180]	; (800ea3c <I2C_DMAError+0x1f4>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d047      	beq.n	800ea1a <I2C_DMAError+0x1d2>
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a2b      	ldr	r2, [pc, #172]	; (800ea40 <I2C_DMAError+0x1f8>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d041      	beq.n	800ea1a <I2C_DMAError+0x1d2>
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	4a29      	ldr	r2, [pc, #164]	; (800ea44 <I2C_DMAError+0x1fc>)
 800e99e:	4293      	cmp	r3, r2
 800e9a0:	d03b      	beq.n	800ea1a <I2C_DMAError+0x1d2>
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4a27      	ldr	r2, [pc, #156]	; (800ea48 <I2C_DMAError+0x200>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d035      	beq.n	800ea1a <I2C_DMAError+0x1d2>
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4a25      	ldr	r2, [pc, #148]	; (800ea4c <I2C_DMAError+0x204>)
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d02f      	beq.n	800ea1a <I2C_DMAError+0x1d2>
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	4a23      	ldr	r2, [pc, #140]	; (800ea50 <I2C_DMAError+0x208>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d029      	beq.n	800ea1a <I2C_DMAError+0x1d2>
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4a21      	ldr	r2, [pc, #132]	; (800ea54 <I2C_DMAError+0x20c>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d023      	beq.n	800ea1a <I2C_DMAError+0x1d2>
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4a1f      	ldr	r2, [pc, #124]	; (800ea58 <I2C_DMAError+0x210>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d01d      	beq.n	800ea1a <I2C_DMAError+0x1d2>
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4a1d      	ldr	r2, [pc, #116]	; (800ea5c <I2C_DMAError+0x214>)
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d017      	beq.n	800ea1a <I2C_DMAError+0x1d2>
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4a1b      	ldr	r2, [pc, #108]	; (800ea60 <I2C_DMAError+0x218>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d011      	beq.n	800ea1a <I2C_DMAError+0x1d2>
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4a19      	ldr	r2, [pc, #100]	; (800ea64 <I2C_DMAError+0x21c>)
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d00b      	beq.n	800ea1a <I2C_DMAError+0x1d2>
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4a17      	ldr	r2, [pc, #92]	; (800ea68 <I2C_DMAError+0x220>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d005      	beq.n	800ea1a <I2C_DMAError+0x1d2>
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4a15      	ldr	r2, [pc, #84]	; (800ea6c <I2C_DMAError+0x224>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d12a      	bne.n	800ea70 <I2C_DMAError+0x228>
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	685b      	ldr	r3, [r3, #4]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	bf0c      	ite	eq
 800ea26:	2301      	moveq	r3, #1
 800ea28:	2300      	movne	r3, #0
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	e029      	b.n	800ea82 <I2C_DMAError+0x23a>
 800ea2e:	bf00      	nop
 800ea30:	40020010 	.word	0x40020010
 800ea34:	40020028 	.word	0x40020028
 800ea38:	40020040 	.word	0x40020040
 800ea3c:	40020058 	.word	0x40020058
 800ea40:	40020070 	.word	0x40020070
 800ea44:	40020088 	.word	0x40020088
 800ea48:	400200a0 	.word	0x400200a0
 800ea4c:	400200b8 	.word	0x400200b8
 800ea50:	40020410 	.word	0x40020410
 800ea54:	40020428 	.word	0x40020428
 800ea58:	40020440 	.word	0x40020440
 800ea5c:	40020458 	.word	0x40020458
 800ea60:	40020470 	.word	0x40020470
 800ea64:	40020488 	.word	0x40020488
 800ea68:	400204a0 	.word	0x400204a0
 800ea6c:	400204b8 	.word	0x400204b8
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	bf0c      	ite	eq
 800ea7c:	2301      	moveq	r3, #1
 800ea7e:	2300      	movne	r3, #0
 800ea80:	b2db      	uxtb	r3, r3
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d001      	beq.n	800ea8a <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800ea86:	2301      	movs	r3, #1
 800ea88:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f7fc fbfa 	bl	800b284 <HAL_DMA_GetError>
 800ea90:	4603      	mov	r3, r0
 800ea92:	2b02      	cmp	r3, #2
 800ea94:	d00e      	beq.n	800eab4 <I2C_DMAError+0x26c>
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d00b      	beq.n	800eab4 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	685a      	ldr	r2, [r3, #4]
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eaaa:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800eaac:	2110      	movs	r1, #16
 800eaae:	68b8      	ldr	r0, [r7, #8]
 800eab0:	f7ff fcf8 	bl	800e4a4 <I2C_ITError>
  }
}
 800eab4:	bf00      	nop
 800eab6:	3710      	adds	r7, #16
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eac8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d003      	beq.n	800eada <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead6:	2200      	movs	r2, #0
 800ead8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d003      	beq.n	800eaea <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eae6:	2200      	movs	r2, #0
 800eae8:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800eaea:	68f8      	ldr	r0, [r7, #12]
 800eaec:	f7ff fdca 	bl	800e684 <I2C_TreatErrorCallback>
}
 800eaf0:	bf00      	nop
 800eaf2:	3710      	adds	r7, #16
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b087      	sub	sp, #28
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	607b      	str	r3, [r7, #4]
 800eb02:	460b      	mov	r3, r1
 800eb04:	817b      	strh	r3, [r7, #10]
 800eb06:	4613      	mov	r3, r2
 800eb08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eb0a:	897b      	ldrh	r3, [r7, #10]
 800eb0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800eb10:	7a7b      	ldrb	r3, [r7, #9]
 800eb12:	041b      	lsls	r3, r3, #16
 800eb14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eb18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800eb1e:	6a3b      	ldr	r3, [r7, #32]
 800eb20:	4313      	orrs	r3, r2
 800eb22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eb26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	685a      	ldr	r2, [r3, #4]
 800eb2e:	6a3b      	ldr	r3, [r7, #32]
 800eb30:	0d5b      	lsrs	r3, r3, #21
 800eb32:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800eb36:	4b08      	ldr	r3, [pc, #32]	; (800eb58 <I2C_TransferConfig+0x60>)
 800eb38:	430b      	orrs	r3, r1
 800eb3a:	43db      	mvns	r3, r3
 800eb3c:	ea02 0103 	and.w	r1, r2, r3
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	697a      	ldr	r2, [r7, #20]
 800eb46:	430a      	orrs	r2, r1
 800eb48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800eb4a:	bf00      	nop
 800eb4c:	371c      	adds	r7, #28
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb54:	4770      	bx	lr
 800eb56:	bf00      	nop
 800eb58:	03ff63ff 	.word	0x03ff63ff

0800eb5c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b085      	sub	sp, #20
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	460b      	mov	r3, r1
 800eb66:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb70:	4a39      	ldr	r2, [pc, #228]	; (800ec58 <I2C_Enable_IRQ+0xfc>)
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d032      	beq.n	800ebdc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800eb7a:	4a38      	ldr	r2, [pc, #224]	; (800ec5c <I2C_Enable_IRQ+0x100>)
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d02d      	beq.n	800ebdc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800eb84:	4a36      	ldr	r2, [pc, #216]	; (800ec60 <I2C_Enable_IRQ+0x104>)
 800eb86:	4293      	cmp	r3, r2
 800eb88:	d028      	beq.n	800ebdc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800eb8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	da03      	bge.n	800eb9a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800eb98:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800eb9a:	887b      	ldrh	r3, [r7, #2]
 800eb9c:	f003 0301 	and.w	r3, r3, #1
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d003      	beq.n	800ebac <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800ebaa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ebac:	887b      	ldrh	r3, [r7, #2]
 800ebae:	f003 0302 	and.w	r3, r3, #2
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d003      	beq.n	800ebbe <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800ebbc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ebbe:	887b      	ldrh	r3, [r7, #2]
 800ebc0:	2b10      	cmp	r3, #16
 800ebc2:	d103      	bne.n	800ebcc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800ebca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ebcc:	887b      	ldrh	r3, [r7, #2]
 800ebce:	2b20      	cmp	r3, #32
 800ebd0:	d133      	bne.n	800ec3a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	f043 0320 	orr.w	r3, r3, #32
 800ebd8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ebda:	e02e      	b.n	800ec3a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ebdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	da03      	bge.n	800ebec <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ebea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ebec:	887b      	ldrh	r3, [r7, #2]
 800ebee:	f003 0301 	and.w	r3, r3, #1
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d003      	beq.n	800ebfe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800ebfc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ebfe:	887b      	ldrh	r3, [r7, #2]
 800ec00:	f003 0302 	and.w	r3, r3, #2
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d003      	beq.n	800ec10 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800ec0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ec10:	887b      	ldrh	r3, [r7, #2]
 800ec12:	2b10      	cmp	r3, #16
 800ec14:	d103      	bne.n	800ec1e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800ec1c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ec1e:	887b      	ldrh	r3, [r7, #2]
 800ec20:	2b20      	cmp	r3, #32
 800ec22:	d103      	bne.n	800ec2c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ec2a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ec2c:	887b      	ldrh	r3, [r7, #2]
 800ec2e:	2b40      	cmp	r3, #64	; 0x40
 800ec30:	d103      	bne.n	800ec3a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec38:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	6819      	ldr	r1, [r3, #0]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	430a      	orrs	r2, r1
 800ec48:	601a      	str	r2, [r3, #0]
}
 800ec4a:	bf00      	nop
 800ec4c:	3714      	adds	r7, #20
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec54:	4770      	bx	lr
 800ec56:	bf00      	nop
 800ec58:	0800d363 	.word	0x0800d363
 800ec5c:	0800d7a9 	.word	0x0800d7a9
 800ec60:	0800d549 	.word	0x0800d549

0800ec64 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b085      	sub	sp, #20
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ec70:	2300      	movs	r3, #0
 800ec72:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ec74:	887b      	ldrh	r3, [r7, #2]
 800ec76:	f003 0301 	and.w	r3, r3, #1
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d00f      	beq.n	800ec9e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800ec84:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ec92:	2b28      	cmp	r3, #40	; 0x28
 800ec94:	d003      	beq.n	800ec9e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800ec9c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ec9e:	887b      	ldrh	r3, [r7, #2]
 800eca0:	f003 0302 	and.w	r3, r3, #2
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d00f      	beq.n	800ecc8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800ecae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ecb6:	b2db      	uxtb	r3, r3
 800ecb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ecbc:	2b28      	cmp	r3, #40	; 0x28
 800ecbe:	d003      	beq.n	800ecc8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800ecc6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ecc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	da03      	bge.n	800ecd8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ecd6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ecd8:	887b      	ldrh	r3, [r7, #2]
 800ecda:	2b10      	cmp	r3, #16
 800ecdc:	d103      	bne.n	800ece6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800ece4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ece6:	887b      	ldrh	r3, [r7, #2]
 800ece8:	2b20      	cmp	r3, #32
 800ecea:	d103      	bne.n	800ecf4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f043 0320 	orr.w	r3, r3, #32
 800ecf2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ecf4:	887b      	ldrh	r3, [r7, #2]
 800ecf6:	2b40      	cmp	r3, #64	; 0x40
 800ecf8:	d103      	bne.n	800ed02 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed00:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	6819      	ldr	r1, [r3, #0]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	43da      	mvns	r2, r3
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	400a      	ands	r2, r1
 800ed12:	601a      	str	r2, [r3, #0]
}
 800ed14:	bf00      	nop
 800ed16:	3714      	adds	r7, #20
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr

0800ed20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b083      	sub	sp, #12
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	2b20      	cmp	r3, #32
 800ed34:	d138      	bne.n	800eda8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed3c:	2b01      	cmp	r3, #1
 800ed3e:	d101      	bne.n	800ed44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ed40:	2302      	movs	r3, #2
 800ed42:	e032      	b.n	800edaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2201      	movs	r2, #1
 800ed48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2224      	movs	r2, #36	; 0x24
 800ed50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	681a      	ldr	r2, [r3, #0]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	f022 0201 	bic.w	r2, r2, #1
 800ed62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ed72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	6819      	ldr	r1, [r3, #0]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	683a      	ldr	r2, [r7, #0]
 800ed80:	430a      	orrs	r2, r1
 800ed82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f042 0201 	orr.w	r2, r2, #1
 800ed92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2220      	movs	r2, #32
 800ed98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800eda4:	2300      	movs	r3, #0
 800eda6:	e000      	b.n	800edaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800eda8:	2302      	movs	r3, #2
  }
}
 800edaa:	4618      	mov	r0, r3
 800edac:	370c      	adds	r7, #12
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr

0800edb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800edb6:	b480      	push	{r7}
 800edb8:	b085      	sub	sp, #20
 800edba:	af00      	add	r7, sp, #0
 800edbc:	6078      	str	r0, [r7, #4]
 800edbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	2b20      	cmp	r3, #32
 800edca:	d139      	bne.n	800ee40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800edd2:	2b01      	cmp	r3, #1
 800edd4:	d101      	bne.n	800edda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800edd6:	2302      	movs	r3, #2
 800edd8:	e033      	b.n	800ee42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2201      	movs	r2, #1
 800edde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2224      	movs	r2, #36	; 0x24
 800ede6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	681a      	ldr	r2, [r3, #0]
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f022 0201 	bic.w	r2, r2, #1
 800edf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ee08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	021b      	lsls	r3, r3, #8
 800ee0e:	68fa      	ldr	r2, [r7, #12]
 800ee10:	4313      	orrs	r3, r2
 800ee12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	681a      	ldr	r2, [r3, #0]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f042 0201 	orr.w	r2, r2, #1
 800ee2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2220      	movs	r2, #32
 800ee30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2200      	movs	r2, #0
 800ee38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	e000      	b.n	800ee42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ee40:	2302      	movs	r3, #2
  }
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3714      	adds	r7, #20
 800ee46:	46bd      	mov	sp, r7
 800ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4c:	4770      	bx	lr
	...

0800ee50 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b085      	sub	sp, #20
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ee58:	4b0d      	ldr	r3, [pc, #52]	; (800ee90 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800ee5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ee5e:	4a0c      	ldr	r2, [pc, #48]	; (800ee90 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800ee60:	f043 0302 	orr.w	r3, r3, #2
 800ee64:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ee68:	4b09      	ldr	r3, [pc, #36]	; (800ee90 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800ee6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ee6e:	f003 0302 	and.w	r3, r3, #2
 800ee72:	60fb      	str	r3, [r7, #12]
 800ee74:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800ee76:	4b07      	ldr	r3, [pc, #28]	; (800ee94 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800ee78:	685a      	ldr	r2, [r3, #4]
 800ee7a:	4906      	ldr	r1, [pc, #24]	; (800ee94 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	4313      	orrs	r3, r2
 800ee80:	604b      	str	r3, [r1, #4]
}
 800ee82:	bf00      	nop
 800ee84:	3714      	adds	r7, #20
 800ee86:	46bd      	mov	sp, r7
 800ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8c:	4770      	bx	lr
 800ee8e:	bf00      	nop
 800ee90:	58024400 	.word	0x58024400
 800ee94:	58000400 	.word	0x58000400

0800ee98 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d101      	bne.n	800eeaa <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800eea6:	2301      	movs	r3, #1
 800eea8:	e041      	b.n	800ef2e <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800eeb2:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f245 5255 	movw	r2, #21845	; 0x5555
 800eebc:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	6852      	ldr	r2, [r2, #4]
 800eec6:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	6892      	ldr	r2, [r2, #8]
 800eed0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800eed2:	f7f7 fe4d 	bl	8006b70 <HAL_GetTick>
 800eed6:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800eed8:	e00f      	b.n	800eefa <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800eeda:	f7f7 fe49 	bl	8006b70 <HAL_GetTick>
 800eede:	4602      	mov	r2, r0
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	1ad3      	subs	r3, r2, r3
 800eee4:	2b31      	cmp	r3, #49	; 0x31
 800eee6:	d908      	bls.n	800eefa <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	f003 0307 	and.w	r3, r3, #7
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d001      	beq.n	800eefa <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800eef6:	2303      	movs	r3, #3
 800eef8:	e019      	b.n	800ef2e <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	68db      	ldr	r3, [r3, #12]
 800ef00:	f003 0307 	and.w	r3, r3, #7
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d1e8      	bne.n	800eeda <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	691a      	ldr	r2, [r3, #16]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d005      	beq.n	800ef22 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	68d2      	ldr	r2, [r2, #12]
 800ef1e:	611a      	str	r2, [r3, #16]
 800ef20:	e004      	b.n	800ef2c <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ef2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ef2c:	2300      	movs	r3, #0
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3710      	adds	r7, #16
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}

0800ef36 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800ef36:	b480      	push	{r7}
 800ef38:	b083      	sub	sp, #12
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ef46:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	370c      	adds	r7, #12
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef54:	4770      	bx	lr
	...

0800ef58 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b083      	sub	sp, #12
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	460b      	mov	r3, r1
 800ef62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800ef64:	4b18      	ldr	r3, [pc, #96]	; (800efc8 <HAL_PWR_EnterSTOPMode+0x70>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f023 0201 	bic.w	r2, r3, #1
 800ef6c:	4916      	ldr	r1, [pc, #88]	; (800efc8 <HAL_PWR_EnterSTOPMode+0x70>)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	4313      	orrs	r3, r2
 800ef72:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800ef74:	4b14      	ldr	r3, [pc, #80]	; (800efc8 <HAL_PWR_EnterSTOPMode+0x70>)
 800ef76:	691b      	ldr	r3, [r3, #16]
 800ef78:	4a13      	ldr	r2, [pc, #76]	; (800efc8 <HAL_PWR_EnterSTOPMode+0x70>)
 800ef7a:	f023 0305 	bic.w	r3, r3, #5
 800ef7e:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800ef80:	4b11      	ldr	r3, [pc, #68]	; (800efc8 <HAL_PWR_EnterSTOPMode+0x70>)
 800ef82:	691b      	ldr	r3, [r3, #16]
 800ef84:	4a10      	ldr	r2, [pc, #64]	; (800efc8 <HAL_PWR_EnterSTOPMode+0x70>)
 800ef86:	f023 0302 	bic.w	r3, r3, #2
 800ef8a:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800ef8c:	4b0f      	ldr	r3, [pc, #60]	; (800efcc <HAL_PWR_EnterSTOPMode+0x74>)
 800ef8e:	691b      	ldr	r3, [r3, #16]
 800ef90:	4a0e      	ldr	r2, [pc, #56]	; (800efcc <HAL_PWR_EnterSTOPMode+0x74>)
 800ef92:	f043 0304 	orr.w	r3, r3, #4
 800ef96:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800ef98:	f3bf 8f4f 	dsb	sy
}
 800ef9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ef9e:	f3bf 8f6f 	isb	sy
}
 800efa2:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800efa4:	78fb      	ldrb	r3, [r7, #3]
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d101      	bne.n	800efae <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800efaa:	bf30      	wfi
 800efac:	e000      	b.n	800efb0 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800efae:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800efb0:	4b06      	ldr	r3, [pc, #24]	; (800efcc <HAL_PWR_EnterSTOPMode+0x74>)
 800efb2:	691b      	ldr	r3, [r3, #16]
 800efb4:	4a05      	ldr	r2, [pc, #20]	; (800efcc <HAL_PWR_EnterSTOPMode+0x74>)
 800efb6:	f023 0304 	bic.w	r3, r3, #4
 800efba:	6113      	str	r3, [r2, #16]
}
 800efbc:	bf00      	nop
 800efbe:	370c      	adds	r7, #12
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr
 800efc8:	58024800 	.word	0x58024800
 800efcc:	e000ed00 	.word	0xe000ed00

0800efd0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800efd8:	4b19      	ldr	r3, [pc, #100]	; (800f040 <HAL_PWREx_ConfigSupply+0x70>)
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	f003 0304 	and.w	r3, r3, #4
 800efe0:	2b04      	cmp	r3, #4
 800efe2:	d00a      	beq.n	800effa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800efe4:	4b16      	ldr	r3, [pc, #88]	; (800f040 <HAL_PWREx_ConfigSupply+0x70>)
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	f003 0307 	and.w	r3, r3, #7
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d001      	beq.n	800eff6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800eff2:	2301      	movs	r3, #1
 800eff4:	e01f      	b.n	800f036 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800eff6:	2300      	movs	r3, #0
 800eff8:	e01d      	b.n	800f036 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800effa:	4b11      	ldr	r3, [pc, #68]	; (800f040 <HAL_PWREx_ConfigSupply+0x70>)
 800effc:	68db      	ldr	r3, [r3, #12]
 800effe:	f023 0207 	bic.w	r2, r3, #7
 800f002:	490f      	ldr	r1, [pc, #60]	; (800f040 <HAL_PWREx_ConfigSupply+0x70>)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	4313      	orrs	r3, r2
 800f008:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800f00a:	f7f7 fdb1 	bl	8006b70 <HAL_GetTick>
 800f00e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f010:	e009      	b.n	800f026 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800f012:	f7f7 fdad 	bl	8006b70 <HAL_GetTick>
 800f016:	4602      	mov	r2, r0
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	1ad3      	subs	r3, r2, r3
 800f01c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f020:	d901      	bls.n	800f026 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800f022:	2301      	movs	r3, #1
 800f024:	e007      	b.n	800f036 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800f026:	4b06      	ldr	r3, [pc, #24]	; (800f040 <HAL_PWREx_ConfigSupply+0x70>)
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f02e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f032:	d1ee      	bne.n	800f012 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800f034:	2300      	movs	r3, #0
}
 800f036:	4618      	mov	r0, r3
 800f038:	3710      	adds	r7, #16
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}
 800f03e:	bf00      	nop
 800f040:	58024800 	.word	0x58024800

0800f044 <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init(RAMECC_HandleTypeDef *hramecc)
{
 800f044:	b480      	push	{r7}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d101      	bne.n	800f056 <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 800f052:	2301      	movs	r3, #1
 800f054:	e030      	b.n	800f0b8 <HAL_RAMECC_Init+0x74>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2202      	movs	r2, #2
 800f05a:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	f022 0220 	bic.w	r2, r2, #32
 800f06a:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	6812      	ldr	r2, [r2, #0]
 800f07a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800f07e:	f023 030f 	bic.w	r3, r3, #15
 800f082:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f022 021c 	bic.w	r2, r2, #28
 800f092:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	685a      	ldr	r2, [r3, #4]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f022 0207 	bic.w	r2, r2, #7
 800f0a2:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	609a      	str	r2, [r3, #8]

  /* Initialise the RAMECC error detected code */
  hramecc->RAMECCErrorCode = HAL_RAMECC_NO_ERROR;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	60da      	str	r2, [r3, #12]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2201      	movs	r2, #1
 800f0b4:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 800f0b6:	2300      	movs	r3, #0
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	370c      	adds	r7, #12
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c2:	4770      	bx	lr

0800f0c4 <HAL_RAMECC_StartMonitor>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_StartMonitor(RAMECC_HandleTypeDef *hramecc)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Check RAMECC state */
  if (hramecc->State == HAL_RAMECC_STATE_READY)
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	791b      	ldrb	r3, [r3, #4]
 800f0d0:	b2db      	uxtb	r3, r3
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d10f      	bne.n	800f0f6 <HAL_RAMECC_StartMonitor+0x32>
  {
    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_BUSY;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2202      	movs	r2, #2
 800f0da:	711a      	strb	r2, [r3, #4]

    /* Enable RAMECC monitor */
    hramecc->Instance->CR |= RAMECC_CR_ECCELEN;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	f042 0220 	orr.w	r2, r2, #32
 800f0ea:	601a      	str	r2, [r3, #0]

    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_READY;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	711a      	strb	r2, [r3, #4]
    /* Return HAL status */
    return HAL_ERROR;
  }

  /* Return HAL status */
  return HAL_OK;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	e003      	b.n	800f0fe <HAL_RAMECC_StartMonitor+0x3a>
    hramecc->ErrorCode = HAL_RAMECC_ERROR_BUSY;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2202      	movs	r2, #2
 800f0fa:	609a      	str	r2, [r3, #8]
    return HAL_ERROR;
 800f0fc:	2301      	movs	r3, #1
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	370c      	adds	r7, #12
 800f102:	46bd      	mov	sp, r7
 800f104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f108:	4770      	bx	lr
	...

0800f10c <HAL_RAMECC_EnableNotification>:
  *                        specified RAMECC Monitor.
  * @param  Notifications  Select the notification.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_EnableNotification(RAMECC_HandleTypeDef *hramecc, uint32_t Notifications)
{
 800f10c:	b480      	push	{r7}
 800f10e:	b083      	sub	sp, #12
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));
  assert_param (IS_RAMECC_INTERRUPT (Notifications));

  /* Check RAMECC state */
  if (hramecc->State == HAL_RAMECC_STATE_READY)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	791b      	ldrb	r3, [r3, #4]
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d134      	bne.n	800f18a <HAL_RAMECC_EnableNotification+0x7e>
  {
    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_BUSY;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2202      	movs	r2, #2
 800f124:	711a      	strb	r2, [r3, #4]

    /* Enable RAMECC interrupts */
    __HAL_RAMECC_ENABLE_IT (hramecc, Notifications);
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	4a1d      	ldr	r2, [pc, #116]	; (800f1a0 <HAL_RAMECC_EnableNotification+0x94>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d00f      	beq.n	800f14e <HAL_RAMECC_EnableNotification+0x42>
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	4a1c      	ldr	r2, [pc, #112]	; (800f1a4 <HAL_RAMECC_EnableNotification+0x98>)
 800f132:	4293      	cmp	r3, r2
 800f134:	d00b      	beq.n	800f14e <HAL_RAMECC_EnableNotification+0x42>
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	4a1b      	ldr	r2, [pc, #108]	; (800f1a8 <HAL_RAMECC_EnableNotification+0x9c>)
 800f13a:	4293      	cmp	r3, r2
 800f13c:	d007      	beq.n	800f14e <HAL_RAMECC_EnableNotification+0x42>
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	4a1a      	ldr	r2, [pc, #104]	; (800f1ac <HAL_RAMECC_EnableNotification+0xa0>)
 800f142:	4293      	cmp	r3, r2
 800f144:	d003      	beq.n	800f14e <HAL_RAMECC_EnableNotification+0x42>
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	4a19      	ldr	r2, [pc, #100]	; (800f1b0 <HAL_RAMECC_EnableNotification+0xa4>)
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d10e      	bne.n	800f16c <HAL_RAMECC_EnableNotification+0x60>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f156:	681a      	ldr	r2, [r3, #0]
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f15e:	6879      	ldr	r1, [r7, #4]
 800f160:	6809      	ldr	r1, [r1, #0]
 800f162:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800f166:	4313      	orrs	r3, r2
 800f168:	600b      	str	r3, [r1, #0]
 800f16a:	e009      	b.n	800f180 <HAL_RAMECC_EnableNotification+0x74>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	6819      	ldr	r1, [r3, #0]
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	430a      	orrs	r2, r1
 800f17e:	601a      	str	r2, [r3, #0]

    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_READY;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2201      	movs	r2, #1
 800f184:	711a      	strb	r2, [r3, #4]
    /* Return HAL status */
    return HAL_ERROR;
  }

  /* Return HAL status */
  return HAL_OK;
 800f186:	2300      	movs	r3, #0
 800f188:	e003      	b.n	800f192 <HAL_RAMECC_EnableNotification+0x86>
    hramecc->ErrorCode = HAL_RAMECC_ERROR_BUSY;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2202      	movs	r2, #2
 800f18e:	609a      	str	r2, [r3, #8]
    return HAL_ERROR;
 800f190:	2301      	movs	r3, #1
}
 800f192:	4618      	mov	r0, r3
 800f194:	370c      	adds	r7, #12
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr
 800f19e:	bf00      	nop
 800f1a0:	10000001 	.word	0x10000001
 800f1a4:	10000002 	.word	0x10000002
 800f1a8:	10000004 	.word	0x10000004
 800f1ac:	10000008 	.word	0x10000008
 800f1b0:	1000000f 	.word	0x1000000f

0800f1b4 <HAL_RAMECC_IRQHandler>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval None.
  */
void HAL_RAMECC_IRQHandler(RAMECC_HandleTypeDef *hramecc)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b086      	sub	sp, #24
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
  uint32_t ier_reg = ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	617b      	str	r3, [r7, #20]
  uint32_t cr_reg = hramecc->Instance->CR >> 1U;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	085b      	lsrs	r3, r3, #1
 800f1d0:	613b      	str	r3, [r7, #16]
  uint32_t sr_reg = hramecc->Instance->SR;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	60fb      	str	r3, [r7, #12]

  /* Update global interrupt variables */
  if ((ier_reg & RAMECC_IER_GIE) == RAMECC_IER_GIE)
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	f003 0301 	and.w	r3, r3, #1
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d001      	beq.n	800f1e8 <HAL_RAMECC_IRQHandler+0x34>
  {
    ier_reg = RAMECC_IT_GLOBAL_ALL;
 800f1e4:	4b16      	ldr	r3, [pc, #88]	; (800f240 <HAL_RAMECC_IRQHandler+0x8c>)
 800f1e6:	617b      	str	r3, [r7, #20]
  }

  /* Store the ECC Single error detected */
  if ((sr_reg & RAMECC_SR_SEDCF) == RAMECC_SR_SEDCF)
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f003 0301 	and.w	r3, r3, #1
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d005      	beq.n	800f1fe <HAL_RAMECC_IRQHandler+0x4a>
  {
    hramecc->RAMECCErrorCode |= HAL_RAMECC_SINGLEERROR_DETECTED;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	68db      	ldr	r3, [r3, #12]
 800f1f6:	f043 0201 	orr.w	r2, r3, #1
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	60da      	str	r2, [r3, #12]
  }

  /* Store the ECC double error detected */
  if ((sr_reg & (RAMECC_SR_DEDF | RAMECC_SR_DEBWDF)) != 0U)
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f003 0306 	and.w	r3, r3, #6
 800f204:	2b00      	cmp	r3, #0
 800f206:	d005      	beq.n	800f214 <HAL_RAMECC_IRQHandler+0x60>
  {
    hramecc->RAMECCErrorCode |= HAL_RAMECC_DOUBLEERROR_DETECTED;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	68db      	ldr	r3, [r3, #12]
 800f20c:	f043 0202 	orr.w	r2, r3, #2
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	60da      	str	r2, [r3, #12]
  }

  /* Clear active flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, (((ier_reg | cr_reg) & (sr_reg << 1U)) >> 1U));
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	6859      	ldr	r1, [r3, #4]
 800f21a:	697a      	ldr	r2, [r7, #20]
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	431a      	orrs	r2, r3
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	005b      	lsls	r3, r3, #1
 800f224:	4013      	ands	r3, r2
 800f226:	085b      	lsrs	r3, r3, #1
 800f228:	43da      	mvns	r2, r3
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	400a      	ands	r2, r1
 800f230:	605a      	str	r2, [r3, #4]
  {
    /* Error detection callback */
    hramecc->DetectErrorCallback(hramecc);
  }
#else
  HAL_RAMECC_DetectErrorCallback(hramecc);
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f7f5 fa42 	bl	80046bc <HAL_RAMECC_DetectErrorCallback>
#endif /* USE_HAL_RAMECC_REGISTER_CALLBACKS */
}
 800f238:	bf00      	nop
 800f23a:	3718      	adds	r7, #24
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	1000000f 	.word	0x1000000f

0800f244 <HAL_RAMECC_GetRAMECCError>:
  *                         contains the configuration information for the
  *                         specified RAMECC instance.
  * @retval RAMECC error code detected.
  */
uint32_t HAL_RAMECC_GetRAMECCError(RAMECC_HandleTypeDef *hramecc)
{
 800f244:	b480      	push	{r7}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  /* Return the RAMECC error code detected*/
  return hramecc->RAMECCErrorCode;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	68db      	ldr	r3, [r3, #12]
}
 800f250:	4618      	mov	r0, r3
 800f252:	370c      	adds	r7, #12
 800f254:	46bd      	mov	sp, r7
 800f256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25a:	4770      	bx	lr

0800f25c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b08c      	sub	sp, #48	; 0x30
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d102      	bne.n	800f270 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f26a:	2301      	movs	r3, #1
 800f26c:	f000 bc48 	b.w	800fb00 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f003 0301 	and.w	r3, r3, #1
 800f278:	2b00      	cmp	r3, #0
 800f27a:	f000 8088 	beq.w	800f38e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f27e:	4b99      	ldr	r3, [pc, #612]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f280:	691b      	ldr	r3, [r3, #16]
 800f282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f286:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f288:	4b96      	ldr	r3, [pc, #600]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f28c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800f28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f290:	2b10      	cmp	r3, #16
 800f292:	d007      	beq.n	800f2a4 <HAL_RCC_OscConfig+0x48>
 800f294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f296:	2b18      	cmp	r3, #24
 800f298:	d111      	bne.n	800f2be <HAL_RCC_OscConfig+0x62>
 800f29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29c:	f003 0303 	and.w	r3, r3, #3
 800f2a0:	2b02      	cmp	r3, #2
 800f2a2:	d10c      	bne.n	800f2be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f2a4:	4b8f      	ldr	r3, [pc, #572]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d06d      	beq.n	800f38c <HAL_RCC_OscConfig+0x130>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d169      	bne.n	800f38c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	f000 bc21 	b.w	800fb00 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2c6:	d106      	bne.n	800f2d6 <HAL_RCC_OscConfig+0x7a>
 800f2c8:	4b86      	ldr	r3, [pc, #536]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	4a85      	ldr	r2, [pc, #532]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f2ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f2d2:	6013      	str	r3, [r2, #0]
 800f2d4:	e02e      	b.n	800f334 <HAL_RCC_OscConfig+0xd8>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d10c      	bne.n	800f2f8 <HAL_RCC_OscConfig+0x9c>
 800f2de:	4b81      	ldr	r3, [pc, #516]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	4a80      	ldr	r2, [pc, #512]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f2e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f2e8:	6013      	str	r3, [r2, #0]
 800f2ea:	4b7e      	ldr	r3, [pc, #504]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	4a7d      	ldr	r2, [pc, #500]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f2f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f2f4:	6013      	str	r3, [r2, #0]
 800f2f6:	e01d      	b.n	800f334 <HAL_RCC_OscConfig+0xd8>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	685b      	ldr	r3, [r3, #4]
 800f2fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f300:	d10c      	bne.n	800f31c <HAL_RCC_OscConfig+0xc0>
 800f302:	4b78      	ldr	r3, [pc, #480]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	4a77      	ldr	r2, [pc, #476]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f30c:	6013      	str	r3, [r2, #0]
 800f30e:	4b75      	ldr	r3, [pc, #468]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	4a74      	ldr	r2, [pc, #464]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f318:	6013      	str	r3, [r2, #0]
 800f31a:	e00b      	b.n	800f334 <HAL_RCC_OscConfig+0xd8>
 800f31c:	4b71      	ldr	r3, [pc, #452]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	4a70      	ldr	r2, [pc, #448]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f326:	6013      	str	r3, [r2, #0]
 800f328:	4b6e      	ldr	r3, [pc, #440]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	4a6d      	ldr	r2, [pc, #436]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f32e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d013      	beq.n	800f364 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f33c:	f7f7 fc18 	bl	8006b70 <HAL_GetTick>
 800f340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f342:	e008      	b.n	800f356 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f344:	f7f7 fc14 	bl	8006b70 <HAL_GetTick>
 800f348:	4602      	mov	r2, r0
 800f34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34c:	1ad3      	subs	r3, r2, r3
 800f34e:	2b64      	cmp	r3, #100	; 0x64
 800f350:	d901      	bls.n	800f356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f352:	2303      	movs	r3, #3
 800f354:	e3d4      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f356:	4b63      	ldr	r3, [pc, #396]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d0f0      	beq.n	800f344 <HAL_RCC_OscConfig+0xe8>
 800f362:	e014      	b.n	800f38e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f364:	f7f7 fc04 	bl	8006b70 <HAL_GetTick>
 800f368:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f36a:	e008      	b.n	800f37e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f36c:	f7f7 fc00 	bl	8006b70 <HAL_GetTick>
 800f370:	4602      	mov	r2, r0
 800f372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f374:	1ad3      	subs	r3, r2, r3
 800f376:	2b64      	cmp	r3, #100	; 0x64
 800f378:	d901      	bls.n	800f37e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800f37a:	2303      	movs	r3, #3
 800f37c:	e3c0      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f37e:	4b59      	ldr	r3, [pc, #356]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f386:	2b00      	cmp	r3, #0
 800f388:	d1f0      	bne.n	800f36c <HAL_RCC_OscConfig+0x110>
 800f38a:	e000      	b.n	800f38e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f38c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f003 0302 	and.w	r3, r3, #2
 800f396:	2b00      	cmp	r3, #0
 800f398:	f000 80ca 	beq.w	800f530 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f39c:	4b51      	ldr	r3, [pc, #324]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f39e:	691b      	ldr	r3, [r3, #16]
 800f3a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f3a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f3a6:	4b4f      	ldr	r3, [pc, #316]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f3ac:	6a3b      	ldr	r3, [r7, #32]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d007      	beq.n	800f3c2 <HAL_RCC_OscConfig+0x166>
 800f3b2:	6a3b      	ldr	r3, [r7, #32]
 800f3b4:	2b18      	cmp	r3, #24
 800f3b6:	d156      	bne.n	800f466 <HAL_RCC_OscConfig+0x20a>
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	f003 0303 	and.w	r3, r3, #3
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d151      	bne.n	800f466 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f3c2:	4b48      	ldr	r3, [pc, #288]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f003 0304 	and.w	r3, r3, #4
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d005      	beq.n	800f3da <HAL_RCC_OscConfig+0x17e>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	68db      	ldr	r3, [r3, #12]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d101      	bne.n	800f3da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	e392      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f3da:	4b42      	ldr	r3, [pc, #264]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f023 0219 	bic.w	r2, r3, #25
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	68db      	ldr	r3, [r3, #12]
 800f3e6:	493f      	ldr	r1, [pc, #252]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f3ec:	f7f7 fbc0 	bl	8006b70 <HAL_GetTick>
 800f3f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f3f2:	e008      	b.n	800f406 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f3f4:	f7f7 fbbc 	bl	8006b70 <HAL_GetTick>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fc:	1ad3      	subs	r3, r2, r3
 800f3fe:	2b02      	cmp	r3, #2
 800f400:	d901      	bls.n	800f406 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800f402:	2303      	movs	r3, #3
 800f404:	e37c      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f406:	4b37      	ldr	r3, [pc, #220]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f003 0304 	and.w	r3, r3, #4
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d0f0      	beq.n	800f3f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f412:	f7f7 fbb9 	bl	8006b88 <HAL_GetREVID>
 800f416:	4603      	mov	r3, r0
 800f418:	f241 0203 	movw	r2, #4099	; 0x1003
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d817      	bhi.n	800f450 <HAL_RCC_OscConfig+0x1f4>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	691b      	ldr	r3, [r3, #16]
 800f424:	2b40      	cmp	r3, #64	; 0x40
 800f426:	d108      	bne.n	800f43a <HAL_RCC_OscConfig+0x1de>
 800f428:	4b2e      	ldr	r3, [pc, #184]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f430:	4a2c      	ldr	r2, [pc, #176]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f436:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f438:	e07a      	b.n	800f530 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f43a:	4b2a      	ldr	r3, [pc, #168]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	691b      	ldr	r3, [r3, #16]
 800f446:	031b      	lsls	r3, r3, #12
 800f448:	4926      	ldr	r1, [pc, #152]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f44a:	4313      	orrs	r3, r2
 800f44c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f44e:	e06f      	b.n	800f530 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f450:	4b24      	ldr	r3, [pc, #144]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	691b      	ldr	r3, [r3, #16]
 800f45c:	061b      	lsls	r3, r3, #24
 800f45e:	4921      	ldr	r1, [pc, #132]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f460:	4313      	orrs	r3, r2
 800f462:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f464:	e064      	b.n	800f530 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	68db      	ldr	r3, [r3, #12]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d047      	beq.n	800f4fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f46e:	4b1d      	ldr	r3, [pc, #116]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	f023 0219 	bic.w	r2, r3, #25
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	68db      	ldr	r3, [r3, #12]
 800f47a:	491a      	ldr	r1, [pc, #104]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f47c:	4313      	orrs	r3, r2
 800f47e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f480:	f7f7 fb76 	bl	8006b70 <HAL_GetTick>
 800f484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f486:	e008      	b.n	800f49a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f488:	f7f7 fb72 	bl	8006b70 <HAL_GetTick>
 800f48c:	4602      	mov	r2, r0
 800f48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f490:	1ad3      	subs	r3, r2, r3
 800f492:	2b02      	cmp	r3, #2
 800f494:	d901      	bls.n	800f49a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800f496:	2303      	movs	r3, #3
 800f498:	e332      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f49a:	4b12      	ldr	r3, [pc, #72]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f003 0304 	and.w	r3, r3, #4
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d0f0      	beq.n	800f488 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f4a6:	f7f7 fb6f 	bl	8006b88 <HAL_GetREVID>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	f241 0203 	movw	r2, #4099	; 0x1003
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d819      	bhi.n	800f4e8 <HAL_RCC_OscConfig+0x28c>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	691b      	ldr	r3, [r3, #16]
 800f4b8:	2b40      	cmp	r3, #64	; 0x40
 800f4ba:	d108      	bne.n	800f4ce <HAL_RCC_OscConfig+0x272>
 800f4bc:	4b09      	ldr	r3, [pc, #36]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f4c4:	4a07      	ldr	r2, [pc, #28]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f4c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f4ca:	6053      	str	r3, [r2, #4]
 800f4cc:	e030      	b.n	800f530 <HAL_RCC_OscConfig+0x2d4>
 800f4ce:	4b05      	ldr	r3, [pc, #20]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	691b      	ldr	r3, [r3, #16]
 800f4da:	031b      	lsls	r3, r3, #12
 800f4dc:	4901      	ldr	r1, [pc, #4]	; (800f4e4 <HAL_RCC_OscConfig+0x288>)
 800f4de:	4313      	orrs	r3, r2
 800f4e0:	604b      	str	r3, [r1, #4]
 800f4e2:	e025      	b.n	800f530 <HAL_RCC_OscConfig+0x2d4>
 800f4e4:	58024400 	.word	0x58024400
 800f4e8:	4b9a      	ldr	r3, [pc, #616]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	691b      	ldr	r3, [r3, #16]
 800f4f4:	061b      	lsls	r3, r3, #24
 800f4f6:	4997      	ldr	r1, [pc, #604]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f4f8:	4313      	orrs	r3, r2
 800f4fa:	604b      	str	r3, [r1, #4]
 800f4fc:	e018      	b.n	800f530 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f4fe:	4b95      	ldr	r3, [pc, #596]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	4a94      	ldr	r2, [pc, #592]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f504:	f023 0301 	bic.w	r3, r3, #1
 800f508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f50a:	f7f7 fb31 	bl	8006b70 <HAL_GetTick>
 800f50e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f510:	e008      	b.n	800f524 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f512:	f7f7 fb2d 	bl	8006b70 <HAL_GetTick>
 800f516:	4602      	mov	r2, r0
 800f518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51a:	1ad3      	subs	r3, r2, r3
 800f51c:	2b02      	cmp	r3, #2
 800f51e:	d901      	bls.n	800f524 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800f520:	2303      	movs	r3, #3
 800f522:	e2ed      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f524:	4b8b      	ldr	r3, [pc, #556]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f003 0304 	and.w	r3, r3, #4
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d1f0      	bne.n	800f512 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	f003 0310 	and.w	r3, r3, #16
 800f538:	2b00      	cmp	r3, #0
 800f53a:	f000 80a9 	beq.w	800f690 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f53e:	4b85      	ldr	r3, [pc, #532]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f540:	691b      	ldr	r3, [r3, #16]
 800f542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f546:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f548:	4b82      	ldr	r3, [pc, #520]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f54c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f54e:	69bb      	ldr	r3, [r7, #24]
 800f550:	2b08      	cmp	r3, #8
 800f552:	d007      	beq.n	800f564 <HAL_RCC_OscConfig+0x308>
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	2b18      	cmp	r3, #24
 800f558:	d13a      	bne.n	800f5d0 <HAL_RCC_OscConfig+0x374>
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	f003 0303 	and.w	r3, r3, #3
 800f560:	2b01      	cmp	r3, #1
 800f562:	d135      	bne.n	800f5d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f564:	4b7b      	ldr	r3, [pc, #492]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d005      	beq.n	800f57c <HAL_RCC_OscConfig+0x320>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	69db      	ldr	r3, [r3, #28]
 800f574:	2b80      	cmp	r3, #128	; 0x80
 800f576:	d001      	beq.n	800f57c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800f578:	2301      	movs	r3, #1
 800f57a:	e2c1      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f57c:	f7f7 fb04 	bl	8006b88 <HAL_GetREVID>
 800f580:	4603      	mov	r3, r0
 800f582:	f241 0203 	movw	r2, #4099	; 0x1003
 800f586:	4293      	cmp	r3, r2
 800f588:	d817      	bhi.n	800f5ba <HAL_RCC_OscConfig+0x35e>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	6a1b      	ldr	r3, [r3, #32]
 800f58e:	2b20      	cmp	r3, #32
 800f590:	d108      	bne.n	800f5a4 <HAL_RCC_OscConfig+0x348>
 800f592:	4b70      	ldr	r3, [pc, #448]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f594:	685b      	ldr	r3, [r3, #4]
 800f596:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f59a:	4a6e      	ldr	r2, [pc, #440]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f59c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f5a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f5a2:	e075      	b.n	800f690 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f5a4:	4b6b      	ldr	r3, [pc, #428]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6a1b      	ldr	r3, [r3, #32]
 800f5b0:	069b      	lsls	r3, r3, #26
 800f5b2:	4968      	ldr	r1, [pc, #416]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f5b4:	4313      	orrs	r3, r2
 800f5b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f5b8:	e06a      	b.n	800f690 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f5ba:	4b66      	ldr	r3, [pc, #408]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f5bc:	68db      	ldr	r3, [r3, #12]
 800f5be:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6a1b      	ldr	r3, [r3, #32]
 800f5c6:	061b      	lsls	r3, r3, #24
 800f5c8:	4962      	ldr	r1, [pc, #392]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f5ca:	4313      	orrs	r3, r2
 800f5cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f5ce:	e05f      	b.n	800f690 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	69db      	ldr	r3, [r3, #28]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d042      	beq.n	800f65e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800f5d8:	4b5e      	ldr	r3, [pc, #376]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	4a5d      	ldr	r2, [pc, #372]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f5de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f5e4:	f7f7 fac4 	bl	8006b70 <HAL_GetTick>
 800f5e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f5ea:	e008      	b.n	800f5fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800f5ec:	f7f7 fac0 	bl	8006b70 <HAL_GetTick>
 800f5f0:	4602      	mov	r2, r0
 800f5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f4:	1ad3      	subs	r3, r2, r3
 800f5f6:	2b02      	cmp	r3, #2
 800f5f8:	d901      	bls.n	800f5fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800f5fa:	2303      	movs	r3, #3
 800f5fc:	e280      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f5fe:	4b55      	ldr	r3, [pc, #340]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f606:	2b00      	cmp	r3, #0
 800f608:	d0f0      	beq.n	800f5ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f60a:	f7f7 fabd 	bl	8006b88 <HAL_GetREVID>
 800f60e:	4603      	mov	r3, r0
 800f610:	f241 0203 	movw	r2, #4099	; 0x1003
 800f614:	4293      	cmp	r3, r2
 800f616:	d817      	bhi.n	800f648 <HAL_RCC_OscConfig+0x3ec>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6a1b      	ldr	r3, [r3, #32]
 800f61c:	2b20      	cmp	r3, #32
 800f61e:	d108      	bne.n	800f632 <HAL_RCC_OscConfig+0x3d6>
 800f620:	4b4c      	ldr	r3, [pc, #304]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f628:	4a4a      	ldr	r2, [pc, #296]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f62a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f62e:	6053      	str	r3, [r2, #4]
 800f630:	e02e      	b.n	800f690 <HAL_RCC_OscConfig+0x434>
 800f632:	4b48      	ldr	r3, [pc, #288]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f634:	685b      	ldr	r3, [r3, #4]
 800f636:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	6a1b      	ldr	r3, [r3, #32]
 800f63e:	069b      	lsls	r3, r3, #26
 800f640:	4944      	ldr	r1, [pc, #272]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f642:	4313      	orrs	r3, r2
 800f644:	604b      	str	r3, [r1, #4]
 800f646:	e023      	b.n	800f690 <HAL_RCC_OscConfig+0x434>
 800f648:	4b42      	ldr	r3, [pc, #264]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f64a:	68db      	ldr	r3, [r3, #12]
 800f64c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6a1b      	ldr	r3, [r3, #32]
 800f654:	061b      	lsls	r3, r3, #24
 800f656:	493f      	ldr	r1, [pc, #252]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f658:	4313      	orrs	r3, r2
 800f65a:	60cb      	str	r3, [r1, #12]
 800f65c:	e018      	b.n	800f690 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800f65e:	4b3d      	ldr	r3, [pc, #244]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	4a3c      	ldr	r2, [pc, #240]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f66a:	f7f7 fa81 	bl	8006b70 <HAL_GetTick>
 800f66e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f670:	e008      	b.n	800f684 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800f672:	f7f7 fa7d 	bl	8006b70 <HAL_GetTick>
 800f676:	4602      	mov	r2, r0
 800f678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f67a:	1ad3      	subs	r3, r2, r3
 800f67c:	2b02      	cmp	r3, #2
 800f67e:	d901      	bls.n	800f684 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f680:	2303      	movs	r3, #3
 800f682:	e23d      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f684:	4b33      	ldr	r3, [pc, #204]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d1f0      	bne.n	800f672 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f003 0308 	and.w	r3, r3, #8
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d036      	beq.n	800f70a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	695b      	ldr	r3, [r3, #20]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d019      	beq.n	800f6d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f6a4:	4b2b      	ldr	r3, [pc, #172]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f6a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6a8:	4a2a      	ldr	r2, [pc, #168]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f6aa:	f043 0301 	orr.w	r3, r3, #1
 800f6ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f6b0:	f7f7 fa5e 	bl	8006b70 <HAL_GetTick>
 800f6b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f6b6:	e008      	b.n	800f6ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f6b8:	f7f7 fa5a 	bl	8006b70 <HAL_GetTick>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c0:	1ad3      	subs	r3, r2, r3
 800f6c2:	2b02      	cmp	r3, #2
 800f6c4:	d901      	bls.n	800f6ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800f6c6:	2303      	movs	r3, #3
 800f6c8:	e21a      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f6ca:	4b22      	ldr	r3, [pc, #136]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f6cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6ce:	f003 0302 	and.w	r3, r3, #2
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d0f0      	beq.n	800f6b8 <HAL_RCC_OscConfig+0x45c>
 800f6d6:	e018      	b.n	800f70a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f6d8:	4b1e      	ldr	r3, [pc, #120]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f6da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6dc:	4a1d      	ldr	r2, [pc, #116]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f6de:	f023 0301 	bic.w	r3, r3, #1
 800f6e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f6e4:	f7f7 fa44 	bl	8006b70 <HAL_GetTick>
 800f6e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f6ea:	e008      	b.n	800f6fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f6ec:	f7f7 fa40 	bl	8006b70 <HAL_GetTick>
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f4:	1ad3      	subs	r3, r2, r3
 800f6f6:	2b02      	cmp	r3, #2
 800f6f8:	d901      	bls.n	800f6fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800f6fa:	2303      	movs	r3, #3
 800f6fc:	e200      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f6fe:	4b15      	ldr	r3, [pc, #84]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f702:	f003 0302 	and.w	r3, r3, #2
 800f706:	2b00      	cmp	r3, #0
 800f708:	d1f0      	bne.n	800f6ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f003 0320 	and.w	r3, r3, #32
 800f712:	2b00      	cmp	r3, #0
 800f714:	d039      	beq.n	800f78a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	699b      	ldr	r3, [r3, #24]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d01c      	beq.n	800f758 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f71e:	4b0d      	ldr	r3, [pc, #52]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4a0c      	ldr	r2, [pc, #48]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f724:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f728:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f72a:	f7f7 fa21 	bl	8006b70 <HAL_GetTick>
 800f72e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f730:	e008      	b.n	800f744 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f732:	f7f7 fa1d 	bl	8006b70 <HAL_GetTick>
 800f736:	4602      	mov	r2, r0
 800f738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73a:	1ad3      	subs	r3, r2, r3
 800f73c:	2b02      	cmp	r3, #2
 800f73e:	d901      	bls.n	800f744 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800f740:	2303      	movs	r3, #3
 800f742:	e1dd      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f744:	4b03      	ldr	r3, [pc, #12]	; (800f754 <HAL_RCC_OscConfig+0x4f8>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d0f0      	beq.n	800f732 <HAL_RCC_OscConfig+0x4d6>
 800f750:	e01b      	b.n	800f78a <HAL_RCC_OscConfig+0x52e>
 800f752:	bf00      	nop
 800f754:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f758:	4b9b      	ldr	r3, [pc, #620]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	4a9a      	ldr	r2, [pc, #616]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f75e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f762:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f764:	f7f7 fa04 	bl	8006b70 <HAL_GetTick>
 800f768:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f76a:	e008      	b.n	800f77e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f76c:	f7f7 fa00 	bl	8006b70 <HAL_GetTick>
 800f770:	4602      	mov	r2, r0
 800f772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f774:	1ad3      	subs	r3, r2, r3
 800f776:	2b02      	cmp	r3, #2
 800f778:	d901      	bls.n	800f77e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800f77a:	2303      	movs	r3, #3
 800f77c:	e1c0      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f77e:	4b92      	ldr	r3, [pc, #584]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f786:	2b00      	cmp	r3, #0
 800f788:	d1f0      	bne.n	800f76c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	f003 0304 	and.w	r3, r3, #4
 800f792:	2b00      	cmp	r3, #0
 800f794:	f000 8081 	beq.w	800f89a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f798:	4b8c      	ldr	r3, [pc, #560]	; (800f9cc <HAL_RCC_OscConfig+0x770>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	4a8b      	ldr	r2, [pc, #556]	; (800f9cc <HAL_RCC_OscConfig+0x770>)
 800f79e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f7a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f7a4:	f7f7 f9e4 	bl	8006b70 <HAL_GetTick>
 800f7a8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f7aa:	e008      	b.n	800f7be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f7ac:	f7f7 f9e0 	bl	8006b70 <HAL_GetTick>
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b4:	1ad3      	subs	r3, r2, r3
 800f7b6:	2b64      	cmp	r3, #100	; 0x64
 800f7b8:	d901      	bls.n	800f7be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800f7ba:	2303      	movs	r3, #3
 800f7bc:	e1a0      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f7be:	4b83      	ldr	r3, [pc, #524]	; (800f9cc <HAL_RCC_OscConfig+0x770>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d0f0      	beq.n	800f7ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	689b      	ldr	r3, [r3, #8]
 800f7ce:	2b01      	cmp	r3, #1
 800f7d0:	d106      	bne.n	800f7e0 <HAL_RCC_OscConfig+0x584>
 800f7d2:	4b7d      	ldr	r3, [pc, #500]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f7d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7d6:	4a7c      	ldr	r2, [pc, #496]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f7d8:	f043 0301 	orr.w	r3, r3, #1
 800f7dc:	6713      	str	r3, [r2, #112]	; 0x70
 800f7de:	e02d      	b.n	800f83c <HAL_RCC_OscConfig+0x5e0>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	689b      	ldr	r3, [r3, #8]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d10c      	bne.n	800f802 <HAL_RCC_OscConfig+0x5a6>
 800f7e8:	4b77      	ldr	r3, [pc, #476]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f7ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7ec:	4a76      	ldr	r2, [pc, #472]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f7ee:	f023 0301 	bic.w	r3, r3, #1
 800f7f2:	6713      	str	r3, [r2, #112]	; 0x70
 800f7f4:	4b74      	ldr	r3, [pc, #464]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f7f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7f8:	4a73      	ldr	r2, [pc, #460]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f7fa:	f023 0304 	bic.w	r3, r3, #4
 800f7fe:	6713      	str	r3, [r2, #112]	; 0x70
 800f800:	e01c      	b.n	800f83c <HAL_RCC_OscConfig+0x5e0>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	689b      	ldr	r3, [r3, #8]
 800f806:	2b05      	cmp	r3, #5
 800f808:	d10c      	bne.n	800f824 <HAL_RCC_OscConfig+0x5c8>
 800f80a:	4b6f      	ldr	r3, [pc, #444]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f80c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f80e:	4a6e      	ldr	r2, [pc, #440]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f810:	f043 0304 	orr.w	r3, r3, #4
 800f814:	6713      	str	r3, [r2, #112]	; 0x70
 800f816:	4b6c      	ldr	r3, [pc, #432]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f81a:	4a6b      	ldr	r2, [pc, #428]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f81c:	f043 0301 	orr.w	r3, r3, #1
 800f820:	6713      	str	r3, [r2, #112]	; 0x70
 800f822:	e00b      	b.n	800f83c <HAL_RCC_OscConfig+0x5e0>
 800f824:	4b68      	ldr	r3, [pc, #416]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f828:	4a67      	ldr	r2, [pc, #412]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f82a:	f023 0301 	bic.w	r3, r3, #1
 800f82e:	6713      	str	r3, [r2, #112]	; 0x70
 800f830:	4b65      	ldr	r3, [pc, #404]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f834:	4a64      	ldr	r2, [pc, #400]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f836:	f023 0304 	bic.w	r3, r3, #4
 800f83a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	689b      	ldr	r3, [r3, #8]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d015      	beq.n	800f870 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f844:	f7f7 f994 	bl	8006b70 <HAL_GetTick>
 800f848:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f84a:	e00a      	b.n	800f862 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f84c:	f7f7 f990 	bl	8006b70 <HAL_GetTick>
 800f850:	4602      	mov	r2, r0
 800f852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f854:	1ad3      	subs	r3, r2, r3
 800f856:	f241 3288 	movw	r2, #5000	; 0x1388
 800f85a:	4293      	cmp	r3, r2
 800f85c:	d901      	bls.n	800f862 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800f85e:	2303      	movs	r3, #3
 800f860:	e14e      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f862:	4b59      	ldr	r3, [pc, #356]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f866:	f003 0302 	and.w	r3, r3, #2
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d0ee      	beq.n	800f84c <HAL_RCC_OscConfig+0x5f0>
 800f86e:	e014      	b.n	800f89a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f870:	f7f7 f97e 	bl	8006b70 <HAL_GetTick>
 800f874:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f876:	e00a      	b.n	800f88e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f878:	f7f7 f97a 	bl	8006b70 <HAL_GetTick>
 800f87c:	4602      	mov	r2, r0
 800f87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f880:	1ad3      	subs	r3, r2, r3
 800f882:	f241 3288 	movw	r2, #5000	; 0x1388
 800f886:	4293      	cmp	r3, r2
 800f888:	d901      	bls.n	800f88e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800f88a:	2303      	movs	r3, #3
 800f88c:	e138      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f88e:	4b4e      	ldr	r3, [pc, #312]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f892:	f003 0302 	and.w	r3, r3, #2
 800f896:	2b00      	cmp	r3, #0
 800f898:	d1ee      	bne.n	800f878 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	f000 812d 	beq.w	800fafe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800f8a4:	4b48      	ldr	r3, [pc, #288]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f8a6:	691b      	ldr	r3, [r3, #16]
 800f8a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f8ac:	2b18      	cmp	r3, #24
 800f8ae:	f000 80bd 	beq.w	800fa2c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8b6:	2b02      	cmp	r3, #2
 800f8b8:	f040 809e 	bne.w	800f9f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f8bc:	4b42      	ldr	r3, [pc, #264]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4a41      	ldr	r2, [pc, #260]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f8c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f8c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f8c8:	f7f7 f952 	bl	8006b70 <HAL_GetTick>
 800f8cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f8ce:	e008      	b.n	800f8e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f8d0:	f7f7 f94e 	bl	8006b70 <HAL_GetTick>
 800f8d4:	4602      	mov	r2, r0
 800f8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d8:	1ad3      	subs	r3, r2, r3
 800f8da:	2b02      	cmp	r3, #2
 800f8dc:	d901      	bls.n	800f8e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800f8de:	2303      	movs	r3, #3
 800f8e0:	e10e      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f8e2:	4b39      	ldr	r3, [pc, #228]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d1f0      	bne.n	800f8d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f8ee:	4b36      	ldr	r3, [pc, #216]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f8f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f8f2:	4b37      	ldr	r3, [pc, #220]	; (800f9d0 <HAL_RCC_OscConfig+0x774>)
 800f8f4:	4013      	ands	r3, r2
 800f8f6:	687a      	ldr	r2, [r7, #4]
 800f8f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800f8fa:	687a      	ldr	r2, [r7, #4]
 800f8fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f8fe:	0112      	lsls	r2, r2, #4
 800f900:	430a      	orrs	r2, r1
 800f902:	4931      	ldr	r1, [pc, #196]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f904:	4313      	orrs	r3, r2
 800f906:	628b      	str	r3, [r1, #40]	; 0x28
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f90c:	3b01      	subs	r3, #1
 800f90e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f916:	3b01      	subs	r3, #1
 800f918:	025b      	lsls	r3, r3, #9
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	431a      	orrs	r2, r3
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f922:	3b01      	subs	r3, #1
 800f924:	041b      	lsls	r3, r3, #16
 800f926:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f92a:	431a      	orrs	r2, r3
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f930:	3b01      	subs	r3, #1
 800f932:	061b      	lsls	r3, r3, #24
 800f934:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f938:	4923      	ldr	r1, [pc, #140]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f93a:	4313      	orrs	r3, r2
 800f93c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800f93e:	4b22      	ldr	r3, [pc, #136]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f942:	4a21      	ldr	r2, [pc, #132]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f944:	f023 0301 	bic.w	r3, r3, #1
 800f948:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f94a:	4b1f      	ldr	r3, [pc, #124]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f94c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f94e:	4b21      	ldr	r3, [pc, #132]	; (800f9d4 <HAL_RCC_OscConfig+0x778>)
 800f950:	4013      	ands	r3, r2
 800f952:	687a      	ldr	r2, [r7, #4]
 800f954:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f956:	00d2      	lsls	r2, r2, #3
 800f958:	491b      	ldr	r1, [pc, #108]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f95a:	4313      	orrs	r3, r2
 800f95c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800f95e:	4b1a      	ldr	r3, [pc, #104]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f962:	f023 020c 	bic.w	r2, r3, #12
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f96a:	4917      	ldr	r1, [pc, #92]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f96c:	4313      	orrs	r3, r2
 800f96e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800f970:	4b15      	ldr	r3, [pc, #84]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f974:	f023 0202 	bic.w	r2, r3, #2
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f97c:	4912      	ldr	r1, [pc, #72]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f97e:	4313      	orrs	r3, r2
 800f980:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800f982:	4b11      	ldr	r3, [pc, #68]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f986:	4a10      	ldr	r2, [pc, #64]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f98c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f98e:	4b0e      	ldr	r3, [pc, #56]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f992:	4a0d      	ldr	r2, [pc, #52]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f998:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800f99a:	4b0b      	ldr	r3, [pc, #44]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f99e:	4a0a      	ldr	r2, [pc, #40]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f9a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f9a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800f9a6:	4b08      	ldr	r3, [pc, #32]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9aa:	4a07      	ldr	r2, [pc, #28]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f9ac:	f043 0301 	orr.w	r3, r3, #1
 800f9b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f9b2:	4b05      	ldr	r3, [pc, #20]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	4a04      	ldr	r2, [pc, #16]	; (800f9c8 <HAL_RCC_OscConfig+0x76c>)
 800f9b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f9bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f9be:	f7f7 f8d7 	bl	8006b70 <HAL_GetTick>
 800f9c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f9c4:	e011      	b.n	800f9ea <HAL_RCC_OscConfig+0x78e>
 800f9c6:	bf00      	nop
 800f9c8:	58024400 	.word	0x58024400
 800f9cc:	58024800 	.word	0x58024800
 800f9d0:	fffffc0c 	.word	0xfffffc0c
 800f9d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f9d8:	f7f7 f8ca 	bl	8006b70 <HAL_GetTick>
 800f9dc:	4602      	mov	r2, r0
 800f9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e0:	1ad3      	subs	r3, r2, r3
 800f9e2:	2b02      	cmp	r3, #2
 800f9e4:	d901      	bls.n	800f9ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800f9e6:	2303      	movs	r3, #3
 800f9e8:	e08a      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f9ea:	4b47      	ldr	r3, [pc, #284]	; (800fb08 <HAL_RCC_OscConfig+0x8ac>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d0f0      	beq.n	800f9d8 <HAL_RCC_OscConfig+0x77c>
 800f9f6:	e082      	b.n	800fafe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f9f8:	4b43      	ldr	r3, [pc, #268]	; (800fb08 <HAL_RCC_OscConfig+0x8ac>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	4a42      	ldr	r2, [pc, #264]	; (800fb08 <HAL_RCC_OscConfig+0x8ac>)
 800f9fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fa02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fa04:	f7f7 f8b4 	bl	8006b70 <HAL_GetTick>
 800fa08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fa0a:	e008      	b.n	800fa1e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fa0c:	f7f7 f8b0 	bl	8006b70 <HAL_GetTick>
 800fa10:	4602      	mov	r2, r0
 800fa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa14:	1ad3      	subs	r3, r2, r3
 800fa16:	2b02      	cmp	r3, #2
 800fa18:	d901      	bls.n	800fa1e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800fa1a:	2303      	movs	r3, #3
 800fa1c:	e070      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fa1e:	4b3a      	ldr	r3, [pc, #232]	; (800fb08 <HAL_RCC_OscConfig+0x8ac>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d1f0      	bne.n	800fa0c <HAL_RCC_OscConfig+0x7b0>
 800fa2a:	e068      	b.n	800fafe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800fa2c:	4b36      	ldr	r3, [pc, #216]	; (800fb08 <HAL_RCC_OscConfig+0x8ac>)
 800fa2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800fa32:	4b35      	ldr	r3, [pc, #212]	; (800fb08 <HAL_RCC_OscConfig+0x8ac>)
 800fa34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa36:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3c:	2b01      	cmp	r3, #1
 800fa3e:	d031      	beq.n	800faa4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	f003 0203 	and.w	r2, r3, #3
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fa4a:	429a      	cmp	r2, r3
 800fa4c:	d12a      	bne.n	800faa4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	091b      	lsrs	r3, r3, #4
 800fa52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d122      	bne.n	800faa4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa68:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	d11a      	bne.n	800faa4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	0a5b      	lsrs	r3, r3, #9
 800fa72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa7a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d111      	bne.n	800faa4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	0c1b      	lsrs	r3, r3, #16
 800fa84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d108      	bne.n	800faa4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	0e1b      	lsrs	r3, r3, #24
 800fa96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d001      	beq.n	800faa8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800faa4:	2301      	movs	r3, #1
 800faa6:	e02b      	b.n	800fb00 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800faa8:	4b17      	ldr	r3, [pc, #92]	; (800fb08 <HAL_RCC_OscConfig+0x8ac>)
 800faaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faac:	08db      	lsrs	r3, r3, #3
 800faae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fab2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fab8:	693a      	ldr	r2, [r7, #16]
 800faba:	429a      	cmp	r2, r3
 800fabc:	d01f      	beq.n	800fafe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800fabe:	4b12      	ldr	r3, [pc, #72]	; (800fb08 <HAL_RCC_OscConfig+0x8ac>)
 800fac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fac2:	4a11      	ldr	r2, [pc, #68]	; (800fb08 <HAL_RCC_OscConfig+0x8ac>)
 800fac4:	f023 0301 	bic.w	r3, r3, #1
 800fac8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800faca:	f7f7 f851 	bl	8006b70 <HAL_GetTick>
 800face:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800fad0:	bf00      	nop
 800fad2:	f7f7 f84d 	bl	8006b70 <HAL_GetTick>
 800fad6:	4602      	mov	r2, r0
 800fad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fada:	4293      	cmp	r3, r2
 800fadc:	d0f9      	beq.n	800fad2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800fade:	4b0a      	ldr	r3, [pc, #40]	; (800fb08 <HAL_RCC_OscConfig+0x8ac>)
 800fae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fae2:	4b0a      	ldr	r3, [pc, #40]	; (800fb0c <HAL_RCC_OscConfig+0x8b0>)
 800fae4:	4013      	ands	r3, r2
 800fae6:	687a      	ldr	r2, [r7, #4]
 800fae8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800faea:	00d2      	lsls	r2, r2, #3
 800faec:	4906      	ldr	r1, [pc, #24]	; (800fb08 <HAL_RCC_OscConfig+0x8ac>)
 800faee:	4313      	orrs	r3, r2
 800faf0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800faf2:	4b05      	ldr	r3, [pc, #20]	; (800fb08 <HAL_RCC_OscConfig+0x8ac>)
 800faf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faf6:	4a04      	ldr	r2, [pc, #16]	; (800fb08 <HAL_RCC_OscConfig+0x8ac>)
 800faf8:	f043 0301 	orr.w	r3, r3, #1
 800fafc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800fafe:	2300      	movs	r3, #0
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3730      	adds	r7, #48	; 0x30
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	58024400 	.word	0x58024400
 800fb0c:	ffff0007 	.word	0xffff0007

0800fb10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b086      	sub	sp, #24
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d101      	bne.n	800fb24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fb20:	2301      	movs	r3, #1
 800fb22:	e19c      	b.n	800fe5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800fb24:	4b8a      	ldr	r3, [pc, #552]	; (800fd50 <HAL_RCC_ClockConfig+0x240>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	f003 030f 	and.w	r3, r3, #15
 800fb2c:	683a      	ldr	r2, [r7, #0]
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d910      	bls.n	800fb54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fb32:	4b87      	ldr	r3, [pc, #540]	; (800fd50 <HAL_RCC_ClockConfig+0x240>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	f023 020f 	bic.w	r2, r3, #15
 800fb3a:	4985      	ldr	r1, [pc, #532]	; (800fd50 <HAL_RCC_ClockConfig+0x240>)
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	4313      	orrs	r3, r2
 800fb40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fb42:	4b83      	ldr	r3, [pc, #524]	; (800fd50 <HAL_RCC_ClockConfig+0x240>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f003 030f 	and.w	r3, r3, #15
 800fb4a:	683a      	ldr	r2, [r7, #0]
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	d001      	beq.n	800fb54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800fb50:	2301      	movs	r3, #1
 800fb52:	e184      	b.n	800fe5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	f003 0304 	and.w	r3, r3, #4
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d010      	beq.n	800fb82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	691a      	ldr	r2, [r3, #16]
 800fb64:	4b7b      	ldr	r3, [pc, #492]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fb66:	699b      	ldr	r3, [r3, #24]
 800fb68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d908      	bls.n	800fb82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800fb70:	4b78      	ldr	r3, [pc, #480]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fb72:	699b      	ldr	r3, [r3, #24]
 800fb74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	691b      	ldr	r3, [r3, #16]
 800fb7c:	4975      	ldr	r1, [pc, #468]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fb7e:	4313      	orrs	r3, r2
 800fb80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	f003 0308 	and.w	r3, r3, #8
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d010      	beq.n	800fbb0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	695a      	ldr	r2, [r3, #20]
 800fb92:	4b70      	ldr	r3, [pc, #448]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fb94:	69db      	ldr	r3, [r3, #28]
 800fb96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d908      	bls.n	800fbb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800fb9e:	4b6d      	ldr	r3, [pc, #436]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fba0:	69db      	ldr	r3, [r3, #28]
 800fba2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	695b      	ldr	r3, [r3, #20]
 800fbaa:	496a      	ldr	r1, [pc, #424]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fbac:	4313      	orrs	r3, r2
 800fbae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	f003 0310 	and.w	r3, r3, #16
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d010      	beq.n	800fbde <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	699a      	ldr	r2, [r3, #24]
 800fbc0:	4b64      	ldr	r3, [pc, #400]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fbc2:	69db      	ldr	r3, [r3, #28]
 800fbc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d908      	bls.n	800fbde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800fbcc:	4b61      	ldr	r3, [pc, #388]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fbce:	69db      	ldr	r3, [r3, #28]
 800fbd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	699b      	ldr	r3, [r3, #24]
 800fbd8:	495e      	ldr	r1, [pc, #376]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fbda:	4313      	orrs	r3, r2
 800fbdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	f003 0320 	and.w	r3, r3, #32
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d010      	beq.n	800fc0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	69da      	ldr	r2, [r3, #28]
 800fbee:	4b59      	ldr	r3, [pc, #356]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fbf0:	6a1b      	ldr	r3, [r3, #32]
 800fbf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d908      	bls.n	800fc0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800fbfa:	4b56      	ldr	r3, [pc, #344]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fbfc:	6a1b      	ldr	r3, [r3, #32]
 800fbfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	69db      	ldr	r3, [r3, #28]
 800fc06:	4953      	ldr	r1, [pc, #332]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fc08:	4313      	orrs	r3, r2
 800fc0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	f003 0302 	and.w	r3, r3, #2
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d010      	beq.n	800fc3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	68da      	ldr	r2, [r3, #12]
 800fc1c:	4b4d      	ldr	r3, [pc, #308]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fc1e:	699b      	ldr	r3, [r3, #24]
 800fc20:	f003 030f 	and.w	r3, r3, #15
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d908      	bls.n	800fc3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fc28:	4b4a      	ldr	r3, [pc, #296]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fc2a:	699b      	ldr	r3, [r3, #24]
 800fc2c:	f023 020f 	bic.w	r2, r3, #15
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	68db      	ldr	r3, [r3, #12]
 800fc34:	4947      	ldr	r1, [pc, #284]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fc36:	4313      	orrs	r3, r2
 800fc38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	f003 0301 	and.w	r3, r3, #1
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d055      	beq.n	800fcf2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800fc46:	4b43      	ldr	r3, [pc, #268]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fc48:	699b      	ldr	r3, [r3, #24]
 800fc4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	689b      	ldr	r3, [r3, #8]
 800fc52:	4940      	ldr	r1, [pc, #256]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fc54:	4313      	orrs	r3, r2
 800fc56:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	685b      	ldr	r3, [r3, #4]
 800fc5c:	2b02      	cmp	r3, #2
 800fc5e:	d107      	bne.n	800fc70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fc60:	4b3c      	ldr	r3, [pc, #240]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d121      	bne.n	800fcb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	e0f6      	b.n	800fe5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	685b      	ldr	r3, [r3, #4]
 800fc74:	2b03      	cmp	r3, #3
 800fc76:	d107      	bne.n	800fc88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fc78:	4b36      	ldr	r3, [pc, #216]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d115      	bne.n	800fcb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fc84:	2301      	movs	r3, #1
 800fc86:	e0ea      	b.n	800fe5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	2b01      	cmp	r3, #1
 800fc8e:	d107      	bne.n	800fca0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800fc90:	4b30      	ldr	r3, [pc, #192]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d109      	bne.n	800fcb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	e0de      	b.n	800fe5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fca0:	4b2c      	ldr	r3, [pc, #176]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f003 0304 	and.w	r3, r3, #4
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d101      	bne.n	800fcb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fcac:	2301      	movs	r3, #1
 800fcae:	e0d6      	b.n	800fe5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800fcb0:	4b28      	ldr	r3, [pc, #160]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fcb2:	691b      	ldr	r3, [r3, #16]
 800fcb4:	f023 0207 	bic.w	r2, r3, #7
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	4925      	ldr	r1, [pc, #148]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fcbe:	4313      	orrs	r3, r2
 800fcc0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fcc2:	f7f6 ff55 	bl	8006b70 <HAL_GetTick>
 800fcc6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fcc8:	e00a      	b.n	800fce0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fcca:	f7f6 ff51 	bl	8006b70 <HAL_GetTick>
 800fcce:	4602      	mov	r2, r0
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	1ad3      	subs	r3, r2, r3
 800fcd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d901      	bls.n	800fce0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800fcdc:	2303      	movs	r3, #3
 800fcde:	e0be      	b.n	800fe5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fce0:	4b1c      	ldr	r3, [pc, #112]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fce2:	691b      	ldr	r3, [r3, #16]
 800fce4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	685b      	ldr	r3, [r3, #4]
 800fcec:	00db      	lsls	r3, r3, #3
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d1eb      	bne.n	800fcca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f003 0302 	and.w	r3, r3, #2
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d010      	beq.n	800fd20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	68da      	ldr	r2, [r3, #12]
 800fd02:	4b14      	ldr	r3, [pc, #80]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fd04:	699b      	ldr	r3, [r3, #24]
 800fd06:	f003 030f 	and.w	r3, r3, #15
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d208      	bcs.n	800fd20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fd0e:	4b11      	ldr	r3, [pc, #68]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fd10:	699b      	ldr	r3, [r3, #24]
 800fd12:	f023 020f 	bic.w	r2, r3, #15
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	68db      	ldr	r3, [r3, #12]
 800fd1a:	490e      	ldr	r1, [pc, #56]	; (800fd54 <HAL_RCC_ClockConfig+0x244>)
 800fd1c:	4313      	orrs	r3, r2
 800fd1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800fd20:	4b0b      	ldr	r3, [pc, #44]	; (800fd50 <HAL_RCC_ClockConfig+0x240>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	f003 030f 	and.w	r3, r3, #15
 800fd28:	683a      	ldr	r2, [r7, #0]
 800fd2a:	429a      	cmp	r2, r3
 800fd2c:	d214      	bcs.n	800fd58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fd2e:	4b08      	ldr	r3, [pc, #32]	; (800fd50 <HAL_RCC_ClockConfig+0x240>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	f023 020f 	bic.w	r2, r3, #15
 800fd36:	4906      	ldr	r1, [pc, #24]	; (800fd50 <HAL_RCC_ClockConfig+0x240>)
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fd3e:	4b04      	ldr	r3, [pc, #16]	; (800fd50 <HAL_RCC_ClockConfig+0x240>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f003 030f 	and.w	r3, r3, #15
 800fd46:	683a      	ldr	r2, [r7, #0]
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d005      	beq.n	800fd58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	e086      	b.n	800fe5e <HAL_RCC_ClockConfig+0x34e>
 800fd50:	52002000 	.word	0x52002000
 800fd54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	f003 0304 	and.w	r3, r3, #4
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d010      	beq.n	800fd86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	691a      	ldr	r2, [r3, #16]
 800fd68:	4b3f      	ldr	r3, [pc, #252]	; (800fe68 <HAL_RCC_ClockConfig+0x358>)
 800fd6a:	699b      	ldr	r3, [r3, #24]
 800fd6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d208      	bcs.n	800fd86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800fd74:	4b3c      	ldr	r3, [pc, #240]	; (800fe68 <HAL_RCC_ClockConfig+0x358>)
 800fd76:	699b      	ldr	r3, [r3, #24]
 800fd78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	691b      	ldr	r3, [r3, #16]
 800fd80:	4939      	ldr	r1, [pc, #228]	; (800fe68 <HAL_RCC_ClockConfig+0x358>)
 800fd82:	4313      	orrs	r3, r2
 800fd84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	f003 0308 	and.w	r3, r3, #8
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d010      	beq.n	800fdb4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	695a      	ldr	r2, [r3, #20]
 800fd96:	4b34      	ldr	r3, [pc, #208]	; (800fe68 <HAL_RCC_ClockConfig+0x358>)
 800fd98:	69db      	ldr	r3, [r3, #28]
 800fd9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	d208      	bcs.n	800fdb4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800fda2:	4b31      	ldr	r3, [pc, #196]	; (800fe68 <HAL_RCC_ClockConfig+0x358>)
 800fda4:	69db      	ldr	r3, [r3, #28]
 800fda6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	695b      	ldr	r3, [r3, #20]
 800fdae:	492e      	ldr	r1, [pc, #184]	; (800fe68 <HAL_RCC_ClockConfig+0x358>)
 800fdb0:	4313      	orrs	r3, r2
 800fdb2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	f003 0310 	and.w	r3, r3, #16
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d010      	beq.n	800fde2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	699a      	ldr	r2, [r3, #24]
 800fdc4:	4b28      	ldr	r3, [pc, #160]	; (800fe68 <HAL_RCC_ClockConfig+0x358>)
 800fdc6:	69db      	ldr	r3, [r3, #28]
 800fdc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	d208      	bcs.n	800fde2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800fdd0:	4b25      	ldr	r3, [pc, #148]	; (800fe68 <HAL_RCC_ClockConfig+0x358>)
 800fdd2:	69db      	ldr	r3, [r3, #28]
 800fdd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	699b      	ldr	r3, [r3, #24]
 800fddc:	4922      	ldr	r1, [pc, #136]	; (800fe68 <HAL_RCC_ClockConfig+0x358>)
 800fdde:	4313      	orrs	r3, r2
 800fde0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	f003 0320 	and.w	r3, r3, #32
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d010      	beq.n	800fe10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	69da      	ldr	r2, [r3, #28]
 800fdf2:	4b1d      	ldr	r3, [pc, #116]	; (800fe68 <HAL_RCC_ClockConfig+0x358>)
 800fdf4:	6a1b      	ldr	r3, [r3, #32]
 800fdf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fdfa:	429a      	cmp	r2, r3
 800fdfc:	d208      	bcs.n	800fe10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800fdfe:	4b1a      	ldr	r3, [pc, #104]	; (800fe68 <HAL_RCC_ClockConfig+0x358>)
 800fe00:	6a1b      	ldr	r3, [r3, #32]
 800fe02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	69db      	ldr	r3, [r3, #28]
 800fe0a:	4917      	ldr	r1, [pc, #92]	; (800fe68 <HAL_RCC_ClockConfig+0x358>)
 800fe0c:	4313      	orrs	r3, r2
 800fe0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800fe10:	f000 f834 	bl	800fe7c <HAL_RCC_GetSysClockFreq>
 800fe14:	4602      	mov	r2, r0
 800fe16:	4b14      	ldr	r3, [pc, #80]	; (800fe68 <HAL_RCC_ClockConfig+0x358>)
 800fe18:	699b      	ldr	r3, [r3, #24]
 800fe1a:	0a1b      	lsrs	r3, r3, #8
 800fe1c:	f003 030f 	and.w	r3, r3, #15
 800fe20:	4912      	ldr	r1, [pc, #72]	; (800fe6c <HAL_RCC_ClockConfig+0x35c>)
 800fe22:	5ccb      	ldrb	r3, [r1, r3]
 800fe24:	f003 031f 	and.w	r3, r3, #31
 800fe28:	fa22 f303 	lsr.w	r3, r2, r3
 800fe2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fe2e:	4b0e      	ldr	r3, [pc, #56]	; (800fe68 <HAL_RCC_ClockConfig+0x358>)
 800fe30:	699b      	ldr	r3, [r3, #24]
 800fe32:	f003 030f 	and.w	r3, r3, #15
 800fe36:	4a0d      	ldr	r2, [pc, #52]	; (800fe6c <HAL_RCC_ClockConfig+0x35c>)
 800fe38:	5cd3      	ldrb	r3, [r2, r3]
 800fe3a:	f003 031f 	and.w	r3, r3, #31
 800fe3e:	693a      	ldr	r2, [r7, #16]
 800fe40:	fa22 f303 	lsr.w	r3, r2, r3
 800fe44:	4a0a      	ldr	r2, [pc, #40]	; (800fe70 <HAL_RCC_ClockConfig+0x360>)
 800fe46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800fe48:	4a0a      	ldr	r2, [pc, #40]	; (800fe74 <HAL_RCC_ClockConfig+0x364>)
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800fe4e:	4b0a      	ldr	r3, [pc, #40]	; (800fe78 <HAL_RCC_ClockConfig+0x368>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7f5 f87c 	bl	8004f50 <HAL_InitTick>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800fe5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3718      	adds	r7, #24
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
 800fe66:	bf00      	nop
 800fe68:	58024400 	.word	0x58024400
 800fe6c:	0801c4c4 	.word	0x0801c4c4
 800fe70:	240000e4 	.word	0x240000e4
 800fe74:	240000e0 	.word	0x240000e0
 800fe78:	240000e8 	.word	0x240000e8

0800fe7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b089      	sub	sp, #36	; 0x24
 800fe80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fe82:	4bb3      	ldr	r3, [pc, #716]	; (8010150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe84:	691b      	ldr	r3, [r3, #16]
 800fe86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fe8a:	2b18      	cmp	r3, #24
 800fe8c:	f200 8155 	bhi.w	801013a <HAL_RCC_GetSysClockFreq+0x2be>
 800fe90:	a201      	add	r2, pc, #4	; (adr r2, 800fe98 <HAL_RCC_GetSysClockFreq+0x1c>)
 800fe92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe96:	bf00      	nop
 800fe98:	0800fefd 	.word	0x0800fefd
 800fe9c:	0801013b 	.word	0x0801013b
 800fea0:	0801013b 	.word	0x0801013b
 800fea4:	0801013b 	.word	0x0801013b
 800fea8:	0801013b 	.word	0x0801013b
 800feac:	0801013b 	.word	0x0801013b
 800feb0:	0801013b 	.word	0x0801013b
 800feb4:	0801013b 	.word	0x0801013b
 800feb8:	0800ff23 	.word	0x0800ff23
 800febc:	0801013b 	.word	0x0801013b
 800fec0:	0801013b 	.word	0x0801013b
 800fec4:	0801013b 	.word	0x0801013b
 800fec8:	0801013b 	.word	0x0801013b
 800fecc:	0801013b 	.word	0x0801013b
 800fed0:	0801013b 	.word	0x0801013b
 800fed4:	0801013b 	.word	0x0801013b
 800fed8:	0800ff29 	.word	0x0800ff29
 800fedc:	0801013b 	.word	0x0801013b
 800fee0:	0801013b 	.word	0x0801013b
 800fee4:	0801013b 	.word	0x0801013b
 800fee8:	0801013b 	.word	0x0801013b
 800feec:	0801013b 	.word	0x0801013b
 800fef0:	0801013b 	.word	0x0801013b
 800fef4:	0801013b 	.word	0x0801013b
 800fef8:	0800ff2f 	.word	0x0800ff2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fefc:	4b94      	ldr	r3, [pc, #592]	; (8010150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	f003 0320 	and.w	r3, r3, #32
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d009      	beq.n	800ff1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ff08:	4b91      	ldr	r3, [pc, #580]	; (8010150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	08db      	lsrs	r3, r3, #3
 800ff0e:	f003 0303 	and.w	r3, r3, #3
 800ff12:	4a90      	ldr	r2, [pc, #576]	; (8010154 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ff14:	fa22 f303 	lsr.w	r3, r2, r3
 800ff18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ff1a:	e111      	b.n	8010140 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ff1c:	4b8d      	ldr	r3, [pc, #564]	; (8010154 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ff1e:	61bb      	str	r3, [r7, #24]
      break;
 800ff20:	e10e      	b.n	8010140 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ff22:	4b8d      	ldr	r3, [pc, #564]	; (8010158 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ff24:	61bb      	str	r3, [r7, #24]
      break;
 800ff26:	e10b      	b.n	8010140 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ff28:	4b8c      	ldr	r3, [pc, #560]	; (801015c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ff2a:	61bb      	str	r3, [r7, #24]
      break;
 800ff2c:	e108      	b.n	8010140 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ff2e:	4b88      	ldr	r3, [pc, #544]	; (8010150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff32:	f003 0303 	and.w	r3, r3, #3
 800ff36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ff38:	4b85      	ldr	r3, [pc, #532]	; (8010150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff3c:	091b      	lsrs	r3, r3, #4
 800ff3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ff44:	4b82      	ldr	r3, [pc, #520]	; (8010150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff48:	f003 0301 	and.w	r3, r3, #1
 800ff4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ff4e:	4b80      	ldr	r3, [pc, #512]	; (8010150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff52:	08db      	lsrs	r3, r3, #3
 800ff54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ff58:	68fa      	ldr	r2, [r7, #12]
 800ff5a:	fb02 f303 	mul.w	r3, r2, r3
 800ff5e:	ee07 3a90 	vmov	s15, r3
 800ff62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	f000 80e1 	beq.w	8010134 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	2b02      	cmp	r3, #2
 800ff76:	f000 8083 	beq.w	8010080 <HAL_RCC_GetSysClockFreq+0x204>
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	2b02      	cmp	r3, #2
 800ff7e:	f200 80a1 	bhi.w	80100c4 <HAL_RCC_GetSysClockFreq+0x248>
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d003      	beq.n	800ff90 <HAL_RCC_GetSysClockFreq+0x114>
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	2b01      	cmp	r3, #1
 800ff8c:	d056      	beq.n	801003c <HAL_RCC_GetSysClockFreq+0x1c0>
 800ff8e:	e099      	b.n	80100c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff90:	4b6f      	ldr	r3, [pc, #444]	; (8010150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f003 0320 	and.w	r3, r3, #32
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d02d      	beq.n	800fff8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ff9c:	4b6c      	ldr	r3, [pc, #432]	; (8010150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	08db      	lsrs	r3, r3, #3
 800ffa2:	f003 0303 	and.w	r3, r3, #3
 800ffa6:	4a6b      	ldr	r2, [pc, #428]	; (8010154 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ffa8:	fa22 f303 	lsr.w	r3, r2, r3
 800ffac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	ee07 3a90 	vmov	s15, r3
 800ffb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	ee07 3a90 	vmov	s15, r3
 800ffbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ffc6:	4b62      	ldr	r3, [pc, #392]	; (8010150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ffc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffce:	ee07 3a90 	vmov	s15, r3
 800ffd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ffd6:	ed97 6a02 	vldr	s12, [r7, #8]
 800ffda:	eddf 5a61 	vldr	s11, [pc, #388]	; 8010160 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ffde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ffe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ffe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ffea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fff2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800fff6:	e087      	b.n	8010108 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	ee07 3a90 	vmov	s15, r3
 800fffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010002:	eddf 6a58 	vldr	s13, [pc, #352]	; 8010164 <HAL_RCC_GetSysClockFreq+0x2e8>
 8010006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801000a:	4b51      	ldr	r3, [pc, #324]	; (8010150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801000c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801000e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010012:	ee07 3a90 	vmov	s15, r3
 8010016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801001a:	ed97 6a02 	vldr	s12, [r7, #8]
 801001e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8010160 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801002a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801002e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010036:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801003a:	e065      	b.n	8010108 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	ee07 3a90 	vmov	s15, r3
 8010042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010046:	eddf 6a48 	vldr	s13, [pc, #288]	; 8010168 <HAL_RCC_GetSysClockFreq+0x2ec>
 801004a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801004e:	4b40      	ldr	r3, [pc, #256]	; (8010150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010056:	ee07 3a90 	vmov	s15, r3
 801005a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801005e:	ed97 6a02 	vldr	s12, [r7, #8]
 8010062:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8010160 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801006a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801006e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010076:	ee67 7a27 	vmul.f32	s15, s14, s15
 801007a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801007e:	e043      	b.n	8010108 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	ee07 3a90 	vmov	s15, r3
 8010086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801008a:	eddf 6a38 	vldr	s13, [pc, #224]	; 801016c <HAL_RCC_GetSysClockFreq+0x2f0>
 801008e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010092:	4b2f      	ldr	r3, [pc, #188]	; (8010150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801009a:	ee07 3a90 	vmov	s15, r3
 801009e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80100a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8010160 <HAL_RCC_GetSysClockFreq+0x2e4>
 80100aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80100ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80100b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80100b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80100c2:	e021      	b.n	8010108 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	ee07 3a90 	vmov	s15, r3
 80100ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010168 <HAL_RCC_GetSysClockFreq+0x2ec>
 80100d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80100d6:	4b1e      	ldr	r3, [pc, #120]	; (8010150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80100d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100de:	ee07 3a90 	vmov	s15, r3
 80100e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80100ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8010160 <HAL_RCC_GetSysClockFreq+0x2e4>
 80100ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80100f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80100f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80100fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010102:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8010106:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8010108:	4b11      	ldr	r3, [pc, #68]	; (8010150 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801010a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801010c:	0a5b      	lsrs	r3, r3, #9
 801010e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010112:	3301      	adds	r3, #1
 8010114:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	ee07 3a90 	vmov	s15, r3
 801011c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010120:	edd7 6a07 	vldr	s13, [r7, #28]
 8010124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801012c:	ee17 3a90 	vmov	r3, s15
 8010130:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8010132:	e005      	b.n	8010140 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8010134:	2300      	movs	r3, #0
 8010136:	61bb      	str	r3, [r7, #24]
      break;
 8010138:	e002      	b.n	8010140 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801013a:	4b07      	ldr	r3, [pc, #28]	; (8010158 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801013c:	61bb      	str	r3, [r7, #24]
      break;
 801013e:	bf00      	nop
  }

  return sysclockfreq;
 8010140:	69bb      	ldr	r3, [r7, #24]
}
 8010142:	4618      	mov	r0, r3
 8010144:	3724      	adds	r7, #36	; 0x24
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop
 8010150:	58024400 	.word	0x58024400
 8010154:	03d09000 	.word	0x03d09000
 8010158:	003d0900 	.word	0x003d0900
 801015c:	017d7840 	.word	0x017d7840
 8010160:	46000000 	.word	0x46000000
 8010164:	4c742400 	.word	0x4c742400
 8010168:	4a742400 	.word	0x4a742400
 801016c:	4bbebc20 	.word	0x4bbebc20

08010170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b082      	sub	sp, #8
 8010174:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8010176:	f7ff fe81 	bl	800fe7c <HAL_RCC_GetSysClockFreq>
 801017a:	4602      	mov	r2, r0
 801017c:	4b10      	ldr	r3, [pc, #64]	; (80101c0 <HAL_RCC_GetHCLKFreq+0x50>)
 801017e:	699b      	ldr	r3, [r3, #24]
 8010180:	0a1b      	lsrs	r3, r3, #8
 8010182:	f003 030f 	and.w	r3, r3, #15
 8010186:	490f      	ldr	r1, [pc, #60]	; (80101c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8010188:	5ccb      	ldrb	r3, [r1, r3]
 801018a:	f003 031f 	and.w	r3, r3, #31
 801018e:	fa22 f303 	lsr.w	r3, r2, r3
 8010192:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010194:	4b0a      	ldr	r3, [pc, #40]	; (80101c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8010196:	699b      	ldr	r3, [r3, #24]
 8010198:	f003 030f 	and.w	r3, r3, #15
 801019c:	4a09      	ldr	r2, [pc, #36]	; (80101c4 <HAL_RCC_GetHCLKFreq+0x54>)
 801019e:	5cd3      	ldrb	r3, [r2, r3]
 80101a0:	f003 031f 	and.w	r3, r3, #31
 80101a4:	687a      	ldr	r2, [r7, #4]
 80101a6:	fa22 f303 	lsr.w	r3, r2, r3
 80101aa:	4a07      	ldr	r2, [pc, #28]	; (80101c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80101ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80101ae:	4a07      	ldr	r2, [pc, #28]	; (80101cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80101b4:	4b04      	ldr	r3, [pc, #16]	; (80101c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80101b6:	681b      	ldr	r3, [r3, #0]
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3708      	adds	r7, #8
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	58024400 	.word	0x58024400
 80101c4:	0801c4c4 	.word	0x0801c4c4
 80101c8:	240000e4 	.word	0x240000e4
 80101cc:	240000e0 	.word	0x240000e0

080101d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80101d4:	f7ff ffcc 	bl	8010170 <HAL_RCC_GetHCLKFreq>
 80101d8:	4602      	mov	r2, r0
 80101da:	4b06      	ldr	r3, [pc, #24]	; (80101f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80101dc:	69db      	ldr	r3, [r3, #28]
 80101de:	091b      	lsrs	r3, r3, #4
 80101e0:	f003 0307 	and.w	r3, r3, #7
 80101e4:	4904      	ldr	r1, [pc, #16]	; (80101f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80101e6:	5ccb      	ldrb	r3, [r1, r3]
 80101e8:	f003 031f 	and.w	r3, r3, #31
 80101ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	58024400 	.word	0x58024400
 80101f8:	0801c4c4 	.word	0x0801c4c4

080101fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8010200:	f7ff ffb6 	bl	8010170 <HAL_RCC_GetHCLKFreq>
 8010204:	4602      	mov	r2, r0
 8010206:	4b06      	ldr	r3, [pc, #24]	; (8010220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010208:	69db      	ldr	r3, [r3, #28]
 801020a:	0a1b      	lsrs	r3, r3, #8
 801020c:	f003 0307 	and.w	r3, r3, #7
 8010210:	4904      	ldr	r1, [pc, #16]	; (8010224 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010212:	5ccb      	ldrb	r3, [r1, r3]
 8010214:	f003 031f 	and.w	r3, r3, #31
 8010218:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801021c:	4618      	mov	r0, r3
 801021e:	bd80      	pop	{r7, pc}
 8010220:	58024400 	.word	0x58024400
 8010224:	0801c4c4 	.word	0x0801c4c4

08010228 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010228:	b480      	push	{r7}
 801022a:	b083      	sub	sp, #12
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	223f      	movs	r2, #63	; 0x3f
 8010236:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010238:	4b1a      	ldr	r3, [pc, #104]	; (80102a4 <HAL_RCC_GetClockConfig+0x7c>)
 801023a:	691b      	ldr	r3, [r3, #16]
 801023c:	f003 0207 	and.w	r2, r3, #7
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8010244:	4b17      	ldr	r3, [pc, #92]	; (80102a4 <HAL_RCC_GetClockConfig+0x7c>)
 8010246:	699b      	ldr	r3, [r3, #24]
 8010248:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8010250:	4b14      	ldr	r3, [pc, #80]	; (80102a4 <HAL_RCC_GetClockConfig+0x7c>)
 8010252:	699b      	ldr	r3, [r3, #24]
 8010254:	f003 020f 	and.w	r2, r3, #15
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 801025c:	4b11      	ldr	r3, [pc, #68]	; (80102a4 <HAL_RCC_GetClockConfig+0x7c>)
 801025e:	699b      	ldr	r3, [r3, #24]
 8010260:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8010268:	4b0e      	ldr	r3, [pc, #56]	; (80102a4 <HAL_RCC_GetClockConfig+0x7c>)
 801026a:	69db      	ldr	r3, [r3, #28]
 801026c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8010274:	4b0b      	ldr	r3, [pc, #44]	; (80102a4 <HAL_RCC_GetClockConfig+0x7c>)
 8010276:	69db      	ldr	r3, [r3, #28]
 8010278:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8010280:	4b08      	ldr	r3, [pc, #32]	; (80102a4 <HAL_RCC_GetClockConfig+0x7c>)
 8010282:	6a1b      	ldr	r3, [r3, #32]
 8010284:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801028c:	4b06      	ldr	r3, [pc, #24]	; (80102a8 <HAL_RCC_GetClockConfig+0x80>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	f003 020f 	and.w	r2, r3, #15
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	601a      	str	r2, [r3, #0]
}
 8010298:	bf00      	nop
 801029a:	370c      	adds	r7, #12
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr
 80102a4:	58024400 	.word	0x58024400
 80102a8:	52002000 	.word	0x52002000

080102ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80102ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80102b0:	b0ca      	sub	sp, #296	; 0x128
 80102b2:	af00      	add	r7, sp, #0
 80102b4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80102b8:	2300      	movs	r3, #0
 80102ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80102be:	2300      	movs	r3, #0
 80102c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80102c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102cc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80102d0:	2500      	movs	r5, #0
 80102d2:	ea54 0305 	orrs.w	r3, r4, r5
 80102d6:	d049      	beq.n	801036c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80102d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80102e2:	d02f      	beq.n	8010344 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80102e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80102e8:	d828      	bhi.n	801033c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80102ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80102ee:	d01a      	beq.n	8010326 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80102f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80102f4:	d822      	bhi.n	801033c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d003      	beq.n	8010302 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80102fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80102fe:	d007      	beq.n	8010310 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010300:	e01c      	b.n	801033c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010302:	4bb8      	ldr	r3, [pc, #736]	; (80105e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010306:	4ab7      	ldr	r2, [pc, #732]	; (80105e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801030c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801030e:	e01a      	b.n	8010346 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010314:	3308      	adds	r3, #8
 8010316:	2102      	movs	r1, #2
 8010318:	4618      	mov	r0, r3
 801031a:	f002 fb61 	bl	80129e0 <RCCEx_PLL2_Config>
 801031e:	4603      	mov	r3, r0
 8010320:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8010324:	e00f      	b.n	8010346 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801032a:	3328      	adds	r3, #40	; 0x28
 801032c:	2102      	movs	r1, #2
 801032e:	4618      	mov	r0, r3
 8010330:	f002 fc08 	bl	8012b44 <RCCEx_PLL3_Config>
 8010334:	4603      	mov	r3, r0
 8010336:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801033a:	e004      	b.n	8010346 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801033c:	2301      	movs	r3, #1
 801033e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010342:	e000      	b.n	8010346 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8010344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801034a:	2b00      	cmp	r3, #0
 801034c:	d10a      	bne.n	8010364 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801034e:	4ba5      	ldr	r3, [pc, #660]	; (80105e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010352:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8010356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801035a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801035c:	4aa1      	ldr	r2, [pc, #644]	; (80105e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801035e:	430b      	orrs	r3, r1
 8010360:	6513      	str	r3, [r2, #80]	; 0x50
 8010362:	e003      	b.n	801036c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010364:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010368:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801036c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010374:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8010378:	f04f 0900 	mov.w	r9, #0
 801037c:	ea58 0309 	orrs.w	r3, r8, r9
 8010380:	d047      	beq.n	8010412 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8010382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010388:	2b04      	cmp	r3, #4
 801038a:	d82a      	bhi.n	80103e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801038c:	a201      	add	r2, pc, #4	; (adr r2, 8010394 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801038e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010392:	bf00      	nop
 8010394:	080103a9 	.word	0x080103a9
 8010398:	080103b7 	.word	0x080103b7
 801039c:	080103cd 	.word	0x080103cd
 80103a0:	080103eb 	.word	0x080103eb
 80103a4:	080103eb 	.word	0x080103eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80103a8:	4b8e      	ldr	r3, [pc, #568]	; (80105e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80103aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103ac:	4a8d      	ldr	r2, [pc, #564]	; (80105e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80103ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80103b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80103b4:	e01a      	b.n	80103ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80103b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103ba:	3308      	adds	r3, #8
 80103bc:	2100      	movs	r1, #0
 80103be:	4618      	mov	r0, r3
 80103c0:	f002 fb0e 	bl	80129e0 <RCCEx_PLL2_Config>
 80103c4:	4603      	mov	r3, r0
 80103c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80103ca:	e00f      	b.n	80103ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80103cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103d0:	3328      	adds	r3, #40	; 0x28
 80103d2:	2100      	movs	r1, #0
 80103d4:	4618      	mov	r0, r3
 80103d6:	f002 fbb5 	bl	8012b44 <RCCEx_PLL3_Config>
 80103da:	4603      	mov	r3, r0
 80103dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80103e0:	e004      	b.n	80103ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80103e2:	2301      	movs	r3, #1
 80103e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80103e8:	e000      	b.n	80103ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80103ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80103ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d10a      	bne.n	801040a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80103f4:	4b7b      	ldr	r3, [pc, #492]	; (80105e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80103f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103f8:	f023 0107 	bic.w	r1, r3, #7
 80103fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010402:	4a78      	ldr	r2, [pc, #480]	; (80105e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010404:	430b      	orrs	r3, r1
 8010406:	6513      	str	r3, [r2, #80]	; 0x50
 8010408:	e003      	b.n	8010412 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801040a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801040e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8010412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801041a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 801041e:	f04f 0b00 	mov.w	fp, #0
 8010422:	ea5a 030b 	orrs.w	r3, sl, fp
 8010426:	d04c      	beq.n	80104c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8010428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801042c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801042e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010432:	d030      	beq.n	8010496 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8010434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010438:	d829      	bhi.n	801048e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801043a:	2bc0      	cmp	r3, #192	; 0xc0
 801043c:	d02d      	beq.n	801049a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801043e:	2bc0      	cmp	r3, #192	; 0xc0
 8010440:	d825      	bhi.n	801048e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8010442:	2b80      	cmp	r3, #128	; 0x80
 8010444:	d018      	beq.n	8010478 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8010446:	2b80      	cmp	r3, #128	; 0x80
 8010448:	d821      	bhi.n	801048e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801044a:	2b00      	cmp	r3, #0
 801044c:	d002      	beq.n	8010454 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801044e:	2b40      	cmp	r3, #64	; 0x40
 8010450:	d007      	beq.n	8010462 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8010452:	e01c      	b.n	801048e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010454:	4b63      	ldr	r3, [pc, #396]	; (80105e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010458:	4a62      	ldr	r2, [pc, #392]	; (80105e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801045a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801045e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8010460:	e01c      	b.n	801049c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010466:	3308      	adds	r3, #8
 8010468:	2100      	movs	r1, #0
 801046a:	4618      	mov	r0, r3
 801046c:	f002 fab8 	bl	80129e0 <RCCEx_PLL2_Config>
 8010470:	4603      	mov	r3, r0
 8010472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8010476:	e011      	b.n	801049c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801047c:	3328      	adds	r3, #40	; 0x28
 801047e:	2100      	movs	r1, #0
 8010480:	4618      	mov	r0, r3
 8010482:	f002 fb5f 	bl	8012b44 <RCCEx_PLL3_Config>
 8010486:	4603      	mov	r3, r0
 8010488:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801048c:	e006      	b.n	801049c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801048e:	2301      	movs	r3, #1
 8010490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010494:	e002      	b.n	801049c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8010496:	bf00      	nop
 8010498:	e000      	b.n	801049c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801049a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801049c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d10a      	bne.n	80104ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80104a4:	4b4f      	ldr	r3, [pc, #316]	; (80105e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80104a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104a8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80104ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80104b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80104b2:	4a4c      	ldr	r2, [pc, #304]	; (80105e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80104b4:	430b      	orrs	r3, r1
 80104b6:	6513      	str	r3, [r2, #80]	; 0x50
 80104b8:	e003      	b.n	80104c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80104ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80104be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80104c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80104c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ca:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80104ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80104d2:	2300      	movs	r3, #0
 80104d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80104d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80104dc:	460b      	mov	r3, r1
 80104de:	4313      	orrs	r3, r2
 80104e0:	d053      	beq.n	801058a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80104e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80104e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80104ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80104ee:	d035      	beq.n	801055c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80104f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80104f4:	d82e      	bhi.n	8010554 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80104f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80104fa:	d031      	beq.n	8010560 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80104fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010500:	d828      	bhi.n	8010554 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8010502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010506:	d01a      	beq.n	801053e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8010508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801050c:	d822      	bhi.n	8010554 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801050e:	2b00      	cmp	r3, #0
 8010510:	d003      	beq.n	801051a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8010512:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010516:	d007      	beq.n	8010528 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8010518:	e01c      	b.n	8010554 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801051a:	4b32      	ldr	r3, [pc, #200]	; (80105e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801051c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801051e:	4a31      	ldr	r2, [pc, #196]	; (80105e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010524:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010526:	e01c      	b.n	8010562 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801052c:	3308      	adds	r3, #8
 801052e:	2100      	movs	r1, #0
 8010530:	4618      	mov	r0, r3
 8010532:	f002 fa55 	bl	80129e0 <RCCEx_PLL2_Config>
 8010536:	4603      	mov	r3, r0
 8010538:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801053c:	e011      	b.n	8010562 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801053e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010542:	3328      	adds	r3, #40	; 0x28
 8010544:	2100      	movs	r1, #0
 8010546:	4618      	mov	r0, r3
 8010548:	f002 fafc 	bl	8012b44 <RCCEx_PLL3_Config>
 801054c:	4603      	mov	r3, r0
 801054e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010552:	e006      	b.n	8010562 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8010554:	2301      	movs	r3, #1
 8010556:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801055a:	e002      	b.n	8010562 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801055c:	bf00      	nop
 801055e:	e000      	b.n	8010562 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8010560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010562:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010566:	2b00      	cmp	r3, #0
 8010568:	d10b      	bne.n	8010582 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801056a:	4b1e      	ldr	r3, [pc, #120]	; (80105e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801056c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801056e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8010572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010576:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801057a:	4a1a      	ldr	r2, [pc, #104]	; (80105e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801057c:	430b      	orrs	r3, r1
 801057e:	6593      	str	r3, [r2, #88]	; 0x58
 8010580:	e003      	b.n	801058a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010582:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010586:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801058a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801058e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010592:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8010596:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801059a:	2300      	movs	r3, #0
 801059c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80105a0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80105a4:	460b      	mov	r3, r1
 80105a6:	4313      	orrs	r3, r2
 80105a8:	d056      	beq.n	8010658 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80105aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80105ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80105b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80105b6:	d038      	beq.n	801062a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80105b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80105bc:	d831      	bhi.n	8010622 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80105be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80105c2:	d034      	beq.n	801062e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80105c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80105c8:	d82b      	bhi.n	8010622 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80105ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80105ce:	d01d      	beq.n	801060c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80105d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80105d4:	d825      	bhi.n	8010622 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d006      	beq.n	80105e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80105da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80105de:	d00a      	beq.n	80105f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80105e0:	e01f      	b.n	8010622 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80105e2:	bf00      	nop
 80105e4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80105e8:	4ba2      	ldr	r3, [pc, #648]	; (8010874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80105ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105ec:	4aa1      	ldr	r2, [pc, #644]	; (8010874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80105ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80105f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80105f4:	e01c      	b.n	8010630 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80105f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80105fa:	3308      	adds	r3, #8
 80105fc:	2100      	movs	r1, #0
 80105fe:	4618      	mov	r0, r3
 8010600:	f002 f9ee 	bl	80129e0 <RCCEx_PLL2_Config>
 8010604:	4603      	mov	r3, r0
 8010606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801060a:	e011      	b.n	8010630 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801060c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010610:	3328      	adds	r3, #40	; 0x28
 8010612:	2100      	movs	r1, #0
 8010614:	4618      	mov	r0, r3
 8010616:	f002 fa95 	bl	8012b44 <RCCEx_PLL3_Config>
 801061a:	4603      	mov	r3, r0
 801061c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010620:	e006      	b.n	8010630 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8010622:	2301      	movs	r3, #1
 8010624:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010628:	e002      	b.n	8010630 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801062a:	bf00      	nop
 801062c:	e000      	b.n	8010630 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801062e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010630:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010634:	2b00      	cmp	r3, #0
 8010636:	d10b      	bne.n	8010650 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8010638:	4b8e      	ldr	r3, [pc, #568]	; (8010874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801063a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801063c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8010640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010644:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010648:	4a8a      	ldr	r2, [pc, #552]	; (8010874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801064a:	430b      	orrs	r3, r1
 801064c:	6593      	str	r3, [r2, #88]	; 0x58
 801064e:	e003      	b.n	8010658 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010650:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010654:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8010658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801065c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010660:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8010664:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010668:	2300      	movs	r3, #0
 801066a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801066e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8010672:	460b      	mov	r3, r1
 8010674:	4313      	orrs	r3, r2
 8010676:	d03a      	beq.n	80106ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8010678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801067e:	2b30      	cmp	r3, #48	; 0x30
 8010680:	d01f      	beq.n	80106c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8010682:	2b30      	cmp	r3, #48	; 0x30
 8010684:	d819      	bhi.n	80106ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8010686:	2b20      	cmp	r3, #32
 8010688:	d00c      	beq.n	80106a4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801068a:	2b20      	cmp	r3, #32
 801068c:	d815      	bhi.n	80106ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801068e:	2b00      	cmp	r3, #0
 8010690:	d019      	beq.n	80106c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8010692:	2b10      	cmp	r3, #16
 8010694:	d111      	bne.n	80106ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010696:	4b77      	ldr	r3, [pc, #476]	; (8010874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801069a:	4a76      	ldr	r2, [pc, #472]	; (8010874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801069c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80106a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80106a2:	e011      	b.n	80106c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80106a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80106a8:	3308      	adds	r3, #8
 80106aa:	2102      	movs	r1, #2
 80106ac:	4618      	mov	r0, r3
 80106ae:	f002 f997 	bl	80129e0 <RCCEx_PLL2_Config>
 80106b2:	4603      	mov	r3, r0
 80106b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80106b8:	e006      	b.n	80106c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80106ba:	2301      	movs	r3, #1
 80106bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80106c0:	e002      	b.n	80106c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80106c2:	bf00      	nop
 80106c4:	e000      	b.n	80106c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80106c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80106c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d10a      	bne.n	80106e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80106d0:	4b68      	ldr	r3, [pc, #416]	; (8010874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80106d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80106d4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80106d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80106dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80106de:	4a65      	ldr	r2, [pc, #404]	; (8010874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80106e0:	430b      	orrs	r3, r1
 80106e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80106e4:	e003      	b.n	80106ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80106e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80106ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80106ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80106f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80106fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80106fe:	2300      	movs	r3, #0
 8010700:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010704:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8010708:	460b      	mov	r3, r1
 801070a:	4313      	orrs	r3, r2
 801070c:	d051      	beq.n	80107b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801070e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010718:	d035      	beq.n	8010786 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801071a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801071e:	d82e      	bhi.n	801077e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8010720:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010724:	d031      	beq.n	801078a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8010726:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801072a:	d828      	bhi.n	801077e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801072c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010730:	d01a      	beq.n	8010768 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8010732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010736:	d822      	bhi.n	801077e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8010738:	2b00      	cmp	r3, #0
 801073a:	d003      	beq.n	8010744 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801073c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010740:	d007      	beq.n	8010752 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8010742:	e01c      	b.n	801077e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010744:	4b4b      	ldr	r3, [pc, #300]	; (8010874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010748:	4a4a      	ldr	r2, [pc, #296]	; (8010874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801074a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801074e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8010750:	e01c      	b.n	801078c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010756:	3308      	adds	r3, #8
 8010758:	2100      	movs	r1, #0
 801075a:	4618      	mov	r0, r3
 801075c:	f002 f940 	bl	80129e0 <RCCEx_PLL2_Config>
 8010760:	4603      	mov	r3, r0
 8010762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8010766:	e011      	b.n	801078c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801076c:	3328      	adds	r3, #40	; 0x28
 801076e:	2100      	movs	r1, #0
 8010770:	4618      	mov	r0, r3
 8010772:	f002 f9e7 	bl	8012b44 <RCCEx_PLL3_Config>
 8010776:	4603      	mov	r3, r0
 8010778:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801077c:	e006      	b.n	801078c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801077e:	2301      	movs	r3, #1
 8010780:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010784:	e002      	b.n	801078c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8010786:	bf00      	nop
 8010788:	e000      	b.n	801078c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801078a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801078c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010790:	2b00      	cmp	r3, #0
 8010792:	d10a      	bne.n	80107aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8010794:	4b37      	ldr	r3, [pc, #220]	; (8010874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010798:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 801079c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80107a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80107a2:	4a34      	ldr	r2, [pc, #208]	; (8010874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80107a4:	430b      	orrs	r3, r1
 80107a6:	6513      	str	r3, [r2, #80]	; 0x50
 80107a8:	e003      	b.n	80107b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80107aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80107ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80107b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80107b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80107be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80107c2:	2300      	movs	r3, #0
 80107c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80107c8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80107cc:	460b      	mov	r3, r1
 80107ce:	4313      	orrs	r3, r2
 80107d0:	d056      	beq.n	8010880 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80107d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80107d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80107d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80107dc:	d033      	beq.n	8010846 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80107de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80107e2:	d82c      	bhi.n	801083e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80107e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80107e8:	d02f      	beq.n	801084a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80107ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80107ee:	d826      	bhi.n	801083e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80107f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80107f4:	d02b      	beq.n	801084e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80107f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80107fa:	d820      	bhi.n	801083e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80107fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010800:	d012      	beq.n	8010828 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8010802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010806:	d81a      	bhi.n	801083e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8010808:	2b00      	cmp	r3, #0
 801080a:	d022      	beq.n	8010852 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801080c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010810:	d115      	bne.n	801083e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010816:	3308      	adds	r3, #8
 8010818:	2101      	movs	r1, #1
 801081a:	4618      	mov	r0, r3
 801081c:	f002 f8e0 	bl	80129e0 <RCCEx_PLL2_Config>
 8010820:	4603      	mov	r3, r0
 8010822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8010826:	e015      	b.n	8010854 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801082c:	3328      	adds	r3, #40	; 0x28
 801082e:	2101      	movs	r1, #1
 8010830:	4618      	mov	r0, r3
 8010832:	f002 f987 	bl	8012b44 <RCCEx_PLL3_Config>
 8010836:	4603      	mov	r3, r0
 8010838:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801083c:	e00a      	b.n	8010854 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801083e:	2301      	movs	r3, #1
 8010840:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010844:	e006      	b.n	8010854 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8010846:	bf00      	nop
 8010848:	e004      	b.n	8010854 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801084a:	bf00      	nop
 801084c:	e002      	b.n	8010854 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801084e:	bf00      	nop
 8010850:	e000      	b.n	8010854 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8010852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010854:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010858:	2b00      	cmp	r3, #0
 801085a:	d10d      	bne.n	8010878 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801085c:	4b05      	ldr	r3, [pc, #20]	; (8010874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801085e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010860:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8010864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801086a:	4a02      	ldr	r2, [pc, #8]	; (8010874 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801086c:	430b      	orrs	r3, r1
 801086e:	6513      	str	r3, [r2, #80]	; 0x50
 8010870:	e006      	b.n	8010880 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8010872:	bf00      	nop
 8010874:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010878:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801087c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8010880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010888:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 801088c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010890:	2300      	movs	r3, #0
 8010892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010896:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 801089a:	460b      	mov	r3, r1
 801089c:	4313      	orrs	r3, r2
 801089e:	d055      	beq.n	801094c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80108a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80108a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80108a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80108ac:	d033      	beq.n	8010916 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80108ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80108b2:	d82c      	bhi.n	801090e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80108b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108b8:	d02f      	beq.n	801091a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80108ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108be:	d826      	bhi.n	801090e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80108c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80108c4:	d02b      	beq.n	801091e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80108c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80108ca:	d820      	bhi.n	801090e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80108cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108d0:	d012      	beq.n	80108f8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80108d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108d6:	d81a      	bhi.n	801090e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d022      	beq.n	8010922 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80108dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80108e0:	d115      	bne.n	801090e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80108e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80108e6:	3308      	adds	r3, #8
 80108e8:	2101      	movs	r1, #1
 80108ea:	4618      	mov	r0, r3
 80108ec:	f002 f878 	bl	80129e0 <RCCEx_PLL2_Config>
 80108f0:	4603      	mov	r3, r0
 80108f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80108f6:	e015      	b.n	8010924 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80108f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80108fc:	3328      	adds	r3, #40	; 0x28
 80108fe:	2101      	movs	r1, #1
 8010900:	4618      	mov	r0, r3
 8010902:	f002 f91f 	bl	8012b44 <RCCEx_PLL3_Config>
 8010906:	4603      	mov	r3, r0
 8010908:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801090c:	e00a      	b.n	8010924 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801090e:	2301      	movs	r3, #1
 8010910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010914:	e006      	b.n	8010924 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8010916:	bf00      	nop
 8010918:	e004      	b.n	8010924 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801091a:	bf00      	nop
 801091c:	e002      	b.n	8010924 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801091e:	bf00      	nop
 8010920:	e000      	b.n	8010924 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8010922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010924:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010928:	2b00      	cmp	r3, #0
 801092a:	d10b      	bne.n	8010944 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801092c:	4ba3      	ldr	r3, [pc, #652]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801092e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010930:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8010934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010938:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801093c:	4a9f      	ldr	r2, [pc, #636]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801093e:	430b      	orrs	r3, r1
 8010940:	6593      	str	r3, [r2, #88]	; 0x58
 8010942:	e003      	b.n	801094c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010944:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010948:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801094c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010954:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8010958:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801095c:	2300      	movs	r3, #0
 801095e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010962:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8010966:	460b      	mov	r3, r1
 8010968:	4313      	orrs	r3, r2
 801096a:	d037      	beq.n	80109dc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801096c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010976:	d00e      	beq.n	8010996 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8010978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801097c:	d816      	bhi.n	80109ac <HAL_RCCEx_PeriphCLKConfig+0x700>
 801097e:	2b00      	cmp	r3, #0
 8010980:	d018      	beq.n	80109b4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8010982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010986:	d111      	bne.n	80109ac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010988:	4b8c      	ldr	r3, [pc, #560]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801098a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801098c:	4a8b      	ldr	r2, [pc, #556]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801098e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8010994:	e00f      	b.n	80109b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801099a:	3308      	adds	r3, #8
 801099c:	2101      	movs	r1, #1
 801099e:	4618      	mov	r0, r3
 80109a0:	f002 f81e 	bl	80129e0 <RCCEx_PLL2_Config>
 80109a4:	4603      	mov	r3, r0
 80109a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80109aa:	e004      	b.n	80109b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80109ac:	2301      	movs	r3, #1
 80109ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80109b2:	e000      	b.n	80109b6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80109b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80109b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d10a      	bne.n	80109d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80109be:	4b7f      	ldr	r3, [pc, #508]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80109c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80109c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80109ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109cc:	4a7b      	ldr	r2, [pc, #492]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80109ce:	430b      	orrs	r3, r1
 80109d0:	6513      	str	r3, [r2, #80]	; 0x50
 80109d2:	e003      	b.n	80109dc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80109d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80109d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80109dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80109e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80109e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80109ec:	2300      	movs	r3, #0
 80109ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80109f2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80109f6:	460b      	mov	r3, r1
 80109f8:	4313      	orrs	r3, r2
 80109fa:	d039      	beq.n	8010a70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80109fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a02:	2b03      	cmp	r3, #3
 8010a04:	d81c      	bhi.n	8010a40 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8010a06:	a201      	add	r2, pc, #4	; (adr r2, 8010a0c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8010a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a0c:	08010a49 	.word	0x08010a49
 8010a10:	08010a1d 	.word	0x08010a1d
 8010a14:	08010a2b 	.word	0x08010a2b
 8010a18:	08010a49 	.word	0x08010a49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010a1c:	4b67      	ldr	r3, [pc, #412]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a20:	4a66      	ldr	r2, [pc, #408]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010a26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8010a28:	e00f      	b.n	8010a4a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010a2e:	3308      	adds	r3, #8
 8010a30:	2102      	movs	r1, #2
 8010a32:	4618      	mov	r0, r3
 8010a34:	f001 ffd4 	bl	80129e0 <RCCEx_PLL2_Config>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8010a3e:	e004      	b.n	8010a4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8010a40:	2301      	movs	r3, #1
 8010a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010a46:	e000      	b.n	8010a4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8010a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d10a      	bne.n	8010a68 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8010a52:	4b5a      	ldr	r3, [pc, #360]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a56:	f023 0103 	bic.w	r1, r3, #3
 8010a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a60:	4a56      	ldr	r2, [pc, #344]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010a62:	430b      	orrs	r3, r1
 8010a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010a66:	e003      	b.n	8010a70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010a68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010a6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a78:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8010a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010a80:	2300      	movs	r3, #0
 8010a82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010a86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8010a8a:	460b      	mov	r3, r1
 8010a8c:	4313      	orrs	r3, r2
 8010a8e:	f000 809f 	beq.w	8010bd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010a92:	4b4b      	ldr	r3, [pc, #300]	; (8010bc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	4a4a      	ldr	r2, [pc, #296]	; (8010bc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8010a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010a9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010a9e:	f7f6 f867 	bl	8006b70 <HAL_GetTick>
 8010aa2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010aa6:	e00b      	b.n	8010ac0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010aa8:	f7f6 f862 	bl	8006b70 <HAL_GetTick>
 8010aac:	4602      	mov	r2, r0
 8010aae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010ab2:	1ad3      	subs	r3, r2, r3
 8010ab4:	2b64      	cmp	r3, #100	; 0x64
 8010ab6:	d903      	bls.n	8010ac0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8010ab8:	2303      	movs	r3, #3
 8010aba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010abe:	e005      	b.n	8010acc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010ac0:	4b3f      	ldr	r3, [pc, #252]	; (8010bc0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d0ed      	beq.n	8010aa8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8010acc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d179      	bne.n	8010bc8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010ad4:	4b39      	ldr	r3, [pc, #228]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010ad6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010adc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010ae0:	4053      	eors	r3, r2
 8010ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d015      	beq.n	8010b16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010aea:	4b34      	ldr	r3, [pc, #208]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010af2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010af6:	4b31      	ldr	r3, [pc, #196]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010afa:	4a30      	ldr	r2, [pc, #192]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010b00:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010b02:	4b2e      	ldr	r3, [pc, #184]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b06:	4a2d      	ldr	r2, [pc, #180]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010b0c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8010b0e:	4a2b      	ldr	r2, [pc, #172]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010b10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010b14:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8010b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010b1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b22:	d118      	bne.n	8010b56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010b24:	f7f6 f824 	bl	8006b70 <HAL_GetTick>
 8010b28:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010b2c:	e00d      	b.n	8010b4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010b2e:	f7f6 f81f 	bl	8006b70 <HAL_GetTick>
 8010b32:	4602      	mov	r2, r0
 8010b34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010b38:	1ad2      	subs	r2, r2, r3
 8010b3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d903      	bls.n	8010b4a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8010b42:	2303      	movs	r3, #3
 8010b44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8010b48:	e005      	b.n	8010b56 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010b4a:	4b1c      	ldr	r3, [pc, #112]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b4e:	f003 0302 	and.w	r3, r3, #2
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d0eb      	beq.n	8010b2e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8010b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d129      	bne.n	8010bb2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010b62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010b6e:	d10e      	bne.n	8010b8e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8010b70:	4b12      	ldr	r3, [pc, #72]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010b72:	691b      	ldr	r3, [r3, #16]
 8010b74:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8010b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010b7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010b80:	091a      	lsrs	r2, r3, #4
 8010b82:	4b10      	ldr	r3, [pc, #64]	; (8010bc4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8010b84:	4013      	ands	r3, r2
 8010b86:	4a0d      	ldr	r2, [pc, #52]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010b88:	430b      	orrs	r3, r1
 8010b8a:	6113      	str	r3, [r2, #16]
 8010b8c:	e005      	b.n	8010b9a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8010b8e:	4b0b      	ldr	r3, [pc, #44]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010b90:	691b      	ldr	r3, [r3, #16]
 8010b92:	4a0a      	ldr	r2, [pc, #40]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010b94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010b98:	6113      	str	r3, [r2, #16]
 8010b9a:	4b08      	ldr	r3, [pc, #32]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010b9c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010ba2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010baa:	4a04      	ldr	r2, [pc, #16]	; (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010bac:	430b      	orrs	r3, r1
 8010bae:	6713      	str	r3, [r2, #112]	; 0x70
 8010bb0:	e00e      	b.n	8010bd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010bb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8010bba:	e009      	b.n	8010bd0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8010bbc:	58024400 	.word	0x58024400
 8010bc0:	58024800 	.word	0x58024800
 8010bc4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010bcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd8:	f002 0301 	and.w	r3, r2, #1
 8010bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010be0:	2300      	movs	r3, #0
 8010be2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010be6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8010bea:	460b      	mov	r3, r1
 8010bec:	4313      	orrs	r3, r2
 8010bee:	f000 8089 	beq.w	8010d04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8010bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010bf8:	2b28      	cmp	r3, #40	; 0x28
 8010bfa:	d86b      	bhi.n	8010cd4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8010bfc:	a201      	add	r2, pc, #4	; (adr r2, 8010c04 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8010bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c02:	bf00      	nop
 8010c04:	08010cdd 	.word	0x08010cdd
 8010c08:	08010cd5 	.word	0x08010cd5
 8010c0c:	08010cd5 	.word	0x08010cd5
 8010c10:	08010cd5 	.word	0x08010cd5
 8010c14:	08010cd5 	.word	0x08010cd5
 8010c18:	08010cd5 	.word	0x08010cd5
 8010c1c:	08010cd5 	.word	0x08010cd5
 8010c20:	08010cd5 	.word	0x08010cd5
 8010c24:	08010ca9 	.word	0x08010ca9
 8010c28:	08010cd5 	.word	0x08010cd5
 8010c2c:	08010cd5 	.word	0x08010cd5
 8010c30:	08010cd5 	.word	0x08010cd5
 8010c34:	08010cd5 	.word	0x08010cd5
 8010c38:	08010cd5 	.word	0x08010cd5
 8010c3c:	08010cd5 	.word	0x08010cd5
 8010c40:	08010cd5 	.word	0x08010cd5
 8010c44:	08010cbf 	.word	0x08010cbf
 8010c48:	08010cd5 	.word	0x08010cd5
 8010c4c:	08010cd5 	.word	0x08010cd5
 8010c50:	08010cd5 	.word	0x08010cd5
 8010c54:	08010cd5 	.word	0x08010cd5
 8010c58:	08010cd5 	.word	0x08010cd5
 8010c5c:	08010cd5 	.word	0x08010cd5
 8010c60:	08010cd5 	.word	0x08010cd5
 8010c64:	08010cdd 	.word	0x08010cdd
 8010c68:	08010cd5 	.word	0x08010cd5
 8010c6c:	08010cd5 	.word	0x08010cd5
 8010c70:	08010cd5 	.word	0x08010cd5
 8010c74:	08010cd5 	.word	0x08010cd5
 8010c78:	08010cd5 	.word	0x08010cd5
 8010c7c:	08010cd5 	.word	0x08010cd5
 8010c80:	08010cd5 	.word	0x08010cd5
 8010c84:	08010cdd 	.word	0x08010cdd
 8010c88:	08010cd5 	.word	0x08010cd5
 8010c8c:	08010cd5 	.word	0x08010cd5
 8010c90:	08010cd5 	.word	0x08010cd5
 8010c94:	08010cd5 	.word	0x08010cd5
 8010c98:	08010cd5 	.word	0x08010cd5
 8010c9c:	08010cd5 	.word	0x08010cd5
 8010ca0:	08010cd5 	.word	0x08010cd5
 8010ca4:	08010cdd 	.word	0x08010cdd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010cac:	3308      	adds	r3, #8
 8010cae:	2101      	movs	r1, #1
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f001 fe95 	bl	80129e0 <RCCEx_PLL2_Config>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8010cbc:	e00f      	b.n	8010cde <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010cc2:	3328      	adds	r3, #40	; 0x28
 8010cc4:	2101      	movs	r1, #1
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f001 ff3c 	bl	8012b44 <RCCEx_PLL3_Config>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8010cd2:	e004      	b.n	8010cde <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010cda:	e000      	b.n	8010cde <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8010cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d10a      	bne.n	8010cfc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8010ce6:	4bbf      	ldr	r3, [pc, #764]	; (8010fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8010cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010cf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010cf4:	4abb      	ldr	r2, [pc, #748]	; (8010fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010cf6:	430b      	orrs	r3, r1
 8010cf8:	6553      	str	r3, [r2, #84]	; 0x54
 8010cfa:	e003      	b.n	8010d04 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010d00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0c:	f002 0302 	and.w	r3, r2, #2
 8010d10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010d14:	2300      	movs	r3, #0
 8010d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010d1a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8010d1e:	460b      	mov	r3, r1
 8010d20:	4313      	orrs	r3, r2
 8010d22:	d041      	beq.n	8010da8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8010d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d2a:	2b05      	cmp	r3, #5
 8010d2c:	d824      	bhi.n	8010d78 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8010d2e:	a201      	add	r2, pc, #4	; (adr r2, 8010d34 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8010d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d34:	08010d81 	.word	0x08010d81
 8010d38:	08010d4d 	.word	0x08010d4d
 8010d3c:	08010d63 	.word	0x08010d63
 8010d40:	08010d81 	.word	0x08010d81
 8010d44:	08010d81 	.word	0x08010d81
 8010d48:	08010d81 	.word	0x08010d81
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010d50:	3308      	adds	r3, #8
 8010d52:	2101      	movs	r1, #1
 8010d54:	4618      	mov	r0, r3
 8010d56:	f001 fe43 	bl	80129e0 <RCCEx_PLL2_Config>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8010d60:	e00f      	b.n	8010d82 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010d66:	3328      	adds	r3, #40	; 0x28
 8010d68:	2101      	movs	r1, #1
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f001 feea 	bl	8012b44 <RCCEx_PLL3_Config>
 8010d70:	4603      	mov	r3, r0
 8010d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8010d76:	e004      	b.n	8010d82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010d78:	2301      	movs	r3, #1
 8010d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010d7e:	e000      	b.n	8010d82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8010d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010d82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d10a      	bne.n	8010da0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8010d8a:	4b96      	ldr	r3, [pc, #600]	; (8010fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d8e:	f023 0107 	bic.w	r1, r3, #7
 8010d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010d96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d98:	4a92      	ldr	r2, [pc, #584]	; (8010fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010d9a:	430b      	orrs	r3, r1
 8010d9c:	6553      	str	r3, [r2, #84]	; 0x54
 8010d9e:	e003      	b.n	8010da8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010da0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010da4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db0:	f002 0304 	and.w	r3, r2, #4
 8010db4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010db8:	2300      	movs	r3, #0
 8010dba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010dbe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8010dc2:	460b      	mov	r3, r1
 8010dc4:	4313      	orrs	r3, r2
 8010dc6:	d044      	beq.n	8010e52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8010dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010dd0:	2b05      	cmp	r3, #5
 8010dd2:	d825      	bhi.n	8010e20 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8010dd4:	a201      	add	r2, pc, #4	; (adr r2, 8010ddc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8010dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dda:	bf00      	nop
 8010ddc:	08010e29 	.word	0x08010e29
 8010de0:	08010df5 	.word	0x08010df5
 8010de4:	08010e0b 	.word	0x08010e0b
 8010de8:	08010e29 	.word	0x08010e29
 8010dec:	08010e29 	.word	0x08010e29
 8010df0:	08010e29 	.word	0x08010e29
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010df8:	3308      	adds	r3, #8
 8010dfa:	2101      	movs	r1, #1
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f001 fdef 	bl	80129e0 <RCCEx_PLL2_Config>
 8010e02:	4603      	mov	r3, r0
 8010e04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8010e08:	e00f      	b.n	8010e2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010e0e:	3328      	adds	r3, #40	; 0x28
 8010e10:	2101      	movs	r1, #1
 8010e12:	4618      	mov	r0, r3
 8010e14:	f001 fe96 	bl	8012b44 <RCCEx_PLL3_Config>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8010e1e:	e004      	b.n	8010e2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010e20:	2301      	movs	r3, #1
 8010e22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010e26:	e000      	b.n	8010e2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8010e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d10b      	bne.n	8010e4a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010e32:	4b6c      	ldr	r3, [pc, #432]	; (8010fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e36:	f023 0107 	bic.w	r1, r3, #7
 8010e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010e42:	4a68      	ldr	r2, [pc, #416]	; (8010fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010e44:	430b      	orrs	r3, r1
 8010e46:	6593      	str	r3, [r2, #88]	; 0x58
 8010e48:	e003      	b.n	8010e52 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010e4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8010e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e5a:	f002 0320 	and.w	r3, r2, #32
 8010e5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010e62:	2300      	movs	r3, #0
 8010e64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010e68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8010e6c:	460b      	mov	r3, r1
 8010e6e:	4313      	orrs	r3, r2
 8010e70:	d055      	beq.n	8010f1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8010e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010e7e:	d033      	beq.n	8010ee8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8010e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010e84:	d82c      	bhi.n	8010ee0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e8a:	d02f      	beq.n	8010eec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8010e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e90:	d826      	bhi.n	8010ee0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010e92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010e96:	d02b      	beq.n	8010ef0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8010e98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010e9c:	d820      	bhi.n	8010ee0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010ea2:	d012      	beq.n	8010eca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8010ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010ea8:	d81a      	bhi.n	8010ee0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d022      	beq.n	8010ef4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8010eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010eb2:	d115      	bne.n	8010ee0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010eb8:	3308      	adds	r3, #8
 8010eba:	2100      	movs	r1, #0
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f001 fd8f 	bl	80129e0 <RCCEx_PLL2_Config>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010ec8:	e015      	b.n	8010ef6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010ece:	3328      	adds	r3, #40	; 0x28
 8010ed0:	2102      	movs	r1, #2
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f001 fe36 	bl	8012b44 <RCCEx_PLL3_Config>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010ede:	e00a      	b.n	8010ef6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010ee6:	e006      	b.n	8010ef6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010ee8:	bf00      	nop
 8010eea:	e004      	b.n	8010ef6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010eec:	bf00      	nop
 8010eee:	e002      	b.n	8010ef6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010ef0:	bf00      	nop
 8010ef2:	e000      	b.n	8010ef6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d10b      	bne.n	8010f16 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010efe:	4b39      	ldr	r3, [pc, #228]	; (8010fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f02:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8010f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f0e:	4a35      	ldr	r2, [pc, #212]	; (8010fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010f10:	430b      	orrs	r3, r1
 8010f12:	6553      	str	r3, [r2, #84]	; 0x54
 8010f14:	e003      	b.n	8010f1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010f16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010f1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8010f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f26:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8010f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010f2e:	2300      	movs	r3, #0
 8010f30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010f34:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8010f38:	460b      	mov	r3, r1
 8010f3a:	4313      	orrs	r3, r2
 8010f3c:	d058      	beq.n	8010ff0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8010f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010f46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010f4a:	d033      	beq.n	8010fb4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8010f4c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010f50:	d82c      	bhi.n	8010fac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f56:	d02f      	beq.n	8010fb8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8010f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f5c:	d826      	bhi.n	8010fac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010f5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010f62:	d02b      	beq.n	8010fbc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8010f64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010f68:	d820      	bhi.n	8010fac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010f6e:	d012      	beq.n	8010f96 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8010f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010f74:	d81a      	bhi.n	8010fac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d022      	beq.n	8010fc0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8010f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010f7e:	d115      	bne.n	8010fac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010f84:	3308      	adds	r3, #8
 8010f86:	2100      	movs	r1, #0
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f001 fd29 	bl	80129e0 <RCCEx_PLL2_Config>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010f94:	e015      	b.n	8010fc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010f9a:	3328      	adds	r3, #40	; 0x28
 8010f9c:	2102      	movs	r1, #2
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f001 fdd0 	bl	8012b44 <RCCEx_PLL3_Config>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010faa:	e00a      	b.n	8010fc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010fac:	2301      	movs	r3, #1
 8010fae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010fb2:	e006      	b.n	8010fc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010fb4:	bf00      	nop
 8010fb6:	e004      	b.n	8010fc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010fb8:	bf00      	nop
 8010fba:	e002      	b.n	8010fc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010fbc:	bf00      	nop
 8010fbe:	e000      	b.n	8010fc2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d10e      	bne.n	8010fe8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010fca:	4b06      	ldr	r3, [pc, #24]	; (8010fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8010fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010fd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010fda:	4a02      	ldr	r2, [pc, #8]	; (8010fe4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010fdc:	430b      	orrs	r3, r1
 8010fde:	6593      	str	r3, [r2, #88]	; 0x58
 8010fe0:	e006      	b.n	8010ff0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8010fe2:	bf00      	nop
 8010fe4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010fec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ff8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8010ffc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011000:	2300      	movs	r3, #0
 8011002:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011006:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 801100a:	460b      	mov	r3, r1
 801100c:	4313      	orrs	r3, r2
 801100e:	d055      	beq.n	80110bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8011010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011014:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011018:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801101c:	d033      	beq.n	8011086 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801101e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8011022:	d82c      	bhi.n	801107e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8011024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011028:	d02f      	beq.n	801108a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801102a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801102e:	d826      	bhi.n	801107e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8011030:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8011034:	d02b      	beq.n	801108e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8011036:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801103a:	d820      	bhi.n	801107e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801103c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011040:	d012      	beq.n	8011068 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8011042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011046:	d81a      	bhi.n	801107e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8011048:	2b00      	cmp	r3, #0
 801104a:	d022      	beq.n	8011092 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801104c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011050:	d115      	bne.n	801107e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011056:	3308      	adds	r3, #8
 8011058:	2100      	movs	r1, #0
 801105a:	4618      	mov	r0, r3
 801105c:	f001 fcc0 	bl	80129e0 <RCCEx_PLL2_Config>
 8011060:	4603      	mov	r3, r0
 8011062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8011066:	e015      	b.n	8011094 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801106c:	3328      	adds	r3, #40	; 0x28
 801106e:	2102      	movs	r1, #2
 8011070:	4618      	mov	r0, r3
 8011072:	f001 fd67 	bl	8012b44 <RCCEx_PLL3_Config>
 8011076:	4603      	mov	r3, r0
 8011078:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801107c:	e00a      	b.n	8011094 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801107e:	2301      	movs	r3, #1
 8011080:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8011084:	e006      	b.n	8011094 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8011086:	bf00      	nop
 8011088:	e004      	b.n	8011094 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801108a:	bf00      	nop
 801108c:	e002      	b.n	8011094 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801108e:	bf00      	nop
 8011090:	e000      	b.n	8011094 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8011092:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011094:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011098:	2b00      	cmp	r3, #0
 801109a:	d10b      	bne.n	80110b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801109c:	4ba1      	ldr	r3, [pc, #644]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801109e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110a0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80110a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80110a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80110ac:	4a9d      	ldr	r2, [pc, #628]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80110ae:	430b      	orrs	r3, r1
 80110b0:	6593      	str	r3, [r2, #88]	; 0x58
 80110b2:	e003      	b.n	80110bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80110b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80110b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80110bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80110c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c4:	f002 0308 	and.w	r3, r2, #8
 80110c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80110cc:	2300      	movs	r3, #0
 80110ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80110d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80110d6:	460b      	mov	r3, r1
 80110d8:	4313      	orrs	r3, r2
 80110da:	d01e      	beq.n	801111a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80110dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80110e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80110e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80110e8:	d10c      	bne.n	8011104 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80110ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80110ee:	3328      	adds	r3, #40	; 0x28
 80110f0:	2102      	movs	r1, #2
 80110f2:	4618      	mov	r0, r3
 80110f4:	f001 fd26 	bl	8012b44 <RCCEx_PLL3_Config>
 80110f8:	4603      	mov	r3, r0
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d002      	beq.n	8011104 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80110fe:	2301      	movs	r3, #1
 8011100:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8011104:	4b87      	ldr	r3, [pc, #540]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011108:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801110c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011114:	4a83      	ldr	r2, [pc, #524]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011116:	430b      	orrs	r3, r1
 8011118:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801111a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011122:	f002 0310 	and.w	r3, r2, #16
 8011126:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801112a:	2300      	movs	r3, #0
 801112c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011130:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8011134:	460b      	mov	r3, r1
 8011136:	4313      	orrs	r3, r2
 8011138:	d01e      	beq.n	8011178 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801113a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801113e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011146:	d10c      	bne.n	8011162 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8011148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801114c:	3328      	adds	r3, #40	; 0x28
 801114e:	2102      	movs	r1, #2
 8011150:	4618      	mov	r0, r3
 8011152:	f001 fcf7 	bl	8012b44 <RCCEx_PLL3_Config>
 8011156:	4603      	mov	r3, r0
 8011158:	2b00      	cmp	r3, #0
 801115a:	d002      	beq.n	8011162 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801115c:	2301      	movs	r3, #1
 801115e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011162:	4b70      	ldr	r3, [pc, #448]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011166:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801116a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801116e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011172:	4a6c      	ldr	r2, [pc, #432]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011174:	430b      	orrs	r3, r1
 8011176:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011180:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8011184:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011188:	2300      	movs	r3, #0
 801118a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801118e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8011192:	460b      	mov	r3, r1
 8011194:	4313      	orrs	r3, r2
 8011196:	d03e      	beq.n	8011216 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8011198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801119c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80111a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80111a4:	d022      	beq.n	80111ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80111a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80111aa:	d81b      	bhi.n	80111e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d003      	beq.n	80111b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80111b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111b4:	d00b      	beq.n	80111ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80111b6:	e015      	b.n	80111e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80111b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80111bc:	3308      	adds	r3, #8
 80111be:	2100      	movs	r1, #0
 80111c0:	4618      	mov	r0, r3
 80111c2:	f001 fc0d 	bl	80129e0 <RCCEx_PLL2_Config>
 80111c6:	4603      	mov	r3, r0
 80111c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80111cc:	e00f      	b.n	80111ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80111ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80111d2:	3328      	adds	r3, #40	; 0x28
 80111d4:	2102      	movs	r1, #2
 80111d6:	4618      	mov	r0, r3
 80111d8:	f001 fcb4 	bl	8012b44 <RCCEx_PLL3_Config>
 80111dc:	4603      	mov	r3, r0
 80111de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80111e2:	e004      	b.n	80111ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80111e4:	2301      	movs	r3, #1
 80111e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80111ea:	e000      	b.n	80111ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80111ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80111ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d10b      	bne.n	801120e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80111f6:	4b4b      	ldr	r3, [pc, #300]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80111f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80111fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80111fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011202:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011206:	4a47      	ldr	r2, [pc, #284]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011208:	430b      	orrs	r3, r1
 801120a:	6593      	str	r3, [r2, #88]	; 0x58
 801120c:	e003      	b.n	8011216 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801120e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011212:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8011216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801121e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8011222:	67bb      	str	r3, [r7, #120]	; 0x78
 8011224:	2300      	movs	r3, #0
 8011226:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011228:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 801122c:	460b      	mov	r3, r1
 801122e:	4313      	orrs	r3, r2
 8011230:	d03b      	beq.n	80112aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8011232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801123a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801123e:	d01f      	beq.n	8011280 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8011240:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011244:	d818      	bhi.n	8011278 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8011246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801124a:	d003      	beq.n	8011254 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801124c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011250:	d007      	beq.n	8011262 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8011252:	e011      	b.n	8011278 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011254:	4b33      	ldr	r3, [pc, #204]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011258:	4a32      	ldr	r2, [pc, #200]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801125a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801125e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8011260:	e00f      	b.n	8011282 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011266:	3328      	adds	r3, #40	; 0x28
 8011268:	2101      	movs	r1, #1
 801126a:	4618      	mov	r0, r3
 801126c:	f001 fc6a 	bl	8012b44 <RCCEx_PLL3_Config>
 8011270:	4603      	mov	r3, r0
 8011272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8011276:	e004      	b.n	8011282 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011278:	2301      	movs	r3, #1
 801127a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801127e:	e000      	b.n	8011282 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8011280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011286:	2b00      	cmp	r3, #0
 8011288:	d10b      	bne.n	80112a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801128a:	4b26      	ldr	r3, [pc, #152]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801128c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801128e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8011292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801129a:	4a22      	ldr	r2, [pc, #136]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801129c:	430b      	orrs	r3, r1
 801129e:	6553      	str	r3, [r2, #84]	; 0x54
 80112a0:	e003      	b.n	80112aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80112a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80112a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80112aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80112ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80112b6:	673b      	str	r3, [r7, #112]	; 0x70
 80112b8:	2300      	movs	r3, #0
 80112ba:	677b      	str	r3, [r7, #116]	; 0x74
 80112bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80112c0:	460b      	mov	r3, r1
 80112c2:	4313      	orrs	r3, r2
 80112c4:	d034      	beq.n	8011330 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80112c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80112ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d003      	beq.n	80112d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80112d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112d4:	d007      	beq.n	80112e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80112d6:	e011      	b.n	80112fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80112d8:	4b12      	ldr	r3, [pc, #72]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80112da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112dc:	4a11      	ldr	r2, [pc, #68]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80112de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80112e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80112e4:	e00e      	b.n	8011304 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80112e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80112ea:	3308      	adds	r3, #8
 80112ec:	2102      	movs	r1, #2
 80112ee:	4618      	mov	r0, r3
 80112f0:	f001 fb76 	bl	80129e0 <RCCEx_PLL2_Config>
 80112f4:	4603      	mov	r3, r0
 80112f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80112fa:	e003      	b.n	8011304 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80112fc:	2301      	movs	r3, #1
 80112fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8011302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011304:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011308:	2b00      	cmp	r3, #0
 801130a:	d10d      	bne.n	8011328 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801130c:	4b05      	ldr	r3, [pc, #20]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801130e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011310:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801131a:	4a02      	ldr	r2, [pc, #8]	; (8011324 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801131c:	430b      	orrs	r3, r1
 801131e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011320:	e006      	b.n	8011330 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8011322:	bf00      	nop
 8011324:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011328:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801132c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8011330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011338:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 801133c:	66bb      	str	r3, [r7, #104]	; 0x68
 801133e:	2300      	movs	r3, #0
 8011340:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011342:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8011346:	460b      	mov	r3, r1
 8011348:	4313      	orrs	r3, r2
 801134a:	d00c      	beq.n	8011366 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801134c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011350:	3328      	adds	r3, #40	; 0x28
 8011352:	2102      	movs	r1, #2
 8011354:	4618      	mov	r0, r3
 8011356:	f001 fbf5 	bl	8012b44 <RCCEx_PLL3_Config>
 801135a:	4603      	mov	r3, r0
 801135c:	2b00      	cmp	r3, #0
 801135e:	d002      	beq.n	8011366 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8011360:	2301      	movs	r3, #1
 8011362:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8011366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801136a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801136e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8011372:	663b      	str	r3, [r7, #96]	; 0x60
 8011374:	2300      	movs	r3, #0
 8011376:	667b      	str	r3, [r7, #100]	; 0x64
 8011378:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 801137c:	460b      	mov	r3, r1
 801137e:	4313      	orrs	r3, r2
 8011380:	d038      	beq.n	80113f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8011382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801138a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801138e:	d018      	beq.n	80113c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8011390:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011394:	d811      	bhi.n	80113ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8011396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801139a:	d014      	beq.n	80113c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801139c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80113a0:	d80b      	bhi.n	80113ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d011      	beq.n	80113ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80113a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80113aa:	d106      	bne.n	80113ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80113ac:	4bc3      	ldr	r3, [pc, #780]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80113ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113b0:	4ac2      	ldr	r2, [pc, #776]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80113b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80113b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80113b8:	e008      	b.n	80113cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80113ba:	2301      	movs	r3, #1
 80113bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80113c0:	e004      	b.n	80113cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80113c2:	bf00      	nop
 80113c4:	e002      	b.n	80113cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80113c6:	bf00      	nop
 80113c8:	e000      	b.n	80113cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80113ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80113cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d10b      	bne.n	80113ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80113d4:	4bb9      	ldr	r3, [pc, #740]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80113d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80113dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80113e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80113e4:	4ab5      	ldr	r2, [pc, #724]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80113e6:	430b      	orrs	r3, r1
 80113e8:	6553      	str	r3, [r2, #84]	; 0x54
 80113ea:	e003      	b.n	80113f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80113ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80113f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80113f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80113f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113fc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8011400:	65bb      	str	r3, [r7, #88]	; 0x58
 8011402:	2300      	movs	r3, #0
 8011404:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011406:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801140a:	460b      	mov	r3, r1
 801140c:	4313      	orrs	r3, r2
 801140e:	d009      	beq.n	8011424 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8011410:	4baa      	ldr	r3, [pc, #680]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011414:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801141c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801141e:	4aa7      	ldr	r2, [pc, #668]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011420:	430b      	orrs	r3, r1
 8011422:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8011424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801142c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8011430:	653b      	str	r3, [r7, #80]	; 0x50
 8011432:	2300      	movs	r3, #0
 8011434:	657b      	str	r3, [r7, #84]	; 0x54
 8011436:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 801143a:	460b      	mov	r3, r1
 801143c:	4313      	orrs	r3, r2
 801143e:	d00a      	beq.n	8011456 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8011440:	4b9e      	ldr	r3, [pc, #632]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011442:	691b      	ldr	r3, [r3, #16]
 8011444:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8011448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801144c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011450:	4a9a      	ldr	r2, [pc, #616]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011452:	430b      	orrs	r3, r1
 8011454:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801145e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8011462:	64bb      	str	r3, [r7, #72]	; 0x48
 8011464:	2300      	movs	r3, #0
 8011466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011468:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801146c:	460b      	mov	r3, r1
 801146e:	4313      	orrs	r3, r2
 8011470:	d009      	beq.n	8011486 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011472:	4b92      	ldr	r3, [pc, #584]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011476:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 801147a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801147e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011480:	4a8e      	ldr	r2, [pc, #568]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011482:	430b      	orrs	r3, r1
 8011484:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8011486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8011492:	643b      	str	r3, [r7, #64]	; 0x40
 8011494:	2300      	movs	r3, #0
 8011496:	647b      	str	r3, [r7, #68]	; 0x44
 8011498:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 801149c:	460b      	mov	r3, r1
 801149e:	4313      	orrs	r3, r2
 80114a0:	d00e      	beq.n	80114c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80114a2:	4b86      	ldr	r3, [pc, #536]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80114a4:	691b      	ldr	r3, [r3, #16]
 80114a6:	4a85      	ldr	r2, [pc, #532]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80114a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80114ac:	6113      	str	r3, [r2, #16]
 80114ae:	4b83      	ldr	r3, [pc, #524]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80114b0:	6919      	ldr	r1, [r3, #16]
 80114b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80114b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80114ba:	4a80      	ldr	r2, [pc, #512]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80114bc:	430b      	orrs	r3, r1
 80114be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80114c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80114c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80114cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80114ce:	2300      	movs	r3, #0
 80114d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80114d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80114d6:	460b      	mov	r3, r1
 80114d8:	4313      	orrs	r3, r2
 80114da:	d009      	beq.n	80114f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80114dc:	4b77      	ldr	r3, [pc, #476]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80114de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114e0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80114e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80114e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114ea:	4a74      	ldr	r2, [pc, #464]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80114ec:	430b      	orrs	r3, r1
 80114ee:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80114f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80114f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80114fc:	633b      	str	r3, [r7, #48]	; 0x30
 80114fe:	2300      	movs	r3, #0
 8011500:	637b      	str	r3, [r7, #52]	; 0x34
 8011502:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8011506:	460b      	mov	r3, r1
 8011508:	4313      	orrs	r3, r2
 801150a:	d00a      	beq.n	8011522 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801150c:	4b6b      	ldr	r3, [pc, #428]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801150e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011510:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8011514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801151c:	4a67      	ldr	r2, [pc, #412]	; (80116bc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801151e:	430b      	orrs	r3, r1
 8011520:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8011522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801152a:	2100      	movs	r1, #0
 801152c:	62b9      	str	r1, [r7, #40]	; 0x28
 801152e:	f003 0301 	and.w	r3, r3, #1
 8011532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011534:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8011538:	460b      	mov	r3, r1
 801153a:	4313      	orrs	r3, r2
 801153c:	d011      	beq.n	8011562 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801153e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011542:	3308      	adds	r3, #8
 8011544:	2100      	movs	r1, #0
 8011546:	4618      	mov	r0, r3
 8011548:	f001 fa4a 	bl	80129e0 <RCCEx_PLL2_Config>
 801154c:	4603      	mov	r3, r0
 801154e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8011552:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011556:	2b00      	cmp	r3, #0
 8011558:	d003      	beq.n	8011562 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801155a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801155e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8011562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156a:	2100      	movs	r1, #0
 801156c:	6239      	str	r1, [r7, #32]
 801156e:	f003 0302 	and.w	r3, r3, #2
 8011572:	627b      	str	r3, [r7, #36]	; 0x24
 8011574:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8011578:	460b      	mov	r3, r1
 801157a:	4313      	orrs	r3, r2
 801157c:	d011      	beq.n	80115a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801157e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011582:	3308      	adds	r3, #8
 8011584:	2101      	movs	r1, #1
 8011586:	4618      	mov	r0, r3
 8011588:	f001 fa2a 	bl	80129e0 <RCCEx_PLL2_Config>
 801158c:	4603      	mov	r3, r0
 801158e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8011592:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011596:	2b00      	cmp	r3, #0
 8011598:	d003      	beq.n	80115a2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801159a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801159e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80115a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80115a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115aa:	2100      	movs	r1, #0
 80115ac:	61b9      	str	r1, [r7, #24]
 80115ae:	f003 0304 	and.w	r3, r3, #4
 80115b2:	61fb      	str	r3, [r7, #28]
 80115b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80115b8:	460b      	mov	r3, r1
 80115ba:	4313      	orrs	r3, r2
 80115bc:	d011      	beq.n	80115e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80115be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80115c2:	3308      	adds	r3, #8
 80115c4:	2102      	movs	r1, #2
 80115c6:	4618      	mov	r0, r3
 80115c8:	f001 fa0a 	bl	80129e0 <RCCEx_PLL2_Config>
 80115cc:	4603      	mov	r3, r0
 80115ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80115d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d003      	beq.n	80115e2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80115da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80115de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80115e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80115e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ea:	2100      	movs	r1, #0
 80115ec:	6139      	str	r1, [r7, #16]
 80115ee:	f003 0308 	and.w	r3, r3, #8
 80115f2:	617b      	str	r3, [r7, #20]
 80115f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80115f8:	460b      	mov	r3, r1
 80115fa:	4313      	orrs	r3, r2
 80115fc:	d011      	beq.n	8011622 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80115fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011602:	3328      	adds	r3, #40	; 0x28
 8011604:	2100      	movs	r1, #0
 8011606:	4618      	mov	r0, r3
 8011608:	f001 fa9c 	bl	8012b44 <RCCEx_PLL3_Config>
 801160c:	4603      	mov	r3, r0
 801160e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8011612:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011616:	2b00      	cmp	r3, #0
 8011618:	d003      	beq.n	8011622 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801161a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801161e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8011622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801162a:	2100      	movs	r1, #0
 801162c:	60b9      	str	r1, [r7, #8]
 801162e:	f003 0310 	and.w	r3, r3, #16
 8011632:	60fb      	str	r3, [r7, #12]
 8011634:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8011638:	460b      	mov	r3, r1
 801163a:	4313      	orrs	r3, r2
 801163c:	d011      	beq.n	8011662 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801163e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011642:	3328      	adds	r3, #40	; 0x28
 8011644:	2101      	movs	r1, #1
 8011646:	4618      	mov	r0, r3
 8011648:	f001 fa7c 	bl	8012b44 <RCCEx_PLL3_Config>
 801164c:	4603      	mov	r3, r0
 801164e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8011652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011656:	2b00      	cmp	r3, #0
 8011658:	d003      	beq.n	8011662 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801165a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801165e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8011662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801166a:	2100      	movs	r1, #0
 801166c:	6039      	str	r1, [r7, #0]
 801166e:	f003 0320 	and.w	r3, r3, #32
 8011672:	607b      	str	r3, [r7, #4]
 8011674:	e9d7 1200 	ldrd	r1, r2, [r7]
 8011678:	460b      	mov	r3, r1
 801167a:	4313      	orrs	r3, r2
 801167c:	d011      	beq.n	80116a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801167e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011682:	3328      	adds	r3, #40	; 0x28
 8011684:	2102      	movs	r1, #2
 8011686:	4618      	mov	r0, r3
 8011688:	f001 fa5c 	bl	8012b44 <RCCEx_PLL3_Config>
 801168c:	4603      	mov	r3, r0
 801168e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8011692:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011696:	2b00      	cmp	r3, #0
 8011698:	d003      	beq.n	80116a2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801169a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801169e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80116a2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d101      	bne.n	80116ae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80116aa:	2300      	movs	r3, #0
 80116ac:	e000      	b.n	80116b0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80116ae:	2301      	movs	r3, #1
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80116b6:	46bd      	mov	sp, r7
 80116b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80116bc:	58024400 	.word	0x58024400

080116c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b090      	sub	sp, #64	; 0x40
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80116ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80116ce:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80116d2:	430b      	orrs	r3, r1
 80116d4:	f040 8094 	bne.w	8011800 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80116d8:	4b9e      	ldr	r3, [pc, #632]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80116da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116dc:	f003 0307 	and.w	r3, r3, #7
 80116e0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80116e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e4:	2b04      	cmp	r3, #4
 80116e6:	f200 8087 	bhi.w	80117f8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80116ea:	a201      	add	r2, pc, #4	; (adr r2, 80116f0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80116ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116f0:	08011705 	.word	0x08011705
 80116f4:	0801172d 	.word	0x0801172d
 80116f8:	08011755 	.word	0x08011755
 80116fc:	080117f1 	.word	0x080117f1
 8011700:	0801177d 	.word	0x0801177d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011704:	4b93      	ldr	r3, [pc, #588]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801170c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011710:	d108      	bne.n	8011724 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011716:	4618      	mov	r0, r3
 8011718:	f001 f810 	bl	801273c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801171c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801171e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011720:	f000 bd45 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011724:	2300      	movs	r3, #0
 8011726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011728:	f000 bd41 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801172c:	4b89      	ldr	r3, [pc, #548]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011738:	d108      	bne.n	801174c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801173a:	f107 0318 	add.w	r3, r7, #24
 801173e:	4618      	mov	r0, r3
 8011740:	f000 fd54 	bl	80121ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011744:	69bb      	ldr	r3, [r7, #24]
 8011746:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011748:	f000 bd31 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801174c:	2300      	movs	r3, #0
 801174e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011750:	f000 bd2d 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011754:	4b7f      	ldr	r3, [pc, #508]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801175c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011760:	d108      	bne.n	8011774 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011762:	f107 030c 	add.w	r3, r7, #12
 8011766:	4618      	mov	r0, r3
 8011768:	f000 fe94 	bl	8012494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011770:	f000 bd1d 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011774:	2300      	movs	r3, #0
 8011776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011778:	f000 bd19 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801177c:	4b75      	ldr	r3, [pc, #468]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801177e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011780:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011784:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011786:	4b73      	ldr	r3, [pc, #460]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	f003 0304 	and.w	r3, r3, #4
 801178e:	2b04      	cmp	r3, #4
 8011790:	d10c      	bne.n	80117ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8011792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011794:	2b00      	cmp	r3, #0
 8011796:	d109      	bne.n	80117ac <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011798:	4b6e      	ldr	r3, [pc, #440]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	08db      	lsrs	r3, r3, #3
 801179e:	f003 0303 	and.w	r3, r3, #3
 80117a2:	4a6d      	ldr	r2, [pc, #436]	; (8011958 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80117a4:	fa22 f303 	lsr.w	r3, r2, r3
 80117a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80117aa:	e01f      	b.n	80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80117ac:	4b69      	ldr	r3, [pc, #420]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80117b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80117b8:	d106      	bne.n	80117c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80117ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80117c0:	d102      	bne.n	80117c8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80117c2:	4b66      	ldr	r3, [pc, #408]	; (801195c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80117c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80117c6:	e011      	b.n	80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80117c8:	4b62      	ldr	r3, [pc, #392]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80117d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80117d4:	d106      	bne.n	80117e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80117d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80117dc:	d102      	bne.n	80117e4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80117de:	4b60      	ldr	r3, [pc, #384]	; (8011960 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80117e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80117e2:	e003      	b.n	80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80117e4:	2300      	movs	r3, #0
 80117e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80117e8:	f000 bce1 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80117ec:	f000 bcdf 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80117f0:	4b5c      	ldr	r3, [pc, #368]	; (8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80117f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117f4:	f000 bcdb 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80117f8:	2300      	movs	r3, #0
 80117fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117fc:	f000 bcd7 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8011800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011804:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8011808:	430b      	orrs	r3, r1
 801180a:	f040 80ad 	bne.w	8011968 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 801180e:	4b51      	ldr	r3, [pc, #324]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011812:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8011816:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8011818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801181a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801181e:	d056      	beq.n	80118ce <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8011820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011826:	f200 8090 	bhi.w	801194a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801182a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801182c:	2bc0      	cmp	r3, #192	; 0xc0
 801182e:	f000 8088 	beq.w	8011942 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8011832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011834:	2bc0      	cmp	r3, #192	; 0xc0
 8011836:	f200 8088 	bhi.w	801194a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801183a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801183c:	2b80      	cmp	r3, #128	; 0x80
 801183e:	d032      	beq.n	80118a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8011840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011842:	2b80      	cmp	r3, #128	; 0x80
 8011844:	f200 8081 	bhi.w	801194a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8011848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184a:	2b00      	cmp	r3, #0
 801184c:	d003      	beq.n	8011856 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 801184e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011850:	2b40      	cmp	r3, #64	; 0x40
 8011852:	d014      	beq.n	801187e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8011854:	e079      	b.n	801194a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011856:	4b3f      	ldr	r3, [pc, #252]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801185e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011862:	d108      	bne.n	8011876 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011868:	4618      	mov	r0, r3
 801186a:	f000 ff67 	bl	801273c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801186e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011870:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011872:	f000 bc9c 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011876:	2300      	movs	r3, #0
 8011878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801187a:	f000 bc98 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801187e:	4b35      	ldr	r3, [pc, #212]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801188a:	d108      	bne.n	801189e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801188c:	f107 0318 	add.w	r3, r7, #24
 8011890:	4618      	mov	r0, r3
 8011892:	f000 fcab 	bl	80121ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011896:	69bb      	ldr	r3, [r7, #24]
 8011898:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801189a:	f000 bc88 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801189e:	2300      	movs	r3, #0
 80118a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118a2:	f000 bc84 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80118a6:	4b2b      	ldr	r3, [pc, #172]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80118ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80118b2:	d108      	bne.n	80118c6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80118b4:	f107 030c 	add.w	r3, r7, #12
 80118b8:	4618      	mov	r0, r3
 80118ba:	f000 fdeb 	bl	8012494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80118c2:	f000 bc74 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80118c6:	2300      	movs	r3, #0
 80118c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118ca:	f000 bc70 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80118ce:	4b21      	ldr	r3, [pc, #132]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80118d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80118d6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80118d8:	4b1e      	ldr	r3, [pc, #120]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	f003 0304 	and.w	r3, r3, #4
 80118e0:	2b04      	cmp	r3, #4
 80118e2:	d10c      	bne.n	80118fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80118e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d109      	bne.n	80118fe <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80118ea:	4b1a      	ldr	r3, [pc, #104]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	08db      	lsrs	r3, r3, #3
 80118f0:	f003 0303 	and.w	r3, r3, #3
 80118f4:	4a18      	ldr	r2, [pc, #96]	; (8011958 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80118f6:	fa22 f303 	lsr.w	r3, r2, r3
 80118fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80118fc:	e01f      	b.n	801193e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80118fe:	4b15      	ldr	r3, [pc, #84]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801190a:	d106      	bne.n	801191a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 801190c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801190e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011912:	d102      	bne.n	801191a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011914:	4b11      	ldr	r3, [pc, #68]	; (801195c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8011916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011918:	e011      	b.n	801193e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801191a:	4b0e      	ldr	r3, [pc, #56]	; (8011954 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011926:	d106      	bne.n	8011936 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8011928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801192a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801192e:	d102      	bne.n	8011936 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011930:	4b0b      	ldr	r3, [pc, #44]	; (8011960 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8011932:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011934:	e003      	b.n	801193e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011936:	2300      	movs	r3, #0
 8011938:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801193a:	f000 bc38 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801193e:	f000 bc36 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011942:	4b08      	ldr	r3, [pc, #32]	; (8011964 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8011944:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011946:	f000 bc32 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801194a:	2300      	movs	r3, #0
 801194c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801194e:	f000 bc2e 	b.w	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011952:	bf00      	nop
 8011954:	58024400 	.word	0x58024400
 8011958:	03d09000 	.word	0x03d09000
 801195c:	003d0900 	.word	0x003d0900
 8011960:	017d7840 	.word	0x017d7840
 8011964:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8011968:	e9d7 2300 	ldrd	r2, r3, [r7]
 801196c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8011970:	430b      	orrs	r3, r1
 8011972:	f040 809c 	bne.w	8011aae <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8011976:	4b9e      	ldr	r3, [pc, #632]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801197a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801197e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8011980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011982:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011986:	d054      	beq.n	8011a32 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8011988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801198a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801198e:	f200 808b 	bhi.w	8011aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8011992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011994:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8011998:	f000 8083 	beq.w	8011aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 801199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801199e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80119a2:	f200 8081 	bhi.w	8011aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80119a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80119ac:	d02f      	beq.n	8011a0e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80119ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80119b4:	d878      	bhi.n	8011aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80119b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d004      	beq.n	80119c6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80119bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80119c2:	d012      	beq.n	80119ea <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80119c4:	e070      	b.n	8011aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80119c6:	4b8a      	ldr	r3, [pc, #552]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80119ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80119d2:	d107      	bne.n	80119e4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80119d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80119d8:	4618      	mov	r0, r3
 80119da:	f000 feaf 	bl	801273c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80119de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80119e2:	e3e4      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80119e4:	2300      	movs	r3, #0
 80119e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119e8:	e3e1      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80119ea:	4b81      	ldr	r3, [pc, #516]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80119f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80119f6:	d107      	bne.n	8011a08 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80119f8:	f107 0318 	add.w	r3, r7, #24
 80119fc:	4618      	mov	r0, r3
 80119fe:	f000 fbf5 	bl	80121ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011a02:	69bb      	ldr	r3, [r7, #24]
 8011a04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011a06:	e3d2      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011a08:	2300      	movs	r3, #0
 8011a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a0c:	e3cf      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011a0e:	4b78      	ldr	r3, [pc, #480]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011a16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011a1a:	d107      	bne.n	8011a2c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011a1c:	f107 030c 	add.w	r3, r7, #12
 8011a20:	4618      	mov	r0, r3
 8011a22:	f000 fd37 	bl	8012494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011a2a:	e3c0      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a30:	e3bd      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011a32:	4b6f      	ldr	r3, [pc, #444]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011a3a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011a3c:	4b6c      	ldr	r3, [pc, #432]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	f003 0304 	and.w	r3, r3, #4
 8011a44:	2b04      	cmp	r3, #4
 8011a46:	d10c      	bne.n	8011a62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8011a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d109      	bne.n	8011a62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011a4e:	4b68      	ldr	r3, [pc, #416]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	08db      	lsrs	r3, r3, #3
 8011a54:	f003 0303 	and.w	r3, r3, #3
 8011a58:	4a66      	ldr	r2, [pc, #408]	; (8011bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8011a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8011a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011a60:	e01e      	b.n	8011aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011a62:	4b63      	ldr	r3, [pc, #396]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a6e:	d106      	bne.n	8011a7e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8011a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011a76:	d102      	bne.n	8011a7e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011a78:	4b5f      	ldr	r3, [pc, #380]	; (8011bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8011a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011a7c:	e010      	b.n	8011aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011a7e:	4b5c      	ldr	r3, [pc, #368]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011a8a:	d106      	bne.n	8011a9a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8011a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011a92:	d102      	bne.n	8011a9a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011a94:	4b59      	ldr	r3, [pc, #356]	; (8011bfc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8011a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011a98:	e002      	b.n	8011aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8011a9e:	e386      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011aa0:	e385      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011aa2:	4b57      	ldr	r3, [pc, #348]	; (8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8011aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011aa6:	e382      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011aac:	e37f      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8011aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ab2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8011ab6:	430b      	orrs	r3, r1
 8011ab8:	f040 80a7 	bne.w	8011c0a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8011abc:	4b4c      	ldr	r3, [pc, #304]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ac0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8011ac4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8011ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011acc:	d055      	beq.n	8011b7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8011ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011ad4:	f200 8096 	bhi.w	8011c04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8011ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ada:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011ade:	f000 8084 	beq.w	8011bea <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8011ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011ae8:	f200 808c 	bhi.w	8011c04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8011aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011af2:	d030      	beq.n	8011b56 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8011af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011afa:	f200 8083 	bhi.w	8011c04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8011afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d004      	beq.n	8011b0e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8011b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011b0a:	d012      	beq.n	8011b32 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8011b0c:	e07a      	b.n	8011c04 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011b0e:	4b38      	ldr	r3, [pc, #224]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011b16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011b1a:	d107      	bne.n	8011b2c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b20:	4618      	mov	r0, r3
 8011b22:	f000 fe0b 	bl	801273c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011b2a:	e340      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b30:	e33d      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011b32:	4b2f      	ldr	r3, [pc, #188]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011b3e:	d107      	bne.n	8011b50 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011b40:	f107 0318 	add.w	r3, r7, #24
 8011b44:	4618      	mov	r0, r3
 8011b46:	f000 fb51 	bl	80121ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011b4a:	69bb      	ldr	r3, [r7, #24]
 8011b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011b4e:	e32e      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011b50:	2300      	movs	r3, #0
 8011b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b54:	e32b      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011b56:	4b26      	ldr	r3, [pc, #152]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011b62:	d107      	bne.n	8011b74 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011b64:	f107 030c 	add.w	r3, r7, #12
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f000 fc93 	bl	8012494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011b72:	e31c      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011b74:	2300      	movs	r3, #0
 8011b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b78:	e319      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011b7a:	4b1d      	ldr	r3, [pc, #116]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011b82:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011b84:	4b1a      	ldr	r3, [pc, #104]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	f003 0304 	and.w	r3, r3, #4
 8011b8c:	2b04      	cmp	r3, #4
 8011b8e:	d10c      	bne.n	8011baa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8011b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d109      	bne.n	8011baa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011b96:	4b16      	ldr	r3, [pc, #88]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	08db      	lsrs	r3, r3, #3
 8011b9c:	f003 0303 	and.w	r3, r3, #3
 8011ba0:	4a14      	ldr	r2, [pc, #80]	; (8011bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8011ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8011ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011ba8:	e01e      	b.n	8011be8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011baa:	4b11      	ldr	r3, [pc, #68]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011bb6:	d106      	bne.n	8011bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8011bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011bbe:	d102      	bne.n	8011bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011bc0:	4b0d      	ldr	r3, [pc, #52]	; (8011bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8011bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011bc4:	e010      	b.n	8011be8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011bc6:	4b0a      	ldr	r3, [pc, #40]	; (8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011bce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011bd2:	d106      	bne.n	8011be2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8011bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011bda:	d102      	bne.n	8011be2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011bdc:	4b07      	ldr	r3, [pc, #28]	; (8011bfc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8011bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011be0:	e002      	b.n	8011be8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011be2:	2300      	movs	r3, #0
 8011be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8011be6:	e2e2      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011be8:	e2e1      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011bea:	4b05      	ldr	r3, [pc, #20]	; (8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8011bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011bee:	e2de      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011bf0:	58024400 	.word	0x58024400
 8011bf4:	03d09000 	.word	0x03d09000
 8011bf8:	003d0900 	.word	0x003d0900
 8011bfc:	017d7840 	.word	0x017d7840
 8011c00:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8011c04:	2300      	movs	r3, #0
 8011c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c08:	e2d1      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8011c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011c0e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8011c12:	430b      	orrs	r3, r1
 8011c14:	f040 809c 	bne.w	8011d50 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8011c18:	4b93      	ldr	r3, [pc, #588]	; (8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c1c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8011c20:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8011c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011c28:	d054      	beq.n	8011cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8011c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011c30:	f200 808b 	bhi.w	8011d4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8011c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011c3a:	f000 8083 	beq.w	8011d44 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8011c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011c44:	f200 8081 	bhi.w	8011d4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8011c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011c4e:	d02f      	beq.n	8011cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8011c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011c56:	d878      	bhi.n	8011d4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8011c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d004      	beq.n	8011c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8011c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011c64:	d012      	beq.n	8011c8c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8011c66:	e070      	b.n	8011d4a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011c68:	4b7f      	ldr	r3, [pc, #508]	; (8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011c70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011c74:	d107      	bne.n	8011c86 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f000 fd5e 	bl	801273c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011c84:	e293      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011c86:	2300      	movs	r3, #0
 8011c88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c8a:	e290      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011c8c:	4b76      	ldr	r3, [pc, #472]	; (8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011c98:	d107      	bne.n	8011caa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011c9a:	f107 0318 	add.w	r3, r7, #24
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f000 faa4 	bl	80121ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011ca4:	69bb      	ldr	r3, [r7, #24]
 8011ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011ca8:	e281      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011caa:	2300      	movs	r3, #0
 8011cac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011cae:	e27e      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011cb0:	4b6d      	ldr	r3, [pc, #436]	; (8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011cbc:	d107      	bne.n	8011cce <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011cbe:	f107 030c 	add.w	r3, r7, #12
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f000 fbe6 	bl	8012494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011ccc:	e26f      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011cd2:	e26c      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011cd4:	4b64      	ldr	r3, [pc, #400]	; (8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011cdc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011cde:	4b62      	ldr	r3, [pc, #392]	; (8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	f003 0304 	and.w	r3, r3, #4
 8011ce6:	2b04      	cmp	r3, #4
 8011ce8:	d10c      	bne.n	8011d04 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8011cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d109      	bne.n	8011d04 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011cf0:	4b5d      	ldr	r3, [pc, #372]	; (8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	08db      	lsrs	r3, r3, #3
 8011cf6:	f003 0303 	and.w	r3, r3, #3
 8011cfa:	4a5c      	ldr	r2, [pc, #368]	; (8011e6c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8011cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8011d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d02:	e01e      	b.n	8011d42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011d04:	4b58      	ldr	r3, [pc, #352]	; (8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d10:	d106      	bne.n	8011d20 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8011d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011d18:	d102      	bne.n	8011d20 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011d1a:	4b55      	ldr	r3, [pc, #340]	; (8011e70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8011d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d1e:	e010      	b.n	8011d42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011d20:	4b51      	ldr	r3, [pc, #324]	; (8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011d2c:	d106      	bne.n	8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8011d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011d34:	d102      	bne.n	8011d3c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011d36:	4b4f      	ldr	r3, [pc, #316]	; (8011e74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8011d38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d3a:	e002      	b.n	8011d42 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8011d40:	e235      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011d42:	e234      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011d44:	4b4c      	ldr	r3, [pc, #304]	; (8011e78 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8011d46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d48:	e231      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d4e:	e22e      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8011d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011d54:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8011d58:	430b      	orrs	r3, r1
 8011d5a:	f040 808f 	bne.w	8011e7c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8011d5e:	4b42      	ldr	r3, [pc, #264]	; (8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d62:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8011d66:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8011d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011d6e:	d06b      	beq.n	8011e48 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8011d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011d76:	d874      	bhi.n	8011e62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011d7e:	d056      	beq.n	8011e2e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8011d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011d86:	d86c      	bhi.n	8011e62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011d8e:	d03b      	beq.n	8011e08 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8011d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011d96:	d864      	bhi.n	8011e62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011d9e:	d021      	beq.n	8011de4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8011da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011da6:	d85c      	bhi.n	8011e62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d004      	beq.n	8011db8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8011dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011db4:	d004      	beq.n	8011dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8011db6:	e054      	b.n	8011e62 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8011db8:	f7fe fa0a 	bl	80101d0 <HAL_RCC_GetPCLK1Freq>
 8011dbc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011dbe:	e1f6      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011dc0:	4b29      	ldr	r3, [pc, #164]	; (8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011dcc:	d107      	bne.n	8011dde <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011dce:	f107 0318 	add.w	r3, r7, #24
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f000 fa0a 	bl	80121ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011dd8:	69fb      	ldr	r3, [r7, #28]
 8011dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011ddc:	e1e7      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011dde:	2300      	movs	r3, #0
 8011de0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011de2:	e1e4      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011de4:	4b20      	ldr	r3, [pc, #128]	; (8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011df0:	d107      	bne.n	8011e02 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011df2:	f107 030c 	add.w	r3, r7, #12
 8011df6:	4618      	mov	r0, r3
 8011df8:	f000 fb4c 	bl	8012494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011dfc:	693b      	ldr	r3, [r7, #16]
 8011dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e00:	e1d5      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011e02:	2300      	movs	r3, #0
 8011e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e06:	e1d2      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011e08:	4b17      	ldr	r3, [pc, #92]	; (8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	f003 0304 	and.w	r3, r3, #4
 8011e10:	2b04      	cmp	r3, #4
 8011e12:	d109      	bne.n	8011e28 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011e14:	4b14      	ldr	r3, [pc, #80]	; (8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	08db      	lsrs	r3, r3, #3
 8011e1a:	f003 0303 	and.w	r3, r3, #3
 8011e1e:	4a13      	ldr	r2, [pc, #76]	; (8011e6c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8011e20:	fa22 f303 	lsr.w	r3, r2, r3
 8011e24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e26:	e1c2      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011e28:	2300      	movs	r3, #0
 8011e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e2c:	e1bf      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8011e2e:	4b0e      	ldr	r3, [pc, #56]	; (8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e3a:	d102      	bne.n	8011e42 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8011e3c:	4b0c      	ldr	r3, [pc, #48]	; (8011e70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8011e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e40:	e1b5      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011e42:	2300      	movs	r3, #0
 8011e44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e46:	e1b2      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011e48:	4b07      	ldr	r3, [pc, #28]	; (8011e68 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011e50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011e54:	d102      	bne.n	8011e5c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8011e56:	4b07      	ldr	r3, [pc, #28]	; (8011e74 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8011e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e5a:	e1a8      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e60:	e1a5      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011e62:	2300      	movs	r3, #0
 8011e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e66:	e1a2      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011e68:	58024400 	.word	0x58024400
 8011e6c:	03d09000 	.word	0x03d09000
 8011e70:	003d0900 	.word	0x003d0900
 8011e74:	017d7840 	.word	0x017d7840
 8011e78:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8011e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e80:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8011e84:	430b      	orrs	r3, r1
 8011e86:	d173      	bne.n	8011f70 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8011e88:	4b9c      	ldr	r3, [pc, #624]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011e90:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8011e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011e98:	d02f      	beq.n	8011efa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8011e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011ea0:	d863      	bhi.n	8011f6a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8011ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d004      	beq.n	8011eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8011ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011eae:	d012      	beq.n	8011ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8011eb0:	e05b      	b.n	8011f6a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011eb2:	4b92      	ldr	r3, [pc, #584]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011eba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011ebe:	d107      	bne.n	8011ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011ec0:	f107 0318 	add.w	r3, r7, #24
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f000 f991 	bl	80121ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011eca:	69bb      	ldr	r3, [r7, #24]
 8011ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011ece:	e16e      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ed4:	e16b      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011ed6:	4b89      	ldr	r3, [pc, #548]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011ee2:	d107      	bne.n	8011ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011ee4:	f107 030c 	add.w	r3, r7, #12
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f000 fad3 	bl	8012494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011ef2:	e15c      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ef8:	e159      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011efa:	4b80      	ldr	r3, [pc, #512]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011efe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011f02:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011f04:	4b7d      	ldr	r3, [pc, #500]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	f003 0304 	and.w	r3, r3, #4
 8011f0c:	2b04      	cmp	r3, #4
 8011f0e:	d10c      	bne.n	8011f2a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8011f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d109      	bne.n	8011f2a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011f16:	4b79      	ldr	r3, [pc, #484]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	08db      	lsrs	r3, r3, #3
 8011f1c:	f003 0303 	and.w	r3, r3, #3
 8011f20:	4a77      	ldr	r2, [pc, #476]	; (8012100 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8011f22:	fa22 f303 	lsr.w	r3, r2, r3
 8011f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f28:	e01e      	b.n	8011f68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011f2a:	4b74      	ldr	r3, [pc, #464]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f36:	d106      	bne.n	8011f46 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8011f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011f3e:	d102      	bne.n	8011f46 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011f40:	4b70      	ldr	r3, [pc, #448]	; (8012104 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8011f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f44:	e010      	b.n	8011f68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011f46:	4b6d      	ldr	r3, [pc, #436]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011f52:	d106      	bne.n	8011f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8011f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011f5a:	d102      	bne.n	8011f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011f5c:	4b6a      	ldr	r3, [pc, #424]	; (8012108 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8011f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011f60:	e002      	b.n	8011f68 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011f62:	2300      	movs	r3, #0
 8011f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8011f66:	e122      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011f68:	e121      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f6e:	e11e      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8011f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f74:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8011f78:	430b      	orrs	r3, r1
 8011f7a:	d133      	bne.n	8011fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8011f7c:	4b5f      	ldr	r3, [pc, #380]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011f84:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8011f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d004      	beq.n	8011f96 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8011f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011f92:	d012      	beq.n	8011fba <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8011f94:	e023      	b.n	8011fde <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011f96:	4b59      	ldr	r3, [pc, #356]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011f9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011fa2:	d107      	bne.n	8011fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f000 fbc7 	bl	801273c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011fb2:	e0fc      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011fb8:	e0f9      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011fba:	4b50      	ldr	r3, [pc, #320]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011fc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011fc6:	d107      	bne.n	8011fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011fc8:	f107 0318 	add.w	r3, r7, #24
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f000 f90d 	bl	80121ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8011fd2:	6a3b      	ldr	r3, [r7, #32]
 8011fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011fd6:	e0ea      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011fdc:	e0e7      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011fde:	2300      	movs	r3, #0
 8011fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011fe2:	e0e4      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8011fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011fe8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8011fec:	430b      	orrs	r3, r1
 8011fee:	f040 808d 	bne.w	801210c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8011ff2:	4b42      	ldr	r3, [pc, #264]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ff6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8011ffa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8011ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012002:	d06b      	beq.n	80120dc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8012004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012006:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801200a:	d874      	bhi.n	80120f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801200c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801200e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012012:	d056      	beq.n	80120c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8012014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801201a:	d86c      	bhi.n	80120f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8012022:	d03b      	beq.n	801209c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8012024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012026:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801202a:	d864      	bhi.n	80120f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801202c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801202e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012032:	d021      	beq.n	8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8012034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801203a:	d85c      	bhi.n	80120f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801203c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801203e:	2b00      	cmp	r3, #0
 8012040:	d004      	beq.n	801204c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8012042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012044:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012048:	d004      	beq.n	8012054 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 801204a:	e054      	b.n	80120f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801204c:	f000 f8b8 	bl	80121c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8012050:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012052:	e0ac      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012054:	4b29      	ldr	r3, [pc, #164]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801205c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012060:	d107      	bne.n	8012072 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012062:	f107 0318 	add.w	r3, r7, #24
 8012066:	4618      	mov	r0, r3
 8012068:	f000 f8c0 	bl	80121ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801206c:	69fb      	ldr	r3, [r7, #28]
 801206e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012070:	e09d      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012072:	2300      	movs	r3, #0
 8012074:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012076:	e09a      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012078:	4b20      	ldr	r3, [pc, #128]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012084:	d107      	bne.n	8012096 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012086:	f107 030c 	add.w	r3, r7, #12
 801208a:	4618      	mov	r0, r3
 801208c:	f000 fa02 	bl	8012494 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012090:	693b      	ldr	r3, [r7, #16]
 8012092:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012094:	e08b      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012096:	2300      	movs	r3, #0
 8012098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801209a:	e088      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801209c:	4b17      	ldr	r3, [pc, #92]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	f003 0304 	and.w	r3, r3, #4
 80120a4:	2b04      	cmp	r3, #4
 80120a6:	d109      	bne.n	80120bc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80120a8:	4b14      	ldr	r3, [pc, #80]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	08db      	lsrs	r3, r3, #3
 80120ae:	f003 0303 	and.w	r3, r3, #3
 80120b2:	4a13      	ldr	r2, [pc, #76]	; (8012100 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80120b4:	fa22 f303 	lsr.w	r3, r2, r3
 80120b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80120ba:	e078      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80120bc:	2300      	movs	r3, #0
 80120be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80120c0:	e075      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80120c2:	4b0e      	ldr	r3, [pc, #56]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80120ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120ce:	d102      	bne.n	80120d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80120d0:	4b0c      	ldr	r3, [pc, #48]	; (8012104 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80120d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80120d4:	e06b      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80120d6:	2300      	movs	r3, #0
 80120d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80120da:	e068      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80120dc:	4b07      	ldr	r3, [pc, #28]	; (80120fc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80120e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80120e8:	d102      	bne.n	80120f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80120ea:	4b07      	ldr	r3, [pc, #28]	; (8012108 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80120ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80120ee:	e05e      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80120f0:	2300      	movs	r3, #0
 80120f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80120f4:	e05b      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80120f6:	2300      	movs	r3, #0
 80120f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80120fa:	e058      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80120fc:	58024400 	.word	0x58024400
 8012100:	03d09000 	.word	0x03d09000
 8012104:	003d0900 	.word	0x003d0900
 8012108:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801210c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012110:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8012114:	430b      	orrs	r3, r1
 8012116:	d148      	bne.n	80121aa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8012118:	4b27      	ldr	r3, [pc, #156]	; (80121b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801211a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801211c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8012120:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8012122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012128:	d02a      	beq.n	8012180 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 801212a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801212c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012130:	d838      	bhi.n	80121a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8012132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012134:	2b00      	cmp	r3, #0
 8012136:	d004      	beq.n	8012142 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8012138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801213a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801213e:	d00d      	beq.n	801215c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8012140:	e030      	b.n	80121a4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012142:	4b1d      	ldr	r3, [pc, #116]	; (80121b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801214a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801214e:	d102      	bne.n	8012156 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8012150:	4b1a      	ldr	r3, [pc, #104]	; (80121bc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8012152:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012154:	e02b      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012156:	2300      	movs	r3, #0
 8012158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801215a:	e028      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801215c:	4b16      	ldr	r3, [pc, #88]	; (80121b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012164:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012168:	d107      	bne.n	801217a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801216a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801216e:	4618      	mov	r0, r3
 8012170:	f000 fae4 	bl	801273c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012176:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012178:	e019      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801217a:	2300      	movs	r3, #0
 801217c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801217e:	e016      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012180:	4b0d      	ldr	r3, [pc, #52]	; (80121b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012188:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801218c:	d107      	bne.n	801219e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801218e:	f107 0318 	add.w	r3, r7, #24
 8012192:	4618      	mov	r0, r3
 8012194:	f000 f82a 	bl	80121ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012198:	69fb      	ldr	r3, [r7, #28]
 801219a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801219c:	e007      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801219e:	2300      	movs	r3, #0
 80121a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80121a2:	e004      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80121a4:	2300      	movs	r3, #0
 80121a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80121a8:	e001      	b.n	80121ae <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80121aa:	2300      	movs	r3, #0
 80121ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80121ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3740      	adds	r7, #64	; 0x40
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	58024400 	.word	0x58024400
 80121bc:	017d7840 	.word	0x017d7840

080121c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80121c4:	f7fd ffd4 	bl	8010170 <HAL_RCC_GetHCLKFreq>
 80121c8:	4602      	mov	r2, r0
 80121ca:	4b06      	ldr	r3, [pc, #24]	; (80121e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80121cc:	6a1b      	ldr	r3, [r3, #32]
 80121ce:	091b      	lsrs	r3, r3, #4
 80121d0:	f003 0307 	and.w	r3, r3, #7
 80121d4:	4904      	ldr	r1, [pc, #16]	; (80121e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80121d6:	5ccb      	ldrb	r3, [r1, r3]
 80121d8:	f003 031f 	and.w	r3, r3, #31
 80121dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80121e0:	4618      	mov	r0, r3
 80121e2:	bd80      	pop	{r7, pc}
 80121e4:	58024400 	.word	0x58024400
 80121e8:	0801c4c4 	.word	0x0801c4c4

080121ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80121ec:	b480      	push	{r7}
 80121ee:	b089      	sub	sp, #36	; 0x24
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80121f4:	4ba1      	ldr	r3, [pc, #644]	; (801247c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80121f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121f8:	f003 0303 	and.w	r3, r3, #3
 80121fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80121fe:	4b9f      	ldr	r3, [pc, #636]	; (801247c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012202:	0b1b      	lsrs	r3, r3, #12
 8012204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012208:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801220a:	4b9c      	ldr	r3, [pc, #624]	; (801247c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801220e:	091b      	lsrs	r3, r3, #4
 8012210:	f003 0301 	and.w	r3, r3, #1
 8012214:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8012216:	4b99      	ldr	r3, [pc, #612]	; (801247c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801221a:	08db      	lsrs	r3, r3, #3
 801221c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012220:	693a      	ldr	r2, [r7, #16]
 8012222:	fb02 f303 	mul.w	r3, r2, r3
 8012226:	ee07 3a90 	vmov	s15, r3
 801222a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801222e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8012232:	697b      	ldr	r3, [r7, #20]
 8012234:	2b00      	cmp	r3, #0
 8012236:	f000 8111 	beq.w	801245c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801223a:	69bb      	ldr	r3, [r7, #24]
 801223c:	2b02      	cmp	r3, #2
 801223e:	f000 8083 	beq.w	8012348 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8012242:	69bb      	ldr	r3, [r7, #24]
 8012244:	2b02      	cmp	r3, #2
 8012246:	f200 80a1 	bhi.w	801238c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801224a:	69bb      	ldr	r3, [r7, #24]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d003      	beq.n	8012258 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8012250:	69bb      	ldr	r3, [r7, #24]
 8012252:	2b01      	cmp	r3, #1
 8012254:	d056      	beq.n	8012304 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8012256:	e099      	b.n	801238c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012258:	4b88      	ldr	r3, [pc, #544]	; (801247c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f003 0320 	and.w	r3, r3, #32
 8012260:	2b00      	cmp	r3, #0
 8012262:	d02d      	beq.n	80122c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012264:	4b85      	ldr	r3, [pc, #532]	; (801247c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	08db      	lsrs	r3, r3, #3
 801226a:	f003 0303 	and.w	r3, r3, #3
 801226e:	4a84      	ldr	r2, [pc, #528]	; (8012480 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8012270:	fa22 f303 	lsr.w	r3, r2, r3
 8012274:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	ee07 3a90 	vmov	s15, r3
 801227c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012280:	697b      	ldr	r3, [r7, #20]
 8012282:	ee07 3a90 	vmov	s15, r3
 8012286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801228a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801228e:	4b7b      	ldr	r3, [pc, #492]	; (801247c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012296:	ee07 3a90 	vmov	s15, r3
 801229a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801229e:	ed97 6a03 	vldr	s12, [r7, #12]
 80122a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8012484 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80122a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80122aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80122ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80122b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80122b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80122be:	e087      	b.n	80123d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	ee07 3a90 	vmov	s15, r3
 80122c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012488 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80122ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80122d2:	4b6a      	ldr	r3, [pc, #424]	; (801247c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80122d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122da:	ee07 3a90 	vmov	s15, r3
 80122de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80122e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80122e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8012484 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80122ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80122ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80122f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80122f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80122fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012302:	e065      	b.n	80123d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012304:	697b      	ldr	r3, [r7, #20]
 8012306:	ee07 3a90 	vmov	s15, r3
 801230a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801230e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801248c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8012312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012316:	4b59      	ldr	r3, [pc, #356]	; (801247c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801231a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801231e:	ee07 3a90 	vmov	s15, r3
 8012322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012326:	ed97 6a03 	vldr	s12, [r7, #12]
 801232a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8012484 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801232e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801233a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801233e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012346:	e043      	b.n	80123d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	ee07 3a90 	vmov	s15, r3
 801234e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012352:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8012356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801235a:	4b48      	ldr	r3, [pc, #288]	; (801247c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801235c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801235e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012362:	ee07 3a90 	vmov	s15, r3
 8012366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801236a:	ed97 6a03 	vldr	s12, [r7, #12]
 801236e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8012484 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801237a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801237e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801238a:	e021      	b.n	80123d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801238c:	697b      	ldr	r3, [r7, #20]
 801238e:	ee07 3a90 	vmov	s15, r3
 8012392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012396:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801248c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801239a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801239e:	4b37      	ldr	r3, [pc, #220]	; (801247c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80123a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123a6:	ee07 3a90 	vmov	s15, r3
 80123aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80123ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80123b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8012484 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80123b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80123ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80123be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80123c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80123c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80123ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80123d0:	4b2a      	ldr	r3, [pc, #168]	; (801247c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80123d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123d4:	0a5b      	lsrs	r3, r3, #9
 80123d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80123da:	ee07 3a90 	vmov	s15, r3
 80123de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80123e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80123e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80123ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80123ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80123f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80123f6:	ee17 2a90 	vmov	r2, s15
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80123fe:	4b1f      	ldr	r3, [pc, #124]	; (801247c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012402:	0c1b      	lsrs	r3, r3, #16
 8012404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012408:	ee07 3a90 	vmov	s15, r3
 801240c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012414:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012418:	edd7 6a07 	vldr	s13, [r7, #28]
 801241c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012424:	ee17 2a90 	vmov	r2, s15
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801242c:	4b13      	ldr	r3, [pc, #76]	; (801247c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012430:	0e1b      	lsrs	r3, r3, #24
 8012432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012436:	ee07 3a90 	vmov	s15, r3
 801243a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801243e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012442:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012446:	edd7 6a07 	vldr	s13, [r7, #28]
 801244a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801244e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012452:	ee17 2a90 	vmov	r2, s15
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801245a:	e008      	b.n	801246e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2200      	movs	r2, #0
 8012460:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	2200      	movs	r2, #0
 8012466:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2200      	movs	r2, #0
 801246c:	609a      	str	r2, [r3, #8]
}
 801246e:	bf00      	nop
 8012470:	3724      	adds	r7, #36	; 0x24
 8012472:	46bd      	mov	sp, r7
 8012474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012478:	4770      	bx	lr
 801247a:	bf00      	nop
 801247c:	58024400 	.word	0x58024400
 8012480:	03d09000 	.word	0x03d09000
 8012484:	46000000 	.word	0x46000000
 8012488:	4c742400 	.word	0x4c742400
 801248c:	4a742400 	.word	0x4a742400
 8012490:	4bbebc20 	.word	0x4bbebc20

08012494 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8012494:	b480      	push	{r7}
 8012496:	b089      	sub	sp, #36	; 0x24
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801249c:	4ba1      	ldr	r3, [pc, #644]	; (8012724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124a0:	f003 0303 	and.w	r3, r3, #3
 80124a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80124a6:	4b9f      	ldr	r3, [pc, #636]	; (8012724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80124a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124aa:	0d1b      	lsrs	r3, r3, #20
 80124ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80124b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80124b2:	4b9c      	ldr	r3, [pc, #624]	; (8012724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80124b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124b6:	0a1b      	lsrs	r3, r3, #8
 80124b8:	f003 0301 	and.w	r3, r3, #1
 80124bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80124be:	4b99      	ldr	r3, [pc, #612]	; (8012724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80124c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80124c2:	08db      	lsrs	r3, r3, #3
 80124c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80124c8:	693a      	ldr	r2, [r7, #16]
 80124ca:	fb02 f303 	mul.w	r3, r2, r3
 80124ce:	ee07 3a90 	vmov	s15, r3
 80124d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	f000 8111 	beq.w	8012704 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80124e2:	69bb      	ldr	r3, [r7, #24]
 80124e4:	2b02      	cmp	r3, #2
 80124e6:	f000 8083 	beq.w	80125f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80124ea:	69bb      	ldr	r3, [r7, #24]
 80124ec:	2b02      	cmp	r3, #2
 80124ee:	f200 80a1 	bhi.w	8012634 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80124f2:	69bb      	ldr	r3, [r7, #24]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d003      	beq.n	8012500 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80124f8:	69bb      	ldr	r3, [r7, #24]
 80124fa:	2b01      	cmp	r3, #1
 80124fc:	d056      	beq.n	80125ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80124fe:	e099      	b.n	8012634 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012500:	4b88      	ldr	r3, [pc, #544]	; (8012724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	f003 0320 	and.w	r3, r3, #32
 8012508:	2b00      	cmp	r3, #0
 801250a:	d02d      	beq.n	8012568 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801250c:	4b85      	ldr	r3, [pc, #532]	; (8012724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	08db      	lsrs	r3, r3, #3
 8012512:	f003 0303 	and.w	r3, r3, #3
 8012516:	4a84      	ldr	r2, [pc, #528]	; (8012728 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8012518:	fa22 f303 	lsr.w	r3, r2, r3
 801251c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	ee07 3a90 	vmov	s15, r3
 8012524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012528:	697b      	ldr	r3, [r7, #20]
 801252a:	ee07 3a90 	vmov	s15, r3
 801252e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012536:	4b7b      	ldr	r3, [pc, #492]	; (8012724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801253a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801253e:	ee07 3a90 	vmov	s15, r3
 8012542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012546:	ed97 6a03 	vldr	s12, [r7, #12]
 801254a:	eddf 5a78 	vldr	s11, [pc, #480]	; 801272c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801254e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801255a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801255e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012562:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8012566:	e087      	b.n	8012678 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012568:	697b      	ldr	r3, [r7, #20]
 801256a:	ee07 3a90 	vmov	s15, r3
 801256e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012572:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012730 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8012576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801257a:	4b6a      	ldr	r3, [pc, #424]	; (8012724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801257e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012582:	ee07 3a90 	vmov	s15, r3
 8012586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801258a:	ed97 6a03 	vldr	s12, [r7, #12]
 801258e:	eddf 5a67 	vldr	s11, [pc, #412]	; 801272c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801259a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801259e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80125a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80125a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80125aa:	e065      	b.n	8012678 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	ee07 3a90 	vmov	s15, r3
 80125b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80125b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012734 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80125ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80125be:	4b59      	ldr	r3, [pc, #356]	; (8012724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80125c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125c6:	ee07 3a90 	vmov	s15, r3
 80125ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80125ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80125d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 801272c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80125d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80125da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80125de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80125e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80125e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80125ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80125ee:	e043      	b.n	8012678 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	ee07 3a90 	vmov	s15, r3
 80125f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80125fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012738 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80125fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012602:	4b48      	ldr	r3, [pc, #288]	; (8012724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801260a:	ee07 3a90 	vmov	s15, r3
 801260e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012612:	ed97 6a03 	vldr	s12, [r7, #12]
 8012616:	eddf 5a45 	vldr	s11, [pc, #276]	; 801272c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801261a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801261e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801262a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801262e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012632:	e021      	b.n	8012678 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012634:	697b      	ldr	r3, [r7, #20]
 8012636:	ee07 3a90 	vmov	s15, r3
 801263a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801263e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012734 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8012642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012646:	4b37      	ldr	r3, [pc, #220]	; (8012724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801264a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801264e:	ee07 3a90 	vmov	s15, r3
 8012652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012656:	ed97 6a03 	vldr	s12, [r7, #12]
 801265a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801272c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801265e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801266a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801266e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012676:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8012678:	4b2a      	ldr	r3, [pc, #168]	; (8012724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801267c:	0a5b      	lsrs	r3, r3, #9
 801267e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012682:	ee07 3a90 	vmov	s15, r3
 8012686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801268a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801268e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012692:	edd7 6a07 	vldr	s13, [r7, #28]
 8012696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801269a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801269e:	ee17 2a90 	vmov	r2, s15
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80126a6:	4b1f      	ldr	r3, [pc, #124]	; (8012724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80126a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126aa:	0c1b      	lsrs	r3, r3, #16
 80126ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80126b0:	ee07 3a90 	vmov	s15, r3
 80126b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80126bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80126c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80126c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80126c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80126cc:	ee17 2a90 	vmov	r2, s15
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80126d4:	4b13      	ldr	r3, [pc, #76]	; (8012724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80126d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126d8:	0e1b      	lsrs	r3, r3, #24
 80126da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80126de:	ee07 3a90 	vmov	s15, r3
 80126e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80126ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80126ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80126f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80126f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80126fa:	ee17 2a90 	vmov	r2, s15
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8012702:	e008      	b.n	8012716 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	2200      	movs	r2, #0
 8012708:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2200      	movs	r2, #0
 801270e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2200      	movs	r2, #0
 8012714:	609a      	str	r2, [r3, #8]
}
 8012716:	bf00      	nop
 8012718:	3724      	adds	r7, #36	; 0x24
 801271a:	46bd      	mov	sp, r7
 801271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012720:	4770      	bx	lr
 8012722:	bf00      	nop
 8012724:	58024400 	.word	0x58024400
 8012728:	03d09000 	.word	0x03d09000
 801272c:	46000000 	.word	0x46000000
 8012730:	4c742400 	.word	0x4c742400
 8012734:	4a742400 	.word	0x4a742400
 8012738:	4bbebc20 	.word	0x4bbebc20

0801273c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801273c:	b480      	push	{r7}
 801273e:	b089      	sub	sp, #36	; 0x24
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012744:	4ba0      	ldr	r3, [pc, #640]	; (80129c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012748:	f003 0303 	and.w	r3, r3, #3
 801274c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801274e:	4b9e      	ldr	r3, [pc, #632]	; (80129c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012752:	091b      	lsrs	r3, r3, #4
 8012754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012758:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801275a:	4b9b      	ldr	r3, [pc, #620]	; (80129c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801275e:	f003 0301 	and.w	r3, r3, #1
 8012762:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8012764:	4b98      	ldr	r3, [pc, #608]	; (80129c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012768:	08db      	lsrs	r3, r3, #3
 801276a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801276e:	693a      	ldr	r2, [r7, #16]
 8012770:	fb02 f303 	mul.w	r3, r2, r3
 8012774:	ee07 3a90 	vmov	s15, r3
 8012778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801277c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	2b00      	cmp	r3, #0
 8012784:	f000 8111 	beq.w	80129aa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8012788:	69bb      	ldr	r3, [r7, #24]
 801278a:	2b02      	cmp	r3, #2
 801278c:	f000 8083 	beq.w	8012896 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8012790:	69bb      	ldr	r3, [r7, #24]
 8012792:	2b02      	cmp	r3, #2
 8012794:	f200 80a1 	bhi.w	80128da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8012798:	69bb      	ldr	r3, [r7, #24]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d003      	beq.n	80127a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801279e:	69bb      	ldr	r3, [r7, #24]
 80127a0:	2b01      	cmp	r3, #1
 80127a2:	d056      	beq.n	8012852 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80127a4:	e099      	b.n	80128da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80127a6:	4b88      	ldr	r3, [pc, #544]	; (80129c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	f003 0320 	and.w	r3, r3, #32
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d02d      	beq.n	801280e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80127b2:	4b85      	ldr	r3, [pc, #532]	; (80129c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	08db      	lsrs	r3, r3, #3
 80127b8:	f003 0303 	and.w	r3, r3, #3
 80127bc:	4a83      	ldr	r2, [pc, #524]	; (80129cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80127be:	fa22 f303 	lsr.w	r3, r2, r3
 80127c2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	ee07 3a90 	vmov	s15, r3
 80127ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	ee07 3a90 	vmov	s15, r3
 80127d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80127dc:	4b7a      	ldr	r3, [pc, #488]	; (80129c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80127de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80127e4:	ee07 3a90 	vmov	s15, r3
 80127e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80127ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80127f0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80129d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80127f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80127f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80127fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012808:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801280c:	e087      	b.n	801291e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	ee07 3a90 	vmov	s15, r3
 8012814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012818:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80129d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801281c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012820:	4b69      	ldr	r3, [pc, #420]	; (80129c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012828:	ee07 3a90 	vmov	s15, r3
 801282c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012830:	ed97 6a03 	vldr	s12, [r7, #12]
 8012834:	eddf 5a66 	vldr	s11, [pc, #408]	; 80129d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012838:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801283c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012840:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012844:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012848:	ee67 7a27 	vmul.f32	s15, s14, s15
 801284c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012850:	e065      	b.n	801291e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012852:	697b      	ldr	r3, [r7, #20]
 8012854:	ee07 3a90 	vmov	s15, r3
 8012858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801285c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80129d8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8012860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012864:	4b58      	ldr	r3, [pc, #352]	; (80129c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801286c:	ee07 3a90 	vmov	s15, r3
 8012870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012874:	ed97 6a03 	vldr	s12, [r7, #12]
 8012878:	eddf 5a55 	vldr	s11, [pc, #340]	; 80129d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801287c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012880:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012884:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801288c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012890:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012894:	e043      	b.n	801291e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012896:	697b      	ldr	r3, [r7, #20]
 8012898:	ee07 3a90 	vmov	s15, r3
 801289c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80128a0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80129dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80128a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80128a8:	4b47      	ldr	r3, [pc, #284]	; (80129c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80128aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128b0:	ee07 3a90 	vmov	s15, r3
 80128b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80128b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80128bc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80129d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80128c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80128c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80128c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80128cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80128d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80128d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80128d8:	e021      	b.n	801291e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	ee07 3a90 	vmov	s15, r3
 80128e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80128e4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80129d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80128e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80128ec:	4b36      	ldr	r3, [pc, #216]	; (80129c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80128ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128f4:	ee07 3a90 	vmov	s15, r3
 80128f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80128fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8012900:	eddf 5a33 	vldr	s11, [pc, #204]	; 80129d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012904:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012908:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801290c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012918:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801291c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801291e:	4b2a      	ldr	r3, [pc, #168]	; (80129c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012922:	0a5b      	lsrs	r3, r3, #9
 8012924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012928:	ee07 3a90 	vmov	s15, r3
 801292c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012934:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012938:	edd7 6a07 	vldr	s13, [r7, #28]
 801293c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012944:	ee17 2a90 	vmov	r2, s15
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801294c:	4b1e      	ldr	r3, [pc, #120]	; (80129c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012950:	0c1b      	lsrs	r3, r3, #16
 8012952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012956:	ee07 3a90 	vmov	s15, r3
 801295a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801295e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012962:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012966:	edd7 6a07 	vldr	s13, [r7, #28]
 801296a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801296e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012972:	ee17 2a90 	vmov	r2, s15
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801297a:	4b13      	ldr	r3, [pc, #76]	; (80129c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801297e:	0e1b      	lsrs	r3, r3, #24
 8012980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012984:	ee07 3a90 	vmov	s15, r3
 8012988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801298c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012990:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012994:	edd7 6a07 	vldr	s13, [r7, #28]
 8012998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801299c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80129a0:	ee17 2a90 	vmov	r2, s15
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80129a8:	e008      	b.n	80129bc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	2200      	movs	r2, #0
 80129ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2200      	movs	r2, #0
 80129b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	2200      	movs	r2, #0
 80129ba:	609a      	str	r2, [r3, #8]
}
 80129bc:	bf00      	nop
 80129be:	3724      	adds	r7, #36	; 0x24
 80129c0:	46bd      	mov	sp, r7
 80129c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c6:	4770      	bx	lr
 80129c8:	58024400 	.word	0x58024400
 80129cc:	03d09000 	.word	0x03d09000
 80129d0:	46000000 	.word	0x46000000
 80129d4:	4c742400 	.word	0x4c742400
 80129d8:	4a742400 	.word	0x4a742400
 80129dc:	4bbebc20 	.word	0x4bbebc20

080129e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b084      	sub	sp, #16
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80129ea:	2300      	movs	r3, #0
 80129ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80129ee:	4b53      	ldr	r3, [pc, #332]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 80129f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129f2:	f003 0303 	and.w	r3, r3, #3
 80129f6:	2b03      	cmp	r3, #3
 80129f8:	d101      	bne.n	80129fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80129fa:	2301      	movs	r3, #1
 80129fc:	e099      	b.n	8012b32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80129fe:	4b4f      	ldr	r3, [pc, #316]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	4a4e      	ldr	r2, [pc, #312]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012a04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012a0a:	f7f4 f8b1 	bl	8006b70 <HAL_GetTick>
 8012a0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012a10:	e008      	b.n	8012a24 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8012a12:	f7f4 f8ad 	bl	8006b70 <HAL_GetTick>
 8012a16:	4602      	mov	r2, r0
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	1ad3      	subs	r3, r2, r3
 8012a1c:	2b02      	cmp	r3, #2
 8012a1e:	d901      	bls.n	8012a24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012a20:	2303      	movs	r3, #3
 8012a22:	e086      	b.n	8012b32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012a24:	4b45      	ldr	r3, [pc, #276]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d1f0      	bne.n	8012a12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8012a30:	4b42      	ldr	r3, [pc, #264]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	031b      	lsls	r3, r3, #12
 8012a3e:	493f      	ldr	r1, [pc, #252]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012a40:	4313      	orrs	r3, r2
 8012a42:	628b      	str	r3, [r1, #40]	; 0x28
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	685b      	ldr	r3, [r3, #4]
 8012a48:	3b01      	subs	r3, #1
 8012a4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	689b      	ldr	r3, [r3, #8]
 8012a52:	3b01      	subs	r3, #1
 8012a54:	025b      	lsls	r3, r3, #9
 8012a56:	b29b      	uxth	r3, r3
 8012a58:	431a      	orrs	r2, r3
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	68db      	ldr	r3, [r3, #12]
 8012a5e:	3b01      	subs	r3, #1
 8012a60:	041b      	lsls	r3, r3, #16
 8012a62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012a66:	431a      	orrs	r2, r3
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	691b      	ldr	r3, [r3, #16]
 8012a6c:	3b01      	subs	r3, #1
 8012a6e:	061b      	lsls	r3, r3, #24
 8012a70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012a74:	4931      	ldr	r1, [pc, #196]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012a76:	4313      	orrs	r3, r2
 8012a78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8012a7a:	4b30      	ldr	r3, [pc, #192]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	695b      	ldr	r3, [r3, #20]
 8012a86:	492d      	ldr	r1, [pc, #180]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012a88:	4313      	orrs	r3, r2
 8012a8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8012a8c:	4b2b      	ldr	r3, [pc, #172]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a90:	f023 0220 	bic.w	r2, r3, #32
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	699b      	ldr	r3, [r3, #24]
 8012a98:	4928      	ldr	r1, [pc, #160]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012a9a:	4313      	orrs	r3, r2
 8012a9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8012a9e:	4b27      	ldr	r3, [pc, #156]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aa2:	4a26      	ldr	r2, [pc, #152]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012aa4:	f023 0310 	bic.w	r3, r3, #16
 8012aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8012aaa:	4b24      	ldr	r3, [pc, #144]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012aac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012aae:	4b24      	ldr	r3, [pc, #144]	; (8012b40 <RCCEx_PLL2_Config+0x160>)
 8012ab0:	4013      	ands	r3, r2
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	69d2      	ldr	r2, [r2, #28]
 8012ab6:	00d2      	lsls	r2, r2, #3
 8012ab8:	4920      	ldr	r1, [pc, #128]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012aba:	4313      	orrs	r3, r2
 8012abc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8012abe:	4b1f      	ldr	r3, [pc, #124]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ac2:	4a1e      	ldr	r2, [pc, #120]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012ac4:	f043 0310 	orr.w	r3, r3, #16
 8012ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8012aca:	683b      	ldr	r3, [r7, #0]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d106      	bne.n	8012ade <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8012ad0:	4b1a      	ldr	r3, [pc, #104]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ad4:	4a19      	ldr	r2, [pc, #100]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012ad6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012ada:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012adc:	e00f      	b.n	8012afe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	2b01      	cmp	r3, #1
 8012ae2:	d106      	bne.n	8012af2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8012ae4:	4b15      	ldr	r3, [pc, #84]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ae8:	4a14      	ldr	r2, [pc, #80]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012aee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012af0:	e005      	b.n	8012afe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8012af2:	4b12      	ldr	r3, [pc, #72]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012af6:	4a11      	ldr	r2, [pc, #68]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012af8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012afc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8012afe:	4b0f      	ldr	r3, [pc, #60]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	4a0e      	ldr	r2, [pc, #56]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012b04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012b08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012b0a:	f7f4 f831 	bl	8006b70 <HAL_GetTick>
 8012b0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012b10:	e008      	b.n	8012b24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8012b12:	f7f4 f82d 	bl	8006b70 <HAL_GetTick>
 8012b16:	4602      	mov	r2, r0
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	1ad3      	subs	r3, r2, r3
 8012b1c:	2b02      	cmp	r3, #2
 8012b1e:	d901      	bls.n	8012b24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012b20:	2303      	movs	r3, #3
 8012b22:	e006      	b.n	8012b32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012b24:	4b05      	ldr	r3, [pc, #20]	; (8012b3c <RCCEx_PLL2_Config+0x15c>)
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d0f0      	beq.n	8012b12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8012b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3710      	adds	r7, #16
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}
 8012b3a:	bf00      	nop
 8012b3c:	58024400 	.word	0x58024400
 8012b40:	ffff0007 	.word	0xffff0007

08012b44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b084      	sub	sp, #16
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
 8012b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012b4e:	2300      	movs	r3, #0
 8012b50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012b52:	4b53      	ldr	r3, [pc, #332]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b56:	f003 0303 	and.w	r3, r3, #3
 8012b5a:	2b03      	cmp	r3, #3
 8012b5c:	d101      	bne.n	8012b62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8012b5e:	2301      	movs	r3, #1
 8012b60:	e099      	b.n	8012c96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8012b62:	4b4f      	ldr	r3, [pc, #316]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	4a4e      	ldr	r2, [pc, #312]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012b6e:	f7f3 ffff 	bl	8006b70 <HAL_GetTick>
 8012b72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012b74:	e008      	b.n	8012b88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8012b76:	f7f3 fffb 	bl	8006b70 <HAL_GetTick>
 8012b7a:	4602      	mov	r2, r0
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	1ad3      	subs	r3, r2, r3
 8012b80:	2b02      	cmp	r3, #2
 8012b82:	d901      	bls.n	8012b88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012b84:	2303      	movs	r3, #3
 8012b86:	e086      	b.n	8012c96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012b88:	4b45      	ldr	r3, [pc, #276]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d1f0      	bne.n	8012b76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8012b94:	4b42      	ldr	r3, [pc, #264]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	051b      	lsls	r3, r3, #20
 8012ba2:	493f      	ldr	r1, [pc, #252]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012ba4:	4313      	orrs	r3, r2
 8012ba6:	628b      	str	r3, [r1, #40]	; 0x28
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	685b      	ldr	r3, [r3, #4]
 8012bac:	3b01      	subs	r3, #1
 8012bae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	689b      	ldr	r3, [r3, #8]
 8012bb6:	3b01      	subs	r3, #1
 8012bb8:	025b      	lsls	r3, r3, #9
 8012bba:	b29b      	uxth	r3, r3
 8012bbc:	431a      	orrs	r2, r3
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	68db      	ldr	r3, [r3, #12]
 8012bc2:	3b01      	subs	r3, #1
 8012bc4:	041b      	lsls	r3, r3, #16
 8012bc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012bca:	431a      	orrs	r2, r3
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	691b      	ldr	r3, [r3, #16]
 8012bd0:	3b01      	subs	r3, #1
 8012bd2:	061b      	lsls	r3, r3, #24
 8012bd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012bd8:	4931      	ldr	r1, [pc, #196]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012bda:	4313      	orrs	r3, r2
 8012bdc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8012bde:	4b30      	ldr	r3, [pc, #192]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012be2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	695b      	ldr	r3, [r3, #20]
 8012bea:	492d      	ldr	r1, [pc, #180]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012bec:	4313      	orrs	r3, r2
 8012bee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8012bf0:	4b2b      	ldr	r3, [pc, #172]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bf4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	699b      	ldr	r3, [r3, #24]
 8012bfc:	4928      	ldr	r1, [pc, #160]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012bfe:	4313      	orrs	r3, r2
 8012c00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8012c02:	4b27      	ldr	r3, [pc, #156]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c06:	4a26      	ldr	r2, [pc, #152]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8012c0e:	4b24      	ldr	r3, [pc, #144]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012c12:	4b24      	ldr	r3, [pc, #144]	; (8012ca4 <RCCEx_PLL3_Config+0x160>)
 8012c14:	4013      	ands	r3, r2
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	69d2      	ldr	r2, [r2, #28]
 8012c1a:	00d2      	lsls	r2, r2, #3
 8012c1c:	4920      	ldr	r1, [pc, #128]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012c1e:	4313      	orrs	r3, r2
 8012c20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8012c22:	4b1f      	ldr	r3, [pc, #124]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c26:	4a1e      	ldr	r2, [pc, #120]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d106      	bne.n	8012c42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8012c34:	4b1a      	ldr	r3, [pc, #104]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c38:	4a19      	ldr	r2, [pc, #100]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012c3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012c3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012c40:	e00f      	b.n	8012c62 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	2b01      	cmp	r3, #1
 8012c46:	d106      	bne.n	8012c56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8012c48:	4b15      	ldr	r3, [pc, #84]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c4c:	4a14      	ldr	r2, [pc, #80]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012c4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012c52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012c54:	e005      	b.n	8012c62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8012c56:	4b12      	ldr	r3, [pc, #72]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c5a:	4a11      	ldr	r2, [pc, #68]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012c5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012c60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8012c62:	4b0f      	ldr	r3, [pc, #60]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	4a0e      	ldr	r2, [pc, #56]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012c6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012c6e:	f7f3 ff7f 	bl	8006b70 <HAL_GetTick>
 8012c72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012c74:	e008      	b.n	8012c88 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8012c76:	f7f3 ff7b 	bl	8006b70 <HAL_GetTick>
 8012c7a:	4602      	mov	r2, r0
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	1ad3      	subs	r3, r2, r3
 8012c80:	2b02      	cmp	r3, #2
 8012c82:	d901      	bls.n	8012c88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012c84:	2303      	movs	r3, #3
 8012c86:	e006      	b.n	8012c96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012c88:	4b05      	ldr	r3, [pc, #20]	; (8012ca0 <RCCEx_PLL3_Config+0x15c>)
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d0f0      	beq.n	8012c76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8012c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c96:	4618      	mov	r0, r3
 8012c98:	3710      	adds	r7, #16
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	bf00      	nop
 8012ca0:	58024400 	.word	0x58024400
 8012ca4:	ffff0007 	.word	0xffff0007

08012ca8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b084      	sub	sp, #16
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d071      	beq.n	8012d9e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012cc0:	b2db      	uxtb	r3, r3
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d106      	bne.n	8012cd4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	2200      	movs	r2, #0
 8012cca:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8012cce:	6878      	ldr	r0, [r7, #4]
 8012cd0:	f7f1 fd76 	bl	80047c0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2202      	movs	r2, #2
 8012cd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	68db      	ldr	r3, [r3, #12]
 8012ce2:	f003 0310 	and.w	r3, r3, #16
 8012ce6:	2b10      	cmp	r3, #16
 8012ce8:	d050      	beq.n	8012d8c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	22ca      	movs	r2, #202	; 0xca
 8012cf0:	625a      	str	r2, [r3, #36]	; 0x24
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	2253      	movs	r2, #83	; 0x53
 8012cf8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	f000 fa4a 	bl	8013194 <RTC_EnterInitMode>
 8012d00:	4603      	mov	r3, r0
 8012d02:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8012d04:	7bfb      	ldrb	r3, [r7, #15]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d124      	bne.n	8012d54 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	6899      	ldr	r1, [r3, #8]
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681a      	ldr	r2, [r3, #0]
 8012d14:	4b24      	ldr	r3, [pc, #144]	; (8012da8 <HAL_RTC_Init+0x100>)
 8012d16:	400b      	ands	r3, r1
 8012d18:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	6899      	ldr	r1, [r3, #8]
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	685a      	ldr	r2, [r3, #4]
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	691b      	ldr	r3, [r3, #16]
 8012d28:	431a      	orrs	r2, r3
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	699b      	ldr	r3, [r3, #24]
 8012d2e:	431a      	orrs	r2, r3
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	430a      	orrs	r2, r1
 8012d36:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	689b      	ldr	r3, [r3, #8]
 8012d3c:	0419      	lsls	r1, r3, #16
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	68da      	ldr	r2, [r3, #12]
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	430a      	orrs	r2, r1
 8012d48:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f000 fa56 	bl	80131fc <RTC_ExitInitMode>
 8012d50:	4603      	mov	r3, r0
 8012d52:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8012d54:	7bfb      	ldrb	r3, [r7, #15]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d113      	bne.n	8012d82 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	f022 0203 	bic.w	r2, r2, #3
 8012d68:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	69da      	ldr	r2, [r3, #28]
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	695b      	ldr	r3, [r3, #20]
 8012d78:	431a      	orrs	r2, r3
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	430a      	orrs	r2, r1
 8012d80:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	22ff      	movs	r2, #255	; 0xff
 8012d88:	625a      	str	r2, [r3, #36]	; 0x24
 8012d8a:	e001      	b.n	8012d90 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8012d90:	7bfb      	ldrb	r3, [r7, #15]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d103      	bne.n	8012d9e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2201      	movs	r2, #1
 8012d9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8012d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012da0:	4618      	mov	r0, r3
 8012da2:	3710      	adds	r7, #16
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}
 8012da8:	ff8fffbf 	.word	0xff8fffbf

08012dac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012dac:	b590      	push	{r4, r7, lr}
 8012dae:	b087      	sub	sp, #28
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	60f8      	str	r0, [r7, #12]
 8012db4:	60b9      	str	r1, [r7, #8]
 8012db6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012dbe:	2b01      	cmp	r3, #1
 8012dc0:	d101      	bne.n	8012dc6 <HAL_RTC_SetTime+0x1a>
 8012dc2:	2302      	movs	r3, #2
 8012dc4:	e089      	b.n	8012eda <HAL_RTC_SetTime+0x12e>
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	2201      	movs	r2, #1
 8012dca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	2202      	movs	r2, #2
 8012dd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	22ca      	movs	r2, #202	; 0xca
 8012ddc:	625a      	str	r2, [r3, #36]	; 0x24
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	2253      	movs	r2, #83	; 0x53
 8012de4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012de6:	68f8      	ldr	r0, [r7, #12]
 8012de8:	f000 f9d4 	bl	8013194 <RTC_EnterInitMode>
 8012dec:	4603      	mov	r3, r0
 8012dee:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8012df0:	7cfb      	ldrb	r3, [r7, #19]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d161      	bne.n	8012eba <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d126      	bne.n	8012e4a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	689b      	ldr	r3, [r3, #8]
 8012e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d102      	bne.n	8012e10 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8012e0a:	68bb      	ldr	r3, [r7, #8]
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	781b      	ldrb	r3, [r3, #0]
 8012e14:	4618      	mov	r0, r3
 8012e16:	f000 fa2f 	bl	8013278 <RTC_ByteToBcd2>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012e1e:	68bb      	ldr	r3, [r7, #8]
 8012e20:	785b      	ldrb	r3, [r3, #1]
 8012e22:	4618      	mov	r0, r3
 8012e24:	f000 fa28 	bl	8013278 <RTC_ByteToBcd2>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012e2c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	789b      	ldrb	r3, [r3, #2]
 8012e32:	4618      	mov	r0, r3
 8012e34:	f000 fa20 	bl	8013278 <RTC_ByteToBcd2>
 8012e38:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012e3a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8012e3e:	68bb      	ldr	r3, [r7, #8]
 8012e40:	78db      	ldrb	r3, [r3, #3]
 8012e42:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012e44:	4313      	orrs	r3, r2
 8012e46:	617b      	str	r3, [r7, #20]
 8012e48:	e018      	b.n	8012e7c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	689b      	ldr	r3, [r3, #8]
 8012e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d102      	bne.n	8012e5e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	781b      	ldrb	r3, [r3, #0]
 8012e62:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012e64:	68bb      	ldr	r3, [r7, #8]
 8012e66:	785b      	ldrb	r3, [r3, #1]
 8012e68:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012e6a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8012e6c:	68ba      	ldr	r2, [r7, #8]
 8012e6e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012e70:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	78db      	ldrb	r3, [r3, #3]
 8012e76:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012e78:	4313      	orrs	r3, r2
 8012e7a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	681a      	ldr	r2, [r3, #0]
 8012e80:	6979      	ldr	r1, [r7, #20]
 8012e82:	4b18      	ldr	r3, [pc, #96]	; (8012ee4 <HAL_RTC_SetTime+0x138>)
 8012e84:	400b      	ands	r3, r1
 8012e86:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	689a      	ldr	r2, [r3, #8]
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012e96:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	6899      	ldr	r1, [r3, #8]
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	68da      	ldr	r2, [r3, #12]
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	691b      	ldr	r3, [r3, #16]
 8012ea6:	431a      	orrs	r2, r3
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	430a      	orrs	r2, r1
 8012eae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012eb0:	68f8      	ldr	r0, [r7, #12]
 8012eb2:	f000 f9a3 	bl	80131fc <RTC_ExitInitMode>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	22ff      	movs	r2, #255	; 0xff
 8012ec0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8012ec2:	7cfb      	ldrb	r3, [r7, #19]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d103      	bne.n	8012ed0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	2201      	movs	r2, #1
 8012ecc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8012ed8:	7cfb      	ldrb	r3, [r7, #19]
}
 8012eda:	4618      	mov	r0, r3
 8012edc:	371c      	adds	r7, #28
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bd90      	pop	{r4, r7, pc}
 8012ee2:	bf00      	nop
 8012ee4:	007f7f7f 	.word	0x007f7f7f

08012ee8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b086      	sub	sp, #24
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	60f8      	str	r0, [r7, #12]
 8012ef0:	60b9      	str	r1, [r7, #8]
 8012ef2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012efa:	68bb      	ldr	r3, [r7, #8]
 8012efc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	691b      	ldr	r3, [r3, #16]
 8012f04:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8012f08:	68bb      	ldr	r3, [r7, #8]
 8012f0a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	681a      	ldr	r2, [r3, #0]
 8012f12:	4b22      	ldr	r3, [pc, #136]	; (8012f9c <HAL_RTC_GetTime+0xb4>)
 8012f14:	4013      	ands	r3, r2
 8012f16:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	0c1b      	lsrs	r3, r3, #16
 8012f1c:	b2db      	uxtb	r3, r3
 8012f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f22:	b2da      	uxtb	r2, r3
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	0a1b      	lsrs	r3, r3, #8
 8012f2c:	b2db      	uxtb	r3, r3
 8012f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012f32:	b2da      	uxtb	r2, r3
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8012f38:	697b      	ldr	r3, [r7, #20]
 8012f3a:	b2db      	uxtb	r3, r3
 8012f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012f40:	b2da      	uxtb	r2, r3
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8012f46:	697b      	ldr	r3, [r7, #20]
 8012f48:	0d9b      	lsrs	r3, r3, #22
 8012f4a:	b2db      	uxtb	r3, r3
 8012f4c:	f003 0301 	and.w	r3, r3, #1
 8012f50:	b2da      	uxtb	r2, r3
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d11a      	bne.n	8012f92 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	4618      	mov	r0, r3
 8012f62:	f000 f9a9 	bl	80132b8 <RTC_Bcd2ToByte>
 8012f66:	4603      	mov	r3, r0
 8012f68:	461a      	mov	r2, r3
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	785b      	ldrb	r3, [r3, #1]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f000 f9a0 	bl	80132b8 <RTC_Bcd2ToByte>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8012f80:	68bb      	ldr	r3, [r7, #8]
 8012f82:	789b      	ldrb	r3, [r3, #2]
 8012f84:	4618      	mov	r0, r3
 8012f86:	f000 f997 	bl	80132b8 <RTC_Bcd2ToByte>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	461a      	mov	r2, r3
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8012f92:	2300      	movs	r3, #0
}
 8012f94:	4618      	mov	r0, r3
 8012f96:	3718      	adds	r7, #24
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}
 8012f9c:	007f7f7f 	.word	0x007f7f7f

08012fa0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012fa0:	b590      	push	{r4, r7, lr}
 8012fa2:	b087      	sub	sp, #28
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	60f8      	str	r0, [r7, #12]
 8012fa8:	60b9      	str	r1, [r7, #8]
 8012faa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012fb2:	2b01      	cmp	r3, #1
 8012fb4:	d101      	bne.n	8012fba <HAL_RTC_SetDate+0x1a>
 8012fb6:	2302      	movs	r3, #2
 8012fb8:	e073      	b.n	80130a2 <HAL_RTC_SetDate+0x102>
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	2201      	movs	r2, #1
 8012fbe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	2202      	movs	r2, #2
 8012fc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d10e      	bne.n	8012fee <HAL_RTC_SetDate+0x4e>
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	785b      	ldrb	r3, [r3, #1]
 8012fd4:	f003 0310 	and.w	r3, r3, #16
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d008      	beq.n	8012fee <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	785b      	ldrb	r3, [r3, #1]
 8012fe0:	f023 0310 	bic.w	r3, r3, #16
 8012fe4:	b2db      	uxtb	r3, r3
 8012fe6:	330a      	adds	r3, #10
 8012fe8:	b2da      	uxtb	r2, r3
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d11c      	bne.n	801302e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	78db      	ldrb	r3, [r3, #3]
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	f000 f93d 	bl	8013278 <RTC_ByteToBcd2>
 8012ffe:	4603      	mov	r3, r0
 8013000:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	785b      	ldrb	r3, [r3, #1]
 8013006:	4618      	mov	r0, r3
 8013008:	f000 f936 	bl	8013278 <RTC_ByteToBcd2>
 801300c:	4603      	mov	r3, r0
 801300e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8013010:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	789b      	ldrb	r3, [r3, #2]
 8013016:	4618      	mov	r0, r3
 8013018:	f000 f92e 	bl	8013278 <RTC_ByteToBcd2>
 801301c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801301e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8013022:	68bb      	ldr	r3, [r7, #8]
 8013024:	781b      	ldrb	r3, [r3, #0]
 8013026:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8013028:	4313      	orrs	r3, r2
 801302a:	617b      	str	r3, [r7, #20]
 801302c:	e00e      	b.n	801304c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	78db      	ldrb	r3, [r3, #3]
 8013032:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8013034:	68bb      	ldr	r3, [r7, #8]
 8013036:	785b      	ldrb	r3, [r3, #1]
 8013038:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801303a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 801303c:	68ba      	ldr	r2, [r7, #8]
 801303e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8013040:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8013048:	4313      	orrs	r3, r2
 801304a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	22ca      	movs	r2, #202	; 0xca
 8013052:	625a      	str	r2, [r3, #36]	; 0x24
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	2253      	movs	r2, #83	; 0x53
 801305a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801305c:	68f8      	ldr	r0, [r7, #12]
 801305e:	f000 f899 	bl	8013194 <RTC_EnterInitMode>
 8013062:	4603      	mov	r3, r0
 8013064:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8013066:	7cfb      	ldrb	r3, [r7, #19]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d10a      	bne.n	8013082 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	681a      	ldr	r2, [r3, #0]
 8013070:	6979      	ldr	r1, [r7, #20]
 8013072:	4b0e      	ldr	r3, [pc, #56]	; (80130ac <HAL_RTC_SetDate+0x10c>)
 8013074:	400b      	ands	r3, r1
 8013076:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8013078:	68f8      	ldr	r0, [r7, #12]
 801307a:	f000 f8bf 	bl	80131fc <RTC_ExitInitMode>
 801307e:	4603      	mov	r3, r0
 8013080:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	22ff      	movs	r2, #255	; 0xff
 8013088:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 801308a:	7cfb      	ldrb	r3, [r7, #19]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d103      	bne.n	8013098 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	2201      	movs	r2, #1
 8013094:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	2200      	movs	r2, #0
 801309c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80130a0:	7cfb      	ldrb	r3, [r7, #19]


}
 80130a2:	4618      	mov	r0, r3
 80130a4:	371c      	adds	r7, #28
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd90      	pop	{r4, r7, pc}
 80130aa:	bf00      	nop
 80130ac:	00ffff3f 	.word	0x00ffff3f

080130b0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b086      	sub	sp, #24
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	60f8      	str	r0, [r7, #12]
 80130b8:	60b9      	str	r1, [r7, #8]
 80130ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	685a      	ldr	r2, [r3, #4]
 80130c2:	4b21      	ldr	r3, [pc, #132]	; (8013148 <HAL_RTC_GetDate+0x98>)
 80130c4:	4013      	ands	r3, r2
 80130c6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	0c1b      	lsrs	r3, r3, #16
 80130cc:	b2da      	uxtb	r2, r3
 80130ce:	68bb      	ldr	r3, [r7, #8]
 80130d0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80130d2:	697b      	ldr	r3, [r7, #20]
 80130d4:	0a1b      	lsrs	r3, r3, #8
 80130d6:	b2db      	uxtb	r3, r3
 80130d8:	f003 031f 	and.w	r3, r3, #31
 80130dc:	b2da      	uxtb	r2, r3
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80130e2:	697b      	ldr	r3, [r7, #20]
 80130e4:	b2db      	uxtb	r3, r3
 80130e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80130ea:	b2da      	uxtb	r2, r3
 80130ec:	68bb      	ldr	r3, [r7, #8]
 80130ee:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	0b5b      	lsrs	r3, r3, #13
 80130f4:	b2db      	uxtb	r3, r3
 80130f6:	f003 0307 	and.w	r3, r3, #7
 80130fa:	b2da      	uxtb	r2, r3
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d11a      	bne.n	801313c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	78db      	ldrb	r3, [r3, #3]
 801310a:	4618      	mov	r0, r3
 801310c:	f000 f8d4 	bl	80132b8 <RTC_Bcd2ToByte>
 8013110:	4603      	mov	r3, r0
 8013112:	461a      	mov	r2, r3
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8013118:	68bb      	ldr	r3, [r7, #8]
 801311a:	785b      	ldrb	r3, [r3, #1]
 801311c:	4618      	mov	r0, r3
 801311e:	f000 f8cb 	bl	80132b8 <RTC_Bcd2ToByte>
 8013122:	4603      	mov	r3, r0
 8013124:	461a      	mov	r2, r3
 8013126:	68bb      	ldr	r3, [r7, #8]
 8013128:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801312a:	68bb      	ldr	r3, [r7, #8]
 801312c:	789b      	ldrb	r3, [r3, #2]
 801312e:	4618      	mov	r0, r3
 8013130:	f000 f8c2 	bl	80132b8 <RTC_Bcd2ToByte>
 8013134:	4603      	mov	r3, r0
 8013136:	461a      	mov	r2, r3
 8013138:	68bb      	ldr	r3, [r7, #8]
 801313a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801313c:	2300      	movs	r3, #0
}
 801313e:	4618      	mov	r0, r3
 8013140:	3718      	adds	r7, #24
 8013142:	46bd      	mov	sp, r7
 8013144:	bd80      	pop	{r7, pc}
 8013146:	bf00      	nop
 8013148:	00ffff3f 	.word	0x00ffff3f

0801314c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b084      	sub	sp, #16
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	4a0d      	ldr	r2, [pc, #52]	; (8013190 <HAL_RTC_WaitForSynchro+0x44>)
 801315a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 801315c:	f7f3 fd08 	bl	8006b70 <HAL_GetTick>
 8013160:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8013162:	e009      	b.n	8013178 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8013164:	f7f3 fd04 	bl	8006b70 <HAL_GetTick>
 8013168:	4602      	mov	r2, r0
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	1ad3      	subs	r3, r2, r3
 801316e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013172:	d901      	bls.n	8013178 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8013174:	2303      	movs	r3, #3
 8013176:	e007      	b.n	8013188 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	68db      	ldr	r3, [r3, #12]
 801317e:	f003 0320 	and.w	r3, r3, #32
 8013182:	2b00      	cmp	r3, #0
 8013184:	d0ee      	beq.n	8013164 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8013186:	2300      	movs	r3, #0
}
 8013188:	4618      	mov	r0, r3
 801318a:	3710      	adds	r7, #16
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}
 8013190:	0003ff5f 	.word	0x0003ff5f

08013194 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b084      	sub	sp, #16
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801319c:	2300      	movs	r3, #0
 801319e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	68db      	ldr	r3, [r3, #12]
 80131a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d120      	bne.n	80131f0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80131b6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80131b8:	f7f3 fcda 	bl	8006b70 <HAL_GetTick>
 80131bc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80131be:	e00d      	b.n	80131dc <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80131c0:	f7f3 fcd6 	bl	8006b70 <HAL_GetTick>
 80131c4:	4602      	mov	r2, r0
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	1ad3      	subs	r3, r2, r3
 80131ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80131ce:	d905      	bls.n	80131dc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80131d0:	2303      	movs	r3, #3
 80131d2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2203      	movs	r2, #3
 80131d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	68db      	ldr	r3, [r3, #12]
 80131e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d102      	bne.n	80131f0 <RTC_EnterInitMode+0x5c>
 80131ea:	7bfb      	ldrb	r3, [r7, #15]
 80131ec:	2b03      	cmp	r3, #3
 80131ee:	d1e7      	bne.n	80131c0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80131f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3710      	adds	r7, #16
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}
	...

080131fc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b084      	sub	sp, #16
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013204:	2300      	movs	r3, #0
 8013206:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8013208:	4b1a      	ldr	r3, [pc, #104]	; (8013274 <RTC_ExitInitMode+0x78>)
 801320a:	68db      	ldr	r3, [r3, #12]
 801320c:	4a19      	ldr	r2, [pc, #100]	; (8013274 <RTC_ExitInitMode+0x78>)
 801320e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013212:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8013214:	4b17      	ldr	r3, [pc, #92]	; (8013274 <RTC_ExitInitMode+0x78>)
 8013216:	689b      	ldr	r3, [r3, #8]
 8013218:	f003 0320 	and.w	r3, r3, #32
 801321c:	2b00      	cmp	r3, #0
 801321e:	d10c      	bne.n	801323a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013220:	6878      	ldr	r0, [r7, #4]
 8013222:	f7ff ff93 	bl	801314c <HAL_RTC_WaitForSynchro>
 8013226:	4603      	mov	r3, r0
 8013228:	2b00      	cmp	r3, #0
 801322a:	d01e      	beq.n	801326a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2203      	movs	r2, #3
 8013230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8013234:	2303      	movs	r3, #3
 8013236:	73fb      	strb	r3, [r7, #15]
 8013238:	e017      	b.n	801326a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801323a:	4b0e      	ldr	r3, [pc, #56]	; (8013274 <RTC_ExitInitMode+0x78>)
 801323c:	689b      	ldr	r3, [r3, #8]
 801323e:	4a0d      	ldr	r2, [pc, #52]	; (8013274 <RTC_ExitInitMode+0x78>)
 8013240:	f023 0320 	bic.w	r3, r3, #32
 8013244:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013246:	6878      	ldr	r0, [r7, #4]
 8013248:	f7ff ff80 	bl	801314c <HAL_RTC_WaitForSynchro>
 801324c:	4603      	mov	r3, r0
 801324e:	2b00      	cmp	r3, #0
 8013250:	d005      	beq.n	801325e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2203      	movs	r2, #3
 8013256:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 801325a:	2303      	movs	r3, #3
 801325c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801325e:	4b05      	ldr	r3, [pc, #20]	; (8013274 <RTC_ExitInitMode+0x78>)
 8013260:	689b      	ldr	r3, [r3, #8]
 8013262:	4a04      	ldr	r2, [pc, #16]	; (8013274 <RTC_ExitInitMode+0x78>)
 8013264:	f043 0320 	orr.w	r3, r3, #32
 8013268:	6093      	str	r3, [r2, #8]
  }

  return status;
 801326a:	7bfb      	ldrb	r3, [r7, #15]
}
 801326c:	4618      	mov	r0, r3
 801326e:	3710      	adds	r7, #16
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}
 8013274:	58004000 	.word	0x58004000

08013278 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8013278:	b480      	push	{r7}
 801327a:	b085      	sub	sp, #20
 801327c:	af00      	add	r7, sp, #0
 801327e:	4603      	mov	r3, r0
 8013280:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8013282:	2300      	movs	r3, #0
 8013284:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8013286:	79fb      	ldrb	r3, [r7, #7]
 8013288:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 801328a:	e005      	b.n	8013298 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	3301      	adds	r3, #1
 8013290:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8013292:	7afb      	ldrb	r3, [r7, #11]
 8013294:	3b0a      	subs	r3, #10
 8013296:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8013298:	7afb      	ldrb	r3, [r7, #11]
 801329a:	2b09      	cmp	r3, #9
 801329c:	d8f6      	bhi.n	801328c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	b2db      	uxtb	r3, r3
 80132a2:	011b      	lsls	r3, r3, #4
 80132a4:	b2da      	uxtb	r2, r3
 80132a6:	7afb      	ldrb	r3, [r7, #11]
 80132a8:	4313      	orrs	r3, r2
 80132aa:	b2db      	uxtb	r3, r3
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3714      	adds	r7, #20
 80132b0:	46bd      	mov	sp, r7
 80132b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b6:	4770      	bx	lr

080132b8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80132b8:	b480      	push	{r7}
 80132ba:	b085      	sub	sp, #20
 80132bc:	af00      	add	r7, sp, #0
 80132be:	4603      	mov	r3, r0
 80132c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80132c2:	79fb      	ldrb	r3, [r7, #7]
 80132c4:	091b      	lsrs	r3, r3, #4
 80132c6:	b2db      	uxtb	r3, r3
 80132c8:	461a      	mov	r2, r3
 80132ca:	0092      	lsls	r2, r2, #2
 80132cc:	4413      	add	r3, r2
 80132ce:	005b      	lsls	r3, r3, #1
 80132d0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80132d2:	79fb      	ldrb	r3, [r7, #7]
 80132d4:	f003 030f 	and.w	r3, r3, #15
 80132d8:	b2da      	uxtb	r2, r3
 80132da:	7bfb      	ldrb	r3, [r7, #15]
 80132dc:	4413      	add	r3, r2
 80132de:	b2db      	uxtb	r3, r3
}
 80132e0:	4618      	mov	r0, r3
 80132e2:	3714      	adds	r7, #20
 80132e4:	46bd      	mov	sp, r7
 80132e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ea:	4770      	bx	lr

080132ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b084      	sub	sp, #16
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d101      	bne.n	80132fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80132fa:	2301      	movs	r3, #1
 80132fc:	e10f      	b.n	801351e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	2200      	movs	r2, #0
 8013302:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	4a87      	ldr	r2, [pc, #540]	; (8013528 <HAL_SPI_Init+0x23c>)
 801330a:	4293      	cmp	r3, r2
 801330c:	d00f      	beq.n	801332e <HAL_SPI_Init+0x42>
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	4a86      	ldr	r2, [pc, #536]	; (801352c <HAL_SPI_Init+0x240>)
 8013314:	4293      	cmp	r3, r2
 8013316:	d00a      	beq.n	801332e <HAL_SPI_Init+0x42>
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	4a84      	ldr	r2, [pc, #528]	; (8013530 <HAL_SPI_Init+0x244>)
 801331e:	4293      	cmp	r3, r2
 8013320:	d005      	beq.n	801332e <HAL_SPI_Init+0x42>
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	68db      	ldr	r3, [r3, #12]
 8013326:	2b0f      	cmp	r3, #15
 8013328:	d901      	bls.n	801332e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801332a:	2301      	movs	r3, #1
 801332c:	e0f7      	b.n	801351e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801332e:	6878      	ldr	r0, [r7, #4]
 8013330:	f000 fd60 	bl	8013df4 <SPI_GetPacketSize>
 8013334:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	4a7b      	ldr	r2, [pc, #492]	; (8013528 <HAL_SPI_Init+0x23c>)
 801333c:	4293      	cmp	r3, r2
 801333e:	d00c      	beq.n	801335a <HAL_SPI_Init+0x6e>
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	4a79      	ldr	r2, [pc, #484]	; (801352c <HAL_SPI_Init+0x240>)
 8013346:	4293      	cmp	r3, r2
 8013348:	d007      	beq.n	801335a <HAL_SPI_Init+0x6e>
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	4a78      	ldr	r2, [pc, #480]	; (8013530 <HAL_SPI_Init+0x244>)
 8013350:	4293      	cmp	r3, r2
 8013352:	d002      	beq.n	801335a <HAL_SPI_Init+0x6e>
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	2b08      	cmp	r3, #8
 8013358:	d811      	bhi.n	801337e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801335e:	4a72      	ldr	r2, [pc, #456]	; (8013528 <HAL_SPI_Init+0x23c>)
 8013360:	4293      	cmp	r3, r2
 8013362:	d009      	beq.n	8013378 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	4a70      	ldr	r2, [pc, #448]	; (801352c <HAL_SPI_Init+0x240>)
 801336a:	4293      	cmp	r3, r2
 801336c:	d004      	beq.n	8013378 <HAL_SPI_Init+0x8c>
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	4a6f      	ldr	r2, [pc, #444]	; (8013530 <HAL_SPI_Init+0x244>)
 8013374:	4293      	cmp	r3, r2
 8013376:	d104      	bne.n	8013382 <HAL_SPI_Init+0x96>
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	2b10      	cmp	r3, #16
 801337c:	d901      	bls.n	8013382 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801337e:	2301      	movs	r3, #1
 8013380:	e0cd      	b.n	801351e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013388:	b2db      	uxtb	r3, r3
 801338a:	2b00      	cmp	r3, #0
 801338c:	d106      	bne.n	801339c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	2200      	movs	r2, #0
 8013392:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013396:	6878      	ldr	r0, [r7, #4]
 8013398:	f7f1 fc88 	bl	8004cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2202      	movs	r2, #2
 80133a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	681a      	ldr	r2, [r3, #0]
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	f022 0201 	bic.w	r2, r2, #1
 80133b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	689b      	ldr	r3, [r3, #8]
 80133ba:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80133be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	699b      	ldr	r3, [r3, #24]
 80133c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80133c8:	d119      	bne.n	80133fe <HAL_SPI_Init+0x112>
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	685b      	ldr	r3, [r3, #4]
 80133ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80133d2:	d103      	bne.n	80133dc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d008      	beq.n	80133ee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d10c      	bne.n	80133fe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80133e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80133ec:	d107      	bne.n	80133fe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	681a      	ldr	r2, [r3, #0]
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80133fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	685b      	ldr	r3, [r3, #4]
 8013402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013406:	2b00      	cmp	r3, #0
 8013408:	d00f      	beq.n	801342a <HAL_SPI_Init+0x13e>
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	68db      	ldr	r3, [r3, #12]
 801340e:	2b06      	cmp	r3, #6
 8013410:	d90b      	bls.n	801342a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	430a      	orrs	r2, r1
 8013426:	601a      	str	r2, [r3, #0]
 8013428:	e007      	b.n	801343a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	681a      	ldr	r2, [r3, #0]
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013438:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	69da      	ldr	r2, [r3, #28]
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013442:	431a      	orrs	r2, r3
 8013444:	68bb      	ldr	r3, [r7, #8]
 8013446:	431a      	orrs	r2, r3
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801344c:	ea42 0103 	orr.w	r1, r2, r3
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	68da      	ldr	r2, [r3, #12]
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	430a      	orrs	r2, r1
 801345a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013464:	431a      	orrs	r2, r3
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801346a:	431a      	orrs	r2, r3
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	699b      	ldr	r3, [r3, #24]
 8013470:	431a      	orrs	r2, r3
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	691b      	ldr	r3, [r3, #16]
 8013476:	431a      	orrs	r2, r3
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	695b      	ldr	r3, [r3, #20]
 801347c:	431a      	orrs	r2, r3
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	6a1b      	ldr	r3, [r3, #32]
 8013482:	431a      	orrs	r2, r3
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	685b      	ldr	r3, [r3, #4]
 8013488:	431a      	orrs	r2, r3
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801348e:	431a      	orrs	r2, r3
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	689b      	ldr	r3, [r3, #8]
 8013494:	431a      	orrs	r2, r3
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801349a:	ea42 0103 	orr.w	r1, r2, r3
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	430a      	orrs	r2, r1
 80134a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	685b      	ldr	r3, [r3, #4]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d113      	bne.n	80134da <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	689b      	ldr	r3, [r3, #8]
 80134b8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80134c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	689b      	ldr	r3, [r3, #8]
 80134cc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80134d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	f022 0201 	bic.w	r2, r2, #1
 80134e8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	685b      	ldr	r3, [r3, #4]
 80134ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d00a      	beq.n	801350c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	68db      	ldr	r3, [r3, #12]
 80134fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	430a      	orrs	r2, r1
 801350a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	2200      	movs	r2, #0
 8013510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	2201      	movs	r2, #1
 8013518:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 801351c:	2300      	movs	r3, #0
}
 801351e:	4618      	mov	r0, r3
 8013520:	3710      	adds	r7, #16
 8013522:	46bd      	mov	sp, r7
 8013524:	bd80      	pop	{r7, pc}
 8013526:	bf00      	nop
 8013528:	40013000 	.word	0x40013000
 801352c:	40003800 	.word	0x40003800
 8013530:	40003c00 	.word	0x40003c00

08013534 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013534:	b580      	push	{r7, lr}
 8013536:	b084      	sub	sp, #16
 8013538:	af00      	add	r7, sp, #0
 801353a:	60f8      	str	r0, [r7, #12]
 801353c:	60b9      	str	r1, [r7, #8]
 801353e:	4613      	mov	r3, r2
 8013540:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013548:	b2db      	uxtb	r3, r3
 801354a:	2b01      	cmp	r3, #1
 801354c:	d005      	beq.n	801355a <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	2200      	movs	r2, #0
 8013552:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 8013556:	2302      	movs	r3, #2
 8013558:	e127      	b.n	80137aa <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d002      	beq.n	8013566 <HAL_SPI_Receive_DMA+0x32>
 8013560:	88fb      	ldrh	r3, [r7, #6]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d105      	bne.n	8013572 <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	2200      	movs	r2, #0
 801356a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 801356e:	2301      	movs	r3, #1
 8013570:	e11b      	b.n	80137aa <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013578:	2b01      	cmp	r3, #1
 801357a:	d101      	bne.n	8013580 <HAL_SPI_Receive_DMA+0x4c>
 801357c:	2302      	movs	r3, #2
 801357e:	e114      	b.n	80137aa <HAL_SPI_Receive_DMA+0x276>
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	2201      	movs	r2, #1
 8013584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	2204      	movs	r2, #4
 801358c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	2200      	movs	r2, #0
 8013594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	68ba      	ldr	r2, [r7, #8]
 801359c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	88fa      	ldrh	r2, [r7, #6]
 80135a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	88fa      	ldrh	r2, [r7, #6]
 80135aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	2200      	movs	r2, #0
 80135b2:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	2200      	movs	r2, #0
 80135b8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	2200      	movs	r2, #0
 80135be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	2200      	movs	r2, #0
 80135c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	689b      	ldr	r3, [r3, #8]
 80135ce:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80135d2:	d108      	bne.n	80135e6 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	681a      	ldr	r2, [r3, #0]
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80135e2:	601a      	str	r2, [r3, #0]
 80135e4:	e009      	b.n	80135fa <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	68db      	ldr	r3, [r3, #12]
 80135ec:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80135f8:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	68db      	ldr	r3, [r3, #12]
 80135fe:	2b0f      	cmp	r3, #15
 8013600:	d905      	bls.n	801360e <HAL_SPI_Receive_DMA+0xda>
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013606:	699b      	ldr	r3, [r3, #24]
 8013608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801360c:	d10f      	bne.n	801362e <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8013612:	2b07      	cmp	r3, #7
 8013614:	d911      	bls.n	801363a <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801361a:	699b      	ldr	r3, [r3, #24]
 801361c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013620:	d00b      	beq.n	801363a <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013626:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8013628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801362c:	d005      	beq.n	801363a <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	2200      	movs	r2, #0
 8013632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8013636:	2301      	movs	r3, #1
 8013638:	e0b7      	b.n	80137aa <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	689a      	ldr	r2, [r3, #8]
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013648:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	68db      	ldr	r3, [r3, #12]
 801364e:	2b07      	cmp	r3, #7
 8013650:	d820      	bhi.n	8013694 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013656:	699b      	ldr	r3, [r3, #24]
 8013658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801365c:	d109      	bne.n	8013672 <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013664:	b29b      	uxth	r3, r3
 8013666:	3301      	adds	r3, #1
 8013668:	105b      	asrs	r3, r3, #1
 801366a:	b29a      	uxth	r2, r3
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013676:	699b      	ldr	r3, [r3, #24]
 8013678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801367c:	d11e      	bne.n	80136bc <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013684:	b29b      	uxth	r3, r3
 8013686:	3303      	adds	r3, #3
 8013688:	109b      	asrs	r3, r3, #2
 801368a:	b29a      	uxth	r2, r3
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013692:	e013      	b.n	80136bc <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	68db      	ldr	r3, [r3, #12]
 8013698:	2b0f      	cmp	r3, #15
 801369a:	d80f      	bhi.n	80136bc <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80136a0:	699b      	ldr	r3, [r3, #24]
 80136a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80136a6:	d109      	bne.n	80136bc <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80136ae:	b29b      	uxth	r3, r3
 80136b0:	3301      	adds	r3, #1
 80136b2:	105b      	asrs	r3, r3, #1
 80136b4:	b29a      	uxth	r2, r3
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80136c0:	4a3c      	ldr	r2, [pc, #240]	; (80137b4 <HAL_SPI_Receive_DMA+0x280>)
 80136c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80136c8:	4a3b      	ldr	r2, [pc, #236]	; (80137b8 <HAL_SPI_Receive_DMA+0x284>)
 80136ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80136d0:	4a3a      	ldr	r2, [pc, #232]	; (80137bc <HAL_SPI_Receive_DMA+0x288>)
 80136d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80136d8:	2200      	movs	r2, #0
 80136da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	3330      	adds	r3, #48	; 0x30
 80136e6:	4619      	mov	r1, r3
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80136ec:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80136f4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80136f6:	f7f5 febf 	bl	8009478 <HAL_DMA_Start_IT>
 80136fa:	4603      	mov	r3, r0
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d011      	beq.n	8013724 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013706:	f043 0210 	orr.w	r2, r3, #16
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	2201      	movs	r2, #1
 8013714:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	2200      	movs	r2, #0
 801371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 8013720:	2301      	movs	r3, #1
 8013722:	e042      	b.n	80137aa <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013728:	69db      	ldr	r3, [r3, #28]
 801372a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801372e:	d108      	bne.n	8013742 <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	6859      	ldr	r1, [r3, #4]
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	681a      	ldr	r2, [r3, #0]
 801373a:	4b21      	ldr	r3, [pc, #132]	; (80137c0 <HAL_SPI_Receive_DMA+0x28c>)
 801373c:	400b      	ands	r3, r1
 801373e:	6053      	str	r3, [r2, #4]
 8013740:	e009      	b.n	8013756 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	685a      	ldr	r2, [r3, #4]
 8013748:	4b1d      	ldr	r3, [pc, #116]	; (80137c0 <HAL_SPI_Receive_DMA+0x28c>)
 801374a:	4013      	ands	r3, r2
 801374c:	88f9      	ldrh	r1, [r7, #6]
 801374e:	68fa      	ldr	r2, [r7, #12]
 8013750:	6812      	ldr	r2, [r2, #0]
 8013752:	430b      	orrs	r3, r1
 8013754:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	689a      	ldr	r2, [r3, #8]
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013764:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	691a      	ldr	r2, [r3, #16]
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8013774:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	681a      	ldr	r2, [r3, #0]
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	f042 0201 	orr.w	r2, r2, #1
 8013784:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	685b      	ldr	r3, [r3, #4]
 801378a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801378e:	d107      	bne.n	80137a0 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	681a      	ldr	r2, [r3, #0]
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801379e:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	2200      	movs	r2, #0
 80137a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80137a8:	2300      	movs	r3, #0
}
 80137aa:	4618      	mov	r0, r3
 80137ac:	3710      	adds	r7, #16
 80137ae:	46bd      	mov	sp, r7
 80137b0:	bd80      	pop	{r7, pc}
 80137b2:	bf00      	nop
 80137b4:	08013c1f 	.word	0x08013c1f
 80137b8:	08013bd9 	.word	0x08013bd9
 80137bc:	08013c3b 	.word	0x08013c3b
 80137c0:	ffff0000 	.word	0xffff0000

080137c4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b08a      	sub	sp, #40	; 0x28
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	691b      	ldr	r3, [r3, #16]
 80137d2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	695b      	ldr	r3, [r3, #20]
 80137da:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80137dc:	6a3a      	ldr	r2, [r7, #32]
 80137de:	69fb      	ldr	r3, [r7, #28]
 80137e0:	4013      	ands	r3, r2
 80137e2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	689b      	ldr	r3, [r3, #8]
 80137ea:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80137ec:	2300      	movs	r3, #0
 80137ee:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80137f6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	3330      	adds	r3, #48	; 0x30
 80137fe:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8013800:	69fb      	ldr	r3, [r7, #28]
 8013802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013806:	2b00      	cmp	r3, #0
 8013808:	d010      	beq.n	801382c <HAL_SPI_IRQHandler+0x68>
 801380a:	6a3b      	ldr	r3, [r7, #32]
 801380c:	f003 0308 	and.w	r3, r3, #8
 8013810:	2b00      	cmp	r3, #0
 8013812:	d00b      	beq.n	801382c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	699a      	ldr	r2, [r3, #24]
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013822:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8013824:	6878      	ldr	r0, [r7, #4]
 8013826:	f000 f9cd 	bl	8013bc4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801382a:	e192      	b.n	8013b52 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801382c:	69bb      	ldr	r3, [r7, #24]
 801382e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013832:	2b00      	cmp	r3, #0
 8013834:	d113      	bne.n	801385e <HAL_SPI_IRQHandler+0x9a>
 8013836:	69bb      	ldr	r3, [r7, #24]
 8013838:	f003 0320 	and.w	r3, r3, #32
 801383c:	2b00      	cmp	r3, #0
 801383e:	d10e      	bne.n	801385e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8013840:	69bb      	ldr	r3, [r7, #24]
 8013842:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8013846:	2b00      	cmp	r3, #0
 8013848:	d009      	beq.n	801385e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801384e:	6878      	ldr	r0, [r7, #4]
 8013850:	4798      	blx	r3
    hspi->RxISR(hspi);
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	4798      	blx	r3
    handled = 1UL;
 801385a:	2301      	movs	r3, #1
 801385c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801385e:	69bb      	ldr	r3, [r7, #24]
 8013860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013864:	2b00      	cmp	r3, #0
 8013866:	d10f      	bne.n	8013888 <HAL_SPI_IRQHandler+0xc4>
 8013868:	69bb      	ldr	r3, [r7, #24]
 801386a:	f003 0301 	and.w	r3, r3, #1
 801386e:	2b00      	cmp	r3, #0
 8013870:	d00a      	beq.n	8013888 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8013878:	2b00      	cmp	r3, #0
 801387a:	d105      	bne.n	8013888 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	4798      	blx	r3
    handled = 1UL;
 8013884:	2301      	movs	r3, #1
 8013886:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8013888:	69bb      	ldr	r3, [r7, #24]
 801388a:	f003 0320 	and.w	r3, r3, #32
 801388e:	2b00      	cmp	r3, #0
 8013890:	d10f      	bne.n	80138b2 <HAL_SPI_IRQHandler+0xee>
 8013892:	69bb      	ldr	r3, [r7, #24]
 8013894:	f003 0302 	and.w	r3, r3, #2
 8013898:	2b00      	cmp	r3, #0
 801389a:	d00a      	beq.n	80138b2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801389c:	69bb      	ldr	r3, [r7, #24]
 801389e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d105      	bne.n	80138b2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	4798      	blx	r3
    handled = 1UL;
 80138ae:	2301      	movs	r3, #1
 80138b0:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80138b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	f040 8147 	bne.w	8013b48 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80138ba:	69bb      	ldr	r3, [r7, #24]
 80138bc:	f003 0308 	and.w	r3, r3, #8
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	f000 808b 	beq.w	80139dc <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	699a      	ldr	r2, [r3, #24]
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	f042 0208 	orr.w	r2, r2, #8
 80138d4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	699a      	ldr	r2, [r3, #24]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	f042 0210 	orr.w	r2, r2, #16
 80138e4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	699a      	ldr	r2, [r3, #24]
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80138f4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	691a      	ldr	r2, [r3, #16]
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	f022 0208 	bic.w	r2, r2, #8
 8013904:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	689b      	ldr	r3, [r3, #8]
 801390c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013910:	2b00      	cmp	r3, #0
 8013912:	d13d      	bne.n	8013990 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8013914:	e036      	b.n	8013984 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	68db      	ldr	r3, [r3, #12]
 801391a:	2b0f      	cmp	r3, #15
 801391c:	d90b      	bls.n	8013936 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	681a      	ldr	r2, [r3, #0]
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013926:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8013928:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801392e:	1d1a      	adds	r2, r3, #4
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	665a      	str	r2, [r3, #100]	; 0x64
 8013934:	e01d      	b.n	8013972 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	68db      	ldr	r3, [r3, #12]
 801393a:	2b07      	cmp	r3, #7
 801393c:	d90b      	bls.n	8013956 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013942:	68fa      	ldr	r2, [r7, #12]
 8013944:	8812      	ldrh	r2, [r2, #0]
 8013946:	b292      	uxth	r2, r2
 8013948:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801394e:	1c9a      	adds	r2, r3, #2
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	665a      	str	r2, [r3, #100]	; 0x64
 8013954:	e00d      	b.n	8013972 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013962:	7812      	ldrb	r2, [r2, #0]
 8013964:	b2d2      	uxtb	r2, r2
 8013966:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801396c:	1c5a      	adds	r2, r3, #1
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013978:	b29b      	uxth	r3, r3
 801397a:	3b01      	subs	r3, #1
 801397c:	b29a      	uxth	r2, r3
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801398a:	b29b      	uxth	r3, r3
 801398c:	2b00      	cmp	r3, #0
 801398e:	d1c2      	bne.n	8013916 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f000 f98f 	bl	8013cb4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	2201      	movs	r2, #1
 801399a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d003      	beq.n	80139b0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f000 f901 	bl	8013bb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80139ae:	e0d0      	b.n	8013b52 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80139b0:	7cfb      	ldrb	r3, [r7, #19]
 80139b2:	2b05      	cmp	r3, #5
 80139b4:	d103      	bne.n	80139be <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f000 f8e6 	bl	8013b88 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80139bc:	e0c6      	b.n	8013b4c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80139be:	7cfb      	ldrb	r3, [r7, #19]
 80139c0:	2b04      	cmp	r3, #4
 80139c2:	d103      	bne.n	80139cc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f000 f8d5 	bl	8013b74 <HAL_SPI_RxCpltCallback>
    return;
 80139ca:	e0bf      	b.n	8013b4c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80139cc:	7cfb      	ldrb	r3, [r7, #19]
 80139ce:	2b03      	cmp	r3, #3
 80139d0:	f040 80bc 	bne.w	8013b4c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80139d4:	6878      	ldr	r0, [r7, #4]
 80139d6:	f000 f8c3 	bl	8013b60 <HAL_SPI_TxCpltCallback>
    return;
 80139da:	e0b7      	b.n	8013b4c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80139dc:	69bb      	ldr	r3, [r7, #24]
 80139de:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	f000 80b5 	beq.w	8013b52 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80139e8:	69bb      	ldr	r3, [r7, #24]
 80139ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d00f      	beq.n	8013a12 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80139f8:	f043 0204 	orr.w	r2, r3, #4
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	699a      	ldr	r2, [r3, #24]
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013a10:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8013a12:	69bb      	ldr	r3, [r7, #24]
 8013a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d00f      	beq.n	8013a3c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a22:	f043 0201 	orr.w	r2, r3, #1
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	699a      	ldr	r2, [r3, #24]
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013a3a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8013a3c:	69bb      	ldr	r3, [r7, #24]
 8013a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d00f      	beq.n	8013a66 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a4c:	f043 0208 	orr.w	r2, r3, #8
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	699a      	ldr	r2, [r3, #24]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013a64:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8013a66:	69bb      	ldr	r3, [r7, #24]
 8013a68:	f003 0320 	and.w	r3, r3, #32
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d00f      	beq.n	8013a90 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	699a      	ldr	r2, [r3, #24]
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	f042 0220 	orr.w	r2, r2, #32
 8013a8e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d05a      	beq.n	8013b50 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	681a      	ldr	r2, [r3, #0]
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	f022 0201 	bic.w	r2, r2, #1
 8013aa8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	6919      	ldr	r1, [r3, #16]
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681a      	ldr	r2, [r3, #0]
 8013ab4:	4b28      	ldr	r3, [pc, #160]	; (8013b58 <HAL_SPI_IRQHandler+0x394>)
 8013ab6:	400b      	ands	r3, r1
 8013ab8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013ac0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8013ac4:	d138      	bne.n	8013b38 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	689a      	ldr	r2, [r3, #8]
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8013ad4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d013      	beq.n	8013b06 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013ae2:	4a1e      	ldr	r2, [pc, #120]	; (8013b5c <HAL_SPI_IRQHandler+0x398>)
 8013ae4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013aea:	4618      	mov	r0, r3
 8013aec:	f7f6 fa4c 	bl	8009f88 <HAL_DMA_Abort_IT>
 8013af0:	4603      	mov	r3, r0
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d007      	beq.n	8013b06 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013afc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d020      	beq.n	8013b50 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b12:	4a12      	ldr	r2, [pc, #72]	; (8013b5c <HAL_SPI_IRQHandler+0x398>)
 8013b14:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f7f6 fa34 	bl	8009f88 <HAL_DMA_Abort_IT>
 8013b20:	4603      	mov	r3, r0
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d014      	beq.n	8013b50 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8013b36:	e00b      	b.n	8013b50 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	2201      	movs	r2, #1
 8013b3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8013b40:	6878      	ldr	r0, [r7, #4]
 8013b42:	f000 f835 	bl	8013bb0 <HAL_SPI_ErrorCallback>
    return;
 8013b46:	e003      	b.n	8013b50 <HAL_SPI_IRQHandler+0x38c>
    return;
 8013b48:	bf00      	nop
 8013b4a:	e002      	b.n	8013b52 <HAL_SPI_IRQHandler+0x38e>
    return;
 8013b4c:	bf00      	nop
 8013b4e:	e000      	b.n	8013b52 <HAL_SPI_IRQHandler+0x38e>
    return;
 8013b50:	bf00      	nop
  }
}
 8013b52:	3728      	adds	r7, #40	; 0x28
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}
 8013b58:	fffffc94 	.word	0xfffffc94
 8013b5c:	08013c81 	.word	0x08013c81

08013b60 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013b60:	b480      	push	{r7}
 8013b62:	b083      	sub	sp, #12
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8013b68:	bf00      	nop
 8013b6a:	370c      	adds	r7, #12
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b72:	4770      	bx	lr

08013b74 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013b74:	b480      	push	{r7}
 8013b76:	b083      	sub	sp, #12
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8013b7c:	bf00      	nop
 8013b7e:	370c      	adds	r7, #12
 8013b80:	46bd      	mov	sp, r7
 8013b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b86:	4770      	bx	lr

08013b88 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013b88:	b480      	push	{r7}
 8013b8a:	b083      	sub	sp, #12
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8013b90:	bf00      	nop
 8013b92:	370c      	adds	r7, #12
 8013b94:	46bd      	mov	sp, r7
 8013b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9a:	4770      	bx	lr

08013b9c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	b083      	sub	sp, #12
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8013ba4:	bf00      	nop
 8013ba6:	370c      	adds	r7, #12
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bae:	4770      	bx	lr

08013bb0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013bb0:	b480      	push	{r7}
 8013bb2:	b083      	sub	sp, #12
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8013bb8:	bf00      	nop
 8013bba:	370c      	adds	r7, #12
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc2:	4770      	bx	lr

08013bc4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013bc4:	b480      	push	{r7}
 8013bc6:	b083      	sub	sp, #12
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8013bcc:	bf00      	nop
 8013bce:	370c      	adds	r7, #12
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd6:	4770      	bx	lr

08013bd8 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b084      	sub	sp, #16
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013be4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013bec:	b2db      	uxtb	r3, r3
 8013bee:	2b07      	cmp	r3, #7
 8013bf0:	d011      	beq.n	8013c16 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013bf6:	69db      	ldr	r3, [r3, #28]
 8013bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013bfc:	d103      	bne.n	8013c06 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8013bfe:	68f8      	ldr	r0, [r7, #12]
 8013c00:	f7ff ffb8 	bl	8013b74 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8013c04:	e007      	b.n	8013c16 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	691a      	ldr	r2, [r3, #16]
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	f042 0208 	orr.w	r2, r2, #8
 8013c14:	611a      	str	r2, [r3, #16]
}
 8013c16:	bf00      	nop
 8013c18:	3710      	adds	r7, #16
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	bd80      	pop	{r7, pc}

08013c1e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013c1e:	b580      	push	{r7, lr}
 8013c20:	b084      	sub	sp, #16
 8013c22:	af00      	add	r7, sp, #0
 8013c24:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c2a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8013c2c:	68f8      	ldr	r0, [r7, #12]
 8013c2e:	f7ff ffb5 	bl	8013b9c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013c32:	bf00      	nop
 8013c34:	3710      	adds	r7, #16
 8013c36:	46bd      	mov	sp, r7
 8013c38:	bd80      	pop	{r7, pc}

08013c3a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8013c3a:	b580      	push	{r7, lr}
 8013c3c:	b084      	sub	sp, #16
 8013c3e:	af00      	add	r7, sp, #0
 8013c40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c46:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8013c48:	6878      	ldr	r0, [r7, #4]
 8013c4a:	f7f7 fb1b 	bl	800b284 <HAL_DMA_GetError>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	2b02      	cmp	r3, #2
 8013c52:	d011      	beq.n	8013c78 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8013c54:	68f8      	ldr	r0, [r7, #12]
 8013c56:	f000 f82d 	bl	8013cb4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c60:	f043 0210 	orr.w	r2, r3, #16
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	2201      	movs	r2, #1
 8013c6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8013c72:	68f8      	ldr	r0, [r7, #12]
 8013c74:	f7ff ff9c 	bl	8013bb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8013c78:	bf00      	nop
 8013c7a:	3710      	adds	r7, #16
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}

08013c80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b084      	sub	sp, #16
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	2200      	movs	r2, #0
 8013c92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	2200      	movs	r2, #0
 8013c9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	2201      	movs	r2, #1
 8013ca2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8013ca6:	68f8      	ldr	r0, [r7, #12]
 8013ca8:	f7ff ff82 	bl	8013bb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013cac:	bf00      	nop
 8013cae:	3710      	adds	r7, #16
 8013cb0:	46bd      	mov	sp, r7
 8013cb2:	bd80      	pop	{r7, pc}

08013cb4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8013cb4:	b480      	push	{r7}
 8013cb6:	b085      	sub	sp, #20
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	695b      	ldr	r3, [r3, #20]
 8013cc2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	699a      	ldr	r2, [r3, #24]
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	f042 0208 	orr.w	r2, r2, #8
 8013cd2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	699a      	ldr	r2, [r3, #24]
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	f042 0210 	orr.w	r2, r2, #16
 8013ce2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	681a      	ldr	r2, [r3, #0]
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	f022 0201 	bic.w	r2, r2, #1
 8013cf2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	6919      	ldr	r1, [r3, #16]
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	681a      	ldr	r2, [r3, #0]
 8013cfe:	4b3c      	ldr	r3, [pc, #240]	; (8013df0 <SPI_CloseTransfer+0x13c>)
 8013d00:	400b      	ands	r3, r1
 8013d02:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	689a      	ldr	r2, [r3, #8]
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8013d12:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013d1a:	b2db      	uxtb	r3, r3
 8013d1c:	2b04      	cmp	r3, #4
 8013d1e:	d014      	beq.n	8013d4a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	f003 0320 	and.w	r3, r3, #32
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d00f      	beq.n	8013d4a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	699a      	ldr	r2, [r3, #24]
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	f042 0220 	orr.w	r2, r2, #32
 8013d48:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013d50:	b2db      	uxtb	r3, r3
 8013d52:	2b03      	cmp	r3, #3
 8013d54:	d014      	beq.n	8013d80 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d00f      	beq.n	8013d80 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d66:	f043 0204 	orr.w	r2, r3, #4
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	699a      	ldr	r2, [r3, #24]
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013d7e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d00f      	beq.n	8013daa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d90:	f043 0201 	orr.w	r2, r3, #1
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	699a      	ldr	r2, [r3, #24]
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013da8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d00f      	beq.n	8013dd4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013dba:	f043 0208 	orr.w	r2, r3, #8
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	699a      	ldr	r2, [r3, #24]
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013dd2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	2200      	movs	r2, #0
 8013de0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8013de4:	bf00      	nop
 8013de6:	3714      	adds	r7, #20
 8013de8:	46bd      	mov	sp, r7
 8013dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dee:	4770      	bx	lr
 8013df0:	fffffc90 	.word	0xfffffc90

08013df4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8013df4:	b480      	push	{r7}
 8013df6:	b085      	sub	sp, #20
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e00:	095b      	lsrs	r3, r3, #5
 8013e02:	3301      	adds	r3, #1
 8013e04:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	68db      	ldr	r3, [r3, #12]
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8013e0e:	68bb      	ldr	r3, [r7, #8]
 8013e10:	3307      	adds	r3, #7
 8013e12:	08db      	lsrs	r3, r3, #3
 8013e14:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	68fa      	ldr	r2, [r7, #12]
 8013e1a:	fb02 f303 	mul.w	r3, r2, r3
}
 8013e1e:	4618      	mov	r0, r3
 8013e20:	3714      	adds	r7, #20
 8013e22:	46bd      	mov	sp, r7
 8013e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e28:	4770      	bx	lr

08013e2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013e2a:	b580      	push	{r7, lr}
 8013e2c:	b082      	sub	sp, #8
 8013e2e:	af00      	add	r7, sp, #0
 8013e30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d101      	bne.n	8013e3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013e38:	2301      	movs	r3, #1
 8013e3a:	e049      	b.n	8013ed0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013e42:	b2db      	uxtb	r3, r3
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d106      	bne.n	8013e56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013e50:	6878      	ldr	r0, [r7, #4]
 8013e52:	f7f1 fcf5 	bl	8005840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	2202      	movs	r2, #2
 8013e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	681a      	ldr	r2, [r3, #0]
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	3304      	adds	r3, #4
 8013e66:	4619      	mov	r1, r3
 8013e68:	4610      	mov	r0, r2
 8013e6a:	f000 fead 	bl	8014bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2201      	movs	r2, #1
 8013e72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	2201      	movs	r2, #1
 8013e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2201      	movs	r2, #1
 8013e82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	2201      	movs	r2, #1
 8013e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	2201      	movs	r2, #1
 8013e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	2201      	movs	r2, #1
 8013e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	2201      	movs	r2, #1
 8013ea2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2201      	movs	r2, #1
 8013eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	2201      	movs	r2, #1
 8013eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	2201      	movs	r2, #1
 8013eba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	2201      	movs	r2, #1
 8013ec2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	2201      	movs	r2, #1
 8013eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013ece:	2300      	movs	r3, #0
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3708      	adds	r7, #8
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013ed8:	b480      	push	{r7}
 8013eda:	b085      	sub	sp, #20
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013ee6:	b2db      	uxtb	r3, r3
 8013ee8:	2b01      	cmp	r3, #1
 8013eea:	d001      	beq.n	8013ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013eec:	2301      	movs	r3, #1
 8013eee:	e054      	b.n	8013f9a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2202      	movs	r2, #2
 8013ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	68da      	ldr	r2, [r3, #12]
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	f042 0201 	orr.w	r2, r2, #1
 8013f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	4a26      	ldr	r2, [pc, #152]	; (8013fa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8013f0e:	4293      	cmp	r3, r2
 8013f10:	d022      	beq.n	8013f58 <HAL_TIM_Base_Start_IT+0x80>
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013f1a:	d01d      	beq.n	8013f58 <HAL_TIM_Base_Start_IT+0x80>
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	4a22      	ldr	r2, [pc, #136]	; (8013fac <HAL_TIM_Base_Start_IT+0xd4>)
 8013f22:	4293      	cmp	r3, r2
 8013f24:	d018      	beq.n	8013f58 <HAL_TIM_Base_Start_IT+0x80>
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	4a21      	ldr	r2, [pc, #132]	; (8013fb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8013f2c:	4293      	cmp	r3, r2
 8013f2e:	d013      	beq.n	8013f58 <HAL_TIM_Base_Start_IT+0x80>
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	4a1f      	ldr	r2, [pc, #124]	; (8013fb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8013f36:	4293      	cmp	r3, r2
 8013f38:	d00e      	beq.n	8013f58 <HAL_TIM_Base_Start_IT+0x80>
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	4a1e      	ldr	r2, [pc, #120]	; (8013fb8 <HAL_TIM_Base_Start_IT+0xe0>)
 8013f40:	4293      	cmp	r3, r2
 8013f42:	d009      	beq.n	8013f58 <HAL_TIM_Base_Start_IT+0x80>
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	4a1c      	ldr	r2, [pc, #112]	; (8013fbc <HAL_TIM_Base_Start_IT+0xe4>)
 8013f4a:	4293      	cmp	r3, r2
 8013f4c:	d004      	beq.n	8013f58 <HAL_TIM_Base_Start_IT+0x80>
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	4a1b      	ldr	r2, [pc, #108]	; (8013fc0 <HAL_TIM_Base_Start_IT+0xe8>)
 8013f54:	4293      	cmp	r3, r2
 8013f56:	d115      	bne.n	8013f84 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	689a      	ldr	r2, [r3, #8]
 8013f5e:	4b19      	ldr	r3, [pc, #100]	; (8013fc4 <HAL_TIM_Base_Start_IT+0xec>)
 8013f60:	4013      	ands	r3, r2
 8013f62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	2b06      	cmp	r3, #6
 8013f68:	d015      	beq.n	8013f96 <HAL_TIM_Base_Start_IT+0xbe>
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013f70:	d011      	beq.n	8013f96 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	681a      	ldr	r2, [r3, #0]
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	f042 0201 	orr.w	r2, r2, #1
 8013f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013f82:	e008      	b.n	8013f96 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	681a      	ldr	r2, [r3, #0]
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	f042 0201 	orr.w	r2, r2, #1
 8013f92:	601a      	str	r2, [r3, #0]
 8013f94:	e000      	b.n	8013f98 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013f96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013f98:	2300      	movs	r3, #0
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	3714      	adds	r7, #20
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa4:	4770      	bx	lr
 8013fa6:	bf00      	nop
 8013fa8:	40010000 	.word	0x40010000
 8013fac:	40000400 	.word	0x40000400
 8013fb0:	40000800 	.word	0x40000800
 8013fb4:	40000c00 	.word	0x40000c00
 8013fb8:	40010400 	.word	0x40010400
 8013fbc:	40001800 	.word	0x40001800
 8013fc0:	40014000 	.word	0x40014000
 8013fc4:	00010007 	.word	0x00010007

08013fc8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8013fc8:	b480      	push	{r7}
 8013fca:	b083      	sub	sp, #12
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	68da      	ldr	r2, [r3, #12]
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	f022 0201 	bic.w	r2, r2, #1
 8013fde:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	6a1a      	ldr	r2, [r3, #32]
 8013fe6:	f241 1311 	movw	r3, #4369	; 0x1111
 8013fea:	4013      	ands	r3, r2
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d10f      	bne.n	8014010 <HAL_TIM_Base_Stop_IT+0x48>
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	6a1a      	ldr	r2, [r3, #32]
 8013ff6:	f240 4344 	movw	r3, #1092	; 0x444
 8013ffa:	4013      	ands	r3, r2
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d107      	bne.n	8014010 <HAL_TIM_Base_Stop_IT+0x48>
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	681a      	ldr	r2, [r3, #0]
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	f022 0201 	bic.w	r2, r2, #1
 801400e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	2201      	movs	r2, #1
 8014014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8014018:	2300      	movs	r3, #0
}
 801401a:	4618      	mov	r0, r3
 801401c:	370c      	adds	r7, #12
 801401e:	46bd      	mov	sp, r7
 8014020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014024:	4770      	bx	lr
	...

08014028 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b084      	sub	sp, #16
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
 8014030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014032:	2300      	movs	r3, #0
 8014034:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8014036:	683b      	ldr	r3, [r7, #0]
 8014038:	2b00      	cmp	r3, #0
 801403a:	d109      	bne.n	8014050 <HAL_TIM_OC_Start_IT+0x28>
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8014042:	b2db      	uxtb	r3, r3
 8014044:	2b01      	cmp	r3, #1
 8014046:	bf14      	ite	ne
 8014048:	2301      	movne	r3, #1
 801404a:	2300      	moveq	r3, #0
 801404c:	b2db      	uxtb	r3, r3
 801404e:	e03c      	b.n	80140ca <HAL_TIM_OC_Start_IT+0xa2>
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	2b04      	cmp	r3, #4
 8014054:	d109      	bne.n	801406a <HAL_TIM_OC_Start_IT+0x42>
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801405c:	b2db      	uxtb	r3, r3
 801405e:	2b01      	cmp	r3, #1
 8014060:	bf14      	ite	ne
 8014062:	2301      	movne	r3, #1
 8014064:	2300      	moveq	r3, #0
 8014066:	b2db      	uxtb	r3, r3
 8014068:	e02f      	b.n	80140ca <HAL_TIM_OC_Start_IT+0xa2>
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	2b08      	cmp	r3, #8
 801406e:	d109      	bne.n	8014084 <HAL_TIM_OC_Start_IT+0x5c>
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014076:	b2db      	uxtb	r3, r3
 8014078:	2b01      	cmp	r3, #1
 801407a:	bf14      	ite	ne
 801407c:	2301      	movne	r3, #1
 801407e:	2300      	moveq	r3, #0
 8014080:	b2db      	uxtb	r3, r3
 8014082:	e022      	b.n	80140ca <HAL_TIM_OC_Start_IT+0xa2>
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	2b0c      	cmp	r3, #12
 8014088:	d109      	bne.n	801409e <HAL_TIM_OC_Start_IT+0x76>
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014090:	b2db      	uxtb	r3, r3
 8014092:	2b01      	cmp	r3, #1
 8014094:	bf14      	ite	ne
 8014096:	2301      	movne	r3, #1
 8014098:	2300      	moveq	r3, #0
 801409a:	b2db      	uxtb	r3, r3
 801409c:	e015      	b.n	80140ca <HAL_TIM_OC_Start_IT+0xa2>
 801409e:	683b      	ldr	r3, [r7, #0]
 80140a0:	2b10      	cmp	r3, #16
 80140a2:	d109      	bne.n	80140b8 <HAL_TIM_OC_Start_IT+0x90>
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80140aa:	b2db      	uxtb	r3, r3
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	bf14      	ite	ne
 80140b0:	2301      	movne	r3, #1
 80140b2:	2300      	moveq	r3, #0
 80140b4:	b2db      	uxtb	r3, r3
 80140b6:	e008      	b.n	80140ca <HAL_TIM_OC_Start_IT+0xa2>
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80140be:	b2db      	uxtb	r3, r3
 80140c0:	2b01      	cmp	r3, #1
 80140c2:	bf14      	ite	ne
 80140c4:	2301      	movne	r3, #1
 80140c6:	2300      	moveq	r3, #0
 80140c8:	b2db      	uxtb	r3, r3
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d001      	beq.n	80140d2 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80140ce:	2301      	movs	r3, #1
 80140d0:	e0ec      	b.n	80142ac <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80140d2:	683b      	ldr	r3, [r7, #0]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d104      	bne.n	80140e2 <HAL_TIM_OC_Start_IT+0xba>
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	2202      	movs	r2, #2
 80140dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80140e0:	e023      	b.n	801412a <HAL_TIM_OC_Start_IT+0x102>
 80140e2:	683b      	ldr	r3, [r7, #0]
 80140e4:	2b04      	cmp	r3, #4
 80140e6:	d104      	bne.n	80140f2 <HAL_TIM_OC_Start_IT+0xca>
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2202      	movs	r2, #2
 80140ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80140f0:	e01b      	b.n	801412a <HAL_TIM_OC_Start_IT+0x102>
 80140f2:	683b      	ldr	r3, [r7, #0]
 80140f4:	2b08      	cmp	r3, #8
 80140f6:	d104      	bne.n	8014102 <HAL_TIM_OC_Start_IT+0xda>
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2202      	movs	r2, #2
 80140fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014100:	e013      	b.n	801412a <HAL_TIM_OC_Start_IT+0x102>
 8014102:	683b      	ldr	r3, [r7, #0]
 8014104:	2b0c      	cmp	r3, #12
 8014106:	d104      	bne.n	8014112 <HAL_TIM_OC_Start_IT+0xea>
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	2202      	movs	r2, #2
 801410c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014110:	e00b      	b.n	801412a <HAL_TIM_OC_Start_IT+0x102>
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	2b10      	cmp	r3, #16
 8014116:	d104      	bne.n	8014122 <HAL_TIM_OC_Start_IT+0xfa>
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	2202      	movs	r2, #2
 801411c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014120:	e003      	b.n	801412a <HAL_TIM_OC_Start_IT+0x102>
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	2202      	movs	r2, #2
 8014126:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 801412a:	683b      	ldr	r3, [r7, #0]
 801412c:	2b0c      	cmp	r3, #12
 801412e:	d841      	bhi.n	80141b4 <HAL_TIM_OC_Start_IT+0x18c>
 8014130:	a201      	add	r2, pc, #4	; (adr r2, 8014138 <HAL_TIM_OC_Start_IT+0x110>)
 8014132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014136:	bf00      	nop
 8014138:	0801416d 	.word	0x0801416d
 801413c:	080141b5 	.word	0x080141b5
 8014140:	080141b5 	.word	0x080141b5
 8014144:	080141b5 	.word	0x080141b5
 8014148:	0801417f 	.word	0x0801417f
 801414c:	080141b5 	.word	0x080141b5
 8014150:	080141b5 	.word	0x080141b5
 8014154:	080141b5 	.word	0x080141b5
 8014158:	08014191 	.word	0x08014191
 801415c:	080141b5 	.word	0x080141b5
 8014160:	080141b5 	.word	0x080141b5
 8014164:	080141b5 	.word	0x080141b5
 8014168:	080141a3 	.word	0x080141a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	68da      	ldr	r2, [r3, #12]
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	f042 0202 	orr.w	r2, r2, #2
 801417a:	60da      	str	r2, [r3, #12]
      break;
 801417c:	e01d      	b.n	80141ba <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	68da      	ldr	r2, [r3, #12]
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	f042 0204 	orr.w	r2, r2, #4
 801418c:	60da      	str	r2, [r3, #12]
      break;
 801418e:	e014      	b.n	80141ba <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	68da      	ldr	r2, [r3, #12]
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	f042 0208 	orr.w	r2, r2, #8
 801419e:	60da      	str	r2, [r3, #12]
      break;
 80141a0:	e00b      	b.n	80141ba <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	68da      	ldr	r2, [r3, #12]
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	f042 0210 	orr.w	r2, r2, #16
 80141b0:	60da      	str	r2, [r3, #12]
      break;
 80141b2:	e002      	b.n	80141ba <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80141b4:	2301      	movs	r3, #1
 80141b6:	73fb      	strb	r3, [r7, #15]
      break;
 80141b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80141ba:	7bfb      	ldrb	r3, [r7, #15]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d174      	bne.n	80142aa <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	2201      	movs	r2, #1
 80141c6:	6839      	ldr	r1, [r7, #0]
 80141c8:	4618      	mov	r0, r3
 80141ca:	f001 f917 	bl	80153fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	4a38      	ldr	r2, [pc, #224]	; (80142b4 <HAL_TIM_OC_Start_IT+0x28c>)
 80141d4:	4293      	cmp	r3, r2
 80141d6:	d013      	beq.n	8014200 <HAL_TIM_OC_Start_IT+0x1d8>
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	4a36      	ldr	r2, [pc, #216]	; (80142b8 <HAL_TIM_OC_Start_IT+0x290>)
 80141de:	4293      	cmp	r3, r2
 80141e0:	d00e      	beq.n	8014200 <HAL_TIM_OC_Start_IT+0x1d8>
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	4a35      	ldr	r2, [pc, #212]	; (80142bc <HAL_TIM_OC_Start_IT+0x294>)
 80141e8:	4293      	cmp	r3, r2
 80141ea:	d009      	beq.n	8014200 <HAL_TIM_OC_Start_IT+0x1d8>
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	4a33      	ldr	r2, [pc, #204]	; (80142c0 <HAL_TIM_OC_Start_IT+0x298>)
 80141f2:	4293      	cmp	r3, r2
 80141f4:	d004      	beq.n	8014200 <HAL_TIM_OC_Start_IT+0x1d8>
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	4a32      	ldr	r2, [pc, #200]	; (80142c4 <HAL_TIM_OC_Start_IT+0x29c>)
 80141fc:	4293      	cmp	r3, r2
 80141fe:	d101      	bne.n	8014204 <HAL_TIM_OC_Start_IT+0x1dc>
 8014200:	2301      	movs	r3, #1
 8014202:	e000      	b.n	8014206 <HAL_TIM_OC_Start_IT+0x1de>
 8014204:	2300      	movs	r3, #0
 8014206:	2b00      	cmp	r3, #0
 8014208:	d007      	beq.n	801421a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014218:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	4a25      	ldr	r2, [pc, #148]	; (80142b4 <HAL_TIM_OC_Start_IT+0x28c>)
 8014220:	4293      	cmp	r3, r2
 8014222:	d022      	beq.n	801426a <HAL_TIM_OC_Start_IT+0x242>
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801422c:	d01d      	beq.n	801426a <HAL_TIM_OC_Start_IT+0x242>
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	4a25      	ldr	r2, [pc, #148]	; (80142c8 <HAL_TIM_OC_Start_IT+0x2a0>)
 8014234:	4293      	cmp	r3, r2
 8014236:	d018      	beq.n	801426a <HAL_TIM_OC_Start_IT+0x242>
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	4a23      	ldr	r2, [pc, #140]	; (80142cc <HAL_TIM_OC_Start_IT+0x2a4>)
 801423e:	4293      	cmp	r3, r2
 8014240:	d013      	beq.n	801426a <HAL_TIM_OC_Start_IT+0x242>
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	4a22      	ldr	r2, [pc, #136]	; (80142d0 <HAL_TIM_OC_Start_IT+0x2a8>)
 8014248:	4293      	cmp	r3, r2
 801424a:	d00e      	beq.n	801426a <HAL_TIM_OC_Start_IT+0x242>
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	4a19      	ldr	r2, [pc, #100]	; (80142b8 <HAL_TIM_OC_Start_IT+0x290>)
 8014252:	4293      	cmp	r3, r2
 8014254:	d009      	beq.n	801426a <HAL_TIM_OC_Start_IT+0x242>
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	4a1e      	ldr	r2, [pc, #120]	; (80142d4 <HAL_TIM_OC_Start_IT+0x2ac>)
 801425c:	4293      	cmp	r3, r2
 801425e:	d004      	beq.n	801426a <HAL_TIM_OC_Start_IT+0x242>
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	4a15      	ldr	r2, [pc, #84]	; (80142bc <HAL_TIM_OC_Start_IT+0x294>)
 8014266:	4293      	cmp	r3, r2
 8014268:	d115      	bne.n	8014296 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	689a      	ldr	r2, [r3, #8]
 8014270:	4b19      	ldr	r3, [pc, #100]	; (80142d8 <HAL_TIM_OC_Start_IT+0x2b0>)
 8014272:	4013      	ands	r3, r2
 8014274:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	2b06      	cmp	r3, #6
 801427a:	d015      	beq.n	80142a8 <HAL_TIM_OC_Start_IT+0x280>
 801427c:	68bb      	ldr	r3, [r7, #8]
 801427e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014282:	d011      	beq.n	80142a8 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	681a      	ldr	r2, [r3, #0]
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	f042 0201 	orr.w	r2, r2, #1
 8014292:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014294:	e008      	b.n	80142a8 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	681a      	ldr	r2, [r3, #0]
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	f042 0201 	orr.w	r2, r2, #1
 80142a4:	601a      	str	r2, [r3, #0]
 80142a6:	e000      	b.n	80142aa <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80142a8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80142aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80142ac:	4618      	mov	r0, r3
 80142ae:	3710      	adds	r7, #16
 80142b0:	46bd      	mov	sp, r7
 80142b2:	bd80      	pop	{r7, pc}
 80142b4:	40010000 	.word	0x40010000
 80142b8:	40010400 	.word	0x40010400
 80142bc:	40014000 	.word	0x40014000
 80142c0:	40014400 	.word	0x40014400
 80142c4:	40014800 	.word	0x40014800
 80142c8:	40000400 	.word	0x40000400
 80142cc:	40000800 	.word	0x40000800
 80142d0:	40000c00 	.word	0x40000c00
 80142d4:	40001800 	.word	0x40001800
 80142d8:	00010007 	.word	0x00010007

080142dc <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b084      	sub	sp, #16
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
 80142e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80142e6:	2300      	movs	r3, #0
 80142e8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	2b0c      	cmp	r3, #12
 80142ee:	d841      	bhi.n	8014374 <HAL_TIM_OC_Stop_IT+0x98>
 80142f0:	a201      	add	r2, pc, #4	; (adr r2, 80142f8 <HAL_TIM_OC_Stop_IT+0x1c>)
 80142f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142f6:	bf00      	nop
 80142f8:	0801432d 	.word	0x0801432d
 80142fc:	08014375 	.word	0x08014375
 8014300:	08014375 	.word	0x08014375
 8014304:	08014375 	.word	0x08014375
 8014308:	0801433f 	.word	0x0801433f
 801430c:	08014375 	.word	0x08014375
 8014310:	08014375 	.word	0x08014375
 8014314:	08014375 	.word	0x08014375
 8014318:	08014351 	.word	0x08014351
 801431c:	08014375 	.word	0x08014375
 8014320:	08014375 	.word	0x08014375
 8014324:	08014375 	.word	0x08014375
 8014328:	08014363 	.word	0x08014363
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	68da      	ldr	r2, [r3, #12]
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	f022 0202 	bic.w	r2, r2, #2
 801433a:	60da      	str	r2, [r3, #12]
      break;
 801433c:	e01d      	b.n	801437a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	681b      	ldr	r3, [r3, #0]
 8014342:	68da      	ldr	r2, [r3, #12]
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	f022 0204 	bic.w	r2, r2, #4
 801434c:	60da      	str	r2, [r3, #12]
      break;
 801434e:	e014      	b.n	801437a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	68da      	ldr	r2, [r3, #12]
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	f022 0208 	bic.w	r2, r2, #8
 801435e:	60da      	str	r2, [r3, #12]
      break;
 8014360:	e00b      	b.n	801437a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	68da      	ldr	r2, [r3, #12]
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	f022 0210 	bic.w	r2, r2, #16
 8014370:	60da      	str	r2, [r3, #12]
      break;
 8014372:	e002      	b.n	801437a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8014374:	2301      	movs	r3, #1
 8014376:	73fb      	strb	r3, [r7, #15]
      break;
 8014378:	bf00      	nop
  }

  if (status == HAL_OK)
 801437a:	7bfb      	ldrb	r3, [r7, #15]
 801437c:	2b00      	cmp	r3, #0
 801437e:	f040 8081 	bne.w	8014484 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	2200      	movs	r2, #0
 8014388:	6839      	ldr	r1, [r7, #0]
 801438a:	4618      	mov	r0, r3
 801438c:	f001 f836 	bl	80153fc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	4a3e      	ldr	r2, [pc, #248]	; (8014490 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8014396:	4293      	cmp	r3, r2
 8014398:	d013      	beq.n	80143c2 <HAL_TIM_OC_Stop_IT+0xe6>
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	4a3d      	ldr	r2, [pc, #244]	; (8014494 <HAL_TIM_OC_Stop_IT+0x1b8>)
 80143a0:	4293      	cmp	r3, r2
 80143a2:	d00e      	beq.n	80143c2 <HAL_TIM_OC_Stop_IT+0xe6>
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	4a3b      	ldr	r2, [pc, #236]	; (8014498 <HAL_TIM_OC_Stop_IT+0x1bc>)
 80143aa:	4293      	cmp	r3, r2
 80143ac:	d009      	beq.n	80143c2 <HAL_TIM_OC_Stop_IT+0xe6>
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	4a3a      	ldr	r2, [pc, #232]	; (801449c <HAL_TIM_OC_Stop_IT+0x1c0>)
 80143b4:	4293      	cmp	r3, r2
 80143b6:	d004      	beq.n	80143c2 <HAL_TIM_OC_Stop_IT+0xe6>
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	4a38      	ldr	r2, [pc, #224]	; (80144a0 <HAL_TIM_OC_Stop_IT+0x1c4>)
 80143be:	4293      	cmp	r3, r2
 80143c0:	d101      	bne.n	80143c6 <HAL_TIM_OC_Stop_IT+0xea>
 80143c2:	2301      	movs	r3, #1
 80143c4:	e000      	b.n	80143c8 <HAL_TIM_OC_Stop_IT+0xec>
 80143c6:	2300      	movs	r3, #0
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d017      	beq.n	80143fc <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	6a1a      	ldr	r2, [r3, #32]
 80143d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80143d6:	4013      	ands	r3, r2
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d10f      	bne.n	80143fc <HAL_TIM_OC_Stop_IT+0x120>
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	6a1a      	ldr	r2, [r3, #32]
 80143e2:	f240 4344 	movw	r3, #1092	; 0x444
 80143e6:	4013      	ands	r3, r2
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d107      	bne.n	80143fc <HAL_TIM_OC_Stop_IT+0x120>
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80143fa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	6a1a      	ldr	r2, [r3, #32]
 8014402:	f241 1311 	movw	r3, #4369	; 0x1111
 8014406:	4013      	ands	r3, r2
 8014408:	2b00      	cmp	r3, #0
 801440a:	d10f      	bne.n	801442c <HAL_TIM_OC_Stop_IT+0x150>
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	6a1a      	ldr	r2, [r3, #32]
 8014412:	f240 4344 	movw	r3, #1092	; 0x444
 8014416:	4013      	ands	r3, r2
 8014418:	2b00      	cmp	r3, #0
 801441a:	d107      	bne.n	801442c <HAL_TIM_OC_Stop_IT+0x150>
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	681a      	ldr	r2, [r3, #0]
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	f022 0201 	bic.w	r2, r2, #1
 801442a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801442c:	683b      	ldr	r3, [r7, #0]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d104      	bne.n	801443c <HAL_TIM_OC_Stop_IT+0x160>
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	2201      	movs	r2, #1
 8014436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801443a:	e023      	b.n	8014484 <HAL_TIM_OC_Stop_IT+0x1a8>
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	2b04      	cmp	r3, #4
 8014440:	d104      	bne.n	801444c <HAL_TIM_OC_Stop_IT+0x170>
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	2201      	movs	r2, #1
 8014446:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801444a:	e01b      	b.n	8014484 <HAL_TIM_OC_Stop_IT+0x1a8>
 801444c:	683b      	ldr	r3, [r7, #0]
 801444e:	2b08      	cmp	r3, #8
 8014450:	d104      	bne.n	801445c <HAL_TIM_OC_Stop_IT+0x180>
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	2201      	movs	r2, #1
 8014456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801445a:	e013      	b.n	8014484 <HAL_TIM_OC_Stop_IT+0x1a8>
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	2b0c      	cmp	r3, #12
 8014460:	d104      	bne.n	801446c <HAL_TIM_OC_Stop_IT+0x190>
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	2201      	movs	r2, #1
 8014466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801446a:	e00b      	b.n	8014484 <HAL_TIM_OC_Stop_IT+0x1a8>
 801446c:	683b      	ldr	r3, [r7, #0]
 801446e:	2b10      	cmp	r3, #16
 8014470:	d104      	bne.n	801447c <HAL_TIM_OC_Stop_IT+0x1a0>
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	2201      	movs	r2, #1
 8014476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801447a:	e003      	b.n	8014484 <HAL_TIM_OC_Stop_IT+0x1a8>
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	2201      	movs	r2, #1
 8014480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8014484:	7bfb      	ldrb	r3, [r7, #15]
}
 8014486:	4618      	mov	r0, r3
 8014488:	3710      	adds	r7, #16
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}
 801448e:	bf00      	nop
 8014490:	40010000 	.word	0x40010000
 8014494:	40010400 	.word	0x40010400
 8014498:	40014000 	.word	0x40014000
 801449c:	40014400 	.word	0x40014400
 80144a0:	40014800 	.word	0x40014800

080144a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b082      	sub	sp, #8
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d101      	bne.n	80144b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80144b2:	2301      	movs	r3, #1
 80144b4:	e049      	b.n	801454a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80144bc:	b2db      	uxtb	r3, r3
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d106      	bne.n	80144d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	2200      	movs	r2, #0
 80144c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80144ca:	6878      	ldr	r0, [r7, #4]
 80144cc:	f000 f841 	bl	8014552 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	2202      	movs	r2, #2
 80144d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	681a      	ldr	r2, [r3, #0]
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	3304      	adds	r3, #4
 80144e0:	4619      	mov	r1, r3
 80144e2:	4610      	mov	r0, r2
 80144e4:	f000 fb70 	bl	8014bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	2201      	movs	r2, #1
 80144ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	2201      	movs	r2, #1
 80144f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2201      	movs	r2, #1
 80144fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	2201      	movs	r2, #1
 8014504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	2201      	movs	r2, #1
 801450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	2201      	movs	r2, #1
 8014514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	2201      	movs	r2, #1
 801451c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	2201      	movs	r2, #1
 8014524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2201      	movs	r2, #1
 801452c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2201      	movs	r2, #1
 8014534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	2201      	movs	r2, #1
 801453c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	2201      	movs	r2, #1
 8014544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014548:	2300      	movs	r3, #0
}
 801454a:	4618      	mov	r0, r3
 801454c:	3708      	adds	r7, #8
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}

08014552 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8014552:	b480      	push	{r7}
 8014554:	b083      	sub	sp, #12
 8014556:	af00      	add	r7, sp, #0
 8014558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801455a:	bf00      	nop
 801455c:	370c      	adds	r7, #12
 801455e:	46bd      	mov	sp, r7
 8014560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014564:	4770      	bx	lr

08014566 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014566:	b580      	push	{r7, lr}
 8014568:	b084      	sub	sp, #16
 801456a:	af00      	add	r7, sp, #0
 801456c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	68db      	ldr	r3, [r3, #12]
 8014574:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	691b      	ldr	r3, [r3, #16]
 801457c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801457e:	68bb      	ldr	r3, [r7, #8]
 8014580:	f003 0302 	and.w	r3, r3, #2
 8014584:	2b00      	cmp	r3, #0
 8014586:	d020      	beq.n	80145ca <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	f003 0302 	and.w	r3, r3, #2
 801458e:	2b00      	cmp	r3, #0
 8014590:	d01b      	beq.n	80145ca <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	f06f 0202 	mvn.w	r2, #2
 801459a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	2201      	movs	r2, #1
 80145a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	699b      	ldr	r3, [r3, #24]
 80145a8:	f003 0303 	and.w	r3, r3, #3
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d003      	beq.n	80145b8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80145b0:	6878      	ldr	r0, [r7, #4]
 80145b2:	f000 faeb 	bl	8014b8c <HAL_TIM_IC_CaptureCallback>
 80145b6:	e005      	b.n	80145c4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f7ee fbd7 	bl	8002d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	f000 faee 	bl	8014ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	2200      	movs	r2, #0
 80145c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80145ca:	68bb      	ldr	r3, [r7, #8]
 80145cc:	f003 0304 	and.w	r3, r3, #4
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d020      	beq.n	8014616 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	f003 0304 	and.w	r3, r3, #4
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d01b      	beq.n	8014616 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	f06f 0204 	mvn.w	r2, #4
 80145e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	2202      	movs	r2, #2
 80145ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	699b      	ldr	r3, [r3, #24]
 80145f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d003      	beq.n	8014604 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f000 fac5 	bl	8014b8c <HAL_TIM_IC_CaptureCallback>
 8014602:	e005      	b.n	8014610 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014604:	6878      	ldr	r0, [r7, #4]
 8014606:	f7ee fbb1 	bl	8002d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	f000 fac8 	bl	8014ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2200      	movs	r2, #0
 8014614:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8014616:	68bb      	ldr	r3, [r7, #8]
 8014618:	f003 0308 	and.w	r3, r3, #8
 801461c:	2b00      	cmp	r3, #0
 801461e:	d020      	beq.n	8014662 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	f003 0308 	and.w	r3, r3, #8
 8014626:	2b00      	cmp	r3, #0
 8014628:	d01b      	beq.n	8014662 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	f06f 0208 	mvn.w	r2, #8
 8014632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	2204      	movs	r2, #4
 8014638:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	69db      	ldr	r3, [r3, #28]
 8014640:	f003 0303 	and.w	r3, r3, #3
 8014644:	2b00      	cmp	r3, #0
 8014646:	d003      	beq.n	8014650 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f000 fa9f 	bl	8014b8c <HAL_TIM_IC_CaptureCallback>
 801464e:	e005      	b.n	801465c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014650:	6878      	ldr	r0, [r7, #4]
 8014652:	f7ee fb8b 	bl	8002d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014656:	6878      	ldr	r0, [r7, #4]
 8014658:	f000 faa2 	bl	8014ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	2200      	movs	r2, #0
 8014660:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8014662:	68bb      	ldr	r3, [r7, #8]
 8014664:	f003 0310 	and.w	r3, r3, #16
 8014668:	2b00      	cmp	r3, #0
 801466a:	d020      	beq.n	80146ae <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	f003 0310 	and.w	r3, r3, #16
 8014672:	2b00      	cmp	r3, #0
 8014674:	d01b      	beq.n	80146ae <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	f06f 0210 	mvn.w	r2, #16
 801467e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	2208      	movs	r2, #8
 8014684:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	69db      	ldr	r3, [r3, #28]
 801468c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014690:	2b00      	cmp	r3, #0
 8014692:	d003      	beq.n	801469c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	f000 fa79 	bl	8014b8c <HAL_TIM_IC_CaptureCallback>
 801469a:	e005      	b.n	80146a8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f7ee fb65 	bl	8002d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80146a2:	6878      	ldr	r0, [r7, #4]
 80146a4:	f000 fa7c 	bl	8014ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	2200      	movs	r2, #0
 80146ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	f003 0301 	and.w	r3, r3, #1
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d00c      	beq.n	80146d2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	f003 0301 	and.w	r3, r3, #1
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d007      	beq.n	80146d2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	f06f 0201 	mvn.w	r2, #1
 80146ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80146cc:	6878      	ldr	r0, [r7, #4]
 80146ce:	f7ef f98d 	bl	80039ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d104      	bne.n	80146e6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80146dc:	68bb      	ldr	r3, [r7, #8]
 80146de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d00c      	beq.n	8014700 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d007      	beq.n	8014700 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80146f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f000 ffba 	bl	8015674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014706:	2b00      	cmp	r3, #0
 8014708:	d00c      	beq.n	8014724 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014710:	2b00      	cmp	r3, #0
 8014712:	d007      	beq.n	8014724 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801471c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801471e:	6878      	ldr	r0, [r7, #4]
 8014720:	f000 ffb2 	bl	8015688 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8014724:	68bb      	ldr	r3, [r7, #8]
 8014726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801472a:	2b00      	cmp	r3, #0
 801472c:	d00c      	beq.n	8014748 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014734:	2b00      	cmp	r3, #0
 8014736:	d007      	beq.n	8014748 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8014742:	6878      	ldr	r0, [r7, #4]
 8014744:	f000 fa36 	bl	8014bb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8014748:	68bb      	ldr	r3, [r7, #8]
 801474a:	f003 0320 	and.w	r3, r3, #32
 801474e:	2b00      	cmp	r3, #0
 8014750:	d00c      	beq.n	801476c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	f003 0320 	and.w	r3, r3, #32
 8014758:	2b00      	cmp	r3, #0
 801475a:	d007      	beq.n	801476c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	f06f 0220 	mvn.w	r2, #32
 8014764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014766:	6878      	ldr	r0, [r7, #4]
 8014768:	f000 ff7a 	bl	8015660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801476c:	bf00      	nop
 801476e:	3710      	adds	r7, #16
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}

08014774 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b086      	sub	sp, #24
 8014778:	af00      	add	r7, sp, #0
 801477a:	60f8      	str	r0, [r7, #12]
 801477c:	60b9      	str	r1, [r7, #8]
 801477e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014780:	2300      	movs	r3, #0
 8014782:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801478a:	2b01      	cmp	r3, #1
 801478c:	d101      	bne.n	8014792 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801478e:	2302      	movs	r3, #2
 8014790:	e0ff      	b.n	8014992 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	2201      	movs	r2, #1
 8014796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	2b14      	cmp	r3, #20
 801479e:	f200 80f0 	bhi.w	8014982 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80147a2:	a201      	add	r2, pc, #4	; (adr r2, 80147a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80147a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147a8:	080147fd 	.word	0x080147fd
 80147ac:	08014983 	.word	0x08014983
 80147b0:	08014983 	.word	0x08014983
 80147b4:	08014983 	.word	0x08014983
 80147b8:	0801483d 	.word	0x0801483d
 80147bc:	08014983 	.word	0x08014983
 80147c0:	08014983 	.word	0x08014983
 80147c4:	08014983 	.word	0x08014983
 80147c8:	0801487f 	.word	0x0801487f
 80147cc:	08014983 	.word	0x08014983
 80147d0:	08014983 	.word	0x08014983
 80147d4:	08014983 	.word	0x08014983
 80147d8:	080148bf 	.word	0x080148bf
 80147dc:	08014983 	.word	0x08014983
 80147e0:	08014983 	.word	0x08014983
 80147e4:	08014983 	.word	0x08014983
 80147e8:	08014901 	.word	0x08014901
 80147ec:	08014983 	.word	0x08014983
 80147f0:	08014983 	.word	0x08014983
 80147f4:	08014983 	.word	0x08014983
 80147f8:	08014941 	.word	0x08014941
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	68b9      	ldr	r1, [r7, #8]
 8014802:	4618      	mov	r0, r3
 8014804:	f000 fa86 	bl	8014d14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	699a      	ldr	r2, [r3, #24]
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	f042 0208 	orr.w	r2, r2, #8
 8014816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	699a      	ldr	r2, [r3, #24]
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	f022 0204 	bic.w	r2, r2, #4
 8014826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	6999      	ldr	r1, [r3, #24]
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	691a      	ldr	r2, [r3, #16]
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	430a      	orrs	r2, r1
 8014838:	619a      	str	r2, [r3, #24]
      break;
 801483a:	e0a5      	b.n	8014988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	68b9      	ldr	r1, [r7, #8]
 8014842:	4618      	mov	r0, r3
 8014844:	f000 faf6 	bl	8014e34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	699a      	ldr	r2, [r3, #24]
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	699a      	ldr	r2, [r3, #24]
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	6999      	ldr	r1, [r3, #24]
 801486e:	68bb      	ldr	r3, [r7, #8]
 8014870:	691b      	ldr	r3, [r3, #16]
 8014872:	021a      	lsls	r2, r3, #8
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	430a      	orrs	r2, r1
 801487a:	619a      	str	r2, [r3, #24]
      break;
 801487c:	e084      	b.n	8014988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	68b9      	ldr	r1, [r7, #8]
 8014884:	4618      	mov	r0, r3
 8014886:	f000 fb5f 	bl	8014f48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	69da      	ldr	r2, [r3, #28]
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	f042 0208 	orr.w	r2, r2, #8
 8014898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	69da      	ldr	r2, [r3, #28]
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	f022 0204 	bic.w	r2, r2, #4
 80148a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	69d9      	ldr	r1, [r3, #28]
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	691a      	ldr	r2, [r3, #16]
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	430a      	orrs	r2, r1
 80148ba:	61da      	str	r2, [r3, #28]
      break;
 80148bc:	e064      	b.n	8014988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	68b9      	ldr	r1, [r7, #8]
 80148c4:	4618      	mov	r0, r3
 80148c6:	f000 fbc7 	bl	8015058 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	69da      	ldr	r2, [r3, #28]
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80148d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	69da      	ldr	r2, [r3, #28]
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80148e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	69d9      	ldr	r1, [r3, #28]
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	691b      	ldr	r3, [r3, #16]
 80148f4:	021a      	lsls	r2, r3, #8
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	430a      	orrs	r2, r1
 80148fc:	61da      	str	r2, [r3, #28]
      break;
 80148fe:	e043      	b.n	8014988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	68b9      	ldr	r1, [r7, #8]
 8014906:	4618      	mov	r0, r3
 8014908:	f000 fc10 	bl	801512c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	f042 0208 	orr.w	r2, r2, #8
 801491a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	f022 0204 	bic.w	r2, r2, #4
 801492a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8014932:	68bb      	ldr	r3, [r7, #8]
 8014934:	691a      	ldr	r2, [r3, #16]
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	430a      	orrs	r2, r1
 801493c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801493e:	e023      	b.n	8014988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	68b9      	ldr	r1, [r7, #8]
 8014946:	4618      	mov	r0, r3
 8014948:	f000 fc54 	bl	80151f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801495a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801496a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8014972:	68bb      	ldr	r3, [r7, #8]
 8014974:	691b      	ldr	r3, [r3, #16]
 8014976:	021a      	lsls	r2, r3, #8
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	430a      	orrs	r2, r1
 801497e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014980:	e002      	b.n	8014988 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8014982:	2301      	movs	r3, #1
 8014984:	75fb      	strb	r3, [r7, #23]
      break;
 8014986:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	2200      	movs	r2, #0
 801498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014990:	7dfb      	ldrb	r3, [r7, #23]
}
 8014992:	4618      	mov	r0, r3
 8014994:	3718      	adds	r7, #24
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}
 801499a:	bf00      	nop

0801499c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b084      	sub	sp, #16
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
 80149a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80149a6:	2300      	movs	r3, #0
 80149a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80149b0:	2b01      	cmp	r3, #1
 80149b2:	d101      	bne.n	80149b8 <HAL_TIM_ConfigClockSource+0x1c>
 80149b4:	2302      	movs	r3, #2
 80149b6:	e0dc      	b.n	8014b72 <HAL_TIM_ConfigClockSource+0x1d6>
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	2201      	movs	r2, #1
 80149bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	2202      	movs	r2, #2
 80149c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	689b      	ldr	r3, [r3, #8]
 80149ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80149d0:	68ba      	ldr	r2, [r7, #8]
 80149d2:	4b6a      	ldr	r3, [pc, #424]	; (8014b7c <HAL_TIM_ConfigClockSource+0x1e0>)
 80149d4:	4013      	ands	r3, r2
 80149d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80149d8:	68bb      	ldr	r3, [r7, #8]
 80149da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80149de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	68ba      	ldr	r2, [r7, #8]
 80149e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80149e8:	683b      	ldr	r3, [r7, #0]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	4a64      	ldr	r2, [pc, #400]	; (8014b80 <HAL_TIM_ConfigClockSource+0x1e4>)
 80149ee:	4293      	cmp	r3, r2
 80149f0:	f000 80a9 	beq.w	8014b46 <HAL_TIM_ConfigClockSource+0x1aa>
 80149f4:	4a62      	ldr	r2, [pc, #392]	; (8014b80 <HAL_TIM_ConfigClockSource+0x1e4>)
 80149f6:	4293      	cmp	r3, r2
 80149f8:	f200 80ae 	bhi.w	8014b58 <HAL_TIM_ConfigClockSource+0x1bc>
 80149fc:	4a61      	ldr	r2, [pc, #388]	; (8014b84 <HAL_TIM_ConfigClockSource+0x1e8>)
 80149fe:	4293      	cmp	r3, r2
 8014a00:	f000 80a1 	beq.w	8014b46 <HAL_TIM_ConfigClockSource+0x1aa>
 8014a04:	4a5f      	ldr	r2, [pc, #380]	; (8014b84 <HAL_TIM_ConfigClockSource+0x1e8>)
 8014a06:	4293      	cmp	r3, r2
 8014a08:	f200 80a6 	bhi.w	8014b58 <HAL_TIM_ConfigClockSource+0x1bc>
 8014a0c:	4a5e      	ldr	r2, [pc, #376]	; (8014b88 <HAL_TIM_ConfigClockSource+0x1ec>)
 8014a0e:	4293      	cmp	r3, r2
 8014a10:	f000 8099 	beq.w	8014b46 <HAL_TIM_ConfigClockSource+0x1aa>
 8014a14:	4a5c      	ldr	r2, [pc, #368]	; (8014b88 <HAL_TIM_ConfigClockSource+0x1ec>)
 8014a16:	4293      	cmp	r3, r2
 8014a18:	f200 809e 	bhi.w	8014b58 <HAL_TIM_ConfigClockSource+0x1bc>
 8014a1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8014a20:	f000 8091 	beq.w	8014b46 <HAL_TIM_ConfigClockSource+0x1aa>
 8014a24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8014a28:	f200 8096 	bhi.w	8014b58 <HAL_TIM_ConfigClockSource+0x1bc>
 8014a2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014a30:	f000 8089 	beq.w	8014b46 <HAL_TIM_ConfigClockSource+0x1aa>
 8014a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014a38:	f200 808e 	bhi.w	8014b58 <HAL_TIM_ConfigClockSource+0x1bc>
 8014a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014a40:	d03e      	beq.n	8014ac0 <HAL_TIM_ConfigClockSource+0x124>
 8014a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014a46:	f200 8087 	bhi.w	8014b58 <HAL_TIM_ConfigClockSource+0x1bc>
 8014a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014a4e:	f000 8086 	beq.w	8014b5e <HAL_TIM_ConfigClockSource+0x1c2>
 8014a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014a56:	d87f      	bhi.n	8014b58 <HAL_TIM_ConfigClockSource+0x1bc>
 8014a58:	2b70      	cmp	r3, #112	; 0x70
 8014a5a:	d01a      	beq.n	8014a92 <HAL_TIM_ConfigClockSource+0xf6>
 8014a5c:	2b70      	cmp	r3, #112	; 0x70
 8014a5e:	d87b      	bhi.n	8014b58 <HAL_TIM_ConfigClockSource+0x1bc>
 8014a60:	2b60      	cmp	r3, #96	; 0x60
 8014a62:	d050      	beq.n	8014b06 <HAL_TIM_ConfigClockSource+0x16a>
 8014a64:	2b60      	cmp	r3, #96	; 0x60
 8014a66:	d877      	bhi.n	8014b58 <HAL_TIM_ConfigClockSource+0x1bc>
 8014a68:	2b50      	cmp	r3, #80	; 0x50
 8014a6a:	d03c      	beq.n	8014ae6 <HAL_TIM_ConfigClockSource+0x14a>
 8014a6c:	2b50      	cmp	r3, #80	; 0x50
 8014a6e:	d873      	bhi.n	8014b58 <HAL_TIM_ConfigClockSource+0x1bc>
 8014a70:	2b40      	cmp	r3, #64	; 0x40
 8014a72:	d058      	beq.n	8014b26 <HAL_TIM_ConfigClockSource+0x18a>
 8014a74:	2b40      	cmp	r3, #64	; 0x40
 8014a76:	d86f      	bhi.n	8014b58 <HAL_TIM_ConfigClockSource+0x1bc>
 8014a78:	2b30      	cmp	r3, #48	; 0x30
 8014a7a:	d064      	beq.n	8014b46 <HAL_TIM_ConfigClockSource+0x1aa>
 8014a7c:	2b30      	cmp	r3, #48	; 0x30
 8014a7e:	d86b      	bhi.n	8014b58 <HAL_TIM_ConfigClockSource+0x1bc>
 8014a80:	2b20      	cmp	r3, #32
 8014a82:	d060      	beq.n	8014b46 <HAL_TIM_ConfigClockSource+0x1aa>
 8014a84:	2b20      	cmp	r3, #32
 8014a86:	d867      	bhi.n	8014b58 <HAL_TIM_ConfigClockSource+0x1bc>
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d05c      	beq.n	8014b46 <HAL_TIM_ConfigClockSource+0x1aa>
 8014a8c:	2b10      	cmp	r3, #16
 8014a8e:	d05a      	beq.n	8014b46 <HAL_TIM_ConfigClockSource+0x1aa>
 8014a90:	e062      	b.n	8014b58 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	6818      	ldr	r0, [r3, #0]
 8014a96:	683b      	ldr	r3, [r7, #0]
 8014a98:	6899      	ldr	r1, [r3, #8]
 8014a9a:	683b      	ldr	r3, [r7, #0]
 8014a9c:	685a      	ldr	r2, [r3, #4]
 8014a9e:	683b      	ldr	r3, [r7, #0]
 8014aa0:	68db      	ldr	r3, [r3, #12]
 8014aa2:	f000 fc8b 	bl	80153bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	689b      	ldr	r3, [r3, #8]
 8014aac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8014aae:	68bb      	ldr	r3, [r7, #8]
 8014ab0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8014ab4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	68ba      	ldr	r2, [r7, #8]
 8014abc:	609a      	str	r2, [r3, #8]
      break;
 8014abe:	e04f      	b.n	8014b60 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	6818      	ldr	r0, [r3, #0]
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	6899      	ldr	r1, [r3, #8]
 8014ac8:	683b      	ldr	r3, [r7, #0]
 8014aca:	685a      	ldr	r2, [r3, #4]
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	68db      	ldr	r3, [r3, #12]
 8014ad0:	f000 fc74 	bl	80153bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	689a      	ldr	r2, [r3, #8]
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014ae2:	609a      	str	r2, [r3, #8]
      break;
 8014ae4:	e03c      	b.n	8014b60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	6818      	ldr	r0, [r3, #0]
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	6859      	ldr	r1, [r3, #4]
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	68db      	ldr	r3, [r3, #12]
 8014af2:	461a      	mov	r2, r3
 8014af4:	f000 fbe4 	bl	80152c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	2150      	movs	r1, #80	; 0x50
 8014afe:	4618      	mov	r0, r3
 8014b00:	f000 fc3e 	bl	8015380 <TIM_ITRx_SetConfig>
      break;
 8014b04:	e02c      	b.n	8014b60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	6818      	ldr	r0, [r3, #0]
 8014b0a:	683b      	ldr	r3, [r7, #0]
 8014b0c:	6859      	ldr	r1, [r3, #4]
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	68db      	ldr	r3, [r3, #12]
 8014b12:	461a      	mov	r2, r3
 8014b14:	f000 fc03 	bl	801531e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	2160      	movs	r1, #96	; 0x60
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f000 fc2e 	bl	8015380 <TIM_ITRx_SetConfig>
      break;
 8014b24:	e01c      	b.n	8014b60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	6818      	ldr	r0, [r3, #0]
 8014b2a:	683b      	ldr	r3, [r7, #0]
 8014b2c:	6859      	ldr	r1, [r3, #4]
 8014b2e:	683b      	ldr	r3, [r7, #0]
 8014b30:	68db      	ldr	r3, [r3, #12]
 8014b32:	461a      	mov	r2, r3
 8014b34:	f000 fbc4 	bl	80152c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	2140      	movs	r1, #64	; 0x40
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f000 fc1e 	bl	8015380 <TIM_ITRx_SetConfig>
      break;
 8014b44:	e00c      	b.n	8014b60 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	681a      	ldr	r2, [r3, #0]
 8014b4a:	683b      	ldr	r3, [r7, #0]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	4619      	mov	r1, r3
 8014b50:	4610      	mov	r0, r2
 8014b52:	f000 fc15 	bl	8015380 <TIM_ITRx_SetConfig>
      break;
 8014b56:	e003      	b.n	8014b60 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8014b58:	2301      	movs	r3, #1
 8014b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8014b5c:	e000      	b.n	8014b60 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8014b5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	2201      	movs	r2, #1
 8014b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8014b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b72:	4618      	mov	r0, r3
 8014b74:	3710      	adds	r7, #16
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	ffceff88 	.word	0xffceff88
 8014b80:	00100040 	.word	0x00100040
 8014b84:	00100030 	.word	0x00100030
 8014b88:	00100020 	.word	0x00100020

08014b8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8014b8c:	b480      	push	{r7}
 8014b8e:	b083      	sub	sp, #12
 8014b90:	af00      	add	r7, sp, #0
 8014b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014b94:	bf00      	nop
 8014b96:	370c      	adds	r7, #12
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9e:	4770      	bx	lr

08014ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014ba0:	b480      	push	{r7}
 8014ba2:	b083      	sub	sp, #12
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014ba8:	bf00      	nop
 8014baa:	370c      	adds	r7, #12
 8014bac:	46bd      	mov	sp, r7
 8014bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb2:	4770      	bx	lr

08014bb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014bb4:	b480      	push	{r7}
 8014bb6:	b083      	sub	sp, #12
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014bbc:	bf00      	nop
 8014bbe:	370c      	adds	r7, #12
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc6:	4770      	bx	lr

08014bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014bc8:	b480      	push	{r7}
 8014bca:	b085      	sub	sp, #20
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
 8014bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	4a46      	ldr	r2, [pc, #280]	; (8014cf4 <TIM_Base_SetConfig+0x12c>)
 8014bdc:	4293      	cmp	r3, r2
 8014bde:	d013      	beq.n	8014c08 <TIM_Base_SetConfig+0x40>
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014be6:	d00f      	beq.n	8014c08 <TIM_Base_SetConfig+0x40>
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	4a43      	ldr	r2, [pc, #268]	; (8014cf8 <TIM_Base_SetConfig+0x130>)
 8014bec:	4293      	cmp	r3, r2
 8014bee:	d00b      	beq.n	8014c08 <TIM_Base_SetConfig+0x40>
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	4a42      	ldr	r2, [pc, #264]	; (8014cfc <TIM_Base_SetConfig+0x134>)
 8014bf4:	4293      	cmp	r3, r2
 8014bf6:	d007      	beq.n	8014c08 <TIM_Base_SetConfig+0x40>
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	4a41      	ldr	r2, [pc, #260]	; (8014d00 <TIM_Base_SetConfig+0x138>)
 8014bfc:	4293      	cmp	r3, r2
 8014bfe:	d003      	beq.n	8014c08 <TIM_Base_SetConfig+0x40>
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	4a40      	ldr	r2, [pc, #256]	; (8014d04 <TIM_Base_SetConfig+0x13c>)
 8014c04:	4293      	cmp	r3, r2
 8014c06:	d108      	bne.n	8014c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014c10:	683b      	ldr	r3, [r7, #0]
 8014c12:	685b      	ldr	r3, [r3, #4]
 8014c14:	68fa      	ldr	r2, [r7, #12]
 8014c16:	4313      	orrs	r3, r2
 8014c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	4a35      	ldr	r2, [pc, #212]	; (8014cf4 <TIM_Base_SetConfig+0x12c>)
 8014c1e:	4293      	cmp	r3, r2
 8014c20:	d01f      	beq.n	8014c62 <TIM_Base_SetConfig+0x9a>
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014c28:	d01b      	beq.n	8014c62 <TIM_Base_SetConfig+0x9a>
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	4a32      	ldr	r2, [pc, #200]	; (8014cf8 <TIM_Base_SetConfig+0x130>)
 8014c2e:	4293      	cmp	r3, r2
 8014c30:	d017      	beq.n	8014c62 <TIM_Base_SetConfig+0x9a>
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	4a31      	ldr	r2, [pc, #196]	; (8014cfc <TIM_Base_SetConfig+0x134>)
 8014c36:	4293      	cmp	r3, r2
 8014c38:	d013      	beq.n	8014c62 <TIM_Base_SetConfig+0x9a>
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	4a30      	ldr	r2, [pc, #192]	; (8014d00 <TIM_Base_SetConfig+0x138>)
 8014c3e:	4293      	cmp	r3, r2
 8014c40:	d00f      	beq.n	8014c62 <TIM_Base_SetConfig+0x9a>
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	4a2f      	ldr	r2, [pc, #188]	; (8014d04 <TIM_Base_SetConfig+0x13c>)
 8014c46:	4293      	cmp	r3, r2
 8014c48:	d00b      	beq.n	8014c62 <TIM_Base_SetConfig+0x9a>
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	4a2e      	ldr	r2, [pc, #184]	; (8014d08 <TIM_Base_SetConfig+0x140>)
 8014c4e:	4293      	cmp	r3, r2
 8014c50:	d007      	beq.n	8014c62 <TIM_Base_SetConfig+0x9a>
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	4a2d      	ldr	r2, [pc, #180]	; (8014d0c <TIM_Base_SetConfig+0x144>)
 8014c56:	4293      	cmp	r3, r2
 8014c58:	d003      	beq.n	8014c62 <TIM_Base_SetConfig+0x9a>
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	4a2c      	ldr	r2, [pc, #176]	; (8014d10 <TIM_Base_SetConfig+0x148>)
 8014c5e:	4293      	cmp	r3, r2
 8014c60:	d108      	bne.n	8014c74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014c6a:	683b      	ldr	r3, [r7, #0]
 8014c6c:	68db      	ldr	r3, [r3, #12]
 8014c6e:	68fa      	ldr	r2, [r7, #12]
 8014c70:	4313      	orrs	r3, r2
 8014c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014c7a:	683b      	ldr	r3, [r7, #0]
 8014c7c:	695b      	ldr	r3, [r3, #20]
 8014c7e:	4313      	orrs	r3, r2
 8014c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	68fa      	ldr	r2, [r7, #12]
 8014c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014c88:	683b      	ldr	r3, [r7, #0]
 8014c8a:	689a      	ldr	r2, [r3, #8]
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014c90:	683b      	ldr	r3, [r7, #0]
 8014c92:	681a      	ldr	r2, [r3, #0]
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	4a16      	ldr	r2, [pc, #88]	; (8014cf4 <TIM_Base_SetConfig+0x12c>)
 8014c9c:	4293      	cmp	r3, r2
 8014c9e:	d00f      	beq.n	8014cc0 <TIM_Base_SetConfig+0xf8>
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	4a18      	ldr	r2, [pc, #96]	; (8014d04 <TIM_Base_SetConfig+0x13c>)
 8014ca4:	4293      	cmp	r3, r2
 8014ca6:	d00b      	beq.n	8014cc0 <TIM_Base_SetConfig+0xf8>
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	4a17      	ldr	r2, [pc, #92]	; (8014d08 <TIM_Base_SetConfig+0x140>)
 8014cac:	4293      	cmp	r3, r2
 8014cae:	d007      	beq.n	8014cc0 <TIM_Base_SetConfig+0xf8>
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	4a16      	ldr	r2, [pc, #88]	; (8014d0c <TIM_Base_SetConfig+0x144>)
 8014cb4:	4293      	cmp	r3, r2
 8014cb6:	d003      	beq.n	8014cc0 <TIM_Base_SetConfig+0xf8>
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	4a15      	ldr	r2, [pc, #84]	; (8014d10 <TIM_Base_SetConfig+0x148>)
 8014cbc:	4293      	cmp	r3, r2
 8014cbe:	d103      	bne.n	8014cc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014cc0:	683b      	ldr	r3, [r7, #0]
 8014cc2:	691a      	ldr	r2, [r3, #16]
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	2201      	movs	r2, #1
 8014ccc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	691b      	ldr	r3, [r3, #16]
 8014cd2:	f003 0301 	and.w	r3, r3, #1
 8014cd6:	2b01      	cmp	r3, #1
 8014cd8:	d105      	bne.n	8014ce6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	691b      	ldr	r3, [r3, #16]
 8014cde:	f023 0201 	bic.w	r2, r3, #1
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	611a      	str	r2, [r3, #16]
  }
}
 8014ce6:	bf00      	nop
 8014ce8:	3714      	adds	r7, #20
 8014cea:	46bd      	mov	sp, r7
 8014cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf0:	4770      	bx	lr
 8014cf2:	bf00      	nop
 8014cf4:	40010000 	.word	0x40010000
 8014cf8:	40000400 	.word	0x40000400
 8014cfc:	40000800 	.word	0x40000800
 8014d00:	40000c00 	.word	0x40000c00
 8014d04:	40010400 	.word	0x40010400
 8014d08:	40014000 	.word	0x40014000
 8014d0c:	40014400 	.word	0x40014400
 8014d10:	40014800 	.word	0x40014800

08014d14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014d14:	b480      	push	{r7}
 8014d16:	b087      	sub	sp, #28
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
 8014d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	6a1b      	ldr	r3, [r3, #32]
 8014d22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	6a1b      	ldr	r3, [r3, #32]
 8014d28:	f023 0201 	bic.w	r2, r3, #1
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	685b      	ldr	r3, [r3, #4]
 8014d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	699b      	ldr	r3, [r3, #24]
 8014d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014d3c:	68fa      	ldr	r2, [r7, #12]
 8014d3e:	4b37      	ldr	r3, [pc, #220]	; (8014e1c <TIM_OC1_SetConfig+0x108>)
 8014d40:	4013      	ands	r3, r2
 8014d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	f023 0303 	bic.w	r3, r3, #3
 8014d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014d4c:	683b      	ldr	r3, [r7, #0]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	68fa      	ldr	r2, [r7, #12]
 8014d52:	4313      	orrs	r3, r2
 8014d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014d56:	697b      	ldr	r3, [r7, #20]
 8014d58:	f023 0302 	bic.w	r3, r3, #2
 8014d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014d5e:	683b      	ldr	r3, [r7, #0]
 8014d60:	689b      	ldr	r3, [r3, #8]
 8014d62:	697a      	ldr	r2, [r7, #20]
 8014d64:	4313      	orrs	r3, r2
 8014d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	4a2d      	ldr	r2, [pc, #180]	; (8014e20 <TIM_OC1_SetConfig+0x10c>)
 8014d6c:	4293      	cmp	r3, r2
 8014d6e:	d00f      	beq.n	8014d90 <TIM_OC1_SetConfig+0x7c>
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	4a2c      	ldr	r2, [pc, #176]	; (8014e24 <TIM_OC1_SetConfig+0x110>)
 8014d74:	4293      	cmp	r3, r2
 8014d76:	d00b      	beq.n	8014d90 <TIM_OC1_SetConfig+0x7c>
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	4a2b      	ldr	r2, [pc, #172]	; (8014e28 <TIM_OC1_SetConfig+0x114>)
 8014d7c:	4293      	cmp	r3, r2
 8014d7e:	d007      	beq.n	8014d90 <TIM_OC1_SetConfig+0x7c>
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	4a2a      	ldr	r2, [pc, #168]	; (8014e2c <TIM_OC1_SetConfig+0x118>)
 8014d84:	4293      	cmp	r3, r2
 8014d86:	d003      	beq.n	8014d90 <TIM_OC1_SetConfig+0x7c>
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	4a29      	ldr	r2, [pc, #164]	; (8014e30 <TIM_OC1_SetConfig+0x11c>)
 8014d8c:	4293      	cmp	r3, r2
 8014d8e:	d10c      	bne.n	8014daa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014d90:	697b      	ldr	r3, [r7, #20]
 8014d92:	f023 0308 	bic.w	r3, r3, #8
 8014d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014d98:	683b      	ldr	r3, [r7, #0]
 8014d9a:	68db      	ldr	r3, [r3, #12]
 8014d9c:	697a      	ldr	r2, [r7, #20]
 8014d9e:	4313      	orrs	r3, r2
 8014da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014da2:	697b      	ldr	r3, [r7, #20]
 8014da4:	f023 0304 	bic.w	r3, r3, #4
 8014da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	4a1c      	ldr	r2, [pc, #112]	; (8014e20 <TIM_OC1_SetConfig+0x10c>)
 8014dae:	4293      	cmp	r3, r2
 8014db0:	d00f      	beq.n	8014dd2 <TIM_OC1_SetConfig+0xbe>
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	4a1b      	ldr	r2, [pc, #108]	; (8014e24 <TIM_OC1_SetConfig+0x110>)
 8014db6:	4293      	cmp	r3, r2
 8014db8:	d00b      	beq.n	8014dd2 <TIM_OC1_SetConfig+0xbe>
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	4a1a      	ldr	r2, [pc, #104]	; (8014e28 <TIM_OC1_SetConfig+0x114>)
 8014dbe:	4293      	cmp	r3, r2
 8014dc0:	d007      	beq.n	8014dd2 <TIM_OC1_SetConfig+0xbe>
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	4a19      	ldr	r2, [pc, #100]	; (8014e2c <TIM_OC1_SetConfig+0x118>)
 8014dc6:	4293      	cmp	r3, r2
 8014dc8:	d003      	beq.n	8014dd2 <TIM_OC1_SetConfig+0xbe>
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	4a18      	ldr	r2, [pc, #96]	; (8014e30 <TIM_OC1_SetConfig+0x11c>)
 8014dce:	4293      	cmp	r3, r2
 8014dd0:	d111      	bne.n	8014df6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014dd2:	693b      	ldr	r3, [r7, #16]
 8014dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014dda:	693b      	ldr	r3, [r7, #16]
 8014ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014de2:	683b      	ldr	r3, [r7, #0]
 8014de4:	695b      	ldr	r3, [r3, #20]
 8014de6:	693a      	ldr	r2, [r7, #16]
 8014de8:	4313      	orrs	r3, r2
 8014dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	699b      	ldr	r3, [r3, #24]
 8014df0:	693a      	ldr	r2, [r7, #16]
 8014df2:	4313      	orrs	r3, r2
 8014df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	693a      	ldr	r2, [r7, #16]
 8014dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	68fa      	ldr	r2, [r7, #12]
 8014e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014e02:	683b      	ldr	r3, [r7, #0]
 8014e04:	685a      	ldr	r2, [r3, #4]
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	697a      	ldr	r2, [r7, #20]
 8014e0e:	621a      	str	r2, [r3, #32]
}
 8014e10:	bf00      	nop
 8014e12:	371c      	adds	r7, #28
 8014e14:	46bd      	mov	sp, r7
 8014e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1a:	4770      	bx	lr
 8014e1c:	fffeff8f 	.word	0xfffeff8f
 8014e20:	40010000 	.word	0x40010000
 8014e24:	40010400 	.word	0x40010400
 8014e28:	40014000 	.word	0x40014000
 8014e2c:	40014400 	.word	0x40014400
 8014e30:	40014800 	.word	0x40014800

08014e34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014e34:	b480      	push	{r7}
 8014e36:	b087      	sub	sp, #28
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
 8014e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	6a1b      	ldr	r3, [r3, #32]
 8014e42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	6a1b      	ldr	r3, [r3, #32]
 8014e48:	f023 0210 	bic.w	r2, r3, #16
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	685b      	ldr	r3, [r3, #4]
 8014e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	699b      	ldr	r3, [r3, #24]
 8014e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014e5c:	68fa      	ldr	r2, [r7, #12]
 8014e5e:	4b34      	ldr	r3, [pc, #208]	; (8014f30 <TIM_OC2_SetConfig+0xfc>)
 8014e60:	4013      	ands	r3, r2
 8014e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	021b      	lsls	r3, r3, #8
 8014e72:	68fa      	ldr	r2, [r7, #12]
 8014e74:	4313      	orrs	r3, r2
 8014e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014e78:	697b      	ldr	r3, [r7, #20]
 8014e7a:	f023 0320 	bic.w	r3, r3, #32
 8014e7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014e80:	683b      	ldr	r3, [r7, #0]
 8014e82:	689b      	ldr	r3, [r3, #8]
 8014e84:	011b      	lsls	r3, r3, #4
 8014e86:	697a      	ldr	r2, [r7, #20]
 8014e88:	4313      	orrs	r3, r2
 8014e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	4a29      	ldr	r2, [pc, #164]	; (8014f34 <TIM_OC2_SetConfig+0x100>)
 8014e90:	4293      	cmp	r3, r2
 8014e92:	d003      	beq.n	8014e9c <TIM_OC2_SetConfig+0x68>
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	4a28      	ldr	r2, [pc, #160]	; (8014f38 <TIM_OC2_SetConfig+0x104>)
 8014e98:	4293      	cmp	r3, r2
 8014e9a:	d10d      	bne.n	8014eb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014e9c:	697b      	ldr	r3, [r7, #20]
 8014e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	68db      	ldr	r3, [r3, #12]
 8014ea8:	011b      	lsls	r3, r3, #4
 8014eaa:	697a      	ldr	r2, [r7, #20]
 8014eac:	4313      	orrs	r3, r2
 8014eae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014eb0:	697b      	ldr	r3, [r7, #20]
 8014eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014eb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	4a1e      	ldr	r2, [pc, #120]	; (8014f34 <TIM_OC2_SetConfig+0x100>)
 8014ebc:	4293      	cmp	r3, r2
 8014ebe:	d00f      	beq.n	8014ee0 <TIM_OC2_SetConfig+0xac>
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	4a1d      	ldr	r2, [pc, #116]	; (8014f38 <TIM_OC2_SetConfig+0x104>)
 8014ec4:	4293      	cmp	r3, r2
 8014ec6:	d00b      	beq.n	8014ee0 <TIM_OC2_SetConfig+0xac>
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	4a1c      	ldr	r2, [pc, #112]	; (8014f3c <TIM_OC2_SetConfig+0x108>)
 8014ecc:	4293      	cmp	r3, r2
 8014ece:	d007      	beq.n	8014ee0 <TIM_OC2_SetConfig+0xac>
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	4a1b      	ldr	r2, [pc, #108]	; (8014f40 <TIM_OC2_SetConfig+0x10c>)
 8014ed4:	4293      	cmp	r3, r2
 8014ed6:	d003      	beq.n	8014ee0 <TIM_OC2_SetConfig+0xac>
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	4a1a      	ldr	r2, [pc, #104]	; (8014f44 <TIM_OC2_SetConfig+0x110>)
 8014edc:	4293      	cmp	r3, r2
 8014ede:	d113      	bne.n	8014f08 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014ee0:	693b      	ldr	r3, [r7, #16]
 8014ee2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014ee6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014ee8:	693b      	ldr	r3, [r7, #16]
 8014eea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014eee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	695b      	ldr	r3, [r3, #20]
 8014ef4:	009b      	lsls	r3, r3, #2
 8014ef6:	693a      	ldr	r2, [r7, #16]
 8014ef8:	4313      	orrs	r3, r2
 8014efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014efc:	683b      	ldr	r3, [r7, #0]
 8014efe:	699b      	ldr	r3, [r3, #24]
 8014f00:	009b      	lsls	r3, r3, #2
 8014f02:	693a      	ldr	r2, [r7, #16]
 8014f04:	4313      	orrs	r3, r2
 8014f06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	693a      	ldr	r2, [r7, #16]
 8014f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	68fa      	ldr	r2, [r7, #12]
 8014f12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	685a      	ldr	r2, [r3, #4]
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	697a      	ldr	r2, [r7, #20]
 8014f20:	621a      	str	r2, [r3, #32]
}
 8014f22:	bf00      	nop
 8014f24:	371c      	adds	r7, #28
 8014f26:	46bd      	mov	sp, r7
 8014f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2c:	4770      	bx	lr
 8014f2e:	bf00      	nop
 8014f30:	feff8fff 	.word	0xfeff8fff
 8014f34:	40010000 	.word	0x40010000
 8014f38:	40010400 	.word	0x40010400
 8014f3c:	40014000 	.word	0x40014000
 8014f40:	40014400 	.word	0x40014400
 8014f44:	40014800 	.word	0x40014800

08014f48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014f48:	b480      	push	{r7}
 8014f4a:	b087      	sub	sp, #28
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
 8014f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	6a1b      	ldr	r3, [r3, #32]
 8014f56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	6a1b      	ldr	r3, [r3, #32]
 8014f5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	685b      	ldr	r3, [r3, #4]
 8014f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	69db      	ldr	r3, [r3, #28]
 8014f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014f70:	68fa      	ldr	r2, [r7, #12]
 8014f72:	4b33      	ldr	r3, [pc, #204]	; (8015040 <TIM_OC3_SetConfig+0xf8>)
 8014f74:	4013      	ands	r3, r2
 8014f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	f023 0303 	bic.w	r3, r3, #3
 8014f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	68fa      	ldr	r2, [r7, #12]
 8014f86:	4313      	orrs	r3, r2
 8014f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014f8a:	697b      	ldr	r3, [r7, #20]
 8014f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	689b      	ldr	r3, [r3, #8]
 8014f96:	021b      	lsls	r3, r3, #8
 8014f98:	697a      	ldr	r2, [r7, #20]
 8014f9a:	4313      	orrs	r3, r2
 8014f9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	4a28      	ldr	r2, [pc, #160]	; (8015044 <TIM_OC3_SetConfig+0xfc>)
 8014fa2:	4293      	cmp	r3, r2
 8014fa4:	d003      	beq.n	8014fae <TIM_OC3_SetConfig+0x66>
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	4a27      	ldr	r2, [pc, #156]	; (8015048 <TIM_OC3_SetConfig+0x100>)
 8014faa:	4293      	cmp	r3, r2
 8014fac:	d10d      	bne.n	8014fca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014fae:	697b      	ldr	r3, [r7, #20]
 8014fb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014fb6:	683b      	ldr	r3, [r7, #0]
 8014fb8:	68db      	ldr	r3, [r3, #12]
 8014fba:	021b      	lsls	r3, r3, #8
 8014fbc:	697a      	ldr	r2, [r7, #20]
 8014fbe:	4313      	orrs	r3, r2
 8014fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014fc2:	697b      	ldr	r3, [r7, #20]
 8014fc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	4a1d      	ldr	r2, [pc, #116]	; (8015044 <TIM_OC3_SetConfig+0xfc>)
 8014fce:	4293      	cmp	r3, r2
 8014fd0:	d00f      	beq.n	8014ff2 <TIM_OC3_SetConfig+0xaa>
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	4a1c      	ldr	r2, [pc, #112]	; (8015048 <TIM_OC3_SetConfig+0x100>)
 8014fd6:	4293      	cmp	r3, r2
 8014fd8:	d00b      	beq.n	8014ff2 <TIM_OC3_SetConfig+0xaa>
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	4a1b      	ldr	r2, [pc, #108]	; (801504c <TIM_OC3_SetConfig+0x104>)
 8014fde:	4293      	cmp	r3, r2
 8014fe0:	d007      	beq.n	8014ff2 <TIM_OC3_SetConfig+0xaa>
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	4a1a      	ldr	r2, [pc, #104]	; (8015050 <TIM_OC3_SetConfig+0x108>)
 8014fe6:	4293      	cmp	r3, r2
 8014fe8:	d003      	beq.n	8014ff2 <TIM_OC3_SetConfig+0xaa>
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	4a19      	ldr	r2, [pc, #100]	; (8015054 <TIM_OC3_SetConfig+0x10c>)
 8014fee:	4293      	cmp	r3, r2
 8014ff0:	d113      	bne.n	801501a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014ff2:	693b      	ldr	r3, [r7, #16]
 8014ff4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014ffa:	693b      	ldr	r3, [r7, #16]
 8014ffc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8015000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	695b      	ldr	r3, [r3, #20]
 8015006:	011b      	lsls	r3, r3, #4
 8015008:	693a      	ldr	r2, [r7, #16]
 801500a:	4313      	orrs	r3, r2
 801500c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	699b      	ldr	r3, [r3, #24]
 8015012:	011b      	lsls	r3, r3, #4
 8015014:	693a      	ldr	r2, [r7, #16]
 8015016:	4313      	orrs	r3, r2
 8015018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	693a      	ldr	r2, [r7, #16]
 801501e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	68fa      	ldr	r2, [r7, #12]
 8015024:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8015026:	683b      	ldr	r3, [r7, #0]
 8015028:	685a      	ldr	r2, [r3, #4]
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	697a      	ldr	r2, [r7, #20]
 8015032:	621a      	str	r2, [r3, #32]
}
 8015034:	bf00      	nop
 8015036:	371c      	adds	r7, #28
 8015038:	46bd      	mov	sp, r7
 801503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503e:	4770      	bx	lr
 8015040:	fffeff8f 	.word	0xfffeff8f
 8015044:	40010000 	.word	0x40010000
 8015048:	40010400 	.word	0x40010400
 801504c:	40014000 	.word	0x40014000
 8015050:	40014400 	.word	0x40014400
 8015054:	40014800 	.word	0x40014800

08015058 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015058:	b480      	push	{r7}
 801505a:	b087      	sub	sp, #28
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
 8015060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	6a1b      	ldr	r3, [r3, #32]
 8015066:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	6a1b      	ldr	r3, [r3, #32]
 801506c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	685b      	ldr	r3, [r3, #4]
 8015078:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	69db      	ldr	r3, [r3, #28]
 801507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8015080:	68fa      	ldr	r2, [r7, #12]
 8015082:	4b24      	ldr	r3, [pc, #144]	; (8015114 <TIM_OC4_SetConfig+0xbc>)
 8015084:	4013      	ands	r3, r2
 8015086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801508e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015090:	683b      	ldr	r3, [r7, #0]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	021b      	lsls	r3, r3, #8
 8015096:	68fa      	ldr	r2, [r7, #12]
 8015098:	4313      	orrs	r3, r2
 801509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80150a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80150a4:	683b      	ldr	r3, [r7, #0]
 80150a6:	689b      	ldr	r3, [r3, #8]
 80150a8:	031b      	lsls	r3, r3, #12
 80150aa:	693a      	ldr	r2, [r7, #16]
 80150ac:	4313      	orrs	r3, r2
 80150ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	4a19      	ldr	r2, [pc, #100]	; (8015118 <TIM_OC4_SetConfig+0xc0>)
 80150b4:	4293      	cmp	r3, r2
 80150b6:	d00f      	beq.n	80150d8 <TIM_OC4_SetConfig+0x80>
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	4a18      	ldr	r2, [pc, #96]	; (801511c <TIM_OC4_SetConfig+0xc4>)
 80150bc:	4293      	cmp	r3, r2
 80150be:	d00b      	beq.n	80150d8 <TIM_OC4_SetConfig+0x80>
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	4a17      	ldr	r2, [pc, #92]	; (8015120 <TIM_OC4_SetConfig+0xc8>)
 80150c4:	4293      	cmp	r3, r2
 80150c6:	d007      	beq.n	80150d8 <TIM_OC4_SetConfig+0x80>
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	4a16      	ldr	r2, [pc, #88]	; (8015124 <TIM_OC4_SetConfig+0xcc>)
 80150cc:	4293      	cmp	r3, r2
 80150ce:	d003      	beq.n	80150d8 <TIM_OC4_SetConfig+0x80>
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	4a15      	ldr	r2, [pc, #84]	; (8015128 <TIM_OC4_SetConfig+0xd0>)
 80150d4:	4293      	cmp	r3, r2
 80150d6:	d109      	bne.n	80150ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80150d8:	697b      	ldr	r3, [r7, #20]
 80150da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80150de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80150e0:	683b      	ldr	r3, [r7, #0]
 80150e2:	695b      	ldr	r3, [r3, #20]
 80150e4:	019b      	lsls	r3, r3, #6
 80150e6:	697a      	ldr	r2, [r7, #20]
 80150e8:	4313      	orrs	r3, r2
 80150ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	697a      	ldr	r2, [r7, #20]
 80150f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	68fa      	ldr	r2, [r7, #12]
 80150f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80150f8:	683b      	ldr	r3, [r7, #0]
 80150fa:	685a      	ldr	r2, [r3, #4]
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	693a      	ldr	r2, [r7, #16]
 8015104:	621a      	str	r2, [r3, #32]
}
 8015106:	bf00      	nop
 8015108:	371c      	adds	r7, #28
 801510a:	46bd      	mov	sp, r7
 801510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015110:	4770      	bx	lr
 8015112:	bf00      	nop
 8015114:	feff8fff 	.word	0xfeff8fff
 8015118:	40010000 	.word	0x40010000
 801511c:	40010400 	.word	0x40010400
 8015120:	40014000 	.word	0x40014000
 8015124:	40014400 	.word	0x40014400
 8015128:	40014800 	.word	0x40014800

0801512c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801512c:	b480      	push	{r7}
 801512e:	b087      	sub	sp, #28
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
 8015134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	6a1b      	ldr	r3, [r3, #32]
 801513a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	6a1b      	ldr	r3, [r3, #32]
 8015140:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	685b      	ldr	r3, [r3, #4]
 801514c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8015154:	68fa      	ldr	r2, [r7, #12]
 8015156:	4b21      	ldr	r3, [pc, #132]	; (80151dc <TIM_OC5_SetConfig+0xb0>)
 8015158:	4013      	ands	r3, r2
 801515a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801515c:	683b      	ldr	r3, [r7, #0]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	68fa      	ldr	r2, [r7, #12]
 8015162:	4313      	orrs	r3, r2
 8015164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8015166:	693b      	ldr	r3, [r7, #16]
 8015168:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801516c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801516e:	683b      	ldr	r3, [r7, #0]
 8015170:	689b      	ldr	r3, [r3, #8]
 8015172:	041b      	lsls	r3, r3, #16
 8015174:	693a      	ldr	r2, [r7, #16]
 8015176:	4313      	orrs	r3, r2
 8015178:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	4a18      	ldr	r2, [pc, #96]	; (80151e0 <TIM_OC5_SetConfig+0xb4>)
 801517e:	4293      	cmp	r3, r2
 8015180:	d00f      	beq.n	80151a2 <TIM_OC5_SetConfig+0x76>
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	4a17      	ldr	r2, [pc, #92]	; (80151e4 <TIM_OC5_SetConfig+0xb8>)
 8015186:	4293      	cmp	r3, r2
 8015188:	d00b      	beq.n	80151a2 <TIM_OC5_SetConfig+0x76>
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	4a16      	ldr	r2, [pc, #88]	; (80151e8 <TIM_OC5_SetConfig+0xbc>)
 801518e:	4293      	cmp	r3, r2
 8015190:	d007      	beq.n	80151a2 <TIM_OC5_SetConfig+0x76>
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	4a15      	ldr	r2, [pc, #84]	; (80151ec <TIM_OC5_SetConfig+0xc0>)
 8015196:	4293      	cmp	r3, r2
 8015198:	d003      	beq.n	80151a2 <TIM_OC5_SetConfig+0x76>
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	4a14      	ldr	r2, [pc, #80]	; (80151f0 <TIM_OC5_SetConfig+0xc4>)
 801519e:	4293      	cmp	r3, r2
 80151a0:	d109      	bne.n	80151b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80151a2:	697b      	ldr	r3, [r7, #20]
 80151a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80151a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80151aa:	683b      	ldr	r3, [r7, #0]
 80151ac:	695b      	ldr	r3, [r3, #20]
 80151ae:	021b      	lsls	r3, r3, #8
 80151b0:	697a      	ldr	r2, [r7, #20]
 80151b2:	4313      	orrs	r3, r2
 80151b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	697a      	ldr	r2, [r7, #20]
 80151ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	68fa      	ldr	r2, [r7, #12]
 80151c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80151c2:	683b      	ldr	r3, [r7, #0]
 80151c4:	685a      	ldr	r2, [r3, #4]
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	693a      	ldr	r2, [r7, #16]
 80151ce:	621a      	str	r2, [r3, #32]
}
 80151d0:	bf00      	nop
 80151d2:	371c      	adds	r7, #28
 80151d4:	46bd      	mov	sp, r7
 80151d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151da:	4770      	bx	lr
 80151dc:	fffeff8f 	.word	0xfffeff8f
 80151e0:	40010000 	.word	0x40010000
 80151e4:	40010400 	.word	0x40010400
 80151e8:	40014000 	.word	0x40014000
 80151ec:	40014400 	.word	0x40014400
 80151f0:	40014800 	.word	0x40014800

080151f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80151f4:	b480      	push	{r7}
 80151f6:	b087      	sub	sp, #28
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	6078      	str	r0, [r7, #4]
 80151fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	6a1b      	ldr	r3, [r3, #32]
 8015202:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	6a1b      	ldr	r3, [r3, #32]
 8015208:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	685b      	ldr	r3, [r3, #4]
 8015214:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801521c:	68fa      	ldr	r2, [r7, #12]
 801521e:	4b22      	ldr	r3, [pc, #136]	; (80152a8 <TIM_OC6_SetConfig+0xb4>)
 8015220:	4013      	ands	r3, r2
 8015222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015224:	683b      	ldr	r3, [r7, #0]
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	021b      	lsls	r3, r3, #8
 801522a:	68fa      	ldr	r2, [r7, #12]
 801522c:	4313      	orrs	r3, r2
 801522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8015230:	693b      	ldr	r3, [r7, #16]
 8015232:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8015238:	683b      	ldr	r3, [r7, #0]
 801523a:	689b      	ldr	r3, [r3, #8]
 801523c:	051b      	lsls	r3, r3, #20
 801523e:	693a      	ldr	r2, [r7, #16]
 8015240:	4313      	orrs	r3, r2
 8015242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	4a19      	ldr	r2, [pc, #100]	; (80152ac <TIM_OC6_SetConfig+0xb8>)
 8015248:	4293      	cmp	r3, r2
 801524a:	d00f      	beq.n	801526c <TIM_OC6_SetConfig+0x78>
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	4a18      	ldr	r2, [pc, #96]	; (80152b0 <TIM_OC6_SetConfig+0xbc>)
 8015250:	4293      	cmp	r3, r2
 8015252:	d00b      	beq.n	801526c <TIM_OC6_SetConfig+0x78>
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	4a17      	ldr	r2, [pc, #92]	; (80152b4 <TIM_OC6_SetConfig+0xc0>)
 8015258:	4293      	cmp	r3, r2
 801525a:	d007      	beq.n	801526c <TIM_OC6_SetConfig+0x78>
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	4a16      	ldr	r2, [pc, #88]	; (80152b8 <TIM_OC6_SetConfig+0xc4>)
 8015260:	4293      	cmp	r3, r2
 8015262:	d003      	beq.n	801526c <TIM_OC6_SetConfig+0x78>
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	4a15      	ldr	r2, [pc, #84]	; (80152bc <TIM_OC6_SetConfig+0xc8>)
 8015268:	4293      	cmp	r3, r2
 801526a:	d109      	bne.n	8015280 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801526c:	697b      	ldr	r3, [r7, #20]
 801526e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015272:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8015274:	683b      	ldr	r3, [r7, #0]
 8015276:	695b      	ldr	r3, [r3, #20]
 8015278:	029b      	lsls	r3, r3, #10
 801527a:	697a      	ldr	r2, [r7, #20]
 801527c:	4313      	orrs	r3, r2
 801527e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	697a      	ldr	r2, [r7, #20]
 8015284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	68fa      	ldr	r2, [r7, #12]
 801528a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801528c:	683b      	ldr	r3, [r7, #0]
 801528e:	685a      	ldr	r2, [r3, #4]
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	693a      	ldr	r2, [r7, #16]
 8015298:	621a      	str	r2, [r3, #32]
}
 801529a:	bf00      	nop
 801529c:	371c      	adds	r7, #28
 801529e:	46bd      	mov	sp, r7
 80152a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a4:	4770      	bx	lr
 80152a6:	bf00      	nop
 80152a8:	feff8fff 	.word	0xfeff8fff
 80152ac:	40010000 	.word	0x40010000
 80152b0:	40010400 	.word	0x40010400
 80152b4:	40014000 	.word	0x40014000
 80152b8:	40014400 	.word	0x40014400
 80152bc:	40014800 	.word	0x40014800

080152c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80152c0:	b480      	push	{r7}
 80152c2:	b087      	sub	sp, #28
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	60f8      	str	r0, [r7, #12]
 80152c8:	60b9      	str	r1, [r7, #8]
 80152ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	6a1b      	ldr	r3, [r3, #32]
 80152d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	6a1b      	ldr	r3, [r3, #32]
 80152d6:	f023 0201 	bic.w	r2, r3, #1
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	699b      	ldr	r3, [r3, #24]
 80152e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80152e4:	693b      	ldr	r3, [r7, #16]
 80152e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80152ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	011b      	lsls	r3, r3, #4
 80152f0:	693a      	ldr	r2, [r7, #16]
 80152f2:	4313      	orrs	r3, r2
 80152f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80152f6:	697b      	ldr	r3, [r7, #20]
 80152f8:	f023 030a 	bic.w	r3, r3, #10
 80152fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80152fe:	697a      	ldr	r2, [r7, #20]
 8015300:	68bb      	ldr	r3, [r7, #8]
 8015302:	4313      	orrs	r3, r2
 8015304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	693a      	ldr	r2, [r7, #16]
 801530a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	697a      	ldr	r2, [r7, #20]
 8015310:	621a      	str	r2, [r3, #32]
}
 8015312:	bf00      	nop
 8015314:	371c      	adds	r7, #28
 8015316:	46bd      	mov	sp, r7
 8015318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531c:	4770      	bx	lr

0801531e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801531e:	b480      	push	{r7}
 8015320:	b087      	sub	sp, #28
 8015322:	af00      	add	r7, sp, #0
 8015324:	60f8      	str	r0, [r7, #12]
 8015326:	60b9      	str	r1, [r7, #8]
 8015328:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	6a1b      	ldr	r3, [r3, #32]
 801532e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	6a1b      	ldr	r3, [r3, #32]
 8015334:	f023 0210 	bic.w	r2, r3, #16
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	699b      	ldr	r3, [r3, #24]
 8015340:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8015342:	693b      	ldr	r3, [r7, #16]
 8015344:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015348:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	031b      	lsls	r3, r3, #12
 801534e:	693a      	ldr	r2, [r7, #16]
 8015350:	4313      	orrs	r3, r2
 8015352:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8015354:	697b      	ldr	r3, [r7, #20]
 8015356:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801535a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801535c:	68bb      	ldr	r3, [r7, #8]
 801535e:	011b      	lsls	r3, r3, #4
 8015360:	697a      	ldr	r2, [r7, #20]
 8015362:	4313      	orrs	r3, r2
 8015364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	693a      	ldr	r2, [r7, #16]
 801536a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	697a      	ldr	r2, [r7, #20]
 8015370:	621a      	str	r2, [r3, #32]
}
 8015372:	bf00      	nop
 8015374:	371c      	adds	r7, #28
 8015376:	46bd      	mov	sp, r7
 8015378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537c:	4770      	bx	lr
	...

08015380 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8015380:	b480      	push	{r7}
 8015382:	b085      	sub	sp, #20
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
 8015388:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	689b      	ldr	r3, [r3, #8]
 801538e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8015390:	68fa      	ldr	r2, [r7, #12]
 8015392:	4b09      	ldr	r3, [pc, #36]	; (80153b8 <TIM_ITRx_SetConfig+0x38>)
 8015394:	4013      	ands	r3, r2
 8015396:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8015398:	683a      	ldr	r2, [r7, #0]
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	4313      	orrs	r3, r2
 801539e:	f043 0307 	orr.w	r3, r3, #7
 80153a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	68fa      	ldr	r2, [r7, #12]
 80153a8:	609a      	str	r2, [r3, #8]
}
 80153aa:	bf00      	nop
 80153ac:	3714      	adds	r7, #20
 80153ae:	46bd      	mov	sp, r7
 80153b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b4:	4770      	bx	lr
 80153b6:	bf00      	nop
 80153b8:	ffcfff8f 	.word	0xffcfff8f

080153bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80153bc:	b480      	push	{r7}
 80153be:	b087      	sub	sp, #28
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	60f8      	str	r0, [r7, #12]
 80153c4:	60b9      	str	r1, [r7, #8]
 80153c6:	607a      	str	r2, [r7, #4]
 80153c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	689b      	ldr	r3, [r3, #8]
 80153ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80153d0:	697b      	ldr	r3, [r7, #20]
 80153d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80153d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80153d8:	683b      	ldr	r3, [r7, #0]
 80153da:	021a      	lsls	r2, r3, #8
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	431a      	orrs	r2, r3
 80153e0:	68bb      	ldr	r3, [r7, #8]
 80153e2:	4313      	orrs	r3, r2
 80153e4:	697a      	ldr	r2, [r7, #20]
 80153e6:	4313      	orrs	r3, r2
 80153e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	697a      	ldr	r2, [r7, #20]
 80153ee:	609a      	str	r2, [r3, #8]
}
 80153f0:	bf00      	nop
 80153f2:	371c      	adds	r7, #28
 80153f4:	46bd      	mov	sp, r7
 80153f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fa:	4770      	bx	lr

080153fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80153fc:	b480      	push	{r7}
 80153fe:	b087      	sub	sp, #28
 8015400:	af00      	add	r7, sp, #0
 8015402:	60f8      	str	r0, [r7, #12]
 8015404:	60b9      	str	r1, [r7, #8]
 8015406:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015408:	68bb      	ldr	r3, [r7, #8]
 801540a:	f003 031f 	and.w	r3, r3, #31
 801540e:	2201      	movs	r2, #1
 8015410:	fa02 f303 	lsl.w	r3, r2, r3
 8015414:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	6a1a      	ldr	r2, [r3, #32]
 801541a:	697b      	ldr	r3, [r7, #20]
 801541c:	43db      	mvns	r3, r3
 801541e:	401a      	ands	r2, r3
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	6a1a      	ldr	r2, [r3, #32]
 8015428:	68bb      	ldr	r3, [r7, #8]
 801542a:	f003 031f 	and.w	r3, r3, #31
 801542e:	6879      	ldr	r1, [r7, #4]
 8015430:	fa01 f303 	lsl.w	r3, r1, r3
 8015434:	431a      	orrs	r2, r3
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	621a      	str	r2, [r3, #32]
}
 801543a:	bf00      	nop
 801543c:	371c      	adds	r7, #28
 801543e:	46bd      	mov	sp, r7
 8015440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015444:	4770      	bx	lr
	...

08015448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015448:	b480      	push	{r7}
 801544a:	b085      	sub	sp, #20
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
 8015450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015458:	2b01      	cmp	r3, #1
 801545a:	d101      	bne.n	8015460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801545c:	2302      	movs	r3, #2
 801545e:	e06d      	b.n	801553c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	2201      	movs	r2, #1
 8015464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2202      	movs	r2, #2
 801546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	685b      	ldr	r3, [r3, #4]
 8015476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	689b      	ldr	r3, [r3, #8]
 801547e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	4a30      	ldr	r2, [pc, #192]	; (8015548 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8015486:	4293      	cmp	r3, r2
 8015488:	d004      	beq.n	8015494 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	4a2f      	ldr	r2, [pc, #188]	; (801554c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8015490:	4293      	cmp	r3, r2
 8015492:	d108      	bne.n	80154a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801549a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801549c:	683b      	ldr	r3, [r7, #0]
 801549e:	685b      	ldr	r3, [r3, #4]
 80154a0:	68fa      	ldr	r2, [r7, #12]
 80154a2:	4313      	orrs	r3, r2
 80154a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80154ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80154ae:	683b      	ldr	r3, [r7, #0]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	68fa      	ldr	r2, [r7, #12]
 80154b4:	4313      	orrs	r3, r2
 80154b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	681b      	ldr	r3, [r3, #0]
 80154bc:	68fa      	ldr	r2, [r7, #12]
 80154be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	4a20      	ldr	r2, [pc, #128]	; (8015548 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80154c6:	4293      	cmp	r3, r2
 80154c8:	d022      	beq.n	8015510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80154d2:	d01d      	beq.n	8015510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	4a1d      	ldr	r2, [pc, #116]	; (8015550 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80154da:	4293      	cmp	r3, r2
 80154dc:	d018      	beq.n	8015510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	4a1c      	ldr	r2, [pc, #112]	; (8015554 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80154e4:	4293      	cmp	r3, r2
 80154e6:	d013      	beq.n	8015510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	4a1a      	ldr	r2, [pc, #104]	; (8015558 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80154ee:	4293      	cmp	r3, r2
 80154f0:	d00e      	beq.n	8015510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	4a15      	ldr	r2, [pc, #84]	; (801554c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80154f8:	4293      	cmp	r3, r2
 80154fa:	d009      	beq.n	8015510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	4a16      	ldr	r2, [pc, #88]	; (801555c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8015502:	4293      	cmp	r3, r2
 8015504:	d004      	beq.n	8015510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	4a15      	ldr	r2, [pc, #84]	; (8015560 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801550c:	4293      	cmp	r3, r2
 801550e:	d10c      	bne.n	801552a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015510:	68bb      	ldr	r3, [r7, #8]
 8015512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015516:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015518:	683b      	ldr	r3, [r7, #0]
 801551a:	689b      	ldr	r3, [r3, #8]
 801551c:	68ba      	ldr	r2, [r7, #8]
 801551e:	4313      	orrs	r3, r2
 8015520:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	68ba      	ldr	r2, [r7, #8]
 8015528:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2201      	movs	r2, #1
 801552e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	2200      	movs	r2, #0
 8015536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801553a:	2300      	movs	r3, #0
}
 801553c:	4618      	mov	r0, r3
 801553e:	3714      	adds	r7, #20
 8015540:	46bd      	mov	sp, r7
 8015542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015546:	4770      	bx	lr
 8015548:	40010000 	.word	0x40010000
 801554c:	40010400 	.word	0x40010400
 8015550:	40000400 	.word	0x40000400
 8015554:	40000800 	.word	0x40000800
 8015558:	40000c00 	.word	0x40000c00
 801555c:	40001800 	.word	0x40001800
 8015560:	40014000 	.word	0x40014000

08015564 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8015564:	b480      	push	{r7}
 8015566:	b085      	sub	sp, #20
 8015568:	af00      	add	r7, sp, #0
 801556a:	6078      	str	r0, [r7, #4]
 801556c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801556e:	2300      	movs	r3, #0
 8015570:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015578:	2b01      	cmp	r3, #1
 801557a:	d101      	bne.n	8015580 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801557c:	2302      	movs	r3, #2
 801557e:	e065      	b.n	801564c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	2201      	movs	r2, #1
 8015584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801558e:	683b      	ldr	r3, [r7, #0]
 8015590:	68db      	ldr	r3, [r3, #12]
 8015592:	4313      	orrs	r3, r2
 8015594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	689b      	ldr	r3, [r3, #8]
 80155a0:	4313      	orrs	r3, r2
 80155a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80155aa:	683b      	ldr	r3, [r7, #0]
 80155ac:	685b      	ldr	r3, [r3, #4]
 80155ae:	4313      	orrs	r3, r2
 80155b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80155b8:	683b      	ldr	r3, [r7, #0]
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	4313      	orrs	r3, r2
 80155be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80155c6:	683b      	ldr	r3, [r7, #0]
 80155c8:	691b      	ldr	r3, [r3, #16]
 80155ca:	4313      	orrs	r3, r2
 80155cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80155d4:	683b      	ldr	r3, [r7, #0]
 80155d6:	695b      	ldr	r3, [r3, #20]
 80155d8:	4313      	orrs	r3, r2
 80155da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80155e2:	683b      	ldr	r3, [r7, #0]
 80155e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155e6:	4313      	orrs	r3, r2
 80155e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80155f0:	683b      	ldr	r3, [r7, #0]
 80155f2:	699b      	ldr	r3, [r3, #24]
 80155f4:	041b      	lsls	r3, r3, #16
 80155f6:	4313      	orrs	r3, r2
 80155f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	4a16      	ldr	r2, [pc, #88]	; (8015658 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8015600:	4293      	cmp	r3, r2
 8015602:	d004      	beq.n	801560e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	4a14      	ldr	r2, [pc, #80]	; (801565c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 801560a:	4293      	cmp	r3, r2
 801560c:	d115      	bne.n	801563a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8015614:	683b      	ldr	r3, [r7, #0]
 8015616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015618:	051b      	lsls	r3, r3, #20
 801561a:	4313      	orrs	r3, r2
 801561c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8015624:	683b      	ldr	r3, [r7, #0]
 8015626:	69db      	ldr	r3, [r3, #28]
 8015628:	4313      	orrs	r3, r2
 801562a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	6a1b      	ldr	r3, [r3, #32]
 8015636:	4313      	orrs	r3, r2
 8015638:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	68fa      	ldr	r2, [r7, #12]
 8015640:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	2200      	movs	r2, #0
 8015646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801564a:	2300      	movs	r3, #0
}
 801564c:	4618      	mov	r0, r3
 801564e:	3714      	adds	r7, #20
 8015650:	46bd      	mov	sp, r7
 8015652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015656:	4770      	bx	lr
 8015658:	40010000 	.word	0x40010000
 801565c:	40010400 	.word	0x40010400

08015660 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015660:	b480      	push	{r7}
 8015662:	b083      	sub	sp, #12
 8015664:	af00      	add	r7, sp, #0
 8015666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015668:	bf00      	nop
 801566a:	370c      	adds	r7, #12
 801566c:	46bd      	mov	sp, r7
 801566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015672:	4770      	bx	lr

08015674 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015674:	b480      	push	{r7}
 8015676:	b083      	sub	sp, #12
 8015678:	af00      	add	r7, sp, #0
 801567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801567c:	bf00      	nop
 801567e:	370c      	adds	r7, #12
 8015680:	46bd      	mov	sp, r7
 8015682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015686:	4770      	bx	lr

08015688 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8015688:	b480      	push	{r7}
 801568a:	b083      	sub	sp, #12
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8015690:	bf00      	nop
 8015692:	370c      	adds	r7, #12
 8015694:	46bd      	mov	sp, r7
 8015696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801569a:	4770      	bx	lr

0801569c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801569c:	b580      	push	{r7, lr}
 801569e:	b082      	sub	sp, #8
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d101      	bne.n	80156ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80156aa:	2301      	movs	r3, #1
 80156ac:	e042      	b.n	8015734 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d106      	bne.n	80156c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	2200      	movs	r2, #0
 80156bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80156c0:	6878      	ldr	r0, [r7, #4]
 80156c2:	f7f0 fc71 	bl	8005fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	2224      	movs	r2, #36	; 0x24
 80156ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	681a      	ldr	r2, [r3, #0]
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	f022 0201 	bic.w	r2, r2, #1
 80156dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d002      	beq.n	80156ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80156e6:	6878      	ldr	r0, [r7, #4]
 80156e8:	f001 fc4c 	bl	8016f84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80156ec:	6878      	ldr	r0, [r7, #4]
 80156ee:	f000 fee1 	bl	80164b4 <UART_SetConfig>
 80156f2:	4603      	mov	r3, r0
 80156f4:	2b01      	cmp	r3, #1
 80156f6:	d101      	bne.n	80156fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80156f8:	2301      	movs	r3, #1
 80156fa:	e01b      	b.n	8015734 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	685a      	ldr	r2, [r3, #4]
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801570a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	689a      	ldr	r2, [r3, #8]
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801571a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	681a      	ldr	r2, [r3, #0]
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	f042 0201 	orr.w	r2, r2, #1
 801572a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801572c:	6878      	ldr	r0, [r7, #4]
 801572e:	f001 fccb 	bl	80170c8 <UART_CheckIdleState>
 8015732:	4603      	mov	r3, r0
}
 8015734:	4618      	mov	r0, r3
 8015736:	3708      	adds	r7, #8
 8015738:	46bd      	mov	sp, r7
 801573a:	bd80      	pop	{r7, pc}

0801573c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801573c:	b580      	push	{r7, lr}
 801573e:	b08a      	sub	sp, #40	; 0x28
 8015740:	af02      	add	r7, sp, #8
 8015742:	60f8      	str	r0, [r7, #12]
 8015744:	60b9      	str	r1, [r7, #8]
 8015746:	603b      	str	r3, [r7, #0]
 8015748:	4613      	mov	r3, r2
 801574a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015752:	2b20      	cmp	r3, #32
 8015754:	d17b      	bne.n	801584e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8015756:	68bb      	ldr	r3, [r7, #8]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d002      	beq.n	8015762 <HAL_UART_Transmit+0x26>
 801575c:	88fb      	ldrh	r3, [r7, #6]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d101      	bne.n	8015766 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8015762:	2301      	movs	r3, #1
 8015764:	e074      	b.n	8015850 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	2200      	movs	r2, #0
 801576a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	2221      	movs	r2, #33	; 0x21
 8015772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015776:	f7f1 f9fb 	bl	8006b70 <HAL_GetTick>
 801577a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	88fa      	ldrh	r2, [r7, #6]
 8015780:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	88fa      	ldrh	r2, [r7, #6]
 8015788:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	689b      	ldr	r3, [r3, #8]
 8015790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015794:	d108      	bne.n	80157a8 <HAL_UART_Transmit+0x6c>
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	691b      	ldr	r3, [r3, #16]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d104      	bne.n	80157a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801579e:	2300      	movs	r3, #0
 80157a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80157a2:	68bb      	ldr	r3, [r7, #8]
 80157a4:	61bb      	str	r3, [r7, #24]
 80157a6:	e003      	b.n	80157b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80157a8:	68bb      	ldr	r3, [r7, #8]
 80157aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80157ac:	2300      	movs	r3, #0
 80157ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80157b0:	e030      	b.n	8015814 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80157b2:	683b      	ldr	r3, [r7, #0]
 80157b4:	9300      	str	r3, [sp, #0]
 80157b6:	697b      	ldr	r3, [r7, #20]
 80157b8:	2200      	movs	r2, #0
 80157ba:	2180      	movs	r1, #128	; 0x80
 80157bc:	68f8      	ldr	r0, [r7, #12]
 80157be:	f001 fd2d 	bl	801721c <UART_WaitOnFlagUntilTimeout>
 80157c2:	4603      	mov	r3, r0
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d005      	beq.n	80157d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	2220      	movs	r2, #32
 80157cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80157d0:	2303      	movs	r3, #3
 80157d2:	e03d      	b.n	8015850 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80157d4:	69fb      	ldr	r3, [r7, #28]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d10b      	bne.n	80157f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80157da:	69bb      	ldr	r3, [r7, #24]
 80157dc:	881b      	ldrh	r3, [r3, #0]
 80157de:	461a      	mov	r2, r3
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80157e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80157ea:	69bb      	ldr	r3, [r7, #24]
 80157ec:	3302      	adds	r3, #2
 80157ee:	61bb      	str	r3, [r7, #24]
 80157f0:	e007      	b.n	8015802 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80157f2:	69fb      	ldr	r3, [r7, #28]
 80157f4:	781a      	ldrb	r2, [r3, #0]
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80157fc:	69fb      	ldr	r3, [r7, #28]
 80157fe:	3301      	adds	r3, #1
 8015800:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8015808:	b29b      	uxth	r3, r3
 801580a:	3b01      	subs	r3, #1
 801580c:	b29a      	uxth	r2, r3
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801581a:	b29b      	uxth	r3, r3
 801581c:	2b00      	cmp	r3, #0
 801581e:	d1c8      	bne.n	80157b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015820:	683b      	ldr	r3, [r7, #0]
 8015822:	9300      	str	r3, [sp, #0]
 8015824:	697b      	ldr	r3, [r7, #20]
 8015826:	2200      	movs	r2, #0
 8015828:	2140      	movs	r1, #64	; 0x40
 801582a:	68f8      	ldr	r0, [r7, #12]
 801582c:	f001 fcf6 	bl	801721c <UART_WaitOnFlagUntilTimeout>
 8015830:	4603      	mov	r3, r0
 8015832:	2b00      	cmp	r3, #0
 8015834:	d005      	beq.n	8015842 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	2220      	movs	r2, #32
 801583a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801583e:	2303      	movs	r3, #3
 8015840:	e006      	b.n	8015850 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	2220      	movs	r2, #32
 8015846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801584a:	2300      	movs	r3, #0
 801584c:	e000      	b.n	8015850 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801584e:	2302      	movs	r3, #2
  }
}
 8015850:	4618      	mov	r0, r3
 8015852:	3720      	adds	r7, #32
 8015854:	46bd      	mov	sp, r7
 8015856:	bd80      	pop	{r7, pc}

08015858 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b08a      	sub	sp, #40	; 0x28
 801585c:	af02      	add	r7, sp, #8
 801585e:	60f8      	str	r0, [r7, #12]
 8015860:	60b9      	str	r1, [r7, #8]
 8015862:	603b      	str	r3, [r7, #0]
 8015864:	4613      	mov	r3, r2
 8015866:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801586e:	2b20      	cmp	r3, #32
 8015870:	f040 80b5 	bne.w	80159de <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8015874:	68bb      	ldr	r3, [r7, #8]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d002      	beq.n	8015880 <HAL_UART_Receive+0x28>
 801587a:	88fb      	ldrh	r3, [r7, #6]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d101      	bne.n	8015884 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8015880:	2301      	movs	r3, #1
 8015882:	e0ad      	b.n	80159e0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	2200      	movs	r2, #0
 8015888:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	2222      	movs	r2, #34	; 0x22
 8015890:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	2200      	movs	r2, #0
 8015898:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801589a:	f7f1 f969 	bl	8006b70 <HAL_GetTick>
 801589e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	88fa      	ldrh	r2, [r7, #6]
 80158a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	88fa      	ldrh	r2, [r7, #6]
 80158ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	689b      	ldr	r3, [r3, #8]
 80158b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80158b8:	d10e      	bne.n	80158d8 <HAL_UART_Receive+0x80>
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	691b      	ldr	r3, [r3, #16]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d105      	bne.n	80158ce <HAL_UART_Receive+0x76>
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80158c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80158cc:	e02d      	b.n	801592a <HAL_UART_Receive+0xd2>
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	22ff      	movs	r2, #255	; 0xff
 80158d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80158d6:	e028      	b.n	801592a <HAL_UART_Receive+0xd2>
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	689b      	ldr	r3, [r3, #8]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d10d      	bne.n	80158fc <HAL_UART_Receive+0xa4>
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	691b      	ldr	r3, [r3, #16]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d104      	bne.n	80158f2 <HAL_UART_Receive+0x9a>
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	22ff      	movs	r2, #255	; 0xff
 80158ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80158f0:	e01b      	b.n	801592a <HAL_UART_Receive+0xd2>
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	227f      	movs	r2, #127	; 0x7f
 80158f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80158fa:	e016      	b.n	801592a <HAL_UART_Receive+0xd2>
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	689b      	ldr	r3, [r3, #8]
 8015900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015904:	d10d      	bne.n	8015922 <HAL_UART_Receive+0xca>
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	691b      	ldr	r3, [r3, #16]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d104      	bne.n	8015918 <HAL_UART_Receive+0xc0>
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	227f      	movs	r2, #127	; 0x7f
 8015912:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015916:	e008      	b.n	801592a <HAL_UART_Receive+0xd2>
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	223f      	movs	r2, #63	; 0x3f
 801591c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015920:	e003      	b.n	801592a <HAL_UART_Receive+0xd2>
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	2200      	movs	r2, #0
 8015926:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015930:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	689b      	ldr	r3, [r3, #8]
 8015936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801593a:	d108      	bne.n	801594e <HAL_UART_Receive+0xf6>
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	691b      	ldr	r3, [r3, #16]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d104      	bne.n	801594e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8015944:	2300      	movs	r3, #0
 8015946:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015948:	68bb      	ldr	r3, [r7, #8]
 801594a:	61bb      	str	r3, [r7, #24]
 801594c:	e003      	b.n	8015956 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801594e:	68bb      	ldr	r3, [r7, #8]
 8015950:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015952:	2300      	movs	r3, #0
 8015954:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8015956:	e036      	b.n	80159c6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8015958:	683b      	ldr	r3, [r7, #0]
 801595a:	9300      	str	r3, [sp, #0]
 801595c:	697b      	ldr	r3, [r7, #20]
 801595e:	2200      	movs	r2, #0
 8015960:	2120      	movs	r1, #32
 8015962:	68f8      	ldr	r0, [r7, #12]
 8015964:	f001 fc5a 	bl	801721c <UART_WaitOnFlagUntilTimeout>
 8015968:	4603      	mov	r3, r0
 801596a:	2b00      	cmp	r3, #0
 801596c:	d005      	beq.n	801597a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	2220      	movs	r2, #32
 8015972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8015976:	2303      	movs	r3, #3
 8015978:	e032      	b.n	80159e0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 801597a:	69fb      	ldr	r3, [r7, #28]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d10c      	bne.n	801599a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015986:	b29a      	uxth	r2, r3
 8015988:	8a7b      	ldrh	r3, [r7, #18]
 801598a:	4013      	ands	r3, r2
 801598c:	b29a      	uxth	r2, r3
 801598e:	69bb      	ldr	r3, [r7, #24]
 8015990:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8015992:	69bb      	ldr	r3, [r7, #24]
 8015994:	3302      	adds	r3, #2
 8015996:	61bb      	str	r3, [r7, #24]
 8015998:	e00c      	b.n	80159b4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159a0:	b2da      	uxtb	r2, r3
 80159a2:	8a7b      	ldrh	r3, [r7, #18]
 80159a4:	b2db      	uxtb	r3, r3
 80159a6:	4013      	ands	r3, r2
 80159a8:	b2da      	uxtb	r2, r3
 80159aa:	69fb      	ldr	r3, [r7, #28]
 80159ac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80159ae:	69fb      	ldr	r3, [r7, #28]
 80159b0:	3301      	adds	r3, #1
 80159b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80159ba:	b29b      	uxth	r3, r3
 80159bc:	3b01      	subs	r3, #1
 80159be:	b29a      	uxth	r2, r3
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80159cc:	b29b      	uxth	r3, r3
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d1c2      	bne.n	8015958 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	2220      	movs	r2, #32
 80159d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80159da:	2300      	movs	r3, #0
 80159dc:	e000      	b.n	80159e0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80159de:	2302      	movs	r3, #2
  }
}
 80159e0:	4618      	mov	r0, r3
 80159e2:	3720      	adds	r7, #32
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}

080159e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80159e8:	b480      	push	{r7}
 80159ea:	b091      	sub	sp, #68	; 0x44
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	60f8      	str	r0, [r7, #12]
 80159f0:	60b9      	str	r1, [r7, #8]
 80159f2:	4613      	mov	r3, r2
 80159f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80159fc:	2b20      	cmp	r3, #32
 80159fe:	d178      	bne.n	8015af2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8015a00:	68bb      	ldr	r3, [r7, #8]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d002      	beq.n	8015a0c <HAL_UART_Transmit_IT+0x24>
 8015a06:	88fb      	ldrh	r3, [r7, #6]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d101      	bne.n	8015a10 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8015a0c:	2301      	movs	r3, #1
 8015a0e:	e071      	b.n	8015af4 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	68ba      	ldr	r2, [r7, #8]
 8015a14:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	88fa      	ldrh	r2, [r7, #6]
 8015a1a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	88fa      	ldrh	r2, [r7, #6]
 8015a22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	2200      	movs	r2, #0
 8015a2a:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	2221      	movs	r2, #33	; 0x21
 8015a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015a40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015a44:	d12a      	bne.n	8015a9c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	689b      	ldr	r3, [r3, #8]
 8015a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a4e:	d107      	bne.n	8015a60 <HAL_UART_Transmit_IT+0x78>
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	691b      	ldr	r3, [r3, #16]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d103      	bne.n	8015a60 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	4a29      	ldr	r2, [pc, #164]	; (8015b00 <HAL_UART_Transmit_IT+0x118>)
 8015a5c:	679a      	str	r2, [r3, #120]	; 0x78
 8015a5e:	e002      	b.n	8015a66 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	4a28      	ldr	r2, [pc, #160]	; (8015b04 <HAL_UART_Transmit_IT+0x11c>)
 8015a64:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	3308      	adds	r3, #8
 8015a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a70:	e853 3f00 	ldrex	r3, [r3]
 8015a74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015a7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	3308      	adds	r3, #8
 8015a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015a86:	637a      	str	r2, [r7, #52]	; 0x34
 8015a88:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015a8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a8e:	e841 2300 	strex	r3, r2, [r1]
 8015a92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d1e5      	bne.n	8015a66 <HAL_UART_Transmit_IT+0x7e>
 8015a9a:	e028      	b.n	8015aee <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	689b      	ldr	r3, [r3, #8]
 8015aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015aa4:	d107      	bne.n	8015ab6 <HAL_UART_Transmit_IT+0xce>
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	691b      	ldr	r3, [r3, #16]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d103      	bne.n	8015ab6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	4a15      	ldr	r2, [pc, #84]	; (8015b08 <HAL_UART_Transmit_IT+0x120>)
 8015ab2:	679a      	str	r2, [r3, #120]	; 0x78
 8015ab4:	e002      	b.n	8015abc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	4a14      	ldr	r2, [pc, #80]	; (8015b0c <HAL_UART_Transmit_IT+0x124>)
 8015aba:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ac2:	697b      	ldr	r3, [r7, #20]
 8015ac4:	e853 3f00 	ldrex	r3, [r3]
 8015ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8015aca:	693b      	ldr	r3, [r7, #16]
 8015acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	461a      	mov	r2, r3
 8015ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ada:	623b      	str	r3, [r7, #32]
 8015adc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ade:	69f9      	ldr	r1, [r7, #28]
 8015ae0:	6a3a      	ldr	r2, [r7, #32]
 8015ae2:	e841 2300 	strex	r3, r2, [r1]
 8015ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8015ae8:	69bb      	ldr	r3, [r7, #24]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d1e6      	bne.n	8015abc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8015aee:	2300      	movs	r3, #0
 8015af0:	e000      	b.n	8015af4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8015af2:	2302      	movs	r3, #2
  }
}
 8015af4:	4618      	mov	r0, r3
 8015af6:	3744      	adds	r7, #68	; 0x44
 8015af8:	46bd      	mov	sp, r7
 8015afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afe:	4770      	bx	lr
 8015b00:	0801788f 	.word	0x0801788f
 8015b04:	080177af 	.word	0x080177af
 8015b08:	080176ed 	.word	0x080176ed
 8015b0c:	08017635 	.word	0x08017635

08015b10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b08a      	sub	sp, #40	; 0x28
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	60f8      	str	r0, [r7, #12]
 8015b18:	60b9      	str	r1, [r7, #8]
 8015b1a:	4613      	mov	r3, r2
 8015b1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015b24:	2b20      	cmp	r3, #32
 8015b26:	d137      	bne.n	8015b98 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8015b28:	68bb      	ldr	r3, [r7, #8]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d002      	beq.n	8015b34 <HAL_UART_Receive_IT+0x24>
 8015b2e:	88fb      	ldrh	r3, [r7, #6]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d101      	bne.n	8015b38 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8015b34:	2301      	movs	r3, #1
 8015b36:	e030      	b.n	8015b9a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	4a18      	ldr	r2, [pc, #96]	; (8015ba4 <HAL_UART_Receive_IT+0x94>)
 8015b44:	4293      	cmp	r3, r2
 8015b46:	d01f      	beq.n	8015b88 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	685b      	ldr	r3, [r3, #4]
 8015b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d018      	beq.n	8015b88 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b5c:	697b      	ldr	r3, [r7, #20]
 8015b5e:	e853 3f00 	ldrex	r3, [r3]
 8015b62:	613b      	str	r3, [r7, #16]
   return(result);
 8015b64:	693b      	ldr	r3, [r7, #16]
 8015b66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	461a      	mov	r2, r3
 8015b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b74:	623b      	str	r3, [r7, #32]
 8015b76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b78:	69f9      	ldr	r1, [r7, #28]
 8015b7a:	6a3a      	ldr	r2, [r7, #32]
 8015b7c:	e841 2300 	strex	r3, r2, [r1]
 8015b80:	61bb      	str	r3, [r7, #24]
   return(result);
 8015b82:	69bb      	ldr	r3, [r7, #24]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d1e6      	bne.n	8015b56 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8015b88:	88fb      	ldrh	r3, [r7, #6]
 8015b8a:	461a      	mov	r2, r3
 8015b8c:	68b9      	ldr	r1, [r7, #8]
 8015b8e:	68f8      	ldr	r0, [r7, #12]
 8015b90:	f001 fbb2 	bl	80172f8 <UART_Start_Receive_IT>
 8015b94:	4603      	mov	r3, r0
 8015b96:	e000      	b.n	8015b9a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8015b98:	2302      	movs	r3, #2
  }
}
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	3728      	adds	r7, #40	; 0x28
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	bd80      	pop	{r7, pc}
 8015ba2:	bf00      	nop
 8015ba4:	58000c00 	.word	0x58000c00

08015ba8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b09a      	sub	sp, #104	; 0x68
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015bb8:	e853 3f00 	ldrex	r3, [r3]
 8015bbc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015bc4:	667b      	str	r3, [r7, #100]	; 0x64
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	461a      	mov	r2, r3
 8015bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015bce:	657b      	str	r3, [r7, #84]	; 0x54
 8015bd0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015bd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015bd6:	e841 2300 	strex	r3, r2, [r1]
 8015bda:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d1e6      	bne.n	8015bb0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	3308      	adds	r3, #8
 8015be8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bec:	e853 3f00 	ldrex	r3, [r3]
 8015bf0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015bf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015bf4:	4b46      	ldr	r3, [pc, #280]	; (8015d10 <HAL_UART_AbortReceive+0x168>)
 8015bf6:	4013      	ands	r3, r2
 8015bf8:	663b      	str	r3, [r7, #96]	; 0x60
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	3308      	adds	r3, #8
 8015c00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015c02:	643a      	str	r2, [r7, #64]	; 0x40
 8015c04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015c08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015c0a:	e841 2300 	strex	r3, r2, [r1]
 8015c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d1e5      	bne.n	8015be2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c1a:	2b01      	cmp	r3, #1
 8015c1c:	d118      	bne.n	8015c50 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c24:	6a3b      	ldr	r3, [r7, #32]
 8015c26:	e853 3f00 	ldrex	r3, [r3]
 8015c2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8015c2c:	69fb      	ldr	r3, [r7, #28]
 8015c2e:	f023 0310 	bic.w	r3, r3, #16
 8015c32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	461a      	mov	r2, r3
 8015c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c3e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015c44:	e841 2300 	strex	r3, r2, [r1]
 8015c48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d1e6      	bne.n	8015c1e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	689b      	ldr	r3, [r3, #8]
 8015c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c5a:	2b40      	cmp	r3, #64	; 0x40
 8015c5c:	d13b      	bne.n	8015cd6 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	3308      	adds	r3, #8
 8015c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	e853 3f00 	ldrex	r3, [r3]
 8015c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8015c6e:	68bb      	ldr	r3, [r7, #8]
 8015c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015c74:	65bb      	str	r3, [r7, #88]	; 0x58
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	3308      	adds	r3, #8
 8015c7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015c7e:	61ba      	str	r2, [r7, #24]
 8015c80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c82:	6979      	ldr	r1, [r7, #20]
 8015c84:	69ba      	ldr	r2, [r7, #24]
 8015c86:	e841 2300 	strex	r3, r2, [r1]
 8015c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8015c8c:	693b      	ldr	r3, [r7, #16]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d1e5      	bne.n	8015c5e <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d01c      	beq.n	8015cd6 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015ca2:	2200      	movs	r2, #0
 8015ca4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015cac:	4618      	mov	r0, r3
 8015cae:	f7f3 fe4d 	bl	800994c <HAL_DMA_Abort>
 8015cb2:	4603      	mov	r3, r0
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d00e      	beq.n	8015cd6 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f7f5 fae0 	bl	800b284 <HAL_DMA_GetError>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	2b20      	cmp	r3, #32
 8015cc8:	d105      	bne.n	8015cd6 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2210      	movs	r2, #16
 8015cce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8015cd2:	2303      	movs	r3, #3
 8015cd4:	e017      	b.n	8015d06 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	2200      	movs	r2, #0
 8015cda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	220f      	movs	r2, #15
 8015ce4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	699a      	ldr	r2, [r3, #24]
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	f042 0208 	orr.w	r2, r2, #8
 8015cf4:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	2220      	movs	r2, #32
 8015cfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	2200      	movs	r2, #0
 8015d02:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8015d04:	2300      	movs	r3, #0
}
 8015d06:	4618      	mov	r0, r3
 8015d08:	3768      	adds	r7, #104	; 0x68
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	bd80      	pop	{r7, pc}
 8015d0e:	bf00      	nop
 8015d10:	effffffe 	.word	0xeffffffe

08015d14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b0ba      	sub	sp, #232	; 0xe8
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	69db      	ldr	r3, [r3, #28]
 8015d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	689b      	ldr	r3, [r3, #8]
 8015d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8015d3a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8015d3e:	f640 030f 	movw	r3, #2063	; 0x80f
 8015d42:	4013      	ands	r3, r2
 8015d44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8015d48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d11b      	bne.n	8015d88 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015d54:	f003 0320 	and.w	r3, r3, #32
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d015      	beq.n	8015d88 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8015d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015d60:	f003 0320 	and.w	r3, r3, #32
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d105      	bne.n	8015d74 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8015d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d009      	beq.n	8015d88 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	f000 8377 	beq.w	801646c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d82:	6878      	ldr	r0, [r7, #4]
 8015d84:	4798      	blx	r3
      }
      return;
 8015d86:	e371      	b.n	801646c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8015d88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	f000 8123 	beq.w	8015fd8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8015d92:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8015d96:	4b8d      	ldr	r3, [pc, #564]	; (8015fcc <HAL_UART_IRQHandler+0x2b8>)
 8015d98:	4013      	ands	r3, r2
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d106      	bne.n	8015dac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8015d9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8015da2:	4b8b      	ldr	r3, [pc, #556]	; (8015fd0 <HAL_UART_IRQHandler+0x2bc>)
 8015da4:	4013      	ands	r3, r2
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	f000 8116 	beq.w	8015fd8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015db0:	f003 0301 	and.w	r3, r3, #1
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d011      	beq.n	8015ddc <HAL_UART_IRQHandler+0xc8>
 8015db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d00b      	beq.n	8015ddc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	2201      	movs	r2, #1
 8015dca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015dd2:	f043 0201 	orr.w	r2, r3, #1
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015de0:	f003 0302 	and.w	r3, r3, #2
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d011      	beq.n	8015e0c <HAL_UART_IRQHandler+0xf8>
 8015de8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015dec:	f003 0301 	and.w	r3, r3, #1
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d00b      	beq.n	8015e0c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	2202      	movs	r2, #2
 8015dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015e02:	f043 0204 	orr.w	r2, r3, #4
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015e10:	f003 0304 	and.w	r3, r3, #4
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d011      	beq.n	8015e3c <HAL_UART_IRQHandler+0x128>
 8015e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015e1c:	f003 0301 	and.w	r3, r3, #1
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d00b      	beq.n	8015e3c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	2204      	movs	r2, #4
 8015e2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015e32:	f043 0202 	orr.w	r2, r3, #2
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8015e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015e40:	f003 0308 	and.w	r3, r3, #8
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d017      	beq.n	8015e78 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8015e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015e4c:	f003 0320 	and.w	r3, r3, #32
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d105      	bne.n	8015e60 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8015e54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8015e58:	4b5c      	ldr	r3, [pc, #368]	; (8015fcc <HAL_UART_IRQHandler+0x2b8>)
 8015e5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d00b      	beq.n	8015e78 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	2208      	movs	r2, #8
 8015e66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015e6e:	f043 0208 	orr.w	r2, r3, #8
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8015e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d012      	beq.n	8015eaa <HAL_UART_IRQHandler+0x196>
 8015e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015e88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d00c      	beq.n	8015eaa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015e98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015ea0:	f043 0220 	orr.w	r2, r3, #32
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	f000 82dd 	beq.w	8016470 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015eba:	f003 0320 	and.w	r3, r3, #32
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d013      	beq.n	8015eea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8015ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015ec6:	f003 0320 	and.w	r3, r3, #32
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d105      	bne.n	8015eda <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8015ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d007      	beq.n	8015eea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d003      	beq.n	8015eea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015ee6:	6878      	ldr	r0, [r7, #4]
 8015ee8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015ef0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	689b      	ldr	r3, [r3, #8]
 8015efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015efe:	2b40      	cmp	r3, #64	; 0x40
 8015f00:	d005      	beq.n	8015f0e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8015f02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015f06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d054      	beq.n	8015fb8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8015f0e:	6878      	ldr	r0, [r7, #4]
 8015f10:	f001 fb14 	bl	801753c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	689b      	ldr	r3, [r3, #8]
 8015f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015f1e:	2b40      	cmp	r3, #64	; 0x40
 8015f20:	d146      	bne.n	8015fb0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	3308      	adds	r3, #8
 8015f28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015f30:	e853 3f00 	ldrex	r3, [r3]
 8015f34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8015f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	3308      	adds	r3, #8
 8015f4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015f4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8015f52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8015f5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8015f5e:	e841 2300 	strex	r3, r2, [r1]
 8015f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8015f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d1d9      	bne.n	8015f22 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d017      	beq.n	8015fa8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015f7e:	4a15      	ldr	r2, [pc, #84]	; (8015fd4 <HAL_UART_IRQHandler+0x2c0>)
 8015f80:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015f88:	4618      	mov	r0, r3
 8015f8a:	f7f3 fffd 	bl	8009f88 <HAL_DMA_Abort_IT>
 8015f8e:	4603      	mov	r3, r0
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d019      	beq.n	8015fc8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f9c:	687a      	ldr	r2, [r7, #4]
 8015f9e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8015fa2:	4610      	mov	r0, r2
 8015fa4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015fa6:	e00f      	b.n	8015fc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8015fa8:	6878      	ldr	r0, [r7, #4]
 8015faa:	f000 fa6d 	bl	8016488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015fae:	e00b      	b.n	8015fc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f000 fa69 	bl	8016488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015fb6:	e007      	b.n	8015fc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8015fb8:	6878      	ldr	r0, [r7, #4]
 8015fba:	f000 fa65 	bl	8016488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	2200      	movs	r2, #0
 8015fc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8015fc6:	e253      	b.n	8016470 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015fc8:	bf00      	nop
    return;
 8015fca:	e251      	b.n	8016470 <HAL_UART_IRQHandler+0x75c>
 8015fcc:	10000001 	.word	0x10000001
 8015fd0:	04000120 	.word	0x04000120
 8015fd4:	08017609 	.word	0x08017609

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015fdc:	2b01      	cmp	r3, #1
 8015fde:	f040 81e7 	bne.w	80163b0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8015fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015fe6:	f003 0310 	and.w	r3, r3, #16
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	f000 81e0 	beq.w	80163b0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8015ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015ff4:	f003 0310 	and.w	r3, r3, #16
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	f000 81d9 	beq.w	80163b0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	2210      	movs	r2, #16
 8016004:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	689b      	ldr	r3, [r3, #8]
 801600c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016010:	2b40      	cmp	r3, #64	; 0x40
 8016012:	f040 8151 	bne.w	80162b8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	4a96      	ldr	r2, [pc, #600]	; (8016278 <HAL_UART_IRQHandler+0x564>)
 8016020:	4293      	cmp	r3, r2
 8016022:	d068      	beq.n	80160f6 <HAL_UART_IRQHandler+0x3e2>
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	4a93      	ldr	r2, [pc, #588]	; (801627c <HAL_UART_IRQHandler+0x568>)
 801602e:	4293      	cmp	r3, r2
 8016030:	d061      	beq.n	80160f6 <HAL_UART_IRQHandler+0x3e2>
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	4a91      	ldr	r2, [pc, #580]	; (8016280 <HAL_UART_IRQHandler+0x56c>)
 801603c:	4293      	cmp	r3, r2
 801603e:	d05a      	beq.n	80160f6 <HAL_UART_IRQHandler+0x3e2>
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	4a8e      	ldr	r2, [pc, #568]	; (8016284 <HAL_UART_IRQHandler+0x570>)
 801604a:	4293      	cmp	r3, r2
 801604c:	d053      	beq.n	80160f6 <HAL_UART_IRQHandler+0x3e2>
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	4a8c      	ldr	r2, [pc, #560]	; (8016288 <HAL_UART_IRQHandler+0x574>)
 8016058:	4293      	cmp	r3, r2
 801605a:	d04c      	beq.n	80160f6 <HAL_UART_IRQHandler+0x3e2>
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	4a89      	ldr	r2, [pc, #548]	; (801628c <HAL_UART_IRQHandler+0x578>)
 8016066:	4293      	cmp	r3, r2
 8016068:	d045      	beq.n	80160f6 <HAL_UART_IRQHandler+0x3e2>
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	4a87      	ldr	r2, [pc, #540]	; (8016290 <HAL_UART_IRQHandler+0x57c>)
 8016074:	4293      	cmp	r3, r2
 8016076:	d03e      	beq.n	80160f6 <HAL_UART_IRQHandler+0x3e2>
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	4a84      	ldr	r2, [pc, #528]	; (8016294 <HAL_UART_IRQHandler+0x580>)
 8016082:	4293      	cmp	r3, r2
 8016084:	d037      	beq.n	80160f6 <HAL_UART_IRQHandler+0x3e2>
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	4a82      	ldr	r2, [pc, #520]	; (8016298 <HAL_UART_IRQHandler+0x584>)
 8016090:	4293      	cmp	r3, r2
 8016092:	d030      	beq.n	80160f6 <HAL_UART_IRQHandler+0x3e2>
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	4a7f      	ldr	r2, [pc, #508]	; (801629c <HAL_UART_IRQHandler+0x588>)
 801609e:	4293      	cmp	r3, r2
 80160a0:	d029      	beq.n	80160f6 <HAL_UART_IRQHandler+0x3e2>
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	4a7d      	ldr	r2, [pc, #500]	; (80162a0 <HAL_UART_IRQHandler+0x58c>)
 80160ac:	4293      	cmp	r3, r2
 80160ae:	d022      	beq.n	80160f6 <HAL_UART_IRQHandler+0x3e2>
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	4a7a      	ldr	r2, [pc, #488]	; (80162a4 <HAL_UART_IRQHandler+0x590>)
 80160ba:	4293      	cmp	r3, r2
 80160bc:	d01b      	beq.n	80160f6 <HAL_UART_IRQHandler+0x3e2>
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	4a78      	ldr	r2, [pc, #480]	; (80162a8 <HAL_UART_IRQHandler+0x594>)
 80160c8:	4293      	cmp	r3, r2
 80160ca:	d014      	beq.n	80160f6 <HAL_UART_IRQHandler+0x3e2>
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	4a75      	ldr	r2, [pc, #468]	; (80162ac <HAL_UART_IRQHandler+0x598>)
 80160d6:	4293      	cmp	r3, r2
 80160d8:	d00d      	beq.n	80160f6 <HAL_UART_IRQHandler+0x3e2>
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	4a73      	ldr	r2, [pc, #460]	; (80162b0 <HAL_UART_IRQHandler+0x59c>)
 80160e4:	4293      	cmp	r3, r2
 80160e6:	d006      	beq.n	80160f6 <HAL_UART_IRQHandler+0x3e2>
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	4a70      	ldr	r2, [pc, #448]	; (80162b4 <HAL_UART_IRQHandler+0x5a0>)
 80160f2:	4293      	cmp	r3, r2
 80160f4:	d106      	bne.n	8016104 <HAL_UART_IRQHandler+0x3f0>
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	685b      	ldr	r3, [r3, #4]
 8016100:	b29b      	uxth	r3, r3
 8016102:	e005      	b.n	8016110 <HAL_UART_IRQHandler+0x3fc>
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	685b      	ldr	r3, [r3, #4]
 801610e:	b29b      	uxth	r3, r3
 8016110:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8016114:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8016118:	2b00      	cmp	r3, #0
 801611a:	f000 81ab 	beq.w	8016474 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016124:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016128:	429a      	cmp	r2, r3
 801612a:	f080 81a3 	bcs.w	8016474 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016134:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801613e:	69db      	ldr	r3, [r3, #28]
 8016140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016144:	f000 8087 	beq.w	8016256 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016150:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016154:	e853 3f00 	ldrex	r3, [r3]
 8016158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801615c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	461a      	mov	r2, r3
 801616e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016172:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016176:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801617a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801617e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016182:	e841 2300 	strex	r3, r2, [r1]
 8016186:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801618a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801618e:	2b00      	cmp	r3, #0
 8016190:	d1da      	bne.n	8016148 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	3308      	adds	r3, #8
 8016198:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801619a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801619c:	e853 3f00 	ldrex	r3, [r3]
 80161a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80161a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80161a4:	f023 0301 	bic.w	r3, r3, #1
 80161a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	3308      	adds	r3, #8
 80161b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80161b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80161ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80161be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80161c2:	e841 2300 	strex	r3, r2, [r1]
 80161c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80161c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d1e1      	bne.n	8016192 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	3308      	adds	r3, #8
 80161d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161d8:	e853 3f00 	ldrex	r3, [r3]
 80161dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80161de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80161e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80161e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	3308      	adds	r3, #8
 80161ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80161f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80161f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80161f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80161fa:	e841 2300 	strex	r3, r2, [r1]
 80161fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016202:	2b00      	cmp	r3, #0
 8016204:	d1e3      	bne.n	80161ce <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	2220      	movs	r2, #32
 801620a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2200      	movs	r2, #0
 8016212:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801621a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801621c:	e853 3f00 	ldrex	r3, [r3]
 8016220:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016224:	f023 0310 	bic.w	r3, r3, #16
 8016228:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	461a      	mov	r2, r3
 8016232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016236:	65bb      	str	r3, [r7, #88]	; 0x58
 8016238:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801623a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801623c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801623e:	e841 2300 	strex	r3, r2, [r1]
 8016242:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016246:	2b00      	cmp	r3, #0
 8016248:	d1e4      	bne.n	8016214 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016250:	4618      	mov	r0, r3
 8016252:	f7f3 fb7b 	bl	800994c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	2202      	movs	r2, #2
 801625a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016268:	b29b      	uxth	r3, r3
 801626a:	1ad3      	subs	r3, r2, r3
 801626c:	b29b      	uxth	r3, r3
 801626e:	4619      	mov	r1, r3
 8016270:	6878      	ldr	r0, [r7, #4]
 8016272:	f000 f913 	bl	801649c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016276:	e0fd      	b.n	8016474 <HAL_UART_IRQHandler+0x760>
 8016278:	40020010 	.word	0x40020010
 801627c:	40020028 	.word	0x40020028
 8016280:	40020040 	.word	0x40020040
 8016284:	40020058 	.word	0x40020058
 8016288:	40020070 	.word	0x40020070
 801628c:	40020088 	.word	0x40020088
 8016290:	400200a0 	.word	0x400200a0
 8016294:	400200b8 	.word	0x400200b8
 8016298:	40020410 	.word	0x40020410
 801629c:	40020428 	.word	0x40020428
 80162a0:	40020440 	.word	0x40020440
 80162a4:	40020458 	.word	0x40020458
 80162a8:	40020470 	.word	0x40020470
 80162ac:	40020488 	.word	0x40020488
 80162b0:	400204a0 	.word	0x400204a0
 80162b4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80162c4:	b29b      	uxth	r3, r3
 80162c6:	1ad3      	subs	r3, r2, r3
 80162c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80162d2:	b29b      	uxth	r3, r3
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	f000 80cf 	beq.w	8016478 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80162da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80162de:	2b00      	cmp	r3, #0
 80162e0:	f000 80ca 	beq.w	8016478 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162ec:	e853 3f00 	ldrex	r3, [r3]
 80162f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80162f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80162f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	461a      	mov	r2, r3
 8016302:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016306:	647b      	str	r3, [r7, #68]	; 0x44
 8016308:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801630a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801630c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801630e:	e841 2300 	strex	r3, r2, [r1]
 8016312:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016316:	2b00      	cmp	r3, #0
 8016318:	d1e4      	bne.n	80162e4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	3308      	adds	r3, #8
 8016320:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016324:	e853 3f00 	ldrex	r3, [r3]
 8016328:	623b      	str	r3, [r7, #32]
   return(result);
 801632a:	6a3a      	ldr	r2, [r7, #32]
 801632c:	4b55      	ldr	r3, [pc, #340]	; (8016484 <HAL_UART_IRQHandler+0x770>)
 801632e:	4013      	ands	r3, r2
 8016330:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	3308      	adds	r3, #8
 801633a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801633e:	633a      	str	r2, [r7, #48]	; 0x30
 8016340:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016346:	e841 2300 	strex	r3, r2, [r1]
 801634a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801634e:	2b00      	cmp	r3, #0
 8016350:	d1e3      	bne.n	801631a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	2220      	movs	r2, #32
 8016356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	2200      	movs	r2, #0
 801635e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2200      	movs	r2, #0
 8016364:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801636c:	693b      	ldr	r3, [r7, #16]
 801636e:	e853 3f00 	ldrex	r3, [r3]
 8016372:	60fb      	str	r3, [r7, #12]
   return(result);
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	f023 0310 	bic.w	r3, r3, #16
 801637a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	461a      	mov	r2, r3
 8016384:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016388:	61fb      	str	r3, [r7, #28]
 801638a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801638c:	69b9      	ldr	r1, [r7, #24]
 801638e:	69fa      	ldr	r2, [r7, #28]
 8016390:	e841 2300 	strex	r3, r2, [r1]
 8016394:	617b      	str	r3, [r7, #20]
   return(result);
 8016396:	697b      	ldr	r3, [r7, #20]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d1e4      	bne.n	8016366 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	2202      	movs	r2, #2
 80163a0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80163a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80163a6:	4619      	mov	r1, r3
 80163a8:	6878      	ldr	r0, [r7, #4]
 80163aa:	f000 f877 	bl	801649c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80163ae:	e063      	b.n	8016478 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80163b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80163b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d00e      	beq.n	80163da <HAL_UART_IRQHandler+0x6c6>
 80163bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80163c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d008      	beq.n	80163da <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80163d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80163d2:	6878      	ldr	r0, [r7, #4]
 80163d4:	f002 f818 	bl	8018408 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80163d8:	e051      	b.n	801647e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80163da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80163de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d014      	beq.n	8016410 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80163e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80163ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d105      	bne.n	80163fe <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80163f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80163f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d008      	beq.n	8016410 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016402:	2b00      	cmp	r3, #0
 8016404:	d03a      	beq.n	801647c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801640a:	6878      	ldr	r0, [r7, #4]
 801640c:	4798      	blx	r3
    }
    return;
 801640e:	e035      	b.n	801647c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8016410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016418:	2b00      	cmp	r3, #0
 801641a:	d009      	beq.n	8016430 <HAL_UART_IRQHandler+0x71c>
 801641c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016424:	2b00      	cmp	r3, #0
 8016426:	d003      	beq.n	8016430 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8016428:	6878      	ldr	r0, [r7, #4]
 801642a:	f001 faa5 	bl	8017978 <UART_EndTransmit_IT>
    return;
 801642e:	e026      	b.n	801647e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8016430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016438:	2b00      	cmp	r3, #0
 801643a:	d009      	beq.n	8016450 <HAL_UART_IRQHandler+0x73c>
 801643c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016440:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8016444:	2b00      	cmp	r3, #0
 8016446:	d003      	beq.n	8016450 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8016448:	6878      	ldr	r0, [r7, #4]
 801644a:	f001 fff1 	bl	8018430 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801644e:	e016      	b.n	801647e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8016450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016458:	2b00      	cmp	r3, #0
 801645a:	d010      	beq.n	801647e <HAL_UART_IRQHandler+0x76a>
 801645c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016460:	2b00      	cmp	r3, #0
 8016462:	da0c      	bge.n	801647e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8016464:	6878      	ldr	r0, [r7, #4]
 8016466:	f001 ffd9 	bl	801841c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801646a:	e008      	b.n	801647e <HAL_UART_IRQHandler+0x76a>
      return;
 801646c:	bf00      	nop
 801646e:	e006      	b.n	801647e <HAL_UART_IRQHandler+0x76a>
    return;
 8016470:	bf00      	nop
 8016472:	e004      	b.n	801647e <HAL_UART_IRQHandler+0x76a>
      return;
 8016474:	bf00      	nop
 8016476:	e002      	b.n	801647e <HAL_UART_IRQHandler+0x76a>
      return;
 8016478:	bf00      	nop
 801647a:	e000      	b.n	801647e <HAL_UART_IRQHandler+0x76a>
    return;
 801647c:	bf00      	nop
  }
}
 801647e:	37e8      	adds	r7, #232	; 0xe8
 8016480:	46bd      	mov	sp, r7
 8016482:	bd80      	pop	{r7, pc}
 8016484:	effffffe 	.word	0xeffffffe

08016488 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8016488:	b480      	push	{r7}
 801648a:	b083      	sub	sp, #12
 801648c:	af00      	add	r7, sp, #0
 801648e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8016490:	bf00      	nop
 8016492:	370c      	adds	r7, #12
 8016494:	46bd      	mov	sp, r7
 8016496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649a:	4770      	bx	lr

0801649c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801649c:	b480      	push	{r7}
 801649e:	b083      	sub	sp, #12
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]
 80164a4:	460b      	mov	r3, r1
 80164a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80164a8:	bf00      	nop
 80164aa:	370c      	adds	r7, #12
 80164ac:	46bd      	mov	sp, r7
 80164ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b2:	4770      	bx	lr

080164b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80164b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80164b8:	b092      	sub	sp, #72	; 0x48
 80164ba:	af00      	add	r7, sp, #0
 80164bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80164be:	2300      	movs	r3, #0
 80164c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80164c4:	697b      	ldr	r3, [r7, #20]
 80164c6:	689a      	ldr	r2, [r3, #8]
 80164c8:	697b      	ldr	r3, [r7, #20]
 80164ca:	691b      	ldr	r3, [r3, #16]
 80164cc:	431a      	orrs	r2, r3
 80164ce:	697b      	ldr	r3, [r7, #20]
 80164d0:	695b      	ldr	r3, [r3, #20]
 80164d2:	431a      	orrs	r2, r3
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	69db      	ldr	r3, [r3, #28]
 80164d8:	4313      	orrs	r3, r2
 80164da:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80164dc:	697b      	ldr	r3, [r7, #20]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	681a      	ldr	r2, [r3, #0]
 80164e2:	4bbe      	ldr	r3, [pc, #760]	; (80167dc <UART_SetConfig+0x328>)
 80164e4:	4013      	ands	r3, r2
 80164e6:	697a      	ldr	r2, [r7, #20]
 80164e8:	6812      	ldr	r2, [r2, #0]
 80164ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80164ec:	430b      	orrs	r3, r1
 80164ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80164f0:	697b      	ldr	r3, [r7, #20]
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	685b      	ldr	r3, [r3, #4]
 80164f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80164fa:	697b      	ldr	r3, [r7, #20]
 80164fc:	68da      	ldr	r2, [r3, #12]
 80164fe:	697b      	ldr	r3, [r7, #20]
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	430a      	orrs	r2, r1
 8016504:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8016506:	697b      	ldr	r3, [r7, #20]
 8016508:	699b      	ldr	r3, [r3, #24]
 801650a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801650c:	697b      	ldr	r3, [r7, #20]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	4ab3      	ldr	r2, [pc, #716]	; (80167e0 <UART_SetConfig+0x32c>)
 8016512:	4293      	cmp	r3, r2
 8016514:	d004      	beq.n	8016520 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8016516:	697b      	ldr	r3, [r7, #20]
 8016518:	6a1b      	ldr	r3, [r3, #32]
 801651a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801651c:	4313      	orrs	r3, r2
 801651e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016520:	697b      	ldr	r3, [r7, #20]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	689a      	ldr	r2, [r3, #8]
 8016526:	4baf      	ldr	r3, [pc, #700]	; (80167e4 <UART_SetConfig+0x330>)
 8016528:	4013      	ands	r3, r2
 801652a:	697a      	ldr	r2, [r7, #20]
 801652c:	6812      	ldr	r2, [r2, #0]
 801652e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016530:	430b      	orrs	r3, r1
 8016532:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8016534:	697b      	ldr	r3, [r7, #20]
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801653a:	f023 010f 	bic.w	r1, r3, #15
 801653e:	697b      	ldr	r3, [r7, #20]
 8016540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016542:	697b      	ldr	r3, [r7, #20]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	430a      	orrs	r2, r1
 8016548:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801654a:	697b      	ldr	r3, [r7, #20]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	4aa6      	ldr	r2, [pc, #664]	; (80167e8 <UART_SetConfig+0x334>)
 8016550:	4293      	cmp	r3, r2
 8016552:	d177      	bne.n	8016644 <UART_SetConfig+0x190>
 8016554:	4ba5      	ldr	r3, [pc, #660]	; (80167ec <UART_SetConfig+0x338>)
 8016556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016558:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801655c:	2b28      	cmp	r3, #40	; 0x28
 801655e:	d86d      	bhi.n	801663c <UART_SetConfig+0x188>
 8016560:	a201      	add	r2, pc, #4	; (adr r2, 8016568 <UART_SetConfig+0xb4>)
 8016562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016566:	bf00      	nop
 8016568:	0801660d 	.word	0x0801660d
 801656c:	0801663d 	.word	0x0801663d
 8016570:	0801663d 	.word	0x0801663d
 8016574:	0801663d 	.word	0x0801663d
 8016578:	0801663d 	.word	0x0801663d
 801657c:	0801663d 	.word	0x0801663d
 8016580:	0801663d 	.word	0x0801663d
 8016584:	0801663d 	.word	0x0801663d
 8016588:	08016615 	.word	0x08016615
 801658c:	0801663d 	.word	0x0801663d
 8016590:	0801663d 	.word	0x0801663d
 8016594:	0801663d 	.word	0x0801663d
 8016598:	0801663d 	.word	0x0801663d
 801659c:	0801663d 	.word	0x0801663d
 80165a0:	0801663d 	.word	0x0801663d
 80165a4:	0801663d 	.word	0x0801663d
 80165a8:	0801661d 	.word	0x0801661d
 80165ac:	0801663d 	.word	0x0801663d
 80165b0:	0801663d 	.word	0x0801663d
 80165b4:	0801663d 	.word	0x0801663d
 80165b8:	0801663d 	.word	0x0801663d
 80165bc:	0801663d 	.word	0x0801663d
 80165c0:	0801663d 	.word	0x0801663d
 80165c4:	0801663d 	.word	0x0801663d
 80165c8:	08016625 	.word	0x08016625
 80165cc:	0801663d 	.word	0x0801663d
 80165d0:	0801663d 	.word	0x0801663d
 80165d4:	0801663d 	.word	0x0801663d
 80165d8:	0801663d 	.word	0x0801663d
 80165dc:	0801663d 	.word	0x0801663d
 80165e0:	0801663d 	.word	0x0801663d
 80165e4:	0801663d 	.word	0x0801663d
 80165e8:	0801662d 	.word	0x0801662d
 80165ec:	0801663d 	.word	0x0801663d
 80165f0:	0801663d 	.word	0x0801663d
 80165f4:	0801663d 	.word	0x0801663d
 80165f8:	0801663d 	.word	0x0801663d
 80165fc:	0801663d 	.word	0x0801663d
 8016600:	0801663d 	.word	0x0801663d
 8016604:	0801663d 	.word	0x0801663d
 8016608:	08016635 	.word	0x08016635
 801660c:	2301      	movs	r3, #1
 801660e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016612:	e222      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016614:	2304      	movs	r3, #4
 8016616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801661a:	e21e      	b.n	8016a5a <UART_SetConfig+0x5a6>
 801661c:	2308      	movs	r3, #8
 801661e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016622:	e21a      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016624:	2310      	movs	r3, #16
 8016626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801662a:	e216      	b.n	8016a5a <UART_SetConfig+0x5a6>
 801662c:	2320      	movs	r3, #32
 801662e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016632:	e212      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016634:	2340      	movs	r3, #64	; 0x40
 8016636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801663a:	e20e      	b.n	8016a5a <UART_SetConfig+0x5a6>
 801663c:	2380      	movs	r3, #128	; 0x80
 801663e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016642:	e20a      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016644:	697b      	ldr	r3, [r7, #20]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	4a69      	ldr	r2, [pc, #420]	; (80167f0 <UART_SetConfig+0x33c>)
 801664a:	4293      	cmp	r3, r2
 801664c:	d130      	bne.n	80166b0 <UART_SetConfig+0x1fc>
 801664e:	4b67      	ldr	r3, [pc, #412]	; (80167ec <UART_SetConfig+0x338>)
 8016650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016652:	f003 0307 	and.w	r3, r3, #7
 8016656:	2b05      	cmp	r3, #5
 8016658:	d826      	bhi.n	80166a8 <UART_SetConfig+0x1f4>
 801665a:	a201      	add	r2, pc, #4	; (adr r2, 8016660 <UART_SetConfig+0x1ac>)
 801665c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016660:	08016679 	.word	0x08016679
 8016664:	08016681 	.word	0x08016681
 8016668:	08016689 	.word	0x08016689
 801666c:	08016691 	.word	0x08016691
 8016670:	08016699 	.word	0x08016699
 8016674:	080166a1 	.word	0x080166a1
 8016678:	2300      	movs	r3, #0
 801667a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801667e:	e1ec      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016680:	2304      	movs	r3, #4
 8016682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016686:	e1e8      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016688:	2308      	movs	r3, #8
 801668a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801668e:	e1e4      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016690:	2310      	movs	r3, #16
 8016692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016696:	e1e0      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016698:	2320      	movs	r3, #32
 801669a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801669e:	e1dc      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80166a0:	2340      	movs	r3, #64	; 0x40
 80166a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166a6:	e1d8      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80166a8:	2380      	movs	r3, #128	; 0x80
 80166aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166ae:	e1d4      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80166b0:	697b      	ldr	r3, [r7, #20]
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	4a4f      	ldr	r2, [pc, #316]	; (80167f4 <UART_SetConfig+0x340>)
 80166b6:	4293      	cmp	r3, r2
 80166b8:	d130      	bne.n	801671c <UART_SetConfig+0x268>
 80166ba:	4b4c      	ldr	r3, [pc, #304]	; (80167ec <UART_SetConfig+0x338>)
 80166bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80166be:	f003 0307 	and.w	r3, r3, #7
 80166c2:	2b05      	cmp	r3, #5
 80166c4:	d826      	bhi.n	8016714 <UART_SetConfig+0x260>
 80166c6:	a201      	add	r2, pc, #4	; (adr r2, 80166cc <UART_SetConfig+0x218>)
 80166c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166cc:	080166e5 	.word	0x080166e5
 80166d0:	080166ed 	.word	0x080166ed
 80166d4:	080166f5 	.word	0x080166f5
 80166d8:	080166fd 	.word	0x080166fd
 80166dc:	08016705 	.word	0x08016705
 80166e0:	0801670d 	.word	0x0801670d
 80166e4:	2300      	movs	r3, #0
 80166e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166ea:	e1b6      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80166ec:	2304      	movs	r3, #4
 80166ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166f2:	e1b2      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80166f4:	2308      	movs	r3, #8
 80166f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166fa:	e1ae      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80166fc:	2310      	movs	r3, #16
 80166fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016702:	e1aa      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016704:	2320      	movs	r3, #32
 8016706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801670a:	e1a6      	b.n	8016a5a <UART_SetConfig+0x5a6>
 801670c:	2340      	movs	r3, #64	; 0x40
 801670e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016712:	e1a2      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016714:	2380      	movs	r3, #128	; 0x80
 8016716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801671a:	e19e      	b.n	8016a5a <UART_SetConfig+0x5a6>
 801671c:	697b      	ldr	r3, [r7, #20]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	4a35      	ldr	r2, [pc, #212]	; (80167f8 <UART_SetConfig+0x344>)
 8016722:	4293      	cmp	r3, r2
 8016724:	d130      	bne.n	8016788 <UART_SetConfig+0x2d4>
 8016726:	4b31      	ldr	r3, [pc, #196]	; (80167ec <UART_SetConfig+0x338>)
 8016728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801672a:	f003 0307 	and.w	r3, r3, #7
 801672e:	2b05      	cmp	r3, #5
 8016730:	d826      	bhi.n	8016780 <UART_SetConfig+0x2cc>
 8016732:	a201      	add	r2, pc, #4	; (adr r2, 8016738 <UART_SetConfig+0x284>)
 8016734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016738:	08016751 	.word	0x08016751
 801673c:	08016759 	.word	0x08016759
 8016740:	08016761 	.word	0x08016761
 8016744:	08016769 	.word	0x08016769
 8016748:	08016771 	.word	0x08016771
 801674c:	08016779 	.word	0x08016779
 8016750:	2300      	movs	r3, #0
 8016752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016756:	e180      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016758:	2304      	movs	r3, #4
 801675a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801675e:	e17c      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016760:	2308      	movs	r3, #8
 8016762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016766:	e178      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016768:	2310      	movs	r3, #16
 801676a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801676e:	e174      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016770:	2320      	movs	r3, #32
 8016772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016776:	e170      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016778:	2340      	movs	r3, #64	; 0x40
 801677a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801677e:	e16c      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016780:	2380      	movs	r3, #128	; 0x80
 8016782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016786:	e168      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016788:	697b      	ldr	r3, [r7, #20]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	4a1b      	ldr	r2, [pc, #108]	; (80167fc <UART_SetConfig+0x348>)
 801678e:	4293      	cmp	r3, r2
 8016790:	d142      	bne.n	8016818 <UART_SetConfig+0x364>
 8016792:	4b16      	ldr	r3, [pc, #88]	; (80167ec <UART_SetConfig+0x338>)
 8016794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016796:	f003 0307 	and.w	r3, r3, #7
 801679a:	2b05      	cmp	r3, #5
 801679c:	d838      	bhi.n	8016810 <UART_SetConfig+0x35c>
 801679e:	a201      	add	r2, pc, #4	; (adr r2, 80167a4 <UART_SetConfig+0x2f0>)
 80167a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167a4:	080167bd 	.word	0x080167bd
 80167a8:	080167c5 	.word	0x080167c5
 80167ac:	080167cd 	.word	0x080167cd
 80167b0:	080167d5 	.word	0x080167d5
 80167b4:	08016801 	.word	0x08016801
 80167b8:	08016809 	.word	0x08016809
 80167bc:	2300      	movs	r3, #0
 80167be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80167c2:	e14a      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80167c4:	2304      	movs	r3, #4
 80167c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80167ca:	e146      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80167cc:	2308      	movs	r3, #8
 80167ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80167d2:	e142      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80167d4:	2310      	movs	r3, #16
 80167d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80167da:	e13e      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80167dc:	cfff69f3 	.word	0xcfff69f3
 80167e0:	58000c00 	.word	0x58000c00
 80167e4:	11fff4ff 	.word	0x11fff4ff
 80167e8:	40011000 	.word	0x40011000
 80167ec:	58024400 	.word	0x58024400
 80167f0:	40004400 	.word	0x40004400
 80167f4:	40004800 	.word	0x40004800
 80167f8:	40004c00 	.word	0x40004c00
 80167fc:	40005000 	.word	0x40005000
 8016800:	2320      	movs	r3, #32
 8016802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016806:	e128      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016808:	2340      	movs	r3, #64	; 0x40
 801680a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801680e:	e124      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016810:	2380      	movs	r3, #128	; 0x80
 8016812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016816:	e120      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016818:	697b      	ldr	r3, [r7, #20]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	4acb      	ldr	r2, [pc, #812]	; (8016b4c <UART_SetConfig+0x698>)
 801681e:	4293      	cmp	r3, r2
 8016820:	d176      	bne.n	8016910 <UART_SetConfig+0x45c>
 8016822:	4bcb      	ldr	r3, [pc, #812]	; (8016b50 <UART_SetConfig+0x69c>)
 8016824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016826:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801682a:	2b28      	cmp	r3, #40	; 0x28
 801682c:	d86c      	bhi.n	8016908 <UART_SetConfig+0x454>
 801682e:	a201      	add	r2, pc, #4	; (adr r2, 8016834 <UART_SetConfig+0x380>)
 8016830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016834:	080168d9 	.word	0x080168d9
 8016838:	08016909 	.word	0x08016909
 801683c:	08016909 	.word	0x08016909
 8016840:	08016909 	.word	0x08016909
 8016844:	08016909 	.word	0x08016909
 8016848:	08016909 	.word	0x08016909
 801684c:	08016909 	.word	0x08016909
 8016850:	08016909 	.word	0x08016909
 8016854:	080168e1 	.word	0x080168e1
 8016858:	08016909 	.word	0x08016909
 801685c:	08016909 	.word	0x08016909
 8016860:	08016909 	.word	0x08016909
 8016864:	08016909 	.word	0x08016909
 8016868:	08016909 	.word	0x08016909
 801686c:	08016909 	.word	0x08016909
 8016870:	08016909 	.word	0x08016909
 8016874:	080168e9 	.word	0x080168e9
 8016878:	08016909 	.word	0x08016909
 801687c:	08016909 	.word	0x08016909
 8016880:	08016909 	.word	0x08016909
 8016884:	08016909 	.word	0x08016909
 8016888:	08016909 	.word	0x08016909
 801688c:	08016909 	.word	0x08016909
 8016890:	08016909 	.word	0x08016909
 8016894:	080168f1 	.word	0x080168f1
 8016898:	08016909 	.word	0x08016909
 801689c:	08016909 	.word	0x08016909
 80168a0:	08016909 	.word	0x08016909
 80168a4:	08016909 	.word	0x08016909
 80168a8:	08016909 	.word	0x08016909
 80168ac:	08016909 	.word	0x08016909
 80168b0:	08016909 	.word	0x08016909
 80168b4:	080168f9 	.word	0x080168f9
 80168b8:	08016909 	.word	0x08016909
 80168bc:	08016909 	.word	0x08016909
 80168c0:	08016909 	.word	0x08016909
 80168c4:	08016909 	.word	0x08016909
 80168c8:	08016909 	.word	0x08016909
 80168cc:	08016909 	.word	0x08016909
 80168d0:	08016909 	.word	0x08016909
 80168d4:	08016901 	.word	0x08016901
 80168d8:	2301      	movs	r3, #1
 80168da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80168de:	e0bc      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80168e0:	2304      	movs	r3, #4
 80168e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80168e6:	e0b8      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80168e8:	2308      	movs	r3, #8
 80168ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80168ee:	e0b4      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80168f0:	2310      	movs	r3, #16
 80168f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80168f6:	e0b0      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80168f8:	2320      	movs	r3, #32
 80168fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80168fe:	e0ac      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016900:	2340      	movs	r3, #64	; 0x40
 8016902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016906:	e0a8      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016908:	2380      	movs	r3, #128	; 0x80
 801690a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801690e:	e0a4      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016910:	697b      	ldr	r3, [r7, #20]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	4a8f      	ldr	r2, [pc, #572]	; (8016b54 <UART_SetConfig+0x6a0>)
 8016916:	4293      	cmp	r3, r2
 8016918:	d130      	bne.n	801697c <UART_SetConfig+0x4c8>
 801691a:	4b8d      	ldr	r3, [pc, #564]	; (8016b50 <UART_SetConfig+0x69c>)
 801691c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801691e:	f003 0307 	and.w	r3, r3, #7
 8016922:	2b05      	cmp	r3, #5
 8016924:	d826      	bhi.n	8016974 <UART_SetConfig+0x4c0>
 8016926:	a201      	add	r2, pc, #4	; (adr r2, 801692c <UART_SetConfig+0x478>)
 8016928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801692c:	08016945 	.word	0x08016945
 8016930:	0801694d 	.word	0x0801694d
 8016934:	08016955 	.word	0x08016955
 8016938:	0801695d 	.word	0x0801695d
 801693c:	08016965 	.word	0x08016965
 8016940:	0801696d 	.word	0x0801696d
 8016944:	2300      	movs	r3, #0
 8016946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801694a:	e086      	b.n	8016a5a <UART_SetConfig+0x5a6>
 801694c:	2304      	movs	r3, #4
 801694e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016952:	e082      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016954:	2308      	movs	r3, #8
 8016956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801695a:	e07e      	b.n	8016a5a <UART_SetConfig+0x5a6>
 801695c:	2310      	movs	r3, #16
 801695e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016962:	e07a      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016964:	2320      	movs	r3, #32
 8016966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801696a:	e076      	b.n	8016a5a <UART_SetConfig+0x5a6>
 801696c:	2340      	movs	r3, #64	; 0x40
 801696e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016972:	e072      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016974:	2380      	movs	r3, #128	; 0x80
 8016976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801697a:	e06e      	b.n	8016a5a <UART_SetConfig+0x5a6>
 801697c:	697b      	ldr	r3, [r7, #20]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	4a75      	ldr	r2, [pc, #468]	; (8016b58 <UART_SetConfig+0x6a4>)
 8016982:	4293      	cmp	r3, r2
 8016984:	d130      	bne.n	80169e8 <UART_SetConfig+0x534>
 8016986:	4b72      	ldr	r3, [pc, #456]	; (8016b50 <UART_SetConfig+0x69c>)
 8016988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801698a:	f003 0307 	and.w	r3, r3, #7
 801698e:	2b05      	cmp	r3, #5
 8016990:	d826      	bhi.n	80169e0 <UART_SetConfig+0x52c>
 8016992:	a201      	add	r2, pc, #4	; (adr r2, 8016998 <UART_SetConfig+0x4e4>)
 8016994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016998:	080169b1 	.word	0x080169b1
 801699c:	080169b9 	.word	0x080169b9
 80169a0:	080169c1 	.word	0x080169c1
 80169a4:	080169c9 	.word	0x080169c9
 80169a8:	080169d1 	.word	0x080169d1
 80169ac:	080169d9 	.word	0x080169d9
 80169b0:	2300      	movs	r3, #0
 80169b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80169b6:	e050      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80169b8:	2304      	movs	r3, #4
 80169ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80169be:	e04c      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80169c0:	2308      	movs	r3, #8
 80169c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80169c6:	e048      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80169c8:	2310      	movs	r3, #16
 80169ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80169ce:	e044      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80169d0:	2320      	movs	r3, #32
 80169d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80169d6:	e040      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80169d8:	2340      	movs	r3, #64	; 0x40
 80169da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80169de:	e03c      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80169e0:	2380      	movs	r3, #128	; 0x80
 80169e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80169e6:	e038      	b.n	8016a5a <UART_SetConfig+0x5a6>
 80169e8:	697b      	ldr	r3, [r7, #20]
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	4a5b      	ldr	r2, [pc, #364]	; (8016b5c <UART_SetConfig+0x6a8>)
 80169ee:	4293      	cmp	r3, r2
 80169f0:	d130      	bne.n	8016a54 <UART_SetConfig+0x5a0>
 80169f2:	4b57      	ldr	r3, [pc, #348]	; (8016b50 <UART_SetConfig+0x69c>)
 80169f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80169f6:	f003 0307 	and.w	r3, r3, #7
 80169fa:	2b05      	cmp	r3, #5
 80169fc:	d826      	bhi.n	8016a4c <UART_SetConfig+0x598>
 80169fe:	a201      	add	r2, pc, #4	; (adr r2, 8016a04 <UART_SetConfig+0x550>)
 8016a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a04:	08016a1d 	.word	0x08016a1d
 8016a08:	08016a25 	.word	0x08016a25
 8016a0c:	08016a2d 	.word	0x08016a2d
 8016a10:	08016a35 	.word	0x08016a35
 8016a14:	08016a3d 	.word	0x08016a3d
 8016a18:	08016a45 	.word	0x08016a45
 8016a1c:	2302      	movs	r3, #2
 8016a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a22:	e01a      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016a24:	2304      	movs	r3, #4
 8016a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a2a:	e016      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016a2c:	2308      	movs	r3, #8
 8016a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a32:	e012      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016a34:	2310      	movs	r3, #16
 8016a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a3a:	e00e      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016a3c:	2320      	movs	r3, #32
 8016a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a42:	e00a      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016a44:	2340      	movs	r3, #64	; 0x40
 8016a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a4a:	e006      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016a4c:	2380      	movs	r3, #128	; 0x80
 8016a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016a52:	e002      	b.n	8016a5a <UART_SetConfig+0x5a6>
 8016a54:	2380      	movs	r3, #128	; 0x80
 8016a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016a5a:	697b      	ldr	r3, [r7, #20]
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	4a3f      	ldr	r2, [pc, #252]	; (8016b5c <UART_SetConfig+0x6a8>)
 8016a60:	4293      	cmp	r3, r2
 8016a62:	f040 80f8 	bne.w	8016c56 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8016a66:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016a6a:	2b20      	cmp	r3, #32
 8016a6c:	dc46      	bgt.n	8016afc <UART_SetConfig+0x648>
 8016a6e:	2b02      	cmp	r3, #2
 8016a70:	f2c0 8082 	blt.w	8016b78 <UART_SetConfig+0x6c4>
 8016a74:	3b02      	subs	r3, #2
 8016a76:	2b1e      	cmp	r3, #30
 8016a78:	d87e      	bhi.n	8016b78 <UART_SetConfig+0x6c4>
 8016a7a:	a201      	add	r2, pc, #4	; (adr r2, 8016a80 <UART_SetConfig+0x5cc>)
 8016a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a80:	08016b03 	.word	0x08016b03
 8016a84:	08016b79 	.word	0x08016b79
 8016a88:	08016b0b 	.word	0x08016b0b
 8016a8c:	08016b79 	.word	0x08016b79
 8016a90:	08016b79 	.word	0x08016b79
 8016a94:	08016b79 	.word	0x08016b79
 8016a98:	08016b1b 	.word	0x08016b1b
 8016a9c:	08016b79 	.word	0x08016b79
 8016aa0:	08016b79 	.word	0x08016b79
 8016aa4:	08016b79 	.word	0x08016b79
 8016aa8:	08016b79 	.word	0x08016b79
 8016aac:	08016b79 	.word	0x08016b79
 8016ab0:	08016b79 	.word	0x08016b79
 8016ab4:	08016b79 	.word	0x08016b79
 8016ab8:	08016b2b 	.word	0x08016b2b
 8016abc:	08016b79 	.word	0x08016b79
 8016ac0:	08016b79 	.word	0x08016b79
 8016ac4:	08016b79 	.word	0x08016b79
 8016ac8:	08016b79 	.word	0x08016b79
 8016acc:	08016b79 	.word	0x08016b79
 8016ad0:	08016b79 	.word	0x08016b79
 8016ad4:	08016b79 	.word	0x08016b79
 8016ad8:	08016b79 	.word	0x08016b79
 8016adc:	08016b79 	.word	0x08016b79
 8016ae0:	08016b79 	.word	0x08016b79
 8016ae4:	08016b79 	.word	0x08016b79
 8016ae8:	08016b79 	.word	0x08016b79
 8016aec:	08016b79 	.word	0x08016b79
 8016af0:	08016b79 	.word	0x08016b79
 8016af4:	08016b79 	.word	0x08016b79
 8016af8:	08016b6b 	.word	0x08016b6b
 8016afc:	2b40      	cmp	r3, #64	; 0x40
 8016afe:	d037      	beq.n	8016b70 <UART_SetConfig+0x6bc>
 8016b00:	e03a      	b.n	8016b78 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8016b02:	f7fb fb5d 	bl	80121c0 <HAL_RCCEx_GetD3PCLK1Freq>
 8016b06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016b08:	e03c      	b.n	8016b84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016b0e:	4618      	mov	r0, r3
 8016b10:	f7fb fb6c 	bl	80121ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016b18:	e034      	b.n	8016b84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016b1a:	f107 0318 	add.w	r3, r7, #24
 8016b1e:	4618      	mov	r0, r3
 8016b20:	f7fb fcb8 	bl	8012494 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016b24:	69fb      	ldr	r3, [r7, #28]
 8016b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016b28:	e02c      	b.n	8016b84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016b2a:	4b09      	ldr	r3, [pc, #36]	; (8016b50 <UART_SetConfig+0x69c>)
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	f003 0320 	and.w	r3, r3, #32
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d016      	beq.n	8016b64 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016b36:	4b06      	ldr	r3, [pc, #24]	; (8016b50 <UART_SetConfig+0x69c>)
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	08db      	lsrs	r3, r3, #3
 8016b3c:	f003 0303 	and.w	r3, r3, #3
 8016b40:	4a07      	ldr	r2, [pc, #28]	; (8016b60 <UART_SetConfig+0x6ac>)
 8016b42:	fa22 f303 	lsr.w	r3, r2, r3
 8016b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016b48:	e01c      	b.n	8016b84 <UART_SetConfig+0x6d0>
 8016b4a:	bf00      	nop
 8016b4c:	40011400 	.word	0x40011400
 8016b50:	58024400 	.word	0x58024400
 8016b54:	40007800 	.word	0x40007800
 8016b58:	40007c00 	.word	0x40007c00
 8016b5c:	58000c00 	.word	0x58000c00
 8016b60:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8016b64:	4b9d      	ldr	r3, [pc, #628]	; (8016ddc <UART_SetConfig+0x928>)
 8016b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016b68:	e00c      	b.n	8016b84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8016b6a:	4b9d      	ldr	r3, [pc, #628]	; (8016de0 <UART_SetConfig+0x92c>)
 8016b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016b6e:	e009      	b.n	8016b84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016b70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016b74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016b76:	e005      	b.n	8016b84 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8016b78:	2300      	movs	r3, #0
 8016b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8016b7c:	2301      	movs	r3, #1
 8016b7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8016b82:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8016b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	f000 81de 	beq.w	8016f48 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8016b8c:	697b      	ldr	r3, [r7, #20]
 8016b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b90:	4a94      	ldr	r2, [pc, #592]	; (8016de4 <UART_SetConfig+0x930>)
 8016b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016b96:	461a      	mov	r2, r3
 8016b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8016b9e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016ba0:	697b      	ldr	r3, [r7, #20]
 8016ba2:	685a      	ldr	r2, [r3, #4]
 8016ba4:	4613      	mov	r3, r2
 8016ba6:	005b      	lsls	r3, r3, #1
 8016ba8:	4413      	add	r3, r2
 8016baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016bac:	429a      	cmp	r2, r3
 8016bae:	d305      	bcc.n	8016bbc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8016bb0:	697b      	ldr	r3, [r7, #20]
 8016bb2:	685b      	ldr	r3, [r3, #4]
 8016bb4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8016bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016bb8:	429a      	cmp	r2, r3
 8016bba:	d903      	bls.n	8016bc4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8016bbc:	2301      	movs	r3, #1
 8016bbe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8016bc2:	e1c1      	b.n	8016f48 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016bc6:	2200      	movs	r2, #0
 8016bc8:	60bb      	str	r3, [r7, #8]
 8016bca:	60fa      	str	r2, [r7, #12]
 8016bcc:	697b      	ldr	r3, [r7, #20]
 8016bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bd0:	4a84      	ldr	r2, [pc, #528]	; (8016de4 <UART_SetConfig+0x930>)
 8016bd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016bd6:	b29b      	uxth	r3, r3
 8016bd8:	2200      	movs	r2, #0
 8016bda:	603b      	str	r3, [r7, #0]
 8016bdc:	607a      	str	r2, [r7, #4]
 8016bde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016be2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016be6:	f7e9 fb7b 	bl	80002e0 <__aeabi_uldivmod>
 8016bea:	4602      	mov	r2, r0
 8016bec:	460b      	mov	r3, r1
 8016bee:	4610      	mov	r0, r2
 8016bf0:	4619      	mov	r1, r3
 8016bf2:	f04f 0200 	mov.w	r2, #0
 8016bf6:	f04f 0300 	mov.w	r3, #0
 8016bfa:	020b      	lsls	r3, r1, #8
 8016bfc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8016c00:	0202      	lsls	r2, r0, #8
 8016c02:	6979      	ldr	r1, [r7, #20]
 8016c04:	6849      	ldr	r1, [r1, #4]
 8016c06:	0849      	lsrs	r1, r1, #1
 8016c08:	2000      	movs	r0, #0
 8016c0a:	460c      	mov	r4, r1
 8016c0c:	4605      	mov	r5, r0
 8016c0e:	eb12 0804 	adds.w	r8, r2, r4
 8016c12:	eb43 0905 	adc.w	r9, r3, r5
 8016c16:	697b      	ldr	r3, [r7, #20]
 8016c18:	685b      	ldr	r3, [r3, #4]
 8016c1a:	2200      	movs	r2, #0
 8016c1c:	469a      	mov	sl, r3
 8016c1e:	4693      	mov	fp, r2
 8016c20:	4652      	mov	r2, sl
 8016c22:	465b      	mov	r3, fp
 8016c24:	4640      	mov	r0, r8
 8016c26:	4649      	mov	r1, r9
 8016c28:	f7e9 fb5a 	bl	80002e0 <__aeabi_uldivmod>
 8016c2c:	4602      	mov	r2, r0
 8016c2e:	460b      	mov	r3, r1
 8016c30:	4613      	mov	r3, r2
 8016c32:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016c3a:	d308      	bcc.n	8016c4e <UART_SetConfig+0x79a>
 8016c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016c42:	d204      	bcs.n	8016c4e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8016c44:	697b      	ldr	r3, [r7, #20]
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016c4a:	60da      	str	r2, [r3, #12]
 8016c4c:	e17c      	b.n	8016f48 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8016c4e:	2301      	movs	r3, #1
 8016c50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8016c54:	e178      	b.n	8016f48 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016c56:	697b      	ldr	r3, [r7, #20]
 8016c58:	69db      	ldr	r3, [r3, #28]
 8016c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016c5e:	f040 80c5 	bne.w	8016dec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8016c62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016c66:	2b20      	cmp	r3, #32
 8016c68:	dc48      	bgt.n	8016cfc <UART_SetConfig+0x848>
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	db7b      	blt.n	8016d66 <UART_SetConfig+0x8b2>
 8016c6e:	2b20      	cmp	r3, #32
 8016c70:	d879      	bhi.n	8016d66 <UART_SetConfig+0x8b2>
 8016c72:	a201      	add	r2, pc, #4	; (adr r2, 8016c78 <UART_SetConfig+0x7c4>)
 8016c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c78:	08016d03 	.word	0x08016d03
 8016c7c:	08016d0b 	.word	0x08016d0b
 8016c80:	08016d67 	.word	0x08016d67
 8016c84:	08016d67 	.word	0x08016d67
 8016c88:	08016d13 	.word	0x08016d13
 8016c8c:	08016d67 	.word	0x08016d67
 8016c90:	08016d67 	.word	0x08016d67
 8016c94:	08016d67 	.word	0x08016d67
 8016c98:	08016d23 	.word	0x08016d23
 8016c9c:	08016d67 	.word	0x08016d67
 8016ca0:	08016d67 	.word	0x08016d67
 8016ca4:	08016d67 	.word	0x08016d67
 8016ca8:	08016d67 	.word	0x08016d67
 8016cac:	08016d67 	.word	0x08016d67
 8016cb0:	08016d67 	.word	0x08016d67
 8016cb4:	08016d67 	.word	0x08016d67
 8016cb8:	08016d33 	.word	0x08016d33
 8016cbc:	08016d67 	.word	0x08016d67
 8016cc0:	08016d67 	.word	0x08016d67
 8016cc4:	08016d67 	.word	0x08016d67
 8016cc8:	08016d67 	.word	0x08016d67
 8016ccc:	08016d67 	.word	0x08016d67
 8016cd0:	08016d67 	.word	0x08016d67
 8016cd4:	08016d67 	.word	0x08016d67
 8016cd8:	08016d67 	.word	0x08016d67
 8016cdc:	08016d67 	.word	0x08016d67
 8016ce0:	08016d67 	.word	0x08016d67
 8016ce4:	08016d67 	.word	0x08016d67
 8016ce8:	08016d67 	.word	0x08016d67
 8016cec:	08016d67 	.word	0x08016d67
 8016cf0:	08016d67 	.word	0x08016d67
 8016cf4:	08016d67 	.word	0x08016d67
 8016cf8:	08016d59 	.word	0x08016d59
 8016cfc:	2b40      	cmp	r3, #64	; 0x40
 8016cfe:	d02e      	beq.n	8016d5e <UART_SetConfig+0x8aa>
 8016d00:	e031      	b.n	8016d66 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016d02:	f7f9 fa65 	bl	80101d0 <HAL_RCC_GetPCLK1Freq>
 8016d06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016d08:	e033      	b.n	8016d72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016d0a:	f7f9 fa77 	bl	80101fc <HAL_RCC_GetPCLK2Freq>
 8016d0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016d10:	e02f      	b.n	8016d72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016d16:	4618      	mov	r0, r3
 8016d18:	f7fb fa68 	bl	80121ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016d20:	e027      	b.n	8016d72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016d22:	f107 0318 	add.w	r3, r7, #24
 8016d26:	4618      	mov	r0, r3
 8016d28:	f7fb fbb4 	bl	8012494 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016d2c:	69fb      	ldr	r3, [r7, #28]
 8016d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016d30:	e01f      	b.n	8016d72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016d32:	4b2d      	ldr	r3, [pc, #180]	; (8016de8 <UART_SetConfig+0x934>)
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	f003 0320 	and.w	r3, r3, #32
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d009      	beq.n	8016d52 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016d3e:	4b2a      	ldr	r3, [pc, #168]	; (8016de8 <UART_SetConfig+0x934>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	08db      	lsrs	r3, r3, #3
 8016d44:	f003 0303 	and.w	r3, r3, #3
 8016d48:	4a24      	ldr	r2, [pc, #144]	; (8016ddc <UART_SetConfig+0x928>)
 8016d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8016d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016d50:	e00f      	b.n	8016d72 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8016d52:	4b22      	ldr	r3, [pc, #136]	; (8016ddc <UART_SetConfig+0x928>)
 8016d54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016d56:	e00c      	b.n	8016d72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8016d58:	4b21      	ldr	r3, [pc, #132]	; (8016de0 <UART_SetConfig+0x92c>)
 8016d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016d5c:	e009      	b.n	8016d72 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016d64:	e005      	b.n	8016d72 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8016d66:	2300      	movs	r3, #0
 8016d68:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8016d70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	f000 80e7 	beq.w	8016f48 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016d7a:	697b      	ldr	r3, [r7, #20]
 8016d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d7e:	4a19      	ldr	r2, [pc, #100]	; (8016de4 <UART_SetConfig+0x930>)
 8016d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016d84:	461a      	mov	r2, r3
 8016d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d88:	fbb3 f3f2 	udiv	r3, r3, r2
 8016d8c:	005a      	lsls	r2, r3, #1
 8016d8e:	697b      	ldr	r3, [r7, #20]
 8016d90:	685b      	ldr	r3, [r3, #4]
 8016d92:	085b      	lsrs	r3, r3, #1
 8016d94:	441a      	add	r2, r3
 8016d96:	697b      	ldr	r3, [r7, #20]
 8016d98:	685b      	ldr	r3, [r3, #4]
 8016d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8016d9e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016da2:	2b0f      	cmp	r3, #15
 8016da4:	d916      	bls.n	8016dd4 <UART_SetConfig+0x920>
 8016da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016dac:	d212      	bcs.n	8016dd4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016db0:	b29b      	uxth	r3, r3
 8016db2:	f023 030f 	bic.w	r3, r3, #15
 8016db6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dba:	085b      	lsrs	r3, r3, #1
 8016dbc:	b29b      	uxth	r3, r3
 8016dbe:	f003 0307 	and.w	r3, r3, #7
 8016dc2:	b29a      	uxth	r2, r3
 8016dc4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016dc6:	4313      	orrs	r3, r2
 8016dc8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8016dca:	697b      	ldr	r3, [r7, #20]
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016dd0:	60da      	str	r2, [r3, #12]
 8016dd2:	e0b9      	b.n	8016f48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8016dda:	e0b5      	b.n	8016f48 <UART_SetConfig+0xa94>
 8016ddc:	03d09000 	.word	0x03d09000
 8016de0:	003d0900 	.word	0x003d0900
 8016de4:	0801c4dc 	.word	0x0801c4dc
 8016de8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8016dec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016df0:	2b20      	cmp	r3, #32
 8016df2:	dc49      	bgt.n	8016e88 <UART_SetConfig+0x9d4>
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	db7c      	blt.n	8016ef2 <UART_SetConfig+0xa3e>
 8016df8:	2b20      	cmp	r3, #32
 8016dfa:	d87a      	bhi.n	8016ef2 <UART_SetConfig+0xa3e>
 8016dfc:	a201      	add	r2, pc, #4	; (adr r2, 8016e04 <UART_SetConfig+0x950>)
 8016dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e02:	bf00      	nop
 8016e04:	08016e8f 	.word	0x08016e8f
 8016e08:	08016e97 	.word	0x08016e97
 8016e0c:	08016ef3 	.word	0x08016ef3
 8016e10:	08016ef3 	.word	0x08016ef3
 8016e14:	08016e9f 	.word	0x08016e9f
 8016e18:	08016ef3 	.word	0x08016ef3
 8016e1c:	08016ef3 	.word	0x08016ef3
 8016e20:	08016ef3 	.word	0x08016ef3
 8016e24:	08016eaf 	.word	0x08016eaf
 8016e28:	08016ef3 	.word	0x08016ef3
 8016e2c:	08016ef3 	.word	0x08016ef3
 8016e30:	08016ef3 	.word	0x08016ef3
 8016e34:	08016ef3 	.word	0x08016ef3
 8016e38:	08016ef3 	.word	0x08016ef3
 8016e3c:	08016ef3 	.word	0x08016ef3
 8016e40:	08016ef3 	.word	0x08016ef3
 8016e44:	08016ebf 	.word	0x08016ebf
 8016e48:	08016ef3 	.word	0x08016ef3
 8016e4c:	08016ef3 	.word	0x08016ef3
 8016e50:	08016ef3 	.word	0x08016ef3
 8016e54:	08016ef3 	.word	0x08016ef3
 8016e58:	08016ef3 	.word	0x08016ef3
 8016e5c:	08016ef3 	.word	0x08016ef3
 8016e60:	08016ef3 	.word	0x08016ef3
 8016e64:	08016ef3 	.word	0x08016ef3
 8016e68:	08016ef3 	.word	0x08016ef3
 8016e6c:	08016ef3 	.word	0x08016ef3
 8016e70:	08016ef3 	.word	0x08016ef3
 8016e74:	08016ef3 	.word	0x08016ef3
 8016e78:	08016ef3 	.word	0x08016ef3
 8016e7c:	08016ef3 	.word	0x08016ef3
 8016e80:	08016ef3 	.word	0x08016ef3
 8016e84:	08016ee5 	.word	0x08016ee5
 8016e88:	2b40      	cmp	r3, #64	; 0x40
 8016e8a:	d02e      	beq.n	8016eea <UART_SetConfig+0xa36>
 8016e8c:	e031      	b.n	8016ef2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016e8e:	f7f9 f99f 	bl	80101d0 <HAL_RCC_GetPCLK1Freq>
 8016e92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016e94:	e033      	b.n	8016efe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016e96:	f7f9 f9b1 	bl	80101fc <HAL_RCC_GetPCLK2Freq>
 8016e9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016e9c:	e02f      	b.n	8016efe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	f7fb f9a2 	bl	80121ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016eac:	e027      	b.n	8016efe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016eae:	f107 0318 	add.w	r3, r7, #24
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	f7fb faee 	bl	8012494 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016eb8:	69fb      	ldr	r3, [r7, #28]
 8016eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016ebc:	e01f      	b.n	8016efe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016ebe:	4b2d      	ldr	r3, [pc, #180]	; (8016f74 <UART_SetConfig+0xac0>)
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	f003 0320 	and.w	r3, r3, #32
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d009      	beq.n	8016ede <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016eca:	4b2a      	ldr	r3, [pc, #168]	; (8016f74 <UART_SetConfig+0xac0>)
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	08db      	lsrs	r3, r3, #3
 8016ed0:	f003 0303 	and.w	r3, r3, #3
 8016ed4:	4a28      	ldr	r2, [pc, #160]	; (8016f78 <UART_SetConfig+0xac4>)
 8016ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8016eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016edc:	e00f      	b.n	8016efe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8016ede:	4b26      	ldr	r3, [pc, #152]	; (8016f78 <UART_SetConfig+0xac4>)
 8016ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016ee2:	e00c      	b.n	8016efe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8016ee4:	4b25      	ldr	r3, [pc, #148]	; (8016f7c <UART_SetConfig+0xac8>)
 8016ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016ee8:	e009      	b.n	8016efe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016ef0:	e005      	b.n	8016efe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8016ef6:	2301      	movs	r3, #1
 8016ef8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8016efc:	bf00      	nop
    }

    if (pclk != 0U)
 8016efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d021      	beq.n	8016f48 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016f04:	697b      	ldr	r3, [r7, #20]
 8016f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f08:	4a1d      	ldr	r2, [pc, #116]	; (8016f80 <UART_SetConfig+0xacc>)
 8016f0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016f0e:	461a      	mov	r2, r3
 8016f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f12:	fbb3 f2f2 	udiv	r2, r3, r2
 8016f16:	697b      	ldr	r3, [r7, #20]
 8016f18:	685b      	ldr	r3, [r3, #4]
 8016f1a:	085b      	lsrs	r3, r3, #1
 8016f1c:	441a      	add	r2, r3
 8016f1e:	697b      	ldr	r3, [r7, #20]
 8016f20:	685b      	ldr	r3, [r3, #4]
 8016f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8016f26:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f2a:	2b0f      	cmp	r3, #15
 8016f2c:	d909      	bls.n	8016f42 <UART_SetConfig+0xa8e>
 8016f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f34:	d205      	bcs.n	8016f42 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f38:	b29a      	uxth	r2, r3
 8016f3a:	697b      	ldr	r3, [r7, #20]
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	60da      	str	r2, [r3, #12]
 8016f40:	e002      	b.n	8016f48 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8016f42:	2301      	movs	r3, #1
 8016f44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8016f48:	697b      	ldr	r3, [r7, #20]
 8016f4a:	2201      	movs	r2, #1
 8016f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8016f50:	697b      	ldr	r3, [r7, #20]
 8016f52:	2201      	movs	r2, #1
 8016f54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8016f58:	697b      	ldr	r3, [r7, #20]
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8016f5e:	697b      	ldr	r3, [r7, #20]
 8016f60:	2200      	movs	r2, #0
 8016f62:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8016f64:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8016f68:	4618      	mov	r0, r3
 8016f6a:	3748      	adds	r7, #72	; 0x48
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016f72:	bf00      	nop
 8016f74:	58024400 	.word	0x58024400
 8016f78:	03d09000 	.word	0x03d09000
 8016f7c:	003d0900 	.word	0x003d0900
 8016f80:	0801c4dc 	.word	0x0801c4dc

08016f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016f84:	b480      	push	{r7}
 8016f86:	b083      	sub	sp, #12
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f90:	f003 0308 	and.w	r3, r3, #8
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d00a      	beq.n	8016fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	685b      	ldr	r3, [r3, #4]
 8016f9e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	430a      	orrs	r2, r1
 8016fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fb2:	f003 0301 	and.w	r3, r3, #1
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d00a      	beq.n	8016fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	685b      	ldr	r3, [r3, #4]
 8016fc0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	430a      	orrs	r2, r1
 8016fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fd4:	f003 0302 	and.w	r3, r3, #2
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d00a      	beq.n	8016ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	685b      	ldr	r3, [r3, #4]
 8016fe2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	430a      	orrs	r2, r1
 8016ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ff6:	f003 0304 	and.w	r3, r3, #4
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d00a      	beq.n	8017014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	685b      	ldr	r3, [r3, #4]
 8017004:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	430a      	orrs	r2, r1
 8017012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017018:	f003 0310 	and.w	r3, r3, #16
 801701c:	2b00      	cmp	r3, #0
 801701e:	d00a      	beq.n	8017036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	689b      	ldr	r3, [r3, #8]
 8017026:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	430a      	orrs	r2, r1
 8017034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801703a:	f003 0320 	and.w	r3, r3, #32
 801703e:	2b00      	cmp	r3, #0
 8017040:	d00a      	beq.n	8017058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	689b      	ldr	r3, [r3, #8]
 8017048:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	430a      	orrs	r2, r1
 8017056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801705c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017060:	2b00      	cmp	r3, #0
 8017062:	d01a      	beq.n	801709a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	685b      	ldr	r3, [r3, #4]
 801706a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	430a      	orrs	r2, r1
 8017078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801707e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017082:	d10a      	bne.n	801709a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	685b      	ldr	r3, [r3, #4]
 801708a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	430a      	orrs	r2, r1
 8017098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801709e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d00a      	beq.n	80170bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	685b      	ldr	r3, [r3, #4]
 80170ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	430a      	orrs	r2, r1
 80170ba:	605a      	str	r2, [r3, #4]
  }
}
 80170bc:	bf00      	nop
 80170be:	370c      	adds	r7, #12
 80170c0:	46bd      	mov	sp, r7
 80170c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c6:	4770      	bx	lr

080170c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80170c8:	b580      	push	{r7, lr}
 80170ca:	b098      	sub	sp, #96	; 0x60
 80170cc:	af02      	add	r7, sp, #8
 80170ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	2200      	movs	r2, #0
 80170d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80170d8:	f7ef fd4a 	bl	8006b70 <HAL_GetTick>
 80170dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	f003 0308 	and.w	r3, r3, #8
 80170e8:	2b08      	cmp	r3, #8
 80170ea:	d12f      	bne.n	801714c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80170ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80170f0:	9300      	str	r3, [sp, #0]
 80170f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80170f4:	2200      	movs	r2, #0
 80170f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80170fa:	6878      	ldr	r0, [r7, #4]
 80170fc:	f000 f88e 	bl	801721c <UART_WaitOnFlagUntilTimeout>
 8017100:	4603      	mov	r3, r0
 8017102:	2b00      	cmp	r3, #0
 8017104:	d022      	beq.n	801714c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801710e:	e853 3f00 	ldrex	r3, [r3]
 8017112:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801711a:	653b      	str	r3, [r7, #80]	; 0x50
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	461a      	mov	r2, r3
 8017122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017124:	647b      	str	r3, [r7, #68]	; 0x44
 8017126:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017128:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801712a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801712c:	e841 2300 	strex	r3, r2, [r1]
 8017130:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017134:	2b00      	cmp	r3, #0
 8017136:	d1e6      	bne.n	8017106 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	2220      	movs	r2, #32
 801713c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	2200      	movs	r2, #0
 8017144:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017148:	2303      	movs	r3, #3
 801714a:	e063      	b.n	8017214 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	f003 0304 	and.w	r3, r3, #4
 8017156:	2b04      	cmp	r3, #4
 8017158:	d149      	bne.n	80171ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801715a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801715e:	9300      	str	r3, [sp, #0]
 8017160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017162:	2200      	movs	r2, #0
 8017164:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8017168:	6878      	ldr	r0, [r7, #4]
 801716a:	f000 f857 	bl	801721c <UART_WaitOnFlagUntilTimeout>
 801716e:	4603      	mov	r3, r0
 8017170:	2b00      	cmp	r3, #0
 8017172:	d03c      	beq.n	80171ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801717c:	e853 3f00 	ldrex	r3, [r3]
 8017180:	623b      	str	r3, [r7, #32]
   return(result);
 8017182:	6a3b      	ldr	r3, [r7, #32]
 8017184:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017188:	64fb      	str	r3, [r7, #76]	; 0x4c
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	461a      	mov	r2, r3
 8017190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017192:	633b      	str	r3, [r7, #48]	; 0x30
 8017194:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017196:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801719a:	e841 2300 	strex	r3, r2, [r1]
 801719e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80171a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d1e6      	bne.n	8017174 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	3308      	adds	r3, #8
 80171ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171ae:	693b      	ldr	r3, [r7, #16]
 80171b0:	e853 3f00 	ldrex	r3, [r3]
 80171b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	f023 0301 	bic.w	r3, r3, #1
 80171bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	3308      	adds	r3, #8
 80171c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80171c6:	61fa      	str	r2, [r7, #28]
 80171c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171ca:	69b9      	ldr	r1, [r7, #24]
 80171cc:	69fa      	ldr	r2, [r7, #28]
 80171ce:	e841 2300 	strex	r3, r2, [r1]
 80171d2:	617b      	str	r3, [r7, #20]
   return(result);
 80171d4:	697b      	ldr	r3, [r7, #20]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d1e5      	bne.n	80171a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	2220      	movs	r2, #32
 80171de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	2200      	movs	r2, #0
 80171e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80171ea:	2303      	movs	r3, #3
 80171ec:	e012      	b.n	8017214 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	2220      	movs	r2, #32
 80171f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	2220      	movs	r2, #32
 80171fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	2200      	movs	r2, #0
 8017202:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	2200      	movs	r2, #0
 8017208:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	2200      	movs	r2, #0
 801720e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8017212:	2300      	movs	r3, #0
}
 8017214:	4618      	mov	r0, r3
 8017216:	3758      	adds	r7, #88	; 0x58
 8017218:	46bd      	mov	sp, r7
 801721a:	bd80      	pop	{r7, pc}

0801721c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b084      	sub	sp, #16
 8017220:	af00      	add	r7, sp, #0
 8017222:	60f8      	str	r0, [r7, #12]
 8017224:	60b9      	str	r1, [r7, #8]
 8017226:	603b      	str	r3, [r7, #0]
 8017228:	4613      	mov	r3, r2
 801722a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801722c:	e04f      	b.n	80172ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801722e:	69bb      	ldr	r3, [r7, #24]
 8017230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017234:	d04b      	beq.n	80172ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017236:	f7ef fc9b 	bl	8006b70 <HAL_GetTick>
 801723a:	4602      	mov	r2, r0
 801723c:	683b      	ldr	r3, [r7, #0]
 801723e:	1ad3      	subs	r3, r2, r3
 8017240:	69ba      	ldr	r2, [r7, #24]
 8017242:	429a      	cmp	r2, r3
 8017244:	d302      	bcc.n	801724c <UART_WaitOnFlagUntilTimeout+0x30>
 8017246:	69bb      	ldr	r3, [r7, #24]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d101      	bne.n	8017250 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801724c:	2303      	movs	r3, #3
 801724e:	e04e      	b.n	80172ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	f003 0304 	and.w	r3, r3, #4
 801725a:	2b00      	cmp	r3, #0
 801725c:	d037      	beq.n	80172ce <UART_WaitOnFlagUntilTimeout+0xb2>
 801725e:	68bb      	ldr	r3, [r7, #8]
 8017260:	2b80      	cmp	r3, #128	; 0x80
 8017262:	d034      	beq.n	80172ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8017264:	68bb      	ldr	r3, [r7, #8]
 8017266:	2b40      	cmp	r3, #64	; 0x40
 8017268:	d031      	beq.n	80172ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	69db      	ldr	r3, [r3, #28]
 8017270:	f003 0308 	and.w	r3, r3, #8
 8017274:	2b08      	cmp	r3, #8
 8017276:	d110      	bne.n	801729a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	2208      	movs	r2, #8
 801727e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017280:	68f8      	ldr	r0, [r7, #12]
 8017282:	f000 f95b 	bl	801753c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	2208      	movs	r2, #8
 801728a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	2200      	movs	r2, #0
 8017292:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8017296:	2301      	movs	r3, #1
 8017298:	e029      	b.n	80172ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	69db      	ldr	r3, [r3, #28]
 80172a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80172a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80172a8:	d111      	bne.n	80172ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80172b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80172b4:	68f8      	ldr	r0, [r7, #12]
 80172b6:	f000 f941 	bl	801753c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	2220      	movs	r2, #32
 80172be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	2200      	movs	r2, #0
 80172c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80172ca:	2303      	movs	r3, #3
 80172cc:	e00f      	b.n	80172ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	69da      	ldr	r2, [r3, #28]
 80172d4:	68bb      	ldr	r3, [r7, #8]
 80172d6:	4013      	ands	r3, r2
 80172d8:	68ba      	ldr	r2, [r7, #8]
 80172da:	429a      	cmp	r2, r3
 80172dc:	bf0c      	ite	eq
 80172de:	2301      	moveq	r3, #1
 80172e0:	2300      	movne	r3, #0
 80172e2:	b2db      	uxtb	r3, r3
 80172e4:	461a      	mov	r2, r3
 80172e6:	79fb      	ldrb	r3, [r7, #7]
 80172e8:	429a      	cmp	r2, r3
 80172ea:	d0a0      	beq.n	801722e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80172ec:	2300      	movs	r3, #0
}
 80172ee:	4618      	mov	r0, r3
 80172f0:	3710      	adds	r7, #16
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}
	...

080172f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80172f8:	b480      	push	{r7}
 80172fa:	b0a3      	sub	sp, #140	; 0x8c
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	60f8      	str	r0, [r7, #12]
 8017300:	60b9      	str	r1, [r7, #8]
 8017302:	4613      	mov	r3, r2
 8017304:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	68ba      	ldr	r2, [r7, #8]
 801730a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	88fa      	ldrh	r2, [r7, #6]
 8017310:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	88fa      	ldrh	r2, [r7, #6]
 8017318:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	2200      	movs	r2, #0
 8017320:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	689b      	ldr	r3, [r3, #8]
 8017326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801732a:	d10e      	bne.n	801734a <UART_Start_Receive_IT+0x52>
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	691b      	ldr	r3, [r3, #16]
 8017330:	2b00      	cmp	r3, #0
 8017332:	d105      	bne.n	8017340 <UART_Start_Receive_IT+0x48>
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	f240 12ff 	movw	r2, #511	; 0x1ff
 801733a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801733e:	e02d      	b.n	801739c <UART_Start_Receive_IT+0xa4>
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	22ff      	movs	r2, #255	; 0xff
 8017344:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017348:	e028      	b.n	801739c <UART_Start_Receive_IT+0xa4>
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	689b      	ldr	r3, [r3, #8]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d10d      	bne.n	801736e <UART_Start_Receive_IT+0x76>
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	691b      	ldr	r3, [r3, #16]
 8017356:	2b00      	cmp	r3, #0
 8017358:	d104      	bne.n	8017364 <UART_Start_Receive_IT+0x6c>
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	22ff      	movs	r2, #255	; 0xff
 801735e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017362:	e01b      	b.n	801739c <UART_Start_Receive_IT+0xa4>
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	227f      	movs	r2, #127	; 0x7f
 8017368:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801736c:	e016      	b.n	801739c <UART_Start_Receive_IT+0xa4>
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	689b      	ldr	r3, [r3, #8]
 8017372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8017376:	d10d      	bne.n	8017394 <UART_Start_Receive_IT+0x9c>
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	691b      	ldr	r3, [r3, #16]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d104      	bne.n	801738a <UART_Start_Receive_IT+0x92>
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	227f      	movs	r2, #127	; 0x7f
 8017384:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017388:	e008      	b.n	801739c <UART_Start_Receive_IT+0xa4>
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	223f      	movs	r2, #63	; 0x3f
 801738e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017392:	e003      	b.n	801739c <UART_Start_Receive_IT+0xa4>
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	2200      	movs	r2, #0
 8017398:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	2200      	movs	r2, #0
 80173a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	2222      	movs	r2, #34	; 0x22
 80173a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	3308      	adds	r3, #8
 80173b2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80173b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80173b6:	e853 3f00 	ldrex	r3, [r3]
 80173ba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80173bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80173be:	f043 0301 	orr.w	r3, r3, #1
 80173c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	681b      	ldr	r3, [r3, #0]
 80173ca:	3308      	adds	r3, #8
 80173cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80173d0:	673a      	str	r2, [r7, #112]	; 0x70
 80173d2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80173d4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80173d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80173d8:	e841 2300 	strex	r3, r2, [r1]
 80173dc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80173de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d1e3      	bne.n	80173ac <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80173e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80173ec:	d14f      	bne.n	801748e <UART_Start_Receive_IT+0x196>
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80173f4:	88fa      	ldrh	r2, [r7, #6]
 80173f6:	429a      	cmp	r2, r3
 80173f8:	d349      	bcc.n	801748e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	689b      	ldr	r3, [r3, #8]
 80173fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017402:	d107      	bne.n	8017414 <UART_Start_Receive_IT+0x11c>
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	691b      	ldr	r3, [r3, #16]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d103      	bne.n	8017414 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	4a47      	ldr	r2, [pc, #284]	; (801752c <UART_Start_Receive_IT+0x234>)
 8017410:	675a      	str	r2, [r3, #116]	; 0x74
 8017412:	e002      	b.n	801741a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	4a46      	ldr	r2, [pc, #280]	; (8017530 <UART_Start_Receive_IT+0x238>)
 8017418:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	691b      	ldr	r3, [r3, #16]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d01a      	beq.n	8017458 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801742a:	e853 3f00 	ldrex	r3, [r3]
 801742e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	461a      	mov	r2, r3
 8017440:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017444:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017446:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017448:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801744a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801744c:	e841 2300 	strex	r3, r2, [r1]
 8017450:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8017452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017454:	2b00      	cmp	r3, #0
 8017456:	d1e4      	bne.n	8017422 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	3308      	adds	r3, #8
 801745e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017462:	e853 3f00 	ldrex	r3, [r3]
 8017466:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801746a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801746e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	3308      	adds	r3, #8
 8017476:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017478:	64ba      	str	r2, [r7, #72]	; 0x48
 801747a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801747c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801747e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017480:	e841 2300 	strex	r3, r2, [r1]
 8017484:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8017486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017488:	2b00      	cmp	r3, #0
 801748a:	d1e5      	bne.n	8017458 <UART_Start_Receive_IT+0x160>
 801748c:	e046      	b.n	801751c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	689b      	ldr	r3, [r3, #8]
 8017492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017496:	d107      	bne.n	80174a8 <UART_Start_Receive_IT+0x1b0>
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	691b      	ldr	r3, [r3, #16]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d103      	bne.n	80174a8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	4a24      	ldr	r2, [pc, #144]	; (8017534 <UART_Start_Receive_IT+0x23c>)
 80174a4:	675a      	str	r2, [r3, #116]	; 0x74
 80174a6:	e002      	b.n	80174ae <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	4a23      	ldr	r2, [pc, #140]	; (8017538 <UART_Start_Receive_IT+0x240>)
 80174ac:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	691b      	ldr	r3, [r3, #16]
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d019      	beq.n	80174ea <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174be:	e853 3f00 	ldrex	r3, [r3]
 80174c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80174c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174c6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80174ca:	677b      	str	r3, [r7, #116]	; 0x74
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	461a      	mov	r2, r3
 80174d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80174d4:	637b      	str	r3, [r7, #52]	; 0x34
 80174d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80174d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80174da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80174dc:	e841 2300 	strex	r3, r2, [r1]
 80174e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80174e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d1e6      	bne.n	80174b6 <UART_Start_Receive_IT+0x1be>
 80174e8:	e018      	b.n	801751c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174f0:	697b      	ldr	r3, [r7, #20]
 80174f2:	e853 3f00 	ldrex	r3, [r3]
 80174f6:	613b      	str	r3, [r7, #16]
   return(result);
 80174f8:	693b      	ldr	r3, [r7, #16]
 80174fa:	f043 0320 	orr.w	r3, r3, #32
 80174fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	461a      	mov	r2, r3
 8017506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017508:	623b      	str	r3, [r7, #32]
 801750a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801750c:	69f9      	ldr	r1, [r7, #28]
 801750e:	6a3a      	ldr	r2, [r7, #32]
 8017510:	e841 2300 	strex	r3, r2, [r1]
 8017514:	61bb      	str	r3, [r7, #24]
   return(result);
 8017516:	69bb      	ldr	r3, [r7, #24]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d1e6      	bne.n	80174ea <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801751c:	2300      	movs	r3, #0
}
 801751e:	4618      	mov	r0, r3
 8017520:	378c      	adds	r7, #140	; 0x8c
 8017522:	46bd      	mov	sp, r7
 8017524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017528:	4770      	bx	lr
 801752a:	bf00      	nop
 801752c:	080180a1 	.word	0x080180a1
 8017530:	08017d41 	.word	0x08017d41
 8017534:	08017b89 	.word	0x08017b89
 8017538:	080179d1 	.word	0x080179d1

0801753c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801753c:	b480      	push	{r7}
 801753e:	b095      	sub	sp, #84	; 0x54
 8017540:	af00      	add	r7, sp, #0
 8017542:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801754a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801754c:	e853 3f00 	ldrex	r3, [r3]
 8017550:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017554:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017558:	64fb      	str	r3, [r7, #76]	; 0x4c
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	461a      	mov	r2, r3
 8017560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017562:	643b      	str	r3, [r7, #64]	; 0x40
 8017564:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017566:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017568:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801756a:	e841 2300 	strex	r3, r2, [r1]
 801756e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017572:	2b00      	cmp	r3, #0
 8017574:	d1e6      	bne.n	8017544 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	3308      	adds	r3, #8
 801757c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801757e:	6a3b      	ldr	r3, [r7, #32]
 8017580:	e853 3f00 	ldrex	r3, [r3]
 8017584:	61fb      	str	r3, [r7, #28]
   return(result);
 8017586:	69fa      	ldr	r2, [r7, #28]
 8017588:	4b1e      	ldr	r3, [pc, #120]	; (8017604 <UART_EndRxTransfer+0xc8>)
 801758a:	4013      	ands	r3, r2
 801758c:	64bb      	str	r3, [r7, #72]	; 0x48
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	3308      	adds	r3, #8
 8017594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017596:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017598:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801759a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801759c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801759e:	e841 2300 	strex	r3, r2, [r1]
 80175a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80175a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d1e5      	bne.n	8017576 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80175ae:	2b01      	cmp	r3, #1
 80175b0:	d118      	bne.n	80175e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	e853 3f00 	ldrex	r3, [r3]
 80175be:	60bb      	str	r3, [r7, #8]
   return(result);
 80175c0:	68bb      	ldr	r3, [r7, #8]
 80175c2:	f023 0310 	bic.w	r3, r3, #16
 80175c6:	647b      	str	r3, [r7, #68]	; 0x44
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	461a      	mov	r2, r3
 80175ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80175d0:	61bb      	str	r3, [r7, #24]
 80175d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80175d4:	6979      	ldr	r1, [r7, #20]
 80175d6:	69ba      	ldr	r2, [r7, #24]
 80175d8:	e841 2300 	strex	r3, r2, [r1]
 80175dc:	613b      	str	r3, [r7, #16]
   return(result);
 80175de:	693b      	ldr	r3, [r7, #16]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d1e6      	bne.n	80175b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	2220      	movs	r2, #32
 80175e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	2200      	movs	r2, #0
 80175f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	2200      	movs	r2, #0
 80175f6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80175f8:	bf00      	nop
 80175fa:	3754      	adds	r7, #84	; 0x54
 80175fc:	46bd      	mov	sp, r7
 80175fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017602:	4770      	bx	lr
 8017604:	effffffe 	.word	0xeffffffe

08017608 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017608:	b580      	push	{r7, lr}
 801760a:	b084      	sub	sp, #16
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017614:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	2200      	movs	r2, #0
 801761a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	2200      	movs	r2, #0
 8017622:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017626:	68f8      	ldr	r0, [r7, #12]
 8017628:	f7fe ff2e 	bl	8016488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801762c:	bf00      	nop
 801762e:	3710      	adds	r7, #16
 8017630:	46bd      	mov	sp, r7
 8017632:	bd80      	pop	{r7, pc}

08017634 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8017634:	b480      	push	{r7}
 8017636:	b08f      	sub	sp, #60	; 0x3c
 8017638:	af00      	add	r7, sp, #0
 801763a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017642:	2b21      	cmp	r3, #33	; 0x21
 8017644:	d14c      	bne.n	80176e0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801764c:	b29b      	uxth	r3, r3
 801764e:	2b00      	cmp	r3, #0
 8017650:	d132      	bne.n	80176b8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017658:	6a3b      	ldr	r3, [r7, #32]
 801765a:	e853 3f00 	ldrex	r3, [r3]
 801765e:	61fb      	str	r3, [r7, #28]
   return(result);
 8017660:	69fb      	ldr	r3, [r7, #28]
 8017662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017666:	637b      	str	r3, [r7, #52]	; 0x34
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	461a      	mov	r2, r3
 801766e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017672:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017678:	e841 2300 	strex	r3, r2, [r1]
 801767c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017680:	2b00      	cmp	r3, #0
 8017682:	d1e6      	bne.n	8017652 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	e853 3f00 	ldrex	r3, [r3]
 8017690:	60bb      	str	r3, [r7, #8]
   return(result);
 8017692:	68bb      	ldr	r3, [r7, #8]
 8017694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017698:	633b      	str	r3, [r7, #48]	; 0x30
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	461a      	mov	r2, r3
 80176a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176a2:	61bb      	str	r3, [r7, #24]
 80176a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80176a6:	6979      	ldr	r1, [r7, #20]
 80176a8:	69ba      	ldr	r2, [r7, #24]
 80176aa:	e841 2300 	strex	r3, r2, [r1]
 80176ae:	613b      	str	r3, [r7, #16]
   return(result);
 80176b0:	693b      	ldr	r3, [r7, #16]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d1e6      	bne.n	8017684 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80176b6:	e013      	b.n	80176e0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80176bc:	781a      	ldrb	r2, [r3, #0]
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80176c8:	1c5a      	adds	r2, r3, #1
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80176d4:	b29b      	uxth	r3, r3
 80176d6:	3b01      	subs	r3, #1
 80176d8:	b29a      	uxth	r2, r3
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80176e0:	bf00      	nop
 80176e2:	373c      	adds	r7, #60	; 0x3c
 80176e4:	46bd      	mov	sp, r7
 80176e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ea:	4770      	bx	lr

080176ec <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80176ec:	b480      	push	{r7}
 80176ee:	b091      	sub	sp, #68	; 0x44
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80176fa:	2b21      	cmp	r3, #33	; 0x21
 80176fc:	d151      	bne.n	80177a2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017704:	b29b      	uxth	r3, r3
 8017706:	2b00      	cmp	r3, #0
 8017708:	d132      	bne.n	8017770 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017712:	e853 3f00 	ldrex	r3, [r3]
 8017716:	623b      	str	r3, [r7, #32]
   return(result);
 8017718:	6a3b      	ldr	r3, [r7, #32]
 801771a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801771e:	63bb      	str	r3, [r7, #56]	; 0x38
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	461a      	mov	r2, r3
 8017726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017728:	633b      	str	r3, [r7, #48]	; 0x30
 801772a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801772c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801772e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017730:	e841 2300 	strex	r3, r2, [r1]
 8017734:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017738:	2b00      	cmp	r3, #0
 801773a:	d1e6      	bne.n	801770a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017742:	693b      	ldr	r3, [r7, #16]
 8017744:	e853 3f00 	ldrex	r3, [r3]
 8017748:	60fb      	str	r3, [r7, #12]
   return(result);
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017750:	637b      	str	r3, [r7, #52]	; 0x34
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	461a      	mov	r2, r3
 8017758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801775a:	61fb      	str	r3, [r7, #28]
 801775c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801775e:	69b9      	ldr	r1, [r7, #24]
 8017760:	69fa      	ldr	r2, [r7, #28]
 8017762:	e841 2300 	strex	r3, r2, [r1]
 8017766:	617b      	str	r3, [r7, #20]
   return(result);
 8017768:	697b      	ldr	r3, [r7, #20]
 801776a:	2b00      	cmp	r3, #0
 801776c:	d1e6      	bne.n	801773c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801776e:	e018      	b.n	80177a2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017774:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8017776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017778:	881b      	ldrh	r3, [r3, #0]
 801777a:	461a      	mov	r2, r3
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017784:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801778a:	1c9a      	adds	r2, r3, #2
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017796:	b29b      	uxth	r3, r3
 8017798:	3b01      	subs	r3, #1
 801779a:	b29a      	uxth	r2, r3
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80177a2:	bf00      	nop
 80177a4:	3744      	adds	r7, #68	; 0x44
 80177a6:	46bd      	mov	sp, r7
 80177a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ac:	4770      	bx	lr

080177ae <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80177ae:	b480      	push	{r7}
 80177b0:	b091      	sub	sp, #68	; 0x44
 80177b2:	af00      	add	r7, sp, #0
 80177b4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80177bc:	2b21      	cmp	r3, #33	; 0x21
 80177be:	d160      	bne.n	8017882 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80177c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80177c8:	e057      	b.n	801787a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80177d0:	b29b      	uxth	r3, r3
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d133      	bne.n	801783e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	3308      	adds	r3, #8
 80177dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177e0:	e853 3f00 	ldrex	r3, [r3]
 80177e4:	623b      	str	r3, [r7, #32]
   return(result);
 80177e6:	6a3b      	ldr	r3, [r7, #32]
 80177e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80177ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	3308      	adds	r3, #8
 80177f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80177f6:	633a      	str	r2, [r7, #48]	; 0x30
 80177f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80177fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80177fe:	e841 2300 	strex	r3, r2, [r1]
 8017802:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017806:	2b00      	cmp	r3, #0
 8017808:	d1e5      	bne.n	80177d6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017810:	693b      	ldr	r3, [r7, #16]
 8017812:	e853 3f00 	ldrex	r3, [r3]
 8017816:	60fb      	str	r3, [r7, #12]
   return(result);
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801781e:	637b      	str	r3, [r7, #52]	; 0x34
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	681b      	ldr	r3, [r3, #0]
 8017824:	461a      	mov	r2, r3
 8017826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017828:	61fb      	str	r3, [r7, #28]
 801782a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801782c:	69b9      	ldr	r1, [r7, #24]
 801782e:	69fa      	ldr	r2, [r7, #28]
 8017830:	e841 2300 	strex	r3, r2, [r1]
 8017834:	617b      	str	r3, [r7, #20]
   return(result);
 8017836:	697b      	ldr	r3, [r7, #20]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d1e6      	bne.n	801780a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801783c:	e021      	b.n	8017882 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	69db      	ldr	r3, [r3, #28]
 8017844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017848:	2b00      	cmp	r3, #0
 801784a:	d013      	beq.n	8017874 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017850:	781a      	ldrb	r2, [r3, #0]
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801785c:	1c5a      	adds	r2, r3, #1
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017868:	b29b      	uxth	r3, r3
 801786a:	3b01      	subs	r3, #1
 801786c:	b29a      	uxth	r2, r3
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8017874:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017876:	3b01      	subs	r3, #1
 8017878:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801787a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801787c:	2b00      	cmp	r3, #0
 801787e:	d1a4      	bne.n	80177ca <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8017880:	e7ff      	b.n	8017882 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8017882:	bf00      	nop
 8017884:	3744      	adds	r7, #68	; 0x44
 8017886:	46bd      	mov	sp, r7
 8017888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801788c:	4770      	bx	lr

0801788e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801788e:	b480      	push	{r7}
 8017890:	b091      	sub	sp, #68	; 0x44
 8017892:	af00      	add	r7, sp, #0
 8017894:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801789c:	2b21      	cmp	r3, #33	; 0x21
 801789e:	d165      	bne.n	801796c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80178a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80178a8:	e05c      	b.n	8017964 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80178b0:	b29b      	uxth	r3, r3
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d133      	bne.n	801791e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	3308      	adds	r3, #8
 80178bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178be:	6a3b      	ldr	r3, [r7, #32]
 80178c0:	e853 3f00 	ldrex	r3, [r3]
 80178c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80178c6:	69fb      	ldr	r3, [r7, #28]
 80178c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80178cc:	637b      	str	r3, [r7, #52]	; 0x34
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	3308      	adds	r3, #8
 80178d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80178d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80178d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80178dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80178de:	e841 2300 	strex	r3, r2, [r1]
 80178e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80178e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d1e5      	bne.n	80178b6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	e853 3f00 	ldrex	r3, [r3]
 80178f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80178f8:	68bb      	ldr	r3, [r7, #8]
 80178fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178fe:	633b      	str	r3, [r7, #48]	; 0x30
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	461a      	mov	r2, r3
 8017906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017908:	61bb      	str	r3, [r7, #24]
 801790a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801790c:	6979      	ldr	r1, [r7, #20]
 801790e:	69ba      	ldr	r2, [r7, #24]
 8017910:	e841 2300 	strex	r3, r2, [r1]
 8017914:	613b      	str	r3, [r7, #16]
   return(result);
 8017916:	693b      	ldr	r3, [r7, #16]
 8017918:	2b00      	cmp	r3, #0
 801791a:	d1e6      	bne.n	80178ea <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801791c:	e026      	b.n	801796c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	69db      	ldr	r3, [r3, #28]
 8017924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017928:	2b00      	cmp	r3, #0
 801792a:	d018      	beq.n	801795e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017930:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8017932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017934:	881b      	ldrh	r3, [r3, #0]
 8017936:	461a      	mov	r2, r3
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017940:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017946:	1c9a      	adds	r2, r3, #2
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8017952:	b29b      	uxth	r3, r3
 8017954:	3b01      	subs	r3, #1
 8017956:	b29a      	uxth	r2, r3
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801795e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017960:	3b01      	subs	r3, #1
 8017962:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8017964:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017966:	2b00      	cmp	r3, #0
 8017968:	d19f      	bne.n	80178aa <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801796a:	e7ff      	b.n	801796c <UART_TxISR_16BIT_FIFOEN+0xde>
 801796c:	bf00      	nop
 801796e:	3744      	adds	r7, #68	; 0x44
 8017970:	46bd      	mov	sp, r7
 8017972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017976:	4770      	bx	lr

08017978 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017978:	b580      	push	{r7, lr}
 801797a:	b088      	sub	sp, #32
 801797c:	af00      	add	r7, sp, #0
 801797e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	e853 3f00 	ldrex	r3, [r3]
 801798c:	60bb      	str	r3, [r7, #8]
   return(result);
 801798e:	68bb      	ldr	r3, [r7, #8]
 8017990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017994:	61fb      	str	r3, [r7, #28]
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	461a      	mov	r2, r3
 801799c:	69fb      	ldr	r3, [r7, #28]
 801799e:	61bb      	str	r3, [r7, #24]
 80179a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179a2:	6979      	ldr	r1, [r7, #20]
 80179a4:	69ba      	ldr	r2, [r7, #24]
 80179a6:	e841 2300 	strex	r3, r2, [r1]
 80179aa:	613b      	str	r3, [r7, #16]
   return(result);
 80179ac:	693b      	ldr	r3, [r7, #16]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d1e6      	bne.n	8017980 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	2220      	movs	r2, #32
 80179b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	2200      	movs	r2, #0
 80179be:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80179c0:	6878      	ldr	r0, [r7, #4]
 80179c2:	f7ec f863 	bl	8003a8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80179c6:	bf00      	nop
 80179c8:	3720      	adds	r7, #32
 80179ca:	46bd      	mov	sp, r7
 80179cc:	bd80      	pop	{r7, pc}
	...

080179d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b09c      	sub	sp, #112	; 0x70
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80179de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80179e8:	2b22      	cmp	r3, #34	; 0x22
 80179ea:	f040 80be 	bne.w	8017b6a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80179f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80179fc:	b2d9      	uxtb	r1, r3
 80179fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8017a02:	b2da      	uxtb	r2, r3
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a08:	400a      	ands	r2, r1
 8017a0a:	b2d2      	uxtb	r2, r2
 8017a0c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a12:	1c5a      	adds	r2, r3, #1
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017a1e:	b29b      	uxth	r3, r3
 8017a20:	3b01      	subs	r3, #1
 8017a22:	b29a      	uxth	r2, r3
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017a30:	b29b      	uxth	r3, r3
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	f040 80a1 	bne.w	8017b7a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017a40:	e853 3f00 	ldrex	r3, [r3]
 8017a44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017a48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017a4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	461a      	mov	r2, r3
 8017a54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017a56:	65bb      	str	r3, [r7, #88]	; 0x58
 8017a58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017a5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017a5e:	e841 2300 	strex	r3, r2, [r1]
 8017a62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d1e6      	bne.n	8017a38 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	3308      	adds	r3, #8
 8017a70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a74:	e853 3f00 	ldrex	r3, [r3]
 8017a78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a7c:	f023 0301 	bic.w	r3, r3, #1
 8017a80:	667b      	str	r3, [r7, #100]	; 0x64
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	3308      	adds	r3, #8
 8017a88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017a8a:	647a      	str	r2, [r7, #68]	; 0x44
 8017a8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017a90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017a92:	e841 2300 	strex	r3, r2, [r1]
 8017a96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d1e5      	bne.n	8017a6a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	2220      	movs	r2, #32
 8017aa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	2200      	movs	r2, #0
 8017aaa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	2200      	movs	r2, #0
 8017ab0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	4a33      	ldr	r2, [pc, #204]	; (8017b84 <UART_RxISR_8BIT+0x1b4>)
 8017ab8:	4293      	cmp	r3, r2
 8017aba:	d01f      	beq.n	8017afc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	685b      	ldr	r3, [r3, #4]
 8017ac2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d018      	beq.n	8017afc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ad2:	e853 3f00 	ldrex	r3, [r3]
 8017ad6:	623b      	str	r3, [r7, #32]
   return(result);
 8017ad8:	6a3b      	ldr	r3, [r7, #32]
 8017ada:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017ade:	663b      	str	r3, [r7, #96]	; 0x60
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	461a      	mov	r2, r3
 8017ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017ae8:	633b      	str	r3, [r7, #48]	; 0x30
 8017aea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017aec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017af0:	e841 2300 	strex	r3, r2, [r1]
 8017af4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d1e6      	bne.n	8017aca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b00:	2b01      	cmp	r3, #1
 8017b02:	d12e      	bne.n	8017b62 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	2200      	movs	r2, #0
 8017b08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	681b      	ldr	r3, [r3, #0]
 8017b0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b10:	693b      	ldr	r3, [r7, #16]
 8017b12:	e853 3f00 	ldrex	r3, [r3]
 8017b16:	60fb      	str	r3, [r7, #12]
   return(result);
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	f023 0310 	bic.w	r3, r3, #16
 8017b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	461a      	mov	r2, r3
 8017b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017b28:	61fb      	str	r3, [r7, #28]
 8017b2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b2c:	69b9      	ldr	r1, [r7, #24]
 8017b2e:	69fa      	ldr	r2, [r7, #28]
 8017b30:	e841 2300 	strex	r3, r2, [r1]
 8017b34:	617b      	str	r3, [r7, #20]
   return(result);
 8017b36:	697b      	ldr	r3, [r7, #20]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d1e6      	bne.n	8017b0a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	69db      	ldr	r3, [r3, #28]
 8017b42:	f003 0310 	and.w	r3, r3, #16
 8017b46:	2b10      	cmp	r3, #16
 8017b48:	d103      	bne.n	8017b52 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	2210      	movs	r2, #16
 8017b50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017b58:	4619      	mov	r1, r3
 8017b5a:	6878      	ldr	r0, [r7, #4]
 8017b5c:	f7fe fc9e 	bl	801649c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017b60:	e00b      	b.n	8017b7a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8017b62:	6878      	ldr	r0, [r7, #4]
 8017b64:	f7eb f952 	bl	8002e0c <HAL_UART_RxCpltCallback>
}
 8017b68:	e007      	b.n	8017b7a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	699a      	ldr	r2, [r3, #24]
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	f042 0208 	orr.w	r2, r2, #8
 8017b78:	619a      	str	r2, [r3, #24]
}
 8017b7a:	bf00      	nop
 8017b7c:	3770      	adds	r7, #112	; 0x70
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	bd80      	pop	{r7, pc}
 8017b82:	bf00      	nop
 8017b84:	58000c00 	.word	0x58000c00

08017b88 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b09c      	sub	sp, #112	; 0x70
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017b96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017ba0:	2b22      	cmp	r3, #34	; 0x22
 8017ba2:	f040 80be 	bne.w	8017d22 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017bb4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8017bb6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8017bba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8017bbe:	4013      	ands	r3, r2
 8017bc0:	b29a      	uxth	r2, r3
 8017bc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017bc4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017bca:	1c9a      	adds	r2, r3, #2
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017bd6:	b29b      	uxth	r3, r3
 8017bd8:	3b01      	subs	r3, #1
 8017bda:	b29a      	uxth	r2, r3
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017be8:	b29b      	uxth	r3, r3
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	f040 80a1 	bne.w	8017d32 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017bf8:	e853 3f00 	ldrex	r3, [r3]
 8017bfc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8017bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017c00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017c04:	667b      	str	r3, [r7, #100]	; 0x64
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	461a      	mov	r2, r3
 8017c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8017c10:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017c14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017c16:	e841 2300 	strex	r3, r2, [r1]
 8017c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d1e6      	bne.n	8017bf0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	3308      	adds	r3, #8
 8017c28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c2c:	e853 3f00 	ldrex	r3, [r3]
 8017c30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c34:	f023 0301 	bic.w	r3, r3, #1
 8017c38:	663b      	str	r3, [r7, #96]	; 0x60
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	3308      	adds	r3, #8
 8017c40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017c42:	643a      	str	r2, [r7, #64]	; 0x40
 8017c44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017c48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017c4a:	e841 2300 	strex	r3, r2, [r1]
 8017c4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d1e5      	bne.n	8017c22 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	2220      	movs	r2, #32
 8017c5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	2200      	movs	r2, #0
 8017c62:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	2200      	movs	r2, #0
 8017c68:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	4a33      	ldr	r2, [pc, #204]	; (8017d3c <UART_RxISR_16BIT+0x1b4>)
 8017c70:	4293      	cmp	r3, r2
 8017c72:	d01f      	beq.n	8017cb4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	685b      	ldr	r3, [r3, #4]
 8017c7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d018      	beq.n	8017cb4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c88:	6a3b      	ldr	r3, [r7, #32]
 8017c8a:	e853 3f00 	ldrex	r3, [r3]
 8017c8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8017c90:	69fb      	ldr	r3, [r7, #28]
 8017c92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017c96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	461a      	mov	r2, r3
 8017c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017ca2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ca8:	e841 2300 	strex	r3, r2, [r1]
 8017cac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d1e6      	bne.n	8017c82 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017cb8:	2b01      	cmp	r3, #1
 8017cba:	d12e      	bne.n	8017d1a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	2200      	movs	r2, #0
 8017cc0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	e853 3f00 	ldrex	r3, [r3]
 8017cce:	60bb      	str	r3, [r7, #8]
   return(result);
 8017cd0:	68bb      	ldr	r3, [r7, #8]
 8017cd2:	f023 0310 	bic.w	r3, r3, #16
 8017cd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	461a      	mov	r2, r3
 8017cde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017ce0:	61bb      	str	r3, [r7, #24]
 8017ce2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ce4:	6979      	ldr	r1, [r7, #20]
 8017ce6:	69ba      	ldr	r2, [r7, #24]
 8017ce8:	e841 2300 	strex	r3, r2, [r1]
 8017cec:	613b      	str	r3, [r7, #16]
   return(result);
 8017cee:	693b      	ldr	r3, [r7, #16]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d1e6      	bne.n	8017cc2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	69db      	ldr	r3, [r3, #28]
 8017cfa:	f003 0310 	and.w	r3, r3, #16
 8017cfe:	2b10      	cmp	r3, #16
 8017d00:	d103      	bne.n	8017d0a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	2210      	movs	r2, #16
 8017d08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017d10:	4619      	mov	r1, r3
 8017d12:	6878      	ldr	r0, [r7, #4]
 8017d14:	f7fe fbc2 	bl	801649c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017d18:	e00b      	b.n	8017d32 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8017d1a:	6878      	ldr	r0, [r7, #4]
 8017d1c:	f7eb f876 	bl	8002e0c <HAL_UART_RxCpltCallback>
}
 8017d20:	e007      	b.n	8017d32 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	699a      	ldr	r2, [r3, #24]
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	f042 0208 	orr.w	r2, r2, #8
 8017d30:	619a      	str	r2, [r3, #24]
}
 8017d32:	bf00      	nop
 8017d34:	3770      	adds	r7, #112	; 0x70
 8017d36:	46bd      	mov	sp, r7
 8017d38:	bd80      	pop	{r7, pc}
 8017d3a:	bf00      	nop
 8017d3c:	58000c00 	.word	0x58000c00

08017d40 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b0ac      	sub	sp, #176	; 0xb0
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017d4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	69db      	ldr	r3, [r3, #28]
 8017d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	689b      	ldr	r3, [r3, #8]
 8017d6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017d76:	2b22      	cmp	r3, #34	; 0x22
 8017d78:	f040 8180 	bne.w	801807c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017d82:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017d86:	e123      	b.n	8017fd0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	681b      	ldr	r3, [r3, #0]
 8017d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d8e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017d92:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8017d96:	b2d9      	uxtb	r1, r3
 8017d98:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8017d9c:	b2da      	uxtb	r2, r3
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017da2:	400a      	ands	r2, r1
 8017da4:	b2d2      	uxtb	r2, r2
 8017da6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017dac:	1c5a      	adds	r2, r3, #1
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017db8:	b29b      	uxth	r3, r3
 8017dba:	3b01      	subs	r3, #1
 8017dbc:	b29a      	uxth	r2, r3
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	69db      	ldr	r3, [r3, #28]
 8017dca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8017dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017dd2:	f003 0307 	and.w	r3, r3, #7
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d053      	beq.n	8017e82 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017dde:	f003 0301 	and.w	r3, r3, #1
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d011      	beq.n	8017e0a <UART_RxISR_8BIT_FIFOEN+0xca>
 8017de6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d00b      	beq.n	8017e0a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	2201      	movs	r2, #1
 8017df8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017e00:	f043 0201 	orr.w	r2, r3, #1
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017e0e:	f003 0302 	and.w	r3, r3, #2
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d011      	beq.n	8017e3a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8017e16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017e1a:	f003 0301 	and.w	r3, r3, #1
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d00b      	beq.n	8017e3a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	2202      	movs	r2, #2
 8017e28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017e30:	f043 0204 	orr.w	r2, r3, #4
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017e3e:	f003 0304 	and.w	r3, r3, #4
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d011      	beq.n	8017e6a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8017e46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017e4a:	f003 0301 	and.w	r3, r3, #1
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d00b      	beq.n	8017e6a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	2204      	movs	r2, #4
 8017e58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017e60:	f043 0202 	orr.w	r2, r3, #2
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d006      	beq.n	8017e82 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017e74:	6878      	ldr	r0, [r7, #4]
 8017e76:	f7fe fb07 	bl	8016488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	2200      	movs	r2, #0
 8017e7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017e88:	b29b      	uxth	r3, r3
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	f040 80a0 	bne.w	8017fd0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017e98:	e853 3f00 	ldrex	r3, [r3]
 8017e9c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8017e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	461a      	mov	r2, r3
 8017eae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017eb4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017eb6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8017eb8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017eba:	e841 2300 	strex	r3, r2, [r1]
 8017ebe:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8017ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d1e4      	bne.n	8017e90 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	3308      	adds	r3, #8
 8017ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017ed0:	e853 3f00 	ldrex	r3, [r3]
 8017ed4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8017ed6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017ed8:	4b6e      	ldr	r3, [pc, #440]	; (8018094 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8017eda:	4013      	ands	r3, r2
 8017edc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	3308      	adds	r3, #8
 8017ee6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017eea:	66ba      	str	r2, [r7, #104]	; 0x68
 8017eec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017eee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8017ef0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017ef2:	e841 2300 	strex	r3, r2, [r1]
 8017ef6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8017ef8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d1e3      	bne.n	8017ec6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	2220      	movs	r2, #32
 8017f02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	2200      	movs	r2, #0
 8017f0a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	2200      	movs	r2, #0
 8017f10:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	4a60      	ldr	r2, [pc, #384]	; (8018098 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8017f18:	4293      	cmp	r3, r2
 8017f1a:	d021      	beq.n	8017f60 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	685b      	ldr	r3, [r3, #4]
 8017f22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d01a      	beq.n	8017f60 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017f32:	e853 3f00 	ldrex	r3, [r3]
 8017f36:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8017f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	681b      	ldr	r3, [r3, #0]
 8017f46:	461a      	mov	r2, r3
 8017f48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017f4c:	657b      	str	r3, [r7, #84]	; 0x54
 8017f4e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017f52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017f54:	e841 2300 	strex	r3, r2, [r1]
 8017f58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d1e4      	bne.n	8017f2a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f64:	2b01      	cmp	r3, #1
 8017f66:	d130      	bne.n	8017fca <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f76:	e853 3f00 	ldrex	r3, [r3]
 8017f7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f7e:	f023 0310 	bic.w	r3, r3, #16
 8017f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	461a      	mov	r2, r3
 8017f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017f90:	643b      	str	r3, [r7, #64]	; 0x40
 8017f92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017f96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017f98:	e841 2300 	strex	r3, r2, [r1]
 8017f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d1e4      	bne.n	8017f6e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	69db      	ldr	r3, [r3, #28]
 8017faa:	f003 0310 	and.w	r3, r3, #16
 8017fae:	2b10      	cmp	r3, #16
 8017fb0:	d103      	bne.n	8017fba <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	2210      	movs	r2, #16
 8017fb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017fc0:	4619      	mov	r1, r3
 8017fc2:	6878      	ldr	r0, [r7, #4]
 8017fc4:	f7fe fa6a 	bl	801649c <HAL_UARTEx_RxEventCallback>
 8017fc8:	e002      	b.n	8017fd0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8017fca:	6878      	ldr	r0, [r7, #4]
 8017fcc:	f7ea ff1e 	bl	8002e0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017fd0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d006      	beq.n	8017fe6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8017fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017fdc:	f003 0320 	and.w	r3, r3, #32
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	f47f aed1 	bne.w	8017d88 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017fec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8017ff0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d049      	beq.n	801808c <UART_RxISR_8BIT_FIFOEN+0x34c>
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017ffe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8018002:	429a      	cmp	r2, r3
 8018004:	d242      	bcs.n	801808c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	3308      	adds	r3, #8
 801800c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801800e:	6a3b      	ldr	r3, [r7, #32]
 8018010:	e853 3f00 	ldrex	r3, [r3]
 8018014:	61fb      	str	r3, [r7, #28]
   return(result);
 8018016:	69fb      	ldr	r3, [r7, #28]
 8018018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801801c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	3308      	adds	r3, #8
 8018026:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801802a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801802c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801802e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018032:	e841 2300 	strex	r3, r2, [r1]
 8018036:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8018038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801803a:	2b00      	cmp	r3, #0
 801803c:	d1e3      	bne.n	8018006 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	4a16      	ldr	r2, [pc, #88]	; (801809c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8018042:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	e853 3f00 	ldrex	r3, [r3]
 8018050:	60bb      	str	r3, [r7, #8]
   return(result);
 8018052:	68bb      	ldr	r3, [r7, #8]
 8018054:	f043 0320 	orr.w	r3, r3, #32
 8018058:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	461a      	mov	r2, r3
 8018062:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018066:	61bb      	str	r3, [r7, #24]
 8018068:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801806a:	6979      	ldr	r1, [r7, #20]
 801806c:	69ba      	ldr	r2, [r7, #24]
 801806e:	e841 2300 	strex	r3, r2, [r1]
 8018072:	613b      	str	r3, [r7, #16]
   return(result);
 8018074:	693b      	ldr	r3, [r7, #16]
 8018076:	2b00      	cmp	r3, #0
 8018078:	d1e4      	bne.n	8018044 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801807a:	e007      	b.n	801808c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	699a      	ldr	r2, [r3, #24]
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	f042 0208 	orr.w	r2, r2, #8
 801808a:	619a      	str	r2, [r3, #24]
}
 801808c:	bf00      	nop
 801808e:	37b0      	adds	r7, #176	; 0xb0
 8018090:	46bd      	mov	sp, r7
 8018092:	bd80      	pop	{r7, pc}
 8018094:	effffffe 	.word	0xeffffffe
 8018098:	58000c00 	.word	0x58000c00
 801809c:	080179d1 	.word	0x080179d1

080180a0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80180a0:	b580      	push	{r7, lr}
 80180a2:	b0ae      	sub	sp, #184	; 0xb8
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80180ae:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	69db      	ldr	r3, [r3, #28]
 80180b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	689b      	ldr	r3, [r3, #8]
 80180cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80180d6:	2b22      	cmp	r3, #34	; 0x22
 80180d8:	f040 8184 	bne.w	80183e4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80180e2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80180e6:	e127      	b.n	8018338 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180ee:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80180f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80180fa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80180fe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8018102:	4013      	ands	r3, r2
 8018104:	b29a      	uxth	r2, r3
 8018106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801810a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018110:	1c9a      	adds	r2, r3, #2
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801811c:	b29b      	uxth	r3, r3
 801811e:	3b01      	subs	r3, #1
 8018120:	b29a      	uxth	r2, r3
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	681b      	ldr	r3, [r3, #0]
 801812c:	69db      	ldr	r3, [r3, #28]
 801812e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8018132:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018136:	f003 0307 	and.w	r3, r3, #7
 801813a:	2b00      	cmp	r3, #0
 801813c:	d053      	beq.n	80181e6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801813e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018142:	f003 0301 	and.w	r3, r3, #1
 8018146:	2b00      	cmp	r3, #0
 8018148:	d011      	beq.n	801816e <UART_RxISR_16BIT_FIFOEN+0xce>
 801814a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801814e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018152:	2b00      	cmp	r3, #0
 8018154:	d00b      	beq.n	801816e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	2201      	movs	r2, #1
 801815c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018164:	f043 0201 	orr.w	r2, r3, #1
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801816e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018172:	f003 0302 	and.w	r3, r3, #2
 8018176:	2b00      	cmp	r3, #0
 8018178:	d011      	beq.n	801819e <UART_RxISR_16BIT_FIFOEN+0xfe>
 801817a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801817e:	f003 0301 	and.w	r3, r3, #1
 8018182:	2b00      	cmp	r3, #0
 8018184:	d00b      	beq.n	801819e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	2202      	movs	r2, #2
 801818c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018194:	f043 0204 	orr.w	r2, r3, #4
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801819e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80181a2:	f003 0304 	and.w	r3, r3, #4
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d011      	beq.n	80181ce <UART_RxISR_16BIT_FIFOEN+0x12e>
 80181aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80181ae:	f003 0301 	and.w	r3, r3, #1
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d00b      	beq.n	80181ce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	2204      	movs	r2, #4
 80181bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181c4:	f043 0202 	orr.w	r2, r3, #2
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d006      	beq.n	80181e6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80181d8:	6878      	ldr	r0, [r7, #4]
 80181da:	f7fe f955 	bl	8016488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	2200      	movs	r2, #0
 80181e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80181ec:	b29b      	uxth	r3, r3
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	f040 80a2 	bne.w	8018338 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	681b      	ldr	r3, [r3, #0]
 80181f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80181fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80181fc:	e853 3f00 	ldrex	r3, [r3]
 8018200:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8018202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8018208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	461a      	mov	r2, r3
 8018212:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018216:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801821a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801821c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801821e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8018222:	e841 2300 	strex	r3, r2, [r1]
 8018226:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8018228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801822a:	2b00      	cmp	r3, #0
 801822c:	d1e2      	bne.n	80181f4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	3308      	adds	r3, #8
 8018234:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018238:	e853 3f00 	ldrex	r3, [r3]
 801823c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801823e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018240:	4b6e      	ldr	r3, [pc, #440]	; (80183fc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8018242:	4013      	ands	r3, r2
 8018244:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	3308      	adds	r3, #8
 801824e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8018252:	66fa      	str	r2, [r7, #108]	; 0x6c
 8018254:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018256:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8018258:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801825a:	e841 2300 	strex	r3, r2, [r1]
 801825e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8018260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018262:	2b00      	cmp	r3, #0
 8018264:	d1e3      	bne.n	801822e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	2220      	movs	r2, #32
 801826a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	2200      	movs	r2, #0
 8018272:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	2200      	movs	r2, #0
 8018278:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	4a60      	ldr	r2, [pc, #384]	; (8018400 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8018280:	4293      	cmp	r3, r2
 8018282:	d021      	beq.n	80182c8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	685b      	ldr	r3, [r3, #4]
 801828a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801828e:	2b00      	cmp	r3, #0
 8018290:	d01a      	beq.n	80182c8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	681b      	ldr	r3, [r3, #0]
 8018296:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801829a:	e853 3f00 	ldrex	r3, [r3]
 801829e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80182a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80182a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80182a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	461a      	mov	r2, r3
 80182b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80182b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80182b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80182b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80182ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80182bc:	e841 2300 	strex	r3, r2, [r1]
 80182c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80182c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d1e4      	bne.n	8018292 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182cc:	2b01      	cmp	r3, #1
 80182ce:	d130      	bne.n	8018332 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	2200      	movs	r2, #0
 80182d4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80182dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182de:	e853 3f00 	ldrex	r3, [r3]
 80182e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80182e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182e6:	f023 0310 	bic.w	r3, r3, #16
 80182ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	461a      	mov	r2, r3
 80182f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80182f8:	647b      	str	r3, [r7, #68]	; 0x44
 80182fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80182fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80182fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018300:	e841 2300 	strex	r3, r2, [r1]
 8018304:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8018306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018308:	2b00      	cmp	r3, #0
 801830a:	d1e4      	bne.n	80182d6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	69db      	ldr	r3, [r3, #28]
 8018312:	f003 0310 	and.w	r3, r3, #16
 8018316:	2b10      	cmp	r3, #16
 8018318:	d103      	bne.n	8018322 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	2210      	movs	r2, #16
 8018320:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8018328:	4619      	mov	r1, r3
 801832a:	6878      	ldr	r0, [r7, #4]
 801832c:	f7fe f8b6 	bl	801649c <HAL_UARTEx_RxEventCallback>
 8018330:	e002      	b.n	8018338 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8018332:	6878      	ldr	r0, [r7, #4]
 8018334:	f7ea fd6a 	bl	8002e0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8018338:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801833c:	2b00      	cmp	r3, #0
 801833e:	d006      	beq.n	801834e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8018340:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018344:	f003 0320 	and.w	r3, r3, #32
 8018348:	2b00      	cmp	r3, #0
 801834a:	f47f aecd 	bne.w	80180e8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8018354:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8018358:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801835c:	2b00      	cmp	r3, #0
 801835e:	d049      	beq.n	80183f4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018366:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801836a:	429a      	cmp	r2, r3
 801836c:	d242      	bcs.n	80183f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	3308      	adds	r3, #8
 8018374:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018378:	e853 3f00 	ldrex	r3, [r3]
 801837c:	623b      	str	r3, [r7, #32]
   return(result);
 801837e:	6a3b      	ldr	r3, [r7, #32]
 8018380:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018384:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	3308      	adds	r3, #8
 801838e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8018392:	633a      	str	r2, [r7, #48]	; 0x30
 8018394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801839a:	e841 2300 	strex	r3, r2, [r1]
 801839e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80183a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d1e3      	bne.n	801836e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	4a16      	ldr	r2, [pc, #88]	; (8018404 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80183aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80183b2:	693b      	ldr	r3, [r7, #16]
 80183b4:	e853 3f00 	ldrex	r3, [r3]
 80183b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	f043 0320 	orr.w	r3, r3, #32
 80183c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	461a      	mov	r2, r3
 80183ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80183ce:	61fb      	str	r3, [r7, #28]
 80183d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80183d2:	69b9      	ldr	r1, [r7, #24]
 80183d4:	69fa      	ldr	r2, [r7, #28]
 80183d6:	e841 2300 	strex	r3, r2, [r1]
 80183da:	617b      	str	r3, [r7, #20]
   return(result);
 80183dc:	697b      	ldr	r3, [r7, #20]
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d1e4      	bne.n	80183ac <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80183e2:	e007      	b.n	80183f4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	699a      	ldr	r2, [r3, #24]
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	f042 0208 	orr.w	r2, r2, #8
 80183f2:	619a      	str	r2, [r3, #24]
}
 80183f4:	bf00      	nop
 80183f6:	37b8      	adds	r7, #184	; 0xb8
 80183f8:	46bd      	mov	sp, r7
 80183fa:	bd80      	pop	{r7, pc}
 80183fc:	effffffe 	.word	0xeffffffe
 8018400:	58000c00 	.word	0x58000c00
 8018404:	08017b89 	.word	0x08017b89

08018408 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018408:	b480      	push	{r7}
 801840a:	b083      	sub	sp, #12
 801840c:	af00      	add	r7, sp, #0
 801840e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018410:	bf00      	nop
 8018412:	370c      	adds	r7, #12
 8018414:	46bd      	mov	sp, r7
 8018416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801841a:	4770      	bx	lr

0801841c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801841c:	b480      	push	{r7}
 801841e:	b083      	sub	sp, #12
 8018420:	af00      	add	r7, sp, #0
 8018422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8018424:	bf00      	nop
 8018426:	370c      	adds	r7, #12
 8018428:	46bd      	mov	sp, r7
 801842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801842e:	4770      	bx	lr

08018430 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8018430:	b480      	push	{r7}
 8018432:	b083      	sub	sp, #12
 8018434:	af00      	add	r7, sp, #0
 8018436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8018438:	bf00      	nop
 801843a:	370c      	adds	r7, #12
 801843c:	46bd      	mov	sp, r7
 801843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018442:	4770      	bx	lr

08018444 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8018444:	b480      	push	{r7}
 8018446:	b089      	sub	sp, #36	; 0x24
 8018448:	af00      	add	r7, sp, #0
 801844a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8018452:	2b01      	cmp	r3, #1
 8018454:	d101      	bne.n	801845a <HAL_UARTEx_EnableStopMode+0x16>
 8018456:	2302      	movs	r3, #2
 8018458:	e021      	b.n	801849e <HAL_UARTEx_EnableStopMode+0x5a>
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	2201      	movs	r2, #1
 801845e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	681b      	ldr	r3, [r3, #0]
 8018466:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	e853 3f00 	ldrex	r3, [r3]
 801846e:	60bb      	str	r3, [r7, #8]
   return(result);
 8018470:	68bb      	ldr	r3, [r7, #8]
 8018472:	f043 0302 	orr.w	r3, r3, #2
 8018476:	61fb      	str	r3, [r7, #28]
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	461a      	mov	r2, r3
 801847e:	69fb      	ldr	r3, [r7, #28]
 8018480:	61bb      	str	r3, [r7, #24]
 8018482:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018484:	6979      	ldr	r1, [r7, #20]
 8018486:	69ba      	ldr	r2, [r7, #24]
 8018488:	e841 2300 	strex	r3, r2, [r1]
 801848c:	613b      	str	r3, [r7, #16]
   return(result);
 801848e:	693b      	ldr	r3, [r7, #16]
 8018490:	2b00      	cmp	r3, #0
 8018492:	d1e6      	bne.n	8018462 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	2200      	movs	r2, #0
 8018498:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801849c:	2300      	movs	r3, #0
}
 801849e:	4618      	mov	r0, r3
 80184a0:	3724      	adds	r7, #36	; 0x24
 80184a2:	46bd      	mov	sp, r7
 80184a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a8:	4770      	bx	lr

080184aa <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80184aa:	b580      	push	{r7, lr}
 80184ac:	b084      	sub	sp, #16
 80184ae:	af00      	add	r7, sp, #0
 80184b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80184b8:	2b01      	cmp	r3, #1
 80184ba:	d101      	bne.n	80184c0 <HAL_UARTEx_EnableFifoMode+0x16>
 80184bc:	2302      	movs	r3, #2
 80184be:	e02b      	b.n	8018518 <HAL_UARTEx_EnableFifoMode+0x6e>
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	2201      	movs	r2, #1
 80184c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	2224      	movs	r2, #36	; 0x24
 80184cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	681a      	ldr	r2, [r3, #0]
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	f022 0201 	bic.w	r2, r2, #1
 80184e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80184ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80184f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	68fa      	ldr	r2, [r7, #12]
 80184fe:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018500:	6878      	ldr	r0, [r7, #4]
 8018502:	f000 f8c3 	bl	801868c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	2220      	movs	r2, #32
 801850a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	2200      	movs	r2, #0
 8018512:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018516:	2300      	movs	r3, #0
}
 8018518:	4618      	mov	r0, r3
 801851a:	3710      	adds	r7, #16
 801851c:	46bd      	mov	sp, r7
 801851e:	bd80      	pop	{r7, pc}

08018520 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8018520:	b480      	push	{r7}
 8018522:	b085      	sub	sp, #20
 8018524:	af00      	add	r7, sp, #0
 8018526:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801852e:	2b01      	cmp	r3, #1
 8018530:	d101      	bne.n	8018536 <HAL_UARTEx_DisableFifoMode+0x16>
 8018532:	2302      	movs	r3, #2
 8018534:	e027      	b.n	8018586 <HAL_UARTEx_DisableFifoMode+0x66>
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	2201      	movs	r2, #1
 801853a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	2224      	movs	r2, #36	; 0x24
 8018542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	681a      	ldr	r2, [r3, #0]
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	f022 0201 	bic.w	r2, r2, #1
 801855c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8018564:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	2200      	movs	r2, #0
 801856a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	68fa      	ldr	r2, [r7, #12]
 8018572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	2220      	movs	r2, #32
 8018578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	2200      	movs	r2, #0
 8018580:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018584:	2300      	movs	r3, #0
}
 8018586:	4618      	mov	r0, r3
 8018588:	3714      	adds	r7, #20
 801858a:	46bd      	mov	sp, r7
 801858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018590:	4770      	bx	lr

08018592 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018592:	b580      	push	{r7, lr}
 8018594:	b084      	sub	sp, #16
 8018596:	af00      	add	r7, sp, #0
 8018598:	6078      	str	r0, [r7, #4]
 801859a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80185a2:	2b01      	cmp	r3, #1
 80185a4:	d101      	bne.n	80185aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80185a6:	2302      	movs	r3, #2
 80185a8:	e02d      	b.n	8018606 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	2201      	movs	r2, #1
 80185ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	2224      	movs	r2, #36	; 0x24
 80185b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	681a      	ldr	r2, [r3, #0]
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	f022 0201 	bic.w	r2, r2, #1
 80185d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	689b      	ldr	r3, [r3, #8]
 80185d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	683a      	ldr	r2, [r7, #0]
 80185e2:	430a      	orrs	r2, r1
 80185e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80185e6:	6878      	ldr	r0, [r7, #4]
 80185e8:	f000 f850 	bl	801868c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	68fa      	ldr	r2, [r7, #12]
 80185f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	2220      	movs	r2, #32
 80185f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	2200      	movs	r2, #0
 8018600:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018604:	2300      	movs	r3, #0
}
 8018606:	4618      	mov	r0, r3
 8018608:	3710      	adds	r7, #16
 801860a:	46bd      	mov	sp, r7
 801860c:	bd80      	pop	{r7, pc}

0801860e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801860e:	b580      	push	{r7, lr}
 8018610:	b084      	sub	sp, #16
 8018612:	af00      	add	r7, sp, #0
 8018614:	6078      	str	r0, [r7, #4]
 8018616:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801861e:	2b01      	cmp	r3, #1
 8018620:	d101      	bne.n	8018626 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8018622:	2302      	movs	r3, #2
 8018624:	e02d      	b.n	8018682 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	2201      	movs	r2, #1
 801862a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	2224      	movs	r2, #36	; 0x24
 8018632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	681b      	ldr	r3, [r3, #0]
 801863c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	681a      	ldr	r2, [r3, #0]
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	681b      	ldr	r3, [r3, #0]
 8018648:	f022 0201 	bic.w	r2, r2, #1
 801864c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	689b      	ldr	r3, [r3, #8]
 8018654:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	683a      	ldr	r2, [r7, #0]
 801865e:	430a      	orrs	r2, r1
 8018660:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018662:	6878      	ldr	r0, [r7, #4]
 8018664:	f000 f812 	bl	801868c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	68fa      	ldr	r2, [r7, #12]
 801866e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	2220      	movs	r2, #32
 8018674:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	2200      	movs	r2, #0
 801867c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018680:	2300      	movs	r3, #0
}
 8018682:	4618      	mov	r0, r3
 8018684:	3710      	adds	r7, #16
 8018686:	46bd      	mov	sp, r7
 8018688:	bd80      	pop	{r7, pc}
	...

0801868c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801868c:	b480      	push	{r7}
 801868e:	b085      	sub	sp, #20
 8018690:	af00      	add	r7, sp, #0
 8018692:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018698:	2b00      	cmp	r3, #0
 801869a:	d108      	bne.n	80186ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	2201      	movs	r2, #1
 80186a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	2201      	movs	r2, #1
 80186a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80186ac:	e031      	b.n	8018712 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80186ae:	2310      	movs	r3, #16
 80186b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80186b2:	2310      	movs	r3, #16
 80186b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	689b      	ldr	r3, [r3, #8]
 80186bc:	0e5b      	lsrs	r3, r3, #25
 80186be:	b2db      	uxtb	r3, r3
 80186c0:	f003 0307 	and.w	r3, r3, #7
 80186c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	681b      	ldr	r3, [r3, #0]
 80186ca:	689b      	ldr	r3, [r3, #8]
 80186cc:	0f5b      	lsrs	r3, r3, #29
 80186ce:	b2db      	uxtb	r3, r3
 80186d0:	f003 0307 	and.w	r3, r3, #7
 80186d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80186d6:	7bbb      	ldrb	r3, [r7, #14]
 80186d8:	7b3a      	ldrb	r2, [r7, #12]
 80186da:	4911      	ldr	r1, [pc, #68]	; (8018720 <UARTEx_SetNbDataToProcess+0x94>)
 80186dc:	5c8a      	ldrb	r2, [r1, r2]
 80186de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80186e2:	7b3a      	ldrb	r2, [r7, #12]
 80186e4:	490f      	ldr	r1, [pc, #60]	; (8018724 <UARTEx_SetNbDataToProcess+0x98>)
 80186e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80186e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80186ec:	b29a      	uxth	r2, r3
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80186f4:	7bfb      	ldrb	r3, [r7, #15]
 80186f6:	7b7a      	ldrb	r2, [r7, #13]
 80186f8:	4909      	ldr	r1, [pc, #36]	; (8018720 <UARTEx_SetNbDataToProcess+0x94>)
 80186fa:	5c8a      	ldrb	r2, [r1, r2]
 80186fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8018700:	7b7a      	ldrb	r2, [r7, #13]
 8018702:	4908      	ldr	r1, [pc, #32]	; (8018724 <UARTEx_SetNbDataToProcess+0x98>)
 8018704:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018706:	fb93 f3f2 	sdiv	r3, r3, r2
 801870a:	b29a      	uxth	r2, r3
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8018712:	bf00      	nop
 8018714:	3714      	adds	r7, #20
 8018716:	46bd      	mov	sp, r7
 8018718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801871c:	4770      	bx	lr
 801871e:	bf00      	nop
 8018720:	0801c4f4 	.word	0x0801c4f4
 8018724:	0801c4fc 	.word	0x0801c4fc

08018728 <__NVIC_SetPriority>:
{
 8018728:	b480      	push	{r7}
 801872a:	b083      	sub	sp, #12
 801872c:	af00      	add	r7, sp, #0
 801872e:	4603      	mov	r3, r0
 8018730:	6039      	str	r1, [r7, #0]
 8018732:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8018734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018738:	2b00      	cmp	r3, #0
 801873a:	db0a      	blt.n	8018752 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801873c:	683b      	ldr	r3, [r7, #0]
 801873e:	b2da      	uxtb	r2, r3
 8018740:	490c      	ldr	r1, [pc, #48]	; (8018774 <__NVIC_SetPriority+0x4c>)
 8018742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018746:	0112      	lsls	r2, r2, #4
 8018748:	b2d2      	uxtb	r2, r2
 801874a:	440b      	add	r3, r1
 801874c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8018750:	e00a      	b.n	8018768 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018752:	683b      	ldr	r3, [r7, #0]
 8018754:	b2da      	uxtb	r2, r3
 8018756:	4908      	ldr	r1, [pc, #32]	; (8018778 <__NVIC_SetPriority+0x50>)
 8018758:	88fb      	ldrh	r3, [r7, #6]
 801875a:	f003 030f 	and.w	r3, r3, #15
 801875e:	3b04      	subs	r3, #4
 8018760:	0112      	lsls	r2, r2, #4
 8018762:	b2d2      	uxtb	r2, r2
 8018764:	440b      	add	r3, r1
 8018766:	761a      	strb	r2, [r3, #24]
}
 8018768:	bf00      	nop
 801876a:	370c      	adds	r7, #12
 801876c:	46bd      	mov	sp, r7
 801876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018772:	4770      	bx	lr
 8018774:	e000e100 	.word	0xe000e100
 8018778:	e000ed00 	.word	0xe000ed00

0801877c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801877c:	b580      	push	{r7, lr}
 801877e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8018780:	4b05      	ldr	r3, [pc, #20]	; (8018798 <SysTick_Handler+0x1c>)
 8018782:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8018784:	f002 fc8c 	bl	801b0a0 <xTaskGetSchedulerState>
 8018788:	4603      	mov	r3, r0
 801878a:	2b01      	cmp	r3, #1
 801878c:	d001      	beq.n	8018792 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801878e:	f003 faab 	bl	801bce8 <xPortSysTickHandler>
  }
}
 8018792:	bf00      	nop
 8018794:	bd80      	pop	{r7, pc}
 8018796:	bf00      	nop
 8018798:	e000e010 	.word	0xe000e010

0801879c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801879c:	b580      	push	{r7, lr}
 801879e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80187a0:	2100      	movs	r1, #0
 80187a2:	f06f 0004 	mvn.w	r0, #4
 80187a6:	f7ff ffbf 	bl	8018728 <__NVIC_SetPriority>
#endif
}
 80187aa:	bf00      	nop
 80187ac:	bd80      	pop	{r7, pc}
	...

080187b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80187b0:	b480      	push	{r7}
 80187b2:	b083      	sub	sp, #12
 80187b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80187b6:	f3ef 8305 	mrs	r3, IPSR
 80187ba:	603b      	str	r3, [r7, #0]
  return(result);
 80187bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d003      	beq.n	80187ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80187c2:	f06f 0305 	mvn.w	r3, #5
 80187c6:	607b      	str	r3, [r7, #4]
 80187c8:	e00c      	b.n	80187e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80187ca:	4b0a      	ldr	r3, [pc, #40]	; (80187f4 <osKernelInitialize+0x44>)
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d105      	bne.n	80187de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80187d2:	4b08      	ldr	r3, [pc, #32]	; (80187f4 <osKernelInitialize+0x44>)
 80187d4:	2201      	movs	r2, #1
 80187d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80187d8:	2300      	movs	r3, #0
 80187da:	607b      	str	r3, [r7, #4]
 80187dc:	e002      	b.n	80187e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80187de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80187e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80187e4:	687b      	ldr	r3, [r7, #4]
}
 80187e6:	4618      	mov	r0, r3
 80187e8:	370c      	adds	r7, #12
 80187ea:	46bd      	mov	sp, r7
 80187ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f0:	4770      	bx	lr
 80187f2:	bf00      	nop
 80187f4:	2400289c 	.word	0x2400289c

080187f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b082      	sub	sp, #8
 80187fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80187fe:	f3ef 8305 	mrs	r3, IPSR
 8018802:	603b      	str	r3, [r7, #0]
  return(result);
 8018804:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018806:	2b00      	cmp	r3, #0
 8018808:	d003      	beq.n	8018812 <osKernelStart+0x1a>
    stat = osErrorISR;
 801880a:	f06f 0305 	mvn.w	r3, #5
 801880e:	607b      	str	r3, [r7, #4]
 8018810:	e010      	b.n	8018834 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8018812:	4b0b      	ldr	r3, [pc, #44]	; (8018840 <osKernelStart+0x48>)
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	2b01      	cmp	r3, #1
 8018818:	d109      	bne.n	801882e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801881a:	f7ff ffbf 	bl	801879c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801881e:	4b08      	ldr	r3, [pc, #32]	; (8018840 <osKernelStart+0x48>)
 8018820:	2202      	movs	r2, #2
 8018822:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8018824:	f001 ff40 	bl	801a6a8 <vTaskStartScheduler>
      stat = osOK;
 8018828:	2300      	movs	r3, #0
 801882a:	607b      	str	r3, [r7, #4]
 801882c:	e002      	b.n	8018834 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801882e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018832:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8018834:	687b      	ldr	r3, [r7, #4]
}
 8018836:	4618      	mov	r0, r3
 8018838:	3708      	adds	r7, #8
 801883a:	46bd      	mov	sp, r7
 801883c:	bd80      	pop	{r7, pc}
 801883e:	bf00      	nop
 8018840:	2400289c 	.word	0x2400289c

08018844 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8018844:	b580      	push	{r7, lr}
 8018846:	b08e      	sub	sp, #56	; 0x38
 8018848:	af04      	add	r7, sp, #16
 801884a:	60f8      	str	r0, [r7, #12]
 801884c:	60b9      	str	r1, [r7, #8]
 801884e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8018850:	2300      	movs	r3, #0
 8018852:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018854:	f3ef 8305 	mrs	r3, IPSR
 8018858:	617b      	str	r3, [r7, #20]
  return(result);
 801885a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801885c:	2b00      	cmp	r3, #0
 801885e:	d17e      	bne.n	801895e <osThreadNew+0x11a>
 8018860:	68fb      	ldr	r3, [r7, #12]
 8018862:	2b00      	cmp	r3, #0
 8018864:	d07b      	beq.n	801895e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8018866:	2380      	movs	r3, #128	; 0x80
 8018868:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801886a:	2318      	movs	r3, #24
 801886c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801886e:	2300      	movs	r3, #0
 8018870:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8018872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018876:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	2b00      	cmp	r3, #0
 801887c:	d045      	beq.n	801890a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d002      	beq.n	801888c <osThreadNew+0x48>
        name = attr->name;
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	699b      	ldr	r3, [r3, #24]
 8018890:	2b00      	cmp	r3, #0
 8018892:	d002      	beq.n	801889a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	699b      	ldr	r3, [r3, #24]
 8018898:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801889a:	69fb      	ldr	r3, [r7, #28]
 801889c:	2b00      	cmp	r3, #0
 801889e:	d008      	beq.n	80188b2 <osThreadNew+0x6e>
 80188a0:	69fb      	ldr	r3, [r7, #28]
 80188a2:	2b38      	cmp	r3, #56	; 0x38
 80188a4:	d805      	bhi.n	80188b2 <osThreadNew+0x6e>
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	685b      	ldr	r3, [r3, #4]
 80188aa:	f003 0301 	and.w	r3, r3, #1
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d001      	beq.n	80188b6 <osThreadNew+0x72>
        return (NULL);
 80188b2:	2300      	movs	r3, #0
 80188b4:	e054      	b.n	8018960 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	695b      	ldr	r3, [r3, #20]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d003      	beq.n	80188c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	695b      	ldr	r3, [r3, #20]
 80188c2:	089b      	lsrs	r3, r3, #2
 80188c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	689b      	ldr	r3, [r3, #8]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d00e      	beq.n	80188ec <osThreadNew+0xa8>
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	68db      	ldr	r3, [r3, #12]
 80188d2:	2b5b      	cmp	r3, #91	; 0x5b
 80188d4:	d90a      	bls.n	80188ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d006      	beq.n	80188ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	695b      	ldr	r3, [r3, #20]
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d002      	beq.n	80188ec <osThreadNew+0xa8>
        mem = 1;
 80188e6:	2301      	movs	r3, #1
 80188e8:	61bb      	str	r3, [r7, #24]
 80188ea:	e010      	b.n	801890e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	689b      	ldr	r3, [r3, #8]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d10c      	bne.n	801890e <osThreadNew+0xca>
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	68db      	ldr	r3, [r3, #12]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d108      	bne.n	801890e <osThreadNew+0xca>
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	691b      	ldr	r3, [r3, #16]
 8018900:	2b00      	cmp	r3, #0
 8018902:	d104      	bne.n	801890e <osThreadNew+0xca>
          mem = 0;
 8018904:	2300      	movs	r3, #0
 8018906:	61bb      	str	r3, [r7, #24]
 8018908:	e001      	b.n	801890e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801890a:	2300      	movs	r3, #0
 801890c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801890e:	69bb      	ldr	r3, [r7, #24]
 8018910:	2b01      	cmp	r3, #1
 8018912:	d110      	bne.n	8018936 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8018918:	687a      	ldr	r2, [r7, #4]
 801891a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801891c:	9202      	str	r2, [sp, #8]
 801891e:	9301      	str	r3, [sp, #4]
 8018920:	69fb      	ldr	r3, [r7, #28]
 8018922:	9300      	str	r3, [sp, #0]
 8018924:	68bb      	ldr	r3, [r7, #8]
 8018926:	6a3a      	ldr	r2, [r7, #32]
 8018928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801892a:	68f8      	ldr	r0, [r7, #12]
 801892c:	f001 fbe0 	bl	801a0f0 <xTaskCreateStatic>
 8018930:	4603      	mov	r3, r0
 8018932:	613b      	str	r3, [r7, #16]
 8018934:	e013      	b.n	801895e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8018936:	69bb      	ldr	r3, [r7, #24]
 8018938:	2b00      	cmp	r3, #0
 801893a:	d110      	bne.n	801895e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801893c:	6a3b      	ldr	r3, [r7, #32]
 801893e:	b29a      	uxth	r2, r3
 8018940:	f107 0310 	add.w	r3, r7, #16
 8018944:	9301      	str	r3, [sp, #4]
 8018946:	69fb      	ldr	r3, [r7, #28]
 8018948:	9300      	str	r3, [sp, #0]
 801894a:	68bb      	ldr	r3, [r7, #8]
 801894c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801894e:	68f8      	ldr	r0, [r7, #12]
 8018950:	f001 fc2b 	bl	801a1aa <xTaskCreate>
 8018954:	4603      	mov	r3, r0
 8018956:	2b01      	cmp	r3, #1
 8018958:	d001      	beq.n	801895e <osThreadNew+0x11a>
            hTask = NULL;
 801895a:	2300      	movs	r3, #0
 801895c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801895e:	693b      	ldr	r3, [r7, #16]
}
 8018960:	4618      	mov	r0, r3
 8018962:	3728      	adds	r7, #40	; 0x28
 8018964:	46bd      	mov	sp, r7
 8018966:	bd80      	pop	{r7, pc}

08018968 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8018968:	b480      	push	{r7}
 801896a:	b083      	sub	sp, #12
 801896c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801896e:	f3ef 8305 	mrs	r3, IPSR
 8018972:	603b      	str	r3, [r7, #0]
  return(result);
 8018974:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018976:	2b00      	cmp	r3, #0
 8018978:	d003      	beq.n	8018982 <osThreadYield+0x1a>
    stat = osErrorISR;
 801897a:	f06f 0305 	mvn.w	r3, #5
 801897e:	607b      	str	r3, [r7, #4]
 8018980:	e009      	b.n	8018996 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8018982:	2300      	movs	r3, #0
 8018984:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8018986:	4b07      	ldr	r3, [pc, #28]	; (80189a4 <osThreadYield+0x3c>)
 8018988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801898c:	601a      	str	r2, [r3, #0]
 801898e:	f3bf 8f4f 	dsb	sy
 8018992:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8018996:	687b      	ldr	r3, [r7, #4]
}
 8018998:	4618      	mov	r0, r3
 801899a:	370c      	adds	r7, #12
 801899c:	46bd      	mov	sp, r7
 801899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189a2:	4770      	bx	lr
 80189a4:	e000ed04 	.word	0xe000ed04

080189a8 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b086      	sub	sp, #24
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80189b4:	f3ef 8305 	mrs	r3, IPSR
 80189b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80189ba:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d003      	beq.n	80189c8 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80189c0:	f06f 0305 	mvn.w	r3, #5
 80189c4:	617b      	str	r3, [r7, #20]
 80189c6:	e00b      	b.n	80189e0 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80189c8:	693b      	ldr	r3, [r7, #16]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d103      	bne.n	80189d6 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80189ce:	f06f 0303 	mvn.w	r3, #3
 80189d2:	617b      	str	r3, [r7, #20]
 80189d4:	e004      	b.n	80189e0 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80189d6:	2300      	movs	r3, #0
 80189d8:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80189da:	6938      	ldr	r0, [r7, #16]
 80189dc:	f001 fd5e 	bl	801a49c <vTaskSuspend>
  }

  return (stat);
 80189e0:	697b      	ldr	r3, [r7, #20]
}
 80189e2:	4618      	mov	r0, r3
 80189e4:	3718      	adds	r7, #24
 80189e6:	46bd      	mov	sp, r7
 80189e8:	bd80      	pop	{r7, pc}

080189ea <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80189ea:	b580      	push	{r7, lr}
 80189ec:	b086      	sub	sp, #24
 80189ee:	af00      	add	r7, sp, #0
 80189f0:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80189f6:	f3ef 8305 	mrs	r3, IPSR
 80189fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80189fc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	d003      	beq.n	8018a0a <osThreadResume+0x20>
    stat = osErrorISR;
 8018a02:	f06f 0305 	mvn.w	r3, #5
 8018a06:	617b      	str	r3, [r7, #20]
 8018a08:	e00b      	b.n	8018a22 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8018a0a:	693b      	ldr	r3, [r7, #16]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d103      	bne.n	8018a18 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8018a10:	f06f 0303 	mvn.w	r3, #3
 8018a14:	617b      	str	r3, [r7, #20]
 8018a16:	e004      	b.n	8018a22 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8018a18:	2300      	movs	r3, #0
 8018a1a:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8018a1c:	6938      	ldr	r0, [r7, #16]
 8018a1e:	f001 fde5 	bl	801a5ec <vTaskResume>
  }

  return (stat);
 8018a22:	697b      	ldr	r3, [r7, #20]
}
 8018a24:	4618      	mov	r0, r3
 8018a26:	3718      	adds	r7, #24
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	bd80      	pop	{r7, pc}

08018a2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b084      	sub	sp, #16
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018a34:	f3ef 8305 	mrs	r3, IPSR
 8018a38:	60bb      	str	r3, [r7, #8]
  return(result);
 8018a3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d003      	beq.n	8018a48 <osDelay+0x1c>
    stat = osErrorISR;
 8018a40:	f06f 0305 	mvn.w	r3, #5
 8018a44:	60fb      	str	r3, [r7, #12]
 8018a46:	e007      	b.n	8018a58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8018a48:	2300      	movs	r3, #0
 8018a4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d002      	beq.n	8018a58 <osDelay+0x2c>
      vTaskDelay(ticks);
 8018a52:	6878      	ldr	r0, [r7, #4]
 8018a54:	f001 fcee 	bl	801a434 <vTaskDelay>
    }
  }

  return (stat);
 8018a58:	68fb      	ldr	r3, [r7, #12]
}
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	3710      	adds	r7, #16
 8018a5e:	46bd      	mov	sp, r7
 8018a60:	bd80      	pop	{r7, pc}

08018a62 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8018a62:	b580      	push	{r7, lr}
 8018a64:	b086      	sub	sp, #24
 8018a66:	af00      	add	r7, sp, #0
 8018a68:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8018a6a:	2300      	movs	r3, #0
 8018a6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018a6e:	f3ef 8305 	mrs	r3, IPSR
 8018a72:	60fb      	str	r3, [r7, #12]
  return(result);
 8018a74:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d12d      	bne.n	8018ad6 <osEventFlagsNew+0x74>
    mem = -1;
 8018a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018a7e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d015      	beq.n	8018ab2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	689b      	ldr	r3, [r3, #8]
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d006      	beq.n	8018a9c <osEventFlagsNew+0x3a>
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	68db      	ldr	r3, [r3, #12]
 8018a92:	2b1f      	cmp	r3, #31
 8018a94:	d902      	bls.n	8018a9c <osEventFlagsNew+0x3a>
        mem = 1;
 8018a96:	2301      	movs	r3, #1
 8018a98:	613b      	str	r3, [r7, #16]
 8018a9a:	e00c      	b.n	8018ab6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	689b      	ldr	r3, [r3, #8]
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d108      	bne.n	8018ab6 <osEventFlagsNew+0x54>
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	68db      	ldr	r3, [r3, #12]
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d104      	bne.n	8018ab6 <osEventFlagsNew+0x54>
          mem = 0;
 8018aac:	2300      	movs	r3, #0
 8018aae:	613b      	str	r3, [r7, #16]
 8018ab0:	e001      	b.n	8018ab6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8018ab2:	2300      	movs	r3, #0
 8018ab4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8018ab6:	693b      	ldr	r3, [r7, #16]
 8018ab8:	2b01      	cmp	r3, #1
 8018aba:	d106      	bne.n	8018aca <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	689b      	ldr	r3, [r3, #8]
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	f000 fa4f 	bl	8018f64 <xEventGroupCreateStatic>
 8018ac6:	6178      	str	r0, [r7, #20]
 8018ac8:	e005      	b.n	8018ad6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8018aca:	693b      	ldr	r3, [r7, #16]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d102      	bne.n	8018ad6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8018ad0:	f000 fa7f 	bl	8018fd2 <xEventGroupCreate>
 8018ad4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8018ad6:	697b      	ldr	r3, [r7, #20]
}
 8018ad8:	4618      	mov	r0, r3
 8018ada:	3718      	adds	r7, #24
 8018adc:	46bd      	mov	sp, r7
 8018ade:	bd80      	pop	{r7, pc}

08018ae0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8018ae0:	b580      	push	{r7, lr}
 8018ae2:	b086      	sub	sp, #24
 8018ae4:	af00      	add	r7, sp, #0
 8018ae6:	6078      	str	r0, [r7, #4]
 8018ae8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8018aee:	693b      	ldr	r3, [r7, #16]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d004      	beq.n	8018afe <osEventFlagsSet+0x1e>
 8018af4:	683b      	ldr	r3, [r7, #0]
 8018af6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d003      	beq.n	8018b06 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8018afe:	f06f 0303 	mvn.w	r3, #3
 8018b02:	617b      	str	r3, [r7, #20]
 8018b04:	e028      	b.n	8018b58 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018b06:	f3ef 8305 	mrs	r3, IPSR
 8018b0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8018b0c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d01d      	beq.n	8018b4e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8018b12:	2300      	movs	r3, #0
 8018b14:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8018b16:	f107 0308 	add.w	r3, r7, #8
 8018b1a:	461a      	mov	r2, r3
 8018b1c:	6839      	ldr	r1, [r7, #0]
 8018b1e:	6938      	ldr	r0, [r7, #16]
 8018b20:	f000 fc78 	bl	8019414 <xEventGroupSetBitsFromISR>
 8018b24:	4603      	mov	r3, r0
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d103      	bne.n	8018b32 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8018b2a:	f06f 0302 	mvn.w	r3, #2
 8018b2e:	617b      	str	r3, [r7, #20]
 8018b30:	e012      	b.n	8018b58 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8018b32:	683b      	ldr	r3, [r7, #0]
 8018b34:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8018b36:	68bb      	ldr	r3, [r7, #8]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d00d      	beq.n	8018b58 <osEventFlagsSet+0x78>
 8018b3c:	4b09      	ldr	r3, [pc, #36]	; (8018b64 <osEventFlagsSet+0x84>)
 8018b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018b42:	601a      	str	r2, [r3, #0]
 8018b44:	f3bf 8f4f 	dsb	sy
 8018b48:	f3bf 8f6f 	isb	sy
 8018b4c:	e004      	b.n	8018b58 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8018b4e:	6839      	ldr	r1, [r7, #0]
 8018b50:	6938      	ldr	r0, [r7, #16]
 8018b52:	f000 fb97 	bl	8019284 <xEventGroupSetBits>
 8018b56:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8018b58:	697b      	ldr	r3, [r7, #20]
}
 8018b5a:	4618      	mov	r0, r3
 8018b5c:	3718      	adds	r7, #24
 8018b5e:	46bd      	mov	sp, r7
 8018b60:	bd80      	pop	{r7, pc}
 8018b62:	bf00      	nop
 8018b64:	e000ed04 	.word	0xe000ed04

08018b68 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8018b68:	b580      	push	{r7, lr}
 8018b6a:	b086      	sub	sp, #24
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	6078      	str	r0, [r7, #4]
 8018b70:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8018b76:	693b      	ldr	r3, [r7, #16]
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d004      	beq.n	8018b86 <osEventFlagsClear+0x1e>
 8018b7c:	683b      	ldr	r3, [r7, #0]
 8018b7e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d003      	beq.n	8018b8e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8018b86:	f06f 0303 	mvn.w	r3, #3
 8018b8a:	617b      	str	r3, [r7, #20]
 8018b8c:	e019      	b.n	8018bc2 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018b8e:	f3ef 8305 	mrs	r3, IPSR
 8018b92:	60fb      	str	r3, [r7, #12]
  return(result);
 8018b94:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d00e      	beq.n	8018bb8 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8018b9a:	6938      	ldr	r0, [r7, #16]
 8018b9c:	f000 fb4e 	bl	801923c <xEventGroupGetBitsFromISR>
 8018ba0:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8018ba2:	6839      	ldr	r1, [r7, #0]
 8018ba4:	6938      	ldr	r0, [r7, #16]
 8018ba6:	f000 fb35 	bl	8019214 <xEventGroupClearBitsFromISR>
 8018baa:	4603      	mov	r3, r0
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d108      	bne.n	8018bc2 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8018bb0:	f06f 0302 	mvn.w	r3, #2
 8018bb4:	617b      	str	r3, [r7, #20]
 8018bb6:	e004      	b.n	8018bc2 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8018bb8:	6839      	ldr	r1, [r7, #0]
 8018bba:	6938      	ldr	r0, [r7, #16]
 8018bbc:	f000 faf2 	bl	80191a4 <xEventGroupClearBits>
 8018bc0:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8018bc2:	697b      	ldr	r3, [r7, #20]
}
 8018bc4:	4618      	mov	r0, r3
 8018bc6:	3718      	adds	r7, #24
 8018bc8:	46bd      	mov	sp, r7
 8018bca:	bd80      	pop	{r7, pc}

08018bcc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8018bcc:	b580      	push	{r7, lr}
 8018bce:	b08c      	sub	sp, #48	; 0x30
 8018bd0:	af02      	add	r7, sp, #8
 8018bd2:	60f8      	str	r0, [r7, #12]
 8018bd4:	60b9      	str	r1, [r7, #8]
 8018bd6:	607a      	str	r2, [r7, #4]
 8018bd8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8018bde:	69bb      	ldr	r3, [r7, #24]
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	d004      	beq.n	8018bee <osEventFlagsWait+0x22>
 8018be4:	68bb      	ldr	r3, [r7, #8]
 8018be6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d003      	beq.n	8018bf6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8018bee:	f06f 0303 	mvn.w	r3, #3
 8018bf2:	61fb      	str	r3, [r7, #28]
 8018bf4:	e04b      	b.n	8018c8e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018bf6:	f3ef 8305 	mrs	r3, IPSR
 8018bfa:	617b      	str	r3, [r7, #20]
  return(result);
 8018bfc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d003      	beq.n	8018c0a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8018c02:	f06f 0305 	mvn.w	r3, #5
 8018c06:	61fb      	str	r3, [r7, #28]
 8018c08:	e041      	b.n	8018c8e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	f003 0301 	and.w	r3, r3, #1
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d002      	beq.n	8018c1a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8018c14:	2301      	movs	r3, #1
 8018c16:	627b      	str	r3, [r7, #36]	; 0x24
 8018c18:	e001      	b.n	8018c1e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8018c1a:	2300      	movs	r3, #0
 8018c1c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	f003 0302 	and.w	r3, r3, #2
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d002      	beq.n	8018c2e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8018c28:	2300      	movs	r3, #0
 8018c2a:	623b      	str	r3, [r7, #32]
 8018c2c:	e001      	b.n	8018c32 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8018c2e:	2301      	movs	r3, #1
 8018c30:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8018c32:	683b      	ldr	r3, [r7, #0]
 8018c34:	9300      	str	r3, [sp, #0]
 8018c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c38:	6a3a      	ldr	r2, [r7, #32]
 8018c3a:	68b9      	ldr	r1, [r7, #8]
 8018c3c:	69b8      	ldr	r0, [r7, #24]
 8018c3e:	f000 f9e3 	bl	8019008 <xEventGroupWaitBits>
 8018c42:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	f003 0301 	and.w	r3, r3, #1
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d010      	beq.n	8018c70 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8018c4e:	68ba      	ldr	r2, [r7, #8]
 8018c50:	69fb      	ldr	r3, [r7, #28]
 8018c52:	4013      	ands	r3, r2
 8018c54:	68ba      	ldr	r2, [r7, #8]
 8018c56:	429a      	cmp	r2, r3
 8018c58:	d019      	beq.n	8018c8e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8018c5a:	683b      	ldr	r3, [r7, #0]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d003      	beq.n	8018c68 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8018c60:	f06f 0301 	mvn.w	r3, #1
 8018c64:	61fb      	str	r3, [r7, #28]
 8018c66:	e012      	b.n	8018c8e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8018c68:	f06f 0302 	mvn.w	r3, #2
 8018c6c:	61fb      	str	r3, [r7, #28]
 8018c6e:	e00e      	b.n	8018c8e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8018c70:	68ba      	ldr	r2, [r7, #8]
 8018c72:	69fb      	ldr	r3, [r7, #28]
 8018c74:	4013      	ands	r3, r2
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d109      	bne.n	8018c8e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8018c7a:	683b      	ldr	r3, [r7, #0]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d003      	beq.n	8018c88 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8018c80:	f06f 0301 	mvn.w	r3, #1
 8018c84:	61fb      	str	r3, [r7, #28]
 8018c86:	e002      	b.n	8018c8e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8018c88:	f06f 0302 	mvn.w	r3, #2
 8018c8c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8018c8e:	69fb      	ldr	r3, [r7, #28]
}
 8018c90:	4618      	mov	r0, r3
 8018c92:	3728      	adds	r7, #40	; 0x28
 8018c94:	46bd      	mov	sp, r7
 8018c96:	bd80      	pop	{r7, pc}

08018c98 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8018c98:	b580      	push	{r7, lr}
 8018c9a:	b08a      	sub	sp, #40	; 0x28
 8018c9c:	af02      	add	r7, sp, #8
 8018c9e:	60f8      	str	r0, [r7, #12]
 8018ca0:	60b9      	str	r1, [r7, #8]
 8018ca2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018ca8:	f3ef 8305 	mrs	r3, IPSR
 8018cac:	613b      	str	r3, [r7, #16]
  return(result);
 8018cae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d15f      	bne.n	8018d74 <osMessageQueueNew+0xdc>
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d05c      	beq.n	8018d74 <osMessageQueueNew+0xdc>
 8018cba:	68bb      	ldr	r3, [r7, #8]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d059      	beq.n	8018d74 <osMessageQueueNew+0xdc>
    mem = -1;
 8018cc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018cc4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d029      	beq.n	8018d20 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	689b      	ldr	r3, [r3, #8]
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d012      	beq.n	8018cfa <osMessageQueueNew+0x62>
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	68db      	ldr	r3, [r3, #12]
 8018cd8:	2b4f      	cmp	r3, #79	; 0x4f
 8018cda:	d90e      	bls.n	8018cfa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d00a      	beq.n	8018cfa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	695a      	ldr	r2, [r3, #20]
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	68b9      	ldr	r1, [r7, #8]
 8018cec:	fb01 f303 	mul.w	r3, r1, r3
 8018cf0:	429a      	cmp	r2, r3
 8018cf2:	d302      	bcc.n	8018cfa <osMessageQueueNew+0x62>
        mem = 1;
 8018cf4:	2301      	movs	r3, #1
 8018cf6:	61bb      	str	r3, [r7, #24]
 8018cf8:	e014      	b.n	8018d24 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	689b      	ldr	r3, [r3, #8]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d110      	bne.n	8018d24 <osMessageQueueNew+0x8c>
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	68db      	ldr	r3, [r3, #12]
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d10c      	bne.n	8018d24 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d108      	bne.n	8018d24 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	695b      	ldr	r3, [r3, #20]
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d104      	bne.n	8018d24 <osMessageQueueNew+0x8c>
          mem = 0;
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	61bb      	str	r3, [r7, #24]
 8018d1e:	e001      	b.n	8018d24 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8018d20:	2300      	movs	r3, #0
 8018d22:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8018d24:	69bb      	ldr	r3, [r7, #24]
 8018d26:	2b01      	cmp	r3, #1
 8018d28:	d10b      	bne.n	8018d42 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	691a      	ldr	r2, [r3, #16]
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	689b      	ldr	r3, [r3, #8]
 8018d32:	2100      	movs	r1, #0
 8018d34:	9100      	str	r1, [sp, #0]
 8018d36:	68b9      	ldr	r1, [r7, #8]
 8018d38:	68f8      	ldr	r0, [r7, #12]
 8018d3a:	f000 fc9b 	bl	8019674 <xQueueGenericCreateStatic>
 8018d3e:	61f8      	str	r0, [r7, #28]
 8018d40:	e008      	b.n	8018d54 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8018d42:	69bb      	ldr	r3, [r7, #24]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d105      	bne.n	8018d54 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8018d48:	2200      	movs	r2, #0
 8018d4a:	68b9      	ldr	r1, [r7, #8]
 8018d4c:	68f8      	ldr	r0, [r7, #12]
 8018d4e:	f000 fd09 	bl	8019764 <xQueueGenericCreate>
 8018d52:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8018d54:	69fb      	ldr	r3, [r7, #28]
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d00c      	beq.n	8018d74 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d003      	beq.n	8018d68 <osMessageQueueNew+0xd0>
        name = attr->name;
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	617b      	str	r3, [r7, #20]
 8018d66:	e001      	b.n	8018d6c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8018d68:	2300      	movs	r3, #0
 8018d6a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8018d6c:	6979      	ldr	r1, [r7, #20]
 8018d6e:	69f8      	ldr	r0, [r7, #28]
 8018d70:	f001 f960 	bl	801a034 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8018d74:	69fb      	ldr	r3, [r7, #28]
}
 8018d76:	4618      	mov	r0, r3
 8018d78:	3720      	adds	r7, #32
 8018d7a:	46bd      	mov	sp, r7
 8018d7c:	bd80      	pop	{r7, pc}
	...

08018d80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b088      	sub	sp, #32
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	60f8      	str	r0, [r7, #12]
 8018d88:	60b9      	str	r1, [r7, #8]
 8018d8a:	603b      	str	r3, [r7, #0]
 8018d8c:	4613      	mov	r3, r2
 8018d8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8018d94:	2300      	movs	r3, #0
 8018d96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018d98:	f3ef 8305 	mrs	r3, IPSR
 8018d9c:	617b      	str	r3, [r7, #20]
  return(result);
 8018d9e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d028      	beq.n	8018df6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8018da4:	69bb      	ldr	r3, [r7, #24]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d005      	beq.n	8018db6 <osMessageQueuePut+0x36>
 8018daa:	68bb      	ldr	r3, [r7, #8]
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d002      	beq.n	8018db6 <osMessageQueuePut+0x36>
 8018db0:	683b      	ldr	r3, [r7, #0]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d003      	beq.n	8018dbe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8018db6:	f06f 0303 	mvn.w	r3, #3
 8018dba:	61fb      	str	r3, [r7, #28]
 8018dbc:	e038      	b.n	8018e30 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8018dbe:	2300      	movs	r3, #0
 8018dc0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8018dc2:	f107 0210 	add.w	r2, r7, #16
 8018dc6:	2300      	movs	r3, #0
 8018dc8:	68b9      	ldr	r1, [r7, #8]
 8018dca:	69b8      	ldr	r0, [r7, #24]
 8018dcc:	f000 fe26 	bl	8019a1c <xQueueGenericSendFromISR>
 8018dd0:	4603      	mov	r3, r0
 8018dd2:	2b01      	cmp	r3, #1
 8018dd4:	d003      	beq.n	8018dde <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8018dd6:	f06f 0302 	mvn.w	r3, #2
 8018dda:	61fb      	str	r3, [r7, #28]
 8018ddc:	e028      	b.n	8018e30 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8018dde:	693b      	ldr	r3, [r7, #16]
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d025      	beq.n	8018e30 <osMessageQueuePut+0xb0>
 8018de4:	4b15      	ldr	r3, [pc, #84]	; (8018e3c <osMessageQueuePut+0xbc>)
 8018de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018dea:	601a      	str	r2, [r3, #0]
 8018dec:	f3bf 8f4f 	dsb	sy
 8018df0:	f3bf 8f6f 	isb	sy
 8018df4:	e01c      	b.n	8018e30 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018df6:	69bb      	ldr	r3, [r7, #24]
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d002      	beq.n	8018e02 <osMessageQueuePut+0x82>
 8018dfc:	68bb      	ldr	r3, [r7, #8]
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d103      	bne.n	8018e0a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8018e02:	f06f 0303 	mvn.w	r3, #3
 8018e06:	61fb      	str	r3, [r7, #28]
 8018e08:	e012      	b.n	8018e30 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8018e0a:	2300      	movs	r3, #0
 8018e0c:	683a      	ldr	r2, [r7, #0]
 8018e0e:	68b9      	ldr	r1, [r7, #8]
 8018e10:	69b8      	ldr	r0, [r7, #24]
 8018e12:	f000 fd05 	bl	8019820 <xQueueGenericSend>
 8018e16:	4603      	mov	r3, r0
 8018e18:	2b01      	cmp	r3, #1
 8018e1a:	d009      	beq.n	8018e30 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8018e1c:	683b      	ldr	r3, [r7, #0]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d003      	beq.n	8018e2a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8018e22:	f06f 0301 	mvn.w	r3, #1
 8018e26:	61fb      	str	r3, [r7, #28]
 8018e28:	e002      	b.n	8018e30 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8018e2a:	f06f 0302 	mvn.w	r3, #2
 8018e2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8018e30:	69fb      	ldr	r3, [r7, #28]
}
 8018e32:	4618      	mov	r0, r3
 8018e34:	3720      	adds	r7, #32
 8018e36:	46bd      	mov	sp, r7
 8018e38:	bd80      	pop	{r7, pc}
 8018e3a:	bf00      	nop
 8018e3c:	e000ed04 	.word	0xe000ed04

08018e40 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8018e40:	b580      	push	{r7, lr}
 8018e42:	b088      	sub	sp, #32
 8018e44:	af00      	add	r7, sp, #0
 8018e46:	60f8      	str	r0, [r7, #12]
 8018e48:	60b9      	str	r1, [r7, #8]
 8018e4a:	607a      	str	r2, [r7, #4]
 8018e4c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8018e52:	2300      	movs	r3, #0
 8018e54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018e56:	f3ef 8305 	mrs	r3, IPSR
 8018e5a:	617b      	str	r3, [r7, #20]
  return(result);
 8018e5c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d028      	beq.n	8018eb4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8018e62:	69bb      	ldr	r3, [r7, #24]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d005      	beq.n	8018e74 <osMessageQueueGet+0x34>
 8018e68:	68bb      	ldr	r3, [r7, #8]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d002      	beq.n	8018e74 <osMessageQueueGet+0x34>
 8018e6e:	683b      	ldr	r3, [r7, #0]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d003      	beq.n	8018e7c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8018e74:	f06f 0303 	mvn.w	r3, #3
 8018e78:	61fb      	str	r3, [r7, #28]
 8018e7a:	e037      	b.n	8018eec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8018e7c:	2300      	movs	r3, #0
 8018e7e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8018e80:	f107 0310 	add.w	r3, r7, #16
 8018e84:	461a      	mov	r2, r3
 8018e86:	68b9      	ldr	r1, [r7, #8]
 8018e88:	69b8      	ldr	r0, [r7, #24]
 8018e8a:	f000 ff43 	bl	8019d14 <xQueueReceiveFromISR>
 8018e8e:	4603      	mov	r3, r0
 8018e90:	2b01      	cmp	r3, #1
 8018e92:	d003      	beq.n	8018e9c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8018e94:	f06f 0302 	mvn.w	r3, #2
 8018e98:	61fb      	str	r3, [r7, #28]
 8018e9a:	e027      	b.n	8018eec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8018e9c:	693b      	ldr	r3, [r7, #16]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d024      	beq.n	8018eec <osMessageQueueGet+0xac>
 8018ea2:	4b15      	ldr	r3, [pc, #84]	; (8018ef8 <osMessageQueueGet+0xb8>)
 8018ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ea8:	601a      	str	r2, [r3, #0]
 8018eaa:	f3bf 8f4f 	dsb	sy
 8018eae:	f3bf 8f6f 	isb	sy
 8018eb2:	e01b      	b.n	8018eec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8018eb4:	69bb      	ldr	r3, [r7, #24]
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d002      	beq.n	8018ec0 <osMessageQueueGet+0x80>
 8018eba:	68bb      	ldr	r3, [r7, #8]
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d103      	bne.n	8018ec8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8018ec0:	f06f 0303 	mvn.w	r3, #3
 8018ec4:	61fb      	str	r3, [r7, #28]
 8018ec6:	e011      	b.n	8018eec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8018ec8:	683a      	ldr	r2, [r7, #0]
 8018eca:	68b9      	ldr	r1, [r7, #8]
 8018ecc:	69b8      	ldr	r0, [r7, #24]
 8018ece:	f000 fe41 	bl	8019b54 <xQueueReceive>
 8018ed2:	4603      	mov	r3, r0
 8018ed4:	2b01      	cmp	r3, #1
 8018ed6:	d009      	beq.n	8018eec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8018ed8:	683b      	ldr	r3, [r7, #0]
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d003      	beq.n	8018ee6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8018ede:	f06f 0301 	mvn.w	r3, #1
 8018ee2:	61fb      	str	r3, [r7, #28]
 8018ee4:	e002      	b.n	8018eec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8018ee6:	f06f 0302 	mvn.w	r3, #2
 8018eea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8018eec:	69fb      	ldr	r3, [r7, #28]
}
 8018eee:	4618      	mov	r0, r3
 8018ef0:	3720      	adds	r7, #32
 8018ef2:	46bd      	mov	sp, r7
 8018ef4:	bd80      	pop	{r7, pc}
 8018ef6:	bf00      	nop
 8018ef8:	e000ed04 	.word	0xe000ed04

08018efc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8018efc:	b480      	push	{r7}
 8018efe:	b085      	sub	sp, #20
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	60f8      	str	r0, [r7, #12]
 8018f04:	60b9      	str	r1, [r7, #8]
 8018f06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	4a07      	ldr	r2, [pc, #28]	; (8018f28 <vApplicationGetIdleTaskMemory+0x2c>)
 8018f0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8018f0e:	68bb      	ldr	r3, [r7, #8]
 8018f10:	4a06      	ldr	r2, [pc, #24]	; (8018f2c <vApplicationGetIdleTaskMemory+0x30>)
 8018f12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	2280      	movs	r2, #128	; 0x80
 8018f18:	601a      	str	r2, [r3, #0]
}
 8018f1a:	bf00      	nop
 8018f1c:	3714      	adds	r7, #20
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f24:	4770      	bx	lr
 8018f26:	bf00      	nop
 8018f28:	240028a0 	.word	0x240028a0
 8018f2c:	240028fc 	.word	0x240028fc

08018f30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8018f30:	b480      	push	{r7}
 8018f32:	b085      	sub	sp, #20
 8018f34:	af00      	add	r7, sp, #0
 8018f36:	60f8      	str	r0, [r7, #12]
 8018f38:	60b9      	str	r1, [r7, #8]
 8018f3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8018f3c:	68fb      	ldr	r3, [r7, #12]
 8018f3e:	4a07      	ldr	r2, [pc, #28]	; (8018f5c <vApplicationGetTimerTaskMemory+0x2c>)
 8018f40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8018f42:	68bb      	ldr	r3, [r7, #8]
 8018f44:	4a06      	ldr	r2, [pc, #24]	; (8018f60 <vApplicationGetTimerTaskMemory+0x30>)
 8018f46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018f4e:	601a      	str	r2, [r3, #0]
}
 8018f50:	bf00      	nop
 8018f52:	3714      	adds	r7, #20
 8018f54:	46bd      	mov	sp, r7
 8018f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f5a:	4770      	bx	lr
 8018f5c:	24002afc 	.word	0x24002afc
 8018f60:	24002b58 	.word	0x24002b58

08018f64 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8018f64:	b580      	push	{r7, lr}
 8018f66:	b086      	sub	sp, #24
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d10a      	bne.n	8018f88 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8018f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f76:	f383 8811 	msr	BASEPRI, r3
 8018f7a:	f3bf 8f6f 	isb	sy
 8018f7e:	f3bf 8f4f 	dsb	sy
 8018f82:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8018f84:	bf00      	nop
 8018f86:	e7fe      	b.n	8018f86 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8018f88:	2320      	movs	r3, #32
 8018f8a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8018f8c:	68bb      	ldr	r3, [r7, #8]
 8018f8e:	2b20      	cmp	r3, #32
 8018f90:	d00a      	beq.n	8018fa8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8018f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f96:	f383 8811 	msr	BASEPRI, r3
 8018f9a:	f3bf 8f6f 	isb	sy
 8018f9e:	f3bf 8f4f 	dsb	sy
 8018fa2:	60fb      	str	r3, [r7, #12]
}
 8018fa4:	bf00      	nop
 8018fa6:	e7fe      	b.n	8018fa6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8018fac:	697b      	ldr	r3, [r7, #20]
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d00a      	beq.n	8018fc8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8018fb2:	697b      	ldr	r3, [r7, #20]
 8018fb4:	2200      	movs	r2, #0
 8018fb6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8018fb8:	697b      	ldr	r3, [r7, #20]
 8018fba:	3304      	adds	r3, #4
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	f000 fa3d 	bl	801943c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8018fc2:	697b      	ldr	r3, [r7, #20]
 8018fc4:	2201      	movs	r2, #1
 8018fc6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8018fc8:	697b      	ldr	r3, [r7, #20]
	}
 8018fca:	4618      	mov	r0, r3
 8018fcc:	3718      	adds	r7, #24
 8018fce:	46bd      	mov	sp, r7
 8018fd0:	bd80      	pop	{r7, pc}

08018fd2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8018fd2:	b580      	push	{r7, lr}
 8018fd4:	b082      	sub	sp, #8
 8018fd6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8018fd8:	2020      	movs	r0, #32
 8018fda:	f002 ff15 	bl	801be08 <pvPortMalloc>
 8018fde:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d00a      	beq.n	8018ffc <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	2200      	movs	r2, #0
 8018fea:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	3304      	adds	r3, #4
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	f000 fa23 	bl	801943c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8018ffc:	687b      	ldr	r3, [r7, #4]
	}
 8018ffe:	4618      	mov	r0, r3
 8019000:	3708      	adds	r7, #8
 8019002:	46bd      	mov	sp, r7
 8019004:	bd80      	pop	{r7, pc}
	...

08019008 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8019008:	b580      	push	{r7, lr}
 801900a:	b090      	sub	sp, #64	; 0x40
 801900c:	af00      	add	r7, sp, #0
 801900e:	60f8      	str	r0, [r7, #12]
 8019010:	60b9      	str	r1, [r7, #8]
 8019012:	607a      	str	r2, [r7, #4]
 8019014:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801901a:	2300      	movs	r3, #0
 801901c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801901e:	2300      	movs	r3, #0
 8019020:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	2b00      	cmp	r3, #0
 8019026:	d10a      	bne.n	801903e <xEventGroupWaitBits+0x36>
	__asm volatile
 8019028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801902c:	f383 8811 	msr	BASEPRI, r3
 8019030:	f3bf 8f6f 	isb	sy
 8019034:	f3bf 8f4f 	dsb	sy
 8019038:	623b      	str	r3, [r7, #32]
}
 801903a:	bf00      	nop
 801903c:	e7fe      	b.n	801903c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801903e:	68bb      	ldr	r3, [r7, #8]
 8019040:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8019044:	2b00      	cmp	r3, #0
 8019046:	d00a      	beq.n	801905e <xEventGroupWaitBits+0x56>
	__asm volatile
 8019048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801904c:	f383 8811 	msr	BASEPRI, r3
 8019050:	f3bf 8f6f 	isb	sy
 8019054:	f3bf 8f4f 	dsb	sy
 8019058:	61fb      	str	r3, [r7, #28]
}
 801905a:	bf00      	nop
 801905c:	e7fe      	b.n	801905c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801905e:	68bb      	ldr	r3, [r7, #8]
 8019060:	2b00      	cmp	r3, #0
 8019062:	d10a      	bne.n	801907a <xEventGroupWaitBits+0x72>
	__asm volatile
 8019064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019068:	f383 8811 	msr	BASEPRI, r3
 801906c:	f3bf 8f6f 	isb	sy
 8019070:	f3bf 8f4f 	dsb	sy
 8019074:	61bb      	str	r3, [r7, #24]
}
 8019076:	bf00      	nop
 8019078:	e7fe      	b.n	8019078 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801907a:	f002 f811 	bl	801b0a0 <xTaskGetSchedulerState>
 801907e:	4603      	mov	r3, r0
 8019080:	2b00      	cmp	r3, #0
 8019082:	d102      	bne.n	801908a <xEventGroupWaitBits+0x82>
 8019084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019086:	2b00      	cmp	r3, #0
 8019088:	d101      	bne.n	801908e <xEventGroupWaitBits+0x86>
 801908a:	2301      	movs	r3, #1
 801908c:	e000      	b.n	8019090 <xEventGroupWaitBits+0x88>
 801908e:	2300      	movs	r3, #0
 8019090:	2b00      	cmp	r3, #0
 8019092:	d10a      	bne.n	80190aa <xEventGroupWaitBits+0xa2>
	__asm volatile
 8019094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019098:	f383 8811 	msr	BASEPRI, r3
 801909c:	f3bf 8f6f 	isb	sy
 80190a0:	f3bf 8f4f 	dsb	sy
 80190a4:	617b      	str	r3, [r7, #20]
}
 80190a6:	bf00      	nop
 80190a8:	e7fe      	b.n	80190a8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80190aa:	f001 fb63 	bl	801a774 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80190ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80190b4:	683a      	ldr	r2, [r7, #0]
 80190b6:	68b9      	ldr	r1, [r7, #8]
 80190b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80190ba:	f000 f988 	bl	80193ce <prvTestWaitCondition>
 80190be:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80190c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d00e      	beq.n	80190e4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80190c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80190ca:	2300      	movs	r3, #0
 80190cc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d028      	beq.n	8019126 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80190d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190d6:	681a      	ldr	r2, [r3, #0]
 80190d8:	68bb      	ldr	r3, [r7, #8]
 80190da:	43db      	mvns	r3, r3
 80190dc:	401a      	ands	r2, r3
 80190de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80190e0:	601a      	str	r2, [r3, #0]
 80190e2:	e020      	b.n	8019126 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80190e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d104      	bne.n	80190f4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80190ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ec:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80190ee:	2301      	movs	r3, #1
 80190f0:	633b      	str	r3, [r7, #48]	; 0x30
 80190f2:	e018      	b.n	8019126 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	d003      	beq.n	8019102 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80190fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8019100:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8019102:	683b      	ldr	r3, [r7, #0]
 8019104:	2b00      	cmp	r3, #0
 8019106:	d003      	beq.n	8019110 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8019108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801910a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801910e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8019110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019112:	1d18      	adds	r0, r3, #4
 8019114:	68ba      	ldr	r2, [r7, #8]
 8019116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019118:	4313      	orrs	r3, r2
 801911a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801911c:	4619      	mov	r1, r3
 801911e:	f001 fd37 	bl	801ab90 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8019122:	2300      	movs	r3, #0
 8019124:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8019126:	f001 fb33 	bl	801a790 <xTaskResumeAll>
 801912a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 801912c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801912e:	2b00      	cmp	r3, #0
 8019130:	d031      	beq.n	8019196 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8019132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019134:	2b00      	cmp	r3, #0
 8019136:	d107      	bne.n	8019148 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8019138:	4b19      	ldr	r3, [pc, #100]	; (80191a0 <xEventGroupWaitBits+0x198>)
 801913a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801913e:	601a      	str	r2, [r3, #0]
 8019140:	f3bf 8f4f 	dsb	sy
 8019144:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8019148:	f002 f836 	bl	801b1b8 <uxTaskResetEventItemValue>
 801914c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801914e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019154:	2b00      	cmp	r3, #0
 8019156:	d11a      	bne.n	801918e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8019158:	f002 fd34 	bl	801bbc4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 801915c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8019162:	683a      	ldr	r2, [r7, #0]
 8019164:	68b9      	ldr	r1, [r7, #8]
 8019166:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8019168:	f000 f931 	bl	80193ce <prvTestWaitCondition>
 801916c:	4603      	mov	r3, r0
 801916e:	2b00      	cmp	r3, #0
 8019170:	d009      	beq.n	8019186 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	2b00      	cmp	r3, #0
 8019176:	d006      	beq.n	8019186 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8019178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801917a:	681a      	ldr	r2, [r3, #0]
 801917c:	68bb      	ldr	r3, [r7, #8]
 801917e:	43db      	mvns	r3, r3
 8019180:	401a      	ands	r2, r3
 8019182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019184:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8019186:	2301      	movs	r3, #1
 8019188:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801918a:	f002 fd4b 	bl	801bc24 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801918e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019190:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8019194:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8019196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8019198:	4618      	mov	r0, r3
 801919a:	3740      	adds	r7, #64	; 0x40
 801919c:	46bd      	mov	sp, r7
 801919e:	bd80      	pop	{r7, pc}
 80191a0:	e000ed04 	.word	0xe000ed04

080191a4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80191a4:	b580      	push	{r7, lr}
 80191a6:	b086      	sub	sp, #24
 80191a8:	af00      	add	r7, sp, #0
 80191aa:	6078      	str	r0, [r7, #4]
 80191ac:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d10a      	bne.n	80191ce <xEventGroupClearBits+0x2a>
	__asm volatile
 80191b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191bc:	f383 8811 	msr	BASEPRI, r3
 80191c0:	f3bf 8f6f 	isb	sy
 80191c4:	f3bf 8f4f 	dsb	sy
 80191c8:	60fb      	str	r3, [r7, #12]
}
 80191ca:	bf00      	nop
 80191cc:	e7fe      	b.n	80191cc <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80191ce:	683b      	ldr	r3, [r7, #0]
 80191d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	d00a      	beq.n	80191ee <xEventGroupClearBits+0x4a>
	__asm volatile
 80191d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191dc:	f383 8811 	msr	BASEPRI, r3
 80191e0:	f3bf 8f6f 	isb	sy
 80191e4:	f3bf 8f4f 	dsb	sy
 80191e8:	60bb      	str	r3, [r7, #8]
}
 80191ea:	bf00      	nop
 80191ec:	e7fe      	b.n	80191ec <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80191ee:	f002 fce9 	bl	801bbc4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80191f2:	697b      	ldr	r3, [r7, #20]
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80191f8:	697b      	ldr	r3, [r7, #20]
 80191fa:	681a      	ldr	r2, [r3, #0]
 80191fc:	683b      	ldr	r3, [r7, #0]
 80191fe:	43db      	mvns	r3, r3
 8019200:	401a      	ands	r2, r3
 8019202:	697b      	ldr	r3, [r7, #20]
 8019204:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8019206:	f002 fd0d 	bl	801bc24 <vPortExitCritical>

	return uxReturn;
 801920a:	693b      	ldr	r3, [r7, #16]
}
 801920c:	4618      	mov	r0, r3
 801920e:	3718      	adds	r7, #24
 8019210:	46bd      	mov	sp, r7
 8019212:	bd80      	pop	{r7, pc}

08019214 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8019214:	b580      	push	{r7, lr}
 8019216:	b084      	sub	sp, #16
 8019218:	af00      	add	r7, sp, #0
 801921a:	6078      	str	r0, [r7, #4]
 801921c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801921e:	2300      	movs	r3, #0
 8019220:	683a      	ldr	r2, [r7, #0]
 8019222:	6879      	ldr	r1, [r7, #4]
 8019224:	4804      	ldr	r0, [pc, #16]	; (8019238 <xEventGroupClearBitsFromISR+0x24>)
 8019226:	f002 fb81 	bl	801b92c <xTimerPendFunctionCallFromISR>
 801922a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 801922c:	68fb      	ldr	r3, [r7, #12]
	}
 801922e:	4618      	mov	r0, r3
 8019230:	3710      	adds	r7, #16
 8019232:	46bd      	mov	sp, r7
 8019234:	bd80      	pop	{r7, pc}
 8019236:	bf00      	nop
 8019238:	080193b5 	.word	0x080193b5

0801923c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 801923c:	b480      	push	{r7}
 801923e:	b089      	sub	sp, #36	; 0x24
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8019248:	f3ef 8211 	mrs	r2, BASEPRI
 801924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019250:	f383 8811 	msr	BASEPRI, r3
 8019254:	f3bf 8f6f 	isb	sy
 8019258:	f3bf 8f4f 	dsb	sy
 801925c:	60fa      	str	r2, [r7, #12]
 801925e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8019260:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019262:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8019264:	69fb      	ldr	r3, [r7, #28]
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	617b      	str	r3, [r7, #20]
 801926a:	69bb      	ldr	r3, [r7, #24]
 801926c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801926e:	693b      	ldr	r3, [r7, #16]
 8019270:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8019274:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8019276:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8019278:	4618      	mov	r0, r3
 801927a:	3724      	adds	r7, #36	; 0x24
 801927c:	46bd      	mov	sp, r7
 801927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019282:	4770      	bx	lr

08019284 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8019284:	b580      	push	{r7, lr}
 8019286:	b08e      	sub	sp, #56	; 0x38
 8019288:	af00      	add	r7, sp, #0
 801928a:	6078      	str	r0, [r7, #4]
 801928c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801928e:	2300      	movs	r3, #0
 8019290:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8019296:	2300      	movs	r3, #0
 8019298:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d10a      	bne.n	80192b6 <xEventGroupSetBits+0x32>
	__asm volatile
 80192a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192a4:	f383 8811 	msr	BASEPRI, r3
 80192a8:	f3bf 8f6f 	isb	sy
 80192ac:	f3bf 8f4f 	dsb	sy
 80192b0:	613b      	str	r3, [r7, #16]
}
 80192b2:	bf00      	nop
 80192b4:	e7fe      	b.n	80192b4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80192b6:	683b      	ldr	r3, [r7, #0]
 80192b8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d00a      	beq.n	80192d6 <xEventGroupSetBits+0x52>
	__asm volatile
 80192c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192c4:	f383 8811 	msr	BASEPRI, r3
 80192c8:	f3bf 8f6f 	isb	sy
 80192cc:	f3bf 8f4f 	dsb	sy
 80192d0:	60fb      	str	r3, [r7, #12]
}
 80192d2:	bf00      	nop
 80192d4:	e7fe      	b.n	80192d4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80192d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192d8:	3304      	adds	r3, #4
 80192da:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80192dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192de:	3308      	adds	r3, #8
 80192e0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80192e2:	f001 fa47 	bl	801a774 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80192e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192e8:	68db      	ldr	r3, [r3, #12]
 80192ea:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80192ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192ee:	681a      	ldr	r2, [r3, #0]
 80192f0:	683b      	ldr	r3, [r7, #0]
 80192f2:	431a      	orrs	r2, r3
 80192f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192f6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80192f8:	e03c      	b.n	8019374 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80192fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80192fc:	685b      	ldr	r3, [r3, #4]
 80192fe:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8019300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8019306:	2300      	movs	r3, #0
 8019308:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801930a:	69bb      	ldr	r3, [r7, #24]
 801930c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8019310:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8019312:	69bb      	ldr	r3, [r7, #24]
 8019314:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8019318:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801931a:	697b      	ldr	r3, [r7, #20]
 801931c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8019320:	2b00      	cmp	r3, #0
 8019322:	d108      	bne.n	8019336 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8019324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019326:	681a      	ldr	r2, [r3, #0]
 8019328:	69bb      	ldr	r3, [r7, #24]
 801932a:	4013      	ands	r3, r2
 801932c:	2b00      	cmp	r3, #0
 801932e:	d00b      	beq.n	8019348 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8019330:	2301      	movs	r3, #1
 8019332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019334:	e008      	b.n	8019348 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8019336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019338:	681a      	ldr	r2, [r3, #0]
 801933a:	69bb      	ldr	r3, [r7, #24]
 801933c:	4013      	ands	r3, r2
 801933e:	69ba      	ldr	r2, [r7, #24]
 8019340:	429a      	cmp	r2, r3
 8019342:	d101      	bne.n	8019348 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8019344:	2301      	movs	r3, #1
 8019346:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8019348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801934a:	2b00      	cmp	r3, #0
 801934c:	d010      	beq.n	8019370 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801934e:	697b      	ldr	r3, [r7, #20]
 8019350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019354:	2b00      	cmp	r3, #0
 8019356:	d003      	beq.n	8019360 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8019358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801935a:	69bb      	ldr	r3, [r7, #24]
 801935c:	4313      	orrs	r3, r2
 801935e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8019360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8019368:	4619      	mov	r1, r3
 801936a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801936c:	f001 fcdc 	bl	801ad28 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8019370:	69fb      	ldr	r3, [r7, #28]
 8019372:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8019374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019376:	6a3b      	ldr	r3, [r7, #32]
 8019378:	429a      	cmp	r2, r3
 801937a:	d1be      	bne.n	80192fa <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801937e:	681a      	ldr	r2, [r3, #0]
 8019380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019382:	43db      	mvns	r3, r3
 8019384:	401a      	ands	r2, r3
 8019386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019388:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801938a:	f001 fa01 	bl	801a790 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801938e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019390:	681b      	ldr	r3, [r3, #0]
}
 8019392:	4618      	mov	r0, r3
 8019394:	3738      	adds	r7, #56	; 0x38
 8019396:	46bd      	mov	sp, r7
 8019398:	bd80      	pop	{r7, pc}

0801939a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801939a:	b580      	push	{r7, lr}
 801939c:	b082      	sub	sp, #8
 801939e:	af00      	add	r7, sp, #0
 80193a0:	6078      	str	r0, [r7, #4]
 80193a2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80193a4:	6839      	ldr	r1, [r7, #0]
 80193a6:	6878      	ldr	r0, [r7, #4]
 80193a8:	f7ff ff6c 	bl	8019284 <xEventGroupSetBits>
}
 80193ac:	bf00      	nop
 80193ae:	3708      	adds	r7, #8
 80193b0:	46bd      	mov	sp, r7
 80193b2:	bd80      	pop	{r7, pc}

080193b4 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80193b4:	b580      	push	{r7, lr}
 80193b6:	b082      	sub	sp, #8
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	6078      	str	r0, [r7, #4]
 80193bc:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80193be:	6839      	ldr	r1, [r7, #0]
 80193c0:	6878      	ldr	r0, [r7, #4]
 80193c2:	f7ff feef 	bl	80191a4 <xEventGroupClearBits>
}
 80193c6:	bf00      	nop
 80193c8:	3708      	adds	r7, #8
 80193ca:	46bd      	mov	sp, r7
 80193cc:	bd80      	pop	{r7, pc}

080193ce <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80193ce:	b480      	push	{r7}
 80193d0:	b087      	sub	sp, #28
 80193d2:	af00      	add	r7, sp, #0
 80193d4:	60f8      	str	r0, [r7, #12]
 80193d6:	60b9      	str	r1, [r7, #8]
 80193d8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80193da:	2300      	movs	r3, #0
 80193dc:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d107      	bne.n	80193f4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80193e4:	68fa      	ldr	r2, [r7, #12]
 80193e6:	68bb      	ldr	r3, [r7, #8]
 80193e8:	4013      	ands	r3, r2
 80193ea:	2b00      	cmp	r3, #0
 80193ec:	d00a      	beq.n	8019404 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80193ee:	2301      	movs	r3, #1
 80193f0:	617b      	str	r3, [r7, #20]
 80193f2:	e007      	b.n	8019404 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80193f4:	68fa      	ldr	r2, [r7, #12]
 80193f6:	68bb      	ldr	r3, [r7, #8]
 80193f8:	4013      	ands	r3, r2
 80193fa:	68ba      	ldr	r2, [r7, #8]
 80193fc:	429a      	cmp	r2, r3
 80193fe:	d101      	bne.n	8019404 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8019400:	2301      	movs	r3, #1
 8019402:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8019404:	697b      	ldr	r3, [r7, #20]
}
 8019406:	4618      	mov	r0, r3
 8019408:	371c      	adds	r7, #28
 801940a:	46bd      	mov	sp, r7
 801940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019410:	4770      	bx	lr
	...

08019414 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019414:	b580      	push	{r7, lr}
 8019416:	b086      	sub	sp, #24
 8019418:	af00      	add	r7, sp, #0
 801941a:	60f8      	str	r0, [r7, #12]
 801941c:	60b9      	str	r1, [r7, #8]
 801941e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	68ba      	ldr	r2, [r7, #8]
 8019424:	68f9      	ldr	r1, [r7, #12]
 8019426:	4804      	ldr	r0, [pc, #16]	; (8019438 <xEventGroupSetBitsFromISR+0x24>)
 8019428:	f002 fa80 	bl	801b92c <xTimerPendFunctionCallFromISR>
 801942c:	6178      	str	r0, [r7, #20]

		return xReturn;
 801942e:	697b      	ldr	r3, [r7, #20]
	}
 8019430:	4618      	mov	r0, r3
 8019432:	3718      	adds	r7, #24
 8019434:	46bd      	mov	sp, r7
 8019436:	bd80      	pop	{r7, pc}
 8019438:	0801939b 	.word	0x0801939b

0801943c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801943c:	b480      	push	{r7}
 801943e:	b083      	sub	sp, #12
 8019440:	af00      	add	r7, sp, #0
 8019442:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	f103 0208 	add.w	r2, r3, #8
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019454:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	f103 0208 	add.w	r2, r3, #8
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	f103 0208 	add.w	r2, r3, #8
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	2200      	movs	r2, #0
 801946e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8019470:	bf00      	nop
 8019472:	370c      	adds	r7, #12
 8019474:	46bd      	mov	sp, r7
 8019476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801947a:	4770      	bx	lr

0801947c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801947c:	b480      	push	{r7}
 801947e:	b083      	sub	sp, #12
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	2200      	movs	r2, #0
 8019488:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801948a:	bf00      	nop
 801948c:	370c      	adds	r7, #12
 801948e:	46bd      	mov	sp, r7
 8019490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019494:	4770      	bx	lr

08019496 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8019496:	b480      	push	{r7}
 8019498:	b085      	sub	sp, #20
 801949a:	af00      	add	r7, sp, #0
 801949c:	6078      	str	r0, [r7, #4]
 801949e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	685b      	ldr	r3, [r3, #4]
 80194a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80194a6:	683b      	ldr	r3, [r7, #0]
 80194a8:	68fa      	ldr	r2, [r7, #12]
 80194aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	689a      	ldr	r2, [r3, #8]
 80194b0:	683b      	ldr	r3, [r7, #0]
 80194b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	689b      	ldr	r3, [r3, #8]
 80194b8:	683a      	ldr	r2, [r7, #0]
 80194ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80194bc:	68fb      	ldr	r3, [r7, #12]
 80194be:	683a      	ldr	r2, [r7, #0]
 80194c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80194c2:	683b      	ldr	r3, [r7, #0]
 80194c4:	687a      	ldr	r2, [r7, #4]
 80194c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	1c5a      	adds	r2, r3, #1
 80194ce:	687b      	ldr	r3, [r7, #4]
 80194d0:	601a      	str	r2, [r3, #0]
}
 80194d2:	bf00      	nop
 80194d4:	3714      	adds	r7, #20
 80194d6:	46bd      	mov	sp, r7
 80194d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194dc:	4770      	bx	lr

080194de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80194de:	b480      	push	{r7}
 80194e0:	b085      	sub	sp, #20
 80194e2:	af00      	add	r7, sp, #0
 80194e4:	6078      	str	r0, [r7, #4]
 80194e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80194e8:	683b      	ldr	r3, [r7, #0]
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80194ee:	68bb      	ldr	r3, [r7, #8]
 80194f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80194f4:	d103      	bne.n	80194fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	691b      	ldr	r3, [r3, #16]
 80194fa:	60fb      	str	r3, [r7, #12]
 80194fc:	e00c      	b.n	8019518 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	3308      	adds	r3, #8
 8019502:	60fb      	str	r3, [r7, #12]
 8019504:	e002      	b.n	801950c <vListInsert+0x2e>
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	685b      	ldr	r3, [r3, #4]
 801950a:	60fb      	str	r3, [r7, #12]
 801950c:	68fb      	ldr	r3, [r7, #12]
 801950e:	685b      	ldr	r3, [r3, #4]
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	68ba      	ldr	r2, [r7, #8]
 8019514:	429a      	cmp	r2, r3
 8019516:	d2f6      	bcs.n	8019506 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8019518:	68fb      	ldr	r3, [r7, #12]
 801951a:	685a      	ldr	r2, [r3, #4]
 801951c:	683b      	ldr	r3, [r7, #0]
 801951e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8019520:	683b      	ldr	r3, [r7, #0]
 8019522:	685b      	ldr	r3, [r3, #4]
 8019524:	683a      	ldr	r2, [r7, #0]
 8019526:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8019528:	683b      	ldr	r3, [r7, #0]
 801952a:	68fa      	ldr	r2, [r7, #12]
 801952c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801952e:	68fb      	ldr	r3, [r7, #12]
 8019530:	683a      	ldr	r2, [r7, #0]
 8019532:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8019534:	683b      	ldr	r3, [r7, #0]
 8019536:	687a      	ldr	r2, [r7, #4]
 8019538:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	1c5a      	adds	r2, r3, #1
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	601a      	str	r2, [r3, #0]
}
 8019544:	bf00      	nop
 8019546:	3714      	adds	r7, #20
 8019548:	46bd      	mov	sp, r7
 801954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801954e:	4770      	bx	lr

08019550 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8019550:	b480      	push	{r7}
 8019552:	b085      	sub	sp, #20
 8019554:	af00      	add	r7, sp, #0
 8019556:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	691b      	ldr	r3, [r3, #16]
 801955c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	685b      	ldr	r3, [r3, #4]
 8019562:	687a      	ldr	r2, [r7, #4]
 8019564:	6892      	ldr	r2, [r2, #8]
 8019566:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	689b      	ldr	r3, [r3, #8]
 801956c:	687a      	ldr	r2, [r7, #4]
 801956e:	6852      	ldr	r2, [r2, #4]
 8019570:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8019572:	68fb      	ldr	r3, [r7, #12]
 8019574:	685b      	ldr	r3, [r3, #4]
 8019576:	687a      	ldr	r2, [r7, #4]
 8019578:	429a      	cmp	r2, r3
 801957a:	d103      	bne.n	8019584 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	689a      	ldr	r2, [r3, #8]
 8019580:	68fb      	ldr	r3, [r7, #12]
 8019582:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	2200      	movs	r2, #0
 8019588:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	1e5a      	subs	r2, r3, #1
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	681b      	ldr	r3, [r3, #0]
}
 8019598:	4618      	mov	r0, r3
 801959a:	3714      	adds	r7, #20
 801959c:	46bd      	mov	sp, r7
 801959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195a2:	4770      	bx	lr

080195a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80195a4:	b580      	push	{r7, lr}
 80195a6:	b084      	sub	sp, #16
 80195a8:	af00      	add	r7, sp, #0
 80195aa:	6078      	str	r0, [r7, #4]
 80195ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d10a      	bne.n	80195ce <xQueueGenericReset+0x2a>
	__asm volatile
 80195b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195bc:	f383 8811 	msr	BASEPRI, r3
 80195c0:	f3bf 8f6f 	isb	sy
 80195c4:	f3bf 8f4f 	dsb	sy
 80195c8:	60bb      	str	r3, [r7, #8]
}
 80195ca:	bf00      	nop
 80195cc:	e7fe      	b.n	80195cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80195ce:	f002 faf9 	bl	801bbc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80195d2:	68fb      	ldr	r3, [r7, #12]
 80195d4:	681a      	ldr	r2, [r3, #0]
 80195d6:	68fb      	ldr	r3, [r7, #12]
 80195d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80195da:	68f9      	ldr	r1, [r7, #12]
 80195dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80195de:	fb01 f303 	mul.w	r3, r1, r3
 80195e2:	441a      	add	r2, r3
 80195e4:	68fb      	ldr	r3, [r7, #12]
 80195e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	2200      	movs	r2, #0
 80195ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	681a      	ldr	r2, [r3, #0]
 80195f2:	68fb      	ldr	r3, [r7, #12]
 80195f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	681a      	ldr	r2, [r3, #0]
 80195fa:	68fb      	ldr	r3, [r7, #12]
 80195fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80195fe:	3b01      	subs	r3, #1
 8019600:	68f9      	ldr	r1, [r7, #12]
 8019602:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8019604:	fb01 f303 	mul.w	r3, r1, r3
 8019608:	441a      	add	r2, r3
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	22ff      	movs	r2, #255	; 0xff
 8019612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	22ff      	movs	r2, #255	; 0xff
 801961a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801961e:	683b      	ldr	r3, [r7, #0]
 8019620:	2b00      	cmp	r3, #0
 8019622:	d114      	bne.n	801964e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	691b      	ldr	r3, [r3, #16]
 8019628:	2b00      	cmp	r3, #0
 801962a:	d01a      	beq.n	8019662 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801962c:	68fb      	ldr	r3, [r7, #12]
 801962e:	3310      	adds	r3, #16
 8019630:	4618      	mov	r0, r3
 8019632:	f001 fb15 	bl	801ac60 <xTaskRemoveFromEventList>
 8019636:	4603      	mov	r3, r0
 8019638:	2b00      	cmp	r3, #0
 801963a:	d012      	beq.n	8019662 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801963c:	4b0c      	ldr	r3, [pc, #48]	; (8019670 <xQueueGenericReset+0xcc>)
 801963e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019642:	601a      	str	r2, [r3, #0]
 8019644:	f3bf 8f4f 	dsb	sy
 8019648:	f3bf 8f6f 	isb	sy
 801964c:	e009      	b.n	8019662 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	3310      	adds	r3, #16
 8019652:	4618      	mov	r0, r3
 8019654:	f7ff fef2 	bl	801943c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	3324      	adds	r3, #36	; 0x24
 801965c:	4618      	mov	r0, r3
 801965e:	f7ff feed 	bl	801943c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8019662:	f002 fadf 	bl	801bc24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8019666:	2301      	movs	r3, #1
}
 8019668:	4618      	mov	r0, r3
 801966a:	3710      	adds	r7, #16
 801966c:	46bd      	mov	sp, r7
 801966e:	bd80      	pop	{r7, pc}
 8019670:	e000ed04 	.word	0xe000ed04

08019674 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8019674:	b580      	push	{r7, lr}
 8019676:	b08e      	sub	sp, #56	; 0x38
 8019678:	af02      	add	r7, sp, #8
 801967a:	60f8      	str	r0, [r7, #12]
 801967c:	60b9      	str	r1, [r7, #8]
 801967e:	607a      	str	r2, [r7, #4]
 8019680:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	2b00      	cmp	r3, #0
 8019686:	d10a      	bne.n	801969e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8019688:	f04f 0350 	mov.w	r3, #80	; 0x50
 801968c:	f383 8811 	msr	BASEPRI, r3
 8019690:	f3bf 8f6f 	isb	sy
 8019694:	f3bf 8f4f 	dsb	sy
 8019698:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801969a:	bf00      	nop
 801969c:	e7fe      	b.n	801969c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801969e:	683b      	ldr	r3, [r7, #0]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d10a      	bne.n	80196ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80196a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196a8:	f383 8811 	msr	BASEPRI, r3
 80196ac:	f3bf 8f6f 	isb	sy
 80196b0:	f3bf 8f4f 	dsb	sy
 80196b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80196b6:	bf00      	nop
 80196b8:	e7fe      	b.n	80196b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d002      	beq.n	80196c6 <xQueueGenericCreateStatic+0x52>
 80196c0:	68bb      	ldr	r3, [r7, #8]
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d001      	beq.n	80196ca <xQueueGenericCreateStatic+0x56>
 80196c6:	2301      	movs	r3, #1
 80196c8:	e000      	b.n	80196cc <xQueueGenericCreateStatic+0x58>
 80196ca:	2300      	movs	r3, #0
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d10a      	bne.n	80196e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80196d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196d4:	f383 8811 	msr	BASEPRI, r3
 80196d8:	f3bf 8f6f 	isb	sy
 80196dc:	f3bf 8f4f 	dsb	sy
 80196e0:	623b      	str	r3, [r7, #32]
}
 80196e2:	bf00      	nop
 80196e4:	e7fe      	b.n	80196e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d102      	bne.n	80196f2 <xQueueGenericCreateStatic+0x7e>
 80196ec:	68bb      	ldr	r3, [r7, #8]
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d101      	bne.n	80196f6 <xQueueGenericCreateStatic+0x82>
 80196f2:	2301      	movs	r3, #1
 80196f4:	e000      	b.n	80196f8 <xQueueGenericCreateStatic+0x84>
 80196f6:	2300      	movs	r3, #0
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d10a      	bne.n	8019712 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80196fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019700:	f383 8811 	msr	BASEPRI, r3
 8019704:	f3bf 8f6f 	isb	sy
 8019708:	f3bf 8f4f 	dsb	sy
 801970c:	61fb      	str	r3, [r7, #28]
}
 801970e:	bf00      	nop
 8019710:	e7fe      	b.n	8019710 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8019712:	2350      	movs	r3, #80	; 0x50
 8019714:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8019716:	697b      	ldr	r3, [r7, #20]
 8019718:	2b50      	cmp	r3, #80	; 0x50
 801971a:	d00a      	beq.n	8019732 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801971c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019720:	f383 8811 	msr	BASEPRI, r3
 8019724:	f3bf 8f6f 	isb	sy
 8019728:	f3bf 8f4f 	dsb	sy
 801972c:	61bb      	str	r3, [r7, #24]
}
 801972e:	bf00      	nop
 8019730:	e7fe      	b.n	8019730 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8019732:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8019734:	683b      	ldr	r3, [r7, #0]
 8019736:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8019738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801973a:	2b00      	cmp	r3, #0
 801973c:	d00d      	beq.n	801975a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019740:	2201      	movs	r2, #1
 8019742:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8019746:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801974a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801974c:	9300      	str	r3, [sp, #0]
 801974e:	4613      	mov	r3, r2
 8019750:	687a      	ldr	r2, [r7, #4]
 8019752:	68b9      	ldr	r1, [r7, #8]
 8019754:	68f8      	ldr	r0, [r7, #12]
 8019756:	f000 f83f 	bl	80197d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801975a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801975c:	4618      	mov	r0, r3
 801975e:	3730      	adds	r7, #48	; 0x30
 8019760:	46bd      	mov	sp, r7
 8019762:	bd80      	pop	{r7, pc}

08019764 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8019764:	b580      	push	{r7, lr}
 8019766:	b08a      	sub	sp, #40	; 0x28
 8019768:	af02      	add	r7, sp, #8
 801976a:	60f8      	str	r0, [r7, #12]
 801976c:	60b9      	str	r1, [r7, #8]
 801976e:	4613      	mov	r3, r2
 8019770:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8019772:	68fb      	ldr	r3, [r7, #12]
 8019774:	2b00      	cmp	r3, #0
 8019776:	d10a      	bne.n	801978e <xQueueGenericCreate+0x2a>
	__asm volatile
 8019778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801977c:	f383 8811 	msr	BASEPRI, r3
 8019780:	f3bf 8f6f 	isb	sy
 8019784:	f3bf 8f4f 	dsb	sy
 8019788:	613b      	str	r3, [r7, #16]
}
 801978a:	bf00      	nop
 801978c:	e7fe      	b.n	801978c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	68ba      	ldr	r2, [r7, #8]
 8019792:	fb02 f303 	mul.w	r3, r2, r3
 8019796:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8019798:	69fb      	ldr	r3, [r7, #28]
 801979a:	3350      	adds	r3, #80	; 0x50
 801979c:	4618      	mov	r0, r3
 801979e:	f002 fb33 	bl	801be08 <pvPortMalloc>
 80197a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80197a4:	69bb      	ldr	r3, [r7, #24]
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d011      	beq.n	80197ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80197aa:	69bb      	ldr	r3, [r7, #24]
 80197ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80197ae:	697b      	ldr	r3, [r7, #20]
 80197b0:	3350      	adds	r3, #80	; 0x50
 80197b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80197b4:	69bb      	ldr	r3, [r7, #24]
 80197b6:	2200      	movs	r2, #0
 80197b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80197bc:	79fa      	ldrb	r2, [r7, #7]
 80197be:	69bb      	ldr	r3, [r7, #24]
 80197c0:	9300      	str	r3, [sp, #0]
 80197c2:	4613      	mov	r3, r2
 80197c4:	697a      	ldr	r2, [r7, #20]
 80197c6:	68b9      	ldr	r1, [r7, #8]
 80197c8:	68f8      	ldr	r0, [r7, #12]
 80197ca:	f000 f805 	bl	80197d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80197ce:	69bb      	ldr	r3, [r7, #24]
	}
 80197d0:	4618      	mov	r0, r3
 80197d2:	3720      	adds	r7, #32
 80197d4:	46bd      	mov	sp, r7
 80197d6:	bd80      	pop	{r7, pc}

080197d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80197d8:	b580      	push	{r7, lr}
 80197da:	b084      	sub	sp, #16
 80197dc:	af00      	add	r7, sp, #0
 80197de:	60f8      	str	r0, [r7, #12]
 80197e0:	60b9      	str	r1, [r7, #8]
 80197e2:	607a      	str	r2, [r7, #4]
 80197e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80197e6:	68bb      	ldr	r3, [r7, #8]
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d103      	bne.n	80197f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80197ec:	69bb      	ldr	r3, [r7, #24]
 80197ee:	69ba      	ldr	r2, [r7, #24]
 80197f0:	601a      	str	r2, [r3, #0]
 80197f2:	e002      	b.n	80197fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80197f4:	69bb      	ldr	r3, [r7, #24]
 80197f6:	687a      	ldr	r2, [r7, #4]
 80197f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80197fa:	69bb      	ldr	r3, [r7, #24]
 80197fc:	68fa      	ldr	r2, [r7, #12]
 80197fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8019800:	69bb      	ldr	r3, [r7, #24]
 8019802:	68ba      	ldr	r2, [r7, #8]
 8019804:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8019806:	2101      	movs	r1, #1
 8019808:	69b8      	ldr	r0, [r7, #24]
 801980a:	f7ff fecb 	bl	80195a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801980e:	69bb      	ldr	r3, [r7, #24]
 8019810:	78fa      	ldrb	r2, [r7, #3]
 8019812:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8019816:	bf00      	nop
 8019818:	3710      	adds	r7, #16
 801981a:	46bd      	mov	sp, r7
 801981c:	bd80      	pop	{r7, pc}
	...

08019820 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8019820:	b580      	push	{r7, lr}
 8019822:	b08e      	sub	sp, #56	; 0x38
 8019824:	af00      	add	r7, sp, #0
 8019826:	60f8      	str	r0, [r7, #12]
 8019828:	60b9      	str	r1, [r7, #8]
 801982a:	607a      	str	r2, [r7, #4]
 801982c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801982e:	2300      	movs	r3, #0
 8019830:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8019836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019838:	2b00      	cmp	r3, #0
 801983a:	d10a      	bne.n	8019852 <xQueueGenericSend+0x32>
	__asm volatile
 801983c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019840:	f383 8811 	msr	BASEPRI, r3
 8019844:	f3bf 8f6f 	isb	sy
 8019848:	f3bf 8f4f 	dsb	sy
 801984c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801984e:	bf00      	nop
 8019850:	e7fe      	b.n	8019850 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019852:	68bb      	ldr	r3, [r7, #8]
 8019854:	2b00      	cmp	r3, #0
 8019856:	d103      	bne.n	8019860 <xQueueGenericSend+0x40>
 8019858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801985a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801985c:	2b00      	cmp	r3, #0
 801985e:	d101      	bne.n	8019864 <xQueueGenericSend+0x44>
 8019860:	2301      	movs	r3, #1
 8019862:	e000      	b.n	8019866 <xQueueGenericSend+0x46>
 8019864:	2300      	movs	r3, #0
 8019866:	2b00      	cmp	r3, #0
 8019868:	d10a      	bne.n	8019880 <xQueueGenericSend+0x60>
	__asm volatile
 801986a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801986e:	f383 8811 	msr	BASEPRI, r3
 8019872:	f3bf 8f6f 	isb	sy
 8019876:	f3bf 8f4f 	dsb	sy
 801987a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801987c:	bf00      	nop
 801987e:	e7fe      	b.n	801987e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019880:	683b      	ldr	r3, [r7, #0]
 8019882:	2b02      	cmp	r3, #2
 8019884:	d103      	bne.n	801988e <xQueueGenericSend+0x6e>
 8019886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801988a:	2b01      	cmp	r3, #1
 801988c:	d101      	bne.n	8019892 <xQueueGenericSend+0x72>
 801988e:	2301      	movs	r3, #1
 8019890:	e000      	b.n	8019894 <xQueueGenericSend+0x74>
 8019892:	2300      	movs	r3, #0
 8019894:	2b00      	cmp	r3, #0
 8019896:	d10a      	bne.n	80198ae <xQueueGenericSend+0x8e>
	__asm volatile
 8019898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801989c:	f383 8811 	msr	BASEPRI, r3
 80198a0:	f3bf 8f6f 	isb	sy
 80198a4:	f3bf 8f4f 	dsb	sy
 80198a8:	623b      	str	r3, [r7, #32]
}
 80198aa:	bf00      	nop
 80198ac:	e7fe      	b.n	80198ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80198ae:	f001 fbf7 	bl	801b0a0 <xTaskGetSchedulerState>
 80198b2:	4603      	mov	r3, r0
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d102      	bne.n	80198be <xQueueGenericSend+0x9e>
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d101      	bne.n	80198c2 <xQueueGenericSend+0xa2>
 80198be:	2301      	movs	r3, #1
 80198c0:	e000      	b.n	80198c4 <xQueueGenericSend+0xa4>
 80198c2:	2300      	movs	r3, #0
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d10a      	bne.n	80198de <xQueueGenericSend+0xbe>
	__asm volatile
 80198c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198cc:	f383 8811 	msr	BASEPRI, r3
 80198d0:	f3bf 8f6f 	isb	sy
 80198d4:	f3bf 8f4f 	dsb	sy
 80198d8:	61fb      	str	r3, [r7, #28]
}
 80198da:	bf00      	nop
 80198dc:	e7fe      	b.n	80198dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80198de:	f002 f971 	bl	801bbc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80198e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80198e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198ea:	429a      	cmp	r2, r3
 80198ec:	d302      	bcc.n	80198f4 <xQueueGenericSend+0xd4>
 80198ee:	683b      	ldr	r3, [r7, #0]
 80198f0:	2b02      	cmp	r3, #2
 80198f2:	d129      	bne.n	8019948 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80198f4:	683a      	ldr	r2, [r7, #0]
 80198f6:	68b9      	ldr	r1, [r7, #8]
 80198f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80198fa:	f000 fa8b 	bl	8019e14 <prvCopyDataToQueue>
 80198fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019904:	2b00      	cmp	r3, #0
 8019906:	d010      	beq.n	801992a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801990a:	3324      	adds	r3, #36	; 0x24
 801990c:	4618      	mov	r0, r3
 801990e:	f001 f9a7 	bl	801ac60 <xTaskRemoveFromEventList>
 8019912:	4603      	mov	r3, r0
 8019914:	2b00      	cmp	r3, #0
 8019916:	d013      	beq.n	8019940 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8019918:	4b3f      	ldr	r3, [pc, #252]	; (8019a18 <xQueueGenericSend+0x1f8>)
 801991a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801991e:	601a      	str	r2, [r3, #0]
 8019920:	f3bf 8f4f 	dsb	sy
 8019924:	f3bf 8f6f 	isb	sy
 8019928:	e00a      	b.n	8019940 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801992a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801992c:	2b00      	cmp	r3, #0
 801992e:	d007      	beq.n	8019940 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8019930:	4b39      	ldr	r3, [pc, #228]	; (8019a18 <xQueueGenericSend+0x1f8>)
 8019932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019936:	601a      	str	r2, [r3, #0]
 8019938:	f3bf 8f4f 	dsb	sy
 801993c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8019940:	f002 f970 	bl	801bc24 <vPortExitCritical>
				return pdPASS;
 8019944:	2301      	movs	r3, #1
 8019946:	e063      	b.n	8019a10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	2b00      	cmp	r3, #0
 801994c:	d103      	bne.n	8019956 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801994e:	f002 f969 	bl	801bc24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8019952:	2300      	movs	r3, #0
 8019954:	e05c      	b.n	8019a10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019958:	2b00      	cmp	r3, #0
 801995a:	d106      	bne.n	801996a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801995c:	f107 0314 	add.w	r3, r7, #20
 8019960:	4618      	mov	r0, r3
 8019962:	f001 fa43 	bl	801adec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019966:	2301      	movs	r3, #1
 8019968:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801996a:	f002 f95b 	bl	801bc24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801996e:	f000 ff01 	bl	801a774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019972:	f002 f927 	bl	801bbc4 <vPortEnterCritical>
 8019976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801997c:	b25b      	sxtb	r3, r3
 801997e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019982:	d103      	bne.n	801998c <xQueueGenericSend+0x16c>
 8019984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019986:	2200      	movs	r2, #0
 8019988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801998c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801998e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019992:	b25b      	sxtb	r3, r3
 8019994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019998:	d103      	bne.n	80199a2 <xQueueGenericSend+0x182>
 801999a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801999c:	2200      	movs	r2, #0
 801999e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80199a2:	f002 f93f 	bl	801bc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80199a6:	1d3a      	adds	r2, r7, #4
 80199a8:	f107 0314 	add.w	r3, r7, #20
 80199ac:	4611      	mov	r1, r2
 80199ae:	4618      	mov	r0, r3
 80199b0:	f001 fa32 	bl	801ae18 <xTaskCheckForTimeOut>
 80199b4:	4603      	mov	r3, r0
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d124      	bne.n	8019a04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80199ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80199bc:	f000 fb22 	bl	801a004 <prvIsQueueFull>
 80199c0:	4603      	mov	r3, r0
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d018      	beq.n	80199f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80199c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199c8:	3310      	adds	r3, #16
 80199ca:	687a      	ldr	r2, [r7, #4]
 80199cc:	4611      	mov	r1, r2
 80199ce:	4618      	mov	r0, r3
 80199d0:	f001 f8ba 	bl	801ab48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80199d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80199d6:	f000 faad 	bl	8019f34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80199da:	f000 fed9 	bl	801a790 <xTaskResumeAll>
 80199de:	4603      	mov	r3, r0
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	f47f af7c 	bne.w	80198de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80199e6:	4b0c      	ldr	r3, [pc, #48]	; (8019a18 <xQueueGenericSend+0x1f8>)
 80199e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80199ec:	601a      	str	r2, [r3, #0]
 80199ee:	f3bf 8f4f 	dsb	sy
 80199f2:	f3bf 8f6f 	isb	sy
 80199f6:	e772      	b.n	80198de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80199f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80199fa:	f000 fa9b 	bl	8019f34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80199fe:	f000 fec7 	bl	801a790 <xTaskResumeAll>
 8019a02:	e76c      	b.n	80198de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8019a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019a06:	f000 fa95 	bl	8019f34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019a0a:	f000 fec1 	bl	801a790 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8019a0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8019a10:	4618      	mov	r0, r3
 8019a12:	3738      	adds	r7, #56	; 0x38
 8019a14:	46bd      	mov	sp, r7
 8019a16:	bd80      	pop	{r7, pc}
 8019a18:	e000ed04 	.word	0xe000ed04

08019a1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8019a1c:	b580      	push	{r7, lr}
 8019a1e:	b090      	sub	sp, #64	; 0x40
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	60f8      	str	r0, [r7, #12]
 8019a24:	60b9      	str	r1, [r7, #8]
 8019a26:	607a      	str	r2, [r7, #4]
 8019a28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8019a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	d10a      	bne.n	8019a4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8019a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a38:	f383 8811 	msr	BASEPRI, r3
 8019a3c:	f3bf 8f6f 	isb	sy
 8019a40:	f3bf 8f4f 	dsb	sy
 8019a44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8019a46:	bf00      	nop
 8019a48:	e7fe      	b.n	8019a48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019a4a:	68bb      	ldr	r3, [r7, #8]
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d103      	bne.n	8019a58 <xQueueGenericSendFromISR+0x3c>
 8019a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d101      	bne.n	8019a5c <xQueueGenericSendFromISR+0x40>
 8019a58:	2301      	movs	r3, #1
 8019a5a:	e000      	b.n	8019a5e <xQueueGenericSendFromISR+0x42>
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d10a      	bne.n	8019a78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8019a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a66:	f383 8811 	msr	BASEPRI, r3
 8019a6a:	f3bf 8f6f 	isb	sy
 8019a6e:	f3bf 8f4f 	dsb	sy
 8019a72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8019a74:	bf00      	nop
 8019a76:	e7fe      	b.n	8019a76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019a78:	683b      	ldr	r3, [r7, #0]
 8019a7a:	2b02      	cmp	r3, #2
 8019a7c:	d103      	bne.n	8019a86 <xQueueGenericSendFromISR+0x6a>
 8019a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a82:	2b01      	cmp	r3, #1
 8019a84:	d101      	bne.n	8019a8a <xQueueGenericSendFromISR+0x6e>
 8019a86:	2301      	movs	r3, #1
 8019a88:	e000      	b.n	8019a8c <xQueueGenericSendFromISR+0x70>
 8019a8a:	2300      	movs	r3, #0
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d10a      	bne.n	8019aa6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8019a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a94:	f383 8811 	msr	BASEPRI, r3
 8019a98:	f3bf 8f6f 	isb	sy
 8019a9c:	f3bf 8f4f 	dsb	sy
 8019aa0:	623b      	str	r3, [r7, #32]
}
 8019aa2:	bf00      	nop
 8019aa4:	e7fe      	b.n	8019aa4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019aa6:	f002 f96f 	bl	801bd88 <vPortValidateInterruptPriority>
	__asm volatile
 8019aaa:	f3ef 8211 	mrs	r2, BASEPRI
 8019aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ab2:	f383 8811 	msr	BASEPRI, r3
 8019ab6:	f3bf 8f6f 	isb	sy
 8019aba:	f3bf 8f4f 	dsb	sy
 8019abe:	61fa      	str	r2, [r7, #28]
 8019ac0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8019ac2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019ac4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8019ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ace:	429a      	cmp	r2, r3
 8019ad0:	d302      	bcc.n	8019ad8 <xQueueGenericSendFromISR+0xbc>
 8019ad2:	683b      	ldr	r3, [r7, #0]
 8019ad4:	2b02      	cmp	r3, #2
 8019ad6:	d12f      	bne.n	8019b38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8019ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8019ae8:	683a      	ldr	r2, [r7, #0]
 8019aea:	68b9      	ldr	r1, [r7, #8]
 8019aec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019aee:	f000 f991 	bl	8019e14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8019af2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8019af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019afa:	d112      	bne.n	8019b22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d016      	beq.n	8019b32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b06:	3324      	adds	r3, #36	; 0x24
 8019b08:	4618      	mov	r0, r3
 8019b0a:	f001 f8a9 	bl	801ac60 <xTaskRemoveFromEventList>
 8019b0e:	4603      	mov	r3, r0
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d00e      	beq.n	8019b32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d00b      	beq.n	8019b32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	2201      	movs	r2, #1
 8019b1e:	601a      	str	r2, [r3, #0]
 8019b20:	e007      	b.n	8019b32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8019b22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8019b26:	3301      	adds	r3, #1
 8019b28:	b2db      	uxtb	r3, r3
 8019b2a:	b25a      	sxtb	r2, r3
 8019b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8019b32:	2301      	movs	r3, #1
 8019b34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8019b36:	e001      	b.n	8019b3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019b38:	2300      	movs	r3, #0
 8019b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b3e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8019b40:	697b      	ldr	r3, [r7, #20]
 8019b42:	f383 8811 	msr	BASEPRI, r3
}
 8019b46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8019b4a:	4618      	mov	r0, r3
 8019b4c:	3740      	adds	r7, #64	; 0x40
 8019b4e:	46bd      	mov	sp, r7
 8019b50:	bd80      	pop	{r7, pc}
	...

08019b54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8019b54:	b580      	push	{r7, lr}
 8019b56:	b08c      	sub	sp, #48	; 0x30
 8019b58:	af00      	add	r7, sp, #0
 8019b5a:	60f8      	str	r0, [r7, #12]
 8019b5c:	60b9      	str	r1, [r7, #8]
 8019b5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8019b60:	2300      	movs	r3, #0
 8019b62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d10a      	bne.n	8019b84 <xQueueReceive+0x30>
	__asm volatile
 8019b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b72:	f383 8811 	msr	BASEPRI, r3
 8019b76:	f3bf 8f6f 	isb	sy
 8019b7a:	f3bf 8f4f 	dsb	sy
 8019b7e:	623b      	str	r3, [r7, #32]
}
 8019b80:	bf00      	nop
 8019b82:	e7fe      	b.n	8019b82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019b84:	68bb      	ldr	r3, [r7, #8]
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d103      	bne.n	8019b92 <xQueueReceive+0x3e>
 8019b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d101      	bne.n	8019b96 <xQueueReceive+0x42>
 8019b92:	2301      	movs	r3, #1
 8019b94:	e000      	b.n	8019b98 <xQueueReceive+0x44>
 8019b96:	2300      	movs	r3, #0
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d10a      	bne.n	8019bb2 <xQueueReceive+0x5e>
	__asm volatile
 8019b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ba0:	f383 8811 	msr	BASEPRI, r3
 8019ba4:	f3bf 8f6f 	isb	sy
 8019ba8:	f3bf 8f4f 	dsb	sy
 8019bac:	61fb      	str	r3, [r7, #28]
}
 8019bae:	bf00      	nop
 8019bb0:	e7fe      	b.n	8019bb0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019bb2:	f001 fa75 	bl	801b0a0 <xTaskGetSchedulerState>
 8019bb6:	4603      	mov	r3, r0
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d102      	bne.n	8019bc2 <xQueueReceive+0x6e>
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d101      	bne.n	8019bc6 <xQueueReceive+0x72>
 8019bc2:	2301      	movs	r3, #1
 8019bc4:	e000      	b.n	8019bc8 <xQueueReceive+0x74>
 8019bc6:	2300      	movs	r3, #0
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d10a      	bne.n	8019be2 <xQueueReceive+0x8e>
	__asm volatile
 8019bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bd0:	f383 8811 	msr	BASEPRI, r3
 8019bd4:	f3bf 8f6f 	isb	sy
 8019bd8:	f3bf 8f4f 	dsb	sy
 8019bdc:	61bb      	str	r3, [r7, #24]
}
 8019bde:	bf00      	nop
 8019be0:	e7fe      	b.n	8019be0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8019be2:	f001 ffef 	bl	801bbc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019bea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d01f      	beq.n	8019c32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019bf2:	68b9      	ldr	r1, [r7, #8]
 8019bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019bf6:	f000 f977 	bl	8019ee8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bfc:	1e5a      	subs	r2, r3, #1
 8019bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c04:	691b      	ldr	r3, [r3, #16]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d00f      	beq.n	8019c2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c0c:	3310      	adds	r3, #16
 8019c0e:	4618      	mov	r0, r3
 8019c10:	f001 f826 	bl	801ac60 <xTaskRemoveFromEventList>
 8019c14:	4603      	mov	r3, r0
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d007      	beq.n	8019c2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019c1a:	4b3d      	ldr	r3, [pc, #244]	; (8019d10 <xQueueReceive+0x1bc>)
 8019c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019c20:	601a      	str	r2, [r3, #0]
 8019c22:	f3bf 8f4f 	dsb	sy
 8019c26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019c2a:	f001 fffb 	bl	801bc24 <vPortExitCritical>
				return pdPASS;
 8019c2e:	2301      	movs	r3, #1
 8019c30:	e069      	b.n	8019d06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d103      	bne.n	8019c40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019c38:	f001 fff4 	bl	801bc24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019c3c:	2300      	movs	r3, #0
 8019c3e:	e062      	b.n	8019d06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d106      	bne.n	8019c54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019c46:	f107 0310 	add.w	r3, r7, #16
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	f001 f8ce 	bl	801adec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019c50:	2301      	movs	r3, #1
 8019c52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019c54:	f001 ffe6 	bl	801bc24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019c58:	f000 fd8c 	bl	801a774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019c5c:	f001 ffb2 	bl	801bbc4 <vPortEnterCritical>
 8019c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019c66:	b25b      	sxtb	r3, r3
 8019c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019c6c:	d103      	bne.n	8019c76 <xQueueReceive+0x122>
 8019c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c70:	2200      	movs	r2, #0
 8019c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019c7c:	b25b      	sxtb	r3, r3
 8019c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019c82:	d103      	bne.n	8019c8c <xQueueReceive+0x138>
 8019c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c86:	2200      	movs	r2, #0
 8019c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019c8c:	f001 ffca 	bl	801bc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019c90:	1d3a      	adds	r2, r7, #4
 8019c92:	f107 0310 	add.w	r3, r7, #16
 8019c96:	4611      	mov	r1, r2
 8019c98:	4618      	mov	r0, r3
 8019c9a:	f001 f8bd 	bl	801ae18 <xTaskCheckForTimeOut>
 8019c9e:	4603      	mov	r3, r0
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d123      	bne.n	8019cec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019ca6:	f000 f997 	bl	8019fd8 <prvIsQueueEmpty>
 8019caa:	4603      	mov	r3, r0
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d017      	beq.n	8019ce0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019cb2:	3324      	adds	r3, #36	; 0x24
 8019cb4:	687a      	ldr	r2, [r7, #4]
 8019cb6:	4611      	mov	r1, r2
 8019cb8:	4618      	mov	r0, r3
 8019cba:	f000 ff45 	bl	801ab48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8019cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019cc0:	f000 f938 	bl	8019f34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019cc4:	f000 fd64 	bl	801a790 <xTaskResumeAll>
 8019cc8:	4603      	mov	r3, r0
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d189      	bne.n	8019be2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8019cce:	4b10      	ldr	r3, [pc, #64]	; (8019d10 <xQueueReceive+0x1bc>)
 8019cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019cd4:	601a      	str	r2, [r3, #0]
 8019cd6:	f3bf 8f4f 	dsb	sy
 8019cda:	f3bf 8f6f 	isb	sy
 8019cde:	e780      	b.n	8019be2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8019ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019ce2:	f000 f927 	bl	8019f34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019ce6:	f000 fd53 	bl	801a790 <xTaskResumeAll>
 8019cea:	e77a      	b.n	8019be2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8019cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019cee:	f000 f921 	bl	8019f34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019cf2:	f000 fd4d 	bl	801a790 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019cf8:	f000 f96e 	bl	8019fd8 <prvIsQueueEmpty>
 8019cfc:	4603      	mov	r3, r0
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	f43f af6f 	beq.w	8019be2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8019d04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8019d06:	4618      	mov	r0, r3
 8019d08:	3730      	adds	r7, #48	; 0x30
 8019d0a:	46bd      	mov	sp, r7
 8019d0c:	bd80      	pop	{r7, pc}
 8019d0e:	bf00      	nop
 8019d10:	e000ed04 	.word	0xe000ed04

08019d14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8019d14:	b580      	push	{r7, lr}
 8019d16:	b08e      	sub	sp, #56	; 0x38
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	60f8      	str	r0, [r7, #12]
 8019d1c:	60b9      	str	r1, [r7, #8]
 8019d1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8019d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d10a      	bne.n	8019d40 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8019d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d2e:	f383 8811 	msr	BASEPRI, r3
 8019d32:	f3bf 8f6f 	isb	sy
 8019d36:	f3bf 8f4f 	dsb	sy
 8019d3a:	623b      	str	r3, [r7, #32]
}
 8019d3c:	bf00      	nop
 8019d3e:	e7fe      	b.n	8019d3e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019d40:	68bb      	ldr	r3, [r7, #8]
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d103      	bne.n	8019d4e <xQueueReceiveFromISR+0x3a>
 8019d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d101      	bne.n	8019d52 <xQueueReceiveFromISR+0x3e>
 8019d4e:	2301      	movs	r3, #1
 8019d50:	e000      	b.n	8019d54 <xQueueReceiveFromISR+0x40>
 8019d52:	2300      	movs	r3, #0
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d10a      	bne.n	8019d6e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8019d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d5c:	f383 8811 	msr	BASEPRI, r3
 8019d60:	f3bf 8f6f 	isb	sy
 8019d64:	f3bf 8f4f 	dsb	sy
 8019d68:	61fb      	str	r3, [r7, #28]
}
 8019d6a:	bf00      	nop
 8019d6c:	e7fe      	b.n	8019d6c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019d6e:	f002 f80b 	bl	801bd88 <vPortValidateInterruptPriority>
	__asm volatile
 8019d72:	f3ef 8211 	mrs	r2, BASEPRI
 8019d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d7a:	f383 8811 	msr	BASEPRI, r3
 8019d7e:	f3bf 8f6f 	isb	sy
 8019d82:	f3bf 8f4f 	dsb	sy
 8019d86:	61ba      	str	r2, [r7, #24]
 8019d88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8019d8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8019d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d02f      	beq.n	8019dfa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8019d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8019da4:	68b9      	ldr	r1, [r7, #8]
 8019da6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019da8:	f000 f89e 	bl	8019ee8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019dae:	1e5a      	subs	r2, r3, #1
 8019db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019db2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8019db4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019dbc:	d112      	bne.n	8019de4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dc0:	691b      	ldr	r3, [r3, #16]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d016      	beq.n	8019df4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dc8:	3310      	adds	r3, #16
 8019dca:	4618      	mov	r0, r3
 8019dcc:	f000 ff48 	bl	801ac60 <xTaskRemoveFromEventList>
 8019dd0:	4603      	mov	r3, r0
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d00e      	beq.n	8019df4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d00b      	beq.n	8019df4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	2201      	movs	r2, #1
 8019de0:	601a      	str	r2, [r3, #0]
 8019de2:	e007      	b.n	8019df4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8019de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019de8:	3301      	adds	r3, #1
 8019dea:	b2db      	uxtb	r3, r3
 8019dec:	b25a      	sxtb	r2, r3
 8019dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8019df4:	2301      	movs	r3, #1
 8019df6:	637b      	str	r3, [r7, #52]	; 0x34
 8019df8:	e001      	b.n	8019dfe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8019dfa:	2300      	movs	r3, #0
 8019dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8019dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8019e02:	693b      	ldr	r3, [r7, #16]
 8019e04:	f383 8811 	msr	BASEPRI, r3
}
 8019e08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	3738      	adds	r7, #56	; 0x38
 8019e10:	46bd      	mov	sp, r7
 8019e12:	bd80      	pop	{r7, pc}

08019e14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8019e14:	b580      	push	{r7, lr}
 8019e16:	b086      	sub	sp, #24
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	60f8      	str	r0, [r7, #12]
 8019e1c:	60b9      	str	r1, [r7, #8]
 8019e1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8019e20:	2300      	movs	r3, #0
 8019e22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8019e2a:	68fb      	ldr	r3, [r7, #12]
 8019e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d10d      	bne.n	8019e4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8019e32:	68fb      	ldr	r3, [r7, #12]
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d14d      	bne.n	8019ed6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	689b      	ldr	r3, [r3, #8]
 8019e3e:	4618      	mov	r0, r3
 8019e40:	f001 f94c 	bl	801b0dc <xTaskPriorityDisinherit>
 8019e44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	2200      	movs	r2, #0
 8019e4a:	609a      	str	r2, [r3, #8]
 8019e4c:	e043      	b.n	8019ed6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d119      	bne.n	8019e88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019e54:	68fb      	ldr	r3, [r7, #12]
 8019e56:	6858      	ldr	r0, [r3, #4]
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019e5c:	461a      	mov	r2, r3
 8019e5e:	68b9      	ldr	r1, [r7, #8]
 8019e60:	f002 f9e0 	bl	801c224 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	685a      	ldr	r2, [r3, #4]
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019e6c:	441a      	add	r2, r3
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	685a      	ldr	r2, [r3, #4]
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	689b      	ldr	r3, [r3, #8]
 8019e7a:	429a      	cmp	r2, r3
 8019e7c:	d32b      	bcc.n	8019ed6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8019e7e:	68fb      	ldr	r3, [r7, #12]
 8019e80:	681a      	ldr	r2, [r3, #0]
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	605a      	str	r2, [r3, #4]
 8019e86:	e026      	b.n	8019ed6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	68d8      	ldr	r0, [r3, #12]
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019e90:	461a      	mov	r2, r3
 8019e92:	68b9      	ldr	r1, [r7, #8]
 8019e94:	f002 f9c6 	bl	801c224 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	68da      	ldr	r2, [r3, #12]
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ea0:	425b      	negs	r3, r3
 8019ea2:	441a      	add	r2, r3
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	68da      	ldr	r2, [r3, #12]
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	681b      	ldr	r3, [r3, #0]
 8019eb0:	429a      	cmp	r2, r3
 8019eb2:	d207      	bcs.n	8019ec4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8019eb4:	68fb      	ldr	r3, [r7, #12]
 8019eb6:	689a      	ldr	r2, [r3, #8]
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ebc:	425b      	negs	r3, r3
 8019ebe:	441a      	add	r2, r3
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	2b02      	cmp	r3, #2
 8019ec8:	d105      	bne.n	8019ed6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019eca:	693b      	ldr	r3, [r7, #16]
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d002      	beq.n	8019ed6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8019ed0:	693b      	ldr	r3, [r7, #16]
 8019ed2:	3b01      	subs	r3, #1
 8019ed4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8019ed6:	693b      	ldr	r3, [r7, #16]
 8019ed8:	1c5a      	adds	r2, r3, #1
 8019eda:	68fb      	ldr	r3, [r7, #12]
 8019edc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8019ede:	697b      	ldr	r3, [r7, #20]
}
 8019ee0:	4618      	mov	r0, r3
 8019ee2:	3718      	adds	r7, #24
 8019ee4:	46bd      	mov	sp, r7
 8019ee6:	bd80      	pop	{r7, pc}

08019ee8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8019ee8:	b580      	push	{r7, lr}
 8019eea:	b082      	sub	sp, #8
 8019eec:	af00      	add	r7, sp, #0
 8019eee:	6078      	str	r0, [r7, #4]
 8019ef0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d018      	beq.n	8019f2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	68da      	ldr	r2, [r3, #12]
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f02:	441a      	add	r2, r3
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	68da      	ldr	r2, [r3, #12]
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	689b      	ldr	r3, [r3, #8]
 8019f10:	429a      	cmp	r2, r3
 8019f12:	d303      	bcc.n	8019f1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	681a      	ldr	r2, [r3, #0]
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	68d9      	ldr	r1, [r3, #12]
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f24:	461a      	mov	r2, r3
 8019f26:	6838      	ldr	r0, [r7, #0]
 8019f28:	f002 f97c 	bl	801c224 <memcpy>
	}
}
 8019f2c:	bf00      	nop
 8019f2e:	3708      	adds	r7, #8
 8019f30:	46bd      	mov	sp, r7
 8019f32:	bd80      	pop	{r7, pc}

08019f34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8019f34:	b580      	push	{r7, lr}
 8019f36:	b084      	sub	sp, #16
 8019f38:	af00      	add	r7, sp, #0
 8019f3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019f3c:	f001 fe42 	bl	801bbc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019f46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019f48:	e011      	b.n	8019f6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	d012      	beq.n	8019f78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	3324      	adds	r3, #36	; 0x24
 8019f56:	4618      	mov	r0, r3
 8019f58:	f000 fe82 	bl	801ac60 <xTaskRemoveFromEventList>
 8019f5c:	4603      	mov	r3, r0
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d001      	beq.n	8019f66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8019f62:	f000 ffbb 	bl	801aedc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8019f66:	7bfb      	ldrb	r3, [r7, #15]
 8019f68:	3b01      	subs	r3, #1
 8019f6a:	b2db      	uxtb	r3, r3
 8019f6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	dce9      	bgt.n	8019f4a <prvUnlockQueue+0x16>
 8019f76:	e000      	b.n	8019f7a <prvUnlockQueue+0x46>
					break;
 8019f78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	22ff      	movs	r2, #255	; 0xff
 8019f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8019f82:	f001 fe4f 	bl	801bc24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8019f86:	f001 fe1d 	bl	801bbc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019f90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019f92:	e011      	b.n	8019fb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	691b      	ldr	r3, [r3, #16]
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d012      	beq.n	8019fc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	3310      	adds	r3, #16
 8019fa0:	4618      	mov	r0, r3
 8019fa2:	f000 fe5d 	bl	801ac60 <xTaskRemoveFromEventList>
 8019fa6:	4603      	mov	r3, r0
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d001      	beq.n	8019fb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8019fac:	f000 ff96 	bl	801aedc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8019fb0:	7bbb      	ldrb	r3, [r7, #14]
 8019fb2:	3b01      	subs	r3, #1
 8019fb4:	b2db      	uxtb	r3, r3
 8019fb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8019fb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	dce9      	bgt.n	8019f94 <prvUnlockQueue+0x60>
 8019fc0:	e000      	b.n	8019fc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8019fc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	22ff      	movs	r2, #255	; 0xff
 8019fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8019fcc:	f001 fe2a 	bl	801bc24 <vPortExitCritical>
}
 8019fd0:	bf00      	nop
 8019fd2:	3710      	adds	r7, #16
 8019fd4:	46bd      	mov	sp, r7
 8019fd6:	bd80      	pop	{r7, pc}

08019fd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b084      	sub	sp, #16
 8019fdc:	af00      	add	r7, sp, #0
 8019fde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019fe0:	f001 fdf0 	bl	801bbc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d102      	bne.n	8019ff2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8019fec:	2301      	movs	r3, #1
 8019fee:	60fb      	str	r3, [r7, #12]
 8019ff0:	e001      	b.n	8019ff6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8019ff2:	2300      	movs	r3, #0
 8019ff4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8019ff6:	f001 fe15 	bl	801bc24 <vPortExitCritical>

	return xReturn;
 8019ffa:	68fb      	ldr	r3, [r7, #12]
}
 8019ffc:	4618      	mov	r0, r3
 8019ffe:	3710      	adds	r7, #16
 801a000:	46bd      	mov	sp, r7
 801a002:	bd80      	pop	{r7, pc}

0801a004 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801a004:	b580      	push	{r7, lr}
 801a006:	b084      	sub	sp, #16
 801a008:	af00      	add	r7, sp, #0
 801a00a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801a00c:	f001 fdda 	bl	801bbc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a018:	429a      	cmp	r2, r3
 801a01a:	d102      	bne.n	801a022 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801a01c:	2301      	movs	r3, #1
 801a01e:	60fb      	str	r3, [r7, #12]
 801a020:	e001      	b.n	801a026 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801a022:	2300      	movs	r3, #0
 801a024:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801a026:	f001 fdfd 	bl	801bc24 <vPortExitCritical>

	return xReturn;
 801a02a:	68fb      	ldr	r3, [r7, #12]
}
 801a02c:	4618      	mov	r0, r3
 801a02e:	3710      	adds	r7, #16
 801a030:	46bd      	mov	sp, r7
 801a032:	bd80      	pop	{r7, pc}

0801a034 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801a034:	b480      	push	{r7}
 801a036:	b085      	sub	sp, #20
 801a038:	af00      	add	r7, sp, #0
 801a03a:	6078      	str	r0, [r7, #4]
 801a03c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a03e:	2300      	movs	r3, #0
 801a040:	60fb      	str	r3, [r7, #12]
 801a042:	e014      	b.n	801a06e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801a044:	4a0f      	ldr	r2, [pc, #60]	; (801a084 <vQueueAddToRegistry+0x50>)
 801a046:	68fb      	ldr	r3, [r7, #12]
 801a048:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d10b      	bne.n	801a068 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801a050:	490c      	ldr	r1, [pc, #48]	; (801a084 <vQueueAddToRegistry+0x50>)
 801a052:	68fb      	ldr	r3, [r7, #12]
 801a054:	683a      	ldr	r2, [r7, #0]
 801a056:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801a05a:	4a0a      	ldr	r2, [pc, #40]	; (801a084 <vQueueAddToRegistry+0x50>)
 801a05c:	68fb      	ldr	r3, [r7, #12]
 801a05e:	00db      	lsls	r3, r3, #3
 801a060:	4413      	add	r3, r2
 801a062:	687a      	ldr	r2, [r7, #4]
 801a064:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801a066:	e006      	b.n	801a076 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	3301      	adds	r3, #1
 801a06c:	60fb      	str	r3, [r7, #12]
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	2b07      	cmp	r3, #7
 801a072:	d9e7      	bls.n	801a044 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801a074:	bf00      	nop
 801a076:	bf00      	nop
 801a078:	3714      	adds	r7, #20
 801a07a:	46bd      	mov	sp, r7
 801a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a080:	4770      	bx	lr
 801a082:	bf00      	nop
 801a084:	24002f58 	.word	0x24002f58

0801a088 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a088:	b580      	push	{r7, lr}
 801a08a:	b086      	sub	sp, #24
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	60f8      	str	r0, [r7, #12]
 801a090:	60b9      	str	r1, [r7, #8]
 801a092:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801a094:	68fb      	ldr	r3, [r7, #12]
 801a096:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801a098:	f001 fd94 	bl	801bbc4 <vPortEnterCritical>
 801a09c:	697b      	ldr	r3, [r7, #20]
 801a09e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801a0a2:	b25b      	sxtb	r3, r3
 801a0a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a0a8:	d103      	bne.n	801a0b2 <vQueueWaitForMessageRestricted+0x2a>
 801a0aa:	697b      	ldr	r3, [r7, #20]
 801a0ac:	2200      	movs	r2, #0
 801a0ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a0b2:	697b      	ldr	r3, [r7, #20]
 801a0b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801a0b8:	b25b      	sxtb	r3, r3
 801a0ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a0be:	d103      	bne.n	801a0c8 <vQueueWaitForMessageRestricted+0x40>
 801a0c0:	697b      	ldr	r3, [r7, #20]
 801a0c2:	2200      	movs	r2, #0
 801a0c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801a0c8:	f001 fdac 	bl	801bc24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801a0cc:	697b      	ldr	r3, [r7, #20]
 801a0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d106      	bne.n	801a0e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801a0d4:	697b      	ldr	r3, [r7, #20]
 801a0d6:	3324      	adds	r3, #36	; 0x24
 801a0d8:	687a      	ldr	r2, [r7, #4]
 801a0da:	68b9      	ldr	r1, [r7, #8]
 801a0dc:	4618      	mov	r0, r3
 801a0de:	f000 fd93 	bl	801ac08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801a0e2:	6978      	ldr	r0, [r7, #20]
 801a0e4:	f7ff ff26 	bl	8019f34 <prvUnlockQueue>
	}
 801a0e8:	bf00      	nop
 801a0ea:	3718      	adds	r7, #24
 801a0ec:	46bd      	mov	sp, r7
 801a0ee:	bd80      	pop	{r7, pc}

0801a0f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	b08e      	sub	sp, #56	; 0x38
 801a0f4:	af04      	add	r7, sp, #16
 801a0f6:	60f8      	str	r0, [r7, #12]
 801a0f8:	60b9      	str	r1, [r7, #8]
 801a0fa:	607a      	str	r2, [r7, #4]
 801a0fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801a0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a100:	2b00      	cmp	r3, #0
 801a102:	d10a      	bne.n	801a11a <xTaskCreateStatic+0x2a>
	__asm volatile
 801a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a108:	f383 8811 	msr	BASEPRI, r3
 801a10c:	f3bf 8f6f 	isb	sy
 801a110:	f3bf 8f4f 	dsb	sy
 801a114:	623b      	str	r3, [r7, #32]
}
 801a116:	bf00      	nop
 801a118:	e7fe      	b.n	801a118 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801a11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d10a      	bne.n	801a136 <xTaskCreateStatic+0x46>
	__asm volatile
 801a120:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a124:	f383 8811 	msr	BASEPRI, r3
 801a128:	f3bf 8f6f 	isb	sy
 801a12c:	f3bf 8f4f 	dsb	sy
 801a130:	61fb      	str	r3, [r7, #28]
}
 801a132:	bf00      	nop
 801a134:	e7fe      	b.n	801a134 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801a136:	235c      	movs	r3, #92	; 0x5c
 801a138:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801a13a:	693b      	ldr	r3, [r7, #16]
 801a13c:	2b5c      	cmp	r3, #92	; 0x5c
 801a13e:	d00a      	beq.n	801a156 <xTaskCreateStatic+0x66>
	__asm volatile
 801a140:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a144:	f383 8811 	msr	BASEPRI, r3
 801a148:	f3bf 8f6f 	isb	sy
 801a14c:	f3bf 8f4f 	dsb	sy
 801a150:	61bb      	str	r3, [r7, #24]
}
 801a152:	bf00      	nop
 801a154:	e7fe      	b.n	801a154 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801a156:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801a158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d01e      	beq.n	801a19c <xTaskCreateStatic+0xac>
 801a15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a160:	2b00      	cmp	r3, #0
 801a162:	d01b      	beq.n	801a19c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801a164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a166:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a16a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a16c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a170:	2202      	movs	r2, #2
 801a172:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801a176:	2300      	movs	r3, #0
 801a178:	9303      	str	r3, [sp, #12]
 801a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a17c:	9302      	str	r3, [sp, #8]
 801a17e:	f107 0314 	add.w	r3, r7, #20
 801a182:	9301      	str	r3, [sp, #4]
 801a184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a186:	9300      	str	r3, [sp, #0]
 801a188:	683b      	ldr	r3, [r7, #0]
 801a18a:	687a      	ldr	r2, [r7, #4]
 801a18c:	68b9      	ldr	r1, [r7, #8]
 801a18e:	68f8      	ldr	r0, [r7, #12]
 801a190:	f000 f850 	bl	801a234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a196:	f000 f8dd 	bl	801a354 <prvAddNewTaskToReadyList>
 801a19a:	e001      	b.n	801a1a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801a19c:	2300      	movs	r3, #0
 801a19e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801a1a0:	697b      	ldr	r3, [r7, #20]
	}
 801a1a2:	4618      	mov	r0, r3
 801a1a4:	3728      	adds	r7, #40	; 0x28
 801a1a6:	46bd      	mov	sp, r7
 801a1a8:	bd80      	pop	{r7, pc}

0801a1aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801a1aa:	b580      	push	{r7, lr}
 801a1ac:	b08c      	sub	sp, #48	; 0x30
 801a1ae:	af04      	add	r7, sp, #16
 801a1b0:	60f8      	str	r0, [r7, #12]
 801a1b2:	60b9      	str	r1, [r7, #8]
 801a1b4:	603b      	str	r3, [r7, #0]
 801a1b6:	4613      	mov	r3, r2
 801a1b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801a1ba:	88fb      	ldrh	r3, [r7, #6]
 801a1bc:	009b      	lsls	r3, r3, #2
 801a1be:	4618      	mov	r0, r3
 801a1c0:	f001 fe22 	bl	801be08 <pvPortMalloc>
 801a1c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801a1c6:	697b      	ldr	r3, [r7, #20]
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d00e      	beq.n	801a1ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801a1cc:	205c      	movs	r0, #92	; 0x5c
 801a1ce:	f001 fe1b 	bl	801be08 <pvPortMalloc>
 801a1d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801a1d4:	69fb      	ldr	r3, [r7, #28]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d003      	beq.n	801a1e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801a1da:	69fb      	ldr	r3, [r7, #28]
 801a1dc:	697a      	ldr	r2, [r7, #20]
 801a1de:	631a      	str	r2, [r3, #48]	; 0x30
 801a1e0:	e005      	b.n	801a1ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801a1e2:	6978      	ldr	r0, [r7, #20]
 801a1e4:	f001 fedc 	bl	801bfa0 <vPortFree>
 801a1e8:	e001      	b.n	801a1ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801a1ee:	69fb      	ldr	r3, [r7, #28]
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d017      	beq.n	801a224 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801a1f4:	69fb      	ldr	r3, [r7, #28]
 801a1f6:	2200      	movs	r2, #0
 801a1f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801a1fc:	88fa      	ldrh	r2, [r7, #6]
 801a1fe:	2300      	movs	r3, #0
 801a200:	9303      	str	r3, [sp, #12]
 801a202:	69fb      	ldr	r3, [r7, #28]
 801a204:	9302      	str	r3, [sp, #8]
 801a206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a208:	9301      	str	r3, [sp, #4]
 801a20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a20c:	9300      	str	r3, [sp, #0]
 801a20e:	683b      	ldr	r3, [r7, #0]
 801a210:	68b9      	ldr	r1, [r7, #8]
 801a212:	68f8      	ldr	r0, [r7, #12]
 801a214:	f000 f80e 	bl	801a234 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801a218:	69f8      	ldr	r0, [r7, #28]
 801a21a:	f000 f89b 	bl	801a354 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801a21e:	2301      	movs	r3, #1
 801a220:	61bb      	str	r3, [r7, #24]
 801a222:	e002      	b.n	801a22a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801a224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a228:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801a22a:	69bb      	ldr	r3, [r7, #24]
	}
 801a22c:	4618      	mov	r0, r3
 801a22e:	3720      	adds	r7, #32
 801a230:	46bd      	mov	sp, r7
 801a232:	bd80      	pop	{r7, pc}

0801a234 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801a234:	b580      	push	{r7, lr}
 801a236:	b088      	sub	sp, #32
 801a238:	af00      	add	r7, sp, #0
 801a23a:	60f8      	str	r0, [r7, #12]
 801a23c:	60b9      	str	r1, [r7, #8]
 801a23e:	607a      	str	r2, [r7, #4]
 801a240:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801a242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a244:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	009b      	lsls	r3, r3, #2
 801a24a:	461a      	mov	r2, r3
 801a24c:	21a5      	movs	r1, #165	; 0xa5
 801a24e:	f001 fff7 	bl	801c240 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801a252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a256:	6879      	ldr	r1, [r7, #4]
 801a258:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801a25c:	440b      	add	r3, r1
 801a25e:	009b      	lsls	r3, r3, #2
 801a260:	4413      	add	r3, r2
 801a262:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801a264:	69bb      	ldr	r3, [r7, #24]
 801a266:	f023 0307 	bic.w	r3, r3, #7
 801a26a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801a26c:	69bb      	ldr	r3, [r7, #24]
 801a26e:	f003 0307 	and.w	r3, r3, #7
 801a272:	2b00      	cmp	r3, #0
 801a274:	d00a      	beq.n	801a28c <prvInitialiseNewTask+0x58>
	__asm volatile
 801a276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a27a:	f383 8811 	msr	BASEPRI, r3
 801a27e:	f3bf 8f6f 	isb	sy
 801a282:	f3bf 8f4f 	dsb	sy
 801a286:	617b      	str	r3, [r7, #20]
}
 801a288:	bf00      	nop
 801a28a:	e7fe      	b.n	801a28a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801a28c:	68bb      	ldr	r3, [r7, #8]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d01f      	beq.n	801a2d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a292:	2300      	movs	r3, #0
 801a294:	61fb      	str	r3, [r7, #28]
 801a296:	e012      	b.n	801a2be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801a298:	68ba      	ldr	r2, [r7, #8]
 801a29a:	69fb      	ldr	r3, [r7, #28]
 801a29c:	4413      	add	r3, r2
 801a29e:	7819      	ldrb	r1, [r3, #0]
 801a2a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a2a2:	69fb      	ldr	r3, [r7, #28]
 801a2a4:	4413      	add	r3, r2
 801a2a6:	3334      	adds	r3, #52	; 0x34
 801a2a8:	460a      	mov	r2, r1
 801a2aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801a2ac:	68ba      	ldr	r2, [r7, #8]
 801a2ae:	69fb      	ldr	r3, [r7, #28]
 801a2b0:	4413      	add	r3, r2
 801a2b2:	781b      	ldrb	r3, [r3, #0]
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d006      	beq.n	801a2c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801a2b8:	69fb      	ldr	r3, [r7, #28]
 801a2ba:	3301      	adds	r3, #1
 801a2bc:	61fb      	str	r3, [r7, #28]
 801a2be:	69fb      	ldr	r3, [r7, #28]
 801a2c0:	2b0f      	cmp	r3, #15
 801a2c2:	d9e9      	bls.n	801a298 <prvInitialiseNewTask+0x64>
 801a2c4:	e000      	b.n	801a2c8 <prvInitialiseNewTask+0x94>
			{
				break;
 801a2c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2ca:	2200      	movs	r2, #0
 801a2cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801a2d0:	e003      	b.n	801a2da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801a2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2d4:	2200      	movs	r2, #0
 801a2d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801a2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2dc:	2b37      	cmp	r3, #55	; 0x37
 801a2de:	d901      	bls.n	801a2e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801a2e0:	2337      	movs	r3, #55	; 0x37
 801a2e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801a2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a2e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a2ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801a2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2f2:	2200      	movs	r2, #0
 801a2f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801a2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2f8:	3304      	adds	r3, #4
 801a2fa:	4618      	mov	r0, r3
 801a2fc:	f7ff f8be 	bl	801947c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801a300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a302:	3318      	adds	r3, #24
 801a304:	4618      	mov	r0, r3
 801a306:	f7ff f8b9 	bl	801947c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801a30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a30c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a30e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a312:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a318:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801a31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a31e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801a320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a322:	2200      	movs	r2, #0
 801a324:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a328:	2200      	movs	r2, #0
 801a32a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801a32e:	683a      	ldr	r2, [r7, #0]
 801a330:	68f9      	ldr	r1, [r7, #12]
 801a332:	69b8      	ldr	r0, [r7, #24]
 801a334:	f001 fb1a 	bl	801b96c <pxPortInitialiseStack>
 801a338:	4602      	mov	r2, r0
 801a33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a33c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801a33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a340:	2b00      	cmp	r3, #0
 801a342:	d002      	beq.n	801a34a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801a344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a348:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a34a:	bf00      	nop
 801a34c:	3720      	adds	r7, #32
 801a34e:	46bd      	mov	sp, r7
 801a350:	bd80      	pop	{r7, pc}
	...

0801a354 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801a354:	b580      	push	{r7, lr}
 801a356:	b082      	sub	sp, #8
 801a358:	af00      	add	r7, sp, #0
 801a35a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801a35c:	f001 fc32 	bl	801bbc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801a360:	4b2d      	ldr	r3, [pc, #180]	; (801a418 <prvAddNewTaskToReadyList+0xc4>)
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	3301      	adds	r3, #1
 801a366:	4a2c      	ldr	r2, [pc, #176]	; (801a418 <prvAddNewTaskToReadyList+0xc4>)
 801a368:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801a36a:	4b2c      	ldr	r3, [pc, #176]	; (801a41c <prvAddNewTaskToReadyList+0xc8>)
 801a36c:	681b      	ldr	r3, [r3, #0]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d109      	bne.n	801a386 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801a372:	4a2a      	ldr	r2, [pc, #168]	; (801a41c <prvAddNewTaskToReadyList+0xc8>)
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801a378:	4b27      	ldr	r3, [pc, #156]	; (801a418 <prvAddNewTaskToReadyList+0xc4>)
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	2b01      	cmp	r3, #1
 801a37e:	d110      	bne.n	801a3a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801a380:	f000 fdd0 	bl	801af24 <prvInitialiseTaskLists>
 801a384:	e00d      	b.n	801a3a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801a386:	4b26      	ldr	r3, [pc, #152]	; (801a420 <prvAddNewTaskToReadyList+0xcc>)
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d109      	bne.n	801a3a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801a38e:	4b23      	ldr	r3, [pc, #140]	; (801a41c <prvAddNewTaskToReadyList+0xc8>)
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a398:	429a      	cmp	r2, r3
 801a39a:	d802      	bhi.n	801a3a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801a39c:	4a1f      	ldr	r2, [pc, #124]	; (801a41c <prvAddNewTaskToReadyList+0xc8>)
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801a3a2:	4b20      	ldr	r3, [pc, #128]	; (801a424 <prvAddNewTaskToReadyList+0xd0>)
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	3301      	adds	r3, #1
 801a3a8:	4a1e      	ldr	r2, [pc, #120]	; (801a424 <prvAddNewTaskToReadyList+0xd0>)
 801a3aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801a3ac:	4b1d      	ldr	r3, [pc, #116]	; (801a424 <prvAddNewTaskToReadyList+0xd0>)
 801a3ae:	681a      	ldr	r2, [r3, #0]
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3b8:	4b1b      	ldr	r3, [pc, #108]	; (801a428 <prvAddNewTaskToReadyList+0xd4>)
 801a3ba:	681b      	ldr	r3, [r3, #0]
 801a3bc:	429a      	cmp	r2, r3
 801a3be:	d903      	bls.n	801a3c8 <prvAddNewTaskToReadyList+0x74>
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3c4:	4a18      	ldr	r2, [pc, #96]	; (801a428 <prvAddNewTaskToReadyList+0xd4>)
 801a3c6:	6013      	str	r3, [r2, #0]
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3cc:	4613      	mov	r3, r2
 801a3ce:	009b      	lsls	r3, r3, #2
 801a3d0:	4413      	add	r3, r2
 801a3d2:	009b      	lsls	r3, r3, #2
 801a3d4:	4a15      	ldr	r2, [pc, #84]	; (801a42c <prvAddNewTaskToReadyList+0xd8>)
 801a3d6:	441a      	add	r2, r3
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	3304      	adds	r3, #4
 801a3dc:	4619      	mov	r1, r3
 801a3de:	4610      	mov	r0, r2
 801a3e0:	f7ff f859 	bl	8019496 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801a3e4:	f001 fc1e 	bl	801bc24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801a3e8:	4b0d      	ldr	r3, [pc, #52]	; (801a420 <prvAddNewTaskToReadyList+0xcc>)
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d00e      	beq.n	801a40e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801a3f0:	4b0a      	ldr	r3, [pc, #40]	; (801a41c <prvAddNewTaskToReadyList+0xc8>)
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3fa:	429a      	cmp	r2, r3
 801a3fc:	d207      	bcs.n	801a40e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801a3fe:	4b0c      	ldr	r3, [pc, #48]	; (801a430 <prvAddNewTaskToReadyList+0xdc>)
 801a400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a404:	601a      	str	r2, [r3, #0]
 801a406:	f3bf 8f4f 	dsb	sy
 801a40a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a40e:	bf00      	nop
 801a410:	3708      	adds	r7, #8
 801a412:	46bd      	mov	sp, r7
 801a414:	bd80      	pop	{r7, pc}
 801a416:	bf00      	nop
 801a418:	2400346c 	.word	0x2400346c
 801a41c:	24002f98 	.word	0x24002f98
 801a420:	24003478 	.word	0x24003478
 801a424:	24003488 	.word	0x24003488
 801a428:	24003474 	.word	0x24003474
 801a42c:	24002f9c 	.word	0x24002f9c
 801a430:	e000ed04 	.word	0xe000ed04

0801a434 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801a434:	b580      	push	{r7, lr}
 801a436:	b084      	sub	sp, #16
 801a438:	af00      	add	r7, sp, #0
 801a43a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801a43c:	2300      	movs	r3, #0
 801a43e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	2b00      	cmp	r3, #0
 801a444:	d017      	beq.n	801a476 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801a446:	4b13      	ldr	r3, [pc, #76]	; (801a494 <vTaskDelay+0x60>)
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d00a      	beq.n	801a464 <vTaskDelay+0x30>
	__asm volatile
 801a44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a452:	f383 8811 	msr	BASEPRI, r3
 801a456:	f3bf 8f6f 	isb	sy
 801a45a:	f3bf 8f4f 	dsb	sy
 801a45e:	60bb      	str	r3, [r7, #8]
}
 801a460:	bf00      	nop
 801a462:	e7fe      	b.n	801a462 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801a464:	f000 f986 	bl	801a774 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801a468:	2100      	movs	r1, #0
 801a46a:	6878      	ldr	r0, [r7, #4]
 801a46c:	f000 febc 	bl	801b1e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801a470:	f000 f98e 	bl	801a790 <xTaskResumeAll>
 801a474:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801a476:	68fb      	ldr	r3, [r7, #12]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d107      	bne.n	801a48c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801a47c:	4b06      	ldr	r3, [pc, #24]	; (801a498 <vTaskDelay+0x64>)
 801a47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a482:	601a      	str	r2, [r3, #0]
 801a484:	f3bf 8f4f 	dsb	sy
 801a488:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a48c:	bf00      	nop
 801a48e:	3710      	adds	r7, #16
 801a490:	46bd      	mov	sp, r7
 801a492:	bd80      	pop	{r7, pc}
 801a494:	24003494 	.word	0x24003494
 801a498:	e000ed04 	.word	0xe000ed04

0801a49c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801a49c:	b580      	push	{r7, lr}
 801a49e:	b084      	sub	sp, #16
 801a4a0:	af00      	add	r7, sp, #0
 801a4a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801a4a4:	f001 fb8e 	bl	801bbc4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d102      	bne.n	801a4b4 <vTaskSuspend+0x18>
 801a4ae:	4b30      	ldr	r3, [pc, #192]	; (801a570 <vTaskSuspend+0xd4>)
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	e000      	b.n	801a4b6 <vTaskSuspend+0x1a>
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a4b8:	68fb      	ldr	r3, [r7, #12]
 801a4ba:	3304      	adds	r3, #4
 801a4bc:	4618      	mov	r0, r3
 801a4be:	f7ff f847 	bl	8019550 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a4c2:	68fb      	ldr	r3, [r7, #12]
 801a4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d004      	beq.n	801a4d4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a4ca:	68fb      	ldr	r3, [r7, #12]
 801a4cc:	3318      	adds	r3, #24
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	f7ff f83e 	bl	8019550 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	3304      	adds	r3, #4
 801a4d8:	4619      	mov	r1, r3
 801a4da:	4826      	ldr	r0, [pc, #152]	; (801a574 <vTaskSuspend+0xd8>)
 801a4dc:	f7fe ffdb 	bl	8019496 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801a4e0:	68fb      	ldr	r3, [r7, #12]
 801a4e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a4e6:	b2db      	uxtb	r3, r3
 801a4e8:	2b01      	cmp	r3, #1
 801a4ea:	d103      	bne.n	801a4f4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	2200      	movs	r2, #0
 801a4f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 801a4f4:	f001 fb96 	bl	801bc24 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801a4f8:	4b1f      	ldr	r3, [pc, #124]	; (801a578 <vTaskSuspend+0xdc>)
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	2b00      	cmp	r3, #0
 801a4fe:	d005      	beq.n	801a50c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 801a500:	f001 fb60 	bl	801bbc4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 801a504:	f000 fdac 	bl	801b060 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801a508:	f001 fb8c 	bl	801bc24 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801a50c:	4b18      	ldr	r3, [pc, #96]	; (801a570 <vTaskSuspend+0xd4>)
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	68fa      	ldr	r2, [r7, #12]
 801a512:	429a      	cmp	r2, r3
 801a514:	d127      	bne.n	801a566 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 801a516:	4b18      	ldr	r3, [pc, #96]	; (801a578 <vTaskSuspend+0xdc>)
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d017      	beq.n	801a54e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801a51e:	4b17      	ldr	r3, [pc, #92]	; (801a57c <vTaskSuspend+0xe0>)
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	2b00      	cmp	r3, #0
 801a524:	d00a      	beq.n	801a53c <vTaskSuspend+0xa0>
	__asm volatile
 801a526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a52a:	f383 8811 	msr	BASEPRI, r3
 801a52e:	f3bf 8f6f 	isb	sy
 801a532:	f3bf 8f4f 	dsb	sy
 801a536:	60bb      	str	r3, [r7, #8]
}
 801a538:	bf00      	nop
 801a53a:	e7fe      	b.n	801a53a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 801a53c:	4b10      	ldr	r3, [pc, #64]	; (801a580 <vTaskSuspend+0xe4>)
 801a53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a542:	601a      	str	r2, [r3, #0]
 801a544:	f3bf 8f4f 	dsb	sy
 801a548:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a54c:	e00b      	b.n	801a566 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 801a54e:	4b09      	ldr	r3, [pc, #36]	; (801a574 <vTaskSuspend+0xd8>)
 801a550:	681a      	ldr	r2, [r3, #0]
 801a552:	4b0c      	ldr	r3, [pc, #48]	; (801a584 <vTaskSuspend+0xe8>)
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	429a      	cmp	r2, r3
 801a558:	d103      	bne.n	801a562 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 801a55a:	4b05      	ldr	r3, [pc, #20]	; (801a570 <vTaskSuspend+0xd4>)
 801a55c:	2200      	movs	r2, #0
 801a55e:	601a      	str	r2, [r3, #0]
	}
 801a560:	e001      	b.n	801a566 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 801a562:	f000 fa85 	bl	801aa70 <vTaskSwitchContext>
	}
 801a566:	bf00      	nop
 801a568:	3710      	adds	r7, #16
 801a56a:	46bd      	mov	sp, r7
 801a56c:	bd80      	pop	{r7, pc}
 801a56e:	bf00      	nop
 801a570:	24002f98 	.word	0x24002f98
 801a574:	24003458 	.word	0x24003458
 801a578:	24003478 	.word	0x24003478
 801a57c:	24003494 	.word	0x24003494
 801a580:	e000ed04 	.word	0xe000ed04
 801a584:	2400346c 	.word	0x2400346c

0801a588 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801a588:	b480      	push	{r7}
 801a58a:	b087      	sub	sp, #28
 801a58c:	af00      	add	r7, sp, #0
 801a58e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 801a590:	2300      	movs	r3, #0
 801a592:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d10a      	bne.n	801a5b4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801a59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a5a2:	f383 8811 	msr	BASEPRI, r3
 801a5a6:	f3bf 8f6f 	isb	sy
 801a5aa:	f3bf 8f4f 	dsb	sy
 801a5ae:	60fb      	str	r3, [r7, #12]
}
 801a5b0:	bf00      	nop
 801a5b2:	e7fe      	b.n	801a5b2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a5b4:	693b      	ldr	r3, [r7, #16]
 801a5b6:	695b      	ldr	r3, [r3, #20]
 801a5b8:	4a0a      	ldr	r2, [pc, #40]	; (801a5e4 <prvTaskIsTaskSuspended+0x5c>)
 801a5ba:	4293      	cmp	r3, r2
 801a5bc:	d10a      	bne.n	801a5d4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801a5be:	693b      	ldr	r3, [r7, #16]
 801a5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a5c2:	4a09      	ldr	r2, [pc, #36]	; (801a5e8 <prvTaskIsTaskSuspended+0x60>)
 801a5c4:	4293      	cmp	r3, r2
 801a5c6:	d005      	beq.n	801a5d4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801a5c8:	693b      	ldr	r3, [r7, #16]
 801a5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d101      	bne.n	801a5d4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 801a5d0:	2301      	movs	r3, #1
 801a5d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a5d4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	371c      	adds	r7, #28
 801a5da:	46bd      	mov	sp, r7
 801a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5e0:	4770      	bx	lr
 801a5e2:	bf00      	nop
 801a5e4:	24003458 	.word	0x24003458
 801a5e8:	2400342c 	.word	0x2400342c

0801a5ec <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 801a5ec:	b580      	push	{r7, lr}
 801a5ee:	b084      	sub	sp, #16
 801a5f0:	af00      	add	r7, sp, #0
 801a5f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d10a      	bne.n	801a614 <vTaskResume+0x28>
	__asm volatile
 801a5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a602:	f383 8811 	msr	BASEPRI, r3
 801a606:	f3bf 8f6f 	isb	sy
 801a60a:	f3bf 8f4f 	dsb	sy
 801a60e:	60bb      	str	r3, [r7, #8]
}
 801a610:	bf00      	nop
 801a612:	e7fe      	b.n	801a612 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801a614:	4b20      	ldr	r3, [pc, #128]	; (801a698 <vTaskResume+0xac>)
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	68fa      	ldr	r2, [r7, #12]
 801a61a:	429a      	cmp	r2, r3
 801a61c:	d038      	beq.n	801a690 <vTaskResume+0xa4>
 801a61e:	68fb      	ldr	r3, [r7, #12]
 801a620:	2b00      	cmp	r3, #0
 801a622:	d035      	beq.n	801a690 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 801a624:	f001 face 	bl	801bbc4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801a628:	68f8      	ldr	r0, [r7, #12]
 801a62a:	f7ff ffad 	bl	801a588 <prvTaskIsTaskSuspended>
 801a62e:	4603      	mov	r3, r0
 801a630:	2b00      	cmp	r3, #0
 801a632:	d02b      	beq.n	801a68c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 801a634:	68fb      	ldr	r3, [r7, #12]
 801a636:	3304      	adds	r3, #4
 801a638:	4618      	mov	r0, r3
 801a63a:	f7fe ff89 	bl	8019550 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a642:	4b16      	ldr	r3, [pc, #88]	; (801a69c <vTaskResume+0xb0>)
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	429a      	cmp	r2, r3
 801a648:	d903      	bls.n	801a652 <vTaskResume+0x66>
 801a64a:	68fb      	ldr	r3, [r7, #12]
 801a64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a64e:	4a13      	ldr	r2, [pc, #76]	; (801a69c <vTaskResume+0xb0>)
 801a650:	6013      	str	r3, [r2, #0]
 801a652:	68fb      	ldr	r3, [r7, #12]
 801a654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a656:	4613      	mov	r3, r2
 801a658:	009b      	lsls	r3, r3, #2
 801a65a:	4413      	add	r3, r2
 801a65c:	009b      	lsls	r3, r3, #2
 801a65e:	4a10      	ldr	r2, [pc, #64]	; (801a6a0 <vTaskResume+0xb4>)
 801a660:	441a      	add	r2, r3
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	3304      	adds	r3, #4
 801a666:	4619      	mov	r1, r3
 801a668:	4610      	mov	r0, r2
 801a66a:	f7fe ff14 	bl	8019496 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a672:	4b09      	ldr	r3, [pc, #36]	; (801a698 <vTaskResume+0xac>)
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a678:	429a      	cmp	r2, r3
 801a67a:	d307      	bcc.n	801a68c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 801a67c:	4b09      	ldr	r3, [pc, #36]	; (801a6a4 <vTaskResume+0xb8>)
 801a67e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a682:	601a      	str	r2, [r3, #0]
 801a684:	f3bf 8f4f 	dsb	sy
 801a688:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 801a68c:	f001 faca 	bl	801bc24 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a690:	bf00      	nop
 801a692:	3710      	adds	r7, #16
 801a694:	46bd      	mov	sp, r7
 801a696:	bd80      	pop	{r7, pc}
 801a698:	24002f98 	.word	0x24002f98
 801a69c:	24003474 	.word	0x24003474
 801a6a0:	24002f9c 	.word	0x24002f9c
 801a6a4:	e000ed04 	.word	0xe000ed04

0801a6a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801a6a8:	b580      	push	{r7, lr}
 801a6aa:	b08a      	sub	sp, #40	; 0x28
 801a6ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801a6ae:	2300      	movs	r3, #0
 801a6b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801a6b6:	463a      	mov	r2, r7
 801a6b8:	1d39      	adds	r1, r7, #4
 801a6ba:	f107 0308 	add.w	r3, r7, #8
 801a6be:	4618      	mov	r0, r3
 801a6c0:	f7fe fc1c 	bl	8018efc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801a6c4:	6839      	ldr	r1, [r7, #0]
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	68ba      	ldr	r2, [r7, #8]
 801a6ca:	9202      	str	r2, [sp, #8]
 801a6cc:	9301      	str	r3, [sp, #4]
 801a6ce:	2300      	movs	r3, #0
 801a6d0:	9300      	str	r3, [sp, #0]
 801a6d2:	2300      	movs	r3, #0
 801a6d4:	460a      	mov	r2, r1
 801a6d6:	4921      	ldr	r1, [pc, #132]	; (801a75c <vTaskStartScheduler+0xb4>)
 801a6d8:	4821      	ldr	r0, [pc, #132]	; (801a760 <vTaskStartScheduler+0xb8>)
 801a6da:	f7ff fd09 	bl	801a0f0 <xTaskCreateStatic>
 801a6de:	4603      	mov	r3, r0
 801a6e0:	4a20      	ldr	r2, [pc, #128]	; (801a764 <vTaskStartScheduler+0xbc>)
 801a6e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801a6e4:	4b1f      	ldr	r3, [pc, #124]	; (801a764 <vTaskStartScheduler+0xbc>)
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d002      	beq.n	801a6f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801a6ec:	2301      	movs	r3, #1
 801a6ee:	617b      	str	r3, [r7, #20]
 801a6f0:	e001      	b.n	801a6f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801a6f2:	2300      	movs	r3, #0
 801a6f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801a6f6:	697b      	ldr	r3, [r7, #20]
 801a6f8:	2b01      	cmp	r3, #1
 801a6fa:	d102      	bne.n	801a702 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801a6fc:	f000 fdc8 	bl	801b290 <xTimerCreateTimerTask>
 801a700:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801a702:	697b      	ldr	r3, [r7, #20]
 801a704:	2b01      	cmp	r3, #1
 801a706:	d116      	bne.n	801a736 <vTaskStartScheduler+0x8e>
	__asm volatile
 801a708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a70c:	f383 8811 	msr	BASEPRI, r3
 801a710:	f3bf 8f6f 	isb	sy
 801a714:	f3bf 8f4f 	dsb	sy
 801a718:	613b      	str	r3, [r7, #16]
}
 801a71a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801a71c:	4b12      	ldr	r3, [pc, #72]	; (801a768 <vTaskStartScheduler+0xc0>)
 801a71e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a722:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801a724:	4b11      	ldr	r3, [pc, #68]	; (801a76c <vTaskStartScheduler+0xc4>)
 801a726:	2201      	movs	r2, #1
 801a728:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801a72a:	4b11      	ldr	r3, [pc, #68]	; (801a770 <vTaskStartScheduler+0xc8>)
 801a72c:	2200      	movs	r2, #0
 801a72e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801a730:	f001 f9a6 	bl	801ba80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801a734:	e00e      	b.n	801a754 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801a736:	697b      	ldr	r3, [r7, #20]
 801a738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a73c:	d10a      	bne.n	801a754 <vTaskStartScheduler+0xac>
	__asm volatile
 801a73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a742:	f383 8811 	msr	BASEPRI, r3
 801a746:	f3bf 8f6f 	isb	sy
 801a74a:	f3bf 8f4f 	dsb	sy
 801a74e:	60fb      	str	r3, [r7, #12]
}
 801a750:	bf00      	nop
 801a752:	e7fe      	b.n	801a752 <vTaskStartScheduler+0xaa>
}
 801a754:	bf00      	nop
 801a756:	3718      	adds	r7, #24
 801a758:	46bd      	mov	sp, r7
 801a75a:	bd80      	pop	{r7, pc}
 801a75c:	0801c2fc 	.word	0x0801c2fc
 801a760:	0801aef5 	.word	0x0801aef5
 801a764:	24003490 	.word	0x24003490
 801a768:	2400348c 	.word	0x2400348c
 801a76c:	24003478 	.word	0x24003478
 801a770:	24003470 	.word	0x24003470

0801a774 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801a774:	b480      	push	{r7}
 801a776:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801a778:	4b04      	ldr	r3, [pc, #16]	; (801a78c <vTaskSuspendAll+0x18>)
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	3301      	adds	r3, #1
 801a77e:	4a03      	ldr	r2, [pc, #12]	; (801a78c <vTaskSuspendAll+0x18>)
 801a780:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801a782:	bf00      	nop
 801a784:	46bd      	mov	sp, r7
 801a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a78a:	4770      	bx	lr
 801a78c:	24003494 	.word	0x24003494

0801a790 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801a790:	b580      	push	{r7, lr}
 801a792:	b084      	sub	sp, #16
 801a794:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801a796:	2300      	movs	r3, #0
 801a798:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801a79a:	2300      	movs	r3, #0
 801a79c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801a79e:	4b42      	ldr	r3, [pc, #264]	; (801a8a8 <xTaskResumeAll+0x118>)
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	d10a      	bne.n	801a7bc <xTaskResumeAll+0x2c>
	__asm volatile
 801a7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a7aa:	f383 8811 	msr	BASEPRI, r3
 801a7ae:	f3bf 8f6f 	isb	sy
 801a7b2:	f3bf 8f4f 	dsb	sy
 801a7b6:	603b      	str	r3, [r7, #0]
}
 801a7b8:	bf00      	nop
 801a7ba:	e7fe      	b.n	801a7ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801a7bc:	f001 fa02 	bl	801bbc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801a7c0:	4b39      	ldr	r3, [pc, #228]	; (801a8a8 <xTaskResumeAll+0x118>)
 801a7c2:	681b      	ldr	r3, [r3, #0]
 801a7c4:	3b01      	subs	r3, #1
 801a7c6:	4a38      	ldr	r2, [pc, #224]	; (801a8a8 <xTaskResumeAll+0x118>)
 801a7c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a7ca:	4b37      	ldr	r3, [pc, #220]	; (801a8a8 <xTaskResumeAll+0x118>)
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d162      	bne.n	801a898 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801a7d2:	4b36      	ldr	r3, [pc, #216]	; (801a8ac <xTaskResumeAll+0x11c>)
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d05e      	beq.n	801a898 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a7da:	e02f      	b.n	801a83c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a7dc:	4b34      	ldr	r3, [pc, #208]	; (801a8b0 <xTaskResumeAll+0x120>)
 801a7de:	68db      	ldr	r3, [r3, #12]
 801a7e0:	68db      	ldr	r3, [r3, #12]
 801a7e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a7e4:	68fb      	ldr	r3, [r7, #12]
 801a7e6:	3318      	adds	r3, #24
 801a7e8:	4618      	mov	r0, r3
 801a7ea:	f7fe feb1 	bl	8019550 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	3304      	adds	r3, #4
 801a7f2:	4618      	mov	r0, r3
 801a7f4:	f7fe feac 	bl	8019550 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801a7f8:	68fb      	ldr	r3, [r7, #12]
 801a7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a7fc:	4b2d      	ldr	r3, [pc, #180]	; (801a8b4 <xTaskResumeAll+0x124>)
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	429a      	cmp	r2, r3
 801a802:	d903      	bls.n	801a80c <xTaskResumeAll+0x7c>
 801a804:	68fb      	ldr	r3, [r7, #12]
 801a806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a808:	4a2a      	ldr	r2, [pc, #168]	; (801a8b4 <xTaskResumeAll+0x124>)
 801a80a:	6013      	str	r3, [r2, #0]
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a810:	4613      	mov	r3, r2
 801a812:	009b      	lsls	r3, r3, #2
 801a814:	4413      	add	r3, r2
 801a816:	009b      	lsls	r3, r3, #2
 801a818:	4a27      	ldr	r2, [pc, #156]	; (801a8b8 <xTaskResumeAll+0x128>)
 801a81a:	441a      	add	r2, r3
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	3304      	adds	r3, #4
 801a820:	4619      	mov	r1, r3
 801a822:	4610      	mov	r0, r2
 801a824:	f7fe fe37 	bl	8019496 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a82c:	4b23      	ldr	r3, [pc, #140]	; (801a8bc <xTaskResumeAll+0x12c>)
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a832:	429a      	cmp	r2, r3
 801a834:	d302      	bcc.n	801a83c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801a836:	4b22      	ldr	r3, [pc, #136]	; (801a8c0 <xTaskResumeAll+0x130>)
 801a838:	2201      	movs	r2, #1
 801a83a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801a83c:	4b1c      	ldr	r3, [pc, #112]	; (801a8b0 <xTaskResumeAll+0x120>)
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	2b00      	cmp	r3, #0
 801a842:	d1cb      	bne.n	801a7dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801a844:	68fb      	ldr	r3, [r7, #12]
 801a846:	2b00      	cmp	r3, #0
 801a848:	d001      	beq.n	801a84e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801a84a:	f000 fc09 	bl	801b060 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801a84e:	4b1d      	ldr	r3, [pc, #116]	; (801a8c4 <xTaskResumeAll+0x134>)
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	2b00      	cmp	r3, #0
 801a858:	d010      	beq.n	801a87c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801a85a:	f000 f847 	bl	801a8ec <xTaskIncrementTick>
 801a85e:	4603      	mov	r3, r0
 801a860:	2b00      	cmp	r3, #0
 801a862:	d002      	beq.n	801a86a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801a864:	4b16      	ldr	r3, [pc, #88]	; (801a8c0 <xTaskResumeAll+0x130>)
 801a866:	2201      	movs	r2, #1
 801a868:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	3b01      	subs	r3, #1
 801a86e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	2b00      	cmp	r3, #0
 801a874:	d1f1      	bne.n	801a85a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801a876:	4b13      	ldr	r3, [pc, #76]	; (801a8c4 <xTaskResumeAll+0x134>)
 801a878:	2200      	movs	r2, #0
 801a87a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801a87c:	4b10      	ldr	r3, [pc, #64]	; (801a8c0 <xTaskResumeAll+0x130>)
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	2b00      	cmp	r3, #0
 801a882:	d009      	beq.n	801a898 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801a884:	2301      	movs	r3, #1
 801a886:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801a888:	4b0f      	ldr	r3, [pc, #60]	; (801a8c8 <xTaskResumeAll+0x138>)
 801a88a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a88e:	601a      	str	r2, [r3, #0]
 801a890:	f3bf 8f4f 	dsb	sy
 801a894:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801a898:	f001 f9c4 	bl	801bc24 <vPortExitCritical>

	return xAlreadyYielded;
 801a89c:	68bb      	ldr	r3, [r7, #8]
}
 801a89e:	4618      	mov	r0, r3
 801a8a0:	3710      	adds	r7, #16
 801a8a2:	46bd      	mov	sp, r7
 801a8a4:	bd80      	pop	{r7, pc}
 801a8a6:	bf00      	nop
 801a8a8:	24003494 	.word	0x24003494
 801a8ac:	2400346c 	.word	0x2400346c
 801a8b0:	2400342c 	.word	0x2400342c
 801a8b4:	24003474 	.word	0x24003474
 801a8b8:	24002f9c 	.word	0x24002f9c
 801a8bc:	24002f98 	.word	0x24002f98
 801a8c0:	24003480 	.word	0x24003480
 801a8c4:	2400347c 	.word	0x2400347c
 801a8c8:	e000ed04 	.word	0xe000ed04

0801a8cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801a8cc:	b480      	push	{r7}
 801a8ce:	b083      	sub	sp, #12
 801a8d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801a8d2:	4b05      	ldr	r3, [pc, #20]	; (801a8e8 <xTaskGetTickCount+0x1c>)
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801a8d8:	687b      	ldr	r3, [r7, #4]
}
 801a8da:	4618      	mov	r0, r3
 801a8dc:	370c      	adds	r7, #12
 801a8de:	46bd      	mov	sp, r7
 801a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8e4:	4770      	bx	lr
 801a8e6:	bf00      	nop
 801a8e8:	24003470 	.word	0x24003470

0801a8ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801a8ec:	b580      	push	{r7, lr}
 801a8ee:	b086      	sub	sp, #24
 801a8f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801a8f2:	2300      	movs	r3, #0
 801a8f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a8f6:	4b53      	ldr	r3, [pc, #332]	; (801aa44 <xTaskIncrementTick+0x158>)
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	f040 8095 	bne.w	801aa2a <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801a900:	4b51      	ldr	r3, [pc, #324]	; (801aa48 <xTaskIncrementTick+0x15c>)
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	3301      	adds	r3, #1
 801a906:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801a908:	4a4f      	ldr	r2, [pc, #316]	; (801aa48 <xTaskIncrementTick+0x15c>)
 801a90a:	693b      	ldr	r3, [r7, #16]
 801a90c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801a90e:	693b      	ldr	r3, [r7, #16]
 801a910:	2b00      	cmp	r3, #0
 801a912:	d120      	bne.n	801a956 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801a914:	4b4d      	ldr	r3, [pc, #308]	; (801aa4c <xTaskIncrementTick+0x160>)
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	d00a      	beq.n	801a934 <xTaskIncrementTick+0x48>
	__asm volatile
 801a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a922:	f383 8811 	msr	BASEPRI, r3
 801a926:	f3bf 8f6f 	isb	sy
 801a92a:	f3bf 8f4f 	dsb	sy
 801a92e:	603b      	str	r3, [r7, #0]
}
 801a930:	bf00      	nop
 801a932:	e7fe      	b.n	801a932 <xTaskIncrementTick+0x46>
 801a934:	4b45      	ldr	r3, [pc, #276]	; (801aa4c <xTaskIncrementTick+0x160>)
 801a936:	681b      	ldr	r3, [r3, #0]
 801a938:	60fb      	str	r3, [r7, #12]
 801a93a:	4b45      	ldr	r3, [pc, #276]	; (801aa50 <xTaskIncrementTick+0x164>)
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	4a43      	ldr	r2, [pc, #268]	; (801aa4c <xTaskIncrementTick+0x160>)
 801a940:	6013      	str	r3, [r2, #0]
 801a942:	4a43      	ldr	r2, [pc, #268]	; (801aa50 <xTaskIncrementTick+0x164>)
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	6013      	str	r3, [r2, #0]
 801a948:	4b42      	ldr	r3, [pc, #264]	; (801aa54 <xTaskIncrementTick+0x168>)
 801a94a:	681b      	ldr	r3, [r3, #0]
 801a94c:	3301      	adds	r3, #1
 801a94e:	4a41      	ldr	r2, [pc, #260]	; (801aa54 <xTaskIncrementTick+0x168>)
 801a950:	6013      	str	r3, [r2, #0]
 801a952:	f000 fb85 	bl	801b060 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801a956:	4b40      	ldr	r3, [pc, #256]	; (801aa58 <xTaskIncrementTick+0x16c>)
 801a958:	681b      	ldr	r3, [r3, #0]
 801a95a:	693a      	ldr	r2, [r7, #16]
 801a95c:	429a      	cmp	r2, r3
 801a95e:	d349      	bcc.n	801a9f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a960:	4b3a      	ldr	r3, [pc, #232]	; (801aa4c <xTaskIncrementTick+0x160>)
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	2b00      	cmp	r3, #0
 801a968:	d104      	bne.n	801a974 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a96a:	4b3b      	ldr	r3, [pc, #236]	; (801aa58 <xTaskIncrementTick+0x16c>)
 801a96c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a970:	601a      	str	r2, [r3, #0]
					break;
 801a972:	e03f      	b.n	801a9f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a974:	4b35      	ldr	r3, [pc, #212]	; (801aa4c <xTaskIncrementTick+0x160>)
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	68db      	ldr	r3, [r3, #12]
 801a97a:	68db      	ldr	r3, [r3, #12]
 801a97c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801a97e:	68bb      	ldr	r3, [r7, #8]
 801a980:	685b      	ldr	r3, [r3, #4]
 801a982:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801a984:	693a      	ldr	r2, [r7, #16]
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	429a      	cmp	r2, r3
 801a98a:	d203      	bcs.n	801a994 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801a98c:	4a32      	ldr	r2, [pc, #200]	; (801aa58 <xTaskIncrementTick+0x16c>)
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801a992:	e02f      	b.n	801a9f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a994:	68bb      	ldr	r3, [r7, #8]
 801a996:	3304      	adds	r3, #4
 801a998:	4618      	mov	r0, r3
 801a99a:	f7fe fdd9 	bl	8019550 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801a99e:	68bb      	ldr	r3, [r7, #8]
 801a9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d004      	beq.n	801a9b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801a9a6:	68bb      	ldr	r3, [r7, #8]
 801a9a8:	3318      	adds	r3, #24
 801a9aa:	4618      	mov	r0, r3
 801a9ac:	f7fe fdd0 	bl	8019550 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801a9b0:	68bb      	ldr	r3, [r7, #8]
 801a9b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a9b4:	4b29      	ldr	r3, [pc, #164]	; (801aa5c <xTaskIncrementTick+0x170>)
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	429a      	cmp	r2, r3
 801a9ba:	d903      	bls.n	801a9c4 <xTaskIncrementTick+0xd8>
 801a9bc:	68bb      	ldr	r3, [r7, #8]
 801a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9c0:	4a26      	ldr	r2, [pc, #152]	; (801aa5c <xTaskIncrementTick+0x170>)
 801a9c2:	6013      	str	r3, [r2, #0]
 801a9c4:	68bb      	ldr	r3, [r7, #8]
 801a9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a9c8:	4613      	mov	r3, r2
 801a9ca:	009b      	lsls	r3, r3, #2
 801a9cc:	4413      	add	r3, r2
 801a9ce:	009b      	lsls	r3, r3, #2
 801a9d0:	4a23      	ldr	r2, [pc, #140]	; (801aa60 <xTaskIncrementTick+0x174>)
 801a9d2:	441a      	add	r2, r3
 801a9d4:	68bb      	ldr	r3, [r7, #8]
 801a9d6:	3304      	adds	r3, #4
 801a9d8:	4619      	mov	r1, r3
 801a9da:	4610      	mov	r0, r2
 801a9dc:	f7fe fd5b 	bl	8019496 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801a9e0:	68bb      	ldr	r3, [r7, #8]
 801a9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a9e4:	4b1f      	ldr	r3, [pc, #124]	; (801aa64 <xTaskIncrementTick+0x178>)
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a9ea:	429a      	cmp	r2, r3
 801a9ec:	d3b8      	bcc.n	801a960 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801a9ee:	2301      	movs	r3, #1
 801a9f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a9f2:	e7b5      	b.n	801a960 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801a9f4:	4b1b      	ldr	r3, [pc, #108]	; (801aa64 <xTaskIncrementTick+0x178>)
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a9fa:	4919      	ldr	r1, [pc, #100]	; (801aa60 <xTaskIncrementTick+0x174>)
 801a9fc:	4613      	mov	r3, r2
 801a9fe:	009b      	lsls	r3, r3, #2
 801aa00:	4413      	add	r3, r2
 801aa02:	009b      	lsls	r3, r3, #2
 801aa04:	440b      	add	r3, r1
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	2b01      	cmp	r3, #1
 801aa0a:	d901      	bls.n	801aa10 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801aa0c:	2301      	movs	r3, #1
 801aa0e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 801aa10:	4b15      	ldr	r3, [pc, #84]	; (801aa68 <xTaskIncrementTick+0x17c>)
 801aa12:	681b      	ldr	r3, [r3, #0]
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d101      	bne.n	801aa1c <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 801aa18:	f7e7 fcc6 	bl	80023a8 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801aa1c:	4b13      	ldr	r3, [pc, #76]	; (801aa6c <xTaskIncrementTick+0x180>)
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d009      	beq.n	801aa38 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 801aa24:	2301      	movs	r3, #1
 801aa26:	617b      	str	r3, [r7, #20]
 801aa28:	e006      	b.n	801aa38 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801aa2a:	4b0f      	ldr	r3, [pc, #60]	; (801aa68 <xTaskIncrementTick+0x17c>)
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	3301      	adds	r3, #1
 801aa30:	4a0d      	ldr	r2, [pc, #52]	; (801aa68 <xTaskIncrementTick+0x17c>)
 801aa32:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 801aa34:	f7e7 fcb8 	bl	80023a8 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 801aa38:	697b      	ldr	r3, [r7, #20]
}
 801aa3a:	4618      	mov	r0, r3
 801aa3c:	3718      	adds	r7, #24
 801aa3e:	46bd      	mov	sp, r7
 801aa40:	bd80      	pop	{r7, pc}
 801aa42:	bf00      	nop
 801aa44:	24003494 	.word	0x24003494
 801aa48:	24003470 	.word	0x24003470
 801aa4c:	24003424 	.word	0x24003424
 801aa50:	24003428 	.word	0x24003428
 801aa54:	24003484 	.word	0x24003484
 801aa58:	2400348c 	.word	0x2400348c
 801aa5c:	24003474 	.word	0x24003474
 801aa60:	24002f9c 	.word	0x24002f9c
 801aa64:	24002f98 	.word	0x24002f98
 801aa68:	2400347c 	.word	0x2400347c
 801aa6c:	24003480 	.word	0x24003480

0801aa70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801aa70:	b580      	push	{r7, lr}
 801aa72:	b084      	sub	sp, #16
 801aa74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801aa76:	4b2f      	ldr	r3, [pc, #188]	; (801ab34 <vTaskSwitchContext+0xc4>)
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d003      	beq.n	801aa86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801aa7e:	4b2e      	ldr	r3, [pc, #184]	; (801ab38 <vTaskSwitchContext+0xc8>)
 801aa80:	2201      	movs	r2, #1
 801aa82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801aa84:	e052      	b.n	801ab2c <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 801aa86:	4b2c      	ldr	r3, [pc, #176]	; (801ab38 <vTaskSwitchContext+0xc8>)
 801aa88:	2200      	movs	r2, #0
 801aa8a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801aa8c:	4b2b      	ldr	r3, [pc, #172]	; (801ab3c <vTaskSwitchContext+0xcc>)
 801aa8e:	681b      	ldr	r3, [r3, #0]
 801aa90:	681a      	ldr	r2, [r3, #0]
 801aa92:	4b2a      	ldr	r3, [pc, #168]	; (801ab3c <vTaskSwitchContext+0xcc>)
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801aa98:	429a      	cmp	r2, r3
 801aa9a:	d808      	bhi.n	801aaae <vTaskSwitchContext+0x3e>
 801aa9c:	4b27      	ldr	r3, [pc, #156]	; (801ab3c <vTaskSwitchContext+0xcc>)
 801aa9e:	681a      	ldr	r2, [r3, #0]
 801aaa0:	4b26      	ldr	r3, [pc, #152]	; (801ab3c <vTaskSwitchContext+0xcc>)
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	3334      	adds	r3, #52	; 0x34
 801aaa6:	4619      	mov	r1, r3
 801aaa8:	4610      	mov	r0, r2
 801aaaa:	f7e7 fc8b 	bl	80023c4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801aaae:	4b24      	ldr	r3, [pc, #144]	; (801ab40 <vTaskSwitchContext+0xd0>)
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	60fb      	str	r3, [r7, #12]
 801aab4:	e010      	b.n	801aad8 <vTaskSwitchContext+0x68>
 801aab6:	68fb      	ldr	r3, [r7, #12]
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	d10a      	bne.n	801aad2 <vTaskSwitchContext+0x62>
	__asm volatile
 801aabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aac0:	f383 8811 	msr	BASEPRI, r3
 801aac4:	f3bf 8f6f 	isb	sy
 801aac8:	f3bf 8f4f 	dsb	sy
 801aacc:	607b      	str	r3, [r7, #4]
}
 801aace:	bf00      	nop
 801aad0:	e7fe      	b.n	801aad0 <vTaskSwitchContext+0x60>
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	3b01      	subs	r3, #1
 801aad6:	60fb      	str	r3, [r7, #12]
 801aad8:	491a      	ldr	r1, [pc, #104]	; (801ab44 <vTaskSwitchContext+0xd4>)
 801aada:	68fa      	ldr	r2, [r7, #12]
 801aadc:	4613      	mov	r3, r2
 801aade:	009b      	lsls	r3, r3, #2
 801aae0:	4413      	add	r3, r2
 801aae2:	009b      	lsls	r3, r3, #2
 801aae4:	440b      	add	r3, r1
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d0e4      	beq.n	801aab6 <vTaskSwitchContext+0x46>
 801aaec:	68fa      	ldr	r2, [r7, #12]
 801aaee:	4613      	mov	r3, r2
 801aaf0:	009b      	lsls	r3, r3, #2
 801aaf2:	4413      	add	r3, r2
 801aaf4:	009b      	lsls	r3, r3, #2
 801aaf6:	4a13      	ldr	r2, [pc, #76]	; (801ab44 <vTaskSwitchContext+0xd4>)
 801aaf8:	4413      	add	r3, r2
 801aafa:	60bb      	str	r3, [r7, #8]
 801aafc:	68bb      	ldr	r3, [r7, #8]
 801aafe:	685b      	ldr	r3, [r3, #4]
 801ab00:	685a      	ldr	r2, [r3, #4]
 801ab02:	68bb      	ldr	r3, [r7, #8]
 801ab04:	605a      	str	r2, [r3, #4]
 801ab06:	68bb      	ldr	r3, [r7, #8]
 801ab08:	685a      	ldr	r2, [r3, #4]
 801ab0a:	68bb      	ldr	r3, [r7, #8]
 801ab0c:	3308      	adds	r3, #8
 801ab0e:	429a      	cmp	r2, r3
 801ab10:	d104      	bne.n	801ab1c <vTaskSwitchContext+0xac>
 801ab12:	68bb      	ldr	r3, [r7, #8]
 801ab14:	685b      	ldr	r3, [r3, #4]
 801ab16:	685a      	ldr	r2, [r3, #4]
 801ab18:	68bb      	ldr	r3, [r7, #8]
 801ab1a:	605a      	str	r2, [r3, #4]
 801ab1c:	68bb      	ldr	r3, [r7, #8]
 801ab1e:	685b      	ldr	r3, [r3, #4]
 801ab20:	68db      	ldr	r3, [r3, #12]
 801ab22:	4a06      	ldr	r2, [pc, #24]	; (801ab3c <vTaskSwitchContext+0xcc>)
 801ab24:	6013      	str	r3, [r2, #0]
 801ab26:	4a06      	ldr	r2, [pc, #24]	; (801ab40 <vTaskSwitchContext+0xd0>)
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	6013      	str	r3, [r2, #0]
}
 801ab2c:	bf00      	nop
 801ab2e:	3710      	adds	r7, #16
 801ab30:	46bd      	mov	sp, r7
 801ab32:	bd80      	pop	{r7, pc}
 801ab34:	24003494 	.word	0x24003494
 801ab38:	24003480 	.word	0x24003480
 801ab3c:	24002f98 	.word	0x24002f98
 801ab40:	24003474 	.word	0x24003474
 801ab44:	24002f9c 	.word	0x24002f9c

0801ab48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801ab48:	b580      	push	{r7, lr}
 801ab4a:	b084      	sub	sp, #16
 801ab4c:	af00      	add	r7, sp, #0
 801ab4e:	6078      	str	r0, [r7, #4]
 801ab50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d10a      	bne.n	801ab6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801ab58:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ab5c:	f383 8811 	msr	BASEPRI, r3
 801ab60:	f3bf 8f6f 	isb	sy
 801ab64:	f3bf 8f4f 	dsb	sy
 801ab68:	60fb      	str	r3, [r7, #12]
}
 801ab6a:	bf00      	nop
 801ab6c:	e7fe      	b.n	801ab6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801ab6e:	4b07      	ldr	r3, [pc, #28]	; (801ab8c <vTaskPlaceOnEventList+0x44>)
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	3318      	adds	r3, #24
 801ab74:	4619      	mov	r1, r3
 801ab76:	6878      	ldr	r0, [r7, #4]
 801ab78:	f7fe fcb1 	bl	80194de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801ab7c:	2101      	movs	r1, #1
 801ab7e:	6838      	ldr	r0, [r7, #0]
 801ab80:	f000 fb32 	bl	801b1e8 <prvAddCurrentTaskToDelayedList>
}
 801ab84:	bf00      	nop
 801ab86:	3710      	adds	r7, #16
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	bd80      	pop	{r7, pc}
 801ab8c:	24002f98 	.word	0x24002f98

0801ab90 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801ab90:	b580      	push	{r7, lr}
 801ab92:	b086      	sub	sp, #24
 801ab94:	af00      	add	r7, sp, #0
 801ab96:	60f8      	str	r0, [r7, #12]
 801ab98:	60b9      	str	r1, [r7, #8]
 801ab9a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d10a      	bne.n	801abb8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801aba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aba6:	f383 8811 	msr	BASEPRI, r3
 801abaa:	f3bf 8f6f 	isb	sy
 801abae:	f3bf 8f4f 	dsb	sy
 801abb2:	617b      	str	r3, [r7, #20]
}
 801abb4:	bf00      	nop
 801abb6:	e7fe      	b.n	801abb6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801abb8:	4b11      	ldr	r3, [pc, #68]	; (801ac00 <vTaskPlaceOnUnorderedEventList+0x70>)
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	d10a      	bne.n	801abd6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801abc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801abc4:	f383 8811 	msr	BASEPRI, r3
 801abc8:	f3bf 8f6f 	isb	sy
 801abcc:	f3bf 8f4f 	dsb	sy
 801abd0:	613b      	str	r3, [r7, #16]
}
 801abd2:	bf00      	nop
 801abd4:	e7fe      	b.n	801abd4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801abd6:	4b0b      	ldr	r3, [pc, #44]	; (801ac04 <vTaskPlaceOnUnorderedEventList+0x74>)
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	68ba      	ldr	r2, [r7, #8]
 801abdc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801abe0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801abe2:	4b08      	ldr	r3, [pc, #32]	; (801ac04 <vTaskPlaceOnUnorderedEventList+0x74>)
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	3318      	adds	r3, #24
 801abe8:	4619      	mov	r1, r3
 801abea:	68f8      	ldr	r0, [r7, #12]
 801abec:	f7fe fc53 	bl	8019496 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801abf0:	2101      	movs	r1, #1
 801abf2:	6878      	ldr	r0, [r7, #4]
 801abf4:	f000 faf8 	bl	801b1e8 <prvAddCurrentTaskToDelayedList>
}
 801abf8:	bf00      	nop
 801abfa:	3718      	adds	r7, #24
 801abfc:	46bd      	mov	sp, r7
 801abfe:	bd80      	pop	{r7, pc}
 801ac00:	24003494 	.word	0x24003494
 801ac04:	24002f98 	.word	0x24002f98

0801ac08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801ac08:	b580      	push	{r7, lr}
 801ac0a:	b086      	sub	sp, #24
 801ac0c:	af00      	add	r7, sp, #0
 801ac0e:	60f8      	str	r0, [r7, #12]
 801ac10:	60b9      	str	r1, [r7, #8]
 801ac12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801ac14:	68fb      	ldr	r3, [r7, #12]
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d10a      	bne.n	801ac30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801ac1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac1e:	f383 8811 	msr	BASEPRI, r3
 801ac22:	f3bf 8f6f 	isb	sy
 801ac26:	f3bf 8f4f 	dsb	sy
 801ac2a:	617b      	str	r3, [r7, #20]
}
 801ac2c:	bf00      	nop
 801ac2e:	e7fe      	b.n	801ac2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801ac30:	4b0a      	ldr	r3, [pc, #40]	; (801ac5c <vTaskPlaceOnEventListRestricted+0x54>)
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	3318      	adds	r3, #24
 801ac36:	4619      	mov	r1, r3
 801ac38:	68f8      	ldr	r0, [r7, #12]
 801ac3a:	f7fe fc2c 	bl	8019496 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	d002      	beq.n	801ac4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801ac44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ac48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801ac4a:	6879      	ldr	r1, [r7, #4]
 801ac4c:	68b8      	ldr	r0, [r7, #8]
 801ac4e:	f000 facb 	bl	801b1e8 <prvAddCurrentTaskToDelayedList>
	}
 801ac52:	bf00      	nop
 801ac54:	3718      	adds	r7, #24
 801ac56:	46bd      	mov	sp, r7
 801ac58:	bd80      	pop	{r7, pc}
 801ac5a:	bf00      	nop
 801ac5c:	24002f98 	.word	0x24002f98

0801ac60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801ac60:	b580      	push	{r7, lr}
 801ac62:	b086      	sub	sp, #24
 801ac64:	af00      	add	r7, sp, #0
 801ac66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	68db      	ldr	r3, [r3, #12]
 801ac6c:	68db      	ldr	r3, [r3, #12]
 801ac6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801ac70:	693b      	ldr	r3, [r7, #16]
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d10a      	bne.n	801ac8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801ac76:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac7a:	f383 8811 	msr	BASEPRI, r3
 801ac7e:	f3bf 8f6f 	isb	sy
 801ac82:	f3bf 8f4f 	dsb	sy
 801ac86:	60fb      	str	r3, [r7, #12]
}
 801ac88:	bf00      	nop
 801ac8a:	e7fe      	b.n	801ac8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801ac8c:	693b      	ldr	r3, [r7, #16]
 801ac8e:	3318      	adds	r3, #24
 801ac90:	4618      	mov	r0, r3
 801ac92:	f7fe fc5d 	bl	8019550 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801ac96:	4b1e      	ldr	r3, [pc, #120]	; (801ad10 <xTaskRemoveFromEventList+0xb0>)
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d11d      	bne.n	801acda <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801ac9e:	693b      	ldr	r3, [r7, #16]
 801aca0:	3304      	adds	r3, #4
 801aca2:	4618      	mov	r0, r3
 801aca4:	f7fe fc54 	bl	8019550 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801aca8:	693b      	ldr	r3, [r7, #16]
 801acaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801acac:	4b19      	ldr	r3, [pc, #100]	; (801ad14 <xTaskRemoveFromEventList+0xb4>)
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	429a      	cmp	r2, r3
 801acb2:	d903      	bls.n	801acbc <xTaskRemoveFromEventList+0x5c>
 801acb4:	693b      	ldr	r3, [r7, #16]
 801acb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801acb8:	4a16      	ldr	r2, [pc, #88]	; (801ad14 <xTaskRemoveFromEventList+0xb4>)
 801acba:	6013      	str	r3, [r2, #0]
 801acbc:	693b      	ldr	r3, [r7, #16]
 801acbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801acc0:	4613      	mov	r3, r2
 801acc2:	009b      	lsls	r3, r3, #2
 801acc4:	4413      	add	r3, r2
 801acc6:	009b      	lsls	r3, r3, #2
 801acc8:	4a13      	ldr	r2, [pc, #76]	; (801ad18 <xTaskRemoveFromEventList+0xb8>)
 801acca:	441a      	add	r2, r3
 801accc:	693b      	ldr	r3, [r7, #16]
 801acce:	3304      	adds	r3, #4
 801acd0:	4619      	mov	r1, r3
 801acd2:	4610      	mov	r0, r2
 801acd4:	f7fe fbdf 	bl	8019496 <vListInsertEnd>
 801acd8:	e005      	b.n	801ace6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801acda:	693b      	ldr	r3, [r7, #16]
 801acdc:	3318      	adds	r3, #24
 801acde:	4619      	mov	r1, r3
 801ace0:	480e      	ldr	r0, [pc, #56]	; (801ad1c <xTaskRemoveFromEventList+0xbc>)
 801ace2:	f7fe fbd8 	bl	8019496 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801ace6:	693b      	ldr	r3, [r7, #16]
 801ace8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801acea:	4b0d      	ldr	r3, [pc, #52]	; (801ad20 <xTaskRemoveFromEventList+0xc0>)
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801acf0:	429a      	cmp	r2, r3
 801acf2:	d905      	bls.n	801ad00 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801acf4:	2301      	movs	r3, #1
 801acf6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801acf8:	4b0a      	ldr	r3, [pc, #40]	; (801ad24 <xTaskRemoveFromEventList+0xc4>)
 801acfa:	2201      	movs	r2, #1
 801acfc:	601a      	str	r2, [r3, #0]
 801acfe:	e001      	b.n	801ad04 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801ad00:	2300      	movs	r3, #0
 801ad02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801ad04:	697b      	ldr	r3, [r7, #20]
}
 801ad06:	4618      	mov	r0, r3
 801ad08:	3718      	adds	r7, #24
 801ad0a:	46bd      	mov	sp, r7
 801ad0c:	bd80      	pop	{r7, pc}
 801ad0e:	bf00      	nop
 801ad10:	24003494 	.word	0x24003494
 801ad14:	24003474 	.word	0x24003474
 801ad18:	24002f9c 	.word	0x24002f9c
 801ad1c:	2400342c 	.word	0x2400342c
 801ad20:	24002f98 	.word	0x24002f98
 801ad24:	24003480 	.word	0x24003480

0801ad28 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801ad28:	b580      	push	{r7, lr}
 801ad2a:	b086      	sub	sp, #24
 801ad2c:	af00      	add	r7, sp, #0
 801ad2e:	6078      	str	r0, [r7, #4]
 801ad30:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801ad32:	4b29      	ldr	r3, [pc, #164]	; (801add8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d10a      	bne.n	801ad50 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801ad3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad3e:	f383 8811 	msr	BASEPRI, r3
 801ad42:	f3bf 8f6f 	isb	sy
 801ad46:	f3bf 8f4f 	dsb	sy
 801ad4a:	613b      	str	r3, [r7, #16]
}
 801ad4c:	bf00      	nop
 801ad4e:	e7fe      	b.n	801ad4e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801ad50:	683b      	ldr	r3, [r7, #0]
 801ad52:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	68db      	ldr	r3, [r3, #12]
 801ad5e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801ad60:	697b      	ldr	r3, [r7, #20]
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	d10a      	bne.n	801ad7c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801ad66:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad6a:	f383 8811 	msr	BASEPRI, r3
 801ad6e:	f3bf 8f6f 	isb	sy
 801ad72:	f3bf 8f4f 	dsb	sy
 801ad76:	60fb      	str	r3, [r7, #12]
}
 801ad78:	bf00      	nop
 801ad7a:	e7fe      	b.n	801ad7a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 801ad7c:	6878      	ldr	r0, [r7, #4]
 801ad7e:	f7fe fbe7 	bl	8019550 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801ad82:	697b      	ldr	r3, [r7, #20]
 801ad84:	3304      	adds	r3, #4
 801ad86:	4618      	mov	r0, r3
 801ad88:	f7fe fbe2 	bl	8019550 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801ad8c:	697b      	ldr	r3, [r7, #20]
 801ad8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ad90:	4b12      	ldr	r3, [pc, #72]	; (801addc <vTaskRemoveFromUnorderedEventList+0xb4>)
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	429a      	cmp	r2, r3
 801ad96:	d903      	bls.n	801ada0 <vTaskRemoveFromUnorderedEventList+0x78>
 801ad98:	697b      	ldr	r3, [r7, #20]
 801ad9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad9c:	4a0f      	ldr	r2, [pc, #60]	; (801addc <vTaskRemoveFromUnorderedEventList+0xb4>)
 801ad9e:	6013      	str	r3, [r2, #0]
 801ada0:	697b      	ldr	r3, [r7, #20]
 801ada2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ada4:	4613      	mov	r3, r2
 801ada6:	009b      	lsls	r3, r3, #2
 801ada8:	4413      	add	r3, r2
 801adaa:	009b      	lsls	r3, r3, #2
 801adac:	4a0c      	ldr	r2, [pc, #48]	; (801ade0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801adae:	441a      	add	r2, r3
 801adb0:	697b      	ldr	r3, [r7, #20]
 801adb2:	3304      	adds	r3, #4
 801adb4:	4619      	mov	r1, r3
 801adb6:	4610      	mov	r0, r2
 801adb8:	f7fe fb6d 	bl	8019496 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801adbc:	697b      	ldr	r3, [r7, #20]
 801adbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801adc0:	4b08      	ldr	r3, [pc, #32]	; (801ade4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801adc6:	429a      	cmp	r2, r3
 801adc8:	d902      	bls.n	801add0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801adca:	4b07      	ldr	r3, [pc, #28]	; (801ade8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801adcc:	2201      	movs	r2, #1
 801adce:	601a      	str	r2, [r3, #0]
	}
}
 801add0:	bf00      	nop
 801add2:	3718      	adds	r7, #24
 801add4:	46bd      	mov	sp, r7
 801add6:	bd80      	pop	{r7, pc}
 801add8:	24003494 	.word	0x24003494
 801addc:	24003474 	.word	0x24003474
 801ade0:	24002f9c 	.word	0x24002f9c
 801ade4:	24002f98 	.word	0x24002f98
 801ade8:	24003480 	.word	0x24003480

0801adec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801adec:	b480      	push	{r7}
 801adee:	b083      	sub	sp, #12
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801adf4:	4b06      	ldr	r3, [pc, #24]	; (801ae10 <vTaskInternalSetTimeOutState+0x24>)
 801adf6:	681a      	ldr	r2, [r3, #0]
 801adf8:	687b      	ldr	r3, [r7, #4]
 801adfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801adfc:	4b05      	ldr	r3, [pc, #20]	; (801ae14 <vTaskInternalSetTimeOutState+0x28>)
 801adfe:	681a      	ldr	r2, [r3, #0]
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	605a      	str	r2, [r3, #4]
}
 801ae04:	bf00      	nop
 801ae06:	370c      	adds	r7, #12
 801ae08:	46bd      	mov	sp, r7
 801ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae0e:	4770      	bx	lr
 801ae10:	24003484 	.word	0x24003484
 801ae14:	24003470 	.word	0x24003470

0801ae18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b088      	sub	sp, #32
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	6078      	str	r0, [r7, #4]
 801ae20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	d10a      	bne.n	801ae3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801ae28:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae2c:	f383 8811 	msr	BASEPRI, r3
 801ae30:	f3bf 8f6f 	isb	sy
 801ae34:	f3bf 8f4f 	dsb	sy
 801ae38:	613b      	str	r3, [r7, #16]
}
 801ae3a:	bf00      	nop
 801ae3c:	e7fe      	b.n	801ae3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801ae3e:	683b      	ldr	r3, [r7, #0]
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d10a      	bne.n	801ae5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801ae44:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae48:	f383 8811 	msr	BASEPRI, r3
 801ae4c:	f3bf 8f6f 	isb	sy
 801ae50:	f3bf 8f4f 	dsb	sy
 801ae54:	60fb      	str	r3, [r7, #12]
}
 801ae56:	bf00      	nop
 801ae58:	e7fe      	b.n	801ae58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801ae5a:	f000 feb3 	bl	801bbc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801ae5e:	4b1d      	ldr	r3, [pc, #116]	; (801aed4 <xTaskCheckForTimeOut+0xbc>)
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	685b      	ldr	r3, [r3, #4]
 801ae68:	69ba      	ldr	r2, [r7, #24]
 801ae6a:	1ad3      	subs	r3, r2, r3
 801ae6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801ae6e:	683b      	ldr	r3, [r7, #0]
 801ae70:	681b      	ldr	r3, [r3, #0]
 801ae72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ae76:	d102      	bne.n	801ae7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801ae78:	2300      	movs	r3, #0
 801ae7a:	61fb      	str	r3, [r7, #28]
 801ae7c:	e023      	b.n	801aec6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	681a      	ldr	r2, [r3, #0]
 801ae82:	4b15      	ldr	r3, [pc, #84]	; (801aed8 <xTaskCheckForTimeOut+0xc0>)
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	429a      	cmp	r2, r3
 801ae88:	d007      	beq.n	801ae9a <xTaskCheckForTimeOut+0x82>
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	685b      	ldr	r3, [r3, #4]
 801ae8e:	69ba      	ldr	r2, [r7, #24]
 801ae90:	429a      	cmp	r2, r3
 801ae92:	d302      	bcc.n	801ae9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801ae94:	2301      	movs	r3, #1
 801ae96:	61fb      	str	r3, [r7, #28]
 801ae98:	e015      	b.n	801aec6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801ae9a:	683b      	ldr	r3, [r7, #0]
 801ae9c:	681b      	ldr	r3, [r3, #0]
 801ae9e:	697a      	ldr	r2, [r7, #20]
 801aea0:	429a      	cmp	r2, r3
 801aea2:	d20b      	bcs.n	801aebc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801aea4:	683b      	ldr	r3, [r7, #0]
 801aea6:	681a      	ldr	r2, [r3, #0]
 801aea8:	697b      	ldr	r3, [r7, #20]
 801aeaa:	1ad2      	subs	r2, r2, r3
 801aeac:	683b      	ldr	r3, [r7, #0]
 801aeae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801aeb0:	6878      	ldr	r0, [r7, #4]
 801aeb2:	f7ff ff9b 	bl	801adec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	61fb      	str	r3, [r7, #28]
 801aeba:	e004      	b.n	801aec6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801aebc:	683b      	ldr	r3, [r7, #0]
 801aebe:	2200      	movs	r2, #0
 801aec0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801aec2:	2301      	movs	r3, #1
 801aec4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801aec6:	f000 fead 	bl	801bc24 <vPortExitCritical>

	return xReturn;
 801aeca:	69fb      	ldr	r3, [r7, #28]
}
 801aecc:	4618      	mov	r0, r3
 801aece:	3720      	adds	r7, #32
 801aed0:	46bd      	mov	sp, r7
 801aed2:	bd80      	pop	{r7, pc}
 801aed4:	24003470 	.word	0x24003470
 801aed8:	24003484 	.word	0x24003484

0801aedc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801aedc:	b480      	push	{r7}
 801aede:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801aee0:	4b03      	ldr	r3, [pc, #12]	; (801aef0 <vTaskMissedYield+0x14>)
 801aee2:	2201      	movs	r2, #1
 801aee4:	601a      	str	r2, [r3, #0]
}
 801aee6:	bf00      	nop
 801aee8:	46bd      	mov	sp, r7
 801aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeee:	4770      	bx	lr
 801aef0:	24003480 	.word	0x24003480

0801aef4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801aef4:	b580      	push	{r7, lr}
 801aef6:	b082      	sub	sp, #8
 801aef8:	af00      	add	r7, sp, #0
 801aefa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801aefc:	f000 f852 	bl	801afa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801af00:	4b06      	ldr	r3, [pc, #24]	; (801af1c <prvIdleTask+0x28>)
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	2b01      	cmp	r3, #1
 801af06:	d9f9      	bls.n	801aefc <prvIdleTask+0x8>
			{
				taskYIELD();
 801af08:	4b05      	ldr	r3, [pc, #20]	; (801af20 <prvIdleTask+0x2c>)
 801af0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801af0e:	601a      	str	r2, [r3, #0]
 801af10:	f3bf 8f4f 	dsb	sy
 801af14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801af18:	e7f0      	b.n	801aefc <prvIdleTask+0x8>
 801af1a:	bf00      	nop
 801af1c:	24002f9c 	.word	0x24002f9c
 801af20:	e000ed04 	.word	0xe000ed04

0801af24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801af24:	b580      	push	{r7, lr}
 801af26:	b082      	sub	sp, #8
 801af28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801af2a:	2300      	movs	r3, #0
 801af2c:	607b      	str	r3, [r7, #4]
 801af2e:	e00c      	b.n	801af4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801af30:	687a      	ldr	r2, [r7, #4]
 801af32:	4613      	mov	r3, r2
 801af34:	009b      	lsls	r3, r3, #2
 801af36:	4413      	add	r3, r2
 801af38:	009b      	lsls	r3, r3, #2
 801af3a:	4a12      	ldr	r2, [pc, #72]	; (801af84 <prvInitialiseTaskLists+0x60>)
 801af3c:	4413      	add	r3, r2
 801af3e:	4618      	mov	r0, r3
 801af40:	f7fe fa7c 	bl	801943c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	3301      	adds	r3, #1
 801af48:	607b      	str	r3, [r7, #4]
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	2b37      	cmp	r3, #55	; 0x37
 801af4e:	d9ef      	bls.n	801af30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801af50:	480d      	ldr	r0, [pc, #52]	; (801af88 <prvInitialiseTaskLists+0x64>)
 801af52:	f7fe fa73 	bl	801943c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801af56:	480d      	ldr	r0, [pc, #52]	; (801af8c <prvInitialiseTaskLists+0x68>)
 801af58:	f7fe fa70 	bl	801943c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801af5c:	480c      	ldr	r0, [pc, #48]	; (801af90 <prvInitialiseTaskLists+0x6c>)
 801af5e:	f7fe fa6d 	bl	801943c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801af62:	480c      	ldr	r0, [pc, #48]	; (801af94 <prvInitialiseTaskLists+0x70>)
 801af64:	f7fe fa6a 	bl	801943c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801af68:	480b      	ldr	r0, [pc, #44]	; (801af98 <prvInitialiseTaskLists+0x74>)
 801af6a:	f7fe fa67 	bl	801943c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801af6e:	4b0b      	ldr	r3, [pc, #44]	; (801af9c <prvInitialiseTaskLists+0x78>)
 801af70:	4a05      	ldr	r2, [pc, #20]	; (801af88 <prvInitialiseTaskLists+0x64>)
 801af72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801af74:	4b0a      	ldr	r3, [pc, #40]	; (801afa0 <prvInitialiseTaskLists+0x7c>)
 801af76:	4a05      	ldr	r2, [pc, #20]	; (801af8c <prvInitialiseTaskLists+0x68>)
 801af78:	601a      	str	r2, [r3, #0]
}
 801af7a:	bf00      	nop
 801af7c:	3708      	adds	r7, #8
 801af7e:	46bd      	mov	sp, r7
 801af80:	bd80      	pop	{r7, pc}
 801af82:	bf00      	nop
 801af84:	24002f9c 	.word	0x24002f9c
 801af88:	240033fc 	.word	0x240033fc
 801af8c:	24003410 	.word	0x24003410
 801af90:	2400342c 	.word	0x2400342c
 801af94:	24003440 	.word	0x24003440
 801af98:	24003458 	.word	0x24003458
 801af9c:	24003424 	.word	0x24003424
 801afa0:	24003428 	.word	0x24003428

0801afa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801afa4:	b580      	push	{r7, lr}
 801afa6:	b082      	sub	sp, #8
 801afa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801afaa:	e019      	b.n	801afe0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801afac:	f000 fe0a 	bl	801bbc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801afb0:	4b10      	ldr	r3, [pc, #64]	; (801aff4 <prvCheckTasksWaitingTermination+0x50>)
 801afb2:	68db      	ldr	r3, [r3, #12]
 801afb4:	68db      	ldr	r3, [r3, #12]
 801afb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	3304      	adds	r3, #4
 801afbc:	4618      	mov	r0, r3
 801afbe:	f7fe fac7 	bl	8019550 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801afc2:	4b0d      	ldr	r3, [pc, #52]	; (801aff8 <prvCheckTasksWaitingTermination+0x54>)
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	3b01      	subs	r3, #1
 801afc8:	4a0b      	ldr	r2, [pc, #44]	; (801aff8 <prvCheckTasksWaitingTermination+0x54>)
 801afca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801afcc:	4b0b      	ldr	r3, [pc, #44]	; (801affc <prvCheckTasksWaitingTermination+0x58>)
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	3b01      	subs	r3, #1
 801afd2:	4a0a      	ldr	r2, [pc, #40]	; (801affc <prvCheckTasksWaitingTermination+0x58>)
 801afd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801afd6:	f000 fe25 	bl	801bc24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801afda:	6878      	ldr	r0, [r7, #4]
 801afdc:	f000 f810 	bl	801b000 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801afe0:	4b06      	ldr	r3, [pc, #24]	; (801affc <prvCheckTasksWaitingTermination+0x58>)
 801afe2:	681b      	ldr	r3, [r3, #0]
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d1e1      	bne.n	801afac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801afe8:	bf00      	nop
 801afea:	bf00      	nop
 801afec:	3708      	adds	r7, #8
 801afee:	46bd      	mov	sp, r7
 801aff0:	bd80      	pop	{r7, pc}
 801aff2:	bf00      	nop
 801aff4:	24003440 	.word	0x24003440
 801aff8:	2400346c 	.word	0x2400346c
 801affc:	24003454 	.word	0x24003454

0801b000 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801b000:	b580      	push	{r7, lr}
 801b002:	b084      	sub	sp, #16
 801b004:	af00      	add	r7, sp, #0
 801b006:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d108      	bne.n	801b024 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b016:	4618      	mov	r0, r3
 801b018:	f000 ffc2 	bl	801bfa0 <vPortFree>
				vPortFree( pxTCB );
 801b01c:	6878      	ldr	r0, [r7, #4]
 801b01e:	f000 ffbf 	bl	801bfa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801b022:	e018      	b.n	801b056 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801b02a:	2b01      	cmp	r3, #1
 801b02c:	d103      	bne.n	801b036 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801b02e:	6878      	ldr	r0, [r7, #4]
 801b030:	f000 ffb6 	bl	801bfa0 <vPortFree>
	}
 801b034:	e00f      	b.n	801b056 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801b03c:	2b02      	cmp	r3, #2
 801b03e:	d00a      	beq.n	801b056 <prvDeleteTCB+0x56>
	__asm volatile
 801b040:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b044:	f383 8811 	msr	BASEPRI, r3
 801b048:	f3bf 8f6f 	isb	sy
 801b04c:	f3bf 8f4f 	dsb	sy
 801b050:	60fb      	str	r3, [r7, #12]
}
 801b052:	bf00      	nop
 801b054:	e7fe      	b.n	801b054 <prvDeleteTCB+0x54>
	}
 801b056:	bf00      	nop
 801b058:	3710      	adds	r7, #16
 801b05a:	46bd      	mov	sp, r7
 801b05c:	bd80      	pop	{r7, pc}
	...

0801b060 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801b060:	b480      	push	{r7}
 801b062:	b083      	sub	sp, #12
 801b064:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801b066:	4b0c      	ldr	r3, [pc, #48]	; (801b098 <prvResetNextTaskUnblockTime+0x38>)
 801b068:	681b      	ldr	r3, [r3, #0]
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d104      	bne.n	801b07a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801b070:	4b0a      	ldr	r3, [pc, #40]	; (801b09c <prvResetNextTaskUnblockTime+0x3c>)
 801b072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b076:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801b078:	e008      	b.n	801b08c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b07a:	4b07      	ldr	r3, [pc, #28]	; (801b098 <prvResetNextTaskUnblockTime+0x38>)
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	68db      	ldr	r3, [r3, #12]
 801b080:	68db      	ldr	r3, [r3, #12]
 801b082:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	685b      	ldr	r3, [r3, #4]
 801b088:	4a04      	ldr	r2, [pc, #16]	; (801b09c <prvResetNextTaskUnblockTime+0x3c>)
 801b08a:	6013      	str	r3, [r2, #0]
}
 801b08c:	bf00      	nop
 801b08e:	370c      	adds	r7, #12
 801b090:	46bd      	mov	sp, r7
 801b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b096:	4770      	bx	lr
 801b098:	24003424 	.word	0x24003424
 801b09c:	2400348c 	.word	0x2400348c

0801b0a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801b0a0:	b480      	push	{r7}
 801b0a2:	b083      	sub	sp, #12
 801b0a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801b0a6:	4b0b      	ldr	r3, [pc, #44]	; (801b0d4 <xTaskGetSchedulerState+0x34>)
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	2b00      	cmp	r3, #0
 801b0ac:	d102      	bne.n	801b0b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801b0ae:	2301      	movs	r3, #1
 801b0b0:	607b      	str	r3, [r7, #4]
 801b0b2:	e008      	b.n	801b0c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b0b4:	4b08      	ldr	r3, [pc, #32]	; (801b0d8 <xTaskGetSchedulerState+0x38>)
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d102      	bne.n	801b0c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801b0bc:	2302      	movs	r3, #2
 801b0be:	607b      	str	r3, [r7, #4]
 801b0c0:	e001      	b.n	801b0c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801b0c2:	2300      	movs	r3, #0
 801b0c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801b0c6:	687b      	ldr	r3, [r7, #4]
	}
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	370c      	adds	r7, #12
 801b0cc:	46bd      	mov	sp, r7
 801b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0d2:	4770      	bx	lr
 801b0d4:	24003478 	.word	0x24003478
 801b0d8:	24003494 	.word	0x24003494

0801b0dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801b0dc:	b580      	push	{r7, lr}
 801b0de:	b086      	sub	sp, #24
 801b0e0:	af00      	add	r7, sp, #0
 801b0e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801b0e8:	2300      	movs	r3, #0
 801b0ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	d056      	beq.n	801b1a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801b0f2:	4b2e      	ldr	r3, [pc, #184]	; (801b1ac <xTaskPriorityDisinherit+0xd0>)
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	693a      	ldr	r2, [r7, #16]
 801b0f8:	429a      	cmp	r2, r3
 801b0fa:	d00a      	beq.n	801b112 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801b0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b100:	f383 8811 	msr	BASEPRI, r3
 801b104:	f3bf 8f6f 	isb	sy
 801b108:	f3bf 8f4f 	dsb	sy
 801b10c:	60fb      	str	r3, [r7, #12]
}
 801b10e:	bf00      	nop
 801b110:	e7fe      	b.n	801b110 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801b112:	693b      	ldr	r3, [r7, #16]
 801b114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b116:	2b00      	cmp	r3, #0
 801b118:	d10a      	bne.n	801b130 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801b11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b11e:	f383 8811 	msr	BASEPRI, r3
 801b122:	f3bf 8f6f 	isb	sy
 801b126:	f3bf 8f4f 	dsb	sy
 801b12a:	60bb      	str	r3, [r7, #8]
}
 801b12c:	bf00      	nop
 801b12e:	e7fe      	b.n	801b12e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801b130:	693b      	ldr	r3, [r7, #16]
 801b132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b134:	1e5a      	subs	r2, r3, #1
 801b136:	693b      	ldr	r3, [r7, #16]
 801b138:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801b13a:	693b      	ldr	r3, [r7, #16]
 801b13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b13e:	693b      	ldr	r3, [r7, #16]
 801b140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b142:	429a      	cmp	r2, r3
 801b144:	d02c      	beq.n	801b1a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801b146:	693b      	ldr	r3, [r7, #16]
 801b148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	d128      	bne.n	801b1a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b14e:	693b      	ldr	r3, [r7, #16]
 801b150:	3304      	adds	r3, #4
 801b152:	4618      	mov	r0, r3
 801b154:	f7fe f9fc 	bl	8019550 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801b158:	693b      	ldr	r3, [r7, #16]
 801b15a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b15c:	693b      	ldr	r3, [r7, #16]
 801b15e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b160:	693b      	ldr	r3, [r7, #16]
 801b162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b164:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801b168:	693b      	ldr	r3, [r7, #16]
 801b16a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801b16c:	693b      	ldr	r3, [r7, #16]
 801b16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b170:	4b0f      	ldr	r3, [pc, #60]	; (801b1b0 <xTaskPriorityDisinherit+0xd4>)
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	429a      	cmp	r2, r3
 801b176:	d903      	bls.n	801b180 <xTaskPriorityDisinherit+0xa4>
 801b178:	693b      	ldr	r3, [r7, #16]
 801b17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b17c:	4a0c      	ldr	r2, [pc, #48]	; (801b1b0 <xTaskPriorityDisinherit+0xd4>)
 801b17e:	6013      	str	r3, [r2, #0]
 801b180:	693b      	ldr	r3, [r7, #16]
 801b182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b184:	4613      	mov	r3, r2
 801b186:	009b      	lsls	r3, r3, #2
 801b188:	4413      	add	r3, r2
 801b18a:	009b      	lsls	r3, r3, #2
 801b18c:	4a09      	ldr	r2, [pc, #36]	; (801b1b4 <xTaskPriorityDisinherit+0xd8>)
 801b18e:	441a      	add	r2, r3
 801b190:	693b      	ldr	r3, [r7, #16]
 801b192:	3304      	adds	r3, #4
 801b194:	4619      	mov	r1, r3
 801b196:	4610      	mov	r0, r2
 801b198:	f7fe f97d 	bl	8019496 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801b19c:	2301      	movs	r3, #1
 801b19e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801b1a0:	697b      	ldr	r3, [r7, #20]
	}
 801b1a2:	4618      	mov	r0, r3
 801b1a4:	3718      	adds	r7, #24
 801b1a6:	46bd      	mov	sp, r7
 801b1a8:	bd80      	pop	{r7, pc}
 801b1aa:	bf00      	nop
 801b1ac:	24002f98 	.word	0x24002f98
 801b1b0:	24003474 	.word	0x24003474
 801b1b4:	24002f9c 	.word	0x24002f9c

0801b1b8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801b1b8:	b480      	push	{r7}
 801b1ba:	b083      	sub	sp, #12
 801b1bc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801b1be:	4b09      	ldr	r3, [pc, #36]	; (801b1e4 <uxTaskResetEventItemValue+0x2c>)
 801b1c0:	681b      	ldr	r3, [r3, #0]
 801b1c2:	699b      	ldr	r3, [r3, #24]
 801b1c4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b1c6:	4b07      	ldr	r3, [pc, #28]	; (801b1e4 <uxTaskResetEventItemValue+0x2c>)
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b1cc:	4b05      	ldr	r3, [pc, #20]	; (801b1e4 <uxTaskResetEventItemValue+0x2c>)
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 801b1d4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801b1d6:	687b      	ldr	r3, [r7, #4]
}
 801b1d8:	4618      	mov	r0, r3
 801b1da:	370c      	adds	r7, #12
 801b1dc:	46bd      	mov	sp, r7
 801b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1e2:	4770      	bx	lr
 801b1e4:	24002f98 	.word	0x24002f98

0801b1e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801b1e8:	b580      	push	{r7, lr}
 801b1ea:	b084      	sub	sp, #16
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	6078      	str	r0, [r7, #4]
 801b1f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801b1f2:	4b21      	ldr	r3, [pc, #132]	; (801b278 <prvAddCurrentTaskToDelayedList+0x90>)
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801b1f8:	4b20      	ldr	r3, [pc, #128]	; (801b27c <prvAddCurrentTaskToDelayedList+0x94>)
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	3304      	adds	r3, #4
 801b1fe:	4618      	mov	r0, r3
 801b200:	f7fe f9a6 	bl	8019550 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b20a:	d10a      	bne.n	801b222 <prvAddCurrentTaskToDelayedList+0x3a>
 801b20c:	683b      	ldr	r3, [r7, #0]
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d007      	beq.n	801b222 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b212:	4b1a      	ldr	r3, [pc, #104]	; (801b27c <prvAddCurrentTaskToDelayedList+0x94>)
 801b214:	681b      	ldr	r3, [r3, #0]
 801b216:	3304      	adds	r3, #4
 801b218:	4619      	mov	r1, r3
 801b21a:	4819      	ldr	r0, [pc, #100]	; (801b280 <prvAddCurrentTaskToDelayedList+0x98>)
 801b21c:	f7fe f93b 	bl	8019496 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801b220:	e026      	b.n	801b270 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801b222:	68fa      	ldr	r2, [r7, #12]
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	4413      	add	r3, r2
 801b228:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801b22a:	4b14      	ldr	r3, [pc, #80]	; (801b27c <prvAddCurrentTaskToDelayedList+0x94>)
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	68ba      	ldr	r2, [r7, #8]
 801b230:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801b232:	68ba      	ldr	r2, [r7, #8]
 801b234:	68fb      	ldr	r3, [r7, #12]
 801b236:	429a      	cmp	r2, r3
 801b238:	d209      	bcs.n	801b24e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b23a:	4b12      	ldr	r3, [pc, #72]	; (801b284 <prvAddCurrentTaskToDelayedList+0x9c>)
 801b23c:	681a      	ldr	r2, [r3, #0]
 801b23e:	4b0f      	ldr	r3, [pc, #60]	; (801b27c <prvAddCurrentTaskToDelayedList+0x94>)
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	3304      	adds	r3, #4
 801b244:	4619      	mov	r1, r3
 801b246:	4610      	mov	r0, r2
 801b248:	f7fe f949 	bl	80194de <vListInsert>
}
 801b24c:	e010      	b.n	801b270 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801b24e:	4b0e      	ldr	r3, [pc, #56]	; (801b288 <prvAddCurrentTaskToDelayedList+0xa0>)
 801b250:	681a      	ldr	r2, [r3, #0]
 801b252:	4b0a      	ldr	r3, [pc, #40]	; (801b27c <prvAddCurrentTaskToDelayedList+0x94>)
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	3304      	adds	r3, #4
 801b258:	4619      	mov	r1, r3
 801b25a:	4610      	mov	r0, r2
 801b25c:	f7fe f93f 	bl	80194de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801b260:	4b0a      	ldr	r3, [pc, #40]	; (801b28c <prvAddCurrentTaskToDelayedList+0xa4>)
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	68ba      	ldr	r2, [r7, #8]
 801b266:	429a      	cmp	r2, r3
 801b268:	d202      	bcs.n	801b270 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801b26a:	4a08      	ldr	r2, [pc, #32]	; (801b28c <prvAddCurrentTaskToDelayedList+0xa4>)
 801b26c:	68bb      	ldr	r3, [r7, #8]
 801b26e:	6013      	str	r3, [r2, #0]
}
 801b270:	bf00      	nop
 801b272:	3710      	adds	r7, #16
 801b274:	46bd      	mov	sp, r7
 801b276:	bd80      	pop	{r7, pc}
 801b278:	24003470 	.word	0x24003470
 801b27c:	24002f98 	.word	0x24002f98
 801b280:	24003458 	.word	0x24003458
 801b284:	24003428 	.word	0x24003428
 801b288:	24003424 	.word	0x24003424
 801b28c:	2400348c 	.word	0x2400348c

0801b290 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801b290:	b580      	push	{r7, lr}
 801b292:	b08a      	sub	sp, #40	; 0x28
 801b294:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801b296:	2300      	movs	r3, #0
 801b298:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801b29a:	f000 fb07 	bl	801b8ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801b29e:	4b1c      	ldr	r3, [pc, #112]	; (801b310 <xTimerCreateTimerTask+0x80>)
 801b2a0:	681b      	ldr	r3, [r3, #0]
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	d021      	beq.n	801b2ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801b2a6:	2300      	movs	r3, #0
 801b2a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801b2aa:	2300      	movs	r3, #0
 801b2ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801b2ae:	1d3a      	adds	r2, r7, #4
 801b2b0:	f107 0108 	add.w	r1, r7, #8
 801b2b4:	f107 030c 	add.w	r3, r7, #12
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	f7fd fe39 	bl	8018f30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801b2be:	6879      	ldr	r1, [r7, #4]
 801b2c0:	68bb      	ldr	r3, [r7, #8]
 801b2c2:	68fa      	ldr	r2, [r7, #12]
 801b2c4:	9202      	str	r2, [sp, #8]
 801b2c6:	9301      	str	r3, [sp, #4]
 801b2c8:	2302      	movs	r3, #2
 801b2ca:	9300      	str	r3, [sp, #0]
 801b2cc:	2300      	movs	r3, #0
 801b2ce:	460a      	mov	r2, r1
 801b2d0:	4910      	ldr	r1, [pc, #64]	; (801b314 <xTimerCreateTimerTask+0x84>)
 801b2d2:	4811      	ldr	r0, [pc, #68]	; (801b318 <xTimerCreateTimerTask+0x88>)
 801b2d4:	f7fe ff0c 	bl	801a0f0 <xTaskCreateStatic>
 801b2d8:	4603      	mov	r3, r0
 801b2da:	4a10      	ldr	r2, [pc, #64]	; (801b31c <xTimerCreateTimerTask+0x8c>)
 801b2dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801b2de:	4b0f      	ldr	r3, [pc, #60]	; (801b31c <xTimerCreateTimerTask+0x8c>)
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	2b00      	cmp	r3, #0
 801b2e4:	d001      	beq.n	801b2ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801b2e6:	2301      	movs	r3, #1
 801b2e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801b2ea:	697b      	ldr	r3, [r7, #20]
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d10a      	bne.n	801b306 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801b2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b2f4:	f383 8811 	msr	BASEPRI, r3
 801b2f8:	f3bf 8f6f 	isb	sy
 801b2fc:	f3bf 8f4f 	dsb	sy
 801b300:	613b      	str	r3, [r7, #16]
}
 801b302:	bf00      	nop
 801b304:	e7fe      	b.n	801b304 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801b306:	697b      	ldr	r3, [r7, #20]
}
 801b308:	4618      	mov	r0, r3
 801b30a:	3718      	adds	r7, #24
 801b30c:	46bd      	mov	sp, r7
 801b30e:	bd80      	pop	{r7, pc}
 801b310:	240034c8 	.word	0x240034c8
 801b314:	0801c304 	.word	0x0801c304
 801b318:	0801b455 	.word	0x0801b455
 801b31c:	240034cc 	.word	0x240034cc

0801b320 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801b320:	b580      	push	{r7, lr}
 801b322:	b08a      	sub	sp, #40	; 0x28
 801b324:	af00      	add	r7, sp, #0
 801b326:	60f8      	str	r0, [r7, #12]
 801b328:	60b9      	str	r1, [r7, #8]
 801b32a:	607a      	str	r2, [r7, #4]
 801b32c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801b32e:	2300      	movs	r3, #0
 801b330:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801b332:	68fb      	ldr	r3, [r7, #12]
 801b334:	2b00      	cmp	r3, #0
 801b336:	d10a      	bne.n	801b34e <xTimerGenericCommand+0x2e>
	__asm volatile
 801b338:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b33c:	f383 8811 	msr	BASEPRI, r3
 801b340:	f3bf 8f6f 	isb	sy
 801b344:	f3bf 8f4f 	dsb	sy
 801b348:	623b      	str	r3, [r7, #32]
}
 801b34a:	bf00      	nop
 801b34c:	e7fe      	b.n	801b34c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801b34e:	4b1a      	ldr	r3, [pc, #104]	; (801b3b8 <xTimerGenericCommand+0x98>)
 801b350:	681b      	ldr	r3, [r3, #0]
 801b352:	2b00      	cmp	r3, #0
 801b354:	d02a      	beq.n	801b3ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801b356:	68bb      	ldr	r3, [r7, #8]
 801b358:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801b362:	68bb      	ldr	r3, [r7, #8]
 801b364:	2b05      	cmp	r3, #5
 801b366:	dc18      	bgt.n	801b39a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801b368:	f7ff fe9a 	bl	801b0a0 <xTaskGetSchedulerState>
 801b36c:	4603      	mov	r3, r0
 801b36e:	2b02      	cmp	r3, #2
 801b370:	d109      	bne.n	801b386 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801b372:	4b11      	ldr	r3, [pc, #68]	; (801b3b8 <xTimerGenericCommand+0x98>)
 801b374:	6818      	ldr	r0, [r3, #0]
 801b376:	f107 0110 	add.w	r1, r7, #16
 801b37a:	2300      	movs	r3, #0
 801b37c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b37e:	f7fe fa4f 	bl	8019820 <xQueueGenericSend>
 801b382:	6278      	str	r0, [r7, #36]	; 0x24
 801b384:	e012      	b.n	801b3ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801b386:	4b0c      	ldr	r3, [pc, #48]	; (801b3b8 <xTimerGenericCommand+0x98>)
 801b388:	6818      	ldr	r0, [r3, #0]
 801b38a:	f107 0110 	add.w	r1, r7, #16
 801b38e:	2300      	movs	r3, #0
 801b390:	2200      	movs	r2, #0
 801b392:	f7fe fa45 	bl	8019820 <xQueueGenericSend>
 801b396:	6278      	str	r0, [r7, #36]	; 0x24
 801b398:	e008      	b.n	801b3ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801b39a:	4b07      	ldr	r3, [pc, #28]	; (801b3b8 <xTimerGenericCommand+0x98>)
 801b39c:	6818      	ldr	r0, [r3, #0]
 801b39e:	f107 0110 	add.w	r1, r7, #16
 801b3a2:	2300      	movs	r3, #0
 801b3a4:	683a      	ldr	r2, [r7, #0]
 801b3a6:	f7fe fb39 	bl	8019a1c <xQueueGenericSendFromISR>
 801b3aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801b3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	3728      	adds	r7, #40	; 0x28
 801b3b2:	46bd      	mov	sp, r7
 801b3b4:	bd80      	pop	{r7, pc}
 801b3b6:	bf00      	nop
 801b3b8:	240034c8 	.word	0x240034c8

0801b3bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801b3bc:	b580      	push	{r7, lr}
 801b3be:	b088      	sub	sp, #32
 801b3c0:	af02      	add	r7, sp, #8
 801b3c2:	6078      	str	r0, [r7, #4]
 801b3c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b3c6:	4b22      	ldr	r3, [pc, #136]	; (801b450 <prvProcessExpiredTimer+0x94>)
 801b3c8:	681b      	ldr	r3, [r3, #0]
 801b3ca:	68db      	ldr	r3, [r3, #12]
 801b3cc:	68db      	ldr	r3, [r3, #12]
 801b3ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b3d0:	697b      	ldr	r3, [r7, #20]
 801b3d2:	3304      	adds	r3, #4
 801b3d4:	4618      	mov	r0, r3
 801b3d6:	f7fe f8bb 	bl	8019550 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b3da:	697b      	ldr	r3, [r7, #20]
 801b3dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b3e0:	f003 0304 	and.w	r3, r3, #4
 801b3e4:	2b00      	cmp	r3, #0
 801b3e6:	d022      	beq.n	801b42e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801b3e8:	697b      	ldr	r3, [r7, #20]
 801b3ea:	699a      	ldr	r2, [r3, #24]
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	18d1      	adds	r1, r2, r3
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	683a      	ldr	r2, [r7, #0]
 801b3f4:	6978      	ldr	r0, [r7, #20]
 801b3f6:	f000 f8d1 	bl	801b59c <prvInsertTimerInActiveList>
 801b3fa:	4603      	mov	r3, r0
 801b3fc:	2b00      	cmp	r3, #0
 801b3fe:	d01f      	beq.n	801b440 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b400:	2300      	movs	r3, #0
 801b402:	9300      	str	r3, [sp, #0]
 801b404:	2300      	movs	r3, #0
 801b406:	687a      	ldr	r2, [r7, #4]
 801b408:	2100      	movs	r1, #0
 801b40a:	6978      	ldr	r0, [r7, #20]
 801b40c:	f7ff ff88 	bl	801b320 <xTimerGenericCommand>
 801b410:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801b412:	693b      	ldr	r3, [r7, #16]
 801b414:	2b00      	cmp	r3, #0
 801b416:	d113      	bne.n	801b440 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801b418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b41c:	f383 8811 	msr	BASEPRI, r3
 801b420:	f3bf 8f6f 	isb	sy
 801b424:	f3bf 8f4f 	dsb	sy
 801b428:	60fb      	str	r3, [r7, #12]
}
 801b42a:	bf00      	nop
 801b42c:	e7fe      	b.n	801b42c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b42e:	697b      	ldr	r3, [r7, #20]
 801b430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b434:	f023 0301 	bic.w	r3, r3, #1
 801b438:	b2da      	uxtb	r2, r3
 801b43a:	697b      	ldr	r3, [r7, #20]
 801b43c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b440:	697b      	ldr	r3, [r7, #20]
 801b442:	6a1b      	ldr	r3, [r3, #32]
 801b444:	6978      	ldr	r0, [r7, #20]
 801b446:	4798      	blx	r3
}
 801b448:	bf00      	nop
 801b44a:	3718      	adds	r7, #24
 801b44c:	46bd      	mov	sp, r7
 801b44e:	bd80      	pop	{r7, pc}
 801b450:	240034c0 	.word	0x240034c0

0801b454 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801b454:	b580      	push	{r7, lr}
 801b456:	b084      	sub	sp, #16
 801b458:	af00      	add	r7, sp, #0
 801b45a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801b45c:	f107 0308 	add.w	r3, r7, #8
 801b460:	4618      	mov	r0, r3
 801b462:	f000 f857 	bl	801b514 <prvGetNextExpireTime>
 801b466:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801b468:	68bb      	ldr	r3, [r7, #8]
 801b46a:	4619      	mov	r1, r3
 801b46c:	68f8      	ldr	r0, [r7, #12]
 801b46e:	f000 f803 	bl	801b478 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801b472:	f000 f8d5 	bl	801b620 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801b476:	e7f1      	b.n	801b45c <prvTimerTask+0x8>

0801b478 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801b478:	b580      	push	{r7, lr}
 801b47a:	b084      	sub	sp, #16
 801b47c:	af00      	add	r7, sp, #0
 801b47e:	6078      	str	r0, [r7, #4]
 801b480:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801b482:	f7ff f977 	bl	801a774 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b486:	f107 0308 	add.w	r3, r7, #8
 801b48a:	4618      	mov	r0, r3
 801b48c:	f000 f866 	bl	801b55c <prvSampleTimeNow>
 801b490:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801b492:	68bb      	ldr	r3, [r7, #8]
 801b494:	2b00      	cmp	r3, #0
 801b496:	d130      	bne.n	801b4fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801b498:	683b      	ldr	r3, [r7, #0]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d10a      	bne.n	801b4b4 <prvProcessTimerOrBlockTask+0x3c>
 801b49e:	687a      	ldr	r2, [r7, #4]
 801b4a0:	68fb      	ldr	r3, [r7, #12]
 801b4a2:	429a      	cmp	r2, r3
 801b4a4:	d806      	bhi.n	801b4b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801b4a6:	f7ff f973 	bl	801a790 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801b4aa:	68f9      	ldr	r1, [r7, #12]
 801b4ac:	6878      	ldr	r0, [r7, #4]
 801b4ae:	f7ff ff85 	bl	801b3bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801b4b2:	e024      	b.n	801b4fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801b4b4:	683b      	ldr	r3, [r7, #0]
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d008      	beq.n	801b4cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801b4ba:	4b13      	ldr	r3, [pc, #76]	; (801b508 <prvProcessTimerOrBlockTask+0x90>)
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	d101      	bne.n	801b4c8 <prvProcessTimerOrBlockTask+0x50>
 801b4c4:	2301      	movs	r3, #1
 801b4c6:	e000      	b.n	801b4ca <prvProcessTimerOrBlockTask+0x52>
 801b4c8:	2300      	movs	r3, #0
 801b4ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801b4cc:	4b0f      	ldr	r3, [pc, #60]	; (801b50c <prvProcessTimerOrBlockTask+0x94>)
 801b4ce:	6818      	ldr	r0, [r3, #0]
 801b4d0:	687a      	ldr	r2, [r7, #4]
 801b4d2:	68fb      	ldr	r3, [r7, #12]
 801b4d4:	1ad3      	subs	r3, r2, r3
 801b4d6:	683a      	ldr	r2, [r7, #0]
 801b4d8:	4619      	mov	r1, r3
 801b4da:	f7fe fdd5 	bl	801a088 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801b4de:	f7ff f957 	bl	801a790 <xTaskResumeAll>
 801b4e2:	4603      	mov	r3, r0
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d10a      	bne.n	801b4fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801b4e8:	4b09      	ldr	r3, [pc, #36]	; (801b510 <prvProcessTimerOrBlockTask+0x98>)
 801b4ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b4ee:	601a      	str	r2, [r3, #0]
 801b4f0:	f3bf 8f4f 	dsb	sy
 801b4f4:	f3bf 8f6f 	isb	sy
}
 801b4f8:	e001      	b.n	801b4fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801b4fa:	f7ff f949 	bl	801a790 <xTaskResumeAll>
}
 801b4fe:	bf00      	nop
 801b500:	3710      	adds	r7, #16
 801b502:	46bd      	mov	sp, r7
 801b504:	bd80      	pop	{r7, pc}
 801b506:	bf00      	nop
 801b508:	240034c4 	.word	0x240034c4
 801b50c:	240034c8 	.word	0x240034c8
 801b510:	e000ed04 	.word	0xe000ed04

0801b514 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801b514:	b480      	push	{r7}
 801b516:	b085      	sub	sp, #20
 801b518:	af00      	add	r7, sp, #0
 801b51a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801b51c:	4b0e      	ldr	r3, [pc, #56]	; (801b558 <prvGetNextExpireTime+0x44>)
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	2b00      	cmp	r3, #0
 801b524:	d101      	bne.n	801b52a <prvGetNextExpireTime+0x16>
 801b526:	2201      	movs	r2, #1
 801b528:	e000      	b.n	801b52c <prvGetNextExpireTime+0x18>
 801b52a:	2200      	movs	r2, #0
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	2b00      	cmp	r3, #0
 801b536:	d105      	bne.n	801b544 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b538:	4b07      	ldr	r3, [pc, #28]	; (801b558 <prvGetNextExpireTime+0x44>)
 801b53a:	681b      	ldr	r3, [r3, #0]
 801b53c:	68db      	ldr	r3, [r3, #12]
 801b53e:	681b      	ldr	r3, [r3, #0]
 801b540:	60fb      	str	r3, [r7, #12]
 801b542:	e001      	b.n	801b548 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801b544:	2300      	movs	r3, #0
 801b546:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801b548:	68fb      	ldr	r3, [r7, #12]
}
 801b54a:	4618      	mov	r0, r3
 801b54c:	3714      	adds	r7, #20
 801b54e:	46bd      	mov	sp, r7
 801b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b554:	4770      	bx	lr
 801b556:	bf00      	nop
 801b558:	240034c0 	.word	0x240034c0

0801b55c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801b55c:	b580      	push	{r7, lr}
 801b55e:	b084      	sub	sp, #16
 801b560:	af00      	add	r7, sp, #0
 801b562:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801b564:	f7ff f9b2 	bl	801a8cc <xTaskGetTickCount>
 801b568:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801b56a:	4b0b      	ldr	r3, [pc, #44]	; (801b598 <prvSampleTimeNow+0x3c>)
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	68fa      	ldr	r2, [r7, #12]
 801b570:	429a      	cmp	r2, r3
 801b572:	d205      	bcs.n	801b580 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801b574:	f000 f936 	bl	801b7e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	2201      	movs	r2, #1
 801b57c:	601a      	str	r2, [r3, #0]
 801b57e:	e002      	b.n	801b586 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	2200      	movs	r2, #0
 801b584:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801b586:	4a04      	ldr	r2, [pc, #16]	; (801b598 <prvSampleTimeNow+0x3c>)
 801b588:	68fb      	ldr	r3, [r7, #12]
 801b58a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801b58c:	68fb      	ldr	r3, [r7, #12]
}
 801b58e:	4618      	mov	r0, r3
 801b590:	3710      	adds	r7, #16
 801b592:	46bd      	mov	sp, r7
 801b594:	bd80      	pop	{r7, pc}
 801b596:	bf00      	nop
 801b598:	240034d0 	.word	0x240034d0

0801b59c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801b59c:	b580      	push	{r7, lr}
 801b59e:	b086      	sub	sp, #24
 801b5a0:	af00      	add	r7, sp, #0
 801b5a2:	60f8      	str	r0, [r7, #12]
 801b5a4:	60b9      	str	r1, [r7, #8]
 801b5a6:	607a      	str	r2, [r7, #4]
 801b5a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801b5aa:	2300      	movs	r3, #0
 801b5ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	68ba      	ldr	r2, [r7, #8]
 801b5b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	68fa      	ldr	r2, [r7, #12]
 801b5b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801b5ba:	68ba      	ldr	r2, [r7, #8]
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	429a      	cmp	r2, r3
 801b5c0:	d812      	bhi.n	801b5e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b5c2:	687a      	ldr	r2, [r7, #4]
 801b5c4:	683b      	ldr	r3, [r7, #0]
 801b5c6:	1ad2      	subs	r2, r2, r3
 801b5c8:	68fb      	ldr	r3, [r7, #12]
 801b5ca:	699b      	ldr	r3, [r3, #24]
 801b5cc:	429a      	cmp	r2, r3
 801b5ce:	d302      	bcc.n	801b5d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801b5d0:	2301      	movs	r3, #1
 801b5d2:	617b      	str	r3, [r7, #20]
 801b5d4:	e01b      	b.n	801b60e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801b5d6:	4b10      	ldr	r3, [pc, #64]	; (801b618 <prvInsertTimerInActiveList+0x7c>)
 801b5d8:	681a      	ldr	r2, [r3, #0]
 801b5da:	68fb      	ldr	r3, [r7, #12]
 801b5dc:	3304      	adds	r3, #4
 801b5de:	4619      	mov	r1, r3
 801b5e0:	4610      	mov	r0, r2
 801b5e2:	f7fd ff7c 	bl	80194de <vListInsert>
 801b5e6:	e012      	b.n	801b60e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801b5e8:	687a      	ldr	r2, [r7, #4]
 801b5ea:	683b      	ldr	r3, [r7, #0]
 801b5ec:	429a      	cmp	r2, r3
 801b5ee:	d206      	bcs.n	801b5fe <prvInsertTimerInActiveList+0x62>
 801b5f0:	68ba      	ldr	r2, [r7, #8]
 801b5f2:	683b      	ldr	r3, [r7, #0]
 801b5f4:	429a      	cmp	r2, r3
 801b5f6:	d302      	bcc.n	801b5fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801b5f8:	2301      	movs	r3, #1
 801b5fa:	617b      	str	r3, [r7, #20]
 801b5fc:	e007      	b.n	801b60e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b5fe:	4b07      	ldr	r3, [pc, #28]	; (801b61c <prvInsertTimerInActiveList+0x80>)
 801b600:	681a      	ldr	r2, [r3, #0]
 801b602:	68fb      	ldr	r3, [r7, #12]
 801b604:	3304      	adds	r3, #4
 801b606:	4619      	mov	r1, r3
 801b608:	4610      	mov	r0, r2
 801b60a:	f7fd ff68 	bl	80194de <vListInsert>
		}
	}

	return xProcessTimerNow;
 801b60e:	697b      	ldr	r3, [r7, #20]
}
 801b610:	4618      	mov	r0, r3
 801b612:	3718      	adds	r7, #24
 801b614:	46bd      	mov	sp, r7
 801b616:	bd80      	pop	{r7, pc}
 801b618:	240034c4 	.word	0x240034c4
 801b61c:	240034c0 	.word	0x240034c0

0801b620 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801b620:	b580      	push	{r7, lr}
 801b622:	b08e      	sub	sp, #56	; 0x38
 801b624:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b626:	e0ca      	b.n	801b7be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	da18      	bge.n	801b660 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801b62e:	1d3b      	adds	r3, r7, #4
 801b630:	3304      	adds	r3, #4
 801b632:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801b634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b636:	2b00      	cmp	r3, #0
 801b638:	d10a      	bne.n	801b650 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801b63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b63e:	f383 8811 	msr	BASEPRI, r3
 801b642:	f3bf 8f6f 	isb	sy
 801b646:	f3bf 8f4f 	dsb	sy
 801b64a:	61fb      	str	r3, [r7, #28]
}
 801b64c:	bf00      	nop
 801b64e:	e7fe      	b.n	801b64e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801b650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b656:	6850      	ldr	r0, [r2, #4]
 801b658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b65a:	6892      	ldr	r2, [r2, #8]
 801b65c:	4611      	mov	r1, r2
 801b65e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	2b00      	cmp	r3, #0
 801b664:	f2c0 80aa 	blt.w	801b7bc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801b668:	68fb      	ldr	r3, [r7, #12]
 801b66a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801b66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b66e:	695b      	ldr	r3, [r3, #20]
 801b670:	2b00      	cmp	r3, #0
 801b672:	d004      	beq.n	801b67e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b676:	3304      	adds	r3, #4
 801b678:	4618      	mov	r0, r3
 801b67a:	f7fd ff69 	bl	8019550 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801b67e:	463b      	mov	r3, r7
 801b680:	4618      	mov	r0, r3
 801b682:	f7ff ff6b 	bl	801b55c <prvSampleTimeNow>
 801b686:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	2b09      	cmp	r3, #9
 801b68c:	f200 8097 	bhi.w	801b7be <prvProcessReceivedCommands+0x19e>
 801b690:	a201      	add	r2, pc, #4	; (adr r2, 801b698 <prvProcessReceivedCommands+0x78>)
 801b692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b696:	bf00      	nop
 801b698:	0801b6c1 	.word	0x0801b6c1
 801b69c:	0801b6c1 	.word	0x0801b6c1
 801b6a0:	0801b6c1 	.word	0x0801b6c1
 801b6a4:	0801b735 	.word	0x0801b735
 801b6a8:	0801b749 	.word	0x0801b749
 801b6ac:	0801b793 	.word	0x0801b793
 801b6b0:	0801b6c1 	.word	0x0801b6c1
 801b6b4:	0801b6c1 	.word	0x0801b6c1
 801b6b8:	0801b735 	.word	0x0801b735
 801b6bc:	0801b749 	.word	0x0801b749
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b6c6:	f043 0301 	orr.w	r3, r3, #1
 801b6ca:	b2da      	uxtb	r2, r3
 801b6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801b6d2:	68ba      	ldr	r2, [r7, #8]
 801b6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6d6:	699b      	ldr	r3, [r3, #24]
 801b6d8:	18d1      	adds	r1, r2, r3
 801b6da:	68bb      	ldr	r3, [r7, #8]
 801b6dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b6de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b6e0:	f7ff ff5c 	bl	801b59c <prvInsertTimerInActiveList>
 801b6e4:	4603      	mov	r3, r0
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d069      	beq.n	801b7be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6ec:	6a1b      	ldr	r3, [r3, #32]
 801b6ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b6f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b6f8:	f003 0304 	and.w	r3, r3, #4
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	d05e      	beq.n	801b7be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801b700:	68ba      	ldr	r2, [r7, #8]
 801b702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b704:	699b      	ldr	r3, [r3, #24]
 801b706:	441a      	add	r2, r3
 801b708:	2300      	movs	r3, #0
 801b70a:	9300      	str	r3, [sp, #0]
 801b70c:	2300      	movs	r3, #0
 801b70e:	2100      	movs	r1, #0
 801b710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b712:	f7ff fe05 	bl	801b320 <xTimerGenericCommand>
 801b716:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801b718:	6a3b      	ldr	r3, [r7, #32]
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d14f      	bne.n	801b7be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b722:	f383 8811 	msr	BASEPRI, r3
 801b726:	f3bf 8f6f 	isb	sy
 801b72a:	f3bf 8f4f 	dsb	sy
 801b72e:	61bb      	str	r3, [r7, #24]
}
 801b730:	bf00      	nop
 801b732:	e7fe      	b.n	801b732 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b73a:	f023 0301 	bic.w	r3, r3, #1
 801b73e:	b2da      	uxtb	r2, r3
 801b740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801b746:	e03a      	b.n	801b7be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801b748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b74a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b74e:	f043 0301 	orr.w	r3, r3, #1
 801b752:	b2da      	uxtb	r2, r3
 801b754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801b75a:	68ba      	ldr	r2, [r7, #8]
 801b75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b75e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801b760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b762:	699b      	ldr	r3, [r3, #24]
 801b764:	2b00      	cmp	r3, #0
 801b766:	d10a      	bne.n	801b77e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801b768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b76c:	f383 8811 	msr	BASEPRI, r3
 801b770:	f3bf 8f6f 	isb	sy
 801b774:	f3bf 8f4f 	dsb	sy
 801b778:	617b      	str	r3, [r7, #20]
}
 801b77a:	bf00      	nop
 801b77c:	e7fe      	b.n	801b77c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801b77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b780:	699a      	ldr	r2, [r3, #24]
 801b782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b784:	18d1      	adds	r1, r2, r3
 801b786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b78a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b78c:	f7ff ff06 	bl	801b59c <prvInsertTimerInActiveList>
					break;
 801b790:	e015      	b.n	801b7be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801b792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b798:	f003 0302 	and.w	r3, r3, #2
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d103      	bne.n	801b7a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801b7a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b7a2:	f000 fbfd 	bl	801bfa0 <vPortFree>
 801b7a6:	e00a      	b.n	801b7be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801b7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b7ae:	f023 0301 	bic.w	r3, r3, #1
 801b7b2:	b2da      	uxtb	r2, r3
 801b7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801b7ba:	e000      	b.n	801b7be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801b7bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801b7be:	4b08      	ldr	r3, [pc, #32]	; (801b7e0 <prvProcessReceivedCommands+0x1c0>)
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	1d39      	adds	r1, r7, #4
 801b7c4:	2200      	movs	r2, #0
 801b7c6:	4618      	mov	r0, r3
 801b7c8:	f7fe f9c4 	bl	8019b54 <xQueueReceive>
 801b7cc:	4603      	mov	r3, r0
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	f47f af2a 	bne.w	801b628 <prvProcessReceivedCommands+0x8>
	}
}
 801b7d4:	bf00      	nop
 801b7d6:	bf00      	nop
 801b7d8:	3730      	adds	r7, #48	; 0x30
 801b7da:	46bd      	mov	sp, r7
 801b7dc:	bd80      	pop	{r7, pc}
 801b7de:	bf00      	nop
 801b7e0:	240034c8 	.word	0x240034c8

0801b7e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801b7e4:	b580      	push	{r7, lr}
 801b7e6:	b088      	sub	sp, #32
 801b7e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b7ea:	e048      	b.n	801b87e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801b7ec:	4b2d      	ldr	r3, [pc, #180]	; (801b8a4 <prvSwitchTimerLists+0xc0>)
 801b7ee:	681b      	ldr	r3, [r3, #0]
 801b7f0:	68db      	ldr	r3, [r3, #12]
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b7f6:	4b2b      	ldr	r3, [pc, #172]	; (801b8a4 <prvSwitchTimerLists+0xc0>)
 801b7f8:	681b      	ldr	r3, [r3, #0]
 801b7fa:	68db      	ldr	r3, [r3, #12]
 801b7fc:	68db      	ldr	r3, [r3, #12]
 801b7fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801b800:	68fb      	ldr	r3, [r7, #12]
 801b802:	3304      	adds	r3, #4
 801b804:	4618      	mov	r0, r3
 801b806:	f7fd fea3 	bl	8019550 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801b80a:	68fb      	ldr	r3, [r7, #12]
 801b80c:	6a1b      	ldr	r3, [r3, #32]
 801b80e:	68f8      	ldr	r0, [r7, #12]
 801b810:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801b812:	68fb      	ldr	r3, [r7, #12]
 801b814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801b818:	f003 0304 	and.w	r3, r3, #4
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	d02e      	beq.n	801b87e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801b820:	68fb      	ldr	r3, [r7, #12]
 801b822:	699b      	ldr	r3, [r3, #24]
 801b824:	693a      	ldr	r2, [r7, #16]
 801b826:	4413      	add	r3, r2
 801b828:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801b82a:	68ba      	ldr	r2, [r7, #8]
 801b82c:	693b      	ldr	r3, [r7, #16]
 801b82e:	429a      	cmp	r2, r3
 801b830:	d90e      	bls.n	801b850 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	68ba      	ldr	r2, [r7, #8]
 801b836:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801b838:	68fb      	ldr	r3, [r7, #12]
 801b83a:	68fa      	ldr	r2, [r7, #12]
 801b83c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801b83e:	4b19      	ldr	r3, [pc, #100]	; (801b8a4 <prvSwitchTimerLists+0xc0>)
 801b840:	681a      	ldr	r2, [r3, #0]
 801b842:	68fb      	ldr	r3, [r7, #12]
 801b844:	3304      	adds	r3, #4
 801b846:	4619      	mov	r1, r3
 801b848:	4610      	mov	r0, r2
 801b84a:	f7fd fe48 	bl	80194de <vListInsert>
 801b84e:	e016      	b.n	801b87e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801b850:	2300      	movs	r3, #0
 801b852:	9300      	str	r3, [sp, #0]
 801b854:	2300      	movs	r3, #0
 801b856:	693a      	ldr	r2, [r7, #16]
 801b858:	2100      	movs	r1, #0
 801b85a:	68f8      	ldr	r0, [r7, #12]
 801b85c:	f7ff fd60 	bl	801b320 <xTimerGenericCommand>
 801b860:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801b862:	687b      	ldr	r3, [r7, #4]
 801b864:	2b00      	cmp	r3, #0
 801b866:	d10a      	bne.n	801b87e <prvSwitchTimerLists+0x9a>
	__asm volatile
 801b868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b86c:	f383 8811 	msr	BASEPRI, r3
 801b870:	f3bf 8f6f 	isb	sy
 801b874:	f3bf 8f4f 	dsb	sy
 801b878:	603b      	str	r3, [r7, #0]
}
 801b87a:	bf00      	nop
 801b87c:	e7fe      	b.n	801b87c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801b87e:	4b09      	ldr	r3, [pc, #36]	; (801b8a4 <prvSwitchTimerLists+0xc0>)
 801b880:	681b      	ldr	r3, [r3, #0]
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	2b00      	cmp	r3, #0
 801b886:	d1b1      	bne.n	801b7ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801b888:	4b06      	ldr	r3, [pc, #24]	; (801b8a4 <prvSwitchTimerLists+0xc0>)
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801b88e:	4b06      	ldr	r3, [pc, #24]	; (801b8a8 <prvSwitchTimerLists+0xc4>)
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	4a04      	ldr	r2, [pc, #16]	; (801b8a4 <prvSwitchTimerLists+0xc0>)
 801b894:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801b896:	4a04      	ldr	r2, [pc, #16]	; (801b8a8 <prvSwitchTimerLists+0xc4>)
 801b898:	697b      	ldr	r3, [r7, #20]
 801b89a:	6013      	str	r3, [r2, #0]
}
 801b89c:	bf00      	nop
 801b89e:	3718      	adds	r7, #24
 801b8a0:	46bd      	mov	sp, r7
 801b8a2:	bd80      	pop	{r7, pc}
 801b8a4:	240034c0 	.word	0x240034c0
 801b8a8:	240034c4 	.word	0x240034c4

0801b8ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801b8ac:	b580      	push	{r7, lr}
 801b8ae:	b082      	sub	sp, #8
 801b8b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801b8b2:	f000 f987 	bl	801bbc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801b8b6:	4b15      	ldr	r3, [pc, #84]	; (801b90c <prvCheckForValidListAndQueue+0x60>)
 801b8b8:	681b      	ldr	r3, [r3, #0]
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	d120      	bne.n	801b900 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801b8be:	4814      	ldr	r0, [pc, #80]	; (801b910 <prvCheckForValidListAndQueue+0x64>)
 801b8c0:	f7fd fdbc 	bl	801943c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801b8c4:	4813      	ldr	r0, [pc, #76]	; (801b914 <prvCheckForValidListAndQueue+0x68>)
 801b8c6:	f7fd fdb9 	bl	801943c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801b8ca:	4b13      	ldr	r3, [pc, #76]	; (801b918 <prvCheckForValidListAndQueue+0x6c>)
 801b8cc:	4a10      	ldr	r2, [pc, #64]	; (801b910 <prvCheckForValidListAndQueue+0x64>)
 801b8ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801b8d0:	4b12      	ldr	r3, [pc, #72]	; (801b91c <prvCheckForValidListAndQueue+0x70>)
 801b8d2:	4a10      	ldr	r2, [pc, #64]	; (801b914 <prvCheckForValidListAndQueue+0x68>)
 801b8d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801b8d6:	2300      	movs	r3, #0
 801b8d8:	9300      	str	r3, [sp, #0]
 801b8da:	4b11      	ldr	r3, [pc, #68]	; (801b920 <prvCheckForValidListAndQueue+0x74>)
 801b8dc:	4a11      	ldr	r2, [pc, #68]	; (801b924 <prvCheckForValidListAndQueue+0x78>)
 801b8de:	2110      	movs	r1, #16
 801b8e0:	200a      	movs	r0, #10
 801b8e2:	f7fd fec7 	bl	8019674 <xQueueGenericCreateStatic>
 801b8e6:	4603      	mov	r3, r0
 801b8e8:	4a08      	ldr	r2, [pc, #32]	; (801b90c <prvCheckForValidListAndQueue+0x60>)
 801b8ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801b8ec:	4b07      	ldr	r3, [pc, #28]	; (801b90c <prvCheckForValidListAndQueue+0x60>)
 801b8ee:	681b      	ldr	r3, [r3, #0]
 801b8f0:	2b00      	cmp	r3, #0
 801b8f2:	d005      	beq.n	801b900 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801b8f4:	4b05      	ldr	r3, [pc, #20]	; (801b90c <prvCheckForValidListAndQueue+0x60>)
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	490b      	ldr	r1, [pc, #44]	; (801b928 <prvCheckForValidListAndQueue+0x7c>)
 801b8fa:	4618      	mov	r0, r3
 801b8fc:	f7fe fb9a 	bl	801a034 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b900:	f000 f990 	bl	801bc24 <vPortExitCritical>
}
 801b904:	bf00      	nop
 801b906:	46bd      	mov	sp, r7
 801b908:	bd80      	pop	{r7, pc}
 801b90a:	bf00      	nop
 801b90c:	240034c8 	.word	0x240034c8
 801b910:	24003498 	.word	0x24003498
 801b914:	240034ac 	.word	0x240034ac
 801b918:	240034c0 	.word	0x240034c0
 801b91c:	240034c4 	.word	0x240034c4
 801b920:	24003574 	.word	0x24003574
 801b924:	240034d4 	.word	0x240034d4
 801b928:	0801c30c 	.word	0x0801c30c

0801b92c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801b92c:	b580      	push	{r7, lr}
 801b92e:	b08a      	sub	sp, #40	; 0x28
 801b930:	af00      	add	r7, sp, #0
 801b932:	60f8      	str	r0, [r7, #12]
 801b934:	60b9      	str	r1, [r7, #8]
 801b936:	607a      	str	r2, [r7, #4]
 801b938:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801b93a:	f06f 0301 	mvn.w	r3, #1
 801b93e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801b940:	68fb      	ldr	r3, [r7, #12]
 801b942:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801b944:	68bb      	ldr	r3, [r7, #8]
 801b946:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801b94c:	4b06      	ldr	r3, [pc, #24]	; (801b968 <xTimerPendFunctionCallFromISR+0x3c>)
 801b94e:	6818      	ldr	r0, [r3, #0]
 801b950:	f107 0114 	add.w	r1, r7, #20
 801b954:	2300      	movs	r3, #0
 801b956:	683a      	ldr	r2, [r7, #0]
 801b958:	f7fe f860 	bl	8019a1c <xQueueGenericSendFromISR>
 801b95c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801b95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801b960:	4618      	mov	r0, r3
 801b962:	3728      	adds	r7, #40	; 0x28
 801b964:	46bd      	mov	sp, r7
 801b966:	bd80      	pop	{r7, pc}
 801b968:	240034c8 	.word	0x240034c8

0801b96c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801b96c:	b480      	push	{r7}
 801b96e:	b085      	sub	sp, #20
 801b970:	af00      	add	r7, sp, #0
 801b972:	60f8      	str	r0, [r7, #12]
 801b974:	60b9      	str	r1, [r7, #8]
 801b976:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	3b04      	subs	r3, #4
 801b97c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801b97e:	68fb      	ldr	r3, [r7, #12]
 801b980:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801b984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b986:	68fb      	ldr	r3, [r7, #12]
 801b988:	3b04      	subs	r3, #4
 801b98a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801b98c:	68bb      	ldr	r3, [r7, #8]
 801b98e:	f023 0201 	bic.w	r2, r3, #1
 801b992:	68fb      	ldr	r3, [r7, #12]
 801b994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801b996:	68fb      	ldr	r3, [r7, #12]
 801b998:	3b04      	subs	r3, #4
 801b99a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801b99c:	4a0c      	ldr	r2, [pc, #48]	; (801b9d0 <pxPortInitialiseStack+0x64>)
 801b99e:	68fb      	ldr	r3, [r7, #12]
 801b9a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801b9a2:	68fb      	ldr	r3, [r7, #12]
 801b9a4:	3b14      	subs	r3, #20
 801b9a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801b9a8:	687a      	ldr	r2, [r7, #4]
 801b9aa:	68fb      	ldr	r3, [r7, #12]
 801b9ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801b9ae:	68fb      	ldr	r3, [r7, #12]
 801b9b0:	3b04      	subs	r3, #4
 801b9b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801b9b4:	68fb      	ldr	r3, [r7, #12]
 801b9b6:	f06f 0202 	mvn.w	r2, #2
 801b9ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801b9bc:	68fb      	ldr	r3, [r7, #12]
 801b9be:	3b20      	subs	r3, #32
 801b9c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801b9c2:	68fb      	ldr	r3, [r7, #12]
}
 801b9c4:	4618      	mov	r0, r3
 801b9c6:	3714      	adds	r7, #20
 801b9c8:	46bd      	mov	sp, r7
 801b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ce:	4770      	bx	lr
 801b9d0:	0801b9d5 	.word	0x0801b9d5

0801b9d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801b9d4:	b480      	push	{r7}
 801b9d6:	b085      	sub	sp, #20
 801b9d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801b9da:	2300      	movs	r3, #0
 801b9dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801b9de:	4b12      	ldr	r3, [pc, #72]	; (801ba28 <prvTaskExitError+0x54>)
 801b9e0:	681b      	ldr	r3, [r3, #0]
 801b9e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801b9e6:	d00a      	beq.n	801b9fe <prvTaskExitError+0x2a>
	__asm volatile
 801b9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b9ec:	f383 8811 	msr	BASEPRI, r3
 801b9f0:	f3bf 8f6f 	isb	sy
 801b9f4:	f3bf 8f4f 	dsb	sy
 801b9f8:	60fb      	str	r3, [r7, #12]
}
 801b9fa:	bf00      	nop
 801b9fc:	e7fe      	b.n	801b9fc <prvTaskExitError+0x28>
	__asm volatile
 801b9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba02:	f383 8811 	msr	BASEPRI, r3
 801ba06:	f3bf 8f6f 	isb	sy
 801ba0a:	f3bf 8f4f 	dsb	sy
 801ba0e:	60bb      	str	r3, [r7, #8]
}
 801ba10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801ba12:	bf00      	nop
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d0fc      	beq.n	801ba14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801ba1a:	bf00      	nop
 801ba1c:	bf00      	nop
 801ba1e:	3714      	adds	r7, #20
 801ba20:	46bd      	mov	sp, r7
 801ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba26:	4770      	bx	lr
 801ba28:	240000f0 	.word	0x240000f0
 801ba2c:	00000000 	.word	0x00000000

0801ba30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801ba30:	4b07      	ldr	r3, [pc, #28]	; (801ba50 <pxCurrentTCBConst2>)
 801ba32:	6819      	ldr	r1, [r3, #0]
 801ba34:	6808      	ldr	r0, [r1, #0]
 801ba36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba3a:	f380 8809 	msr	PSP, r0
 801ba3e:	f3bf 8f6f 	isb	sy
 801ba42:	f04f 0000 	mov.w	r0, #0
 801ba46:	f380 8811 	msr	BASEPRI, r0
 801ba4a:	4770      	bx	lr
 801ba4c:	f3af 8000 	nop.w

0801ba50 <pxCurrentTCBConst2>:
 801ba50:	24002f98 	.word	0x24002f98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801ba54:	bf00      	nop
 801ba56:	bf00      	nop

0801ba58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801ba58:	4808      	ldr	r0, [pc, #32]	; (801ba7c <prvPortStartFirstTask+0x24>)
 801ba5a:	6800      	ldr	r0, [r0, #0]
 801ba5c:	6800      	ldr	r0, [r0, #0]
 801ba5e:	f380 8808 	msr	MSP, r0
 801ba62:	f04f 0000 	mov.w	r0, #0
 801ba66:	f380 8814 	msr	CONTROL, r0
 801ba6a:	b662      	cpsie	i
 801ba6c:	b661      	cpsie	f
 801ba6e:	f3bf 8f4f 	dsb	sy
 801ba72:	f3bf 8f6f 	isb	sy
 801ba76:	df00      	svc	0
 801ba78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801ba7a:	bf00      	nop
 801ba7c:	e000ed08 	.word	0xe000ed08

0801ba80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801ba80:	b580      	push	{r7, lr}
 801ba82:	b086      	sub	sp, #24
 801ba84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801ba86:	4b46      	ldr	r3, [pc, #280]	; (801bba0 <xPortStartScheduler+0x120>)
 801ba88:	681b      	ldr	r3, [r3, #0]
 801ba8a:	4a46      	ldr	r2, [pc, #280]	; (801bba4 <xPortStartScheduler+0x124>)
 801ba8c:	4293      	cmp	r3, r2
 801ba8e:	d10a      	bne.n	801baa6 <xPortStartScheduler+0x26>
	__asm volatile
 801ba90:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ba94:	f383 8811 	msr	BASEPRI, r3
 801ba98:	f3bf 8f6f 	isb	sy
 801ba9c:	f3bf 8f4f 	dsb	sy
 801baa0:	613b      	str	r3, [r7, #16]
}
 801baa2:	bf00      	nop
 801baa4:	e7fe      	b.n	801baa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801baa6:	4b3e      	ldr	r3, [pc, #248]	; (801bba0 <xPortStartScheduler+0x120>)
 801baa8:	681b      	ldr	r3, [r3, #0]
 801baaa:	4a3f      	ldr	r2, [pc, #252]	; (801bba8 <xPortStartScheduler+0x128>)
 801baac:	4293      	cmp	r3, r2
 801baae:	d10a      	bne.n	801bac6 <xPortStartScheduler+0x46>
	__asm volatile
 801bab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bab4:	f383 8811 	msr	BASEPRI, r3
 801bab8:	f3bf 8f6f 	isb	sy
 801babc:	f3bf 8f4f 	dsb	sy
 801bac0:	60fb      	str	r3, [r7, #12]
}
 801bac2:	bf00      	nop
 801bac4:	e7fe      	b.n	801bac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801bac6:	4b39      	ldr	r3, [pc, #228]	; (801bbac <xPortStartScheduler+0x12c>)
 801bac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801baca:	697b      	ldr	r3, [r7, #20]
 801bacc:	781b      	ldrb	r3, [r3, #0]
 801bace:	b2db      	uxtb	r3, r3
 801bad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801bad2:	697b      	ldr	r3, [r7, #20]
 801bad4:	22ff      	movs	r2, #255	; 0xff
 801bad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801bad8:	697b      	ldr	r3, [r7, #20]
 801bada:	781b      	ldrb	r3, [r3, #0]
 801badc:	b2db      	uxtb	r3, r3
 801bade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801bae0:	78fb      	ldrb	r3, [r7, #3]
 801bae2:	b2db      	uxtb	r3, r3
 801bae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801bae8:	b2da      	uxtb	r2, r3
 801baea:	4b31      	ldr	r3, [pc, #196]	; (801bbb0 <xPortStartScheduler+0x130>)
 801baec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801baee:	4b31      	ldr	r3, [pc, #196]	; (801bbb4 <xPortStartScheduler+0x134>)
 801baf0:	2207      	movs	r2, #7
 801baf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801baf4:	e009      	b.n	801bb0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801baf6:	4b2f      	ldr	r3, [pc, #188]	; (801bbb4 <xPortStartScheduler+0x134>)
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	3b01      	subs	r3, #1
 801bafc:	4a2d      	ldr	r2, [pc, #180]	; (801bbb4 <xPortStartScheduler+0x134>)
 801bafe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801bb00:	78fb      	ldrb	r3, [r7, #3]
 801bb02:	b2db      	uxtb	r3, r3
 801bb04:	005b      	lsls	r3, r3, #1
 801bb06:	b2db      	uxtb	r3, r3
 801bb08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801bb0a:	78fb      	ldrb	r3, [r7, #3]
 801bb0c:	b2db      	uxtb	r3, r3
 801bb0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bb12:	2b80      	cmp	r3, #128	; 0x80
 801bb14:	d0ef      	beq.n	801baf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801bb16:	4b27      	ldr	r3, [pc, #156]	; (801bbb4 <xPortStartScheduler+0x134>)
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	f1c3 0307 	rsb	r3, r3, #7
 801bb1e:	2b04      	cmp	r3, #4
 801bb20:	d00a      	beq.n	801bb38 <xPortStartScheduler+0xb8>
	__asm volatile
 801bb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bb26:	f383 8811 	msr	BASEPRI, r3
 801bb2a:	f3bf 8f6f 	isb	sy
 801bb2e:	f3bf 8f4f 	dsb	sy
 801bb32:	60bb      	str	r3, [r7, #8]
}
 801bb34:	bf00      	nop
 801bb36:	e7fe      	b.n	801bb36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801bb38:	4b1e      	ldr	r3, [pc, #120]	; (801bbb4 <xPortStartScheduler+0x134>)
 801bb3a:	681b      	ldr	r3, [r3, #0]
 801bb3c:	021b      	lsls	r3, r3, #8
 801bb3e:	4a1d      	ldr	r2, [pc, #116]	; (801bbb4 <xPortStartScheduler+0x134>)
 801bb40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801bb42:	4b1c      	ldr	r3, [pc, #112]	; (801bbb4 <xPortStartScheduler+0x134>)
 801bb44:	681b      	ldr	r3, [r3, #0]
 801bb46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801bb4a:	4a1a      	ldr	r2, [pc, #104]	; (801bbb4 <xPortStartScheduler+0x134>)
 801bb4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	b2da      	uxtb	r2, r3
 801bb52:	697b      	ldr	r3, [r7, #20]
 801bb54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801bb56:	4b18      	ldr	r3, [pc, #96]	; (801bbb8 <xPortStartScheduler+0x138>)
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	4a17      	ldr	r2, [pc, #92]	; (801bbb8 <xPortStartScheduler+0x138>)
 801bb5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801bb60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801bb62:	4b15      	ldr	r3, [pc, #84]	; (801bbb8 <xPortStartScheduler+0x138>)
 801bb64:	681b      	ldr	r3, [r3, #0]
 801bb66:	4a14      	ldr	r2, [pc, #80]	; (801bbb8 <xPortStartScheduler+0x138>)
 801bb68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801bb6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801bb6e:	f000 f8dd 	bl	801bd2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801bb72:	4b12      	ldr	r3, [pc, #72]	; (801bbbc <xPortStartScheduler+0x13c>)
 801bb74:	2200      	movs	r2, #0
 801bb76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801bb78:	f000 f8fc 	bl	801bd74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801bb7c:	4b10      	ldr	r3, [pc, #64]	; (801bbc0 <xPortStartScheduler+0x140>)
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	4a0f      	ldr	r2, [pc, #60]	; (801bbc0 <xPortStartScheduler+0x140>)
 801bb82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801bb86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801bb88:	f7ff ff66 	bl	801ba58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801bb8c:	f7fe ff70 	bl	801aa70 <vTaskSwitchContext>
	prvTaskExitError();
 801bb90:	f7ff ff20 	bl	801b9d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801bb94:	2300      	movs	r3, #0
}
 801bb96:	4618      	mov	r0, r3
 801bb98:	3718      	adds	r7, #24
 801bb9a:	46bd      	mov	sp, r7
 801bb9c:	bd80      	pop	{r7, pc}
 801bb9e:	bf00      	nop
 801bba0:	e000ed00 	.word	0xe000ed00
 801bba4:	410fc271 	.word	0x410fc271
 801bba8:	410fc270 	.word	0x410fc270
 801bbac:	e000e400 	.word	0xe000e400
 801bbb0:	240035c4 	.word	0x240035c4
 801bbb4:	240035c8 	.word	0x240035c8
 801bbb8:	e000ed20 	.word	0xe000ed20
 801bbbc:	240000f0 	.word	0x240000f0
 801bbc0:	e000ef34 	.word	0xe000ef34

0801bbc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801bbc4:	b480      	push	{r7}
 801bbc6:	b083      	sub	sp, #12
 801bbc8:	af00      	add	r7, sp, #0
	__asm volatile
 801bbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bbce:	f383 8811 	msr	BASEPRI, r3
 801bbd2:	f3bf 8f6f 	isb	sy
 801bbd6:	f3bf 8f4f 	dsb	sy
 801bbda:	607b      	str	r3, [r7, #4]
}
 801bbdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801bbde:	4b0f      	ldr	r3, [pc, #60]	; (801bc1c <vPortEnterCritical+0x58>)
 801bbe0:	681b      	ldr	r3, [r3, #0]
 801bbe2:	3301      	adds	r3, #1
 801bbe4:	4a0d      	ldr	r2, [pc, #52]	; (801bc1c <vPortEnterCritical+0x58>)
 801bbe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801bbe8:	4b0c      	ldr	r3, [pc, #48]	; (801bc1c <vPortEnterCritical+0x58>)
 801bbea:	681b      	ldr	r3, [r3, #0]
 801bbec:	2b01      	cmp	r3, #1
 801bbee:	d10f      	bne.n	801bc10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801bbf0:	4b0b      	ldr	r3, [pc, #44]	; (801bc20 <vPortEnterCritical+0x5c>)
 801bbf2:	681b      	ldr	r3, [r3, #0]
 801bbf4:	b2db      	uxtb	r3, r3
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d00a      	beq.n	801bc10 <vPortEnterCritical+0x4c>
	__asm volatile
 801bbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bbfe:	f383 8811 	msr	BASEPRI, r3
 801bc02:	f3bf 8f6f 	isb	sy
 801bc06:	f3bf 8f4f 	dsb	sy
 801bc0a:	603b      	str	r3, [r7, #0]
}
 801bc0c:	bf00      	nop
 801bc0e:	e7fe      	b.n	801bc0e <vPortEnterCritical+0x4a>
	}
}
 801bc10:	bf00      	nop
 801bc12:	370c      	adds	r7, #12
 801bc14:	46bd      	mov	sp, r7
 801bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc1a:	4770      	bx	lr
 801bc1c:	240000f0 	.word	0x240000f0
 801bc20:	e000ed04 	.word	0xe000ed04

0801bc24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801bc24:	b480      	push	{r7}
 801bc26:	b083      	sub	sp, #12
 801bc28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801bc2a:	4b12      	ldr	r3, [pc, #72]	; (801bc74 <vPortExitCritical+0x50>)
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d10a      	bne.n	801bc48 <vPortExitCritical+0x24>
	__asm volatile
 801bc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bc36:	f383 8811 	msr	BASEPRI, r3
 801bc3a:	f3bf 8f6f 	isb	sy
 801bc3e:	f3bf 8f4f 	dsb	sy
 801bc42:	607b      	str	r3, [r7, #4]
}
 801bc44:	bf00      	nop
 801bc46:	e7fe      	b.n	801bc46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801bc48:	4b0a      	ldr	r3, [pc, #40]	; (801bc74 <vPortExitCritical+0x50>)
 801bc4a:	681b      	ldr	r3, [r3, #0]
 801bc4c:	3b01      	subs	r3, #1
 801bc4e:	4a09      	ldr	r2, [pc, #36]	; (801bc74 <vPortExitCritical+0x50>)
 801bc50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801bc52:	4b08      	ldr	r3, [pc, #32]	; (801bc74 <vPortExitCritical+0x50>)
 801bc54:	681b      	ldr	r3, [r3, #0]
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	d105      	bne.n	801bc66 <vPortExitCritical+0x42>
 801bc5a:	2300      	movs	r3, #0
 801bc5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801bc5e:	683b      	ldr	r3, [r7, #0]
 801bc60:	f383 8811 	msr	BASEPRI, r3
}
 801bc64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801bc66:	bf00      	nop
 801bc68:	370c      	adds	r7, #12
 801bc6a:	46bd      	mov	sp, r7
 801bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc70:	4770      	bx	lr
 801bc72:	bf00      	nop
 801bc74:	240000f0 	.word	0x240000f0
	...

0801bc80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801bc80:	f3ef 8009 	mrs	r0, PSP
 801bc84:	f3bf 8f6f 	isb	sy
 801bc88:	4b15      	ldr	r3, [pc, #84]	; (801bce0 <pxCurrentTCBConst>)
 801bc8a:	681a      	ldr	r2, [r3, #0]
 801bc8c:	f01e 0f10 	tst.w	lr, #16
 801bc90:	bf08      	it	eq
 801bc92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801bc96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc9a:	6010      	str	r0, [r2, #0]
 801bc9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801bca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 801bca4:	f380 8811 	msr	BASEPRI, r0
 801bca8:	f3bf 8f4f 	dsb	sy
 801bcac:	f3bf 8f6f 	isb	sy
 801bcb0:	f7fe fede 	bl	801aa70 <vTaskSwitchContext>
 801bcb4:	f04f 0000 	mov.w	r0, #0
 801bcb8:	f380 8811 	msr	BASEPRI, r0
 801bcbc:	bc09      	pop	{r0, r3}
 801bcbe:	6819      	ldr	r1, [r3, #0]
 801bcc0:	6808      	ldr	r0, [r1, #0]
 801bcc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcc6:	f01e 0f10 	tst.w	lr, #16
 801bcca:	bf08      	it	eq
 801bccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801bcd0:	f380 8809 	msr	PSP, r0
 801bcd4:	f3bf 8f6f 	isb	sy
 801bcd8:	4770      	bx	lr
 801bcda:	bf00      	nop
 801bcdc:	f3af 8000 	nop.w

0801bce0 <pxCurrentTCBConst>:
 801bce0:	24002f98 	.word	0x24002f98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801bce4:	bf00      	nop
 801bce6:	bf00      	nop

0801bce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801bce8:	b580      	push	{r7, lr}
 801bcea:	b082      	sub	sp, #8
 801bcec:	af00      	add	r7, sp, #0
	__asm volatile
 801bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bcf2:	f383 8811 	msr	BASEPRI, r3
 801bcf6:	f3bf 8f6f 	isb	sy
 801bcfa:	f3bf 8f4f 	dsb	sy
 801bcfe:	607b      	str	r3, [r7, #4]
}
 801bd00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801bd02:	f7fe fdf3 	bl	801a8ec <xTaskIncrementTick>
 801bd06:	4603      	mov	r3, r0
 801bd08:	2b00      	cmp	r3, #0
 801bd0a:	d003      	beq.n	801bd14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801bd0c:	4b06      	ldr	r3, [pc, #24]	; (801bd28 <xPortSysTickHandler+0x40>)
 801bd0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801bd12:	601a      	str	r2, [r3, #0]
 801bd14:	2300      	movs	r3, #0
 801bd16:	603b      	str	r3, [r7, #0]
	__asm volatile
 801bd18:	683b      	ldr	r3, [r7, #0]
 801bd1a:	f383 8811 	msr	BASEPRI, r3
}
 801bd1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801bd20:	bf00      	nop
 801bd22:	3708      	adds	r7, #8
 801bd24:	46bd      	mov	sp, r7
 801bd26:	bd80      	pop	{r7, pc}
 801bd28:	e000ed04 	.word	0xe000ed04

0801bd2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801bd2c:	b480      	push	{r7}
 801bd2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801bd30:	4b0b      	ldr	r3, [pc, #44]	; (801bd60 <vPortSetupTimerInterrupt+0x34>)
 801bd32:	2200      	movs	r2, #0
 801bd34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801bd36:	4b0b      	ldr	r3, [pc, #44]	; (801bd64 <vPortSetupTimerInterrupt+0x38>)
 801bd38:	2200      	movs	r2, #0
 801bd3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801bd3c:	4b0a      	ldr	r3, [pc, #40]	; (801bd68 <vPortSetupTimerInterrupt+0x3c>)
 801bd3e:	681b      	ldr	r3, [r3, #0]
 801bd40:	4a0a      	ldr	r2, [pc, #40]	; (801bd6c <vPortSetupTimerInterrupt+0x40>)
 801bd42:	fba2 2303 	umull	r2, r3, r2, r3
 801bd46:	099b      	lsrs	r3, r3, #6
 801bd48:	4a09      	ldr	r2, [pc, #36]	; (801bd70 <vPortSetupTimerInterrupt+0x44>)
 801bd4a:	3b01      	subs	r3, #1
 801bd4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801bd4e:	4b04      	ldr	r3, [pc, #16]	; (801bd60 <vPortSetupTimerInterrupt+0x34>)
 801bd50:	2207      	movs	r2, #7
 801bd52:	601a      	str	r2, [r3, #0]
}
 801bd54:	bf00      	nop
 801bd56:	46bd      	mov	sp, r7
 801bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd5c:	4770      	bx	lr
 801bd5e:	bf00      	nop
 801bd60:	e000e010 	.word	0xe000e010
 801bd64:	e000e018 	.word	0xe000e018
 801bd68:	240000e0 	.word	0x240000e0
 801bd6c:	10624dd3 	.word	0x10624dd3
 801bd70:	e000e014 	.word	0xe000e014

0801bd74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801bd74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801bd84 <vPortEnableVFP+0x10>
 801bd78:	6801      	ldr	r1, [r0, #0]
 801bd7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801bd7e:	6001      	str	r1, [r0, #0]
 801bd80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801bd82:	bf00      	nop
 801bd84:	e000ed88 	.word	0xe000ed88

0801bd88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801bd88:	b480      	push	{r7}
 801bd8a:	b085      	sub	sp, #20
 801bd8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801bd8e:	f3ef 8305 	mrs	r3, IPSR
 801bd92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801bd94:	68fb      	ldr	r3, [r7, #12]
 801bd96:	2b0f      	cmp	r3, #15
 801bd98:	d914      	bls.n	801bdc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801bd9a:	4a17      	ldr	r2, [pc, #92]	; (801bdf8 <vPortValidateInterruptPriority+0x70>)
 801bd9c:	68fb      	ldr	r3, [r7, #12]
 801bd9e:	4413      	add	r3, r2
 801bda0:	781b      	ldrb	r3, [r3, #0]
 801bda2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801bda4:	4b15      	ldr	r3, [pc, #84]	; (801bdfc <vPortValidateInterruptPriority+0x74>)
 801bda6:	781b      	ldrb	r3, [r3, #0]
 801bda8:	7afa      	ldrb	r2, [r7, #11]
 801bdaa:	429a      	cmp	r2, r3
 801bdac:	d20a      	bcs.n	801bdc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bdb2:	f383 8811 	msr	BASEPRI, r3
 801bdb6:	f3bf 8f6f 	isb	sy
 801bdba:	f3bf 8f4f 	dsb	sy
 801bdbe:	607b      	str	r3, [r7, #4]
}
 801bdc0:	bf00      	nop
 801bdc2:	e7fe      	b.n	801bdc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801bdc4:	4b0e      	ldr	r3, [pc, #56]	; (801be00 <vPortValidateInterruptPriority+0x78>)
 801bdc6:	681b      	ldr	r3, [r3, #0]
 801bdc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801bdcc:	4b0d      	ldr	r3, [pc, #52]	; (801be04 <vPortValidateInterruptPriority+0x7c>)
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	429a      	cmp	r2, r3
 801bdd2:	d90a      	bls.n	801bdea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801bdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bdd8:	f383 8811 	msr	BASEPRI, r3
 801bddc:	f3bf 8f6f 	isb	sy
 801bde0:	f3bf 8f4f 	dsb	sy
 801bde4:	603b      	str	r3, [r7, #0]
}
 801bde6:	bf00      	nop
 801bde8:	e7fe      	b.n	801bde8 <vPortValidateInterruptPriority+0x60>
	}
 801bdea:	bf00      	nop
 801bdec:	3714      	adds	r7, #20
 801bdee:	46bd      	mov	sp, r7
 801bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdf4:	4770      	bx	lr
 801bdf6:	bf00      	nop
 801bdf8:	e000e3f0 	.word	0xe000e3f0
 801bdfc:	240035c4 	.word	0x240035c4
 801be00:	e000ed0c 	.word	0xe000ed0c
 801be04:	240035c8 	.word	0x240035c8

0801be08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b08a      	sub	sp, #40	; 0x28
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801be10:	2300      	movs	r3, #0
 801be12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801be14:	f7fe fcae 	bl	801a774 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801be18:	4b5b      	ldr	r3, [pc, #364]	; (801bf88 <pvPortMalloc+0x180>)
 801be1a:	681b      	ldr	r3, [r3, #0]
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d101      	bne.n	801be24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801be20:	f000 f920 	bl	801c064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801be24:	4b59      	ldr	r3, [pc, #356]	; (801bf8c <pvPortMalloc+0x184>)
 801be26:	681a      	ldr	r2, [r3, #0]
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	4013      	ands	r3, r2
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	f040 8093 	bne.w	801bf58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801be32:	687b      	ldr	r3, [r7, #4]
 801be34:	2b00      	cmp	r3, #0
 801be36:	d01d      	beq.n	801be74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801be38:	2208      	movs	r2, #8
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	4413      	add	r3, r2
 801be3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	f003 0307 	and.w	r3, r3, #7
 801be46:	2b00      	cmp	r3, #0
 801be48:	d014      	beq.n	801be74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	f023 0307 	bic.w	r3, r3, #7
 801be50:	3308      	adds	r3, #8
 801be52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	f003 0307 	and.w	r3, r3, #7
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d00a      	beq.n	801be74 <pvPortMalloc+0x6c>
	__asm volatile
 801be5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801be62:	f383 8811 	msr	BASEPRI, r3
 801be66:	f3bf 8f6f 	isb	sy
 801be6a:	f3bf 8f4f 	dsb	sy
 801be6e:	617b      	str	r3, [r7, #20]
}
 801be70:	bf00      	nop
 801be72:	e7fe      	b.n	801be72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	2b00      	cmp	r3, #0
 801be78:	d06e      	beq.n	801bf58 <pvPortMalloc+0x150>
 801be7a:	4b45      	ldr	r3, [pc, #276]	; (801bf90 <pvPortMalloc+0x188>)
 801be7c:	681b      	ldr	r3, [r3, #0]
 801be7e:	687a      	ldr	r2, [r7, #4]
 801be80:	429a      	cmp	r2, r3
 801be82:	d869      	bhi.n	801bf58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801be84:	4b43      	ldr	r3, [pc, #268]	; (801bf94 <pvPortMalloc+0x18c>)
 801be86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801be88:	4b42      	ldr	r3, [pc, #264]	; (801bf94 <pvPortMalloc+0x18c>)
 801be8a:	681b      	ldr	r3, [r3, #0]
 801be8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801be8e:	e004      	b.n	801be9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801be90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be96:	681b      	ldr	r3, [r3, #0]
 801be98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801be9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be9c:	685b      	ldr	r3, [r3, #4]
 801be9e:	687a      	ldr	r2, [r7, #4]
 801bea0:	429a      	cmp	r2, r3
 801bea2:	d903      	bls.n	801beac <pvPortMalloc+0xa4>
 801bea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bea6:	681b      	ldr	r3, [r3, #0]
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	d1f1      	bne.n	801be90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801beac:	4b36      	ldr	r3, [pc, #216]	; (801bf88 <pvPortMalloc+0x180>)
 801beae:	681b      	ldr	r3, [r3, #0]
 801beb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801beb2:	429a      	cmp	r2, r3
 801beb4:	d050      	beq.n	801bf58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801beb6:	6a3b      	ldr	r3, [r7, #32]
 801beb8:	681b      	ldr	r3, [r3, #0]
 801beba:	2208      	movs	r2, #8
 801bebc:	4413      	add	r3, r2
 801bebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bec2:	681a      	ldr	r2, [r3, #0]
 801bec4:	6a3b      	ldr	r3, [r7, #32]
 801bec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801bec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801beca:	685a      	ldr	r2, [r3, #4]
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	1ad2      	subs	r2, r2, r3
 801bed0:	2308      	movs	r3, #8
 801bed2:	005b      	lsls	r3, r3, #1
 801bed4:	429a      	cmp	r2, r3
 801bed6:	d91f      	bls.n	801bf18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801bed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	4413      	add	r3, r2
 801bede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801bee0:	69bb      	ldr	r3, [r7, #24]
 801bee2:	f003 0307 	and.w	r3, r3, #7
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d00a      	beq.n	801bf00 <pvPortMalloc+0xf8>
	__asm volatile
 801beea:	f04f 0350 	mov.w	r3, #80	; 0x50
 801beee:	f383 8811 	msr	BASEPRI, r3
 801bef2:	f3bf 8f6f 	isb	sy
 801bef6:	f3bf 8f4f 	dsb	sy
 801befa:	613b      	str	r3, [r7, #16]
}
 801befc:	bf00      	nop
 801befe:	e7fe      	b.n	801befe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801bf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf02:	685a      	ldr	r2, [r3, #4]
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	1ad2      	subs	r2, r2, r3
 801bf08:	69bb      	ldr	r3, [r7, #24]
 801bf0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801bf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf0e:	687a      	ldr	r2, [r7, #4]
 801bf10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801bf12:	69b8      	ldr	r0, [r7, #24]
 801bf14:	f000 f908 	bl	801c128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801bf18:	4b1d      	ldr	r3, [pc, #116]	; (801bf90 <pvPortMalloc+0x188>)
 801bf1a:	681a      	ldr	r2, [r3, #0]
 801bf1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf1e:	685b      	ldr	r3, [r3, #4]
 801bf20:	1ad3      	subs	r3, r2, r3
 801bf22:	4a1b      	ldr	r2, [pc, #108]	; (801bf90 <pvPortMalloc+0x188>)
 801bf24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801bf26:	4b1a      	ldr	r3, [pc, #104]	; (801bf90 <pvPortMalloc+0x188>)
 801bf28:	681a      	ldr	r2, [r3, #0]
 801bf2a:	4b1b      	ldr	r3, [pc, #108]	; (801bf98 <pvPortMalloc+0x190>)
 801bf2c:	681b      	ldr	r3, [r3, #0]
 801bf2e:	429a      	cmp	r2, r3
 801bf30:	d203      	bcs.n	801bf3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801bf32:	4b17      	ldr	r3, [pc, #92]	; (801bf90 <pvPortMalloc+0x188>)
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	4a18      	ldr	r2, [pc, #96]	; (801bf98 <pvPortMalloc+0x190>)
 801bf38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801bf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf3c:	685a      	ldr	r2, [r3, #4]
 801bf3e:	4b13      	ldr	r3, [pc, #76]	; (801bf8c <pvPortMalloc+0x184>)
 801bf40:	681b      	ldr	r3, [r3, #0]
 801bf42:	431a      	orrs	r2, r3
 801bf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801bf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf4a:	2200      	movs	r2, #0
 801bf4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801bf4e:	4b13      	ldr	r3, [pc, #76]	; (801bf9c <pvPortMalloc+0x194>)
 801bf50:	681b      	ldr	r3, [r3, #0]
 801bf52:	3301      	adds	r3, #1
 801bf54:	4a11      	ldr	r2, [pc, #68]	; (801bf9c <pvPortMalloc+0x194>)
 801bf56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801bf58:	f7fe fc1a 	bl	801a790 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801bf5c:	69fb      	ldr	r3, [r7, #28]
 801bf5e:	f003 0307 	and.w	r3, r3, #7
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	d00a      	beq.n	801bf7c <pvPortMalloc+0x174>
	__asm volatile
 801bf66:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bf6a:	f383 8811 	msr	BASEPRI, r3
 801bf6e:	f3bf 8f6f 	isb	sy
 801bf72:	f3bf 8f4f 	dsb	sy
 801bf76:	60fb      	str	r3, [r7, #12]
}
 801bf78:	bf00      	nop
 801bf7a:	e7fe      	b.n	801bf7a <pvPortMalloc+0x172>
	return pvReturn;
 801bf7c:	69fb      	ldr	r3, [r7, #28]
}
 801bf7e:	4618      	mov	r0, r3
 801bf80:	3728      	adds	r7, #40	; 0x28
 801bf82:	46bd      	mov	sp, r7
 801bf84:	bd80      	pop	{r7, pc}
 801bf86:	bf00      	nop
 801bf88:	240071d4 	.word	0x240071d4
 801bf8c:	240071e8 	.word	0x240071e8
 801bf90:	240071d8 	.word	0x240071d8
 801bf94:	240071cc 	.word	0x240071cc
 801bf98:	240071dc 	.word	0x240071dc
 801bf9c:	240071e0 	.word	0x240071e0

0801bfa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801bfa0:	b580      	push	{r7, lr}
 801bfa2:	b086      	sub	sp, #24
 801bfa4:	af00      	add	r7, sp, #0
 801bfa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d04d      	beq.n	801c04e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801bfb2:	2308      	movs	r3, #8
 801bfb4:	425b      	negs	r3, r3
 801bfb6:	697a      	ldr	r2, [r7, #20]
 801bfb8:	4413      	add	r3, r2
 801bfba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801bfbc:	697b      	ldr	r3, [r7, #20]
 801bfbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801bfc0:	693b      	ldr	r3, [r7, #16]
 801bfc2:	685a      	ldr	r2, [r3, #4]
 801bfc4:	4b24      	ldr	r3, [pc, #144]	; (801c058 <vPortFree+0xb8>)
 801bfc6:	681b      	ldr	r3, [r3, #0]
 801bfc8:	4013      	ands	r3, r2
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	d10a      	bne.n	801bfe4 <vPortFree+0x44>
	__asm volatile
 801bfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bfd2:	f383 8811 	msr	BASEPRI, r3
 801bfd6:	f3bf 8f6f 	isb	sy
 801bfda:	f3bf 8f4f 	dsb	sy
 801bfde:	60fb      	str	r3, [r7, #12]
}
 801bfe0:	bf00      	nop
 801bfe2:	e7fe      	b.n	801bfe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801bfe4:	693b      	ldr	r3, [r7, #16]
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d00a      	beq.n	801c002 <vPortFree+0x62>
	__asm volatile
 801bfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 801bff0:	f383 8811 	msr	BASEPRI, r3
 801bff4:	f3bf 8f6f 	isb	sy
 801bff8:	f3bf 8f4f 	dsb	sy
 801bffc:	60bb      	str	r3, [r7, #8]
}
 801bffe:	bf00      	nop
 801c000:	e7fe      	b.n	801c000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801c002:	693b      	ldr	r3, [r7, #16]
 801c004:	685a      	ldr	r2, [r3, #4]
 801c006:	4b14      	ldr	r3, [pc, #80]	; (801c058 <vPortFree+0xb8>)
 801c008:	681b      	ldr	r3, [r3, #0]
 801c00a:	4013      	ands	r3, r2
 801c00c:	2b00      	cmp	r3, #0
 801c00e:	d01e      	beq.n	801c04e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801c010:	693b      	ldr	r3, [r7, #16]
 801c012:	681b      	ldr	r3, [r3, #0]
 801c014:	2b00      	cmp	r3, #0
 801c016:	d11a      	bne.n	801c04e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801c018:	693b      	ldr	r3, [r7, #16]
 801c01a:	685a      	ldr	r2, [r3, #4]
 801c01c:	4b0e      	ldr	r3, [pc, #56]	; (801c058 <vPortFree+0xb8>)
 801c01e:	681b      	ldr	r3, [r3, #0]
 801c020:	43db      	mvns	r3, r3
 801c022:	401a      	ands	r2, r3
 801c024:	693b      	ldr	r3, [r7, #16]
 801c026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801c028:	f7fe fba4 	bl	801a774 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801c02c:	693b      	ldr	r3, [r7, #16]
 801c02e:	685a      	ldr	r2, [r3, #4]
 801c030:	4b0a      	ldr	r3, [pc, #40]	; (801c05c <vPortFree+0xbc>)
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	4413      	add	r3, r2
 801c036:	4a09      	ldr	r2, [pc, #36]	; (801c05c <vPortFree+0xbc>)
 801c038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801c03a:	6938      	ldr	r0, [r7, #16]
 801c03c:	f000 f874 	bl	801c128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801c040:	4b07      	ldr	r3, [pc, #28]	; (801c060 <vPortFree+0xc0>)
 801c042:	681b      	ldr	r3, [r3, #0]
 801c044:	3301      	adds	r3, #1
 801c046:	4a06      	ldr	r2, [pc, #24]	; (801c060 <vPortFree+0xc0>)
 801c048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801c04a:	f7fe fba1 	bl	801a790 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801c04e:	bf00      	nop
 801c050:	3718      	adds	r7, #24
 801c052:	46bd      	mov	sp, r7
 801c054:	bd80      	pop	{r7, pc}
 801c056:	bf00      	nop
 801c058:	240071e8 	.word	0x240071e8
 801c05c:	240071d8 	.word	0x240071d8
 801c060:	240071e4 	.word	0x240071e4

0801c064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801c064:	b480      	push	{r7}
 801c066:	b085      	sub	sp, #20
 801c068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801c06a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801c06e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801c070:	4b27      	ldr	r3, [pc, #156]	; (801c110 <prvHeapInit+0xac>)
 801c072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801c074:	68fb      	ldr	r3, [r7, #12]
 801c076:	f003 0307 	and.w	r3, r3, #7
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d00c      	beq.n	801c098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801c07e:	68fb      	ldr	r3, [r7, #12]
 801c080:	3307      	adds	r3, #7
 801c082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c084:	68fb      	ldr	r3, [r7, #12]
 801c086:	f023 0307 	bic.w	r3, r3, #7
 801c08a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801c08c:	68ba      	ldr	r2, [r7, #8]
 801c08e:	68fb      	ldr	r3, [r7, #12]
 801c090:	1ad3      	subs	r3, r2, r3
 801c092:	4a1f      	ldr	r2, [pc, #124]	; (801c110 <prvHeapInit+0xac>)
 801c094:	4413      	add	r3, r2
 801c096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801c09c:	4a1d      	ldr	r2, [pc, #116]	; (801c114 <prvHeapInit+0xb0>)
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801c0a2:	4b1c      	ldr	r3, [pc, #112]	; (801c114 <prvHeapInit+0xb0>)
 801c0a4:	2200      	movs	r2, #0
 801c0a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	68ba      	ldr	r2, [r7, #8]
 801c0ac:	4413      	add	r3, r2
 801c0ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801c0b0:	2208      	movs	r2, #8
 801c0b2:	68fb      	ldr	r3, [r7, #12]
 801c0b4:	1a9b      	subs	r3, r3, r2
 801c0b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801c0b8:	68fb      	ldr	r3, [r7, #12]
 801c0ba:	f023 0307 	bic.w	r3, r3, #7
 801c0be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801c0c0:	68fb      	ldr	r3, [r7, #12]
 801c0c2:	4a15      	ldr	r2, [pc, #84]	; (801c118 <prvHeapInit+0xb4>)
 801c0c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801c0c6:	4b14      	ldr	r3, [pc, #80]	; (801c118 <prvHeapInit+0xb4>)
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	2200      	movs	r2, #0
 801c0cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801c0ce:	4b12      	ldr	r3, [pc, #72]	; (801c118 <prvHeapInit+0xb4>)
 801c0d0:	681b      	ldr	r3, [r3, #0]
 801c0d2:	2200      	movs	r2, #0
 801c0d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801c0da:	683b      	ldr	r3, [r7, #0]
 801c0dc:	68fa      	ldr	r2, [r7, #12]
 801c0de:	1ad2      	subs	r2, r2, r3
 801c0e0:	683b      	ldr	r3, [r7, #0]
 801c0e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801c0e4:	4b0c      	ldr	r3, [pc, #48]	; (801c118 <prvHeapInit+0xb4>)
 801c0e6:	681a      	ldr	r2, [r3, #0]
 801c0e8:	683b      	ldr	r3, [r7, #0]
 801c0ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c0ec:	683b      	ldr	r3, [r7, #0]
 801c0ee:	685b      	ldr	r3, [r3, #4]
 801c0f0:	4a0a      	ldr	r2, [pc, #40]	; (801c11c <prvHeapInit+0xb8>)
 801c0f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801c0f4:	683b      	ldr	r3, [r7, #0]
 801c0f6:	685b      	ldr	r3, [r3, #4]
 801c0f8:	4a09      	ldr	r2, [pc, #36]	; (801c120 <prvHeapInit+0xbc>)
 801c0fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801c0fc:	4b09      	ldr	r3, [pc, #36]	; (801c124 <prvHeapInit+0xc0>)
 801c0fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801c102:	601a      	str	r2, [r3, #0]
}
 801c104:	bf00      	nop
 801c106:	3714      	adds	r7, #20
 801c108:	46bd      	mov	sp, r7
 801c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c10e:	4770      	bx	lr
 801c110:	240035cc 	.word	0x240035cc
 801c114:	240071cc 	.word	0x240071cc
 801c118:	240071d4 	.word	0x240071d4
 801c11c:	240071dc 	.word	0x240071dc
 801c120:	240071d8 	.word	0x240071d8
 801c124:	240071e8 	.word	0x240071e8

0801c128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801c128:	b480      	push	{r7}
 801c12a:	b085      	sub	sp, #20
 801c12c:	af00      	add	r7, sp, #0
 801c12e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801c130:	4b28      	ldr	r3, [pc, #160]	; (801c1d4 <prvInsertBlockIntoFreeList+0xac>)
 801c132:	60fb      	str	r3, [r7, #12]
 801c134:	e002      	b.n	801c13c <prvInsertBlockIntoFreeList+0x14>
 801c136:	68fb      	ldr	r3, [r7, #12]
 801c138:	681b      	ldr	r3, [r3, #0]
 801c13a:	60fb      	str	r3, [r7, #12]
 801c13c:	68fb      	ldr	r3, [r7, #12]
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	687a      	ldr	r2, [r7, #4]
 801c142:	429a      	cmp	r2, r3
 801c144:	d8f7      	bhi.n	801c136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801c146:	68fb      	ldr	r3, [r7, #12]
 801c148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	685b      	ldr	r3, [r3, #4]
 801c14e:	68ba      	ldr	r2, [r7, #8]
 801c150:	4413      	add	r3, r2
 801c152:	687a      	ldr	r2, [r7, #4]
 801c154:	429a      	cmp	r2, r3
 801c156:	d108      	bne.n	801c16a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801c158:	68fb      	ldr	r3, [r7, #12]
 801c15a:	685a      	ldr	r2, [r3, #4]
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	685b      	ldr	r3, [r3, #4]
 801c160:	441a      	add	r2, r3
 801c162:	68fb      	ldr	r3, [r7, #12]
 801c164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801c166:	68fb      	ldr	r3, [r7, #12]
 801c168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	685b      	ldr	r3, [r3, #4]
 801c172:	68ba      	ldr	r2, [r7, #8]
 801c174:	441a      	add	r2, r3
 801c176:	68fb      	ldr	r3, [r7, #12]
 801c178:	681b      	ldr	r3, [r3, #0]
 801c17a:	429a      	cmp	r2, r3
 801c17c:	d118      	bne.n	801c1b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801c17e:	68fb      	ldr	r3, [r7, #12]
 801c180:	681a      	ldr	r2, [r3, #0]
 801c182:	4b15      	ldr	r3, [pc, #84]	; (801c1d8 <prvInsertBlockIntoFreeList+0xb0>)
 801c184:	681b      	ldr	r3, [r3, #0]
 801c186:	429a      	cmp	r2, r3
 801c188:	d00d      	beq.n	801c1a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	685a      	ldr	r2, [r3, #4]
 801c18e:	68fb      	ldr	r3, [r7, #12]
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	685b      	ldr	r3, [r3, #4]
 801c194:	441a      	add	r2, r3
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	681a      	ldr	r2, [r3, #0]
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	601a      	str	r2, [r3, #0]
 801c1a4:	e008      	b.n	801c1b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801c1a6:	4b0c      	ldr	r3, [pc, #48]	; (801c1d8 <prvInsertBlockIntoFreeList+0xb0>)
 801c1a8:	681a      	ldr	r2, [r3, #0]
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	601a      	str	r2, [r3, #0]
 801c1ae:	e003      	b.n	801c1b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	681a      	ldr	r2, [r3, #0]
 801c1b4:	687b      	ldr	r3, [r7, #4]
 801c1b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801c1b8:	68fa      	ldr	r2, [r7, #12]
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	429a      	cmp	r2, r3
 801c1be:	d002      	beq.n	801c1c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801c1c0:	68fb      	ldr	r3, [r7, #12]
 801c1c2:	687a      	ldr	r2, [r7, #4]
 801c1c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801c1c6:	bf00      	nop
 801c1c8:	3714      	adds	r7, #20
 801c1ca:	46bd      	mov	sp, r7
 801c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1d0:	4770      	bx	lr
 801c1d2:	bf00      	nop
 801c1d4:	240071cc 	.word	0x240071cc
 801c1d8:	240071d4 	.word	0x240071d4

0801c1dc <__libc_init_array>:
 801c1dc:	b570      	push	{r4, r5, r6, lr}
 801c1de:	4d0d      	ldr	r5, [pc, #52]	; (801c214 <__libc_init_array+0x38>)
 801c1e0:	4c0d      	ldr	r4, [pc, #52]	; (801c218 <__libc_init_array+0x3c>)
 801c1e2:	1b64      	subs	r4, r4, r5
 801c1e4:	10a4      	asrs	r4, r4, #2
 801c1e6:	2600      	movs	r6, #0
 801c1e8:	42a6      	cmp	r6, r4
 801c1ea:	d109      	bne.n	801c200 <__libc_init_array+0x24>
 801c1ec:	4d0b      	ldr	r5, [pc, #44]	; (801c21c <__libc_init_array+0x40>)
 801c1ee:	4c0c      	ldr	r4, [pc, #48]	; (801c220 <__libc_init_array+0x44>)
 801c1f0:	f000 f82e 	bl	801c250 <_init>
 801c1f4:	1b64      	subs	r4, r4, r5
 801c1f6:	10a4      	asrs	r4, r4, #2
 801c1f8:	2600      	movs	r6, #0
 801c1fa:	42a6      	cmp	r6, r4
 801c1fc:	d105      	bne.n	801c20a <__libc_init_array+0x2e>
 801c1fe:	bd70      	pop	{r4, r5, r6, pc}
 801c200:	f855 3b04 	ldr.w	r3, [r5], #4
 801c204:	4798      	blx	r3
 801c206:	3601      	adds	r6, #1
 801c208:	e7ee      	b.n	801c1e8 <__libc_init_array+0xc>
 801c20a:	f855 3b04 	ldr.w	r3, [r5], #4
 801c20e:	4798      	blx	r3
 801c210:	3601      	adds	r6, #1
 801c212:	e7f2      	b.n	801c1fa <__libc_init_array+0x1e>
 801c214:	0801c50c 	.word	0x0801c50c
 801c218:	0801c50c 	.word	0x0801c50c
 801c21c:	0801c50c 	.word	0x0801c50c
 801c220:	0801c510 	.word	0x0801c510

0801c224 <memcpy>:
 801c224:	440a      	add	r2, r1
 801c226:	4291      	cmp	r1, r2
 801c228:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801c22c:	d100      	bne.n	801c230 <memcpy+0xc>
 801c22e:	4770      	bx	lr
 801c230:	b510      	push	{r4, lr}
 801c232:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c236:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c23a:	4291      	cmp	r1, r2
 801c23c:	d1f9      	bne.n	801c232 <memcpy+0xe>
 801c23e:	bd10      	pop	{r4, pc}

0801c240 <memset>:
 801c240:	4402      	add	r2, r0
 801c242:	4603      	mov	r3, r0
 801c244:	4293      	cmp	r3, r2
 801c246:	d100      	bne.n	801c24a <memset+0xa>
 801c248:	4770      	bx	lr
 801c24a:	f803 1b01 	strb.w	r1, [r3], #1
 801c24e:	e7f9      	b.n	801c244 <memset+0x4>

0801c250 <_init>:
 801c250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c252:	bf00      	nop
 801c254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c256:	bc08      	pop	{r3}
 801c258:	469e      	mov	lr, r3
 801c25a:	4770      	bx	lr

0801c25c <_fini>:
 801c25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c25e:	bf00      	nop
 801c260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c262:	bc08      	pop	{r3}
 801c264:	469e      	mov	lr, r3
 801c266:	4770      	bx	lr
